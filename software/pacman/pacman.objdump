
pacman.elf:     file format elf32-littlenios2
pacman.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001c2c4 memsz 0x0001c2c4 flags r-x
    LOAD off    0x0001d2e4 vaddr 0x0801c2e4 paddr 0x0801de14 align 2**12
         filesz 0x00001b30 memsz 0x00001b30 flags rw-
    LOAD off    0x0001f944 vaddr 0x0801f944 paddr 0x0801f944 align 2**12
         filesz 0x00000000 memsz 0x0012c2f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b85c  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000858  0801ba8c  0801ba8c  0001ca8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  0801c2e4  0801de14  0001d2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0012c39a  0801f944  0801f944  0001f944  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00000000  00000000  0001ee14  2**0
                  CONTENTS
  7 .sdram        00000000  0814bc34  0814bc34  0001ee14  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001ee14  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001480  00000000  00000000  0001ee38  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000373ed  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000d820  00000000  00000000  000576a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011b2a  00000000  00000000  00064ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003288  00000000  00000000  000769f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004f7c  00000000  00000000  00079c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002571b  00000000  00000000  0007ebf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000a4310  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002190  00000000  00000000  000a4350  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000aa846  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000f  00000000  00000000  000aa849  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000aa858  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000aa859  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000aa85a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000aa85e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000aa862  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000aa866  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000aa86f  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000aa878  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  000aa881  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000010  00000000  00000000  000aa88b  2**0
                  CONTENTS, READONLY
 30 .jdi          0000560b  00000000  00000000  000aa89b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008ac63  00000000  00000000  000afea6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
0801ba8c l    d  .rodata	00000000 .rodata
0801c2e4 l    d  .rwdata	00000000 .rwdata
0801f944 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory	00000000 .onchip_memory
0814bc34 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pacman_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0801f954 l     O .bss	00000004 usb_delay.2608
0801f958 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 vga_driver.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08002cc8 l     F .text	00000008 __fp_unlock
08002cdc l     F .text	0000019c __sinit.part.1
08002e78 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fscanf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0801c314 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
08004908 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801bbea l     O .rodata	00000010 zeroes.4404
08007084 l     F .text	000000bc __sbprintf
0801bbfa l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
0801bc12 l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0801bd35 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
08008da4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
0801cb60 l     O .rwdata	00000020 lc_ctype_charset
0801cb40 l     O .rwdata	00000020 lc_message_charset
0801cb80 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0801bed4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0800cf0c l     F .text	00000064 sulp
0801c008 l     O .rodata	00000014 fpinan.2773
0801c01c l     O .rodata	00000014 fpi.2737
0801c030 l     O .rodata	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801c058 l     O .rodata	00000010 zeroes.4389
0801c068 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
080116d4 l     F .text	000000fc __sprint_r.part.0
0801c078 l     O .rodata	00000010 zeroes.4349
08012d10 l     F .text	000000bc __sbprintf
0801c088 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
080130b0 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801c198 l     O .rodata	00000010 zeroes.4333
0801c1a8 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08018f64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08019078 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080190a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08019198 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08019280 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0801936c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
08019548 l     F .text	0000003c alt_get_errno
08019584 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
080197cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801de04 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08019c14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08019d50 l     F .text	00000034 alt_dev_reg
0801cd60 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0801a044 l     F .text	0000020c altera_avalon_jtag_uart_irq
0801a250 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0801aa84 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0801ae1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801b4d8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0801f998 g     O .bss	00000004 alt_instruction_exception_handler
0800c4e4 g     F .text	00000074 _mprec_log10
0800c5d0 g     F .text	0000008c __any_on
0800ae38 g     F .text	00000054 _isatty_r
0801bee0 g     O .rodata	00000028 __mprec_tinytens
08019484 g     F .text	0000007c alt_main
0801ddc0 g     O .rwdata	00000008 ctrl_xfers
08004834 g     F .text	000000c0 _puts_r
0814bb34 g     O .bss	00000100 alt_irq
0800af98 g     F .text	00000060 _lseek_r
08001d18 g     F .text	00000644 USB_Task
0801de14 g       *ABS*	00000000 __flash_rwdata_start
0800a654 g     F .text	000000ac __sflags
08017794 g     F .text	00000088 .hidden __eqdf2
0814bc34 g       *ABS*	00000000 __alt_heap_start
080025c8 g     F .text	0000002c vga_set_pixel_color_sender
080047f8 g     F .text	0000003c printf
080153f4 g     F .text	0000009c _wcrtomb_r
08000e3c g     F .text	00000088 kbdPoll
08004c90 g     F .text	0000005c __sseek
08003028 g     F .text	00000010 __sinit
0801529c g     F .text	00000140 __swbuf_r
0800aebc g     F .text	0000007c _setlocale_r
08002e80 g     F .text	00000078 __sfmoreglue
080116bc g     F .text	00000018 ungetc
08019524 g     F .text	00000024 __malloc_unlock
0800cf70 g     F .text	000015e4 _strtod_r
0800b448 g     F .text	0000015c memmove
08003010 g     F .text	00000018 _cleanup
0800b5a4 g     F .text	000000a8 _Balloc
08000f90 g     F .text	00000088 MAXreg_wr
0801c2e4 g     O .rwdata	00000030 ClientDriverTable
0801781c g     F .text	000000dc .hidden __gtdf2
0801b638 g     F .text	00000024 altera_nios2_gen2_irq_init
0800235c g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
08001818 g     F .text	000000e8 XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
0801f99c g     O .bss	00000010 hid_ep
08003a94 g     F .text	0000005c _fstat_r
0801f964 g     O .bss	00000004 errno
08008b34 g     F .text	0000001c __svfscanf
08004c0c g     F .text	00000008 __seofread
08013efc g     F .text	000013a0 ___svfiprintf_internal_r
0801f984 g     O .bss	00000004 alt_argv
08025dc0 g       *ABS*	00000000 _gp
08019be4 g     F .text	00000030 usleep
0800117c g     F .text	0000007c MAXreg_rd
080035b8 g     F .text	0000003c fscanf
0801cbe0 g     O .rwdata	00000180 alt_fd_list
08000d74 g     F .text	00000040 HID_init
0801afbc g     F .text	00000090 alt_find_dev
0800b300 g     F .text	00000148 memcpy
08013a00 g     F .text	0000025c __hexnan
08002cd0 g     F .text	0000000c _cleanup_r
08018bd4 g     F .text	000000dc .hidden __floatsidf
0801b5bc g     F .text	0000007c alt_io_redirect
080003d0 g     F .text	00000054 rgba_to_rgb
080178f8 g     F .text	000000f4 .hidden __ltdf2
0801ba8c g       *ABS*	00000000 __DTOR_END__
080048f4 g     F .text	00000014 puts
0801b65c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800b0a4 g     F .text	000000d8 mbrtowc
0800cc20 g     F .text	00000074 __fpclassifyd
08008b50 g     F .text	0000004c _vfscanf_r
0800c440 g     F .text	000000a4 __ratio
0800026c g     F .text	000000c4 read_rgbas_from_file
08012cf4 g     F .text	0000001c __vfiprintf_internal
0801a448 g     F .text	0000021c altera_avalon_jtag_uart_read
080047c8 g     F .text	00000030 _printf_r
08002838 g     F .text	00000064 .hidden __udivsi3
080191d4 g     F .text	000000ac isatty
0800ae8c g     F .text	00000030 iswspace
0801bf30 g     O .rodata	000000c8 __mprec_tens
0800af38 g     F .text	0000000c __locale_charset
08016450 g     F .text	000000c8 .hidden __lesf2
080156e8 g     F .text	00000074 .hidden __fixunsdfsi
0801f970 g     O .bss	00000004 __malloc_top_pad
0800ee5c g     F .text	0000001c strtoul
0801ddc8 g     O .rwdata	00000001 usb_task_state
0801dde0 g     O .rwdata	00000004 __mb_cur_max
08002620 g     F .text	00000068 vga_set_pixel_rgba
0800af68 g     F .text	0000000c _localeconv_r
0801f95c g     O .bss	00000004 vga_send_pixel_color
0800ee78 g     F .text	00000320 _strtoull_r
0800b9d8 g     F .text	0000003c __i2b
0800a970 g     F .text	000004c8 __sfvwrite_r
08004af8 g     F .text	00000054 _sbrk_r
0800c65c g     F .text	00000060 _read_r
080014d4 g     F .text	00000094 MAX3421E_init
0801ddfc g     O .rwdata	00000004 alt_max_fd
0800291c g     F .text	000000f0 _fclose_r
08002c98 g     F .text	00000030 fflush
0801f96c g     O .bss	00000004 __malloc_max_sbrked_mem
08016518 g     F .text	000008ac .hidden __adddf3
0801631c g     F .text	00000078 .hidden __nesf2
0800c1e8 g     F .text	0000010c __b2d
08015d58 g     F .text	000005c4 .hidden __umoddi3
080193a8 g     F .text	000000dc lseek
0801ddcc g     O .rwdata	00000004 _global_impure_ptr
0800c6bc g     F .text	00000564 _realloc_r
0814bc34 g       *ABS*	00000000 __bss_end
0801b3e8 g     F .text	000000f0 alt_iic_isr_register
08019adc g     F .text	00000108 alt_tick
0801c098 g     O .rodata	00000100 __hexdig
0801575c g     F .text	000005fc .hidden __udivdi3
0801300c g     F .text	00000024 _fputwc_r
0801bf08 g     O .rodata	00000028 __mprec_bigtens
0800b7bc g     F .text	00000104 __s2b
08018cb0 g     F .text	000000a8 .hidden __floatunsidf
0800bf28 g     F .text	00000060 __mcmp
08003048 g     F .text	00000018 __fp_lock_all
0801b39c g     F .text	0000004c alt_ic_irq_enabled
08019a40 g     F .text	0000009c alt_alarm_stop
0800e8c4 g     F .text	0000001c strtol
0801f994 g     O .bss	00000004 alt_irq_active
08003634 g     F .text	00000444 _fseeko_r
08002424 g     F .text	0000002c DummyProbe
080000fc g     F .exceptions	000000d4 alt_irq_handler
0801cbb8 g     O .rwdata	00000028 alt_dev_null
08000db4 g     F .text	00000088 mousePoll
08001328 g     F .text	00000024 Vbus_power
0801adfc g     F .text	00000020 alt_dcache_flush_all
0800b8c0 g     F .text	00000068 __hi0bits
08018b54 g     F .text	00000080 .hidden __fixdfsi
0800e554 g     F .text	00000018 strtod
0801de14 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
0801ddf4 g     O .rwdata	00000008 alt_dev_list
08019c50 g     F .text	00000100 write
08016394 g     F .text	000000bc .hidden __gtsf2
0801c2e4 g       *ABS*	00000000 __ram_rodata_end
0801f959 g     O .bss	00000001 usb_error
080190e0 g     F .text	000000b8 fstat
080178f8 g     F .text	000000f4 .hidden __ledf2
0800bca0 g     F .text	00000140 __pow5mult
080117e8 g     F .text	0000150c ___vfiprintf_internal_r
0801f97c g     O .bss	00000004 __nlocale_changed
0800289c g     F .text	00000058 .hidden __umodsi3
08004b88 g     F .text	00000030 _scanf_r
0801fb34 g     O .bss	0012c000 vga_canvas
0814bc34 g       *ABS*	00000000 end
08003a78 g     F .text	0000001c fseeko
08003618 g     F .text	0000001c fseek
08019f84 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08002688 g     F .text	000000b8 vga_draw
08001974 g     F .text	0000017c XferDispatchPkt
0801ba8c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0801aafc g     F .text	0000007c alt_avalon_timer_sc_init
08018f00 g     F .text	00000064 .hidden __clzsi2
0801a664 g     F .text	00000224 altera_avalon_jtag_uart_write
08003038 g     F .text	00000004 __sfp_lock_acquire
0800b21c g     F .text	000000e4 memchr
08004d8c g     F .text	000022dc ___vfprintf_internal_r
08001698 g     F .text	00000034 MaxGpxHandler
0800cd6c g     F .text	00000058 _sprintf_r
080032a8 g     F .text	00000310 _free_r
0800af44 g     F .text	00000010 __locale_mb_cur_max
0801b8d8 g     F .text	00000180 __call_exitprocs
0801f978 g     O .bss	00000004 __mlocale_changed
0801ddd4 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
0801f98c g     O .bss	00000004 _alt_tick_rate
080011f8 g     F .text	00000090 MAXbytes_rd
0800e8e0 g     F .text	00000304 _strtoll_r
0800bde0 g     F .text	00000148 __lshift
0801a888 g     F .text	000001fc alt_avalon_spi_command
0801f990 g     O .bss	00000004 _alt_nticks
08019808 g     F .text	00000104 read
08019dbc g     F .text	00000064 alt_sys_init
08013d2c g     F .text	000001d0 __ssprint_r
08004768 g     F .text	00000060 _open_r
0801faec g     O .bss	00000048 devtable
0801b7c0 g     F .text	00000118 __register_exitproc
0800096c g     F .text	00000408 HIDKProbe
0801f9ac g     O .bss	00000018 msd_ep
08013c5c g     F .text	000000d0 strncmp
0800ba14 g     F .text	0000028c __multiply
0801a2f0 g     F .text	00000068 altera_avalon_jtag_uart_close
08001c80 g     F .text	00000098 USB_init
080028f4 g     F .text	00000028 .hidden __mulsi3
0801f9ec g     O .bss	00000100 bigbuf
0801c2e4 g       *ABS*	00000000 __ram_rwdata_start
0801ba8c g       *ABS*	00000000 __ram_rodata_start
0801f9c4 g     O .bss	00000028 __malloc_current_mallinfo
0801631c g     F .text	00000078 .hidden __eqsf2
0801f950 g     O .bss	00000001 last_usb_task_state
0800c2f4 g     F .text	0000014c __d2b
0801f948 g     O .bss	00000008 dev0ep
08019e20 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800ebe4 g     F .text	00000278 _strtoul_r
0801b154 g     F .text	000000c4 alt_get_fd
0801aca4 g     F .text	00000158 alt_busy_sleep
08002388 g     F .text	00000038 MSDEventHandler
08008d50 g     F .text	00000054 _close_r
0801b744 g     F .text	0000007c memcmp
08019ee0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0814bc34 g       *ABS*	00000000 __alt_stack_base
08019f30 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08008bfc g     F .text	00000154 __swsetup_r
08016dc4 g     F .text	000009d0 .hidden __divdf3
08002ef8 g     F .text	00000118 __sfp
0800c558 g     F .text	00000078 __copybits
0801c738 g     O .rwdata	00000408 __malloc_av_
08003044 g     F .text	00000004 __sinit_lock_release
080023ec g     F .text	00000038 CDCEventHandler
080179ec g     F .text	0000086c .hidden __muldf3
08002450 g     F .text	00000038 DummyEventHandler
08004bb8 g     F .text	00000054 __sread
0800a93c g     F .text	00000034 fread
08002564 g     F .text	00000040 vga_init_canvas
0801b04c g     F .text	00000108 alt_find_file
0801ae58 g     F .text	000000a4 alt_dev_llist_insert
08019500 g     F .text	00000024 __malloc_lock
08019990 g     F .text	000000b0 sbrk
0800f198 g     F .text	000022bc ___svfprintf_internal_r
08002c3c g     F .text	0000005c _fflush_r
08012dcc g     F .text	000000dc _calloc_r
0801f960 g     O .bss	00000004 vga_send_pixel_position
0800316c g     F .text	00000018 fopen
0801f944 g       *ABS*	00000000 __bss_start
080035f4 g     F .text	00000020 _fscanf_r
0800134c g     F .text	00000188 MAX_busprobe
0801f944 g     O .bss	00000002 hid_device
08004640 g     F .text	00000128 memset
08000424 g     F .text	00000140 main
08001568 g     F .text	00000064 MAX3421E_Task
0801f988 g     O .bss	00000004 alt_envp
0801f968 g     O .bss	00000004 __malloc_max_total_mem
08019e80 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080153dc g     F .text	00000018 __swbuf
080024e0 g     F .text	00000084 ConvUTF8ToStr
08016450 g     F .text	000000c8 .hidden __ltsf2
0800a700 g     F .text	0000023c _fread_r
080025a4 g     F .text	00000024 vga_get_canvas_address
08004cec g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08002a0c g     F .text	00000014 fclose
0800e66c g     F .text	00000258 _strtol_r
08018d58 g     F .text	000001a8 .hidden __truncdfsf2
08008fcc g     F .text	00001688 _dtoa_r
08003e34 g     F .text	0000080c _malloc_r
08015550 g     F .text	00000030 __ascii_wctomb
0801de00 g     O .rwdata	00000004 alt_errno
08011454 g     F .text	000000d4 __submore
08003af0 g     F .text	000000c4 _fwalk
0800b1c0 g     F .text	0000005c _mbtowc_r
08002740 g     F .text	00000084 .hidden __divsi3
08001af0 g     F .text	00000190 XferInTransfer
08003184 g     F .text	00000124 _malloc_trim_r
0801ba8c g       *ABS*	00000000 __CTOR_END__
080024a8 g     F .text	00000038 GetDevtable
0800ce30 g     F .text	000000dc strcmp
0801ba8c g       *ABS*	00000000 __flash_rodata_start
0801ba8c g       *ABS*	00000000 __DTOR_LIST__
08001900 g     F .text	00000074 XferCtrlND
08017794 g     F .text	00000088 .hidden __nedf2
08001288 g     F .text	000000a0 MAX3421E_reset
08019d84 g     F .text	00000038 alt_irq_init
0801990c g     F .text	00000084 alt_release_fd
0800cdc4 g     F .text	0000006c sprintf
0801c1b8 g     O .rodata	00000100 .hidden __clz_tab
0801f974 g     O .bss	00000004 _PathLocale
0800e56c g     F .text	00000100 strtof
0801b6f8 g     F .text	00000014 atexit
08016394 g     F .text	000000bc .hidden __gesf2
08008b9c g     F .text	00000060 _write_r
0800af74 g     F .text	00000018 setlocale
08004b4c g     F .text	0000003c scanf
0800cd64 g     F .text	00000008 nanf
0801ddd0 g     O .rwdata	00000004 _impure_ptr
0801f980 g     O .bss	00000004 alt_argc
08002a20 g     F .text	0000021c __sflush_r
0800aff8 g     F .text	000000ac _mbrtowc_r
0801af5c g     F .text	00000060 _do_dtors
0800af60 g     F .text	00000008 __locale_cjk_lang
08003614 g     F .text	00000004 _fseek_r
08001018 g     F .text	00000164 MAXbytes_wr
08004924 g     F .text	000001d4 __srefill_r
08000020 g       .exceptions	00000000 alt_irq_entry
0800b17c g     F .text	00000044 __ascii_mbtowc
0800c184 g     F .text	00000064 __ulp
08003060 g     F .text	00000018 __fp_unlock_all
0801ddec g     O .rwdata	00000008 alt_fs_list
080023c0 g     F .text	0000002c CDCProbe
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800af8c g     F .text	0000000c localeconv
08002488 g     F .text	00000020 GetUsbTaskState
0801b238 g     F .text	00000050 alt_ic_isr_register
080025f4 g     F .text	0000002c vga_set_pixel_position_sender
0801de14 g       *ABS*	00000000 _edata
08000efc g     F .text	00000038 HIDKEventHandler
0814bc34 g       *ABS*	00000000 _end
080015cc g     F .text	000000cc MaxIntHandler
08012ea8 g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
08008acc g     F .text	00000068 vfscanf
0801a358 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08000f34 g     F .text	00000034 SPI_init
0801b310 g     F .text	0000008c alt_ic_irq_disable
08004c14 g     F .text	0000007c __swrite
0801ddd8 g     O .rwdata	00000004 __malloc_trim_threshold
0800af54 g     F .text	0000000c __locale_msgcharset
0801b70c g     F .text	00000038 exit
08003bb4 g     F .text	000000c4 _fwalk_reent
0800bf88 g     F .text	000001fc __mdiff
080027c4 g     F .text	00000074 .hidden __modsi3
0801dddc g     O .rwdata	00000004 __ctype_ptr__
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800303c g     F .text	00000004 __sfp_lock_release
08000330 g     F .text	000000a0 read_rgbas_from_stdin
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800cc94 g     F .text	000000d0 __sccl
0801bc34 g     O .rodata	00000101 _ctype_
0801dde4 g     O .rwdata	00000004 __mbtowc
08000ec4 g     F .text	00000038 HIDMEventHandler
08003078 g     F .text	000000f4 _fopen_r
0801ba58 g     F .text	00000034 _exit
0801ab78 g     F .text	0000012c alt_alarm_start
080155dc g     F .text	0000010c .hidden __muldi3
08003c78 g     F .text	000001bc __smakebuf_r
08004cf4 g     F .text	00000098 strlen
08019670 g     F .text	0000015c open
0801781c g     F .text	000000dc .hidden __gedf2
080131b0 g     F .text	00000850 __gethex
0801dde8 g     O .rwdata	00000004 __wctomb
080117d0 g     F .text	00000018 __sprint_r
0801b218 g     F .text	00000020 alt_icache_flush_all
0801de10 g     O .rwdata	00000004 alt_priority_mask
0801b288 g     F .text	00000088 alt_ic_irq_enable
08007068 g     F .text	0000001c __vfprintf_internal
08000564 g     F .text	00000408 HIDMProbe
08015580 g     F .text	0000005c _wctomb_r
08000f68 g     F .text	00000028 SPI_wr
08018258 g     F .text	000008fc .hidden __subdf3
0800b928 g     F .text	000000b0 __lo0bits
08007140 g     F .text	0000198c __svfscanf_r
0801de08 g     O .rwdata	00000008 alt_alarm_list
08011528 g     F .text	00000194 _ungetc_r
0801aefc g     F .text	00000060 _do_ctors
08015490 g     F .text	000000c0 wcrtomb
08018fa0 g     F .text	000000d8 close
080192e8 g     F .text	00000084 alt_load
08013030 g     F .text	00000080 fputwc
08003040 g     F .text	00000004 __sinit_lock_acquire
080016cc g     F .text	0000014c XferCtrlReq
0800b674 g     F .text	00000148 __multadd
0800b64c g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820574 	movhi	r2,2069
 8000140:	10aecd04 	addi	r2,r2,-17612
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820574 	movhi	r2,2069
 8000158:	10aecd04 	addi	r2,r2,-17612
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a6f617 	ldw	r2,-25640(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a6f617 	ldw	r2,-25640(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 800023c:	d6977014 	ori	gp,gp,24000
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10be5114 	ori	r2,r2,63812

    movhi r3, %hi(__bss_end)
 8000248:	00c20534 	movhi	r3,2068
    ori r3, r3, %lo(__bss_end)
 800024c:	18ef0d14 	ori	r3,r3,48180

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80192e80 	call	80192e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	80194840 	call	8019484 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <read_rgbas_from_file>:
#include "usb_kb/transfer.h"
#include "usb_kb/usb_ch9.h"
#include "usb_kb/USB.h"

void read_rgbas_from_file(char *file_name, int *rgbas)
{
 800026c:	defffa04 	addi	sp,sp,-24
 8000270:	dfc00515 	stw	ra,20(sp)
 8000274:	df000415 	stw	fp,16(sp)
 8000278:	df000404 	addi	fp,sp,16
 800027c:	e13ffe15 	stw	r4,-8(fp)
 8000280:	e17fff15 	stw	r5,-4(fp)
	FILE *file = fopen(file_name, "r");
 8000284:	014200b4 	movhi	r5,2050
 8000288:	296ea304 	addi	r5,r5,-17780
 800028c:	e13ffe17 	ldw	r4,-8(fp)
 8000290:	800316c0 	call	800316c <fopen>
 8000294:	e0bffd15 	stw	r2,-12(fp)
	for (int i = 0; i < 256; ++i) {
 8000298:	e03ffc15 	stw	zero,-16(fp)
 800029c:	00001906 	br	8000304 <read_rgbas_from_file+0x98>
		fscanf(file, "%x", rgbas + i);
 80002a0:	e0bffc17 	ldw	r2,-16(fp)
 80002a4:	1085883a 	add	r2,r2,r2
 80002a8:	1085883a 	add	r2,r2,r2
 80002ac:	1007883a 	mov	r3,r2
 80002b0:	e0bfff17 	ldw	r2,-4(fp)
 80002b4:	10c5883a 	add	r2,r2,r3
 80002b8:	100d883a 	mov	r6,r2
 80002bc:	014200b4 	movhi	r5,2050
 80002c0:	296ea404 	addi	r5,r5,-17776
 80002c4:	e13ffd17 	ldw	r4,-12(fp)
 80002c8:	80035b80 	call	80035b8 <fscanf>
		printf("%x\n", rgbas[i]);
 80002cc:	e0bffc17 	ldw	r2,-16(fp)
 80002d0:	1085883a 	add	r2,r2,r2
 80002d4:	1085883a 	add	r2,r2,r2
 80002d8:	1007883a 	mov	r3,r2
 80002dc:	e0bfff17 	ldw	r2,-4(fp)
 80002e0:	10c5883a 	add	r2,r2,r3
 80002e4:	10800017 	ldw	r2,0(r2)
 80002e8:	100b883a 	mov	r5,r2
 80002ec:	010200b4 	movhi	r4,2050
 80002f0:	212ea504 	addi	r4,r4,-17772
 80002f4:	80047f80 	call	80047f8 <printf>
#include "usb_kb/USB.h"

void read_rgbas_from_file(char *file_name, int *rgbas)
{
	FILE *file = fopen(file_name, "r");
	for (int i = 0; i < 256; ++i) {
 80002f8:	e0bffc17 	ldw	r2,-16(fp)
 80002fc:	10800044 	addi	r2,r2,1
 8000300:	e0bffc15 	stw	r2,-16(fp)
 8000304:	e0bffc17 	ldw	r2,-16(fp)
 8000308:	10804010 	cmplti	r2,r2,256
 800030c:	103fe41e 	bne	r2,zero,80002a0 <__alt_data_end+0xfc0002a0>
		fscanf(file, "%x", rgbas + i);
		printf("%x\n", rgbas[i]);
	}
	fclose(file);
 8000310:	e13ffd17 	ldw	r4,-12(fp)
 8000314:	8002a0c0 	call	8002a0c <fclose>
}
 8000318:	0001883a 	nop
 800031c:	e037883a 	mov	sp,fp
 8000320:	dfc00117 	ldw	ra,4(sp)
 8000324:	df000017 	ldw	fp,0(sp)
 8000328:	dec00204 	addi	sp,sp,8
 800032c:	f800283a 	ret

08000330 <read_rgbas_from_stdin>:

void read_rgbas_from_stdin(int *rgbas)
{
 8000330:	defffc04 	addi	sp,sp,-16
 8000334:	dfc00315 	stw	ra,12(sp)
 8000338:	df000215 	stw	fp,8(sp)
 800033c:	df000204 	addi	fp,sp,8
 8000340:	e13fff15 	stw	r4,-4(fp)
	for (int i = 0; i < 256; ++i) {
 8000344:	e03ffe15 	stw	zero,-8(fp)
 8000348:	00001806 	br	80003ac <read_rgbas_from_stdin+0x7c>
		scanf("%x", rgbas + i);
 800034c:	e0bffe17 	ldw	r2,-8(fp)
 8000350:	1085883a 	add	r2,r2,r2
 8000354:	1085883a 	add	r2,r2,r2
 8000358:	1007883a 	mov	r3,r2
 800035c:	e0bfff17 	ldw	r2,-4(fp)
 8000360:	10c5883a 	add	r2,r2,r3
 8000364:	100b883a 	mov	r5,r2
 8000368:	010200b4 	movhi	r4,2050
 800036c:	212ea404 	addi	r4,r4,-17776
 8000370:	8004b4c0 	call	8004b4c <scanf>
		printf("%x\n", rgbas[i]);
 8000374:	e0bffe17 	ldw	r2,-8(fp)
 8000378:	1085883a 	add	r2,r2,r2
 800037c:	1085883a 	add	r2,r2,r2
 8000380:	1007883a 	mov	r3,r2
 8000384:	e0bfff17 	ldw	r2,-4(fp)
 8000388:	10c5883a 	add	r2,r2,r3
 800038c:	10800017 	ldw	r2,0(r2)
 8000390:	100b883a 	mov	r5,r2
 8000394:	010200b4 	movhi	r4,2050
 8000398:	212ea504 	addi	r4,r4,-17772
 800039c:	80047f80 	call	80047f8 <printf>
	fclose(file);
}

void read_rgbas_from_stdin(int *rgbas)
{
	for (int i = 0; i < 256; ++i) {
 80003a0:	e0bffe17 	ldw	r2,-8(fp)
 80003a4:	10800044 	addi	r2,r2,1
 80003a8:	e0bffe15 	stw	r2,-8(fp)
 80003ac:	e0bffe17 	ldw	r2,-8(fp)
 80003b0:	10804010 	cmplti	r2,r2,256
 80003b4:	103fe51e 	bne	r2,zero,800034c <__alt_data_end+0xfc00034c>
		scanf("%x", rgbas + i);
		printf("%x\n", rgbas[i]);
	}
}
 80003b8:	0001883a 	nop
 80003bc:	e037883a 	mov	sp,fp
 80003c0:	dfc00117 	ldw	ra,4(sp)
 80003c4:	df000017 	ldw	fp,0(sp)
 80003c8:	dec00204 	addi	sp,sp,8
 80003cc:	f800283a 	ret

080003d0 <rgba_to_rgb>:

int rgba_to_rgb(int rgba)
{
 80003d0:	defffd04 	addi	sp,sp,-12
 80003d4:	df000215 	stw	fp,8(sp)
 80003d8:	df000204 	addi	fp,sp,8
 80003dc:	e13fff15 	stw	r4,-4(fp)
	int rgb = ((rgba & 0xF0000000) >> 20) | ((rgba & 0x00F00000) >> 16) | ((rgba & 0x0000F000) >> 12);
 80003e0:	e0bfff17 	ldw	r2,-4(fp)
 80003e4:	10bc002c 	andhi	r2,r2,61440
 80003e8:	1004d53a 	srli	r2,r2,20
 80003ec:	e0ffff17 	ldw	r3,-4(fp)
 80003f0:	18c03c2c 	andhi	r3,r3,240
 80003f4:	1807d43a 	srai	r3,r3,16
 80003f8:	10c4b03a 	or	r2,r2,r3
 80003fc:	e0ffff17 	ldw	r3,-4(fp)
 8000400:	18fc000c 	andi	r3,r3,61440
 8000404:	1807d33a 	srai	r3,r3,12
 8000408:	10c4b03a 	or	r2,r2,r3
 800040c:	e0bffe15 	stw	r2,-8(fp)
	return rgb;
 8000410:	e0bffe17 	ldw	r2,-8(fp)
}
 8000414:	e037883a 	mov	sp,fp
 8000418:	df000017 	ldw	fp,0(sp)
 800041c:	dec00104 	addi	sp,sp,4
 8000420:	f800283a 	ret

08000424 <main>:

int main()
{
 8000424:	defef704 	addi	sp,sp,-1060
 8000428:	dfc10815 	stw	ra,1056(sp)
 800042c:	df010715 	stw	fp,1052(sp)
 8000430:	dc010615 	stw	r16,1048(sp)
 8000434:	df010704 	addi	fp,sp,1052
	printf("PacPac\n");
 8000438:	010200b4 	movhi	r4,2050
 800043c:	212ea604 	addi	r4,r4,-17768
 8000440:	80048f40 	call	80048f4 <puts>
	int illini_blue = 0x13294BFF;
 8000444:	0084ca74 	movhi	r2,4905
 8000448:	1092ffc4 	addi	r2,r2,19455
 800044c:	e0befb15 	stw	r2,-1044(fp)
	int illini_orange = 0xE84A27FF;
 8000450:	00ba12b4 	movhi	r2,59466
 8000454:	1089ffc4 	addi	r2,r2,10239
 8000458:	e0befc15 	stw	r2,-1040(fp)
	int pacman[256] = {0};
 800045c:	e0beff04 	addi	r2,fp,-1028
 8000460:	00c10004 	movi	r3,1024
 8000464:	180d883a 	mov	r6,r3
 8000468:	000b883a 	mov	r5,zero
 800046c:	1009883a 	mov	r4,r2
 8000470:	80046400 	call	8004640 <memset>
	printf("Please enter pacman:\n");
 8000474:	010200b4 	movhi	r4,2050
 8000478:	212ea804 	addi	r4,r4,-17760
 800047c:	80048f40 	call	80048f4 <puts>
	read_rgbas_from_stdin(pacman);
 8000480:	e0beff04 	addi	r2,fp,-1028
 8000484:	1009883a 	mov	r4,r2
 8000488:	80003300 	call	8000330 <read_rgbas_from_stdin>
	int control = 0;
 800048c:	e03efd15 	stw	zero,-1036(fp)
	control = 0x10100000;
 8000490:	00840434 	movhi	r2,4112
 8000494:	e0befd15 	stw	r2,-1036(fp)
	for (int y = 0; y < 16; ++y) {
 8000498:	e03ef915 	stw	zero,-1052(fp)
 800049c:	00002706 	br	800053c <main+0x118>
		for (int x = 0; x < 16; ++x) {
 80004a0:	e03efa15 	stw	zero,-1048(fp)
 80004a4:	00001f06 	br	8000524 <main+0x100>
			int actual_control = control | (y << 12) | (x << 16) | rgba_to_rgb(pacman[y * 16 + x]);
 80004a8:	e0bef917 	ldw	r2,-1052(fp)
 80004ac:	1006933a 	slli	r3,r2,12
 80004b0:	e0befd17 	ldw	r2,-1036(fp)
 80004b4:	1886b03a 	or	r3,r3,r2
 80004b8:	e0befa17 	ldw	r2,-1048(fp)
 80004bc:	1004943a 	slli	r2,r2,16
 80004c0:	18a0b03a 	or	r16,r3,r2
 80004c4:	e0bef917 	ldw	r2,-1052(fp)
 80004c8:	1006913a 	slli	r3,r2,4
 80004cc:	e0befa17 	ldw	r2,-1048(fp)
 80004d0:	1885883a 	add	r2,r3,r2
 80004d4:	1085883a 	add	r2,r2,r2
 80004d8:	1085883a 	add	r2,r2,r2
 80004dc:	e0fef904 	addi	r3,fp,-1052
 80004e0:	1885883a 	add	r2,r3,r2
 80004e4:	10800604 	addi	r2,r2,24
 80004e8:	10800017 	ldw	r2,0(r2)
 80004ec:	1009883a 	mov	r4,r2
 80004f0:	80003d00 	call	80003d0 <rgba_to_rgb>
 80004f4:	8084b03a 	or	r2,r16,r2
 80004f8:	e0befe15 	stw	r2,-1032(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(CONTROL_BASE, actual_control);
 80004fc:	00885404 	movi	r2,8528
 8000500:	e0fefe17 	ldw	r3,-1032(fp)
 8000504:	10c00035 	stwio	r3,0(r2)
			printf("%x\n", actual_control);
 8000508:	e17efe17 	ldw	r5,-1032(fp)
 800050c:	010200b4 	movhi	r4,2050
 8000510:	212ea504 	addi	r4,r4,-17772
 8000514:	80047f80 	call	80047f8 <printf>
	printf("Please enter pacman:\n");
	read_rgbas_from_stdin(pacman);
	int control = 0;
	control = 0x10100000;
	for (int y = 0; y < 16; ++y) {
		for (int x = 0; x < 16; ++x) {
 8000518:	e0befa17 	ldw	r2,-1048(fp)
 800051c:	10800044 	addi	r2,r2,1
 8000520:	e0befa15 	stw	r2,-1048(fp)
 8000524:	e0befa17 	ldw	r2,-1048(fp)
 8000528:	10800410 	cmplti	r2,r2,16
 800052c:	103fde1e 	bne	r2,zero,80004a8 <__alt_data_end+0xfc0004a8>
	int pacman[256] = {0};
	printf("Please enter pacman:\n");
	read_rgbas_from_stdin(pacman);
	int control = 0;
	control = 0x10100000;
	for (int y = 0; y < 16; ++y) {
 8000530:	e0bef917 	ldw	r2,-1052(fp)
 8000534:	10800044 	addi	r2,r2,1
 8000538:	e0bef915 	stw	r2,-1052(fp)
 800053c:	e0bef917 	ldw	r2,-1052(fp)
 8000540:	10800410 	cmplti	r2,r2,16
 8000544:	103fd61e 	bne	r2,zero,80004a0 <__alt_data_end+0xfc0004a0>
			int actual_control = control | (y << 12) | (x << 16) | rgba_to_rgb(pacman[y * 16 + x]);
			IOWR_ALTERA_AVALON_PIO_DATA(CONTROL_BASE, actual_control);
			printf("%x\n", actual_control);
		}
	}
	return 0;
 8000548:	0005883a 	mov	r2,zero
}
 800054c:	e6ffff04 	addi	sp,fp,-4
 8000550:	dfc00217 	ldw	ra,8(sp)
 8000554:	df000117 	ldw	fp,4(sp)
 8000558:	dc000017 	ldw	r16,0(sp)
 800055c:	dec00304 	addi	sp,sp,12
 8000560:	f800283a 	ret

08000564 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 8000564:	defff204 	addi	sp,sp,-56
 8000568:	dfc00d15 	stw	ra,52(sp)
 800056c:	df000c15 	stw	fp,48(sp)
 8000570:	df000c04 	addi	fp,sp,48
 8000574:	2005883a 	mov	r2,r4
 8000578:	e17fff15 	stw	r5,-4(fp)
 800057c:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8000580:	008200b4 	movhi	r2,2050
 8000584:	10be7b04 	addi	r2,r2,-1556
 8000588:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 800058c:	008200b4 	movhi	r2,2050
 8000590:	10be7b04 	addi	r2,r2,-1556
 8000594:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8000598:	e0fffe03 	ldbu	r3,-8(fp)
 800059c:	008200b4 	movhi	r2,2050
 80005a0:	10be7b04 	addi	r2,r2,-1556
 80005a4:	d8800415 	stw	r2,16(sp)
 80005a8:	00800244 	movi	r2,9
 80005ac:	d8800315 	stw	r2,12(sp)
 80005b0:	d8000215 	stw	zero,8(sp)
 80005b4:	00800084 	movi	r2,2
 80005b8:	d8800115 	stw	r2,4(sp)
 80005bc:	d8000015 	stw	zero,0(sp)
 80005c0:	01c00184 	movi	r7,6
 80005c4:	01802004 	movi	r6,128
 80005c8:	000b883a 	mov	r5,zero
 80005cc:	1809883a 	mov	r4,r3
 80005d0:	80016cc0 	call	80016cc <XferCtrlReq>
 80005d4:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 80005d8:	e0bffc03 	ldbu	r2,-16(fp)
 80005dc:	10000226 	beq	r2,zero,80005e8 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 80005e0:	0005883a 	mov	r2,zero
 80005e4:	0000dc06 	br	8000958 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 80005e8:	e0bffa17 	ldw	r2,-24(fp)
 80005ec:	1080008b 	ldhu	r2,2(r2)
 80005f0:	10bfffcc 	andi	r2,r2,65535
 80005f4:	10804070 	cmpltui	r2,r2,257
 80005f8:	1000031e 	bne	r2,zero,8000608 <HIDMProbe+0xa4>
		total_length = 256;
 80005fc:	00804004 	movi	r2,256
 8000600:	e0bff90d 	sth	r2,-28(fp)
 8000604:	00000306 	br	8000614 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000608:	e0bffa17 	ldw	r2,-24(fp)
 800060c:	1080008b 	ldhu	r2,2(r2)
 8000610:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8000614:	e13ffe03 	ldbu	r4,-8(fp)
 8000618:	e0fff90b 	ldhu	r3,-28(fp)
 800061c:	008200b4 	movhi	r2,2050
 8000620:	10be7b04 	addi	r2,r2,-1556
 8000624:	d8800415 	stw	r2,16(sp)
 8000628:	d8c00315 	stw	r3,12(sp)
 800062c:	d8000215 	stw	zero,8(sp)
 8000630:	00800084 	movi	r2,2
 8000634:	d8800115 	stw	r2,4(sp)
 8000638:	d8000015 	stw	zero,0(sp)
 800063c:	01c00184 	movi	r7,6
 8000640:	01802004 	movi	r6,128
 8000644:	000b883a 	mov	r5,zero
 8000648:	80016cc0 	call	80016cc <XferCtrlReq>
 800064c:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8000650:	e0bffc03 	ldbu	r2,-16(fp)
 8000654:	10000226 	beq	r2,zero,8000660 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 8000658:	0005883a 	mov	r2,zero
 800065c:	0000be06 	br	8000958 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 8000660:	e0bffa17 	ldw	r2,-24(fp)
 8000664:	10800143 	ldbu	r2,5(r2)
 8000668:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 800066c:	0000b306 	br	800093c <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 8000670:	e0bffa17 	ldw	r2,-24(fp)
 8000674:	10800043 	ldbu	r2,1(r2)
 8000678:	10803fcc 	andi	r2,r2,255
 800067c:	10800120 	cmpeqi	r2,r2,4
 8000680:	1000091e 	bne	r2,zero,80006a8 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000684:	e0bffa17 	ldw	r2,-24(fp)
 8000688:	10800003 	ldbu	r2,0(r2)
 800068c:	10803fcc 	andi	r2,r2,255
 8000690:	e0fffb17 	ldw	r3,-20(fp)
 8000694:	1885883a 	add	r2,r3,r2
 8000698:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 800069c:	e0bffb17 	ldw	r2,-20(fp)
 80006a0:	e0bffa15 	stw	r2,-24(fp)
 80006a4:	0000a506 	br	800093c <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 80006a8:	e0bffa17 	ldw	r2,-24(fp)
 80006ac:	10800143 	ldbu	r2,5(r2)
 80006b0:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 80006b4:	e0bffa17 	ldw	r2,-24(fp)
 80006b8:	10800183 	ldbu	r2,6(r2)
 80006bc:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 80006c0:	e0bffa17 	ldw	r2,-24(fp)
 80006c4:	108001c3 	ldbu	r2,7(r2)
 80006c8:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 80006cc:	e0bffc83 	ldbu	r2,-14(fp)
 80006d0:	108000d8 	cmpnei	r2,r2,3
 80006d4:	1000971e 	bne	r2,zero,8000934 <HIDMProbe+0x3d0>
 80006d8:	e0bffcc3 	ldbu	r2,-13(fp)
 80006dc:	10800058 	cmpnei	r2,r2,1
 80006e0:	1000941e 	bne	r2,zero,8000934 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 80006e4:	e0bffd03 	ldbu	r2,-12(fp)
 80006e8:	10800098 	cmpnei	r2,r2,2
 80006ec:	1000911e 	bne	r2,zero,8000934 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 80006f0:	e0fffe03 	ldbu	r3,-8(fp)
 80006f4:	008200b4 	movhi	r2,2050
 80006f8:	10bebb04 	addi	r2,r2,-1300
 80006fc:	180690fa 	slli	r3,r3,3
 8000700:	10c5883a 	add	r2,r2,r3
 8000704:	10800104 	addi	r2,r2,4
 8000708:	00c00084 	movi	r3,2
 800070c:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 8000710:	e0fffe03 	ldbu	r3,-8(fp)
 8000714:	008200b4 	movhi	r2,2050
 8000718:	10bebb04 	addi	r2,r2,-1300
 800071c:	180690fa 	slli	r3,r3,3
 8000720:	10c5883a 	add	r2,r2,r3
 8000724:	10800017 	ldw	r2,0(r2)
 8000728:	1080008b 	ldhu	r2,2(r2)
 800072c:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 8000730:	8000d740 	call	8000d74 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8000734:	e0fffe03 	ldbu	r3,-8(fp)
 8000738:	008200b4 	movhi	r2,2050
 800073c:	10bebb04 	addi	r2,r2,-1300
 8000740:	180690fa 	slli	r3,r3,3
 8000744:	10c7883a 	add	r3,r2,r3
 8000748:	008200b4 	movhi	r2,2050
 800074c:	10be6704 	addi	r2,r2,-1636
 8000750:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 8000754:	e0fffe03 	ldbu	r3,-8(fp)
 8000758:	008200b4 	movhi	r2,2050
 800075c:	10bebb04 	addi	r2,r2,-1300
 8000760:	180690fa 	slli	r3,r3,3
 8000764:	10c5883a 	add	r2,r2,r3
 8000768:	10800017 	ldw	r2,0(r2)
 800076c:	e0fffd43 	ldbu	r3,-11(fp)
 8000770:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 8000774:	e0bffa17 	ldw	r2,-24(fp)
 8000778:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 800077c:	d0a6e145 	stb	r2,-25723(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 8000780:	e0bffe03 	ldbu	r2,-8(fp)
 8000784:	d0a6e105 	stb	r2,-25724(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000788:	e0bffa17 	ldw	r2,-24(fp)
 800078c:	10800003 	ldbu	r2,0(r2)
 8000790:	10803fcc 	andi	r2,r2,255
 8000794:	e0fffb17 	ldw	r3,-20(fp)
 8000798:	1885883a 	add	r2,r3,r2
 800079c:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 80007a0:	e0bffb17 	ldw	r2,-20(fp)
 80007a4:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 80007a8:	00005b06 	br	8000918 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 80007ac:	e0bffa17 	ldw	r2,-24(fp)
 80007b0:	10800043 	ldbu	r2,1(r2)
 80007b4:	10803fcc 	andi	r2,r2,255
 80007b8:	10800160 	cmpeqi	r2,r2,5
 80007bc:	1000091e 	bne	r2,zero,80007e4 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80007c0:	e0bffa17 	ldw	r2,-24(fp)
 80007c4:	10800003 	ldbu	r2,0(r2)
 80007c8:	10803fcc 	andi	r2,r2,255
 80007cc:	e0fffb17 	ldw	r3,-20(fp)
 80007d0:	1885883a 	add	r2,r3,r2
 80007d4:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 80007d8:	e0bffb17 	ldw	r2,-20(fp)
 80007dc:	e0bffa15 	stw	r2,-24(fp)
 80007e0:	00004d06 	br	8000918 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 80007e4:	e0fffe03 	ldbu	r3,-8(fp)
 80007e8:	008200b4 	movhi	r2,2050
 80007ec:	10bebb04 	addi	r2,r2,-1300
 80007f0:	180690fa 	slli	r3,r3,3
 80007f4:	10c5883a 	add	r2,r2,r3
 80007f8:	10800017 	ldw	r2,0(r2)
 80007fc:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8000800:	e0fffa17 	ldw	r3,-24(fp)
 8000804:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000808:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 800080c:	e0fffe03 	ldbu	r3,-8(fp)
 8000810:	008200b4 	movhi	r2,2050
 8000814:	10bebb04 	addi	r2,r2,-1300
 8000818:	180690fa 	slli	r3,r3,3
 800081c:	10c5883a 	add	r2,r2,r3
 8000820:	10800017 	ldw	r2,0(r2)
 8000824:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8000828:	e0fffa17 	ldw	r3,-24(fp)
 800082c:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8000830:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8000834:	e0fffe03 	ldbu	r3,-8(fp)
 8000838:	008200b4 	movhi	r2,2050
 800083c:	10bebb04 	addi	r2,r2,-1300
 8000840:	180690fa 	slli	r3,r3,3
 8000844:	10c5883a 	add	r2,r2,r3
 8000848:	10800017 	ldw	r2,0(r2)
 800084c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8000850:	e0fffa17 	ldw	r3,-24(fp)
 8000854:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8000858:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 800085c:	e0fffe03 	ldbu	r3,-8(fp)
 8000860:	008200b4 	movhi	r2,2050
 8000864:	10bebb04 	addi	r2,r2,-1300
 8000868:	180690fa 	slli	r3,r3,3
 800086c:	10c5883a 	add	r2,r2,r3
 8000870:	10800017 	ldw	r2,0(r2)
 8000874:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8000878:	e0fffa17 	ldw	r3,-24(fp)
 800087c:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8000880:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8000884:	e0fffe03 	ldbu	r3,-8(fp)
 8000888:	e0bffc43 	ldbu	r2,-15(fp)
 800088c:	d8000415 	stw	zero,16(sp)
 8000890:	d8000315 	stw	zero,12(sp)
 8000894:	d8000215 	stw	zero,8(sp)
 8000898:	d8000115 	stw	zero,4(sp)
 800089c:	d8800015 	stw	r2,0(sp)
 80008a0:	01c00244 	movi	r7,9
 80008a4:	000d883a 	mov	r6,zero
 80008a8:	000b883a 	mov	r5,zero
 80008ac:	1809883a 	mov	r4,r3
 80008b0:	80016cc0 	call	80016cc <XferCtrlReq>
 80008b4:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 80008b8:	e0bffc03 	ldbu	r2,-16(fp)
 80008bc:	10000226 	beq	r2,zero,80008c8 <HIDMProbe+0x364>
							return (FALSE);
 80008c0:	0005883a 	mov	r2,zero
 80008c4:	00002406 	br	8000958 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 80008c8:	e0fffe03 	ldbu	r3,-8(fp)
 80008cc:	d0a6e143 	ldbu	r2,-25723(gp)
 80008d0:	10803fcc 	andi	r2,r2,255
 80008d4:	d8000415 	stw	zero,16(sp)
 80008d8:	d8000315 	stw	zero,12(sp)
 80008dc:	d8800215 	stw	r2,8(sp)
 80008e0:	d8000115 	stw	zero,4(sp)
 80008e4:	d8000015 	stw	zero,0(sp)
 80008e8:	01c002c4 	movi	r7,11
 80008ec:	01800844 	movi	r6,33
 80008f0:	000b883a 	mov	r5,zero
 80008f4:	1809883a 	mov	r4,r3
 80008f8:	80016cc0 	call	80016cc <XferCtrlReq>
 80008fc:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8000900:	e0bffc03 	ldbu	r2,-16(fp)
 8000904:	10000226 	beq	r2,zero,8000910 <HIDMProbe+0x3ac>
							return (FALSE);
 8000908:	0005883a 	mov	r2,zero
 800090c:	00001206 	br	8000958 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 8000910:	00800044 	movi	r2,1
 8000914:	00001006 	br	8000958 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8000918:	e0fff90b 	ldhu	r3,-28(fp)
 800091c:	008200b4 	movhi	r2,2050
 8000920:	10be7b04 	addi	r2,r2,-1556
 8000924:	1885883a 	add	r2,r3,r2
 8000928:	e0fffb17 	ldw	r3,-20(fp)
 800092c:	18bf9f36 	bltu	r3,r2,80007ac <__alt_data_end+0xfc0007ac>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000930:	00000206 	br	800093c <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 8000934:	0005883a 	mov	r2,zero
 8000938:	00000706 	br	8000958 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 800093c:	e0fff90b 	ldhu	r3,-28(fp)
 8000940:	008200b4 	movhi	r2,2050
 8000944:	10be7b04 	addi	r2,r2,-1556
 8000948:	1885883a 	add	r2,r3,r2
 800094c:	e0fffb17 	ldw	r3,-20(fp)
 8000950:	18bf4736 	bltu	r3,r2,8000670 <__alt_data_end+0xfc000670>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8000954:	0005883a 	mov	r2,zero
}
 8000958:	e037883a 	mov	sp,fp
 800095c:	dfc00117 	ldw	ra,4(sp)
 8000960:	df000017 	ldw	fp,0(sp)
 8000964:	dec00204 	addi	sp,sp,8
 8000968:	f800283a 	ret

0800096c <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 800096c:	defff204 	addi	sp,sp,-56
 8000970:	dfc00d15 	stw	ra,52(sp)
 8000974:	df000c15 	stw	fp,48(sp)
 8000978:	df000c04 	addi	fp,sp,48
 800097c:	2005883a 	mov	r2,r4
 8000980:	e17fff15 	stw	r5,-4(fp)
 8000984:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8000988:	008200b4 	movhi	r2,2050
 800098c:	10be7b04 	addi	r2,r2,-1556
 8000990:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 8000994:	008200b4 	movhi	r2,2050
 8000998:	10be7b04 	addi	r2,r2,-1556
 800099c:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 80009a0:	e0fffe03 	ldbu	r3,-8(fp)
 80009a4:	008200b4 	movhi	r2,2050
 80009a8:	10be7b04 	addi	r2,r2,-1556
 80009ac:	d8800415 	stw	r2,16(sp)
 80009b0:	00800244 	movi	r2,9
 80009b4:	d8800315 	stw	r2,12(sp)
 80009b8:	d8000215 	stw	zero,8(sp)
 80009bc:	00800084 	movi	r2,2
 80009c0:	d8800115 	stw	r2,4(sp)
 80009c4:	d8000015 	stw	zero,0(sp)
 80009c8:	01c00184 	movi	r7,6
 80009cc:	01802004 	movi	r6,128
 80009d0:	000b883a 	mov	r5,zero
 80009d4:	1809883a 	mov	r4,r3
 80009d8:	80016cc0 	call	80016cc <XferCtrlReq>
 80009dc:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 80009e0:	e0bffc03 	ldbu	r2,-16(fp)
 80009e4:	10000226 	beq	r2,zero,80009f0 <HIDKProbe+0x84>
		return (FALSE);
 80009e8:	0005883a 	mov	r2,zero
 80009ec:	0000dc06 	br	8000d60 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 80009f0:	e0bffa17 	ldw	r2,-24(fp)
 80009f4:	1080008b 	ldhu	r2,2(r2)
 80009f8:	10bfffcc 	andi	r2,r2,65535
 80009fc:	10804070 	cmpltui	r2,r2,257
 8000a00:	1000031e 	bne	r2,zero,8000a10 <HIDKProbe+0xa4>
		total_length = 256;
 8000a04:	00804004 	movi	r2,256
 8000a08:	e0bff90d 	sth	r2,-28(fp)
 8000a0c:	00000306 	br	8000a1c <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000a10:	e0bffa17 	ldw	r2,-24(fp)
 8000a14:	1080008b 	ldhu	r2,2(r2)
 8000a18:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8000a1c:	e13ffe03 	ldbu	r4,-8(fp)
 8000a20:	e0fff90b 	ldhu	r3,-28(fp)
 8000a24:	008200b4 	movhi	r2,2050
 8000a28:	10be7b04 	addi	r2,r2,-1556
 8000a2c:	d8800415 	stw	r2,16(sp)
 8000a30:	d8c00315 	stw	r3,12(sp)
 8000a34:	d8000215 	stw	zero,8(sp)
 8000a38:	00800084 	movi	r2,2
 8000a3c:	d8800115 	stw	r2,4(sp)
 8000a40:	d8000015 	stw	zero,0(sp)
 8000a44:	01c00184 	movi	r7,6
 8000a48:	01802004 	movi	r6,128
 8000a4c:	000b883a 	mov	r5,zero
 8000a50:	80016cc0 	call	80016cc <XferCtrlReq>
 8000a54:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8000a58:	e0bffc03 	ldbu	r2,-16(fp)
 8000a5c:	10000226 	beq	r2,zero,8000a68 <HIDKProbe+0xfc>
		return (FALSE);
 8000a60:	0005883a 	mov	r2,zero
 8000a64:	0000be06 	br	8000d60 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 8000a68:	e0bffa17 	ldw	r2,-24(fp)
 8000a6c:	10800143 	ldbu	r2,5(r2)
 8000a70:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8000a74:	0000b306 	br	8000d44 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 8000a78:	e0bffa17 	ldw	r2,-24(fp)
 8000a7c:	10800043 	ldbu	r2,1(r2)
 8000a80:	10803fcc 	andi	r2,r2,255
 8000a84:	10800120 	cmpeqi	r2,r2,4
 8000a88:	1000091e 	bne	r2,zero,8000ab0 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000a8c:	e0bffa17 	ldw	r2,-24(fp)
 8000a90:	10800003 	ldbu	r2,0(r2)
 8000a94:	10803fcc 	andi	r2,r2,255
 8000a98:	e0fffb17 	ldw	r3,-20(fp)
 8000a9c:	1885883a 	add	r2,r3,r2
 8000aa0:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8000aa4:	e0bffb17 	ldw	r2,-20(fp)
 8000aa8:	e0bffa15 	stw	r2,-24(fp)
 8000aac:	0000a506 	br	8000d44 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8000ab0:	e0bffa17 	ldw	r2,-24(fp)
 8000ab4:	10800143 	ldbu	r2,5(r2)
 8000ab8:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8000abc:	e0bffa17 	ldw	r2,-24(fp)
 8000ac0:	10800183 	ldbu	r2,6(r2)
 8000ac4:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8000ac8:	e0bffa17 	ldw	r2,-24(fp)
 8000acc:	108001c3 	ldbu	r2,7(r2)
 8000ad0:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000ad4:	e0bffc83 	ldbu	r2,-14(fp)
 8000ad8:	108000d8 	cmpnei	r2,r2,3
 8000adc:	1000971e 	bne	r2,zero,8000d3c <HIDKProbe+0x3d0>
 8000ae0:	e0bffcc3 	ldbu	r2,-13(fp)
 8000ae4:	10800058 	cmpnei	r2,r2,1
 8000ae8:	1000941e 	bne	r2,zero,8000d3c <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 8000aec:	e0bffd03 	ldbu	r2,-12(fp)
 8000af0:	10800058 	cmpnei	r2,r2,1
 8000af4:	1000911e 	bne	r2,zero,8000d3c <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 8000af8:	e0fffe03 	ldbu	r3,-8(fp)
 8000afc:	008200b4 	movhi	r2,2050
 8000b00:	10bebb04 	addi	r2,r2,-1300
 8000b04:	180690fa 	slli	r3,r3,3
 8000b08:	10c5883a 	add	r2,r2,r3
 8000b0c:	10800104 	addi	r2,r2,4
 8000b10:	00c00044 	movi	r3,1
 8000b14:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 8000b18:	e0fffe03 	ldbu	r3,-8(fp)
 8000b1c:	008200b4 	movhi	r2,2050
 8000b20:	10bebb04 	addi	r2,r2,-1300
 8000b24:	180690fa 	slli	r3,r3,3
 8000b28:	10c5883a 	add	r2,r2,r3
 8000b2c:	10800017 	ldw	r2,0(r2)
 8000b30:	1080008b 	ldhu	r2,2(r2)
 8000b34:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 8000b38:	8000d740 	call	8000d74 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8000b3c:	e0fffe03 	ldbu	r3,-8(fp)
 8000b40:	008200b4 	movhi	r2,2050
 8000b44:	10bebb04 	addi	r2,r2,-1300
 8000b48:	180690fa 	slli	r3,r3,3
 8000b4c:	10c7883a 	add	r3,r2,r3
 8000b50:	008200b4 	movhi	r2,2050
 8000b54:	10be6704 	addi	r2,r2,-1636
 8000b58:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 8000b5c:	e0fffe03 	ldbu	r3,-8(fp)
 8000b60:	008200b4 	movhi	r2,2050
 8000b64:	10bebb04 	addi	r2,r2,-1300
 8000b68:	180690fa 	slli	r3,r3,3
 8000b6c:	10c5883a 	add	r2,r2,r3
 8000b70:	10800017 	ldw	r2,0(r2)
 8000b74:	e0fffd43 	ldbu	r3,-11(fp)
 8000b78:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 8000b7c:	e0bffa17 	ldw	r2,-24(fp)
 8000b80:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 8000b84:	d0a6e145 	stb	r2,-25723(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 8000b88:	e0bffe03 	ldbu	r2,-8(fp)
 8000b8c:	d0a6e105 	stb	r2,-25724(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 8000b90:	e0bffa17 	ldw	r2,-24(fp)
 8000b94:	10800003 	ldbu	r2,0(r2)
 8000b98:	10803fcc 	andi	r2,r2,255
 8000b9c:	e0fffb17 	ldw	r3,-20(fp)
 8000ba0:	1885883a 	add	r2,r3,r2
 8000ba4:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8000ba8:	e0bffb17 	ldw	r2,-20(fp)
 8000bac:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 8000bb0:	00005b06 	br	8000d20 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 8000bb4:	e0bffa17 	ldw	r2,-24(fp)
 8000bb8:	10800043 	ldbu	r2,1(r2)
 8000bbc:	10803fcc 	andi	r2,r2,255
 8000bc0:	10800160 	cmpeqi	r2,r2,5
 8000bc4:	1000091e 	bne	r2,zero,8000bec <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000bc8:	e0bffa17 	ldw	r2,-24(fp)
 8000bcc:	10800003 	ldbu	r2,0(r2)
 8000bd0:	10803fcc 	andi	r2,r2,255
 8000bd4:	e0fffb17 	ldw	r3,-20(fp)
 8000bd8:	1885883a 	add	r2,r3,r2
 8000bdc:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8000be0:	e0bffb17 	ldw	r2,-20(fp)
 8000be4:	e0bffa15 	stw	r2,-24(fp)
 8000be8:	00004d06 	br	8000d20 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000bec:	e0fffe03 	ldbu	r3,-8(fp)
 8000bf0:	008200b4 	movhi	r2,2050
 8000bf4:	10bebb04 	addi	r2,r2,-1300
 8000bf8:	180690fa 	slli	r3,r3,3
 8000bfc:	10c5883a 	add	r2,r2,r3
 8000c00:	10800017 	ldw	r2,0(r2)
 8000c04:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8000c08:	e0fffa17 	ldw	r3,-24(fp)
 8000c0c:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000c10:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8000c14:	e0fffe03 	ldbu	r3,-8(fp)
 8000c18:	008200b4 	movhi	r2,2050
 8000c1c:	10bebb04 	addi	r2,r2,-1300
 8000c20:	180690fa 	slli	r3,r3,3
 8000c24:	10c5883a 	add	r2,r2,r3
 8000c28:	10800017 	ldw	r2,0(r2)
 8000c2c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8000c30:	e0fffa17 	ldw	r3,-24(fp)
 8000c34:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8000c38:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8000c3c:	e0fffe03 	ldbu	r3,-8(fp)
 8000c40:	008200b4 	movhi	r2,2050
 8000c44:	10bebb04 	addi	r2,r2,-1300
 8000c48:	180690fa 	slli	r3,r3,3
 8000c4c:	10c5883a 	add	r2,r2,r3
 8000c50:	10800017 	ldw	r2,0(r2)
 8000c54:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8000c58:	e0fffa17 	ldw	r3,-24(fp)
 8000c5c:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8000c60:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8000c64:	e0fffe03 	ldbu	r3,-8(fp)
 8000c68:	008200b4 	movhi	r2,2050
 8000c6c:	10bebb04 	addi	r2,r2,-1300
 8000c70:	180690fa 	slli	r3,r3,3
 8000c74:	10c5883a 	add	r2,r2,r3
 8000c78:	10800017 	ldw	r2,0(r2)
 8000c7c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8000c80:	e0fffa17 	ldw	r3,-24(fp)
 8000c84:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8000c88:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8000c8c:	e0fffe03 	ldbu	r3,-8(fp)
 8000c90:	e0bffc43 	ldbu	r2,-15(fp)
 8000c94:	d8000415 	stw	zero,16(sp)
 8000c98:	d8000315 	stw	zero,12(sp)
 8000c9c:	d8000215 	stw	zero,8(sp)
 8000ca0:	d8000115 	stw	zero,4(sp)
 8000ca4:	d8800015 	stw	r2,0(sp)
 8000ca8:	01c00244 	movi	r7,9
 8000cac:	000d883a 	mov	r6,zero
 8000cb0:	000b883a 	mov	r5,zero
 8000cb4:	1809883a 	mov	r4,r3
 8000cb8:	80016cc0 	call	80016cc <XferCtrlReq>
 8000cbc:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 8000cc0:	e0bffc03 	ldbu	r2,-16(fp)
 8000cc4:	10000226 	beq	r2,zero,8000cd0 <HIDKProbe+0x364>
							return (FALSE);
 8000cc8:	0005883a 	mov	r2,zero
 8000ccc:	00002406 	br	8000d60 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8000cd0:	e0fffe03 	ldbu	r3,-8(fp)
 8000cd4:	d0a6e143 	ldbu	r2,-25723(gp)
 8000cd8:	10803fcc 	andi	r2,r2,255
 8000cdc:	d8000415 	stw	zero,16(sp)
 8000ce0:	d8000315 	stw	zero,12(sp)
 8000ce4:	d8800215 	stw	r2,8(sp)
 8000ce8:	d8000115 	stw	zero,4(sp)
 8000cec:	d8000015 	stw	zero,0(sp)
 8000cf0:	01c002c4 	movi	r7,11
 8000cf4:	01800844 	movi	r6,33
 8000cf8:	000b883a 	mov	r5,zero
 8000cfc:	1809883a 	mov	r4,r3
 8000d00:	80016cc0 	call	80016cc <XferCtrlReq>
 8000d04:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8000d08:	e0bffc03 	ldbu	r2,-16(fp)
 8000d0c:	10000226 	beq	r2,zero,8000d18 <HIDKProbe+0x3ac>
							return (FALSE);
 8000d10:	0005883a 	mov	r2,zero
 8000d14:	00001206 	br	8000d60 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 8000d18:	00800044 	movi	r2,1
 8000d1c:	00001006 	br	8000d60 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8000d20:	e0fff90b 	ldhu	r3,-28(fp)
 8000d24:	008200b4 	movhi	r2,2050
 8000d28:	10be7b04 	addi	r2,r2,-1556
 8000d2c:	1885883a 	add	r2,r3,r2
 8000d30:	e0fffb17 	ldw	r3,-20(fp)
 8000d34:	18bf9f36 	bltu	r3,r2,8000bb4 <__alt_data_end+0xfc000bb4>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000d38:	00000206 	br	8000d44 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 8000d3c:	0005883a 	mov	r2,zero
 8000d40:	00000706 	br	8000d60 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8000d44:	e0fff90b 	ldhu	r3,-28(fp)
 8000d48:	008200b4 	movhi	r2,2050
 8000d4c:	10be7b04 	addi	r2,r2,-1556
 8000d50:	1885883a 	add	r2,r3,r2
 8000d54:	e0fffb17 	ldw	r3,-20(fp)
 8000d58:	18bf4736 	bltu	r3,r2,8000a78 <__alt_data_end+0xfc000a78>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8000d5c:	0005883a 	mov	r2,zero
}
 8000d60:	e037883a 	mov	sp,fp
 8000d64:	dfc00117 	ldw	ra,4(sp)
 8000d68:	df000017 	ldw	fp,0(sp)
 8000d6c:	dec00204 	addi	sp,sp,8
 8000d70:	f800283a 	ret

08000d74 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 8000d74:	deffff04 	addi	sp,sp,-4
 8000d78:	df000015 	stw	fp,0(sp)
 8000d7c:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 8000d80:	008200b4 	movhi	r2,2050
 8000d84:	10be6704 	addi	r2,r2,-1636
 8000d88:	00c01004 	movi	r3,64
 8000d8c:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 8000d90:	008200b4 	movhi	r2,2050
 8000d94:	10be6704 	addi	r2,r2,-1636
 8000d98:	00c00404 	movi	r3,16
 8000d9c:	10c00385 	stb	r3,14(r2)
}
 8000da0:	0001883a 	nop
 8000da4:	e037883a 	mov	sp,fp
 8000da8:	df000017 	ldw	fp,0(sp)
 8000dac:	dec00104 	addi	sp,sp,4
 8000db0:	f800283a 	ret

08000db4 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 8000db4:	defffb04 	addi	sp,sp,-20
 8000db8:	dfc00415 	stw	ra,16(sp)
 8000dbc:	df000315 	stw	fp,12(sp)
 8000dc0:	df000304 	addi	fp,sp,12
 8000dc4:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8000dc8:	d0a6e103 	ldbu	r2,-25724(gp)
 8000dcc:	10803fcc 	andi	r2,r2,255
 8000dd0:	100b883a 	mov	r5,r2
 8000dd4:	01003804 	movi	r4,224
 8000dd8:	8000f900 	call	8000f90 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000ddc:	d0a6e103 	ldbu	r2,-25724(gp)
 8000de0:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8000de4:	d0a6e103 	ldbu	r2,-25724(gp)
 8000de8:	10c03fcc 	andi	r3,r2,255
 8000dec:	008200b4 	movhi	r2,2050
 8000df0:	10bebb04 	addi	r2,r2,-1300
 8000df4:	180690fa 	slli	r3,r3,3
 8000df8:	10c5883a 	add	r2,r2,r3
 8000dfc:	10800017 	ldw	r2,0(r2)
 8000e00:	10800204 	addi	r2,r2,8
 8000e04:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000e08:	10803fcc 	andi	r2,r2,255
 8000e0c:	d8800015 	stw	r2,0(sp)
 8000e10:	e1ffff17 	ldw	r7,-4(fp)
 8000e14:	01800204 	movi	r6,8
 8000e18:	01400044 	movi	r5,1
 8000e1c:	8001af00 	call	8001af0 <XferInTransfer>
 8000e20:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8000e24:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000e28:	e037883a 	mov	sp,fp
 8000e2c:	dfc00117 	ldw	ra,4(sp)
 8000e30:	df000017 	ldw	fp,0(sp)
 8000e34:	dec00204 	addi	sp,sp,8
 8000e38:	f800283a 	ret

08000e3c <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 8000e3c:	defffb04 	addi	sp,sp,-20
 8000e40:	dfc00415 	stw	ra,16(sp)
 8000e44:	df000315 	stw	fp,12(sp)
 8000e48:	df000304 	addi	fp,sp,12
 8000e4c:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8000e50:	d0a6e103 	ldbu	r2,-25724(gp)
 8000e54:	10803fcc 	andi	r2,r2,255
 8000e58:	100b883a 	mov	r5,r2
 8000e5c:	01003804 	movi	r4,224
 8000e60:	8000f900 	call	8000f90 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000e64:	d0a6e103 	ldbu	r2,-25724(gp)
 8000e68:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8000e6c:	d0a6e103 	ldbu	r2,-25724(gp)
 8000e70:	10c03fcc 	andi	r3,r2,255
 8000e74:	008200b4 	movhi	r2,2050
 8000e78:	10bebb04 	addi	r2,r2,-1300
 8000e7c:	180690fa 	slli	r3,r3,3
 8000e80:	10c5883a 	add	r2,r2,r3
 8000e84:	10800017 	ldw	r2,0(r2)
 8000e88:	10800204 	addi	r2,r2,8
 8000e8c:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000e90:	10803fcc 	andi	r2,r2,255
 8000e94:	d8800015 	stw	r2,0(sp)
 8000e98:	e1ffff17 	ldw	r7,-4(fp)
 8000e9c:	01800204 	movi	r6,8
 8000ea0:	01400044 	movi	r5,1
 8000ea4:	8001af00 	call	8001af0 <XferInTransfer>
 8000ea8:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8000eac:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000eb0:	e037883a 	mov	sp,fp
 8000eb4:	dfc00117 	ldw	ra,4(sp)
 8000eb8:	df000017 	ldw	fp,0(sp)
 8000ebc:	dec00204 	addi	sp,sp,8
 8000ec0:	f800283a 	ret

08000ec4 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8000ec4:	defffb04 	addi	sp,sp,-20
 8000ec8:	df000415 	stw	fp,16(sp)
 8000ecc:	df000404 	addi	fp,sp,16
 8000ed0:	2007883a 	mov	r3,r4
 8000ed4:	2805883a 	mov	r2,r5
 8000ed8:	e1bffe15 	stw	r6,-8(fp)
 8000edc:	e1ffff15 	stw	r7,-4(fp)
 8000ee0:	e0fffc05 	stb	r3,-16(fp)
 8000ee4:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 8000ee8:	0005883a 	mov	r2,zero
}
 8000eec:	e037883a 	mov	sp,fp
 8000ef0:	df000017 	ldw	fp,0(sp)
 8000ef4:	dec00104 	addi	sp,sp,4
 8000ef8:	f800283a 	ret

08000efc <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8000efc:	defffb04 	addi	sp,sp,-20
 8000f00:	df000415 	stw	fp,16(sp)
 8000f04:	df000404 	addi	fp,sp,16
 8000f08:	2007883a 	mov	r3,r4
 8000f0c:	2805883a 	mov	r2,r5
 8000f10:	e1bffe15 	stw	r6,-8(fp)
 8000f14:	e1ffff15 	stw	r7,-4(fp)
 8000f18:	e0fffc05 	stb	r3,-16(fp)
 8000f1c:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 8000f20:	0005883a 	mov	r2,zero
}
 8000f24:	e037883a 	mov	sp,fp
 8000f28:	df000017 	ldw	fp,0(sp)
 8000f2c:	dec00104 	addi	sp,sp,4
 8000f30:	f800283a 	ret

08000f34 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 8000f34:	defffc04 	addi	sp,sp,-16
 8000f38:	df000315 	stw	fp,12(sp)
 8000f3c:	df000304 	addi	fp,sp,12
 8000f40:	2807883a 	mov	r3,r5
 8000f44:	3005883a 	mov	r2,r6
 8000f48:	e13ffd05 	stb	r4,-12(fp)
 8000f4c:	e0fffe05 	stb	r3,-8(fp)
 8000f50:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 8000f54:	0001883a 	nop
 8000f58:	e037883a 	mov	sp,fp
 8000f5c:	df000017 	ldw	fp,0(sp)
 8000f60:	dec00104 	addi	sp,sp,4
 8000f64:	f800283a 	ret

08000f68 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultaneously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 8000f68:	defffe04 	addi	sp,sp,-8
 8000f6c:	df000115 	stw	fp,4(sp)
 8000f70:	df000104 	addi	fp,sp,4
 8000f74:	2005883a 	mov	r2,r4
 8000f78:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 8000f7c:	0001883a 	nop
 8000f80:	e037883a 	mov	sp,fp
 8000f84:	df000017 	ldw	fp,0(sp)
 8000f88:	dec00104 	addi	sp,sp,4
 8000f8c:	f800283a 	ret

08000f90 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 8000f90:	defff704 	addi	sp,sp,-36
 8000f94:	dfc00815 	stw	ra,32(sp)
 8000f98:	df000715 	stw	fp,28(sp)
 8000f9c:	df000704 	addi	fp,sp,28
 8000fa0:	2007883a 	mov	r3,r4
 8000fa4:	2805883a 	mov	r2,r5
 8000fa8:	e0fffe05 	stb	r3,-8(fp)
 8000fac:	e0bfff05 	stb	r2,-4(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	alt_u8 wdata[2];
	wdata[0] = reg + 2;
 8000fb0:	e0bffe03 	ldbu	r2,-8(fp)
 8000fb4:	10800084 	addi	r2,r2,2
 8000fb8:	e0bffd05 	stb	r2,-12(fp)
	wdata[1] = val;
 8000fbc:	e0bfff03 	ldbu	r2,-4(fp)
 8000fc0:	e0bffd45 	stb	r2,-11(fp)
	int code = alt_avalon_spi_command(SPI_BASE, 0, 2, wdata, 0, NULL, 0);
 8000fc4:	e0bffd04 	addi	r2,fp,-12
 8000fc8:	d8000215 	stw	zero,8(sp)
 8000fcc:	d8000115 	stw	zero,4(sp)
 8000fd0:	d8000015 	stw	zero,0(sp)
 8000fd4:	100f883a 	mov	r7,r2
 8000fd8:	01800084 	movi	r6,2
 8000fdc:	000b883a 	mov	r5,zero
 8000fe0:	01082804 	movi	r4,8352
 8000fe4:	801a8880 	call	801a888 <alt_avalon_spi_command>
 8000fe8:	e0bffc15 	stw	r2,-16(fp)
	if (code < 0)
 8000fec:	e0bffc17 	ldw	r2,-16(fp)
 8000ff0:	1000030e 	bge	r2,zero,8001000 <MAXreg_wr+0x70>
		printf("Reg Write Error!");
 8000ff4:	010200b4 	movhi	r4,2050
 8000ff8:	212eae04 	addi	r4,r4,-17736
 8000ffc:	80047f80 	call	80047f8 <printf>
}
 8001000:	0001883a 	nop
 8001004:	e037883a 	mov	sp,fp
 8001008:	dfc00117 	ldw	ra,4(sp)
 800100c:	df000017 	ldw	fp,0(sp)
 8001010:	dec00204 	addi	sp,sp,8
 8001014:	f800283a 	ret

08001018 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 8001018:	defff304 	addi	sp,sp,-52
 800101c:	dfc00c15 	stw	ra,48(sp)
 8001020:	df000b15 	stw	fp,44(sp)
 8001024:	dc000a15 	stw	r16,40(sp)
 8001028:	df000b04 	addi	fp,sp,44
 800102c:	201b883a 	mov	r13,r4
 8001030:	2809883a 	mov	r4,r5
 8001034:	e1bffe15 	stw	r6,-8(fp)
 8001038:	e37ffc05 	stb	r13,-16(fp)
 800103c:	e13ffd05 	stb	r4,-12(fp)
 8001040:	d809883a 	mov	r4,sp
 8001044:	2021883a 	mov	r16,r4
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 wdata[1 + nbytes];
 8001048:	e13ffd03 	ldbu	r4,-12(fp)
 800104c:	21000044 	addi	r4,r4,1
 8001050:	217fffc4 	addi	r5,r4,-1
 8001054:	e17ff915 	stw	r5,-28(fp)
 8001058:	200b883a 	mov	r5,r4
 800105c:	2817883a 	mov	r11,r5
 8001060:	0019883a 	mov	r12,zero
 8001064:	580ad77a 	srli	r5,r11,29
 8001068:	601090fa 	slli	r8,r12,3
 800106c:	2a10b03a 	or	r8,r5,r8
 8001070:	580e90fa 	slli	r7,r11,3
 8001074:	200b883a 	mov	r5,r4
 8001078:	2813883a 	mov	r9,r5
 800107c:	0015883a 	mov	r10,zero
 8001080:	480ad77a 	srli	r5,r9,29
 8001084:	500690fa 	slli	r3,r10,3
 8001088:	28c6b03a 	or	r3,r5,r3
 800108c:	480490fa 	slli	r2,r9,3
 8001090:	2005883a 	mov	r2,r4
 8001094:	108000c4 	addi	r2,r2,3
 8001098:	1004d0ba 	srli	r2,r2,2
 800109c:	1085883a 	add	r2,r2,r2
 80010a0:	1085883a 	add	r2,r2,r2
 80010a4:	d8b7c83a 	sub	sp,sp,r2
 80010a8:	d8800304 	addi	r2,sp,12
 80010ac:	1005883a 	mov	r2,r2
 80010b0:	e0bffa15 	stw	r2,-24(fp)
	wdata[0] = reg + 2;
 80010b4:	e0bffc03 	ldbu	r2,-16(fp)
 80010b8:	10800084 	addi	r2,r2,2
 80010bc:	1007883a 	mov	r3,r2
 80010c0:	e0bffa17 	ldw	r2,-24(fp)
 80010c4:	10c00005 	stb	r3,0(r2)
	for (int i = 0; i < nbytes; i++)
 80010c8:	e03ff815 	stw	zero,-32(fp)
 80010cc:	00000c06 	br	8001100 <MAXbytes_wr+0xe8>
		wdata[1 + i] = data[i];
 80010d0:	e0bff817 	ldw	r2,-32(fp)
 80010d4:	10800044 	addi	r2,r2,1
 80010d8:	e0fff817 	ldw	r3,-32(fp)
 80010dc:	e13ffe17 	ldw	r4,-8(fp)
 80010e0:	20c7883a 	add	r3,r4,r3
 80010e4:	18c00003 	ldbu	r3,0(r3)
 80010e8:	e13ffa17 	ldw	r4,-24(fp)
 80010ec:	2085883a 	add	r2,r4,r2
 80010f0:	10c00005 	stb	r3,0(r2)
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 wdata[1 + nbytes];
	wdata[0] = reg + 2;
	for (int i = 0; i < nbytes; i++)
 80010f4:	e0bff817 	ldw	r2,-32(fp)
 80010f8:	10800044 	addi	r2,r2,1
 80010fc:	e0bff815 	stw	r2,-32(fp)
 8001100:	e0bffd03 	ldbu	r2,-12(fp)
 8001104:	e0fff817 	ldw	r3,-32(fp)
 8001108:	18bff116 	blt	r3,r2,80010d0 <__alt_data_end+0xfc0010d0>
		wdata[1 + i] = data[i];
	int code = alt_avalon_spi_command(SPI_BASE, 0, 1 + nbytes, wdata, 0, NULL, 0);
 800110c:	e0bffd03 	ldbu	r2,-12(fp)
 8001110:	10800044 	addi	r2,r2,1
 8001114:	1007883a 	mov	r3,r2
 8001118:	e0bffa17 	ldw	r2,-24(fp)
 800111c:	d8000215 	stw	zero,8(sp)
 8001120:	d8000115 	stw	zero,4(sp)
 8001124:	d8000015 	stw	zero,0(sp)
 8001128:	100f883a 	mov	r7,r2
 800112c:	180d883a 	mov	r6,r3
 8001130:	000b883a 	mov	r5,zero
 8001134:	01082804 	movi	r4,8352
 8001138:	801a8880 	call	801a888 <alt_avalon_spi_command>
 800113c:	e0bffb15 	stw	r2,-20(fp)
	if (code < 0)
 8001140:	e0bffb17 	ldw	r2,-20(fp)
 8001144:	1000030e 	bge	r2,zero,8001154 <MAXbytes_wr+0x13c>
		printf("Byte Write Error!");
 8001148:	010200b4 	movhi	r4,2050
 800114c:	212eb304 	addi	r4,r4,-17716
 8001150:	80047f80 	call	80047f8 <printf>
	return data + nbytes;
 8001154:	e0bffd03 	ldbu	r2,-12(fp)
 8001158:	e0fffe17 	ldw	r3,-8(fp)
 800115c:	1885883a 	add	r2,r3,r2
 8001160:	8037883a 	mov	sp,r16
}
 8001164:	e6ffff04 	addi	sp,fp,-4
 8001168:	dfc00217 	ldw	ra,8(sp)
 800116c:	df000117 	ldw	fp,4(sp)
 8001170:	dc000017 	ldw	r16,0(sp)
 8001174:	dec00304 	addi	sp,sp,12
 8001178:	f800283a 	ret

0800117c <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 800117c:	defff804 	addi	sp,sp,-32
 8001180:	dfc00715 	stw	ra,28(sp)
 8001184:	df000615 	stw	fp,24(sp)
 8001188:	df000604 	addi	fp,sp,24
 800118c:	2005883a 	mov	r2,r4
 8001190:	e0bfff05 	stb	r2,-4(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	alt_u8 wdata[1];
	wdata[0] = reg;
 8001194:	e0bfff03 	ldbu	r2,-4(fp)
 8001198:	e0bffe05 	stb	r2,-8(fp)
	alt_u8 rdata[1];
	int code = alt_avalon_spi_command(SPI_BASE, 0, 1, wdata, 1, rdata, 0);
 800119c:	e0fffe04 	addi	r3,fp,-8
 80011a0:	d8000215 	stw	zero,8(sp)
 80011a4:	e0bffe44 	addi	r2,fp,-7
 80011a8:	d8800115 	stw	r2,4(sp)
 80011ac:	00800044 	movi	r2,1
 80011b0:	d8800015 	stw	r2,0(sp)
 80011b4:	180f883a 	mov	r7,r3
 80011b8:	01800044 	movi	r6,1
 80011bc:	000b883a 	mov	r5,zero
 80011c0:	01082804 	movi	r4,8352
 80011c4:	801a8880 	call	801a888 <alt_avalon_spi_command>
 80011c8:	e0bffd15 	stw	r2,-12(fp)
	if (code < 0)
 80011cc:	e0bffd17 	ldw	r2,-12(fp)
 80011d0:	1000030e 	bge	r2,zero,80011e0 <MAXreg_rd+0x64>
		printf("Reg Read Error!");
 80011d4:	010200b4 	movhi	r4,2050
 80011d8:	212eb804 	addi	r4,r4,-17696
 80011dc:	80047f80 	call	80047f8 <printf>
	return rdata[0];
 80011e0:	e0bffe43 	ldbu	r2,-7(fp)
}
 80011e4:	e037883a 	mov	sp,fp
 80011e8:	dfc00117 	ldw	ra,4(sp)
 80011ec:	df000017 	ldw	fp,0(sp)
 80011f0:	dec00204 	addi	sp,sp,8
 80011f4:	f800283a 	ret

080011f8 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 80011f8:	defff604 	addi	sp,sp,-40
 80011fc:	dfc00915 	stw	ra,36(sp)
 8001200:	df000815 	stw	fp,32(sp)
 8001204:	df000804 	addi	fp,sp,32
 8001208:	2007883a 	mov	r3,r4
 800120c:	2805883a 	mov	r2,r5
 8001210:	e1bfff15 	stw	r6,-4(fp)
 8001214:	e0fffd05 	stb	r3,-12(fp)
 8001218:	e0bffe05 	stb	r2,-8(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 wdata[1];
	wdata[0] = reg;
 800121c:	e0bffd03 	ldbu	r2,-12(fp)
 8001220:	e0bffc05 	stb	r2,-16(fp)
	int code = alt_avalon_spi_command(SPI_BASE, 0, 1, wdata, nbytes, data, 0);
 8001224:	e0bffe03 	ldbu	r2,-8(fp)
 8001228:	e13ffc04 	addi	r4,fp,-16
 800122c:	d8000215 	stw	zero,8(sp)
 8001230:	e0ffff17 	ldw	r3,-4(fp)
 8001234:	d8c00115 	stw	r3,4(sp)
 8001238:	d8800015 	stw	r2,0(sp)
 800123c:	200f883a 	mov	r7,r4
 8001240:	01800044 	movi	r6,1
 8001244:	000b883a 	mov	r5,zero
 8001248:	01082804 	movi	r4,8352
 800124c:	801a8880 	call	801a888 <alt_avalon_spi_command>
 8001250:	e0bffb15 	stw	r2,-20(fp)
	if (code < 0)
 8001254:	e0bffb17 	ldw	r2,-20(fp)
 8001258:	1000030e 	bge	r2,zero,8001268 <MAXbytes_rd+0x70>
		printf("Byte Read Error!");
 800125c:	010200b4 	movhi	r4,2050
 8001260:	212ebc04 	addi	r4,r4,-17680
 8001264:	80047f80 	call	80047f8 <printf>
	return data + nbytes;
 8001268:	e0bffe03 	ldbu	r2,-8(fp)
 800126c:	e0ffff17 	ldw	r3,-4(fp)
 8001270:	1885883a 	add	r2,r3,r2
}
 8001274:	e037883a 	mov	sp,fp
 8001278:	dfc00117 	ldw	ra,4(sp)
 800127c:	df000017 	ldw	fp,0(sp)
 8001280:	dec00204 	addi	sp,sp,8
 8001284:	f800283a 	ret

08001288 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 8001288:	defffd04 	addi	sp,sp,-12
 800128c:	dfc00215 	stw	ra,8(sp)
 8001290:	df000115 	stw	fp,4(sp)
 8001294:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 8001298:	0007883a 	mov	r3,zero
 800129c:	00886804 	movi	r2,8608
 80012a0:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 80012a4:	010003f4 	movhi	r4,15
 80012a8:	21109004 	addi	r4,r4,16960
 80012ac:	8019be40 	call	8019be4 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 80012b0:	00c00044 	movi	r3,1
 80012b4:	00886804 	movi	r2,8608
 80012b8:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 80012bc:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 80012c0:	01400804 	movi	r5,32
 80012c4:	01001e04 	movi	r4,120
 80012c8:	8000f900 	call	8000f90 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 80012cc:	000b883a 	mov	r5,zero
 80012d0:	01001e04 	movi	r4,120
 80012d4:	8000f900 	call	8000f90 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 80012d8:	00000806 	br	80012fc <MAX3421E_reset+0x74>
		tmp++;                                      //timeout after 256 attempts
 80012dc:	e0bfff03 	ldbu	r2,-4(fp)
 80012e0:	10800044 	addi	r2,r2,1
 80012e4:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 80012e8:	e0bfff03 	ldbu	r2,-4(fp)
 80012ec:	1000031e 	bne	r2,zero,80012fc <MAX3421E_reset+0x74>
			printf("reset timeout!");
 80012f0:	010200b4 	movhi	r4,2050
 80012f4:	212ec104 	addi	r4,r4,-17660
 80012f8:	80047f80 	call	80047f8 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 80012fc:	01001a04 	movi	r4,104
 8001300:	800117c0 	call	800117c <MAXreg_rd>
 8001304:	10803fcc 	andi	r2,r2,255
 8001308:	1080004c 	andi	r2,r2,1
 800130c:	103ff326 	beq	r2,zero,80012dc <__alt_data_end+0xfc0012dc>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 8001310:	0001883a 	nop
 8001314:	e037883a 	mov	sp,fp
 8001318:	dfc00117 	ldw	ra,4(sp)
 800131c:	df000017 	ldw	fp,0(sp)
 8001320:	dec00204 	addi	sp,sp,8
 8001324:	f800283a 	ret

08001328 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 8001328:	defffe04 	addi	sp,sp,-8
 800132c:	df000115 	stw	fp,4(sp)
 8001330:	df000104 	addi	fp,sp,4
 8001334:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 8001338:	00800044 	movi	r2,1
}
 800133c:	e037883a 	mov	sp,fp
 8001340:	df000017 	ldw	fp,0(sp)
 8001344:	dec00104 	addi	sp,sp,4
 8001348:	f800283a 	ret

0800134c <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 800134c:	defffd04 	addi	sp,sp,-12
 8001350:	dfc00215 	stw	ra,8(sp)
 8001354:	df000115 	stw	fp,4(sp)
 8001358:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 800135c:	01003e04 	movi	r4,248
 8001360:	800117c0 	call	800117c <MAXreg_rd>
 8001364:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 8001368:	e0ffff03 	ldbu	r3,-4(fp)
 800136c:	00bff004 	movi	r2,-64
 8001370:	1884703a 	and	r2,r3,r2
 8001374:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 8001378:	e0bfff03 	ldbu	r2,-4(fp)
 800137c:	10c01020 	cmpeqi	r3,r2,64
 8001380:	1800221e 	bne	r3,zero,800140c <MAX_busprobe+0xc0>
 8001384:	10c01048 	cmpgei	r3,r2,65
 8001388:	1800021e 	bne	r3,zero,8001394 <MAX_busprobe+0x48>
 800138c:	10003b26 	beq	r2,zero,800147c <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8001390:	00004a06 	br	80014bc <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 8001394:	10c02020 	cmpeqi	r3,r2,128
 8001398:	1800031e 	bne	r3,zero,80013a8 <MAX_busprobe+0x5c>
 800139c:	10803020 	cmpeqi	r2,r2,192
 80013a0:	1000331e 	bne	r2,zero,8001470 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 80013a4:	00004506 	br	80014bc <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 80013a8:	d0a00203 	ldbu	r2,-32760(gp)
 80013ac:	10803fcc 	andi	r2,r2,255
 80013b0:	108004e0 	cmpeqi	r2,r2,19
 80013b4:	10003e1e 	bne	r2,zero,80014b0 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 80013b8:	01003604 	movi	r4,216
 80013bc:	800117c0 	call	800117c <MAXreg_rd>
 80013c0:	10803fcc 	andi	r2,r2,255
 80013c4:	1080008c 	andi	r2,r2,2
 80013c8:	1000071e 	bne	r2,zero,80013e8 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 80013cc:	01403244 	movi	r5,201
 80013d0:	01003604 	movi	r4,216
 80013d4:	8000f900 	call	8000f90 <MAXreg_wr>
				printf("Starting in full speed\n");
 80013d8:	010200b4 	movhi	r4,2050
 80013dc:	212ec504 	addi	r4,r4,-17644
 80013e0:	80048f40 	call	80048f4 <puts>
 80013e4:	00000606 	br	8001400 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 80013e8:	014032c4 	movi	r5,203
 80013ec:	01003604 	movi	r4,216
 80013f0:	8000f900 	call	8000f90 <MAXreg_wr>
				printf("Starting in low speed\n");
 80013f4:	010200b4 	movhi	r4,2050
 80013f8:	212ecb04 	addi	r4,r4,-17620
 80013fc:	80048f40 	call	80048f4 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 8001400:	00800404 	movi	r2,16
 8001404:	d0a00205 	stb	r2,-32760(gp)
		}
		break;
 8001408:	00002906 	br	80014b0 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 800140c:	d0a00203 	ldbu	r2,-32760(gp)
 8001410:	10803fcc 	andi	r2,r2,255
 8001414:	108004e0 	cmpeqi	r2,r2,19
 8001418:	1000271e 	bne	r2,zero,80014b8 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 800141c:	01003604 	movi	r4,216
 8001420:	800117c0 	call	800117c <MAXreg_rd>
 8001424:	10803fcc 	andi	r2,r2,255
 8001428:	1080008c 	andi	r2,r2,2
 800142c:	1000071e 	bne	r2,zero,800144c <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 8001430:	014032c4 	movi	r5,203
 8001434:	01003604 	movi	r4,216
 8001438:	8000f900 	call	8000f90 <MAXreg_wr>
				printf("Starting in low speed\n");
 800143c:	010200b4 	movhi	r4,2050
 8001440:	212ecb04 	addi	r4,r4,-17620
 8001444:	80048f40 	call	80048f4 <puts>
 8001448:	00000606 	br	8001464 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 800144c:	01403244 	movi	r5,201
 8001450:	01003604 	movi	r4,216
 8001454:	8000f900 	call	8000f90 <MAXreg_wr>
				printf("Starting in full speed\n");
 8001458:	010200b4 	movhi	r4,2050
 800145c:	212ec504 	addi	r4,r4,-17644
 8001460:	80048f40 	call	80048f4 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 8001464:	00800404 	movi	r2,16
 8001468:	d0a00205 	stb	r2,-32760(gp)
		}
		break;
 800146c:	00001206 	br	80014b8 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 8001470:	00800104 	movi	r2,4
 8001474:	d0a00205 	stb	r2,-32760(gp)
		break;
 8001478:	00001006 	br	80014bc <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 800147c:	d0a00203 	ldbu	r2,-32760(gp)
 8001480:	10803fcc 	andi	r2,r2,255
 8001484:	10803c0c 	andi	r2,r2,240
 8001488:	10000326 	beq	r2,zero,8001498 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 800148c:	00800044 	movi	r2,1
 8001490:	d0a00205 	stb	r2,-32760(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 8001494:	00000906 	br	80014bc <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 8001498:	01403244 	movi	r5,201
 800149c:	01003604 	movi	r4,216
 80014a0:	8000f900 	call	8000f90 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 80014a4:	008000c4 	movi	r2,3
 80014a8:	d0a00205 	stb	r2,-32760(gp)
		}
		break;
 80014ac:	00000306 	br	80014bc <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 80014b0:	0001883a 	nop
 80014b4:	00000106 	br	80014bc <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 80014b8:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 80014bc:	0001883a 	nop
 80014c0:	e037883a 	mov	sp,fp
 80014c4:	dfc00117 	ldw	ra,4(sp)
 80014c8:	df000017 	ldw	fp,0(sp)
 80014cc:	dec00204 	addi	sp,sp,8
 80014d0:	f800283a 	ret

080014d4 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 80014d4:	defffe04 	addi	sp,sp,-8
 80014d8:	dfc00115 	stw	ra,4(sp)
 80014dc:	df000015 	stw	fp,0(sp)
 80014e0:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 80014e4:	01400684 	movi	r5,26
 80014e8:	01002204 	movi	r4,136
 80014ec:	8000f900 	call	8000f90 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 80014f0:	80012880 	call	8001288 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 80014f4:	0009883a 	mov	r4,zero
 80014f8:	80013280 	call	8001328 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 80014fc:	01402004 	movi	r5,128
 8001500:	01002e04 	movi	r4,184
 8001504:	8000f900 	call	8000f90 <MAXreg_wr>
	Vbus_power( ON);
 8001508:	01000044 	movi	r4,1
 800150c:	80013280 	call	8001328 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 8001510:	01403444 	movi	r5,209
 8001514:	01003604 	movi	r4,216
 8001518:	8000f900 	call	8000f90 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 800151c:	01400804 	movi	r5,32
 8001520:	01003404 	movi	r4,208
 8001524:	8000f900 	call	8000f90 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 8001528:	01400104 	movi	r5,4
 800152c:	01003a04 	movi	r4,232
 8001530:	8000f900 	call	8000f90 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 8001534:	800134c0 	call	800134c <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 8001538:	01400804 	movi	r5,32
 800153c:	01003204 	movi	r4,200
 8001540:	8000f900 	call	8000f90 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 8001544:	01400044 	movi	r5,1
 8001548:	01002004 	movi	r4,128
 800154c:	8000f900 	call	8000f90 <MAXreg_wr>
}
 8001550:	0001883a 	nop
 8001554:	e037883a 	mov	sp,fp
 8001558:	dfc00117 	ldw	ra,4(sp)
 800155c:	df000017 	ldw	fp,0(sp)
 8001560:	dec00204 	addi	sp,sp,8
 8001564:	f800283a 	ret

08001568 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 8001568:	defffe04 	addi	sp,sp,-8
 800156c:	dfc00115 	stw	ra,4(sp)
 8001570:	df000015 	stw	fp,0(sp)
 8001574:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 8001578:	00887004 	movi	r2,8640
 800157c:	10800037 	ldwio	r2,0(r2)
 8001580:	1000041e 	bne	r2,zero,8001594 <MAX3421E_Task+0x2c>
		printf("MAX interrupt\n\r");
 8001584:	010200b4 	movhi	r4,2050
 8001588:	212ed104 	addi	r4,r4,-17596
 800158c:	80047f80 	call	80047f8 <printf>
		MaxIntHandler();
 8001590:	80015cc0 	call	80015cc <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 8001594:	00886c04 	movi	r2,8624
 8001598:	10800037 	ldwio	r2,0(r2)
 800159c:	10800058 	cmpnei	r2,r2,1
 80015a0:	1000041e 	bne	r2,zero,80015b4 <MAX3421E_Task+0x4c>
		printf("GPX interrupt\n\r");
 80015a4:	010200b4 	movhi	r4,2050
 80015a8:	212ed504 	addi	r4,r4,-17580
 80015ac:	80047f80 	call	80047f8 <printf>
		MaxGpxHandler();
 80015b0:	80016980 	call	8001698 <MaxGpxHandler>
	}
}
 80015b4:	0001883a 	nop
 80015b8:	e037883a 	mov	sp,fp
 80015bc:	dfc00117 	ldw	ra,4(sp)
 80015c0:	df000017 	ldw	fp,0(sp)
 80015c4:	dec00204 	addi	sp,sp,8
 80015c8:	f800283a 	ret

080015cc <MaxIntHandler>:

void MaxIntHandler(void) {
 80015cc:	defffd04 	addi	sp,sp,-12
 80015d0:	dfc00215 	stw	ra,8(sp)
 80015d4:	df000115 	stw	fp,4(sp)
 80015d8:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 80015dc:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 80015e0:	01003204 	movi	r4,200
 80015e4:	800117c0 	call	800117c <MAXreg_rd>
 80015e8:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 80015ec:	e0bfff43 	ldbu	r2,-3(fp)
 80015f0:	100b883a 	mov	r5,r2
 80015f4:	010200b4 	movhi	r4,2050
 80015f8:	212ed904 	addi	r4,r4,-17564
 80015fc:	80047f80 	call	80047f8 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 8001600:	e0bfff43 	ldbu	r2,-3(fp)
 8001604:	1080100c 	andi	r2,r2,64
 8001608:	10000326 	beq	r2,zero,8001618 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 800160c:	e0bfff03 	ldbu	r2,-4(fp)
 8001610:	10801014 	ori	r2,r2,64
 8001614:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 8001618:	e0bfff43 	ldbu	r2,-3(fp)
 800161c:	1080080c 	andi	r2,r2,32
 8001620:	10000426 	beq	r2,zero,8001634 <MaxIntHandler+0x68>
		MAX_busprobe();
 8001624:	800134c0 	call	800134c <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 8001628:	e0bfff03 	ldbu	r2,-4(fp)
 800162c:	10800814 	ori	r2,r2,32
 8001630:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 8001634:	e0bfff43 	ldbu	r2,-3(fp)
 8001638:	1080020c 	andi	r2,r2,8
 800163c:	10000326 	beq	r2,zero,800164c <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 8001640:	000b883a 	mov	r5,zero
 8001644:	01000e04 	movi	r4,56
 8001648:	8000f900 	call	8000f90 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 800164c:	e0bfff43 	ldbu	r2,-3(fp)
 8001650:	1080004c 	andi	r2,r2,1
 8001654:	10000626 	beq	r2,zero,8001670 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 8001658:	d0a00203 	ldbu	r2,-32760(gp)
 800165c:	10800044 	addi	r2,r2,1
 8001660:	d0a00205 	stb	r2,-32760(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 8001664:	e0bfff03 	ldbu	r2,-4(fp)
 8001668:	10800054 	ori	r2,r2,1
 800166c:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 8001670:	e0bfff03 	ldbu	r2,-4(fp)
 8001674:	100b883a 	mov	r5,r2
 8001678:	01003204 	movi	r4,200
 800167c:	8000f900 	call	8000f90 <MAXreg_wr>
}
 8001680:	0001883a 	nop
 8001684:	e037883a 	mov	sp,fp
 8001688:	dfc00117 	ldw	ra,4(sp)
 800168c:	df000017 	ldw	fp,0(sp)
 8001690:	dec00204 	addi	sp,sp,8
 8001694:	f800283a 	ret

08001698 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 8001698:	defffd04 	addi	sp,sp,-12
 800169c:	dfc00215 	stw	ra,8(sp)
 80016a0:	df000115 	stw	fp,4(sp)
 80016a4:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 80016a8:	01002c04 	movi	r4,176
 80016ac:	800117c0 	call	800117c <MAXreg_rd>
 80016b0:	e0bfff05 	stb	r2,-4(fp)
}
 80016b4:	0001883a 	nop
 80016b8:	e037883a 	mov	sp,fp
 80016bc:	dfc00117 	ldw	ra,4(sp)
 80016c0:	df000017 	ldw	fp,0(sp)
 80016c4:	dec00204 	addi	sp,sp,8
 80016c8:	f800283a 	ret

080016cc <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 80016cc:	defff104 	addi	sp,sp,-60
 80016d0:	dfc00e15 	stw	ra,56(sp)
 80016d4:	df000d15 	stw	fp,52(sp)
 80016d8:	df000d04 	addi	fp,sp,52
 80016dc:	2015883a 	mov	r10,r4
 80016e0:	2813883a 	mov	r9,r5
 80016e4:	3011883a 	mov	r8,r6
 80016e8:	380d883a 	mov	r6,r7
 80016ec:	e1400217 	ldw	r5,8(fp)
 80016f0:	e1000317 	ldw	r4,12(fp)
 80016f4:	e0c00417 	ldw	r3,16(fp)
 80016f8:	e0800517 	ldw	r2,20(fp)
 80016fc:	e2bff805 	stb	r10,-32(fp)
 8001700:	e27ff905 	stb	r9,-28(fp)
 8001704:	e23ffa05 	stb	r8,-24(fp)
 8001708:	e1bffb05 	stb	r6,-20(fp)
 800170c:	e17ffc05 	stb	r5,-16(fp)
 8001710:	e13ffd05 	stb	r4,-12(fp)
 8001714:	e0fffe0d 	sth	r3,-8(fp)
 8001718:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 800171c:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 8001720:	00800044 	movi	r2,1
 8001724:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 8001728:	e0800617 	ldw	r2,24(fp)
 800172c:	1000011e 	bne	r2,zero,8001734 <XferCtrlReq+0x68>
        datastage = 0;
 8001730:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 8001734:	e0bff803 	ldbu	r2,-32(fp)
 8001738:	100b883a 	mov	r5,r2
 800173c:	01003804 	movi	r4,224
 8001740:	8000f900 	call	8000f90 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 8001744:	e0bffa03 	ldbu	r2,-24(fp)
 8001748:	10803fcc 	andi	r2,r2,255
 800174c:	1080201c 	xori	r2,r2,128
 8001750:	10bfe004 	addi	r2,r2,-128
 8001754:	1000020e 	bge	r2,zero,8001760 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 8001758:	00800044 	movi	r2,1
 800175c:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8001760:	e0bffa03 	ldbu	r2,-24(fp)
 8001764:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 8001768:	e0bffb03 	ldbu	r2,-20(fp)
 800176c:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 8001770:	e0bffc03 	ldbu	r2,-16(fp)
 8001774:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 8001778:	e0bffd03 	ldbu	r2,-12(fp)
 800177c:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 8001780:	e0bffe0b 	ldhu	r2,-8(fp)
 8001784:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 8001788:	e0bfff0b 	ldhu	r2,-4(fp)
 800178c:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 8001790:	e0bff584 	addi	r2,fp,-42
 8001794:	100d883a 	mov	r6,r2
 8001798:	01400204 	movi	r5,8
 800179c:	01000804 	movi	r4,32
 80017a0:	80010180 	call	8001018 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 80017a4:	e0bff903 	ldbu	r2,-28(fp)
 80017a8:	100b883a 	mov	r5,r2
 80017ac:	01000404 	movi	r4,16
 80017b0:	80019740 	call	8001974 <XferDispatchPkt>
 80017b4:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 80017b8:	e0bff543 	ldbu	r2,-43(fp)
 80017bc:	10000226 	beq	r2,zero,80017c8 <XferCtrlReq+0xfc>
        return( rcode );
 80017c0:	e0bff543 	ldbu	r2,-43(fp)
 80017c4:	00000f06 	br	8001804 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 80017c8:	e0bff503 	ldbu	r2,-44(fp)
 80017cc:	1085883a 	add	r2,r2,r2
 80017d0:	1087883a 	add	r3,r2,r2
 80017d4:	d0a00004 	addi	r2,gp,-32768
 80017d8:	1885883a 	add	r2,r3,r2
 80017dc:	10800017 	ldw	r2,0(r2)
 80017e0:	e13ff803 	ldbu	r4,-32(fp)
 80017e4:	e17ff903 	ldbu	r5,-28(fp)
 80017e8:	e1bfff0b 	ldhu	r6,-4(fp)
 80017ec:	e0fff417 	ldw	r3,-48(fp)
 80017f0:	d8c00015 	stw	r3,0(sp)
 80017f4:	e1c00617 	ldw	r7,24(fp)
 80017f8:	103ee83a 	callr	r2
 80017fc:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 8001800:	e0bff543 	ldbu	r2,-43(fp)
}
 8001804:	e037883a 	mov	sp,fp
 8001808:	dfc00117 	ldw	ra,4(sp)
 800180c:	df000017 	ldw	fp,0(sp)
 8001810:	dec00204 	addi	sp,sp,8
 8001814:	f800283a 	ret

08001818 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001818:	defff804 	addi	sp,sp,-32
 800181c:	dfc00715 	stw	ra,28(sp)
 8001820:	df000615 	stw	fp,24(sp)
 8001824:	df000604 	addi	fp,sp,24
 8001828:	2807883a 	mov	r3,r5
 800182c:	3005883a 	mov	r2,r6
 8001830:	e1ffff15 	stw	r7,-4(fp)
 8001834:	e13ffc05 	stb	r4,-16(fp)
 8001838:	e0fffd05 	stb	r3,-12(fp)
 800183c:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 8001840:	e0800217 	ldw	r2,8(fp)
 8001844:	10002826 	beq	r2,zero,80018e8 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8001848:	e0fffc03 	ldbu	r3,-16(fp)
 800184c:	008200b4 	movhi	r2,2050
 8001850:	10bebb04 	addi	r2,r2,-1300
 8001854:	180690fa 	slli	r3,r3,3
 8001858:	10c5883a 	add	r2,r2,r3
 800185c:	10c00017 	ldw	r3,0(r2)
 8001860:	e0bffd03 	ldbu	r2,-12(fp)
 8001864:	100490fa 	slli	r2,r2,3
 8001868:	1885883a 	add	r2,r3,r2
 800186c:	00c00804 	movi	r3,32
 8001870:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 8001874:	e13ffc03 	ldbu	r4,-16(fp)
 8001878:	e17ffd03 	ldbu	r5,-12(fp)
 800187c:	e1bffe0b 	ldhu	r6,-8(fp)
 8001880:	e0fffc03 	ldbu	r3,-16(fp)
 8001884:	008200b4 	movhi	r2,2050
 8001888:	10bebb04 	addi	r2,r2,-1300
 800188c:	180690fa 	slli	r3,r3,3
 8001890:	10c5883a 	add	r2,r2,r3
 8001894:	10c00017 	ldw	r3,0(r2)
 8001898:	e0bffd03 	ldbu	r2,-12(fp)
 800189c:	100490fa 	slli	r2,r2,3
 80018a0:	1885883a 	add	r2,r3,r2
 80018a4:	1080008b 	ldhu	r2,2(r2)
 80018a8:	10803fcc 	andi	r2,r2,255
 80018ac:	d8800015 	stw	r2,0(sp)
 80018b0:	e1ffff17 	ldw	r7,-4(fp)
 80018b4:	8001af00 	call	8001af0 <XferInTransfer>
 80018b8:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 80018bc:	e0bffb03 	ldbu	r2,-20(fp)
 80018c0:	10000226 	beq	r2,zero,80018cc <XferCtrlData+0xb4>
        return( rcode );
 80018c4:	e0bffb03 	ldbu	r2,-20(fp)
 80018c8:	00000806 	br	80018ec <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 80018cc:	e0bffd03 	ldbu	r2,-12(fp)
 80018d0:	100b883a 	mov	r5,r2
 80018d4:	01002804 	movi	r4,160
 80018d8:	80019740 	call	8001974 <XferDispatchPkt>
 80018dc:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 80018e0:	e0bffb03 	ldbu	r2,-20(fp)
 80018e4:	00000106 	br	80018ec <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 80018e8:	00bfffc4 	movi	r2,-1
    }
}
 80018ec:	e037883a 	mov	sp,fp
 80018f0:	dfc00117 	ldw	ra,4(sp)
 80018f4:	df000017 	ldw	fp,0(sp)
 80018f8:	dec00204 	addi	sp,sp,8
 80018fc:	f800283a 	ret

08001900 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001900:	defff904 	addi	sp,sp,-28
 8001904:	dfc00615 	stw	ra,24(sp)
 8001908:	df000515 	stw	fp,20(sp)
 800190c:	df000504 	addi	fp,sp,20
 8001910:	2807883a 	mov	r3,r5
 8001914:	3005883a 	mov	r2,r6
 8001918:	e1ffff15 	stw	r7,-4(fp)
 800191c:	e13ffc05 	stb	r4,-16(fp)
 8001920:	e0fffd05 	stb	r3,-12(fp)
 8001924:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 8001928:	e0800217 	ldw	r2,8(fp)
 800192c:	10000626 	beq	r2,zero,8001948 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001930:	e0bffd03 	ldbu	r2,-12(fp)
 8001934:	100b883a 	mov	r5,r2
 8001938:	01002804 	movi	r4,160
 800193c:	80019740 	call	8001974 <XferDispatchPkt>
 8001940:	e0bffb05 	stb	r2,-20(fp)
 8001944:	00000506 	br	800195c <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 8001948:	e0bffd03 	ldbu	r2,-12(fp)
 800194c:	100b883a 	mov	r5,r2
 8001950:	01002004 	movi	r4,128
 8001954:	80019740 	call	8001974 <XferDispatchPkt>
 8001958:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 800195c:	e0bffb03 	ldbu	r2,-20(fp)
}
 8001960:	e037883a 	mov	sp,fp
 8001964:	dfc00117 	ldw	ra,4(sp)
 8001968:	df000017 	ldw	fp,0(sp)
 800196c:	dec00204 	addi	sp,sp,8
 8001970:	f800283a 	ret

08001974 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 8001974:	defff904 	addi	sp,sp,-28
 8001978:	dfc00615 	stw	ra,24(sp)
 800197c:	df000515 	stw	fp,20(sp)
 8001980:	df000504 	addi	fp,sp,20
 8001984:	2007883a 	mov	r3,r4
 8001988:	2805883a 	mov	r2,r5
 800198c:	e0fffe05 	stb	r3,-8(fp)
 8001990:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001994:	d0a6f417 	ldw	r2,-25648(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 8001998:	0140fa04 	movi	r5,1000
 800199c:	1009883a 	mov	r4,r2
 80019a0:	80028f40 	call	80028f4 <__mulsi3>
 80019a4:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80019a8:	d0a6f317 	ldw	r2,-25652(gp)
 80019ac:	100b883a 	mov	r5,r2
 80019b0:	1809883a 	mov	r4,r3
 80019b4:	80028380 	call	8002838 <__udivsi3>
 80019b8:	1084e204 	addi	r2,r2,5000
 80019bc:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 80019c0:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 80019c4:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 80019c8:	e0fffe03 	ldbu	r3,-8(fp)
 80019cc:	e0bfff03 	ldbu	r2,-4(fp)
 80019d0:	1884b03a 	or	r2,r3,r2
 80019d4:	10803fcc 	andi	r2,r2,255
 80019d8:	100b883a 	mov	r5,r2
 80019dc:	01003c04 	movi	r4,240
 80019e0:	8000f900 	call	8000f90 <MAXreg_wr>
        rcode = 0xff;
 80019e4:	00bfffc4 	movi	r2,-1
 80019e8:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 80019ec:	00000d06 	br	8001a24 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 80019f0:	01003204 	movi	r4,200
 80019f4:	800117c0 	call	800117c <MAXreg_rd>
 80019f8:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 80019fc:	e0bffd03 	ldbu	r2,-12(fp)
 8001a00:	10803fcc 	andi	r2,r2,255
 8001a04:	1080201c 	xori	r2,r2,128
 8001a08:	10bfe004 	addi	r2,r2,-128
 8001a0c:	1000050e 	bge	r2,zero,8001a24 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 8001a10:	01402004 	movi	r5,128
 8001a14:	01003204 	movi	r4,200
 8001a18:	8000f900 	call	8000f90 <MAXreg_wr>
                rcode = 0x00;
 8001a1c:	e03ffb05 	stb	zero,-20(fp)
                break;
 8001a20:	00000c06 	br	8001a54 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001a24:	d0a6f417 	ldw	r2,-25648(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001a28:	0140fa04 	movi	r5,1000
 8001a2c:	1009883a 	mov	r4,r2
 8001a30:	80028f40 	call	80028f4 <__mulsi3>
 8001a34:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001a38:	d0a6f317 	ldw	r2,-25652(gp)
 8001a3c:	100b883a 	mov	r5,r2
 8001a40:	1809883a 	mov	r4,r3
 8001a44:	80028380 	call	8002838 <__udivsi3>
 8001a48:	1007883a 	mov	r3,r2
 8001a4c:	e0bffc17 	ldw	r2,-16(fp)
 8001a50:	18bfe736 	bltu	r3,r2,80019f0 <__alt_data_end+0xfc0019f0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8001a54:	e0bffb03 	ldbu	r2,-20(fp)
 8001a58:	10000226 	beq	r2,zero,8001a64 <XferDispatchPkt+0xf0>
            return( rcode );
 8001a5c:	e0bffb03 	ldbu	r2,-20(fp)
 8001a60:	00001e06 	br	8001adc <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8001a64:	01003e04 	movi	r4,248
 8001a68:	800117c0 	call	800117c <MAXreg_rd>
 8001a6c:	108003cc 	andi	r2,r2,15
 8001a70:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 8001a74:	e0bffb03 	ldbu	r2,-20(fp)
 8001a78:	10800118 	cmpnei	r2,r2,4
 8001a7c:	1000071e 	bne	r2,zero,8001a9c <XferDispatchPkt+0x128>
            nak_count++;
 8001a80:	e0bffb83 	ldbu	r2,-18(fp)
 8001a84:	10800044 	addi	r2,r2,1
 8001a88:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 8001a8c:	e0bffb83 	ldbu	r2,-18(fp)
 8001a90:	10803218 	cmpnei	r2,r2,200
 8001a94:	10000b1e 	bne	r2,zero,8001ac4 <XferDispatchPkt+0x150>
                break;
 8001a98:	00000f06 	br	8001ad8 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 8001a9c:	e0bffb03 	ldbu	r2,-20(fp)
 8001aa0:	10800398 	cmpnei	r2,r2,14
 8001aa4:	1000091e 	bne	r2,zero,8001acc <XferDispatchPkt+0x158>
            retry_count++;
 8001aa8:	e0bffb43 	ldbu	r2,-19(fp)
 8001aac:	10800044 	addi	r2,r2,1
 8001ab0:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8001ab4:	e0bffb47 	ldb	r2,-19(fp)
 8001ab8:	108000d8 	cmpnei	r2,r2,3
 8001abc:	10000526 	beq	r2,zero,8001ad4 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 8001ac0:	00000106 	br	8001ac8 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 8001ac4:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 8001ac8:	003fbf06 	br	80019c8 <__alt_data_end+0xfc0019c8>
            }
            else {
                continue;
            }
        }
        else break;
 8001acc:	0001883a 	nop
 8001ad0:	00000106 	br	8001ad8 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 8001ad4:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 8001ad8:	e0bffb03 	ldbu	r2,-20(fp)
}
 8001adc:	e037883a 	mov	sp,fp
 8001ae0:	dfc00117 	ldw	ra,4(sp)
 8001ae4:	df000017 	ldw	fp,0(sp)
 8001ae8:	dec00204 	addi	sp,sp,8
 8001aec:	f800283a 	ret

08001af0 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 8001af0:	defff804 	addi	sp,sp,-32
 8001af4:	dfc00715 	stw	ra,28(sp)
 8001af8:	df000615 	stw	fp,24(sp)
 8001afc:	df000604 	addi	fp,sp,24
 8001b00:	2011883a 	mov	r8,r4
 8001b04:	2809883a 	mov	r4,r5
 8001b08:	3007883a 	mov	r3,r6
 8001b0c:	e1fffe15 	stw	r7,-8(fp)
 8001b10:	e0800217 	ldw	r2,8(fp)
 8001b14:	e23ffb05 	stb	r8,-20(fp)
 8001b18:	e13ffc05 	stb	r4,-16(fp)
 8001b1c:	e0fffd0d 	sth	r3,-12(fp)
 8001b20:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8001b24:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 8001b28:	e0fffb03 	ldbu	r3,-20(fp)
 8001b2c:	008200b4 	movhi	r2,2050
 8001b30:	10bebb04 	addi	r2,r2,-1300
 8001b34:	180690fa 	slli	r3,r3,3
 8001b38:	10c5883a 	add	r2,r2,r3
 8001b3c:	10c00017 	ldw	r3,0(r2)
 8001b40:	e0bffc03 	ldbu	r2,-16(fp)
 8001b44:	100490fa 	slli	r2,r2,3
 8001b48:	1885883a 	add	r2,r3,r2
 8001b4c:	10800183 	ldbu	r2,6(r2)
 8001b50:	10803fcc 	andi	r2,r2,255
 8001b54:	100b883a 	mov	r5,r2
 8001b58:	01003a04 	movi	r4,232
 8001b5c:	8000f900 	call	8000f90 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8001b60:	e0bffc03 	ldbu	r2,-16(fp)
 8001b64:	100b883a 	mov	r5,r2
 8001b68:	0009883a 	mov	r4,zero
 8001b6c:	80019740 	call	8001974 <XferDispatchPkt>
 8001b70:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 8001b74:	e0bffa83 	ldbu	r2,-22(fp)
 8001b78:	10000226 	beq	r2,zero,8001b84 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 8001b7c:	e0bffa83 	ldbu	r2,-22(fp)
 8001b80:	00003a06 	br	8001c6c <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 8001b84:	01003204 	movi	r4,200
 8001b88:	800117c0 	call	800117c <MAXreg_rd>
 8001b8c:	10803fcc 	andi	r2,r2,255
 8001b90:	1080010c 	andi	r2,r2,4
 8001b94:	1000021e 	bne	r2,zero,8001ba0 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 8001b98:	00bffc04 	movi	r2,-16
 8001b9c:	00003306 	br	8001c6c <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 8001ba0:	01000c04 	movi	r4,48
 8001ba4:	800117c0 	call	800117c <MAXreg_rd>
 8001ba8:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 8001bac:	e0bffac3 	ldbu	r2,-21(fp)
 8001bb0:	e1bffe17 	ldw	r6,-8(fp)
 8001bb4:	100b883a 	mov	r5,r2
 8001bb8:	01000204 	movi	r4,8
 8001bbc:	80011f80 	call	80011f8 <MAXbytes_rd>
 8001bc0:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 8001bc4:	01400104 	movi	r5,4
 8001bc8:	01003204 	movi	r4,200
 8001bcc:	8000f900 	call	8000f90 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8001bd0:	e0fffac3 	ldbu	r3,-21(fp)
 8001bd4:	e0bffa0b 	ldhu	r2,-24(fp)
 8001bd8:	1885883a 	add	r2,r3,r2
 8001bdc:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 8001be0:	e0fffac3 	ldbu	r3,-21(fp)
 8001be4:	e0bfff03 	ldbu	r2,-4(fp)
 8001be8:	18800336 	bltu	r3,r2,8001bf8 <XferInTransfer+0x108>
 8001bec:	e0fffa0b 	ldhu	r3,-24(fp)
 8001bf0:	e0bffd0b 	ldhu	r2,-12(fp)
 8001bf4:	18bfda36 	bltu	r3,r2,8001b60 <__alt_data_end+0xfc001b60>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8001bf8:	01003e04 	movi	r4,248
 8001bfc:	800117c0 	call	800117c <MAXreg_rd>
 8001c00:	10803fcc 	andi	r2,r2,255
 8001c04:	1080040c 	andi	r2,r2,16
 8001c08:	10000c26 	beq	r2,zero,8001c3c <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8001c0c:	e0fffb03 	ldbu	r3,-20(fp)
 8001c10:	008200b4 	movhi	r2,2050
 8001c14:	10bebb04 	addi	r2,r2,-1300
 8001c18:	180690fa 	slli	r3,r3,3
 8001c1c:	10c5883a 	add	r2,r2,r3
 8001c20:	10c00017 	ldw	r3,0(r2)
 8001c24:	e0bffc03 	ldbu	r2,-16(fp)
 8001c28:	100490fa 	slli	r2,r2,3
 8001c2c:	1885883a 	add	r2,r3,r2
 8001c30:	00c00804 	movi	r3,32
 8001c34:	10c00185 	stb	r3,6(r2)
 8001c38:	00000b06 	br	8001c68 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 8001c3c:	e0fffb03 	ldbu	r3,-20(fp)
 8001c40:	008200b4 	movhi	r2,2050
 8001c44:	10bebb04 	addi	r2,r2,-1300
 8001c48:	180690fa 	slli	r3,r3,3
 8001c4c:	10c5883a 	add	r2,r2,r3
 8001c50:	10c00017 	ldw	r3,0(r2)
 8001c54:	e0bffc03 	ldbu	r2,-16(fp)
 8001c58:	100490fa 	slli	r2,r2,3
 8001c5c:	1885883a 	add	r2,r3,r2
 8001c60:	00c00404 	movi	r3,16
 8001c64:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 8001c68:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 8001c6c:	e037883a 	mov	sp,fp
 8001c70:	dfc00117 	ldw	ra,4(sp)
 8001c74:	df000017 	ldw	fp,0(sp)
 8001c78:	dec00204 	addi	sp,sp,8
 8001c7c:	f800283a 	ret

08001c80 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 8001c80:	defffe04 	addi	sp,sp,-8
 8001c84:	df000115 	stw	fp,4(sp)
 8001c88:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8001c8c:	e03fff05 	stb	zero,-4(fp)
 8001c90:	00001006 	br	8001cd4 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 8001c94:	e0ffff03 	ldbu	r3,-4(fp)
 8001c98:	008200b4 	movhi	r2,2050
 8001c9c:	10bebb04 	addi	r2,r2,-1300
 8001ca0:	180690fa 	slli	r3,r3,3
 8001ca4:	10c5883a 	add	r2,r2,r3
 8001ca8:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 8001cac:	e0ffff03 	ldbu	r3,-4(fp)
 8001cb0:	008200b4 	movhi	r2,2050
 8001cb4:	10bebb04 	addi	r2,r2,-1300
 8001cb8:	180690fa 	slli	r3,r3,3
 8001cbc:	10c5883a 	add	r2,r2,r3
 8001cc0:	10800104 	addi	r2,r2,4
 8001cc4:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8001cc8:	e0bfff03 	ldbu	r2,-4(fp)
 8001ccc:	10800044 	addi	r2,r2,1
 8001cd0:	e0bfff05 	stb	r2,-4(fp)
 8001cd4:	e0bfff03 	ldbu	r2,-4(fp)
 8001cd8:	10800270 	cmpltui	r2,r2,9
 8001cdc:	103fed1e 	bne	r2,zero,8001c94 <__alt_data_end+0xfc001c94>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 8001ce0:	008200b4 	movhi	r2,2050
 8001ce4:	10bebb04 	addi	r2,r2,-1300
 8001ce8:	d0e6e204 	addi	r3,gp,-25720
 8001cec:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 8001cf0:	d026e28d 	sth	zero,-25718(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 8001cf4:	00801004 	movi	r2,64
 8001cf8:	d0a6e345 	stb	r2,-25715(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 8001cfc:	00800404 	movi	r2,16
 8001d00:	d0a6e385 	stb	r2,-25714(gp)
}
 8001d04:	0001883a 	nop
 8001d08:	e037883a 	mov	sp,fp
 8001d0c:	df000017 	ldw	fp,0(sp)
 8001d10:	dec00104 	addi	sp,sp,4
 8001d14:	f800283a 	ret

08001d18 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 8001d18:	deffb204 	addi	sp,sp,-312
 8001d1c:	dfc04d15 	stw	ra,308(sp)
 8001d20:	df004c15 	stw	fp,304(sp)
 8001d24:	dc004b15 	stw	r16,300(sp)
 8001d28:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8001d2c:	d0a00203 	ldbu	r2,-32760(gp)
 8001d30:	10803fcc 	andi	r2,r2,255
 8001d34:	10803c0c 	andi	r2,r2,240
 8001d38:	10c00820 	cmpeqi	r3,r2,32
 8001d3c:	1801121e 	bne	r3,zero,8002188 <USB_Task+0x470>
 8001d40:	10c00848 	cmpgei	r3,r2,33
 8001d44:	1800041e 	bne	r3,zero,8001d58 <USB_Task+0x40>
 8001d48:	10000a26 	beq	r2,zero,8001d74 <USB_Task+0x5c>
 8001d4c:	10800420 	cmpeqi	r2,r2,16
 8001d50:	10001b1e 	bne	r2,zero,8001dc0 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8001d54:	00017a06 	br	8002340 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8001d58:	10c01020 	cmpeqi	r3,r2,64
 8001d5c:	18016f1e 	bne	r3,zero,800231c <USB_Task+0x604>
 8001d60:	10c03fe0 	cmpeqi	r3,r2,255
 8001d64:	18016f1e 	bne	r3,zero,8002324 <USB_Task+0x60c>
 8001d68:	10800c20 	cmpeqi	r2,r2,48
 8001d6c:	1001441e 	bne	r2,zero,8002280 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8001d70:	00017306 	br	8002340 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 8001d74:	d0a00203 	ldbu	r2,-32760(gp)
 8001d78:	10803fcc 	andi	r2,r2,255
 8001d7c:	10c000e0 	cmpeqi	r3,r2,3
 8001d80:	1800091e 	bne	r3,zero,8001da8 <USB_Task+0x90>
 8001d84:	10c00120 	cmpeqi	r3,r2,4
 8001d88:	18000b1e 	bne	r3,zero,8001db8 <USB_Task+0xa0>
 8001d8c:	10800060 	cmpeqi	r2,r2,1
 8001d90:	1000011e 	bne	r2,zero,8001d98 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8001d94:	00016a06 	br	8002340 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 8001d98:	8001c800 	call	8001c80 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 8001d9c:	008000c4 	movi	r2,3
 8001da0:	d0a00205 	stb	r2,-32760(gp)
                    break;
 8001da4:	00000506 	br	8001dbc <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 8001da8:	01400104 	movi	r5,4
 8001dac:	01003a04 	movi	r4,232
 8001db0:	8000f900 	call	8000f90 <MAXreg_wr>
                    break;
 8001db4:	00000106 	br	8001dbc <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 8001db8:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8001dbc:	00016006 	br	8002340 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 8001dc0:	d0a00203 	ldbu	r2,-32760(gp)
 8001dc4:	10803fcc 	andi	r2,r2,255
 8001dc8:	10bffc04 	addi	r2,r2,-16
 8001dcc:	10c001a8 	cmpgeui	r3,r2,6
 8001dd0:	1801561e 	bne	r3,zero,800232c <USB_Task+0x614>
 8001dd4:	100690ba 	slli	r3,r2,2
 8001dd8:	00820034 	movhi	r2,2048
 8001ddc:	10877b04 	addi	r2,r2,7660
 8001de0:	1885883a 	add	r2,r3,r2
 8001de4:	10800017 	ldw	r2,0(r2)
 8001de8:	1000683a 	jmp	r2
 8001dec:	08001e04 	addi	zero,at,120
 8001df0:	08001e3c 	xorhi	zero,at,120
 8001df4:	08001e78 	rdprs	zero,at,121
 8001df8:	08001e9c 	xori	zero,at,122
 8001dfc:	08001edc 	xori	zero,at,123
 8001e00:	08001ef0 	cmpltui	zero,at,123
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001e04:	d0a6f417 	ldw	r2,-25648(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 8001e08:	0140fa04 	movi	r5,1000
 8001e0c:	1009883a 	mov	r4,r2
 8001e10:	80028f40 	call	80028f4 <__mulsi3>
 8001e14:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001e18:	d0a6f317 	ldw	r2,-25652(gp)
 8001e1c:	100b883a 	mov	r5,r2
 8001e20:	1809883a 	mov	r4,r3
 8001e24:	80028380 	call	8002838 <__udivsi3>
 8001e28:	10803204 	addi	r2,r2,200
 8001e2c:	d0a6e515 	stw	r2,-25708(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8001e30:	00800444 	movi	r2,17
 8001e34:	d0a00205 	stb	r2,-32760(gp)
                    break;//case( USB_STATE_ATTACHED )
 8001e38:	0000d206 	br	8002184 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001e3c:	d0a6f417 	ldw	r2,-25648(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 8001e40:	0140fa04 	movi	r5,1000
 8001e44:	1009883a 	mov	r4,r2
 8001e48:	80028f40 	call	80028f4 <__mulsi3>
 8001e4c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001e50:	d0a6f317 	ldw	r2,-25652(gp)
 8001e54:	100b883a 	mov	r5,r2
 8001e58:	1809883a 	mov	r4,r3
 8001e5c:	80028380 	call	8002838 <__udivsi3>
 8001e60:	1007883a 	mov	r3,r2
 8001e64:	d0a6e517 	ldw	r2,-25708(gp)
 8001e68:	10c0c32e 	bgeu	r2,r3,8002178 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8001e6c:	00800484 	movi	r2,18
 8001e70:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8001e74:	0000c006 	br	8002178 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 8001e78:	01400044 	movi	r5,1
 8001e7c:	01003204 	movi	r4,200
 8001e80:	8000f900 	call	8000f90 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 8001e84:	01400044 	movi	r5,1
 8001e88:	01003a04 	movi	r4,232
 8001e8c:	8000f900 	call	8000f90 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8001e90:	008004c4 	movi	r2,19
 8001e94:	d0a00205 	stb	r2,-32760(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 8001e98:	0000ba06 	br	8002184 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 8001e9c:	01003a04 	movi	r4,232
 8001ea0:	800117c0 	call	800117c <MAXreg_rd>
 8001ea4:	10803fcc 	andi	r2,r2,255
 8001ea8:	1080004c 	andi	r2,r2,1
 8001eac:	1000b41e 	bne	r2,zero,8002180 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 8001eb0:	01003604 	movi	r4,216
 8001eb4:	800117c0 	call	800117c <MAXreg_rd>
 8001eb8:	10800214 	ori	r2,r2,8
 8001ebc:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 8001ec0:	e0bfb943 	ldbu	r2,-283(fp)
 8001ec4:	100b883a 	mov	r5,r2
 8001ec8:	01003604 	movi	r4,216
 8001ecc:	8000f900 	call	8000f90 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8001ed0:	00800504 	movi	r2,20
 8001ed4:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8001ed8:	0000a906 	br	8002180 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 8001edc:	01003204 	movi	r4,200
 8001ee0:	800117c0 	call	800117c <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 8001ee4:	00800544 	movi	r2,21
 8001ee8:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 8001eec:	0000a506 	br	8002184 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 8001ef0:	008200b4 	movhi	r2,2050
 8001ef4:	10bebb04 	addi	r2,r2,-1300
 8001ef8:	10800017 	ldw	r2,0(r2)
 8001efc:	00c00204 	movi	r3,8
 8001f00:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 8001f04:	e0bfba04 	addi	r2,fp,-280
 8001f08:	d8800415 	stw	r2,16(sp)
 8001f0c:	00800204 	movi	r2,8
 8001f10:	d8800315 	stw	r2,12(sp)
 8001f14:	d8000215 	stw	zero,8(sp)
 8001f18:	00800044 	movi	r2,1
 8001f1c:	d8800115 	stw	r2,4(sp)
 8001f20:	d8000015 	stw	zero,0(sp)
 8001f24:	01c00184 	movi	r7,6
 8001f28:	01802004 	movi	r6,128
 8001f2c:	000b883a 	mov	r5,zero
 8001f30:	0009883a 	mov	r4,zero
 8001f34:	80016cc0 	call	80016cc <XferCtrlReq>
 8001f38:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8001f3c:	e0bfb983 	ldbu	r2,-282(fp)
 8001f40:	1000861e 	bne	r2,zero,800215c <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 8001f44:	008200b4 	movhi	r2,2050
 8001f48:	10bebb04 	addi	r2,r2,-1300
 8001f4c:	10800017 	ldw	r2,0(r2)
 8001f50:	e0ffbbc3 	ldbu	r3,-273(fp)
 8001f54:	18c03fcc 	andi	r3,r3,255
 8001f58:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 8001f5c:	e0bfba03 	ldbu	r2,-280(fp)
 8001f60:	10803fcc 	andi	r2,r2,255
 8001f64:	e0ffba04 	addi	r3,fp,-280
 8001f68:	d8c00415 	stw	r3,16(sp)
 8001f6c:	d8800315 	stw	r2,12(sp)
 8001f70:	d8000215 	stw	zero,8(sp)
 8001f74:	00800044 	movi	r2,1
 8001f78:	d8800115 	stw	r2,4(sp)
 8001f7c:	d8000015 	stw	zero,0(sp)
 8001f80:	01c00184 	movi	r7,6
 8001f84:	01802004 	movi	r6,128
 8001f88:	000b883a 	mov	r5,zero
 8001f8c:	0009883a 	mov	r4,zero
 8001f90:	80016cc0 	call	80016cc <XferCtrlReq>
 8001f94:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 8001f98:	e0bfbd83 	ldbu	r2,-266(fp)
 8001f9c:	10803fcc 	andi	r2,r2,255
 8001fa0:	10003426 	beq	r2,zero,8002074 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8001fa4:	e0bfbd83 	ldbu	r2,-266(fp)
 8001fa8:	10803fcc 	andi	r2,r2,255
 8001fac:	e0ffbe84 	addi	r3,fp,-262
 8001fb0:	d8c00415 	stw	r3,16(sp)
 8001fb4:	00c00084 	movi	r3,2
 8001fb8:	d8c00315 	stw	r3,12(sp)
 8001fbc:	00c10244 	movi	r3,1033
 8001fc0:	d8c00215 	stw	r3,8(sp)
 8001fc4:	00c000c4 	movi	r3,3
 8001fc8:	d8c00115 	stw	r3,4(sp)
 8001fcc:	d8800015 	stw	r2,0(sp)
 8001fd0:	01c00184 	movi	r7,6
 8001fd4:	01802004 	movi	r6,128
 8001fd8:	000b883a 	mov	r5,zero
 8001fdc:	0009883a 	mov	r4,zero
 8001fe0:	80016cc0 	call	80016cc <XferCtrlReq>
 8001fe4:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8001fe8:	e0bfbd83 	ldbu	r2,-266(fp)
 8001fec:	10803fcc 	andi	r2,r2,255
 8001ff0:	e0ffbe83 	ldbu	r3,-262(fp)
 8001ff4:	18c03fcc 	andi	r3,r3,255
 8001ff8:	e13fbe84 	addi	r4,fp,-262
 8001ffc:	d9000415 	stw	r4,16(sp)
 8002000:	d8c00315 	stw	r3,12(sp)
 8002004:	00c10244 	movi	r3,1033
 8002008:	d8c00215 	stw	r3,8(sp)
 800200c:	00c000c4 	movi	r3,3
 8002010:	d8c00115 	stw	r3,4(sp)
 8002014:	d8800015 	stw	r2,0(sp)
 8002018:	01c00184 	movi	r7,6
 800201c:	01802004 	movi	r6,128
 8002020:	000b883a 	mov	r5,zero
 8002024:	0009883a 	mov	r4,zero
 8002028:	80016cc0 	call	80016cc <XferCtrlReq>
 800202c:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8002030:	e0bfbd83 	ldbu	r2,-266(fp)
 8002034:	14003fcc 	andi	r16,r2,255
 8002038:	e0bfbe83 	ldbu	r2,-262(fp)
 800203c:	10803fcc 	andi	r2,r2,255
 8002040:	1004d07a 	srli	r2,r2,1
 8002044:	10bfffc4 	addi	r2,r2,-1
 8002048:	10c03fcc 	andi	r3,r2,255
 800204c:	e0bfbe84 	addi	r2,fp,-262
 8002050:	10800084 	addi	r2,r2,2
 8002054:	180b883a 	mov	r5,r3
 8002058:	1009883a 	mov	r4,r2
 800205c:	80024e00 	call	80024e0 <ConvUTF8ToStr>
 8002060:	100d883a 	mov	r6,r2
 8002064:	800b883a 	mov	r5,r16
 8002068:	010200b4 	movhi	r4,2050
 800206c:	212edc04 	addi	r4,r4,-17552
 8002070:	80047f80 	call	80047f8 <printf>
                		}
                		if (buf.iProduct != 0)
 8002074:	e0bfbdc3 	ldbu	r2,-265(fp)
 8002078:	10803fcc 	andi	r2,r2,255
 800207c:	10003426 	beq	r2,zero,8002150 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8002080:	e0bfbdc3 	ldbu	r2,-265(fp)
 8002084:	10803fcc 	andi	r2,r2,255
 8002088:	e0ffbe84 	addi	r3,fp,-262
 800208c:	d8c00415 	stw	r3,16(sp)
 8002090:	00c00084 	movi	r3,2
 8002094:	d8c00315 	stw	r3,12(sp)
 8002098:	00c10244 	movi	r3,1033
 800209c:	d8c00215 	stw	r3,8(sp)
 80020a0:	00c000c4 	movi	r3,3
 80020a4:	d8c00115 	stw	r3,4(sp)
 80020a8:	d8800015 	stw	r2,0(sp)
 80020ac:	01c00184 	movi	r7,6
 80020b0:	01802004 	movi	r6,128
 80020b4:	000b883a 	mov	r5,zero
 80020b8:	0009883a 	mov	r4,zero
 80020bc:	80016cc0 	call	80016cc <XferCtrlReq>
 80020c0:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 80020c4:	e0bfbdc3 	ldbu	r2,-265(fp)
 80020c8:	10803fcc 	andi	r2,r2,255
 80020cc:	e0ffbe83 	ldbu	r3,-262(fp)
 80020d0:	18c03fcc 	andi	r3,r3,255
 80020d4:	e13fbe84 	addi	r4,fp,-262
 80020d8:	d9000415 	stw	r4,16(sp)
 80020dc:	d8c00315 	stw	r3,12(sp)
 80020e0:	00c10244 	movi	r3,1033
 80020e4:	d8c00215 	stw	r3,8(sp)
 80020e8:	00c000c4 	movi	r3,3
 80020ec:	d8c00115 	stw	r3,4(sp)
 80020f0:	d8800015 	stw	r2,0(sp)
 80020f4:	01c00184 	movi	r7,6
 80020f8:	01802004 	movi	r6,128
 80020fc:	000b883a 	mov	r5,zero
 8002100:	0009883a 	mov	r4,zero
 8002104:	80016cc0 	call	80016cc <XferCtrlReq>
 8002108:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 800210c:	e0bfbdc3 	ldbu	r2,-265(fp)
 8002110:	14003fcc 	andi	r16,r2,255
 8002114:	e0bfbe83 	ldbu	r2,-262(fp)
 8002118:	10803fcc 	andi	r2,r2,255
 800211c:	1004d07a 	srli	r2,r2,1
 8002120:	10bfffc4 	addi	r2,r2,-1
 8002124:	10c03fcc 	andi	r3,r2,255
 8002128:	e0bfbe84 	addi	r2,fp,-262
 800212c:	10800084 	addi	r2,r2,2
 8002130:	180b883a 	mov	r5,r3
 8002134:	1009883a 	mov	r4,r2
 8002138:	80024e00 	call	80024e0 <ConvUTF8ToStr>
 800213c:	100d883a 	mov	r6,r2
 8002140:	800b883a 	mov	r5,r16
 8002144:	010200b4 	movhi	r4,2050
 8002148:	212ee204 	addi	r4,r4,-17528
 800214c:	80047f80 	call	80047f8 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 8002150:	00800804 	movi	r2,32
 8002154:	d0a00205 	stb	r2,-32760(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8002158:	00000a06 	br	8002184 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 800215c:	e0bfb983 	ldbu	r2,-282(fp)
 8002160:	d0a6e645 	stb	r2,-25703(gp)
                        last_usb_task_state = usb_task_state;
 8002164:	d0a00203 	ldbu	r2,-32760(gp)
 8002168:	d0a6e405 	stb	r2,-25712(gp)
                        usb_task_state = USB_STATE_ERROR;
 800216c:	00bfffc4 	movi	r2,-1
 8002170:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8002174:	00000306 	br	8002184 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8002178:	0001883a 	nop
 800217c:	00006b06 	br	800232c <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002180:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 8002184:	00006906 	br	800232c <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8002188:	00800044 	movi	r2,1
 800218c:	e0bfb905 	stb	r2,-284(fp)
 8002190:	00002d06 	br	8002248 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 8002194:	e0ffb903 	ldbu	r3,-284(fp)
 8002198:	008200b4 	movhi	r2,2050
 800219c:	10bebb04 	addi	r2,r2,-1300
 80021a0:	180690fa 	slli	r3,r3,3
 80021a4:	10c5883a 	add	r2,r2,r3
 80021a8:	10800017 	ldw	r2,0(r2)
 80021ac:	1000231e 	bne	r2,zero,800223c <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 80021b0:	e13fb903 	ldbu	r4,-284(fp)
 80021b4:	008200b4 	movhi	r2,2050
 80021b8:	10bebb04 	addi	r2,r2,-1300
 80021bc:	10c00017 	ldw	r3,0(r2)
 80021c0:	008200b4 	movhi	r2,2050
 80021c4:	10bebb04 	addi	r2,r2,-1300
 80021c8:	200890fa 	slli	r4,r4,3
 80021cc:	1105883a 	add	r2,r2,r4
 80021d0:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 80021d4:	e0bfb903 	ldbu	r2,-284(fp)
 80021d8:	d8000415 	stw	zero,16(sp)
 80021dc:	d8000315 	stw	zero,12(sp)
 80021e0:	d8000215 	stw	zero,8(sp)
 80021e4:	d8000115 	stw	zero,4(sp)
 80021e8:	d8800015 	stw	r2,0(sp)
 80021ec:	01c00144 	movi	r7,5
 80021f0:	000d883a 	mov	r6,zero
 80021f4:	000b883a 	mov	r5,zero
 80021f8:	0009883a 	mov	r4,zero
 80021fc:	80016cc0 	call	80016cc <XferCtrlReq>
 8002200:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8002204:	e0bfb983 	ldbu	r2,-282(fp)
 8002208:	1000051e 	bne	r2,zero,8002220 <USB_Task+0x508>
                        tmp_addr = i;
 800220c:	e0bfb903 	ldbu	r2,-284(fp)
 8002210:	d0a6e605 	stb	r2,-25704(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 8002214:	00800c04 	movi	r2,48
 8002218:	d0a00205 	stb	r2,-32760(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 800221c:	00000d06 	br	8002254 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 8002220:	e0bfb983 	ldbu	r2,-282(fp)
 8002224:	d0a6e645 	stb	r2,-25703(gp)
                        last_usb_task_state = usb_task_state;
 8002228:	d0a00203 	ldbu	r2,-32760(gp)
 800222c:	d0a6e405 	stb	r2,-25712(gp)
                        usb_task_state = USB_STATE_ERROR;
 8002230:	00bfffc4 	movi	r2,-1
 8002234:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 8002238:	00000606 	br	8002254 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 800223c:	e0bfb903 	ldbu	r2,-284(fp)
 8002240:	10800044 	addi	r2,r2,1
 8002244:	e0bfb905 	stb	r2,-284(fp)
 8002248:	e0bfb903 	ldbu	r2,-284(fp)
 800224c:	10800230 	cmpltui	r2,r2,8
 8002250:	103fd01e 	bne	r2,zero,8002194 <__alt_data_end+0xfc002194>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 8002254:	d0a00203 	ldbu	r2,-32760(gp)
 8002258:	10803fcc 	andi	r2,r2,255
 800225c:	10800818 	cmpnei	r2,r2,32
 8002260:	1000341e 	bne	r2,zero,8002334 <USB_Task+0x61c>
                usb_error = 0xfe;
 8002264:	00bfff84 	movi	r2,-2
 8002268:	d0a6e645 	stb	r2,-25703(gp)
                last_usb_task_state = usb_task_state;
 800226c:	d0a00203 	ldbu	r2,-32760(gp)
 8002270:	d0a6e405 	stb	r2,-25712(gp)
                usb_task_state = USB_STATE_ERROR;
 8002274:	00bfffc4 	movi	r2,-1
 8002278:	d0a00205 	stb	r2,-32760(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 800227c:	00002d06 	br	8002334 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8002280:	e03fb905 	stb	zero,-284(fp)
 8002284:	00001706 	br	80022e4 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 8002288:	e0bfb903 	ldbu	r2,-284(fp)
 800228c:	040200b4 	movhi	r16,2050
 8002290:	8430b904 	addi	r16,r16,-15644
 8002294:	01400304 	movi	r5,12
 8002298:	1009883a 	mov	r4,r2
 800229c:	80028f40 	call	80028f4 <__mulsi3>
 80022a0:	8085883a 	add	r2,r16,r2
 80022a4:	10800017 	ldw	r2,0(r2)
 80022a8:	d0e6e603 	ldbu	r3,-25704(gp)
 80022ac:	18c03fcc 	andi	r3,r3,255
 80022b0:	000b883a 	mov	r5,zero
 80022b4:	1809883a 	mov	r4,r3
 80022b8:	103ee83a 	callr	r2
 80022bc:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 80022c0:	e0bfb983 	ldbu	r2,-282(fp)
 80022c4:	10800058 	cmpnei	r2,r2,1
 80022c8:	1000031e 	bne	r2,zero,80022d8 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 80022cc:	00801004 	movi	r2,64
 80022d0:	d0a00205 	stb	r2,-32760(gp)
                    break;
 80022d4:	00000606 	br	80022f0 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 80022d8:	e0bfb903 	ldbu	r2,-284(fp)
 80022dc:	10800044 	addi	r2,r2,1
 80022e0:	e0bfb905 	stb	r2,-284(fp)
 80022e4:	e0bfb903 	ldbu	r2,-284(fp)
 80022e8:	10800130 	cmpltui	r2,r2,4
 80022ec:	103fe61e 	bne	r2,zero,8002288 <__alt_data_end+0xfc002288>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 80022f0:	d0a00203 	ldbu	r2,-32760(gp)
 80022f4:	10803fcc 	andi	r2,r2,255
 80022f8:	10800c18 	cmpnei	r2,r2,48
 80022fc:	10000f1e 	bne	r2,zero,800233c <USB_Task+0x624>
                usb_error = 0xfd;
 8002300:	00bfff44 	movi	r2,-3
 8002304:	d0a6e645 	stb	r2,-25703(gp)
                last_usb_task_state = usb_task_state;
 8002308:	d0a00203 	ldbu	r2,-32760(gp)
 800230c:	d0a6e405 	stb	r2,-25712(gp)
                usb_task_state = USB_STATE_ERROR;
 8002310:	00bfffc4 	movi	r2,-1
 8002314:	d0a00205 	stb	r2,-32760(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 8002318:	00000806 	br	800233c <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 800231c:	0001883a 	nop
 8002320:	00000706 	br	8002340 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 8002324:	0001883a 	nop
 8002328:	00000506 	br	8002340 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 800232c:	0001883a 	nop
 8002330:	00000306 	br	8002340 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 8002334:	0001883a 	nop
 8002338:	00000106 	br	8002340 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 800233c:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 8002340:	0001883a 	nop
 8002344:	e6ffff04 	addi	sp,fp,-4
 8002348:	dfc00217 	ldw	ra,8(sp)
 800234c:	df000117 	ldw	fp,4(sp)
 8002350:	dc000017 	ldw	r16,0(sp)
 8002354:	dec00304 	addi	sp,sp,12
 8002358:	f800283a 	ret

0800235c <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 800235c:	defffd04 	addi	sp,sp,-12
 8002360:	df000215 	stw	fp,8(sp)
 8002364:	df000204 	addi	fp,sp,8
 8002368:	2005883a 	mov	r2,r4
 800236c:	e17fff15 	stw	r5,-4(fp)
 8002370:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 8002374:	0005883a 	mov	r2,zero
}
 8002378:	e037883a 	mov	sp,fp
 800237c:	df000017 	ldw	fp,0(sp)
 8002380:	dec00104 	addi	sp,sp,4
 8002384:	f800283a 	ret

08002388 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002388:	defffb04 	addi	sp,sp,-20
 800238c:	df000415 	stw	fp,16(sp)
 8002390:	df000404 	addi	fp,sp,16
 8002394:	2007883a 	mov	r3,r4
 8002398:	2805883a 	mov	r2,r5
 800239c:	e1bffe15 	stw	r6,-8(fp)
 80023a0:	e1ffff15 	stw	r7,-4(fp)
 80023a4:	e0fffc05 	stb	r3,-16(fp)
 80023a8:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 80023ac:	0005883a 	mov	r2,zero

}
 80023b0:	e037883a 	mov	sp,fp
 80023b4:	df000017 	ldw	fp,0(sp)
 80023b8:	dec00104 	addi	sp,sp,4
 80023bc:	f800283a 	ret

080023c0 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 80023c0:	defffd04 	addi	sp,sp,-12
 80023c4:	df000215 	stw	fp,8(sp)
 80023c8:	df000204 	addi	fp,sp,8
 80023cc:	2005883a 	mov	r2,r4
 80023d0:	e17fff15 	stw	r5,-4(fp)
 80023d4:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 80023d8:	0005883a 	mov	r2,zero

}
 80023dc:	e037883a 	mov	sp,fp
 80023e0:	df000017 	ldw	fp,0(sp)
 80023e4:	dec00104 	addi	sp,sp,4
 80023e8:	f800283a 	ret

080023ec <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 80023ec:	defffb04 	addi	sp,sp,-20
 80023f0:	df000415 	stw	fp,16(sp)
 80023f4:	df000404 	addi	fp,sp,16
 80023f8:	2007883a 	mov	r3,r4
 80023fc:	2805883a 	mov	r2,r5
 8002400:	e1bffe15 	stw	r6,-8(fp)
 8002404:	e1ffff15 	stw	r7,-4(fp)
 8002408:	e0fffc05 	stb	r3,-16(fp)
 800240c:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 8002410:	0005883a 	mov	r2,zero
}
 8002414:	e037883a 	mov	sp,fp
 8002418:	df000017 	ldw	fp,0(sp)
 800241c:	dec00104 	addi	sp,sp,4
 8002420:	f800283a 	ret

08002424 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 8002424:	defffd04 	addi	sp,sp,-12
 8002428:	df000215 	stw	fp,8(sp)
 800242c:	df000204 	addi	fp,sp,8
 8002430:	2005883a 	mov	r2,r4
 8002434:	e17fff15 	stw	r5,-4(fp)
 8002438:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 800243c:	0005883a 	mov	r2,zero
}
 8002440:	e037883a 	mov	sp,fp
 8002444:	df000017 	ldw	fp,0(sp)
 8002448:	dec00104 	addi	sp,sp,4
 800244c:	f800283a 	ret

08002450 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002450:	defffb04 	addi	sp,sp,-20
 8002454:	df000415 	stw	fp,16(sp)
 8002458:	df000404 	addi	fp,sp,16
 800245c:	2007883a 	mov	r3,r4
 8002460:	2805883a 	mov	r2,r5
 8002464:	e1bffe15 	stw	r6,-8(fp)
 8002468:	e1ffff15 	stw	r7,-4(fp)
 800246c:	e0fffc05 	stb	r3,-16(fp)
 8002470:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 8002474:	0005883a 	mov	r2,zero
}
 8002478:	e037883a 	mov	sp,fp
 800247c:	df000017 	ldw	fp,0(sp)
 8002480:	dec00104 	addi	sp,sp,4
 8002484:	f800283a 	ret

08002488 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 8002488:	deffff04 	addi	sp,sp,-4
 800248c:	df000015 	stw	fp,0(sp)
 8002490:	d839883a 	mov	fp,sp
    return( usb_task_state );
 8002494:	d0a00203 	ldbu	r2,-32760(gp)
}
 8002498:	e037883a 	mov	sp,fp
 800249c:	df000017 	ldw	fp,0(sp)
 80024a0:	dec00104 	addi	sp,sp,4
 80024a4:	f800283a 	ret

080024a8 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 80024a8:	defffe04 	addi	sp,sp,-8
 80024ac:	df000115 	stw	fp,4(sp)
 80024b0:	df000104 	addi	fp,sp,4
 80024b4:	2005883a 	mov	r2,r4
 80024b8:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 80024bc:	e0bfff03 	ldbu	r2,-4(fp)
 80024c0:	100690fa 	slli	r3,r2,3
 80024c4:	008200b4 	movhi	r2,2050
 80024c8:	10bebb04 	addi	r2,r2,-1300
 80024cc:	1885883a 	add	r2,r3,r2
}
 80024d0:	e037883a 	mov	sp,fp
 80024d4:	df000017 	ldw	fp,0(sp)
 80024d8:	dec00104 	addi	sp,sp,4
 80024dc:	f800283a 	ret

080024e0 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 80024e0:	defffc04 	addi	sp,sp,-16
 80024e4:	df000315 	stw	fp,12(sp)
 80024e8:	df000304 	addi	fp,sp,12
 80024ec:	e13ffe15 	stw	r4,-8(fp)
 80024f0:	2805883a 	mov	r2,r5
 80024f4:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 80024f8:	e03ffd05 	stb	zero,-12(fp)
 80024fc:	00000d06 	br	8002534 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 8002500:	e0bffd03 	ldbu	r2,-12(fp)
 8002504:	e0fffe17 	ldw	r3,-8(fp)
 8002508:	1887883a 	add	r3,r3,r2
 800250c:	e0bffd03 	ldbu	r2,-12(fp)
 8002510:	1085883a 	add	r2,r2,r2
 8002514:	1009883a 	mov	r4,r2
 8002518:	e0bffe17 	ldw	r2,-8(fp)
 800251c:	1105883a 	add	r2,r2,r4
 8002520:	10800003 	ldbu	r2,0(r2)
 8002524:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 8002528:	e0bffd03 	ldbu	r2,-12(fp)
 800252c:	10800044 	addi	r2,r2,1
 8002530:	e0bffd05 	stb	r2,-12(fp)
 8002534:	e0fffd03 	ldbu	r3,-12(fp)
 8002538:	e0bfff03 	ldbu	r2,-4(fp)
 800253c:	18bff036 	bltu	r3,r2,8002500 <__alt_data_end+0xfc002500>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 8002540:	e0bfff03 	ldbu	r2,-4(fp)
 8002544:	e0fffe17 	ldw	r3,-8(fp)
 8002548:	1885883a 	add	r2,r3,r2
 800254c:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 8002550:	e0bffe17 	ldw	r2,-8(fp)
}
 8002554:	e037883a 	mov	sp,fp
 8002558:	df000017 	ldw	fp,0(sp)
 800255c:	dec00104 	addi	sp,sp,4
 8002560:	f800283a 	ret

08002564 <vga_init_canvas>:
vga_sender vga_send_pixel_position;

int vga_canvas[VGA_WIDTH * VGA_HEIGHT];

void vga_init_canvas()
{
 8002564:	defffe04 	addi	sp,sp,-8
 8002568:	dfc00115 	stw	ra,4(sp)
 800256c:	df000015 	stw	fp,0(sp)
 8002570:	d839883a 	mov	fp,sp
	memset(vga_canvas, 0, VGA_WIDTH * VGA_HEIGHT);
 8002574:	01800174 	movhi	r6,5
 8002578:	31ac0004 	addi	r6,r6,-20480
 800257c:	000b883a 	mov	r5,zero
 8002580:	010200b4 	movhi	r4,2050
 8002584:	213ecd04 	addi	r4,r4,-1228
 8002588:	80046400 	call	8004640 <memset>
}
 800258c:	0001883a 	nop
 8002590:	e037883a 	mov	sp,fp
 8002594:	dfc00117 	ldw	ra,4(sp)
 8002598:	df000017 	ldw	fp,0(sp)
 800259c:	dec00204 	addi	sp,sp,8
 80025a0:	f800283a 	ret

080025a4 <vga_get_canvas_address>:

int *vga_get_canvas_address()
{
 80025a4:	deffff04 	addi	sp,sp,-4
 80025a8:	df000015 	stw	fp,0(sp)
 80025ac:	d839883a 	mov	fp,sp
	return vga_canvas;
 80025b0:	008200b4 	movhi	r2,2050
 80025b4:	10becd04 	addi	r2,r2,-1228
}
 80025b8:	e037883a 	mov	sp,fp
 80025bc:	df000017 	ldw	fp,0(sp)
 80025c0:	dec00104 	addi	sp,sp,4
 80025c4:	f800283a 	ret

080025c8 <vga_set_pixel_color_sender>:

void vga_set_pixel_color_sender(vga_sender sender)
{
 80025c8:	defffe04 	addi	sp,sp,-8
 80025cc:	df000115 	stw	fp,4(sp)
 80025d0:	df000104 	addi	fp,sp,4
 80025d4:	e13fff15 	stw	r4,-4(fp)
	vga_send_pixel_color = sender;
 80025d8:	e0bfff17 	ldw	r2,-4(fp)
 80025dc:	d0a6e715 	stw	r2,-25700(gp)
}
 80025e0:	0001883a 	nop
 80025e4:	e037883a 	mov	sp,fp
 80025e8:	df000017 	ldw	fp,0(sp)
 80025ec:	dec00104 	addi	sp,sp,4
 80025f0:	f800283a 	ret

080025f4 <vga_set_pixel_position_sender>:

void vga_set_pixel_position_sender(vga_sender sender)
{
 80025f4:	defffe04 	addi	sp,sp,-8
 80025f8:	df000115 	stw	fp,4(sp)
 80025fc:	df000104 	addi	fp,sp,4
 8002600:	e13fff15 	stw	r4,-4(fp)
	vga_send_pixel_position = sender;
 8002604:	e0bfff17 	ldw	r2,-4(fp)
 8002608:	d0a6e815 	stw	r2,-25696(gp)
}
 800260c:	0001883a 	nop
 8002610:	e037883a 	mov	sp,fp
 8002614:	df000017 	ldw	fp,0(sp)
 8002618:	dec00104 	addi	sp,sp,4
 800261c:	f800283a 	ret

08002620 <vga_set_pixel_rgba>:

void vga_set_pixel_rgba(int x, int y, int rgba)
{
 8002620:	defffb04 	addi	sp,sp,-20
 8002624:	dfc00415 	stw	ra,16(sp)
 8002628:	df000315 	stw	fp,12(sp)
 800262c:	df000304 	addi	fp,sp,12
 8002630:	e13ffd15 	stw	r4,-12(fp)
 8002634:	e17ffe15 	stw	r5,-8(fp)
 8002638:	e1bfff15 	stw	r6,-4(fp)
	vga_canvas[y * VGA_WIDTH + x] = rgba;
 800263c:	0140a004 	movi	r5,640
 8002640:	e13ffe17 	ldw	r4,-8(fp)
 8002644:	80028f40 	call	80028f4 <__mulsi3>
 8002648:	1007883a 	mov	r3,r2
 800264c:	e0bffd17 	ldw	r2,-12(fp)
 8002650:	1887883a 	add	r3,r3,r2
 8002654:	008200b4 	movhi	r2,2050
 8002658:	10becd04 	addi	r2,r2,-1228
 800265c:	18c7883a 	add	r3,r3,r3
 8002660:	18c7883a 	add	r3,r3,r3
 8002664:	10c5883a 	add	r2,r2,r3
 8002668:	e0ffff17 	ldw	r3,-4(fp)
 800266c:	10c00015 	stw	r3,0(r2)
}
 8002670:	0001883a 	nop
 8002674:	e037883a 	mov	sp,fp
 8002678:	dfc00117 	ldw	ra,4(sp)
 800267c:	df000017 	ldw	fp,0(sp)
 8002680:	dec00204 	addi	sp,sp,8
 8002684:	f800283a 	ret

08002688 <vga_draw>:

void vga_draw()
{
 8002688:	defffb04 	addi	sp,sp,-20
 800268c:	dfc00415 	stw	ra,16(sp)
 8002690:	df000315 	stw	fp,12(sp)
 8002694:	df000304 	addi	fp,sp,12
	for (int y = 0; y < VGA_HEIGHT; ++y) {
 8002698:	e03ffd15 	stw	zero,-12(fp)
 800269c:	00001f06 	br	800271c <vga_draw+0x94>
		for (int x = 0; x < VGA_WIDTH; ++x) {
 80026a0:	e03ffe15 	stw	zero,-8(fp)
 80026a4:	00001706 	br	8002704 <vga_draw+0x7c>
			int position = y * VGA_WIDTH + x;
 80026a8:	0140a004 	movi	r5,640
 80026ac:	e13ffd17 	ldw	r4,-12(fp)
 80026b0:	80028f40 	call	80028f4 <__mulsi3>
 80026b4:	1007883a 	mov	r3,r2
 80026b8:	e0bffe17 	ldw	r2,-8(fp)
 80026bc:	1885883a 	add	r2,r3,r2
 80026c0:	e0bfff15 	stw	r2,-4(fp)
			vga_send_pixel_color(vga_canvas[position]);
 80026c4:	d166e717 	ldw	r5,-25700(gp)
 80026c8:	008200b4 	movhi	r2,2050
 80026cc:	10becd04 	addi	r2,r2,-1228
 80026d0:	e0ffff17 	ldw	r3,-4(fp)
 80026d4:	18c7883a 	add	r3,r3,r3
 80026d8:	18c7883a 	add	r3,r3,r3
 80026dc:	10c5883a 	add	r2,r2,r3
 80026e0:	10800017 	ldw	r2,0(r2)
 80026e4:	1009883a 	mov	r4,r2
 80026e8:	283ee83a 	callr	r5
			vga_send_pixel_position(position);
 80026ec:	d0a6e817 	ldw	r2,-25696(gp)
 80026f0:	e13fff17 	ldw	r4,-4(fp)
 80026f4:	103ee83a 	callr	r2
}

void vga_draw()
{
	for (int y = 0; y < VGA_HEIGHT; ++y) {
		for (int x = 0; x < VGA_WIDTH; ++x) {
 80026f8:	e0bffe17 	ldw	r2,-8(fp)
 80026fc:	10800044 	addi	r2,r2,1
 8002700:	e0bffe15 	stw	r2,-8(fp)
 8002704:	e0bffe17 	ldw	r2,-8(fp)
 8002708:	1080a010 	cmplti	r2,r2,640
 800270c:	103fe61e 	bne	r2,zero,80026a8 <__alt_data_end+0xfc0026a8>
	vga_canvas[y * VGA_WIDTH + x] = rgba;
}

void vga_draw()
{
	for (int y = 0; y < VGA_HEIGHT; ++y) {
 8002710:	e0bffd17 	ldw	r2,-12(fp)
 8002714:	10800044 	addi	r2,r2,1
 8002718:	e0bffd15 	stw	r2,-12(fp)
 800271c:	e0bffd17 	ldw	r2,-12(fp)
 8002720:	10807810 	cmplti	r2,r2,480
 8002724:	103fde1e 	bne	r2,zero,80026a0 <__alt_data_end+0xfc0026a0>
			int position = y * VGA_WIDTH + x;
			vga_send_pixel_color(vga_canvas[position]);
			vga_send_pixel_position(position);
		}
	}
}
 8002728:	0001883a 	nop
 800272c:	e037883a 	mov	sp,fp
 8002730:	dfc00117 	ldw	ra,4(sp)
 8002734:	df000017 	ldw	fp,0(sp)
 8002738:	dec00204 	addi	sp,sp,8
 800273c:	f800283a 	ret

08002740 <__divsi3>:
 8002740:	20001b16 	blt	r4,zero,80027b0 <__divsi3+0x70>
 8002744:	000f883a 	mov	r7,zero
 8002748:	28001616 	blt	r5,zero,80027a4 <__divsi3+0x64>
 800274c:	200d883a 	mov	r6,r4
 8002750:	29001a2e 	bgeu	r5,r4,80027bc <__divsi3+0x7c>
 8002754:	00800804 	movi	r2,32
 8002758:	00c00044 	movi	r3,1
 800275c:	00000106 	br	8002764 <__divsi3+0x24>
 8002760:	10000d26 	beq	r2,zero,8002798 <__divsi3+0x58>
 8002764:	294b883a 	add	r5,r5,r5
 8002768:	10bfffc4 	addi	r2,r2,-1
 800276c:	18c7883a 	add	r3,r3,r3
 8002770:	293ffb36 	bltu	r5,r4,8002760 <__alt_data_end+0xfc002760>
 8002774:	0005883a 	mov	r2,zero
 8002778:	18000726 	beq	r3,zero,8002798 <__divsi3+0x58>
 800277c:	0005883a 	mov	r2,zero
 8002780:	31400236 	bltu	r6,r5,800278c <__divsi3+0x4c>
 8002784:	314dc83a 	sub	r6,r6,r5
 8002788:	10c4b03a 	or	r2,r2,r3
 800278c:	1806d07a 	srli	r3,r3,1
 8002790:	280ad07a 	srli	r5,r5,1
 8002794:	183ffa1e 	bne	r3,zero,8002780 <__alt_data_end+0xfc002780>
 8002798:	38000126 	beq	r7,zero,80027a0 <__divsi3+0x60>
 800279c:	0085c83a 	sub	r2,zero,r2
 80027a0:	f800283a 	ret
 80027a4:	014bc83a 	sub	r5,zero,r5
 80027a8:	39c0005c 	xori	r7,r7,1
 80027ac:	003fe706 	br	800274c <__alt_data_end+0xfc00274c>
 80027b0:	0109c83a 	sub	r4,zero,r4
 80027b4:	01c00044 	movi	r7,1
 80027b8:	003fe306 	br	8002748 <__alt_data_end+0xfc002748>
 80027bc:	00c00044 	movi	r3,1
 80027c0:	003fee06 	br	800277c <__alt_data_end+0xfc00277c>

080027c4 <__modsi3>:
 80027c4:	20001716 	blt	r4,zero,8002824 <__modsi3+0x60>
 80027c8:	000f883a 	mov	r7,zero
 80027cc:	2005883a 	mov	r2,r4
 80027d0:	28001216 	blt	r5,zero,800281c <__modsi3+0x58>
 80027d4:	2900162e 	bgeu	r5,r4,8002830 <__modsi3+0x6c>
 80027d8:	01800804 	movi	r6,32
 80027dc:	00c00044 	movi	r3,1
 80027e0:	00000106 	br	80027e8 <__modsi3+0x24>
 80027e4:	30000a26 	beq	r6,zero,8002810 <__modsi3+0x4c>
 80027e8:	294b883a 	add	r5,r5,r5
 80027ec:	31bfffc4 	addi	r6,r6,-1
 80027f0:	18c7883a 	add	r3,r3,r3
 80027f4:	293ffb36 	bltu	r5,r4,80027e4 <__alt_data_end+0xfc0027e4>
 80027f8:	18000526 	beq	r3,zero,8002810 <__modsi3+0x4c>
 80027fc:	1806d07a 	srli	r3,r3,1
 8002800:	11400136 	bltu	r2,r5,8002808 <__modsi3+0x44>
 8002804:	1145c83a 	sub	r2,r2,r5
 8002808:	280ad07a 	srli	r5,r5,1
 800280c:	183ffb1e 	bne	r3,zero,80027fc <__alt_data_end+0xfc0027fc>
 8002810:	38000126 	beq	r7,zero,8002818 <__modsi3+0x54>
 8002814:	0085c83a 	sub	r2,zero,r2
 8002818:	f800283a 	ret
 800281c:	014bc83a 	sub	r5,zero,r5
 8002820:	003fec06 	br	80027d4 <__alt_data_end+0xfc0027d4>
 8002824:	0109c83a 	sub	r4,zero,r4
 8002828:	01c00044 	movi	r7,1
 800282c:	003fe706 	br	80027cc <__alt_data_end+0xfc0027cc>
 8002830:	00c00044 	movi	r3,1
 8002834:	003ff106 	br	80027fc <__alt_data_end+0xfc0027fc>

08002838 <__udivsi3>:
 8002838:	200d883a 	mov	r6,r4
 800283c:	2900152e 	bgeu	r5,r4,8002894 <__udivsi3+0x5c>
 8002840:	28001416 	blt	r5,zero,8002894 <__udivsi3+0x5c>
 8002844:	00800804 	movi	r2,32
 8002848:	00c00044 	movi	r3,1
 800284c:	00000206 	br	8002858 <__udivsi3+0x20>
 8002850:	10000e26 	beq	r2,zero,800288c <__udivsi3+0x54>
 8002854:	28000516 	blt	r5,zero,800286c <__udivsi3+0x34>
 8002858:	294b883a 	add	r5,r5,r5
 800285c:	10bfffc4 	addi	r2,r2,-1
 8002860:	18c7883a 	add	r3,r3,r3
 8002864:	293ffa36 	bltu	r5,r4,8002850 <__alt_data_end+0xfc002850>
 8002868:	18000826 	beq	r3,zero,800288c <__udivsi3+0x54>
 800286c:	0005883a 	mov	r2,zero
 8002870:	31400236 	bltu	r6,r5,800287c <__udivsi3+0x44>
 8002874:	314dc83a 	sub	r6,r6,r5
 8002878:	10c4b03a 	or	r2,r2,r3
 800287c:	1806d07a 	srli	r3,r3,1
 8002880:	280ad07a 	srli	r5,r5,1
 8002884:	183ffa1e 	bne	r3,zero,8002870 <__alt_data_end+0xfc002870>
 8002888:	f800283a 	ret
 800288c:	0005883a 	mov	r2,zero
 8002890:	f800283a 	ret
 8002894:	00c00044 	movi	r3,1
 8002898:	003ff406 	br	800286c <__alt_data_end+0xfc00286c>

0800289c <__umodsi3>:
 800289c:	2005883a 	mov	r2,r4
 80028a0:	2900122e 	bgeu	r5,r4,80028ec <__umodsi3+0x50>
 80028a4:	28001116 	blt	r5,zero,80028ec <__umodsi3+0x50>
 80028a8:	01800804 	movi	r6,32
 80028ac:	00c00044 	movi	r3,1
 80028b0:	00000206 	br	80028bc <__umodsi3+0x20>
 80028b4:	30000c26 	beq	r6,zero,80028e8 <__umodsi3+0x4c>
 80028b8:	28000516 	blt	r5,zero,80028d0 <__umodsi3+0x34>
 80028bc:	294b883a 	add	r5,r5,r5
 80028c0:	31bfffc4 	addi	r6,r6,-1
 80028c4:	18c7883a 	add	r3,r3,r3
 80028c8:	293ffa36 	bltu	r5,r4,80028b4 <__alt_data_end+0xfc0028b4>
 80028cc:	18000626 	beq	r3,zero,80028e8 <__umodsi3+0x4c>
 80028d0:	1806d07a 	srli	r3,r3,1
 80028d4:	11400136 	bltu	r2,r5,80028dc <__umodsi3+0x40>
 80028d8:	1145c83a 	sub	r2,r2,r5
 80028dc:	280ad07a 	srli	r5,r5,1
 80028e0:	183ffb1e 	bne	r3,zero,80028d0 <__alt_data_end+0xfc0028d0>
 80028e4:	f800283a 	ret
 80028e8:	f800283a 	ret
 80028ec:	00c00044 	movi	r3,1
 80028f0:	003ff706 	br	80028d0 <__alt_data_end+0xfc0028d0>

080028f4 <__mulsi3>:
 80028f4:	0005883a 	mov	r2,zero
 80028f8:	20000726 	beq	r4,zero,8002918 <__mulsi3+0x24>
 80028fc:	20c0004c 	andi	r3,r4,1
 8002900:	2008d07a 	srli	r4,r4,1
 8002904:	18000126 	beq	r3,zero,800290c <__mulsi3+0x18>
 8002908:	1145883a 	add	r2,r2,r5
 800290c:	294b883a 	add	r5,r5,r5
 8002910:	203ffa1e 	bne	r4,zero,80028fc <__alt_data_end+0xfc0028fc>
 8002914:	f800283a 	ret
 8002918:	f800283a 	ret

0800291c <_fclose_r>:
 800291c:	28003926 	beq	r5,zero,8002a04 <_fclose_r+0xe8>
 8002920:	defffc04 	addi	sp,sp,-16
 8002924:	dc400115 	stw	r17,4(sp)
 8002928:	dc000015 	stw	r16,0(sp)
 800292c:	dfc00315 	stw	ra,12(sp)
 8002930:	dc800215 	stw	r18,8(sp)
 8002934:	2023883a 	mov	r17,r4
 8002938:	2821883a 	mov	r16,r5
 800293c:	20000226 	beq	r4,zero,8002948 <_fclose_r+0x2c>
 8002940:	20800e17 	ldw	r2,56(r4)
 8002944:	10002726 	beq	r2,zero,80029e4 <_fclose_r+0xc8>
 8002948:	8080030f 	ldh	r2,12(r16)
 800294c:	1000071e 	bne	r2,zero,800296c <_fclose_r+0x50>
 8002950:	0005883a 	mov	r2,zero
 8002954:	dfc00317 	ldw	ra,12(sp)
 8002958:	dc800217 	ldw	r18,8(sp)
 800295c:	dc400117 	ldw	r17,4(sp)
 8002960:	dc000017 	ldw	r16,0(sp)
 8002964:	dec00404 	addi	sp,sp,16
 8002968:	f800283a 	ret
 800296c:	800b883a 	mov	r5,r16
 8002970:	8809883a 	mov	r4,r17
 8002974:	8002a200 	call	8002a20 <__sflush_r>
 8002978:	1025883a 	mov	r18,r2
 800297c:	80800b17 	ldw	r2,44(r16)
 8002980:	10000426 	beq	r2,zero,8002994 <_fclose_r+0x78>
 8002984:	81400717 	ldw	r5,28(r16)
 8002988:	8809883a 	mov	r4,r17
 800298c:	103ee83a 	callr	r2
 8002990:	10001616 	blt	r2,zero,80029ec <_fclose_r+0xd0>
 8002994:	8080030b 	ldhu	r2,12(r16)
 8002998:	1080200c 	andi	r2,r2,128
 800299c:	1000151e 	bne	r2,zero,80029f4 <_fclose_r+0xd8>
 80029a0:	81400c17 	ldw	r5,48(r16)
 80029a4:	28000526 	beq	r5,zero,80029bc <_fclose_r+0xa0>
 80029a8:	80801004 	addi	r2,r16,64
 80029ac:	28800226 	beq	r5,r2,80029b8 <_fclose_r+0x9c>
 80029b0:	8809883a 	mov	r4,r17
 80029b4:	80032a80 	call	80032a8 <_free_r>
 80029b8:	80000c15 	stw	zero,48(r16)
 80029bc:	81401117 	ldw	r5,68(r16)
 80029c0:	28000326 	beq	r5,zero,80029d0 <_fclose_r+0xb4>
 80029c4:	8809883a 	mov	r4,r17
 80029c8:	80032a80 	call	80032a8 <_free_r>
 80029cc:	80001115 	stw	zero,68(r16)
 80029d0:	80030380 	call	8003038 <__sfp_lock_acquire>
 80029d4:	8000030d 	sth	zero,12(r16)
 80029d8:	800303c0 	call	800303c <__sfp_lock_release>
 80029dc:	9005883a 	mov	r2,r18
 80029e0:	003fdc06 	br	8002954 <__alt_data_end+0xfc002954>
 80029e4:	80030280 	call	8003028 <__sinit>
 80029e8:	003fd706 	br	8002948 <__alt_data_end+0xfc002948>
 80029ec:	04bfffc4 	movi	r18,-1
 80029f0:	003fe806 	br	8002994 <__alt_data_end+0xfc002994>
 80029f4:	81400417 	ldw	r5,16(r16)
 80029f8:	8809883a 	mov	r4,r17
 80029fc:	80032a80 	call	80032a8 <_free_r>
 8002a00:	003fe706 	br	80029a0 <__alt_data_end+0xfc0029a0>
 8002a04:	0005883a 	mov	r2,zero
 8002a08:	f800283a 	ret

08002a0c <fclose>:
 8002a0c:	008200b4 	movhi	r2,2050
 8002a10:	10b77404 	addi	r2,r2,-8752
 8002a14:	200b883a 	mov	r5,r4
 8002a18:	11000017 	ldw	r4,0(r2)
 8002a1c:	800291c1 	jmpi	800291c <_fclose_r>

08002a20 <__sflush_r>:
 8002a20:	2880030b 	ldhu	r2,12(r5)
 8002a24:	defffb04 	addi	sp,sp,-20
 8002a28:	dcc00315 	stw	r19,12(sp)
 8002a2c:	dc400115 	stw	r17,4(sp)
 8002a30:	dfc00415 	stw	ra,16(sp)
 8002a34:	dc800215 	stw	r18,8(sp)
 8002a38:	dc000015 	stw	r16,0(sp)
 8002a3c:	10c0020c 	andi	r3,r2,8
 8002a40:	2823883a 	mov	r17,r5
 8002a44:	2027883a 	mov	r19,r4
 8002a48:	1800311e 	bne	r3,zero,8002b10 <__sflush_r+0xf0>
 8002a4c:	28c00117 	ldw	r3,4(r5)
 8002a50:	10820014 	ori	r2,r2,2048
 8002a54:	2880030d 	sth	r2,12(r5)
 8002a58:	00c04b0e 	bge	zero,r3,8002b88 <__sflush_r+0x168>
 8002a5c:	8a000a17 	ldw	r8,40(r17)
 8002a60:	40002326 	beq	r8,zero,8002af0 <__sflush_r+0xd0>
 8002a64:	9c000017 	ldw	r16,0(r19)
 8002a68:	10c4000c 	andi	r3,r2,4096
 8002a6c:	98000015 	stw	zero,0(r19)
 8002a70:	18004826 	beq	r3,zero,8002b94 <__sflush_r+0x174>
 8002a74:	89801417 	ldw	r6,80(r17)
 8002a78:	10c0010c 	andi	r3,r2,4
 8002a7c:	18000626 	beq	r3,zero,8002a98 <__sflush_r+0x78>
 8002a80:	88c00117 	ldw	r3,4(r17)
 8002a84:	88800c17 	ldw	r2,48(r17)
 8002a88:	30cdc83a 	sub	r6,r6,r3
 8002a8c:	10000226 	beq	r2,zero,8002a98 <__sflush_r+0x78>
 8002a90:	88800f17 	ldw	r2,60(r17)
 8002a94:	308dc83a 	sub	r6,r6,r2
 8002a98:	89400717 	ldw	r5,28(r17)
 8002a9c:	000f883a 	mov	r7,zero
 8002aa0:	9809883a 	mov	r4,r19
 8002aa4:	403ee83a 	callr	r8
 8002aa8:	00ffffc4 	movi	r3,-1
 8002aac:	10c04426 	beq	r2,r3,8002bc0 <__sflush_r+0x1a0>
 8002ab0:	88c0030b 	ldhu	r3,12(r17)
 8002ab4:	89000417 	ldw	r4,16(r17)
 8002ab8:	88000115 	stw	zero,4(r17)
 8002abc:	197dffcc 	andi	r5,r3,63487
 8002ac0:	8940030d 	sth	r5,12(r17)
 8002ac4:	89000015 	stw	r4,0(r17)
 8002ac8:	18c4000c 	andi	r3,r3,4096
 8002acc:	18002c1e 	bne	r3,zero,8002b80 <__sflush_r+0x160>
 8002ad0:	89400c17 	ldw	r5,48(r17)
 8002ad4:	9c000015 	stw	r16,0(r19)
 8002ad8:	28000526 	beq	r5,zero,8002af0 <__sflush_r+0xd0>
 8002adc:	88801004 	addi	r2,r17,64
 8002ae0:	28800226 	beq	r5,r2,8002aec <__sflush_r+0xcc>
 8002ae4:	9809883a 	mov	r4,r19
 8002ae8:	80032a80 	call	80032a8 <_free_r>
 8002aec:	88000c15 	stw	zero,48(r17)
 8002af0:	0005883a 	mov	r2,zero
 8002af4:	dfc00417 	ldw	ra,16(sp)
 8002af8:	dcc00317 	ldw	r19,12(sp)
 8002afc:	dc800217 	ldw	r18,8(sp)
 8002b00:	dc400117 	ldw	r17,4(sp)
 8002b04:	dc000017 	ldw	r16,0(sp)
 8002b08:	dec00504 	addi	sp,sp,20
 8002b0c:	f800283a 	ret
 8002b10:	2c800417 	ldw	r18,16(r5)
 8002b14:	903ff626 	beq	r18,zero,8002af0 <__alt_data_end+0xfc002af0>
 8002b18:	2c000017 	ldw	r16,0(r5)
 8002b1c:	108000cc 	andi	r2,r2,3
 8002b20:	2c800015 	stw	r18,0(r5)
 8002b24:	84a1c83a 	sub	r16,r16,r18
 8002b28:	1000131e 	bne	r2,zero,8002b78 <__sflush_r+0x158>
 8002b2c:	28800517 	ldw	r2,20(r5)
 8002b30:	88800215 	stw	r2,8(r17)
 8002b34:	04000316 	blt	zero,r16,8002b44 <__sflush_r+0x124>
 8002b38:	003fed06 	br	8002af0 <__alt_data_end+0xfc002af0>
 8002b3c:	90a5883a 	add	r18,r18,r2
 8002b40:	043feb0e 	bge	zero,r16,8002af0 <__alt_data_end+0xfc002af0>
 8002b44:	88800917 	ldw	r2,36(r17)
 8002b48:	89400717 	ldw	r5,28(r17)
 8002b4c:	800f883a 	mov	r7,r16
 8002b50:	900d883a 	mov	r6,r18
 8002b54:	9809883a 	mov	r4,r19
 8002b58:	103ee83a 	callr	r2
 8002b5c:	80a1c83a 	sub	r16,r16,r2
 8002b60:	00bff616 	blt	zero,r2,8002b3c <__alt_data_end+0xfc002b3c>
 8002b64:	88c0030b 	ldhu	r3,12(r17)
 8002b68:	00bfffc4 	movi	r2,-1
 8002b6c:	18c01014 	ori	r3,r3,64
 8002b70:	88c0030d 	sth	r3,12(r17)
 8002b74:	003fdf06 	br	8002af4 <__alt_data_end+0xfc002af4>
 8002b78:	0005883a 	mov	r2,zero
 8002b7c:	003fec06 	br	8002b30 <__alt_data_end+0xfc002b30>
 8002b80:	88801415 	stw	r2,80(r17)
 8002b84:	003fd206 	br	8002ad0 <__alt_data_end+0xfc002ad0>
 8002b88:	28c00f17 	ldw	r3,60(r5)
 8002b8c:	00ffb316 	blt	zero,r3,8002a5c <__alt_data_end+0xfc002a5c>
 8002b90:	003fd706 	br	8002af0 <__alt_data_end+0xfc002af0>
 8002b94:	89400717 	ldw	r5,28(r17)
 8002b98:	000d883a 	mov	r6,zero
 8002b9c:	01c00044 	movi	r7,1
 8002ba0:	9809883a 	mov	r4,r19
 8002ba4:	403ee83a 	callr	r8
 8002ba8:	100d883a 	mov	r6,r2
 8002bac:	00bfffc4 	movi	r2,-1
 8002bb0:	30801426 	beq	r6,r2,8002c04 <__sflush_r+0x1e4>
 8002bb4:	8880030b 	ldhu	r2,12(r17)
 8002bb8:	8a000a17 	ldw	r8,40(r17)
 8002bbc:	003fae06 	br	8002a78 <__alt_data_end+0xfc002a78>
 8002bc0:	98c00017 	ldw	r3,0(r19)
 8002bc4:	183fba26 	beq	r3,zero,8002ab0 <__alt_data_end+0xfc002ab0>
 8002bc8:	01000744 	movi	r4,29
 8002bcc:	19000626 	beq	r3,r4,8002be8 <__sflush_r+0x1c8>
 8002bd0:	01000584 	movi	r4,22
 8002bd4:	19000426 	beq	r3,r4,8002be8 <__sflush_r+0x1c8>
 8002bd8:	88c0030b 	ldhu	r3,12(r17)
 8002bdc:	18c01014 	ori	r3,r3,64
 8002be0:	88c0030d 	sth	r3,12(r17)
 8002be4:	003fc306 	br	8002af4 <__alt_data_end+0xfc002af4>
 8002be8:	8880030b 	ldhu	r2,12(r17)
 8002bec:	88c00417 	ldw	r3,16(r17)
 8002bf0:	88000115 	stw	zero,4(r17)
 8002bf4:	10bdffcc 	andi	r2,r2,63487
 8002bf8:	8880030d 	sth	r2,12(r17)
 8002bfc:	88c00015 	stw	r3,0(r17)
 8002c00:	003fb306 	br	8002ad0 <__alt_data_end+0xfc002ad0>
 8002c04:	98800017 	ldw	r2,0(r19)
 8002c08:	103fea26 	beq	r2,zero,8002bb4 <__alt_data_end+0xfc002bb4>
 8002c0c:	00c00744 	movi	r3,29
 8002c10:	10c00226 	beq	r2,r3,8002c1c <__sflush_r+0x1fc>
 8002c14:	00c00584 	movi	r3,22
 8002c18:	10c0031e 	bne	r2,r3,8002c28 <__sflush_r+0x208>
 8002c1c:	9c000015 	stw	r16,0(r19)
 8002c20:	0005883a 	mov	r2,zero
 8002c24:	003fb306 	br	8002af4 <__alt_data_end+0xfc002af4>
 8002c28:	88c0030b 	ldhu	r3,12(r17)
 8002c2c:	3005883a 	mov	r2,r6
 8002c30:	18c01014 	ori	r3,r3,64
 8002c34:	88c0030d 	sth	r3,12(r17)
 8002c38:	003fae06 	br	8002af4 <__alt_data_end+0xfc002af4>

08002c3c <_fflush_r>:
 8002c3c:	defffd04 	addi	sp,sp,-12
 8002c40:	dc000115 	stw	r16,4(sp)
 8002c44:	dfc00215 	stw	ra,8(sp)
 8002c48:	2021883a 	mov	r16,r4
 8002c4c:	20000226 	beq	r4,zero,8002c58 <_fflush_r+0x1c>
 8002c50:	20800e17 	ldw	r2,56(r4)
 8002c54:	10000c26 	beq	r2,zero,8002c88 <_fflush_r+0x4c>
 8002c58:	2880030f 	ldh	r2,12(r5)
 8002c5c:	1000051e 	bne	r2,zero,8002c74 <_fflush_r+0x38>
 8002c60:	0005883a 	mov	r2,zero
 8002c64:	dfc00217 	ldw	ra,8(sp)
 8002c68:	dc000117 	ldw	r16,4(sp)
 8002c6c:	dec00304 	addi	sp,sp,12
 8002c70:	f800283a 	ret
 8002c74:	8009883a 	mov	r4,r16
 8002c78:	dfc00217 	ldw	ra,8(sp)
 8002c7c:	dc000117 	ldw	r16,4(sp)
 8002c80:	dec00304 	addi	sp,sp,12
 8002c84:	8002a201 	jmpi	8002a20 <__sflush_r>
 8002c88:	d9400015 	stw	r5,0(sp)
 8002c8c:	80030280 	call	8003028 <__sinit>
 8002c90:	d9400017 	ldw	r5,0(sp)
 8002c94:	003ff006 	br	8002c58 <__alt_data_end+0xfc002c58>

08002c98 <fflush>:
 8002c98:	20000526 	beq	r4,zero,8002cb0 <fflush+0x18>
 8002c9c:	008200b4 	movhi	r2,2050
 8002ca0:	10b77404 	addi	r2,r2,-8752
 8002ca4:	200b883a 	mov	r5,r4
 8002ca8:	11000017 	ldw	r4,0(r2)
 8002cac:	8002c3c1 	jmpi	8002c3c <_fflush_r>
 8002cb0:	008200b4 	movhi	r2,2050
 8002cb4:	10b77304 	addi	r2,r2,-8756
 8002cb8:	11000017 	ldw	r4,0(r2)
 8002cbc:	01420034 	movhi	r5,2048
 8002cc0:	294b0f04 	addi	r5,r5,11324
 8002cc4:	8003bb41 	jmpi	8003bb4 <_fwalk_reent>

08002cc8 <__fp_unlock>:
 8002cc8:	0005883a 	mov	r2,zero
 8002ccc:	f800283a 	ret

08002cd0 <_cleanup_r>:
 8002cd0:	01420034 	movhi	r5,2048
 8002cd4:	294a4704 	addi	r5,r5,10524
 8002cd8:	8003bb41 	jmpi	8003bb4 <_fwalk_reent>

08002cdc <__sinit.part.1>:
 8002cdc:	defff704 	addi	sp,sp,-36
 8002ce0:	00c20034 	movhi	r3,2048
 8002ce4:	dfc00815 	stw	ra,32(sp)
 8002ce8:	ddc00715 	stw	r23,28(sp)
 8002cec:	dd800615 	stw	r22,24(sp)
 8002cf0:	dd400515 	stw	r21,20(sp)
 8002cf4:	dd000415 	stw	r20,16(sp)
 8002cf8:	dcc00315 	stw	r19,12(sp)
 8002cfc:	dc800215 	stw	r18,8(sp)
 8002d00:	dc400115 	stw	r17,4(sp)
 8002d04:	dc000015 	stw	r16,0(sp)
 8002d08:	18cb3404 	addi	r3,r3,11472
 8002d0c:	24000117 	ldw	r16,4(r4)
 8002d10:	20c00f15 	stw	r3,60(r4)
 8002d14:	2080bb04 	addi	r2,r4,748
 8002d18:	00c000c4 	movi	r3,3
 8002d1c:	20c0b915 	stw	r3,740(r4)
 8002d20:	2080ba15 	stw	r2,744(r4)
 8002d24:	2000b815 	stw	zero,736(r4)
 8002d28:	05c00204 	movi	r23,8
 8002d2c:	00800104 	movi	r2,4
 8002d30:	2025883a 	mov	r18,r4
 8002d34:	b80d883a 	mov	r6,r23
 8002d38:	81001704 	addi	r4,r16,92
 8002d3c:	000b883a 	mov	r5,zero
 8002d40:	80000015 	stw	zero,0(r16)
 8002d44:	80000115 	stw	zero,4(r16)
 8002d48:	80000215 	stw	zero,8(r16)
 8002d4c:	8080030d 	sth	r2,12(r16)
 8002d50:	80001915 	stw	zero,100(r16)
 8002d54:	8000038d 	sth	zero,14(r16)
 8002d58:	80000415 	stw	zero,16(r16)
 8002d5c:	80000515 	stw	zero,20(r16)
 8002d60:	80000615 	stw	zero,24(r16)
 8002d64:	80046400 	call	8004640 <memset>
 8002d68:	05820034 	movhi	r22,2048
 8002d6c:	94400217 	ldw	r17,8(r18)
 8002d70:	05420034 	movhi	r21,2048
 8002d74:	05020034 	movhi	r20,2048
 8002d78:	04c20034 	movhi	r19,2048
 8002d7c:	b592ee04 	addi	r22,r22,19384
 8002d80:	ad530504 	addi	r21,r21,19476
 8002d84:	a5132404 	addi	r20,r20,19600
 8002d88:	9cd33b04 	addi	r19,r19,19692
 8002d8c:	85800815 	stw	r22,32(r16)
 8002d90:	85400915 	stw	r21,36(r16)
 8002d94:	85000a15 	stw	r20,40(r16)
 8002d98:	84c00b15 	stw	r19,44(r16)
 8002d9c:	84000715 	stw	r16,28(r16)
 8002da0:	00800284 	movi	r2,10
 8002da4:	8880030d 	sth	r2,12(r17)
 8002da8:	00800044 	movi	r2,1
 8002dac:	b80d883a 	mov	r6,r23
 8002db0:	89001704 	addi	r4,r17,92
 8002db4:	000b883a 	mov	r5,zero
 8002db8:	88000015 	stw	zero,0(r17)
 8002dbc:	88000115 	stw	zero,4(r17)
 8002dc0:	88000215 	stw	zero,8(r17)
 8002dc4:	88001915 	stw	zero,100(r17)
 8002dc8:	8880038d 	sth	r2,14(r17)
 8002dcc:	88000415 	stw	zero,16(r17)
 8002dd0:	88000515 	stw	zero,20(r17)
 8002dd4:	88000615 	stw	zero,24(r17)
 8002dd8:	80046400 	call	8004640 <memset>
 8002ddc:	94000317 	ldw	r16,12(r18)
 8002de0:	00800484 	movi	r2,18
 8002de4:	8c400715 	stw	r17,28(r17)
 8002de8:	8d800815 	stw	r22,32(r17)
 8002dec:	8d400915 	stw	r21,36(r17)
 8002df0:	8d000a15 	stw	r20,40(r17)
 8002df4:	8cc00b15 	stw	r19,44(r17)
 8002df8:	8080030d 	sth	r2,12(r16)
 8002dfc:	00800084 	movi	r2,2
 8002e00:	80000015 	stw	zero,0(r16)
 8002e04:	80000115 	stw	zero,4(r16)
 8002e08:	80000215 	stw	zero,8(r16)
 8002e0c:	80001915 	stw	zero,100(r16)
 8002e10:	8080038d 	sth	r2,14(r16)
 8002e14:	80000415 	stw	zero,16(r16)
 8002e18:	80000515 	stw	zero,20(r16)
 8002e1c:	80000615 	stw	zero,24(r16)
 8002e20:	b80d883a 	mov	r6,r23
 8002e24:	000b883a 	mov	r5,zero
 8002e28:	81001704 	addi	r4,r16,92
 8002e2c:	80046400 	call	8004640 <memset>
 8002e30:	00800044 	movi	r2,1
 8002e34:	84000715 	stw	r16,28(r16)
 8002e38:	85800815 	stw	r22,32(r16)
 8002e3c:	85400915 	stw	r21,36(r16)
 8002e40:	85000a15 	stw	r20,40(r16)
 8002e44:	84c00b15 	stw	r19,44(r16)
 8002e48:	90800e15 	stw	r2,56(r18)
 8002e4c:	dfc00817 	ldw	ra,32(sp)
 8002e50:	ddc00717 	ldw	r23,28(sp)
 8002e54:	dd800617 	ldw	r22,24(sp)
 8002e58:	dd400517 	ldw	r21,20(sp)
 8002e5c:	dd000417 	ldw	r20,16(sp)
 8002e60:	dcc00317 	ldw	r19,12(sp)
 8002e64:	dc800217 	ldw	r18,8(sp)
 8002e68:	dc400117 	ldw	r17,4(sp)
 8002e6c:	dc000017 	ldw	r16,0(sp)
 8002e70:	dec00904 	addi	sp,sp,36
 8002e74:	f800283a 	ret

08002e78 <__fp_lock>:
 8002e78:	0005883a 	mov	r2,zero
 8002e7c:	f800283a 	ret

08002e80 <__sfmoreglue>:
 8002e80:	defffc04 	addi	sp,sp,-16
 8002e84:	dc800215 	stw	r18,8(sp)
 8002e88:	2825883a 	mov	r18,r5
 8002e8c:	dc000015 	stw	r16,0(sp)
 8002e90:	01401a04 	movi	r5,104
 8002e94:	2021883a 	mov	r16,r4
 8002e98:	913fffc4 	addi	r4,r18,-1
 8002e9c:	dfc00315 	stw	ra,12(sp)
 8002ea0:	dc400115 	stw	r17,4(sp)
 8002ea4:	80028f40 	call	80028f4 <__mulsi3>
 8002ea8:	8009883a 	mov	r4,r16
 8002eac:	11401d04 	addi	r5,r2,116
 8002eb0:	1023883a 	mov	r17,r2
 8002eb4:	8003e340 	call	8003e34 <_malloc_r>
 8002eb8:	1021883a 	mov	r16,r2
 8002ebc:	10000726 	beq	r2,zero,8002edc <__sfmoreglue+0x5c>
 8002ec0:	11000304 	addi	r4,r2,12
 8002ec4:	10000015 	stw	zero,0(r2)
 8002ec8:	14800115 	stw	r18,4(r2)
 8002ecc:	11000215 	stw	r4,8(r2)
 8002ed0:	89801a04 	addi	r6,r17,104
 8002ed4:	000b883a 	mov	r5,zero
 8002ed8:	80046400 	call	8004640 <memset>
 8002edc:	8005883a 	mov	r2,r16
 8002ee0:	dfc00317 	ldw	ra,12(sp)
 8002ee4:	dc800217 	ldw	r18,8(sp)
 8002ee8:	dc400117 	ldw	r17,4(sp)
 8002eec:	dc000017 	ldw	r16,0(sp)
 8002ef0:	dec00404 	addi	sp,sp,16
 8002ef4:	f800283a 	ret

08002ef8 <__sfp>:
 8002ef8:	defffb04 	addi	sp,sp,-20
 8002efc:	dc000015 	stw	r16,0(sp)
 8002f00:	040200b4 	movhi	r16,2050
 8002f04:	84377304 	addi	r16,r16,-8756
 8002f08:	dcc00315 	stw	r19,12(sp)
 8002f0c:	2027883a 	mov	r19,r4
 8002f10:	81000017 	ldw	r4,0(r16)
 8002f14:	dfc00415 	stw	ra,16(sp)
 8002f18:	dc800215 	stw	r18,8(sp)
 8002f1c:	20800e17 	ldw	r2,56(r4)
 8002f20:	dc400115 	stw	r17,4(sp)
 8002f24:	1000021e 	bne	r2,zero,8002f30 <__sfp+0x38>
 8002f28:	8002cdc0 	call	8002cdc <__sinit.part.1>
 8002f2c:	81000017 	ldw	r4,0(r16)
 8002f30:	2480b804 	addi	r18,r4,736
 8002f34:	047fffc4 	movi	r17,-1
 8002f38:	91000117 	ldw	r4,4(r18)
 8002f3c:	94000217 	ldw	r16,8(r18)
 8002f40:	213fffc4 	addi	r4,r4,-1
 8002f44:	20000a16 	blt	r4,zero,8002f70 <__sfp+0x78>
 8002f48:	8080030f 	ldh	r2,12(r16)
 8002f4c:	10000c26 	beq	r2,zero,8002f80 <__sfp+0x88>
 8002f50:	80c01d04 	addi	r3,r16,116
 8002f54:	00000206 	br	8002f60 <__sfp+0x68>
 8002f58:	18bfe60f 	ldh	r2,-104(r3)
 8002f5c:	10000826 	beq	r2,zero,8002f80 <__sfp+0x88>
 8002f60:	213fffc4 	addi	r4,r4,-1
 8002f64:	1c3ffd04 	addi	r16,r3,-12
 8002f68:	18c01a04 	addi	r3,r3,104
 8002f6c:	247ffa1e 	bne	r4,r17,8002f58 <__alt_data_end+0xfc002f58>
 8002f70:	90800017 	ldw	r2,0(r18)
 8002f74:	10001d26 	beq	r2,zero,8002fec <__sfp+0xf4>
 8002f78:	1025883a 	mov	r18,r2
 8002f7c:	003fee06 	br	8002f38 <__alt_data_end+0xfc002f38>
 8002f80:	00bfffc4 	movi	r2,-1
 8002f84:	8080038d 	sth	r2,14(r16)
 8002f88:	00800044 	movi	r2,1
 8002f8c:	8080030d 	sth	r2,12(r16)
 8002f90:	80001915 	stw	zero,100(r16)
 8002f94:	80000015 	stw	zero,0(r16)
 8002f98:	80000215 	stw	zero,8(r16)
 8002f9c:	80000115 	stw	zero,4(r16)
 8002fa0:	80000415 	stw	zero,16(r16)
 8002fa4:	80000515 	stw	zero,20(r16)
 8002fa8:	80000615 	stw	zero,24(r16)
 8002fac:	01800204 	movi	r6,8
 8002fb0:	000b883a 	mov	r5,zero
 8002fb4:	81001704 	addi	r4,r16,92
 8002fb8:	80046400 	call	8004640 <memset>
 8002fbc:	8005883a 	mov	r2,r16
 8002fc0:	80000c15 	stw	zero,48(r16)
 8002fc4:	80000d15 	stw	zero,52(r16)
 8002fc8:	80001115 	stw	zero,68(r16)
 8002fcc:	80001215 	stw	zero,72(r16)
 8002fd0:	dfc00417 	ldw	ra,16(sp)
 8002fd4:	dcc00317 	ldw	r19,12(sp)
 8002fd8:	dc800217 	ldw	r18,8(sp)
 8002fdc:	dc400117 	ldw	r17,4(sp)
 8002fe0:	dc000017 	ldw	r16,0(sp)
 8002fe4:	dec00504 	addi	sp,sp,20
 8002fe8:	f800283a 	ret
 8002fec:	01400104 	movi	r5,4
 8002ff0:	9809883a 	mov	r4,r19
 8002ff4:	8002e800 	call	8002e80 <__sfmoreglue>
 8002ff8:	90800015 	stw	r2,0(r18)
 8002ffc:	103fde1e 	bne	r2,zero,8002f78 <__alt_data_end+0xfc002f78>
 8003000:	00800304 	movi	r2,12
 8003004:	98800015 	stw	r2,0(r19)
 8003008:	0005883a 	mov	r2,zero
 800300c:	003ff006 	br	8002fd0 <__alt_data_end+0xfc002fd0>

08003010 <_cleanup>:
 8003010:	008200b4 	movhi	r2,2050
 8003014:	10b77304 	addi	r2,r2,-8756
 8003018:	11000017 	ldw	r4,0(r2)
 800301c:	01420034 	movhi	r5,2048
 8003020:	294a4704 	addi	r5,r5,10524
 8003024:	8003bb41 	jmpi	8003bb4 <_fwalk_reent>

08003028 <__sinit>:
 8003028:	20800e17 	ldw	r2,56(r4)
 800302c:	10000126 	beq	r2,zero,8003034 <__sinit+0xc>
 8003030:	f800283a 	ret
 8003034:	8002cdc1 	jmpi	8002cdc <__sinit.part.1>

08003038 <__sfp_lock_acquire>:
 8003038:	f800283a 	ret

0800303c <__sfp_lock_release>:
 800303c:	f800283a 	ret

08003040 <__sinit_lock_acquire>:
 8003040:	f800283a 	ret

08003044 <__sinit_lock_release>:
 8003044:	f800283a 	ret

08003048 <__fp_lock_all>:
 8003048:	008200b4 	movhi	r2,2050
 800304c:	10b77404 	addi	r2,r2,-8752
 8003050:	11000017 	ldw	r4,0(r2)
 8003054:	01420034 	movhi	r5,2048
 8003058:	294b9e04 	addi	r5,r5,11896
 800305c:	8003af01 	jmpi	8003af0 <_fwalk>

08003060 <__fp_unlock_all>:
 8003060:	008200b4 	movhi	r2,2050
 8003064:	10b77404 	addi	r2,r2,-8752
 8003068:	11000017 	ldw	r4,0(r2)
 800306c:	01420034 	movhi	r5,2048
 8003070:	294b3204 	addi	r5,r5,11464
 8003074:	8003af01 	jmpi	8003af0 <_fwalk>

08003078 <_fopen_r>:
 8003078:	defffa04 	addi	sp,sp,-24
 800307c:	3005883a 	mov	r2,r6
 8003080:	dcc00415 	stw	r19,16(sp)
 8003084:	d80d883a 	mov	r6,sp
 8003088:	2827883a 	mov	r19,r5
 800308c:	100b883a 	mov	r5,r2
 8003090:	dc800315 	stw	r18,12(sp)
 8003094:	dfc00515 	stw	ra,20(sp)
 8003098:	dc400215 	stw	r17,8(sp)
 800309c:	dc000115 	stw	r16,4(sp)
 80030a0:	2025883a 	mov	r18,r4
 80030a4:	800a6540 	call	800a654 <__sflags>
 80030a8:	10002726 	beq	r2,zero,8003148 <_fopen_r+0xd0>
 80030ac:	9009883a 	mov	r4,r18
 80030b0:	1023883a 	mov	r17,r2
 80030b4:	8002ef80 	call	8002ef8 <__sfp>
 80030b8:	1021883a 	mov	r16,r2
 80030bc:	10002226 	beq	r2,zero,8003148 <_fopen_r+0xd0>
 80030c0:	d9800017 	ldw	r6,0(sp)
 80030c4:	01c06d84 	movi	r7,438
 80030c8:	980b883a 	mov	r5,r19
 80030cc:	9009883a 	mov	r4,r18
 80030d0:	80047680 	call	8004768 <_open_r>
 80030d4:	10001916 	blt	r2,zero,800313c <_fopen_r+0xc4>
 80030d8:	8080038d 	sth	r2,14(r16)
 80030dc:	00820034 	movhi	r2,2048
 80030e0:	1092ee04 	addi	r2,r2,19384
 80030e4:	80800815 	stw	r2,32(r16)
 80030e8:	00820034 	movhi	r2,2048
 80030ec:	10930504 	addi	r2,r2,19476
 80030f0:	80800915 	stw	r2,36(r16)
 80030f4:	00820034 	movhi	r2,2048
 80030f8:	10932404 	addi	r2,r2,19600
 80030fc:	80800a15 	stw	r2,40(r16)
 8003100:	00820034 	movhi	r2,2048
 8003104:	10933b04 	addi	r2,r2,19692
 8003108:	8440030d 	sth	r17,12(r16)
 800310c:	84000715 	stw	r16,28(r16)
 8003110:	80800b15 	stw	r2,44(r16)
 8003114:	8c40400c 	andi	r17,r17,256
 8003118:	88000d1e 	bne	r17,zero,8003150 <_fopen_r+0xd8>
 800311c:	8005883a 	mov	r2,r16
 8003120:	dfc00517 	ldw	ra,20(sp)
 8003124:	dcc00417 	ldw	r19,16(sp)
 8003128:	dc800317 	ldw	r18,12(sp)
 800312c:	dc400217 	ldw	r17,8(sp)
 8003130:	dc000117 	ldw	r16,4(sp)
 8003134:	dec00604 	addi	sp,sp,24
 8003138:	f800283a 	ret
 800313c:	80030380 	call	8003038 <__sfp_lock_acquire>
 8003140:	8000030d 	sth	zero,12(r16)
 8003144:	800303c0 	call	800303c <__sfp_lock_release>
 8003148:	0005883a 	mov	r2,zero
 800314c:	003ff406 	br	8003120 <__alt_data_end+0xfc003120>
 8003150:	01c00084 	movi	r7,2
 8003154:	000d883a 	mov	r6,zero
 8003158:	800b883a 	mov	r5,r16
 800315c:	9009883a 	mov	r4,r18
 8003160:	80036140 	call	8003614 <_fseek_r>
 8003164:	8005883a 	mov	r2,r16
 8003168:	003fed06 	br	8003120 <__alt_data_end+0xfc003120>

0800316c <fopen>:
 800316c:	008200b4 	movhi	r2,2050
 8003170:	10b77404 	addi	r2,r2,-8752
 8003174:	280d883a 	mov	r6,r5
 8003178:	200b883a 	mov	r5,r4
 800317c:	11000017 	ldw	r4,0(r2)
 8003180:	80030781 	jmpi	8003078 <_fopen_r>

08003184 <_malloc_trim_r>:
 8003184:	defffb04 	addi	sp,sp,-20
 8003188:	dcc00315 	stw	r19,12(sp)
 800318c:	04c200b4 	movhi	r19,2050
 8003190:	dc800215 	stw	r18,8(sp)
 8003194:	dc400115 	stw	r17,4(sp)
 8003198:	dc000015 	stw	r16,0(sp)
 800319c:	dfc00415 	stw	ra,16(sp)
 80031a0:	2821883a 	mov	r16,r5
 80031a4:	9cf1ce04 	addi	r19,r19,-14536
 80031a8:	2025883a 	mov	r18,r4
 80031ac:	80195000 	call	8019500 <__malloc_lock>
 80031b0:	98800217 	ldw	r2,8(r19)
 80031b4:	14400117 	ldw	r17,4(r2)
 80031b8:	00bfff04 	movi	r2,-4
 80031bc:	88a2703a 	and	r17,r17,r2
 80031c0:	8c21c83a 	sub	r16,r17,r16
 80031c4:	8403fbc4 	addi	r16,r16,4079
 80031c8:	8020d33a 	srli	r16,r16,12
 80031cc:	0083ffc4 	movi	r2,4095
 80031d0:	843fffc4 	addi	r16,r16,-1
 80031d4:	8020933a 	slli	r16,r16,12
 80031d8:	1400060e 	bge	r2,r16,80031f4 <_malloc_trim_r+0x70>
 80031dc:	000b883a 	mov	r5,zero
 80031e0:	9009883a 	mov	r4,r18
 80031e4:	8004af80 	call	8004af8 <_sbrk_r>
 80031e8:	98c00217 	ldw	r3,8(r19)
 80031ec:	1c47883a 	add	r3,r3,r17
 80031f0:	10c00a26 	beq	r2,r3,800321c <_malloc_trim_r+0x98>
 80031f4:	9009883a 	mov	r4,r18
 80031f8:	80195240 	call	8019524 <__malloc_unlock>
 80031fc:	0005883a 	mov	r2,zero
 8003200:	dfc00417 	ldw	ra,16(sp)
 8003204:	dcc00317 	ldw	r19,12(sp)
 8003208:	dc800217 	ldw	r18,8(sp)
 800320c:	dc400117 	ldw	r17,4(sp)
 8003210:	dc000017 	ldw	r16,0(sp)
 8003214:	dec00504 	addi	sp,sp,20
 8003218:	f800283a 	ret
 800321c:	040bc83a 	sub	r5,zero,r16
 8003220:	9009883a 	mov	r4,r18
 8003224:	8004af80 	call	8004af8 <_sbrk_r>
 8003228:	00ffffc4 	movi	r3,-1
 800322c:	10c00d26 	beq	r2,r3,8003264 <_malloc_trim_r+0xe0>
 8003230:	00c200b4 	movhi	r3,2050
 8003234:	18fe7104 	addi	r3,r3,-1596
 8003238:	18800017 	ldw	r2,0(r3)
 800323c:	99000217 	ldw	r4,8(r19)
 8003240:	8c23c83a 	sub	r17,r17,r16
 8003244:	8c400054 	ori	r17,r17,1
 8003248:	1421c83a 	sub	r16,r2,r16
 800324c:	24400115 	stw	r17,4(r4)
 8003250:	9009883a 	mov	r4,r18
 8003254:	1c000015 	stw	r16,0(r3)
 8003258:	80195240 	call	8019524 <__malloc_unlock>
 800325c:	00800044 	movi	r2,1
 8003260:	003fe706 	br	8003200 <__alt_data_end+0xfc003200>
 8003264:	000b883a 	mov	r5,zero
 8003268:	9009883a 	mov	r4,r18
 800326c:	8004af80 	call	8004af8 <_sbrk_r>
 8003270:	99000217 	ldw	r4,8(r19)
 8003274:	014003c4 	movi	r5,15
 8003278:	1107c83a 	sub	r3,r2,r4
 800327c:	28ffdd0e 	bge	r5,r3,80031f4 <__alt_data_end+0xfc0031f4>
 8003280:	014200b4 	movhi	r5,2050
 8003284:	29777504 	addi	r5,r5,-8748
 8003288:	29400017 	ldw	r5,0(r5)
 800328c:	18c00054 	ori	r3,r3,1
 8003290:	20c00115 	stw	r3,4(r4)
 8003294:	00c200b4 	movhi	r3,2050
 8003298:	1145c83a 	sub	r2,r2,r5
 800329c:	18fe7104 	addi	r3,r3,-1596
 80032a0:	18800015 	stw	r2,0(r3)
 80032a4:	003fd306 	br	80031f4 <__alt_data_end+0xfc0031f4>

080032a8 <_free_r>:
 80032a8:	28004126 	beq	r5,zero,80033b0 <_free_r+0x108>
 80032ac:	defffd04 	addi	sp,sp,-12
 80032b0:	dc400115 	stw	r17,4(sp)
 80032b4:	dc000015 	stw	r16,0(sp)
 80032b8:	2023883a 	mov	r17,r4
 80032bc:	2821883a 	mov	r16,r5
 80032c0:	dfc00215 	stw	ra,8(sp)
 80032c4:	80195000 	call	8019500 <__malloc_lock>
 80032c8:	81ffff17 	ldw	r7,-4(r16)
 80032cc:	00bfff84 	movi	r2,-2
 80032d0:	010200b4 	movhi	r4,2050
 80032d4:	81bffe04 	addi	r6,r16,-8
 80032d8:	3884703a 	and	r2,r7,r2
 80032dc:	2131ce04 	addi	r4,r4,-14536
 80032e0:	308b883a 	add	r5,r6,r2
 80032e4:	2a400117 	ldw	r9,4(r5)
 80032e8:	22000217 	ldw	r8,8(r4)
 80032ec:	00ffff04 	movi	r3,-4
 80032f0:	48c6703a 	and	r3,r9,r3
 80032f4:	2a005726 	beq	r5,r8,8003454 <_free_r+0x1ac>
 80032f8:	28c00115 	stw	r3,4(r5)
 80032fc:	39c0004c 	andi	r7,r7,1
 8003300:	3800091e 	bne	r7,zero,8003328 <_free_r+0x80>
 8003304:	823ffe17 	ldw	r8,-8(r16)
 8003308:	22400204 	addi	r9,r4,8
 800330c:	320dc83a 	sub	r6,r6,r8
 8003310:	31c00217 	ldw	r7,8(r6)
 8003314:	1205883a 	add	r2,r2,r8
 8003318:	3a406526 	beq	r7,r9,80034b0 <_free_r+0x208>
 800331c:	32000317 	ldw	r8,12(r6)
 8003320:	3a000315 	stw	r8,12(r7)
 8003324:	41c00215 	stw	r7,8(r8)
 8003328:	28cf883a 	add	r7,r5,r3
 800332c:	39c00117 	ldw	r7,4(r7)
 8003330:	39c0004c 	andi	r7,r7,1
 8003334:	38003a26 	beq	r7,zero,8003420 <_free_r+0x178>
 8003338:	10c00054 	ori	r3,r2,1
 800333c:	30c00115 	stw	r3,4(r6)
 8003340:	3087883a 	add	r3,r6,r2
 8003344:	18800015 	stw	r2,0(r3)
 8003348:	00c07fc4 	movi	r3,511
 800334c:	18801936 	bltu	r3,r2,80033b4 <_free_r+0x10c>
 8003350:	1004d0fa 	srli	r2,r2,3
 8003354:	01c00044 	movi	r7,1
 8003358:	21400117 	ldw	r5,4(r4)
 800335c:	10c00044 	addi	r3,r2,1
 8003360:	18c7883a 	add	r3,r3,r3
 8003364:	1005d0ba 	srai	r2,r2,2
 8003368:	18c7883a 	add	r3,r3,r3
 800336c:	18c7883a 	add	r3,r3,r3
 8003370:	1907883a 	add	r3,r3,r4
 8003374:	3884983a 	sll	r2,r7,r2
 8003378:	19c00017 	ldw	r7,0(r3)
 800337c:	1a3ffe04 	addi	r8,r3,-8
 8003380:	1144b03a 	or	r2,r2,r5
 8003384:	32000315 	stw	r8,12(r6)
 8003388:	31c00215 	stw	r7,8(r6)
 800338c:	20800115 	stw	r2,4(r4)
 8003390:	19800015 	stw	r6,0(r3)
 8003394:	39800315 	stw	r6,12(r7)
 8003398:	8809883a 	mov	r4,r17
 800339c:	dfc00217 	ldw	ra,8(sp)
 80033a0:	dc400117 	ldw	r17,4(sp)
 80033a4:	dc000017 	ldw	r16,0(sp)
 80033a8:	dec00304 	addi	sp,sp,12
 80033ac:	80195241 	jmpi	8019524 <__malloc_unlock>
 80033b0:	f800283a 	ret
 80033b4:	100ad27a 	srli	r5,r2,9
 80033b8:	00c00104 	movi	r3,4
 80033bc:	19404a36 	bltu	r3,r5,80034e8 <_free_r+0x240>
 80033c0:	100ad1ba 	srli	r5,r2,6
 80033c4:	28c00e44 	addi	r3,r5,57
 80033c8:	18c7883a 	add	r3,r3,r3
 80033cc:	29400e04 	addi	r5,r5,56
 80033d0:	18c7883a 	add	r3,r3,r3
 80033d4:	18c7883a 	add	r3,r3,r3
 80033d8:	1909883a 	add	r4,r3,r4
 80033dc:	20c00017 	ldw	r3,0(r4)
 80033e0:	01c200b4 	movhi	r7,2050
 80033e4:	213ffe04 	addi	r4,r4,-8
 80033e8:	39f1ce04 	addi	r7,r7,-14536
 80033ec:	20c04426 	beq	r4,r3,8003500 <_free_r+0x258>
 80033f0:	01ffff04 	movi	r7,-4
 80033f4:	19400117 	ldw	r5,4(r3)
 80033f8:	29ca703a 	and	r5,r5,r7
 80033fc:	1140022e 	bgeu	r2,r5,8003408 <_free_r+0x160>
 8003400:	18c00217 	ldw	r3,8(r3)
 8003404:	20fffb1e 	bne	r4,r3,80033f4 <__alt_data_end+0xfc0033f4>
 8003408:	19000317 	ldw	r4,12(r3)
 800340c:	31000315 	stw	r4,12(r6)
 8003410:	30c00215 	stw	r3,8(r6)
 8003414:	21800215 	stw	r6,8(r4)
 8003418:	19800315 	stw	r6,12(r3)
 800341c:	003fde06 	br	8003398 <__alt_data_end+0xfc003398>
 8003420:	29c00217 	ldw	r7,8(r5)
 8003424:	10c5883a 	add	r2,r2,r3
 8003428:	00c200b4 	movhi	r3,2050
 800342c:	18f1d004 	addi	r3,r3,-14528
 8003430:	38c03b26 	beq	r7,r3,8003520 <_free_r+0x278>
 8003434:	2a000317 	ldw	r8,12(r5)
 8003438:	11400054 	ori	r5,r2,1
 800343c:	3087883a 	add	r3,r6,r2
 8003440:	3a000315 	stw	r8,12(r7)
 8003444:	41c00215 	stw	r7,8(r8)
 8003448:	31400115 	stw	r5,4(r6)
 800344c:	18800015 	stw	r2,0(r3)
 8003450:	003fbd06 	br	8003348 <__alt_data_end+0xfc003348>
 8003454:	39c0004c 	andi	r7,r7,1
 8003458:	10c5883a 	add	r2,r2,r3
 800345c:	3800071e 	bne	r7,zero,800347c <_free_r+0x1d4>
 8003460:	81fffe17 	ldw	r7,-8(r16)
 8003464:	31cdc83a 	sub	r6,r6,r7
 8003468:	30c00317 	ldw	r3,12(r6)
 800346c:	31400217 	ldw	r5,8(r6)
 8003470:	11c5883a 	add	r2,r2,r7
 8003474:	28c00315 	stw	r3,12(r5)
 8003478:	19400215 	stw	r5,8(r3)
 800347c:	10c00054 	ori	r3,r2,1
 8003480:	30c00115 	stw	r3,4(r6)
 8003484:	00c200b4 	movhi	r3,2050
 8003488:	18f77604 	addi	r3,r3,-8744
 800348c:	18c00017 	ldw	r3,0(r3)
 8003490:	21800215 	stw	r6,8(r4)
 8003494:	10ffc036 	bltu	r2,r3,8003398 <__alt_data_end+0xfc003398>
 8003498:	008200b4 	movhi	r2,2050
 800349c:	10be5c04 	addi	r2,r2,-1680
 80034a0:	11400017 	ldw	r5,0(r2)
 80034a4:	8809883a 	mov	r4,r17
 80034a8:	80031840 	call	8003184 <_malloc_trim_r>
 80034ac:	003fba06 	br	8003398 <__alt_data_end+0xfc003398>
 80034b0:	28c9883a 	add	r4,r5,r3
 80034b4:	21000117 	ldw	r4,4(r4)
 80034b8:	2100004c 	andi	r4,r4,1
 80034bc:	2000391e 	bne	r4,zero,80035a4 <_free_r+0x2fc>
 80034c0:	29c00217 	ldw	r7,8(r5)
 80034c4:	29000317 	ldw	r4,12(r5)
 80034c8:	1885883a 	add	r2,r3,r2
 80034cc:	10c00054 	ori	r3,r2,1
 80034d0:	39000315 	stw	r4,12(r7)
 80034d4:	21c00215 	stw	r7,8(r4)
 80034d8:	30c00115 	stw	r3,4(r6)
 80034dc:	308d883a 	add	r6,r6,r2
 80034e0:	30800015 	stw	r2,0(r6)
 80034e4:	003fac06 	br	8003398 <__alt_data_end+0xfc003398>
 80034e8:	00c00504 	movi	r3,20
 80034ec:	19401536 	bltu	r3,r5,8003544 <_free_r+0x29c>
 80034f0:	28c01704 	addi	r3,r5,92
 80034f4:	18c7883a 	add	r3,r3,r3
 80034f8:	294016c4 	addi	r5,r5,91
 80034fc:	003fb406 	br	80033d0 <__alt_data_end+0xfc0033d0>
 8003500:	280bd0ba 	srai	r5,r5,2
 8003504:	00c00044 	movi	r3,1
 8003508:	38800117 	ldw	r2,4(r7)
 800350c:	194a983a 	sll	r5,r3,r5
 8003510:	2007883a 	mov	r3,r4
 8003514:	2884b03a 	or	r2,r5,r2
 8003518:	38800115 	stw	r2,4(r7)
 800351c:	003fbb06 	br	800340c <__alt_data_end+0xfc00340c>
 8003520:	21800515 	stw	r6,20(r4)
 8003524:	21800415 	stw	r6,16(r4)
 8003528:	10c00054 	ori	r3,r2,1
 800352c:	31c00315 	stw	r7,12(r6)
 8003530:	31c00215 	stw	r7,8(r6)
 8003534:	30c00115 	stw	r3,4(r6)
 8003538:	308d883a 	add	r6,r6,r2
 800353c:	30800015 	stw	r2,0(r6)
 8003540:	003f9506 	br	8003398 <__alt_data_end+0xfc003398>
 8003544:	00c01504 	movi	r3,84
 8003548:	19400536 	bltu	r3,r5,8003560 <_free_r+0x2b8>
 800354c:	100ad33a 	srli	r5,r2,12
 8003550:	28c01bc4 	addi	r3,r5,111
 8003554:	18c7883a 	add	r3,r3,r3
 8003558:	29401b84 	addi	r5,r5,110
 800355c:	003f9c06 	br	80033d0 <__alt_data_end+0xfc0033d0>
 8003560:	00c05504 	movi	r3,340
 8003564:	19400536 	bltu	r3,r5,800357c <_free_r+0x2d4>
 8003568:	100ad3fa 	srli	r5,r2,15
 800356c:	28c01e04 	addi	r3,r5,120
 8003570:	18c7883a 	add	r3,r3,r3
 8003574:	29401dc4 	addi	r5,r5,119
 8003578:	003f9506 	br	80033d0 <__alt_data_end+0xfc0033d0>
 800357c:	00c15504 	movi	r3,1364
 8003580:	19400536 	bltu	r3,r5,8003598 <_free_r+0x2f0>
 8003584:	100ad4ba 	srli	r5,r2,18
 8003588:	28c01f44 	addi	r3,r5,125
 800358c:	18c7883a 	add	r3,r3,r3
 8003590:	29401f04 	addi	r5,r5,124
 8003594:	003f8e06 	br	80033d0 <__alt_data_end+0xfc0033d0>
 8003598:	00c03f84 	movi	r3,254
 800359c:	01401f84 	movi	r5,126
 80035a0:	003f8b06 	br	80033d0 <__alt_data_end+0xfc0033d0>
 80035a4:	10c00054 	ori	r3,r2,1
 80035a8:	30c00115 	stw	r3,4(r6)
 80035ac:	308d883a 	add	r6,r6,r2
 80035b0:	30800015 	stw	r2,0(r6)
 80035b4:	003f7806 	br	8003398 <__alt_data_end+0xfc003398>

080035b8 <fscanf>:
 80035b8:	defffd04 	addi	sp,sp,-12
 80035bc:	2005883a 	mov	r2,r4
 80035c0:	dfc00015 	stw	ra,0(sp)
 80035c4:	d9800115 	stw	r6,4(sp)
 80035c8:	d9c00215 	stw	r7,8(sp)
 80035cc:	00c200b4 	movhi	r3,2050
 80035d0:	18f77404 	addi	r3,r3,-8752
 80035d4:	19000017 	ldw	r4,0(r3)
 80035d8:	280d883a 	mov	r6,r5
 80035dc:	d9c00104 	addi	r7,sp,4
 80035e0:	100b883a 	mov	r5,r2
 80035e4:	8008b500 	call	8008b50 <_vfscanf_r>
 80035e8:	dfc00017 	ldw	ra,0(sp)
 80035ec:	dec00304 	addi	sp,sp,12
 80035f0:	f800283a 	ret

080035f4 <_fscanf_r>:
 80035f4:	defffe04 	addi	sp,sp,-8
 80035f8:	dfc00015 	stw	ra,0(sp)
 80035fc:	d9c00115 	stw	r7,4(sp)
 8003600:	d9c00104 	addi	r7,sp,4
 8003604:	8008b500 	call	8008b50 <_vfscanf_r>
 8003608:	dfc00017 	ldw	ra,0(sp)
 800360c:	dec00204 	addi	sp,sp,8
 8003610:	f800283a 	ret

08003614 <_fseek_r>:
 8003614:	80036341 	jmpi	8003634 <_fseeko_r>

08003618 <fseek>:
 8003618:	008200b4 	movhi	r2,2050
 800361c:	10b77404 	addi	r2,r2,-8752
 8003620:	300f883a 	mov	r7,r6
 8003624:	280d883a 	mov	r6,r5
 8003628:	200b883a 	mov	r5,r4
 800362c:	11000017 	ldw	r4,0(r2)
 8003630:	80036341 	jmpi	8003634 <_fseeko_r>

08003634 <_fseeko_r>:
 8003634:	deffe804 	addi	sp,sp,-96
 8003638:	dd401415 	stw	r21,80(sp)
 800363c:	dc801115 	stw	r18,68(sp)
 8003640:	dc401015 	stw	r17,64(sp)
 8003644:	dc000f15 	stw	r16,60(sp)
 8003648:	dfc01715 	stw	ra,92(sp)
 800364c:	ddc01615 	stw	r23,88(sp)
 8003650:	dd801515 	stw	r22,84(sp)
 8003654:	dd001315 	stw	r20,76(sp)
 8003658:	dcc01215 	stw	r19,72(sp)
 800365c:	2023883a 	mov	r17,r4
 8003660:	2821883a 	mov	r16,r5
 8003664:	302b883a 	mov	r21,r6
 8003668:	3825883a 	mov	r18,r7
 800366c:	20000226 	beq	r4,zero,8003678 <_fseeko_r+0x44>
 8003670:	20800e17 	ldw	r2,56(r4)
 8003674:	10005a26 	beq	r2,zero,80037e0 <_fseeko_r+0x1ac>
 8003678:	8080030b 	ldhu	r2,12(r16)
 800367c:	00c04204 	movi	r3,264
 8003680:	1080420c 	andi	r2,r2,264
 8003684:	10c05b26 	beq	r2,r3,80037f4 <_fseeko_r+0x1c0>
 8003688:	85000a17 	ldw	r20,40(r16)
 800368c:	a000f626 	beq	r20,zero,8003a68 <_fseeko_r+0x434>
 8003690:	00800044 	movi	r2,1
 8003694:	90803e26 	beq	r18,r2,8003790 <_fseeko_r+0x15c>
 8003698:	00800084 	movi	r2,2
 800369c:	90801026 	beq	r18,r2,80036e0 <_fseeko_r+0xac>
 80036a0:	90000f26 	beq	r18,zero,80036e0 <_fseeko_r+0xac>
 80036a4:	00800584 	movi	r2,22
 80036a8:	88800015 	stw	r2,0(r17)
 80036ac:	04ffffc4 	movi	r19,-1
 80036b0:	9805883a 	mov	r2,r19
 80036b4:	dfc01717 	ldw	ra,92(sp)
 80036b8:	ddc01617 	ldw	r23,88(sp)
 80036bc:	dd801517 	ldw	r22,84(sp)
 80036c0:	dd401417 	ldw	r21,80(sp)
 80036c4:	dd001317 	ldw	r20,76(sp)
 80036c8:	dcc01217 	ldw	r19,72(sp)
 80036cc:	dc801117 	ldw	r18,68(sp)
 80036d0:	dc401017 	ldw	r17,64(sp)
 80036d4:	dc000f17 	ldw	r16,60(sp)
 80036d8:	dec01804 	addi	sp,sp,96
 80036dc:	f800283a 	ret
 80036e0:	80800417 	ldw	r2,16(r16)
 80036e4:	002f883a 	mov	r23,zero
 80036e8:	0027883a 	mov	r19,zero
 80036ec:	1000cb26 	beq	r2,zero,8003a1c <_fseeko_r+0x3e8>
 80036f0:	8080030b 	ldhu	r2,12(r16)
 80036f4:	10c2068c 	andi	r3,r2,2074
 80036f8:	1800071e 	bne	r3,zero,8003718 <_fseeko_r+0xe4>
 80036fc:	10c1000c 	andi	r3,r2,1024
 8003700:	1800451e 	bne	r3,zero,8003818 <_fseeko_r+0x1e4>
 8003704:	00c20034 	movhi	r3,2048
 8003708:	18d32404 	addi	r3,r3,19600
 800370c:	a0c0b726 	beq	r20,r3,80039ec <_fseeko_r+0x3b8>
 8003710:	10820014 	ori	r2,r2,2048
 8003714:	8080030d 	sth	r2,12(r16)
 8003718:	800b883a 	mov	r5,r16
 800371c:	8809883a 	mov	r4,r17
 8003720:	8002c3c0 	call	8002c3c <_fflush_r>
 8003724:	1027883a 	mov	r19,r2
 8003728:	103fe01e 	bne	r2,zero,80036ac <__alt_data_end+0xfc0036ac>
 800372c:	81400717 	ldw	r5,28(r16)
 8003730:	900f883a 	mov	r7,r18
 8003734:	a80d883a 	mov	r6,r21
 8003738:	8809883a 	mov	r4,r17
 800373c:	a03ee83a 	callr	r20
 8003740:	00ffffc4 	movi	r3,-1
 8003744:	10ffd926 	beq	r2,r3,80036ac <__alt_data_end+0xfc0036ac>
 8003748:	81400c17 	ldw	r5,48(r16)
 800374c:	28000526 	beq	r5,zero,8003764 <_fseeko_r+0x130>
 8003750:	80801004 	addi	r2,r16,64
 8003754:	28800226 	beq	r5,r2,8003760 <_fseeko_r+0x12c>
 8003758:	8809883a 	mov	r4,r17
 800375c:	80032a80 	call	80032a8 <_free_r>
 8003760:	80000c15 	stw	zero,48(r16)
 8003764:	8080030b 	ldhu	r2,12(r16)
 8003768:	80c00417 	ldw	r3,16(r16)
 800376c:	80000115 	stw	zero,4(r16)
 8003770:	10bdf7cc 	andi	r2,r2,63455
 8003774:	80c00015 	stw	r3,0(r16)
 8003778:	8080030d 	sth	r2,12(r16)
 800377c:	01800204 	movi	r6,8
 8003780:	000b883a 	mov	r5,zero
 8003784:	81001704 	addi	r4,r16,92
 8003788:	80046400 	call	8004640 <memset>
 800378c:	003fc806 	br	80036b0 <__alt_data_end+0xfc0036b0>
 8003790:	800b883a 	mov	r5,r16
 8003794:	8809883a 	mov	r4,r17
 8003798:	8002c3c0 	call	8002c3c <_fflush_r>
 800379c:	8080030b 	ldhu	r2,12(r16)
 80037a0:	10c4000c 	andi	r3,r2,4096
 80037a4:	18008726 	beq	r3,zero,80039c4 <_fseeko_r+0x390>
 80037a8:	84c01417 	ldw	r19,80(r16)
 80037ac:	10c0010c 	andi	r3,r2,4
 80037b0:	1800431e 	bne	r3,zero,80038c0 <_fseeko_r+0x28c>
 80037b4:	1080020c 	andi	r2,r2,8
 80037b8:	10008026 	beq	r2,zero,80039bc <_fseeko_r+0x388>
 80037bc:	80c00017 	ldw	r3,0(r16)
 80037c0:	80800417 	ldw	r2,16(r16)
 80037c4:	18000226 	beq	r3,zero,80037d0 <_fseeko_r+0x19c>
 80037c8:	1887c83a 	sub	r3,r3,r2
 80037cc:	98e7883a 	add	r19,r19,r3
 80037d0:	aceb883a 	add	r21,r21,r19
 80037d4:	05c00044 	movi	r23,1
 80037d8:	0025883a 	mov	r18,zero
 80037dc:	003fc306 	br	80036ec <__alt_data_end+0xfc0036ec>
 80037e0:	80030280 	call	8003028 <__sinit>
 80037e4:	8080030b 	ldhu	r2,12(r16)
 80037e8:	00c04204 	movi	r3,264
 80037ec:	1080420c 	andi	r2,r2,264
 80037f0:	10ffa51e 	bne	r2,r3,8003688 <__alt_data_end+0xfc003688>
 80037f4:	800b883a 	mov	r5,r16
 80037f8:	8809883a 	mov	r4,r17
 80037fc:	8002c3c0 	call	8002c3c <_fflush_r>
 8003800:	003fa106 	br	8003688 <__alt_data_end+0xfc003688>
 8003804:	8080030b 	ldhu	r2,12(r16)
 8003808:	00c10004 	movi	r3,1024
 800380c:	80c01315 	stw	r3,76(r16)
 8003810:	10c4b03a 	or	r2,r2,r3
 8003814:	8080030d 	sth	r2,12(r16)
 8003818:	9000311e 	bne	r18,zero,80038e0 <_fseeko_r+0x2ac>
 800381c:	a82d883a 	mov	r22,r21
 8003820:	b800371e 	bne	r23,zero,8003900 <_fseeko_r+0x2cc>
 8003824:	8080030b 	ldhu	r2,12(r16)
 8003828:	1084000c 	andi	r2,r2,4096
 800382c:	10007f26 	beq	r2,zero,8003a2c <_fseeko_r+0x3f8>
 8003830:	80801417 	ldw	r2,80(r16)
 8003834:	81800117 	ldw	r6,4(r16)
 8003838:	81400c17 	ldw	r5,48(r16)
 800383c:	11a7c83a 	sub	r19,r2,r6
 8003840:	28008226 	beq	r5,zero,8003a4c <_fseeko_r+0x418>
 8003844:	81c00f17 	ldw	r7,60(r16)
 8003848:	99e7c83a 	sub	r19,r19,r7
 800384c:	81000e17 	ldw	r4,56(r16)
 8003850:	80800417 	ldw	r2,16(r16)
 8003854:	99a7883a 	add	r19,r19,r6
 8003858:	2087c83a 	sub	r3,r4,r2
 800385c:	98e7c83a 	sub	r19,r19,r3
 8003860:	38c7883a 	add	r3,r7,r3
 8003864:	b4c02b16 	blt	r22,r19,8003914 <_fseeko_r+0x2e0>
 8003868:	98c9883a 	add	r4,r19,r3
 800386c:	b100292e 	bgeu	r22,r4,8003914 <_fseeko_r+0x2e0>
 8003870:	b4e7c83a 	sub	r19,r22,r19
 8003874:	14c5883a 	add	r2,r2,r19
 8003878:	1ce7c83a 	sub	r19,r3,r19
 800387c:	80800015 	stw	r2,0(r16)
 8003880:	84c00115 	stw	r19,4(r16)
 8003884:	28000526 	beq	r5,zero,800389c <_fseeko_r+0x268>
 8003888:	80801004 	addi	r2,r16,64
 800388c:	28800226 	beq	r5,r2,8003898 <_fseeko_r+0x264>
 8003890:	8809883a 	mov	r4,r17
 8003894:	80032a80 	call	80032a8 <_free_r>
 8003898:	80000c15 	stw	zero,48(r16)
 800389c:	8080030b 	ldhu	r2,12(r16)
 80038a0:	01800204 	movi	r6,8
 80038a4:	000b883a 	mov	r5,zero
 80038a8:	10bff7cc 	andi	r2,r2,65503
 80038ac:	8080030d 	sth	r2,12(r16)
 80038b0:	81001704 	addi	r4,r16,92
 80038b4:	80046400 	call	8004640 <memset>
 80038b8:	0027883a 	mov	r19,zero
 80038bc:	003f7c06 	br	80036b0 <__alt_data_end+0xfc0036b0>
 80038c0:	80c00117 	ldw	r3,4(r16)
 80038c4:	80800c17 	ldw	r2,48(r16)
 80038c8:	98e7c83a 	sub	r19,r19,r3
 80038cc:	10003b26 	beq	r2,zero,80039bc <_fseeko_r+0x388>
 80038d0:	80c00f17 	ldw	r3,60(r16)
 80038d4:	80800417 	ldw	r2,16(r16)
 80038d8:	98e7c83a 	sub	r19,r19,r3
 80038dc:	003fbc06 	br	80037d0 <__alt_data_end+0xfc0037d0>
 80038e0:	8140038f 	ldh	r5,14(r16)
 80038e4:	d80d883a 	mov	r6,sp
 80038e8:	8809883a 	mov	r4,r17
 80038ec:	8003a940 	call	8003a94 <_fstat_r>
 80038f0:	103f891e 	bne	r2,zero,8003718 <__alt_data_end+0xfc003718>
 80038f4:	dd800417 	ldw	r22,16(sp)
 80038f8:	adad883a 	add	r22,r21,r22
 80038fc:	b83fc926 	beq	r23,zero,8003824 <__alt_data_end+0xfc003824>
 8003900:	81400c17 	ldw	r5,48(r16)
 8003904:	81800117 	ldw	r6,4(r16)
 8003908:	28005026 	beq	r5,zero,8003a4c <_fseeko_r+0x418>
 800390c:	81c00f17 	ldw	r7,60(r16)
 8003910:	003fce06 	br	800384c <__alt_data_end+0xfc00384c>
 8003914:	84c01317 	ldw	r19,76(r16)
 8003918:	81400717 	ldw	r5,28(r16)
 800391c:	000f883a 	mov	r7,zero
 8003920:	04e7c83a 	sub	r19,zero,r19
 8003924:	9da6703a 	and	r19,r19,r22
 8003928:	980d883a 	mov	r6,r19
 800392c:	8809883a 	mov	r4,r17
 8003930:	a03ee83a 	callr	r20
 8003934:	00ffffc4 	movi	r3,-1
 8003938:	10ff7726 	beq	r2,r3,8003718 <__alt_data_end+0xfc003718>
 800393c:	80800417 	ldw	r2,16(r16)
 8003940:	81400c17 	ldw	r5,48(r16)
 8003944:	80000115 	stw	zero,4(r16)
 8003948:	80800015 	stw	r2,0(r16)
 800394c:	28000526 	beq	r5,zero,8003964 <_fseeko_r+0x330>
 8003950:	80801004 	addi	r2,r16,64
 8003954:	28800226 	beq	r5,r2,8003960 <_fseeko_r+0x32c>
 8003958:	8809883a 	mov	r4,r17
 800395c:	80032a80 	call	80032a8 <_free_r>
 8003960:	80000c15 	stw	zero,48(r16)
 8003964:	8080030b 	ldhu	r2,12(r16)
 8003968:	b4e7c83a 	sub	r19,r22,r19
 800396c:	10bff7cc 	andi	r2,r2,65503
 8003970:	8080030d 	sth	r2,12(r16)
 8003974:	98000b26 	beq	r19,zero,80039a4 <_fseeko_r+0x370>
 8003978:	800b883a 	mov	r5,r16
 800397c:	8809883a 	mov	r4,r17
 8003980:	80049240 	call	8004924 <__srefill_r>
 8003984:	103f641e 	bne	r2,zero,8003718 <__alt_data_end+0xfc003718>
 8003988:	80800117 	ldw	r2,4(r16)
 800398c:	14ff6236 	bltu	r2,r19,8003718 <__alt_data_end+0xfc003718>
 8003990:	80c00017 	ldw	r3,0(r16)
 8003994:	14c5c83a 	sub	r2,r2,r19
 8003998:	80800115 	stw	r2,4(r16)
 800399c:	1ce7883a 	add	r19,r3,r19
 80039a0:	84c00015 	stw	r19,0(r16)
 80039a4:	01800204 	movi	r6,8
 80039a8:	000b883a 	mov	r5,zero
 80039ac:	81001704 	addi	r4,r16,92
 80039b0:	80046400 	call	8004640 <memset>
 80039b4:	0027883a 	mov	r19,zero
 80039b8:	003f3d06 	br	80036b0 <__alt_data_end+0xfc0036b0>
 80039bc:	80800417 	ldw	r2,16(r16)
 80039c0:	003f8306 	br	80037d0 <__alt_data_end+0xfc0037d0>
 80039c4:	81400717 	ldw	r5,28(r16)
 80039c8:	900f883a 	mov	r7,r18
 80039cc:	000d883a 	mov	r6,zero
 80039d0:	8809883a 	mov	r4,r17
 80039d4:	a03ee83a 	callr	r20
 80039d8:	1027883a 	mov	r19,r2
 80039dc:	00bfffc4 	movi	r2,-1
 80039e0:	98bf3226 	beq	r19,r2,80036ac <__alt_data_end+0xfc0036ac>
 80039e4:	8080030b 	ldhu	r2,12(r16)
 80039e8:	003f7006 	br	80037ac <__alt_data_end+0xfc0037ac>
 80039ec:	8140038f 	ldh	r5,14(r16)
 80039f0:	283f4716 	blt	r5,zero,8003710 <__alt_data_end+0xfc003710>
 80039f4:	d80d883a 	mov	r6,sp
 80039f8:	8809883a 	mov	r4,r17
 80039fc:	8003a940 	call	8003a94 <_fstat_r>
 8003a00:	1000041e 	bne	r2,zero,8003a14 <_fseeko_r+0x3e0>
 8003a04:	d8800117 	ldw	r2,4(sp)
 8003a08:	00e00014 	movui	r3,32768
 8003a0c:	10bc000c 	andi	r2,r2,61440
 8003a10:	10ff7c26 	beq	r2,r3,8003804 <__alt_data_end+0xfc003804>
 8003a14:	8080030b 	ldhu	r2,12(r16)
 8003a18:	003f3d06 	br	8003710 <__alt_data_end+0xfc003710>
 8003a1c:	800b883a 	mov	r5,r16
 8003a20:	8809883a 	mov	r4,r17
 8003a24:	8003c780 	call	8003c78 <__smakebuf_r>
 8003a28:	003f3106 	br	80036f0 <__alt_data_end+0xfc0036f0>
 8003a2c:	81400717 	ldw	r5,28(r16)
 8003a30:	01c00044 	movi	r7,1
 8003a34:	000d883a 	mov	r6,zero
 8003a38:	8809883a 	mov	r4,r17
 8003a3c:	a03ee83a 	callr	r20
 8003a40:	00ffffc4 	movi	r3,-1
 8003a44:	10ff7b1e 	bne	r2,r3,8003834 <__alt_data_end+0xfc003834>
 8003a48:	003f3306 	br	8003718 <__alt_data_end+0xfc003718>
 8003a4c:	80c00017 	ldw	r3,0(r16)
 8003a50:	80800417 	ldw	r2,16(r16)
 8003a54:	000b883a 	mov	r5,zero
 8003a58:	1887c83a 	sub	r3,r3,r2
 8003a5c:	98e7c83a 	sub	r19,r19,r3
 8003a60:	30c7883a 	add	r3,r6,r3
 8003a64:	003f7f06 	br	8003864 <__alt_data_end+0xfc003864>
 8003a68:	00800744 	movi	r2,29
 8003a6c:	88800015 	stw	r2,0(r17)
 8003a70:	04ffffc4 	movi	r19,-1
 8003a74:	003f0e06 	br	80036b0 <__alt_data_end+0xfc0036b0>

08003a78 <fseeko>:
 8003a78:	008200b4 	movhi	r2,2050
 8003a7c:	10b77404 	addi	r2,r2,-8752
 8003a80:	300f883a 	mov	r7,r6
 8003a84:	280d883a 	mov	r6,r5
 8003a88:	200b883a 	mov	r5,r4
 8003a8c:	11000017 	ldw	r4,0(r2)
 8003a90:	80036341 	jmpi	8003634 <_fseeko_r>

08003a94 <_fstat_r>:
 8003a94:	defffd04 	addi	sp,sp,-12
 8003a98:	2805883a 	mov	r2,r5
 8003a9c:	dc000015 	stw	r16,0(sp)
 8003aa0:	040200b4 	movhi	r16,2050
 8003aa4:	dc400115 	stw	r17,4(sp)
 8003aa8:	843e5904 	addi	r16,r16,-1692
 8003aac:	2023883a 	mov	r17,r4
 8003ab0:	300b883a 	mov	r5,r6
 8003ab4:	1009883a 	mov	r4,r2
 8003ab8:	dfc00215 	stw	ra,8(sp)
 8003abc:	80000015 	stw	zero,0(r16)
 8003ac0:	80190e00 	call	80190e0 <fstat>
 8003ac4:	00ffffc4 	movi	r3,-1
 8003ac8:	10c00526 	beq	r2,r3,8003ae0 <_fstat_r+0x4c>
 8003acc:	dfc00217 	ldw	ra,8(sp)
 8003ad0:	dc400117 	ldw	r17,4(sp)
 8003ad4:	dc000017 	ldw	r16,0(sp)
 8003ad8:	dec00304 	addi	sp,sp,12
 8003adc:	f800283a 	ret
 8003ae0:	80c00017 	ldw	r3,0(r16)
 8003ae4:	183ff926 	beq	r3,zero,8003acc <__alt_data_end+0xfc003acc>
 8003ae8:	88c00015 	stw	r3,0(r17)
 8003aec:	003ff706 	br	8003acc <__alt_data_end+0xfc003acc>

08003af0 <_fwalk>:
 8003af0:	defff704 	addi	sp,sp,-36
 8003af4:	dd000415 	stw	r20,16(sp)
 8003af8:	dfc00815 	stw	ra,32(sp)
 8003afc:	ddc00715 	stw	r23,28(sp)
 8003b00:	dd800615 	stw	r22,24(sp)
 8003b04:	dd400515 	stw	r21,20(sp)
 8003b08:	dcc00315 	stw	r19,12(sp)
 8003b0c:	dc800215 	stw	r18,8(sp)
 8003b10:	dc400115 	stw	r17,4(sp)
 8003b14:	dc000015 	stw	r16,0(sp)
 8003b18:	2500b804 	addi	r20,r4,736
 8003b1c:	a0002326 	beq	r20,zero,8003bac <_fwalk+0xbc>
 8003b20:	282b883a 	mov	r21,r5
 8003b24:	002f883a 	mov	r23,zero
 8003b28:	05800044 	movi	r22,1
 8003b2c:	04ffffc4 	movi	r19,-1
 8003b30:	a4400117 	ldw	r17,4(r20)
 8003b34:	a4800217 	ldw	r18,8(r20)
 8003b38:	8c7fffc4 	addi	r17,r17,-1
 8003b3c:	88000d16 	blt	r17,zero,8003b74 <_fwalk+0x84>
 8003b40:	94000304 	addi	r16,r18,12
 8003b44:	94800384 	addi	r18,r18,14
 8003b48:	8080000b 	ldhu	r2,0(r16)
 8003b4c:	8c7fffc4 	addi	r17,r17,-1
 8003b50:	813ffd04 	addi	r4,r16,-12
 8003b54:	b080042e 	bgeu	r22,r2,8003b68 <_fwalk+0x78>
 8003b58:	9080000f 	ldh	r2,0(r18)
 8003b5c:	14c00226 	beq	r2,r19,8003b68 <_fwalk+0x78>
 8003b60:	a83ee83a 	callr	r21
 8003b64:	b8aeb03a 	or	r23,r23,r2
 8003b68:	84001a04 	addi	r16,r16,104
 8003b6c:	94801a04 	addi	r18,r18,104
 8003b70:	8cfff51e 	bne	r17,r19,8003b48 <__alt_data_end+0xfc003b48>
 8003b74:	a5000017 	ldw	r20,0(r20)
 8003b78:	a03fed1e 	bne	r20,zero,8003b30 <__alt_data_end+0xfc003b30>
 8003b7c:	b805883a 	mov	r2,r23
 8003b80:	dfc00817 	ldw	ra,32(sp)
 8003b84:	ddc00717 	ldw	r23,28(sp)
 8003b88:	dd800617 	ldw	r22,24(sp)
 8003b8c:	dd400517 	ldw	r21,20(sp)
 8003b90:	dd000417 	ldw	r20,16(sp)
 8003b94:	dcc00317 	ldw	r19,12(sp)
 8003b98:	dc800217 	ldw	r18,8(sp)
 8003b9c:	dc400117 	ldw	r17,4(sp)
 8003ba0:	dc000017 	ldw	r16,0(sp)
 8003ba4:	dec00904 	addi	sp,sp,36
 8003ba8:	f800283a 	ret
 8003bac:	002f883a 	mov	r23,zero
 8003bb0:	003ff206 	br	8003b7c <__alt_data_end+0xfc003b7c>

08003bb4 <_fwalk_reent>:
 8003bb4:	defff704 	addi	sp,sp,-36
 8003bb8:	dd000415 	stw	r20,16(sp)
 8003bbc:	dfc00815 	stw	ra,32(sp)
 8003bc0:	ddc00715 	stw	r23,28(sp)
 8003bc4:	dd800615 	stw	r22,24(sp)
 8003bc8:	dd400515 	stw	r21,20(sp)
 8003bcc:	dcc00315 	stw	r19,12(sp)
 8003bd0:	dc800215 	stw	r18,8(sp)
 8003bd4:	dc400115 	stw	r17,4(sp)
 8003bd8:	dc000015 	stw	r16,0(sp)
 8003bdc:	2500b804 	addi	r20,r4,736
 8003be0:	a0002326 	beq	r20,zero,8003c70 <_fwalk_reent+0xbc>
 8003be4:	282b883a 	mov	r21,r5
 8003be8:	2027883a 	mov	r19,r4
 8003bec:	002f883a 	mov	r23,zero
 8003bf0:	05800044 	movi	r22,1
 8003bf4:	04bfffc4 	movi	r18,-1
 8003bf8:	a4400117 	ldw	r17,4(r20)
 8003bfc:	a4000217 	ldw	r16,8(r20)
 8003c00:	8c7fffc4 	addi	r17,r17,-1
 8003c04:	88000c16 	blt	r17,zero,8003c38 <_fwalk_reent+0x84>
 8003c08:	84000304 	addi	r16,r16,12
 8003c0c:	8080000b 	ldhu	r2,0(r16)
 8003c10:	8c7fffc4 	addi	r17,r17,-1
 8003c14:	817ffd04 	addi	r5,r16,-12
 8003c18:	b080052e 	bgeu	r22,r2,8003c30 <_fwalk_reent+0x7c>
 8003c1c:	8080008f 	ldh	r2,2(r16)
 8003c20:	9809883a 	mov	r4,r19
 8003c24:	14800226 	beq	r2,r18,8003c30 <_fwalk_reent+0x7c>
 8003c28:	a83ee83a 	callr	r21
 8003c2c:	b8aeb03a 	or	r23,r23,r2
 8003c30:	84001a04 	addi	r16,r16,104
 8003c34:	8cbff51e 	bne	r17,r18,8003c0c <__alt_data_end+0xfc003c0c>
 8003c38:	a5000017 	ldw	r20,0(r20)
 8003c3c:	a03fee1e 	bne	r20,zero,8003bf8 <__alt_data_end+0xfc003bf8>
 8003c40:	b805883a 	mov	r2,r23
 8003c44:	dfc00817 	ldw	ra,32(sp)
 8003c48:	ddc00717 	ldw	r23,28(sp)
 8003c4c:	dd800617 	ldw	r22,24(sp)
 8003c50:	dd400517 	ldw	r21,20(sp)
 8003c54:	dd000417 	ldw	r20,16(sp)
 8003c58:	dcc00317 	ldw	r19,12(sp)
 8003c5c:	dc800217 	ldw	r18,8(sp)
 8003c60:	dc400117 	ldw	r17,4(sp)
 8003c64:	dc000017 	ldw	r16,0(sp)
 8003c68:	dec00904 	addi	sp,sp,36
 8003c6c:	f800283a 	ret
 8003c70:	002f883a 	mov	r23,zero
 8003c74:	003ff206 	br	8003c40 <__alt_data_end+0xfc003c40>

08003c78 <__smakebuf_r>:
 8003c78:	2880030b 	ldhu	r2,12(r5)
 8003c7c:	10c0008c 	andi	r3,r2,2
 8003c80:	1800411e 	bne	r3,zero,8003d88 <__smakebuf_r+0x110>
 8003c84:	deffec04 	addi	sp,sp,-80
 8003c88:	dc000f15 	stw	r16,60(sp)
 8003c8c:	2821883a 	mov	r16,r5
 8003c90:	2940038f 	ldh	r5,14(r5)
 8003c94:	dc401015 	stw	r17,64(sp)
 8003c98:	dfc01315 	stw	ra,76(sp)
 8003c9c:	dcc01215 	stw	r19,72(sp)
 8003ca0:	dc801115 	stw	r18,68(sp)
 8003ca4:	2023883a 	mov	r17,r4
 8003ca8:	28001c16 	blt	r5,zero,8003d1c <__smakebuf_r+0xa4>
 8003cac:	d80d883a 	mov	r6,sp
 8003cb0:	8003a940 	call	8003a94 <_fstat_r>
 8003cb4:	10001816 	blt	r2,zero,8003d18 <__smakebuf_r+0xa0>
 8003cb8:	d8800117 	ldw	r2,4(sp)
 8003cbc:	00e00014 	movui	r3,32768
 8003cc0:	10bc000c 	andi	r2,r2,61440
 8003cc4:	14c80020 	cmpeqi	r19,r2,8192
 8003cc8:	10c03726 	beq	r2,r3,8003da8 <__smakebuf_r+0x130>
 8003ccc:	80c0030b 	ldhu	r3,12(r16)
 8003cd0:	18c20014 	ori	r3,r3,2048
 8003cd4:	80c0030d 	sth	r3,12(r16)
 8003cd8:	00c80004 	movi	r3,8192
 8003cdc:	10c0521e 	bne	r2,r3,8003e28 <__smakebuf_r+0x1b0>
 8003ce0:	8140038f 	ldh	r5,14(r16)
 8003ce4:	8809883a 	mov	r4,r17
 8003ce8:	800ae380 	call	800ae38 <_isatty_r>
 8003cec:	10004c26 	beq	r2,zero,8003e20 <__smakebuf_r+0x1a8>
 8003cf0:	8080030b 	ldhu	r2,12(r16)
 8003cf4:	80c010c4 	addi	r3,r16,67
 8003cf8:	80c00015 	stw	r3,0(r16)
 8003cfc:	10800054 	ori	r2,r2,1
 8003d00:	8080030d 	sth	r2,12(r16)
 8003d04:	00800044 	movi	r2,1
 8003d08:	80c00415 	stw	r3,16(r16)
 8003d0c:	80800515 	stw	r2,20(r16)
 8003d10:	04810004 	movi	r18,1024
 8003d14:	00000706 	br	8003d34 <__smakebuf_r+0xbc>
 8003d18:	8080030b 	ldhu	r2,12(r16)
 8003d1c:	10c0200c 	andi	r3,r2,128
 8003d20:	18001f1e 	bne	r3,zero,8003da0 <__smakebuf_r+0x128>
 8003d24:	04810004 	movi	r18,1024
 8003d28:	10820014 	ori	r2,r2,2048
 8003d2c:	8080030d 	sth	r2,12(r16)
 8003d30:	0027883a 	mov	r19,zero
 8003d34:	900b883a 	mov	r5,r18
 8003d38:	8809883a 	mov	r4,r17
 8003d3c:	8003e340 	call	8003e34 <_malloc_r>
 8003d40:	10002c26 	beq	r2,zero,8003df4 <__smakebuf_r+0x17c>
 8003d44:	80c0030b 	ldhu	r3,12(r16)
 8003d48:	01020034 	movhi	r4,2048
 8003d4c:	210b3404 	addi	r4,r4,11472
 8003d50:	89000f15 	stw	r4,60(r17)
 8003d54:	18c02014 	ori	r3,r3,128
 8003d58:	80c0030d 	sth	r3,12(r16)
 8003d5c:	80800015 	stw	r2,0(r16)
 8003d60:	80800415 	stw	r2,16(r16)
 8003d64:	84800515 	stw	r18,20(r16)
 8003d68:	98001a1e 	bne	r19,zero,8003dd4 <__smakebuf_r+0x15c>
 8003d6c:	dfc01317 	ldw	ra,76(sp)
 8003d70:	dcc01217 	ldw	r19,72(sp)
 8003d74:	dc801117 	ldw	r18,68(sp)
 8003d78:	dc401017 	ldw	r17,64(sp)
 8003d7c:	dc000f17 	ldw	r16,60(sp)
 8003d80:	dec01404 	addi	sp,sp,80
 8003d84:	f800283a 	ret
 8003d88:	288010c4 	addi	r2,r5,67
 8003d8c:	28800015 	stw	r2,0(r5)
 8003d90:	28800415 	stw	r2,16(r5)
 8003d94:	00800044 	movi	r2,1
 8003d98:	28800515 	stw	r2,20(r5)
 8003d9c:	f800283a 	ret
 8003da0:	04801004 	movi	r18,64
 8003da4:	003fe006 	br	8003d28 <__alt_data_end+0xfc003d28>
 8003da8:	81000a17 	ldw	r4,40(r16)
 8003dac:	00c20034 	movhi	r3,2048
 8003db0:	18d32404 	addi	r3,r3,19600
 8003db4:	20ffc51e 	bne	r4,r3,8003ccc <__alt_data_end+0xfc003ccc>
 8003db8:	8080030b 	ldhu	r2,12(r16)
 8003dbc:	04810004 	movi	r18,1024
 8003dc0:	84801315 	stw	r18,76(r16)
 8003dc4:	1484b03a 	or	r2,r2,r18
 8003dc8:	8080030d 	sth	r2,12(r16)
 8003dcc:	0027883a 	mov	r19,zero
 8003dd0:	003fd806 	br	8003d34 <__alt_data_end+0xfc003d34>
 8003dd4:	8140038f 	ldh	r5,14(r16)
 8003dd8:	8809883a 	mov	r4,r17
 8003ddc:	800ae380 	call	800ae38 <_isatty_r>
 8003de0:	103fe226 	beq	r2,zero,8003d6c <__alt_data_end+0xfc003d6c>
 8003de4:	8080030b 	ldhu	r2,12(r16)
 8003de8:	10800054 	ori	r2,r2,1
 8003dec:	8080030d 	sth	r2,12(r16)
 8003df0:	003fde06 	br	8003d6c <__alt_data_end+0xfc003d6c>
 8003df4:	8080030b 	ldhu	r2,12(r16)
 8003df8:	10c0800c 	andi	r3,r2,512
 8003dfc:	183fdb1e 	bne	r3,zero,8003d6c <__alt_data_end+0xfc003d6c>
 8003e00:	10800094 	ori	r2,r2,2
 8003e04:	80c010c4 	addi	r3,r16,67
 8003e08:	8080030d 	sth	r2,12(r16)
 8003e0c:	00800044 	movi	r2,1
 8003e10:	80c00015 	stw	r3,0(r16)
 8003e14:	80c00415 	stw	r3,16(r16)
 8003e18:	80800515 	stw	r2,20(r16)
 8003e1c:	003fd306 	br	8003d6c <__alt_data_end+0xfc003d6c>
 8003e20:	04810004 	movi	r18,1024
 8003e24:	003fc306 	br	8003d34 <__alt_data_end+0xfc003d34>
 8003e28:	0027883a 	mov	r19,zero
 8003e2c:	04810004 	movi	r18,1024
 8003e30:	003fc006 	br	8003d34 <__alt_data_end+0xfc003d34>

08003e34 <_malloc_r>:
 8003e34:	defff504 	addi	sp,sp,-44
 8003e38:	dc800315 	stw	r18,12(sp)
 8003e3c:	dfc00a15 	stw	ra,40(sp)
 8003e40:	df000915 	stw	fp,36(sp)
 8003e44:	ddc00815 	stw	r23,32(sp)
 8003e48:	dd800715 	stw	r22,28(sp)
 8003e4c:	dd400615 	stw	r21,24(sp)
 8003e50:	dd000515 	stw	r20,20(sp)
 8003e54:	dcc00415 	stw	r19,16(sp)
 8003e58:	dc400215 	stw	r17,8(sp)
 8003e5c:	dc000115 	stw	r16,4(sp)
 8003e60:	288002c4 	addi	r2,r5,11
 8003e64:	00c00584 	movi	r3,22
 8003e68:	2025883a 	mov	r18,r4
 8003e6c:	18807f2e 	bgeu	r3,r2,800406c <_malloc_r+0x238>
 8003e70:	047ffe04 	movi	r17,-8
 8003e74:	1462703a 	and	r17,r2,r17
 8003e78:	8800a316 	blt	r17,zero,8004108 <_malloc_r+0x2d4>
 8003e7c:	8940a236 	bltu	r17,r5,8004108 <_malloc_r+0x2d4>
 8003e80:	80195000 	call	8019500 <__malloc_lock>
 8003e84:	00807dc4 	movi	r2,503
 8003e88:	1441e92e 	bgeu	r2,r17,8004630 <_malloc_r+0x7fc>
 8003e8c:	8804d27a 	srli	r2,r17,9
 8003e90:	1000a126 	beq	r2,zero,8004118 <_malloc_r+0x2e4>
 8003e94:	00c00104 	movi	r3,4
 8003e98:	18811e36 	bltu	r3,r2,8004314 <_malloc_r+0x4e0>
 8003e9c:	8804d1ba 	srli	r2,r17,6
 8003ea0:	12000e44 	addi	r8,r2,57
 8003ea4:	11c00e04 	addi	r7,r2,56
 8003ea8:	4209883a 	add	r4,r8,r8
 8003eac:	04c200b4 	movhi	r19,2050
 8003eb0:	2109883a 	add	r4,r4,r4
 8003eb4:	9cf1ce04 	addi	r19,r19,-14536
 8003eb8:	2109883a 	add	r4,r4,r4
 8003ebc:	9909883a 	add	r4,r19,r4
 8003ec0:	24000117 	ldw	r16,4(r4)
 8003ec4:	213ffe04 	addi	r4,r4,-8
 8003ec8:	24009726 	beq	r4,r16,8004128 <_malloc_r+0x2f4>
 8003ecc:	80800117 	ldw	r2,4(r16)
 8003ed0:	01bfff04 	movi	r6,-4
 8003ed4:	014003c4 	movi	r5,15
 8003ed8:	1184703a 	and	r2,r2,r6
 8003edc:	1447c83a 	sub	r3,r2,r17
 8003ee0:	28c00716 	blt	r5,r3,8003f00 <_malloc_r+0xcc>
 8003ee4:	1800920e 	bge	r3,zero,8004130 <_malloc_r+0x2fc>
 8003ee8:	84000317 	ldw	r16,12(r16)
 8003eec:	24008e26 	beq	r4,r16,8004128 <_malloc_r+0x2f4>
 8003ef0:	80800117 	ldw	r2,4(r16)
 8003ef4:	1184703a 	and	r2,r2,r6
 8003ef8:	1447c83a 	sub	r3,r2,r17
 8003efc:	28fff90e 	bge	r5,r3,8003ee4 <__alt_data_end+0xfc003ee4>
 8003f00:	3809883a 	mov	r4,r7
 8003f04:	018200b4 	movhi	r6,2050
 8003f08:	9c000417 	ldw	r16,16(r19)
 8003f0c:	31b1ce04 	addi	r6,r6,-14536
 8003f10:	32000204 	addi	r8,r6,8
 8003f14:	82013426 	beq	r16,r8,80043e8 <_malloc_r+0x5b4>
 8003f18:	80c00117 	ldw	r3,4(r16)
 8003f1c:	00bfff04 	movi	r2,-4
 8003f20:	188e703a 	and	r7,r3,r2
 8003f24:	3c45c83a 	sub	r2,r7,r17
 8003f28:	00c003c4 	movi	r3,15
 8003f2c:	18811f16 	blt	r3,r2,80043ac <_malloc_r+0x578>
 8003f30:	32000515 	stw	r8,20(r6)
 8003f34:	32000415 	stw	r8,16(r6)
 8003f38:	10007f0e 	bge	r2,zero,8004138 <_malloc_r+0x304>
 8003f3c:	00807fc4 	movi	r2,511
 8003f40:	11c0fd36 	bltu	r2,r7,8004338 <_malloc_r+0x504>
 8003f44:	3806d0fa 	srli	r3,r7,3
 8003f48:	01c00044 	movi	r7,1
 8003f4c:	30800117 	ldw	r2,4(r6)
 8003f50:	19400044 	addi	r5,r3,1
 8003f54:	294b883a 	add	r5,r5,r5
 8003f58:	1807d0ba 	srai	r3,r3,2
 8003f5c:	294b883a 	add	r5,r5,r5
 8003f60:	294b883a 	add	r5,r5,r5
 8003f64:	298b883a 	add	r5,r5,r6
 8003f68:	38c6983a 	sll	r3,r7,r3
 8003f6c:	29c00017 	ldw	r7,0(r5)
 8003f70:	2a7ffe04 	addi	r9,r5,-8
 8003f74:	1886b03a 	or	r3,r3,r2
 8003f78:	82400315 	stw	r9,12(r16)
 8003f7c:	81c00215 	stw	r7,8(r16)
 8003f80:	30c00115 	stw	r3,4(r6)
 8003f84:	2c000015 	stw	r16,0(r5)
 8003f88:	3c000315 	stw	r16,12(r7)
 8003f8c:	2005d0ba 	srai	r2,r4,2
 8003f90:	01400044 	movi	r5,1
 8003f94:	288a983a 	sll	r5,r5,r2
 8003f98:	19406f36 	bltu	r3,r5,8004158 <_malloc_r+0x324>
 8003f9c:	28c4703a 	and	r2,r5,r3
 8003fa0:	10000a1e 	bne	r2,zero,8003fcc <_malloc_r+0x198>
 8003fa4:	00bfff04 	movi	r2,-4
 8003fa8:	294b883a 	add	r5,r5,r5
 8003fac:	2088703a 	and	r4,r4,r2
 8003fb0:	28c4703a 	and	r2,r5,r3
 8003fb4:	21000104 	addi	r4,r4,4
 8003fb8:	1000041e 	bne	r2,zero,8003fcc <_malloc_r+0x198>
 8003fbc:	294b883a 	add	r5,r5,r5
 8003fc0:	28c4703a 	and	r2,r5,r3
 8003fc4:	21000104 	addi	r4,r4,4
 8003fc8:	103ffc26 	beq	r2,zero,8003fbc <__alt_data_end+0xfc003fbc>
 8003fcc:	02bfff04 	movi	r10,-4
 8003fd0:	024003c4 	movi	r9,15
 8003fd4:	21800044 	addi	r6,r4,1
 8003fd8:	318d883a 	add	r6,r6,r6
 8003fdc:	318d883a 	add	r6,r6,r6
 8003fe0:	318d883a 	add	r6,r6,r6
 8003fe4:	998d883a 	add	r6,r19,r6
 8003fe8:	333ffe04 	addi	r12,r6,-8
 8003fec:	2017883a 	mov	r11,r4
 8003ff0:	31800104 	addi	r6,r6,4
 8003ff4:	34000017 	ldw	r16,0(r6)
 8003ff8:	31fffd04 	addi	r7,r6,-12
 8003ffc:	81c0041e 	bne	r16,r7,8004010 <_malloc_r+0x1dc>
 8004000:	0000fb06 	br	80043f0 <_malloc_r+0x5bc>
 8004004:	1801030e 	bge	r3,zero,8004414 <_malloc_r+0x5e0>
 8004008:	84000317 	ldw	r16,12(r16)
 800400c:	81c0f826 	beq	r16,r7,80043f0 <_malloc_r+0x5bc>
 8004010:	80800117 	ldw	r2,4(r16)
 8004014:	1284703a 	and	r2,r2,r10
 8004018:	1447c83a 	sub	r3,r2,r17
 800401c:	48fff90e 	bge	r9,r3,8004004 <__alt_data_end+0xfc004004>
 8004020:	80800317 	ldw	r2,12(r16)
 8004024:	81000217 	ldw	r4,8(r16)
 8004028:	89400054 	ori	r5,r17,1
 800402c:	81400115 	stw	r5,4(r16)
 8004030:	20800315 	stw	r2,12(r4)
 8004034:	11000215 	stw	r4,8(r2)
 8004038:	8463883a 	add	r17,r16,r17
 800403c:	9c400515 	stw	r17,20(r19)
 8004040:	9c400415 	stw	r17,16(r19)
 8004044:	18800054 	ori	r2,r3,1
 8004048:	88800115 	stw	r2,4(r17)
 800404c:	8a000315 	stw	r8,12(r17)
 8004050:	8a000215 	stw	r8,8(r17)
 8004054:	88e3883a 	add	r17,r17,r3
 8004058:	88c00015 	stw	r3,0(r17)
 800405c:	9009883a 	mov	r4,r18
 8004060:	80195240 	call	8019524 <__malloc_unlock>
 8004064:	80800204 	addi	r2,r16,8
 8004068:	00001b06 	br	80040d8 <_malloc_r+0x2a4>
 800406c:	04400404 	movi	r17,16
 8004070:	89402536 	bltu	r17,r5,8004108 <_malloc_r+0x2d4>
 8004074:	80195000 	call	8019500 <__malloc_lock>
 8004078:	00800184 	movi	r2,6
 800407c:	01000084 	movi	r4,2
 8004080:	04c200b4 	movhi	r19,2050
 8004084:	1085883a 	add	r2,r2,r2
 8004088:	9cf1ce04 	addi	r19,r19,-14536
 800408c:	1085883a 	add	r2,r2,r2
 8004090:	9885883a 	add	r2,r19,r2
 8004094:	14000117 	ldw	r16,4(r2)
 8004098:	10fffe04 	addi	r3,r2,-8
 800409c:	80c0d926 	beq	r16,r3,8004404 <_malloc_r+0x5d0>
 80040a0:	80c00117 	ldw	r3,4(r16)
 80040a4:	81000317 	ldw	r4,12(r16)
 80040a8:	00bfff04 	movi	r2,-4
 80040ac:	1884703a 	and	r2,r3,r2
 80040b0:	81400217 	ldw	r5,8(r16)
 80040b4:	8085883a 	add	r2,r16,r2
 80040b8:	10c00117 	ldw	r3,4(r2)
 80040bc:	29000315 	stw	r4,12(r5)
 80040c0:	21400215 	stw	r5,8(r4)
 80040c4:	18c00054 	ori	r3,r3,1
 80040c8:	10c00115 	stw	r3,4(r2)
 80040cc:	9009883a 	mov	r4,r18
 80040d0:	80195240 	call	8019524 <__malloc_unlock>
 80040d4:	80800204 	addi	r2,r16,8
 80040d8:	dfc00a17 	ldw	ra,40(sp)
 80040dc:	df000917 	ldw	fp,36(sp)
 80040e0:	ddc00817 	ldw	r23,32(sp)
 80040e4:	dd800717 	ldw	r22,28(sp)
 80040e8:	dd400617 	ldw	r21,24(sp)
 80040ec:	dd000517 	ldw	r20,20(sp)
 80040f0:	dcc00417 	ldw	r19,16(sp)
 80040f4:	dc800317 	ldw	r18,12(sp)
 80040f8:	dc400217 	ldw	r17,8(sp)
 80040fc:	dc000117 	ldw	r16,4(sp)
 8004100:	dec00b04 	addi	sp,sp,44
 8004104:	f800283a 	ret
 8004108:	00800304 	movi	r2,12
 800410c:	90800015 	stw	r2,0(r18)
 8004110:	0005883a 	mov	r2,zero
 8004114:	003ff006 	br	80040d8 <__alt_data_end+0xfc0040d8>
 8004118:	01002004 	movi	r4,128
 800411c:	02001004 	movi	r8,64
 8004120:	01c00fc4 	movi	r7,63
 8004124:	003f6106 	br	8003eac <__alt_data_end+0xfc003eac>
 8004128:	4009883a 	mov	r4,r8
 800412c:	003f7506 	br	8003f04 <__alt_data_end+0xfc003f04>
 8004130:	81000317 	ldw	r4,12(r16)
 8004134:	003fde06 	br	80040b0 <__alt_data_end+0xfc0040b0>
 8004138:	81c5883a 	add	r2,r16,r7
 800413c:	11400117 	ldw	r5,4(r2)
 8004140:	9009883a 	mov	r4,r18
 8004144:	29400054 	ori	r5,r5,1
 8004148:	11400115 	stw	r5,4(r2)
 800414c:	80195240 	call	8019524 <__malloc_unlock>
 8004150:	80800204 	addi	r2,r16,8
 8004154:	003fe006 	br	80040d8 <__alt_data_end+0xfc0040d8>
 8004158:	9c000217 	ldw	r16,8(r19)
 800415c:	00bfff04 	movi	r2,-4
 8004160:	85800117 	ldw	r22,4(r16)
 8004164:	b0ac703a 	and	r22,r22,r2
 8004168:	b4400336 	bltu	r22,r17,8004178 <_malloc_r+0x344>
 800416c:	b445c83a 	sub	r2,r22,r17
 8004170:	00c003c4 	movi	r3,15
 8004174:	18805d16 	blt	r3,r2,80042ec <_malloc_r+0x4b8>
 8004178:	05c200b4 	movhi	r23,2050
 800417c:	008200b4 	movhi	r2,2050
 8004180:	10be5c04 	addi	r2,r2,-1680
 8004184:	bdf77504 	addi	r23,r23,-8748
 8004188:	15400017 	ldw	r21,0(r2)
 800418c:	b8c00017 	ldw	r3,0(r23)
 8004190:	00bfffc4 	movi	r2,-1
 8004194:	858d883a 	add	r6,r16,r22
 8004198:	8d6b883a 	add	r21,r17,r21
 800419c:	1880ea26 	beq	r3,r2,8004548 <_malloc_r+0x714>
 80041a0:	ad4403c4 	addi	r21,r21,4111
 80041a4:	00bc0004 	movi	r2,-4096
 80041a8:	a8aa703a 	and	r21,r21,r2
 80041ac:	a80b883a 	mov	r5,r21
 80041b0:	9009883a 	mov	r4,r18
 80041b4:	d9800015 	stw	r6,0(sp)
 80041b8:	8004af80 	call	8004af8 <_sbrk_r>
 80041bc:	1029883a 	mov	r20,r2
 80041c0:	00bfffc4 	movi	r2,-1
 80041c4:	d9800017 	ldw	r6,0(sp)
 80041c8:	a080e826 	beq	r20,r2,800456c <_malloc_r+0x738>
 80041cc:	a180a636 	bltu	r20,r6,8004468 <_malloc_r+0x634>
 80041d0:	070200b4 	movhi	fp,2050
 80041d4:	e73e7104 	addi	fp,fp,-1596
 80041d8:	e0800017 	ldw	r2,0(fp)
 80041dc:	a887883a 	add	r3,r21,r2
 80041e0:	e0c00015 	stw	r3,0(fp)
 80041e4:	3500e626 	beq	r6,r20,8004580 <_malloc_r+0x74c>
 80041e8:	b9000017 	ldw	r4,0(r23)
 80041ec:	00bfffc4 	movi	r2,-1
 80041f0:	2080ee26 	beq	r4,r2,80045ac <_malloc_r+0x778>
 80041f4:	a185c83a 	sub	r2,r20,r6
 80041f8:	10c5883a 	add	r2,r2,r3
 80041fc:	e0800015 	stw	r2,0(fp)
 8004200:	a0c001cc 	andi	r3,r20,7
 8004204:	1800bc26 	beq	r3,zero,80044f8 <_malloc_r+0x6c4>
 8004208:	a0e9c83a 	sub	r20,r20,r3
 800420c:	00840204 	movi	r2,4104
 8004210:	a5000204 	addi	r20,r20,8
 8004214:	10c7c83a 	sub	r3,r2,r3
 8004218:	a545883a 	add	r2,r20,r21
 800421c:	1083ffcc 	andi	r2,r2,4095
 8004220:	18abc83a 	sub	r21,r3,r2
 8004224:	a80b883a 	mov	r5,r21
 8004228:	9009883a 	mov	r4,r18
 800422c:	8004af80 	call	8004af8 <_sbrk_r>
 8004230:	00ffffc4 	movi	r3,-1
 8004234:	10c0e126 	beq	r2,r3,80045bc <_malloc_r+0x788>
 8004238:	1505c83a 	sub	r2,r2,r20
 800423c:	1545883a 	add	r2,r2,r21
 8004240:	10800054 	ori	r2,r2,1
 8004244:	e0c00017 	ldw	r3,0(fp)
 8004248:	9d000215 	stw	r20,8(r19)
 800424c:	a0800115 	stw	r2,4(r20)
 8004250:	a8c7883a 	add	r3,r21,r3
 8004254:	e0c00015 	stw	r3,0(fp)
 8004258:	84c00e26 	beq	r16,r19,8004294 <_malloc_r+0x460>
 800425c:	018003c4 	movi	r6,15
 8004260:	3580a72e 	bgeu	r6,r22,8004500 <_malloc_r+0x6cc>
 8004264:	81400117 	ldw	r5,4(r16)
 8004268:	013ffe04 	movi	r4,-8
 800426c:	b0bffd04 	addi	r2,r22,-12
 8004270:	1104703a 	and	r2,r2,r4
 8004274:	2900004c 	andi	r4,r5,1
 8004278:	2088b03a 	or	r4,r4,r2
 800427c:	81000115 	stw	r4,4(r16)
 8004280:	01400144 	movi	r5,5
 8004284:	8089883a 	add	r4,r16,r2
 8004288:	21400115 	stw	r5,4(r4)
 800428c:	21400215 	stw	r5,8(r4)
 8004290:	3080cd36 	bltu	r6,r2,80045c8 <_malloc_r+0x794>
 8004294:	008200b4 	movhi	r2,2050
 8004298:	10be5b04 	addi	r2,r2,-1684
 800429c:	11000017 	ldw	r4,0(r2)
 80042a0:	20c0012e 	bgeu	r4,r3,80042a8 <_malloc_r+0x474>
 80042a4:	10c00015 	stw	r3,0(r2)
 80042a8:	008200b4 	movhi	r2,2050
 80042ac:	10be5a04 	addi	r2,r2,-1688
 80042b0:	11000017 	ldw	r4,0(r2)
 80042b4:	9c000217 	ldw	r16,8(r19)
 80042b8:	20c0012e 	bgeu	r4,r3,80042c0 <_malloc_r+0x48c>
 80042bc:	10c00015 	stw	r3,0(r2)
 80042c0:	80c00117 	ldw	r3,4(r16)
 80042c4:	00bfff04 	movi	r2,-4
 80042c8:	1886703a 	and	r3,r3,r2
 80042cc:	1c45c83a 	sub	r2,r3,r17
 80042d0:	1c400236 	bltu	r3,r17,80042dc <_malloc_r+0x4a8>
 80042d4:	00c003c4 	movi	r3,15
 80042d8:	18800416 	blt	r3,r2,80042ec <_malloc_r+0x4b8>
 80042dc:	9009883a 	mov	r4,r18
 80042e0:	80195240 	call	8019524 <__malloc_unlock>
 80042e4:	0005883a 	mov	r2,zero
 80042e8:	003f7b06 	br	80040d8 <__alt_data_end+0xfc0040d8>
 80042ec:	88c00054 	ori	r3,r17,1
 80042f0:	80c00115 	stw	r3,4(r16)
 80042f4:	8463883a 	add	r17,r16,r17
 80042f8:	10800054 	ori	r2,r2,1
 80042fc:	9c400215 	stw	r17,8(r19)
 8004300:	88800115 	stw	r2,4(r17)
 8004304:	9009883a 	mov	r4,r18
 8004308:	80195240 	call	8019524 <__malloc_unlock>
 800430c:	80800204 	addi	r2,r16,8
 8004310:	003f7106 	br	80040d8 <__alt_data_end+0xfc0040d8>
 8004314:	00c00504 	movi	r3,20
 8004318:	18804a2e 	bgeu	r3,r2,8004444 <_malloc_r+0x610>
 800431c:	00c01504 	movi	r3,84
 8004320:	18806e36 	bltu	r3,r2,80044dc <_malloc_r+0x6a8>
 8004324:	8804d33a 	srli	r2,r17,12
 8004328:	12001bc4 	addi	r8,r2,111
 800432c:	11c01b84 	addi	r7,r2,110
 8004330:	4209883a 	add	r4,r8,r8
 8004334:	003edd06 	br	8003eac <__alt_data_end+0xfc003eac>
 8004338:	3804d27a 	srli	r2,r7,9
 800433c:	00c00104 	movi	r3,4
 8004340:	1880442e 	bgeu	r3,r2,8004454 <_malloc_r+0x620>
 8004344:	00c00504 	movi	r3,20
 8004348:	18808136 	bltu	r3,r2,8004550 <_malloc_r+0x71c>
 800434c:	11401704 	addi	r5,r2,92
 8004350:	10c016c4 	addi	r3,r2,91
 8004354:	294b883a 	add	r5,r5,r5
 8004358:	294b883a 	add	r5,r5,r5
 800435c:	294b883a 	add	r5,r5,r5
 8004360:	994b883a 	add	r5,r19,r5
 8004364:	28800017 	ldw	r2,0(r5)
 8004368:	018200b4 	movhi	r6,2050
 800436c:	297ffe04 	addi	r5,r5,-8
 8004370:	31b1ce04 	addi	r6,r6,-14536
 8004374:	28806526 	beq	r5,r2,800450c <_malloc_r+0x6d8>
 8004378:	01bfff04 	movi	r6,-4
 800437c:	10c00117 	ldw	r3,4(r2)
 8004380:	1986703a 	and	r3,r3,r6
 8004384:	38c0022e 	bgeu	r7,r3,8004390 <_malloc_r+0x55c>
 8004388:	10800217 	ldw	r2,8(r2)
 800438c:	28bffb1e 	bne	r5,r2,800437c <__alt_data_end+0xfc00437c>
 8004390:	11400317 	ldw	r5,12(r2)
 8004394:	98c00117 	ldw	r3,4(r19)
 8004398:	81400315 	stw	r5,12(r16)
 800439c:	80800215 	stw	r2,8(r16)
 80043a0:	2c000215 	stw	r16,8(r5)
 80043a4:	14000315 	stw	r16,12(r2)
 80043a8:	003ef806 	br	8003f8c <__alt_data_end+0xfc003f8c>
 80043ac:	88c00054 	ori	r3,r17,1
 80043b0:	80c00115 	stw	r3,4(r16)
 80043b4:	8463883a 	add	r17,r16,r17
 80043b8:	34400515 	stw	r17,20(r6)
 80043bc:	34400415 	stw	r17,16(r6)
 80043c0:	10c00054 	ori	r3,r2,1
 80043c4:	8a000315 	stw	r8,12(r17)
 80043c8:	8a000215 	stw	r8,8(r17)
 80043cc:	88c00115 	stw	r3,4(r17)
 80043d0:	88a3883a 	add	r17,r17,r2
 80043d4:	88800015 	stw	r2,0(r17)
 80043d8:	9009883a 	mov	r4,r18
 80043dc:	80195240 	call	8019524 <__malloc_unlock>
 80043e0:	80800204 	addi	r2,r16,8
 80043e4:	003f3c06 	br	80040d8 <__alt_data_end+0xfc0040d8>
 80043e8:	30c00117 	ldw	r3,4(r6)
 80043ec:	003ee706 	br	8003f8c <__alt_data_end+0xfc003f8c>
 80043f0:	5ac00044 	addi	r11,r11,1
 80043f4:	588000cc 	andi	r2,r11,3
 80043f8:	31800204 	addi	r6,r6,8
 80043fc:	103efd1e 	bne	r2,zero,8003ff4 <__alt_data_end+0xfc003ff4>
 8004400:	00002406 	br	8004494 <_malloc_r+0x660>
 8004404:	14000317 	ldw	r16,12(r2)
 8004408:	143f251e 	bne	r2,r16,80040a0 <__alt_data_end+0xfc0040a0>
 800440c:	21000084 	addi	r4,r4,2
 8004410:	003ebc06 	br	8003f04 <__alt_data_end+0xfc003f04>
 8004414:	8085883a 	add	r2,r16,r2
 8004418:	10c00117 	ldw	r3,4(r2)
 800441c:	81000317 	ldw	r4,12(r16)
 8004420:	81400217 	ldw	r5,8(r16)
 8004424:	18c00054 	ori	r3,r3,1
 8004428:	10c00115 	stw	r3,4(r2)
 800442c:	29000315 	stw	r4,12(r5)
 8004430:	21400215 	stw	r5,8(r4)
 8004434:	9009883a 	mov	r4,r18
 8004438:	80195240 	call	8019524 <__malloc_unlock>
 800443c:	80800204 	addi	r2,r16,8
 8004440:	003f2506 	br	80040d8 <__alt_data_end+0xfc0040d8>
 8004444:	12001704 	addi	r8,r2,92
 8004448:	11c016c4 	addi	r7,r2,91
 800444c:	4209883a 	add	r4,r8,r8
 8004450:	003e9606 	br	8003eac <__alt_data_end+0xfc003eac>
 8004454:	3804d1ba 	srli	r2,r7,6
 8004458:	11400e44 	addi	r5,r2,57
 800445c:	10c00e04 	addi	r3,r2,56
 8004460:	294b883a 	add	r5,r5,r5
 8004464:	003fbc06 	br	8004358 <__alt_data_end+0xfc004358>
 8004468:	84ff5926 	beq	r16,r19,80041d0 <__alt_data_end+0xfc0041d0>
 800446c:	008200b4 	movhi	r2,2050
 8004470:	10b1ce04 	addi	r2,r2,-14536
 8004474:	14000217 	ldw	r16,8(r2)
 8004478:	00bfff04 	movi	r2,-4
 800447c:	80c00117 	ldw	r3,4(r16)
 8004480:	1886703a 	and	r3,r3,r2
 8004484:	003f9106 	br	80042cc <__alt_data_end+0xfc0042cc>
 8004488:	60800217 	ldw	r2,8(r12)
 800448c:	213fffc4 	addi	r4,r4,-1
 8004490:	1300651e 	bne	r2,r12,8004628 <_malloc_r+0x7f4>
 8004494:	208000cc 	andi	r2,r4,3
 8004498:	633ffe04 	addi	r12,r12,-8
 800449c:	103ffa1e 	bne	r2,zero,8004488 <__alt_data_end+0xfc004488>
 80044a0:	98800117 	ldw	r2,4(r19)
 80044a4:	0146303a 	nor	r3,zero,r5
 80044a8:	1884703a 	and	r2,r3,r2
 80044ac:	98800115 	stw	r2,4(r19)
 80044b0:	294b883a 	add	r5,r5,r5
 80044b4:	117f2836 	bltu	r2,r5,8004158 <__alt_data_end+0xfc004158>
 80044b8:	283f2726 	beq	r5,zero,8004158 <__alt_data_end+0xfc004158>
 80044bc:	2886703a 	and	r3,r5,r2
 80044c0:	5809883a 	mov	r4,r11
 80044c4:	183ec31e 	bne	r3,zero,8003fd4 <__alt_data_end+0xfc003fd4>
 80044c8:	294b883a 	add	r5,r5,r5
 80044cc:	2886703a 	and	r3,r5,r2
 80044d0:	21000104 	addi	r4,r4,4
 80044d4:	183ffc26 	beq	r3,zero,80044c8 <__alt_data_end+0xfc0044c8>
 80044d8:	003ebe06 	br	8003fd4 <__alt_data_end+0xfc003fd4>
 80044dc:	00c05504 	movi	r3,340
 80044e0:	18801236 	bltu	r3,r2,800452c <_malloc_r+0x6f8>
 80044e4:	8804d3fa 	srli	r2,r17,15
 80044e8:	12001e04 	addi	r8,r2,120
 80044ec:	11c01dc4 	addi	r7,r2,119
 80044f0:	4209883a 	add	r4,r8,r8
 80044f4:	003e6d06 	br	8003eac <__alt_data_end+0xfc003eac>
 80044f8:	00c40004 	movi	r3,4096
 80044fc:	003f4606 	br	8004218 <__alt_data_end+0xfc004218>
 8004500:	00800044 	movi	r2,1
 8004504:	a0800115 	stw	r2,4(r20)
 8004508:	003f7406 	br	80042dc <__alt_data_end+0xfc0042dc>
 800450c:	1805d0ba 	srai	r2,r3,2
 8004510:	01c00044 	movi	r7,1
 8004514:	30c00117 	ldw	r3,4(r6)
 8004518:	388e983a 	sll	r7,r7,r2
 800451c:	2805883a 	mov	r2,r5
 8004520:	38c6b03a 	or	r3,r7,r3
 8004524:	30c00115 	stw	r3,4(r6)
 8004528:	003f9b06 	br	8004398 <__alt_data_end+0xfc004398>
 800452c:	00c15504 	movi	r3,1364
 8004530:	18801a36 	bltu	r3,r2,800459c <_malloc_r+0x768>
 8004534:	8804d4ba 	srli	r2,r17,18
 8004538:	12001f44 	addi	r8,r2,125
 800453c:	11c01f04 	addi	r7,r2,124
 8004540:	4209883a 	add	r4,r8,r8
 8004544:	003e5906 	br	8003eac <__alt_data_end+0xfc003eac>
 8004548:	ad400404 	addi	r21,r21,16
 800454c:	003f1706 	br	80041ac <__alt_data_end+0xfc0041ac>
 8004550:	00c01504 	movi	r3,84
 8004554:	18802336 	bltu	r3,r2,80045e4 <_malloc_r+0x7b0>
 8004558:	3804d33a 	srli	r2,r7,12
 800455c:	11401bc4 	addi	r5,r2,111
 8004560:	10c01b84 	addi	r3,r2,110
 8004564:	294b883a 	add	r5,r5,r5
 8004568:	003f7b06 	br	8004358 <__alt_data_end+0xfc004358>
 800456c:	9c000217 	ldw	r16,8(r19)
 8004570:	00bfff04 	movi	r2,-4
 8004574:	80c00117 	ldw	r3,4(r16)
 8004578:	1886703a 	and	r3,r3,r2
 800457c:	003f5306 	br	80042cc <__alt_data_end+0xfc0042cc>
 8004580:	3083ffcc 	andi	r2,r6,4095
 8004584:	103f181e 	bne	r2,zero,80041e8 <__alt_data_end+0xfc0041e8>
 8004588:	99000217 	ldw	r4,8(r19)
 800458c:	b545883a 	add	r2,r22,r21
 8004590:	10800054 	ori	r2,r2,1
 8004594:	20800115 	stw	r2,4(r4)
 8004598:	003f3e06 	br	8004294 <__alt_data_end+0xfc004294>
 800459c:	01003f84 	movi	r4,254
 80045a0:	02001fc4 	movi	r8,127
 80045a4:	01c01f84 	movi	r7,126
 80045a8:	003e4006 	br	8003eac <__alt_data_end+0xfc003eac>
 80045ac:	008200b4 	movhi	r2,2050
 80045b0:	10b77504 	addi	r2,r2,-8748
 80045b4:	15000015 	stw	r20,0(r2)
 80045b8:	003f1106 	br	8004200 <__alt_data_end+0xfc004200>
 80045bc:	00800044 	movi	r2,1
 80045c0:	002b883a 	mov	r21,zero
 80045c4:	003f1f06 	br	8004244 <__alt_data_end+0xfc004244>
 80045c8:	81400204 	addi	r5,r16,8
 80045cc:	9009883a 	mov	r4,r18
 80045d0:	80032a80 	call	80032a8 <_free_r>
 80045d4:	008200b4 	movhi	r2,2050
 80045d8:	10be7104 	addi	r2,r2,-1596
 80045dc:	10c00017 	ldw	r3,0(r2)
 80045e0:	003f2c06 	br	8004294 <__alt_data_end+0xfc004294>
 80045e4:	00c05504 	movi	r3,340
 80045e8:	18800536 	bltu	r3,r2,8004600 <_malloc_r+0x7cc>
 80045ec:	3804d3fa 	srli	r2,r7,15
 80045f0:	11401e04 	addi	r5,r2,120
 80045f4:	10c01dc4 	addi	r3,r2,119
 80045f8:	294b883a 	add	r5,r5,r5
 80045fc:	003f5606 	br	8004358 <__alt_data_end+0xfc004358>
 8004600:	00c15504 	movi	r3,1364
 8004604:	18800536 	bltu	r3,r2,800461c <_malloc_r+0x7e8>
 8004608:	3804d4ba 	srli	r2,r7,18
 800460c:	11401f44 	addi	r5,r2,125
 8004610:	10c01f04 	addi	r3,r2,124
 8004614:	294b883a 	add	r5,r5,r5
 8004618:	003f4f06 	br	8004358 <__alt_data_end+0xfc004358>
 800461c:	01403f84 	movi	r5,254
 8004620:	00c01f84 	movi	r3,126
 8004624:	003f4c06 	br	8004358 <__alt_data_end+0xfc004358>
 8004628:	98800117 	ldw	r2,4(r19)
 800462c:	003fa006 	br	80044b0 <__alt_data_end+0xfc0044b0>
 8004630:	8808d0fa 	srli	r4,r17,3
 8004634:	20800044 	addi	r2,r4,1
 8004638:	1085883a 	add	r2,r2,r2
 800463c:	003e9006 	br	8004080 <__alt_data_end+0xfc004080>

08004640 <memset>:
 8004640:	20c000cc 	andi	r3,r4,3
 8004644:	2005883a 	mov	r2,r4
 8004648:	18004426 	beq	r3,zero,800475c <memset+0x11c>
 800464c:	31ffffc4 	addi	r7,r6,-1
 8004650:	30004026 	beq	r6,zero,8004754 <memset+0x114>
 8004654:	2813883a 	mov	r9,r5
 8004658:	200d883a 	mov	r6,r4
 800465c:	2007883a 	mov	r3,r4
 8004660:	00000406 	br	8004674 <memset+0x34>
 8004664:	3a3fffc4 	addi	r8,r7,-1
 8004668:	31800044 	addi	r6,r6,1
 800466c:	38003926 	beq	r7,zero,8004754 <memset+0x114>
 8004670:	400f883a 	mov	r7,r8
 8004674:	18c00044 	addi	r3,r3,1
 8004678:	32400005 	stb	r9,0(r6)
 800467c:	1a0000cc 	andi	r8,r3,3
 8004680:	403ff81e 	bne	r8,zero,8004664 <__alt_data_end+0xfc004664>
 8004684:	010000c4 	movi	r4,3
 8004688:	21c02d2e 	bgeu	r4,r7,8004740 <memset+0x100>
 800468c:	29003fcc 	andi	r4,r5,255
 8004690:	200c923a 	slli	r6,r4,8
 8004694:	3108b03a 	or	r4,r6,r4
 8004698:	200c943a 	slli	r6,r4,16
 800469c:	218cb03a 	or	r6,r4,r6
 80046a0:	010003c4 	movi	r4,15
 80046a4:	21c0182e 	bgeu	r4,r7,8004708 <memset+0xc8>
 80046a8:	3b3ffc04 	addi	r12,r7,-16
 80046ac:	6018d13a 	srli	r12,r12,4
 80046b0:	1a000104 	addi	r8,r3,4
 80046b4:	1ac00204 	addi	r11,r3,8
 80046b8:	6008913a 	slli	r4,r12,4
 80046bc:	1a800304 	addi	r10,r3,12
 80046c0:	1813883a 	mov	r9,r3
 80046c4:	21000504 	addi	r4,r4,20
 80046c8:	1909883a 	add	r4,r3,r4
 80046cc:	49800015 	stw	r6,0(r9)
 80046d0:	41800015 	stw	r6,0(r8)
 80046d4:	59800015 	stw	r6,0(r11)
 80046d8:	51800015 	stw	r6,0(r10)
 80046dc:	42000404 	addi	r8,r8,16
 80046e0:	4a400404 	addi	r9,r9,16
 80046e4:	5ac00404 	addi	r11,r11,16
 80046e8:	52800404 	addi	r10,r10,16
 80046ec:	413ff71e 	bne	r8,r4,80046cc <__alt_data_end+0xfc0046cc>
 80046f0:	63000044 	addi	r12,r12,1
 80046f4:	6018913a 	slli	r12,r12,4
 80046f8:	39c003cc 	andi	r7,r7,15
 80046fc:	010000c4 	movi	r4,3
 8004700:	1b07883a 	add	r3,r3,r12
 8004704:	21c00e2e 	bgeu	r4,r7,8004740 <memset+0x100>
 8004708:	1813883a 	mov	r9,r3
 800470c:	3811883a 	mov	r8,r7
 8004710:	010000c4 	movi	r4,3
 8004714:	49800015 	stw	r6,0(r9)
 8004718:	423fff04 	addi	r8,r8,-4
 800471c:	4a400104 	addi	r9,r9,4
 8004720:	223ffc36 	bltu	r4,r8,8004714 <__alt_data_end+0xfc004714>
 8004724:	393fff04 	addi	r4,r7,-4
 8004728:	2008d0ba 	srli	r4,r4,2
 800472c:	39c000cc 	andi	r7,r7,3
 8004730:	21000044 	addi	r4,r4,1
 8004734:	2109883a 	add	r4,r4,r4
 8004738:	2109883a 	add	r4,r4,r4
 800473c:	1907883a 	add	r3,r3,r4
 8004740:	38000526 	beq	r7,zero,8004758 <memset+0x118>
 8004744:	19cf883a 	add	r7,r3,r7
 8004748:	19400005 	stb	r5,0(r3)
 800474c:	18c00044 	addi	r3,r3,1
 8004750:	38fffd1e 	bne	r7,r3,8004748 <__alt_data_end+0xfc004748>
 8004754:	f800283a 	ret
 8004758:	f800283a 	ret
 800475c:	2007883a 	mov	r3,r4
 8004760:	300f883a 	mov	r7,r6
 8004764:	003fc706 	br	8004684 <__alt_data_end+0xfc004684>

08004768 <_open_r>:
 8004768:	defffd04 	addi	sp,sp,-12
 800476c:	2805883a 	mov	r2,r5
 8004770:	dc000015 	stw	r16,0(sp)
 8004774:	040200b4 	movhi	r16,2050
 8004778:	dc400115 	stw	r17,4(sp)
 800477c:	300b883a 	mov	r5,r6
 8004780:	843e5904 	addi	r16,r16,-1692
 8004784:	2023883a 	mov	r17,r4
 8004788:	380d883a 	mov	r6,r7
 800478c:	1009883a 	mov	r4,r2
 8004790:	dfc00215 	stw	ra,8(sp)
 8004794:	80000015 	stw	zero,0(r16)
 8004798:	80196700 	call	8019670 <open>
 800479c:	00ffffc4 	movi	r3,-1
 80047a0:	10c00526 	beq	r2,r3,80047b8 <_open_r+0x50>
 80047a4:	dfc00217 	ldw	ra,8(sp)
 80047a8:	dc400117 	ldw	r17,4(sp)
 80047ac:	dc000017 	ldw	r16,0(sp)
 80047b0:	dec00304 	addi	sp,sp,12
 80047b4:	f800283a 	ret
 80047b8:	80c00017 	ldw	r3,0(r16)
 80047bc:	183ff926 	beq	r3,zero,80047a4 <__alt_data_end+0xfc0047a4>
 80047c0:	88c00015 	stw	r3,0(r17)
 80047c4:	003ff706 	br	80047a4 <__alt_data_end+0xfc0047a4>

080047c8 <_printf_r>:
 80047c8:	defffd04 	addi	sp,sp,-12
 80047cc:	2805883a 	mov	r2,r5
 80047d0:	dfc00015 	stw	ra,0(sp)
 80047d4:	d9800115 	stw	r6,4(sp)
 80047d8:	d9c00215 	stw	r7,8(sp)
 80047dc:	21400217 	ldw	r5,8(r4)
 80047e0:	d9c00104 	addi	r7,sp,4
 80047e4:	100d883a 	mov	r6,r2
 80047e8:	8004d8c0 	call	8004d8c <___vfprintf_internal_r>
 80047ec:	dfc00017 	ldw	ra,0(sp)
 80047f0:	dec00304 	addi	sp,sp,12
 80047f4:	f800283a 	ret

080047f8 <printf>:
 80047f8:	defffc04 	addi	sp,sp,-16
 80047fc:	dfc00015 	stw	ra,0(sp)
 8004800:	d9400115 	stw	r5,4(sp)
 8004804:	d9800215 	stw	r6,8(sp)
 8004808:	d9c00315 	stw	r7,12(sp)
 800480c:	008200b4 	movhi	r2,2050
 8004810:	10b77404 	addi	r2,r2,-8752
 8004814:	10800017 	ldw	r2,0(r2)
 8004818:	200b883a 	mov	r5,r4
 800481c:	d9800104 	addi	r6,sp,4
 8004820:	11000217 	ldw	r4,8(r2)
 8004824:	80070680 	call	8007068 <__vfprintf_internal>
 8004828:	dfc00017 	ldw	ra,0(sp)
 800482c:	dec00404 	addi	sp,sp,16
 8004830:	f800283a 	ret

08004834 <_puts_r>:
 8004834:	defff604 	addi	sp,sp,-40
 8004838:	dc000715 	stw	r16,28(sp)
 800483c:	2021883a 	mov	r16,r4
 8004840:	2809883a 	mov	r4,r5
 8004844:	dc400815 	stw	r17,32(sp)
 8004848:	dfc00915 	stw	ra,36(sp)
 800484c:	2823883a 	mov	r17,r5
 8004850:	8004cf40 	call	8004cf4 <strlen>
 8004854:	10c00044 	addi	r3,r2,1
 8004858:	d8800115 	stw	r2,4(sp)
 800485c:	008200b4 	movhi	r2,2050
 8004860:	10aee904 	addi	r2,r2,-17500
 8004864:	d8800215 	stw	r2,8(sp)
 8004868:	00800044 	movi	r2,1
 800486c:	d8800315 	stw	r2,12(sp)
 8004870:	00800084 	movi	r2,2
 8004874:	dc400015 	stw	r17,0(sp)
 8004878:	d8c00615 	stw	r3,24(sp)
 800487c:	dec00415 	stw	sp,16(sp)
 8004880:	d8800515 	stw	r2,20(sp)
 8004884:	80000226 	beq	r16,zero,8004890 <_puts_r+0x5c>
 8004888:	80800e17 	ldw	r2,56(r16)
 800488c:	10001426 	beq	r2,zero,80048e0 <_puts_r+0xac>
 8004890:	81400217 	ldw	r5,8(r16)
 8004894:	2880030b 	ldhu	r2,12(r5)
 8004898:	10c8000c 	andi	r3,r2,8192
 800489c:	1800061e 	bne	r3,zero,80048b8 <_puts_r+0x84>
 80048a0:	29001917 	ldw	r4,100(r5)
 80048a4:	00f7ffc4 	movi	r3,-8193
 80048a8:	10880014 	ori	r2,r2,8192
 80048ac:	20c6703a 	and	r3,r4,r3
 80048b0:	2880030d 	sth	r2,12(r5)
 80048b4:	28c01915 	stw	r3,100(r5)
 80048b8:	d9800404 	addi	r6,sp,16
 80048bc:	8009883a 	mov	r4,r16
 80048c0:	800a9700 	call	800a970 <__sfvwrite_r>
 80048c4:	1000091e 	bne	r2,zero,80048ec <_puts_r+0xb8>
 80048c8:	00800284 	movi	r2,10
 80048cc:	dfc00917 	ldw	ra,36(sp)
 80048d0:	dc400817 	ldw	r17,32(sp)
 80048d4:	dc000717 	ldw	r16,28(sp)
 80048d8:	dec00a04 	addi	sp,sp,40
 80048dc:	f800283a 	ret
 80048e0:	8009883a 	mov	r4,r16
 80048e4:	80030280 	call	8003028 <__sinit>
 80048e8:	003fe906 	br	8004890 <__alt_data_end+0xfc004890>
 80048ec:	00bfffc4 	movi	r2,-1
 80048f0:	003ff606 	br	80048cc <__alt_data_end+0xfc0048cc>

080048f4 <puts>:
 80048f4:	008200b4 	movhi	r2,2050
 80048f8:	10b77404 	addi	r2,r2,-8752
 80048fc:	200b883a 	mov	r5,r4
 8004900:	11000017 	ldw	r4,0(r2)
 8004904:	80048341 	jmpi	8004834 <_puts_r>

08004908 <lflush>:
 8004908:	2080030b 	ldhu	r2,12(r4)
 800490c:	00c00244 	movi	r3,9
 8004910:	1080024c 	andi	r2,r2,9
 8004914:	10c00226 	beq	r2,r3,8004920 <lflush+0x18>
 8004918:	0005883a 	mov	r2,zero
 800491c:	f800283a 	ret
 8004920:	8002c981 	jmpi	8002c98 <fflush>

08004924 <__srefill_r>:
 8004924:	defffc04 	addi	sp,sp,-16
 8004928:	dc400115 	stw	r17,4(sp)
 800492c:	dc000015 	stw	r16,0(sp)
 8004930:	dfc00315 	stw	ra,12(sp)
 8004934:	dc800215 	stw	r18,8(sp)
 8004938:	2023883a 	mov	r17,r4
 800493c:	2821883a 	mov	r16,r5
 8004940:	20000226 	beq	r4,zero,800494c <__srefill_r+0x28>
 8004944:	20800e17 	ldw	r2,56(r4)
 8004948:	10003c26 	beq	r2,zero,8004a3c <__srefill_r+0x118>
 800494c:	80c0030b 	ldhu	r3,12(r16)
 8004950:	1908000c 	andi	r4,r3,8192
 8004954:	1805883a 	mov	r2,r3
 8004958:	2000071e 	bne	r4,zero,8004978 <__srefill_r+0x54>
 800495c:	81001917 	ldw	r4,100(r16)
 8004960:	18880014 	ori	r2,r3,8192
 8004964:	00f7ffc4 	movi	r3,-8193
 8004968:	20c8703a 	and	r4,r4,r3
 800496c:	8080030d 	sth	r2,12(r16)
 8004970:	1007883a 	mov	r3,r2
 8004974:	81001915 	stw	r4,100(r16)
 8004978:	80000115 	stw	zero,4(r16)
 800497c:	1100080c 	andi	r4,r2,32
 8004980:	2000571e 	bne	r4,zero,8004ae0 <__srefill_r+0x1bc>
 8004984:	1100010c 	andi	r4,r2,4
 8004988:	20001f26 	beq	r4,zero,8004a08 <__srefill_r+0xe4>
 800498c:	81400c17 	ldw	r5,48(r16)
 8004990:	28000826 	beq	r5,zero,80049b4 <__srefill_r+0x90>
 8004994:	80801004 	addi	r2,r16,64
 8004998:	28800226 	beq	r5,r2,80049a4 <__srefill_r+0x80>
 800499c:	8809883a 	mov	r4,r17
 80049a0:	80032a80 	call	80032a8 <_free_r>
 80049a4:	80800f17 	ldw	r2,60(r16)
 80049a8:	80000c15 	stw	zero,48(r16)
 80049ac:	80800115 	stw	r2,4(r16)
 80049b0:	1000391e 	bne	r2,zero,8004a98 <__srefill_r+0x174>
 80049b4:	80800417 	ldw	r2,16(r16)
 80049b8:	10004b26 	beq	r2,zero,8004ae8 <__srefill_r+0x1c4>
 80049bc:	8480030b 	ldhu	r18,12(r16)
 80049c0:	908000cc 	andi	r2,r18,3
 80049c4:	10001f1e 	bne	r2,zero,8004a44 <__srefill_r+0x120>
 80049c8:	81800417 	ldw	r6,16(r16)
 80049cc:	80800817 	ldw	r2,32(r16)
 80049d0:	81c00517 	ldw	r7,20(r16)
 80049d4:	81400717 	ldw	r5,28(r16)
 80049d8:	81800015 	stw	r6,0(r16)
 80049dc:	8809883a 	mov	r4,r17
 80049e0:	103ee83a 	callr	r2
 80049e4:	80800115 	stw	r2,4(r16)
 80049e8:	00800e0e 	bge	zero,r2,8004a24 <__srefill_r+0x100>
 80049ec:	0005883a 	mov	r2,zero
 80049f0:	dfc00317 	ldw	ra,12(sp)
 80049f4:	dc800217 	ldw	r18,8(sp)
 80049f8:	dc400117 	ldw	r17,4(sp)
 80049fc:	dc000017 	ldw	r16,0(sp)
 8004a00:	dec00404 	addi	sp,sp,16
 8004a04:	f800283a 	ret
 8004a08:	1100040c 	andi	r4,r2,16
 8004a0c:	20003026 	beq	r4,zero,8004ad0 <__srefill_r+0x1ac>
 8004a10:	1080020c 	andi	r2,r2,8
 8004a14:	1000241e 	bne	r2,zero,8004aa8 <__srefill_r+0x184>
 8004a18:	18c00114 	ori	r3,r3,4
 8004a1c:	80c0030d 	sth	r3,12(r16)
 8004a20:	003fe406 	br	80049b4 <__alt_data_end+0xfc0049b4>
 8004a24:	80c0030b 	ldhu	r3,12(r16)
 8004a28:	1000161e 	bne	r2,zero,8004a84 <__srefill_r+0x160>
 8004a2c:	18c00814 	ori	r3,r3,32
 8004a30:	00bfffc4 	movi	r2,-1
 8004a34:	80c0030d 	sth	r3,12(r16)
 8004a38:	003fed06 	br	80049f0 <__alt_data_end+0xfc0049f0>
 8004a3c:	80030280 	call	8003028 <__sinit>
 8004a40:	003fc206 	br	800494c <__alt_data_end+0xfc00494c>
 8004a44:	008200b4 	movhi	r2,2050
 8004a48:	10b77304 	addi	r2,r2,-8756
 8004a4c:	11000017 	ldw	r4,0(r2)
 8004a50:	01420034 	movhi	r5,2048
 8004a54:	00800044 	movi	r2,1
 8004a58:	29524204 	addi	r5,r5,18696
 8004a5c:	8080030d 	sth	r2,12(r16)
 8004a60:	8003af00 	call	8003af0 <_fwalk>
 8004a64:	00800244 	movi	r2,9
 8004a68:	8480030d 	sth	r18,12(r16)
 8004a6c:	9480024c 	andi	r18,r18,9
 8004a70:	90bfd51e 	bne	r18,r2,80049c8 <__alt_data_end+0xfc0049c8>
 8004a74:	800b883a 	mov	r5,r16
 8004a78:	8809883a 	mov	r4,r17
 8004a7c:	8002a200 	call	8002a20 <__sflush_r>
 8004a80:	003fd106 	br	80049c8 <__alt_data_end+0xfc0049c8>
 8004a84:	18c01014 	ori	r3,r3,64
 8004a88:	80000115 	stw	zero,4(r16)
 8004a8c:	00bfffc4 	movi	r2,-1
 8004a90:	80c0030d 	sth	r3,12(r16)
 8004a94:	003fd606 	br	80049f0 <__alt_data_end+0xfc0049f0>
 8004a98:	80c00e17 	ldw	r3,56(r16)
 8004a9c:	0005883a 	mov	r2,zero
 8004aa0:	80c00015 	stw	r3,0(r16)
 8004aa4:	003fd206 	br	80049f0 <__alt_data_end+0xfc0049f0>
 8004aa8:	800b883a 	mov	r5,r16
 8004aac:	8809883a 	mov	r4,r17
 8004ab0:	8002c3c0 	call	8002c3c <_fflush_r>
 8004ab4:	10000a1e 	bne	r2,zero,8004ae0 <__srefill_r+0x1bc>
 8004ab8:	8080030b 	ldhu	r2,12(r16)
 8004abc:	00fffdc4 	movi	r3,-9
 8004ac0:	80000215 	stw	zero,8(r16)
 8004ac4:	1886703a 	and	r3,r3,r2
 8004ac8:	80000615 	stw	zero,24(r16)
 8004acc:	003fd206 	br	8004a18 <__alt_data_end+0xfc004a18>
 8004ad0:	00800244 	movi	r2,9
 8004ad4:	88800015 	stw	r2,0(r17)
 8004ad8:	18c01014 	ori	r3,r3,64
 8004adc:	80c0030d 	sth	r3,12(r16)
 8004ae0:	00bfffc4 	movi	r2,-1
 8004ae4:	003fc206 	br	80049f0 <__alt_data_end+0xfc0049f0>
 8004ae8:	800b883a 	mov	r5,r16
 8004aec:	8809883a 	mov	r4,r17
 8004af0:	8003c780 	call	8003c78 <__smakebuf_r>
 8004af4:	003fb106 	br	80049bc <__alt_data_end+0xfc0049bc>

08004af8 <_sbrk_r>:
 8004af8:	defffd04 	addi	sp,sp,-12
 8004afc:	dc000015 	stw	r16,0(sp)
 8004b00:	040200b4 	movhi	r16,2050
 8004b04:	dc400115 	stw	r17,4(sp)
 8004b08:	843e5904 	addi	r16,r16,-1692
 8004b0c:	2023883a 	mov	r17,r4
 8004b10:	2809883a 	mov	r4,r5
 8004b14:	dfc00215 	stw	ra,8(sp)
 8004b18:	80000015 	stw	zero,0(r16)
 8004b1c:	80199900 	call	8019990 <sbrk>
 8004b20:	00ffffc4 	movi	r3,-1
 8004b24:	10c00526 	beq	r2,r3,8004b3c <_sbrk_r+0x44>
 8004b28:	dfc00217 	ldw	ra,8(sp)
 8004b2c:	dc400117 	ldw	r17,4(sp)
 8004b30:	dc000017 	ldw	r16,0(sp)
 8004b34:	dec00304 	addi	sp,sp,12
 8004b38:	f800283a 	ret
 8004b3c:	80c00017 	ldw	r3,0(r16)
 8004b40:	183ff926 	beq	r3,zero,8004b28 <__alt_data_end+0xfc004b28>
 8004b44:	88c00015 	stw	r3,0(r17)
 8004b48:	003ff706 	br	8004b28 <__alt_data_end+0xfc004b28>

08004b4c <scanf>:
 8004b4c:	defffc04 	addi	sp,sp,-16
 8004b50:	dfc00015 	stw	ra,0(sp)
 8004b54:	d9400115 	stw	r5,4(sp)
 8004b58:	d9800215 	stw	r6,8(sp)
 8004b5c:	d9c00315 	stw	r7,12(sp)
 8004b60:	008200b4 	movhi	r2,2050
 8004b64:	10b77404 	addi	r2,r2,-8752
 8004b68:	200d883a 	mov	r6,r4
 8004b6c:	11000017 	ldw	r4,0(r2)
 8004b70:	d9c00104 	addi	r7,sp,4
 8004b74:	21400117 	ldw	r5,4(r4)
 8004b78:	8008b500 	call	8008b50 <_vfscanf_r>
 8004b7c:	dfc00017 	ldw	ra,0(sp)
 8004b80:	dec00404 	addi	sp,sp,16
 8004b84:	f800283a 	ret

08004b88 <_scanf_r>:
 8004b88:	defffd04 	addi	sp,sp,-12
 8004b8c:	2805883a 	mov	r2,r5
 8004b90:	dfc00015 	stw	ra,0(sp)
 8004b94:	d9800115 	stw	r6,4(sp)
 8004b98:	d9c00215 	stw	r7,8(sp)
 8004b9c:	21400117 	ldw	r5,4(r4)
 8004ba0:	d9c00104 	addi	r7,sp,4
 8004ba4:	100d883a 	mov	r6,r2
 8004ba8:	8008b500 	call	8008b50 <_vfscanf_r>
 8004bac:	dfc00017 	ldw	ra,0(sp)
 8004bb0:	dec00304 	addi	sp,sp,12
 8004bb4:	f800283a 	ret

08004bb8 <__sread>:
 8004bb8:	defffe04 	addi	sp,sp,-8
 8004bbc:	dc000015 	stw	r16,0(sp)
 8004bc0:	2821883a 	mov	r16,r5
 8004bc4:	2940038f 	ldh	r5,14(r5)
 8004bc8:	dfc00115 	stw	ra,4(sp)
 8004bcc:	800c65c0 	call	800c65c <_read_r>
 8004bd0:	10000716 	blt	r2,zero,8004bf0 <__sread+0x38>
 8004bd4:	80c01417 	ldw	r3,80(r16)
 8004bd8:	1887883a 	add	r3,r3,r2
 8004bdc:	80c01415 	stw	r3,80(r16)
 8004be0:	dfc00117 	ldw	ra,4(sp)
 8004be4:	dc000017 	ldw	r16,0(sp)
 8004be8:	dec00204 	addi	sp,sp,8
 8004bec:	f800283a 	ret
 8004bf0:	80c0030b 	ldhu	r3,12(r16)
 8004bf4:	18fbffcc 	andi	r3,r3,61439
 8004bf8:	80c0030d 	sth	r3,12(r16)
 8004bfc:	dfc00117 	ldw	ra,4(sp)
 8004c00:	dc000017 	ldw	r16,0(sp)
 8004c04:	dec00204 	addi	sp,sp,8
 8004c08:	f800283a 	ret

08004c0c <__seofread>:
 8004c0c:	0005883a 	mov	r2,zero
 8004c10:	f800283a 	ret

08004c14 <__swrite>:
 8004c14:	2880030b 	ldhu	r2,12(r5)
 8004c18:	defffb04 	addi	sp,sp,-20
 8004c1c:	dcc00315 	stw	r19,12(sp)
 8004c20:	dc800215 	stw	r18,8(sp)
 8004c24:	dc400115 	stw	r17,4(sp)
 8004c28:	dc000015 	stw	r16,0(sp)
 8004c2c:	dfc00415 	stw	ra,16(sp)
 8004c30:	10c0400c 	andi	r3,r2,256
 8004c34:	2821883a 	mov	r16,r5
 8004c38:	2023883a 	mov	r17,r4
 8004c3c:	3025883a 	mov	r18,r6
 8004c40:	3827883a 	mov	r19,r7
 8004c44:	18000526 	beq	r3,zero,8004c5c <__swrite+0x48>
 8004c48:	2940038f 	ldh	r5,14(r5)
 8004c4c:	01c00084 	movi	r7,2
 8004c50:	000d883a 	mov	r6,zero
 8004c54:	800af980 	call	800af98 <_lseek_r>
 8004c58:	8080030b 	ldhu	r2,12(r16)
 8004c5c:	8140038f 	ldh	r5,14(r16)
 8004c60:	10bbffcc 	andi	r2,r2,61439
 8004c64:	980f883a 	mov	r7,r19
 8004c68:	900d883a 	mov	r6,r18
 8004c6c:	8809883a 	mov	r4,r17
 8004c70:	8080030d 	sth	r2,12(r16)
 8004c74:	dfc00417 	ldw	ra,16(sp)
 8004c78:	dcc00317 	ldw	r19,12(sp)
 8004c7c:	dc800217 	ldw	r18,8(sp)
 8004c80:	dc400117 	ldw	r17,4(sp)
 8004c84:	dc000017 	ldw	r16,0(sp)
 8004c88:	dec00504 	addi	sp,sp,20
 8004c8c:	8008b9c1 	jmpi	8008b9c <_write_r>

08004c90 <__sseek>:
 8004c90:	defffe04 	addi	sp,sp,-8
 8004c94:	dc000015 	stw	r16,0(sp)
 8004c98:	2821883a 	mov	r16,r5
 8004c9c:	2940038f 	ldh	r5,14(r5)
 8004ca0:	dfc00115 	stw	ra,4(sp)
 8004ca4:	800af980 	call	800af98 <_lseek_r>
 8004ca8:	00ffffc4 	movi	r3,-1
 8004cac:	10c00826 	beq	r2,r3,8004cd0 <__sseek+0x40>
 8004cb0:	80c0030b 	ldhu	r3,12(r16)
 8004cb4:	80801415 	stw	r2,80(r16)
 8004cb8:	18c40014 	ori	r3,r3,4096
 8004cbc:	80c0030d 	sth	r3,12(r16)
 8004cc0:	dfc00117 	ldw	ra,4(sp)
 8004cc4:	dc000017 	ldw	r16,0(sp)
 8004cc8:	dec00204 	addi	sp,sp,8
 8004ccc:	f800283a 	ret
 8004cd0:	80c0030b 	ldhu	r3,12(r16)
 8004cd4:	18fbffcc 	andi	r3,r3,61439
 8004cd8:	80c0030d 	sth	r3,12(r16)
 8004cdc:	dfc00117 	ldw	ra,4(sp)
 8004ce0:	dc000017 	ldw	r16,0(sp)
 8004ce4:	dec00204 	addi	sp,sp,8
 8004ce8:	f800283a 	ret

08004cec <__sclose>:
 8004cec:	2940038f 	ldh	r5,14(r5)
 8004cf0:	8008d501 	jmpi	8008d50 <_close_r>

08004cf4 <strlen>:
 8004cf4:	208000cc 	andi	r2,r4,3
 8004cf8:	10002026 	beq	r2,zero,8004d7c <strlen+0x88>
 8004cfc:	20800007 	ldb	r2,0(r4)
 8004d00:	10002026 	beq	r2,zero,8004d84 <strlen+0x90>
 8004d04:	2005883a 	mov	r2,r4
 8004d08:	00000206 	br	8004d14 <strlen+0x20>
 8004d0c:	10c00007 	ldb	r3,0(r2)
 8004d10:	18001826 	beq	r3,zero,8004d74 <strlen+0x80>
 8004d14:	10800044 	addi	r2,r2,1
 8004d18:	10c000cc 	andi	r3,r2,3
 8004d1c:	183ffb1e 	bne	r3,zero,8004d0c <__alt_data_end+0xfc004d0c>
 8004d20:	10c00017 	ldw	r3,0(r2)
 8004d24:	01ffbff4 	movhi	r7,65279
 8004d28:	39ffbfc4 	addi	r7,r7,-257
 8004d2c:	00ca303a 	nor	r5,zero,r3
 8004d30:	01a02074 	movhi	r6,32897
 8004d34:	19c7883a 	add	r3,r3,r7
 8004d38:	31a02004 	addi	r6,r6,-32640
 8004d3c:	1946703a 	and	r3,r3,r5
 8004d40:	1986703a 	and	r3,r3,r6
 8004d44:	1800091e 	bne	r3,zero,8004d6c <strlen+0x78>
 8004d48:	10800104 	addi	r2,r2,4
 8004d4c:	10c00017 	ldw	r3,0(r2)
 8004d50:	19cb883a 	add	r5,r3,r7
 8004d54:	00c6303a 	nor	r3,zero,r3
 8004d58:	28c6703a 	and	r3,r5,r3
 8004d5c:	1986703a 	and	r3,r3,r6
 8004d60:	183ff926 	beq	r3,zero,8004d48 <__alt_data_end+0xfc004d48>
 8004d64:	00000106 	br	8004d6c <strlen+0x78>
 8004d68:	10800044 	addi	r2,r2,1
 8004d6c:	10c00007 	ldb	r3,0(r2)
 8004d70:	183ffd1e 	bne	r3,zero,8004d68 <__alt_data_end+0xfc004d68>
 8004d74:	1105c83a 	sub	r2,r2,r4
 8004d78:	f800283a 	ret
 8004d7c:	2005883a 	mov	r2,r4
 8004d80:	003fe706 	br	8004d20 <__alt_data_end+0xfc004d20>
 8004d84:	0005883a 	mov	r2,zero
 8004d88:	f800283a 	ret

08004d8c <___vfprintf_internal_r>:
 8004d8c:	deffb804 	addi	sp,sp,-288
 8004d90:	dfc04715 	stw	ra,284(sp)
 8004d94:	ddc04515 	stw	r23,276(sp)
 8004d98:	dd404315 	stw	r21,268(sp)
 8004d9c:	d9002d15 	stw	r4,180(sp)
 8004da0:	282f883a 	mov	r23,r5
 8004da4:	302b883a 	mov	r21,r6
 8004da8:	d9c02e15 	stw	r7,184(sp)
 8004dac:	df004615 	stw	fp,280(sp)
 8004db0:	dd804415 	stw	r22,272(sp)
 8004db4:	dd004215 	stw	r20,264(sp)
 8004db8:	dcc04115 	stw	r19,260(sp)
 8004dbc:	dc804015 	stw	r18,256(sp)
 8004dc0:	dc403f15 	stw	r17,252(sp)
 8004dc4:	dc003e15 	stw	r16,248(sp)
 8004dc8:	800af680 	call	800af68 <_localeconv_r>
 8004dcc:	10800017 	ldw	r2,0(r2)
 8004dd0:	1009883a 	mov	r4,r2
 8004dd4:	d8803415 	stw	r2,208(sp)
 8004dd8:	8004cf40 	call	8004cf4 <strlen>
 8004ddc:	d8803715 	stw	r2,220(sp)
 8004de0:	d8802d17 	ldw	r2,180(sp)
 8004de4:	10000226 	beq	r2,zero,8004df0 <___vfprintf_internal_r+0x64>
 8004de8:	10800e17 	ldw	r2,56(r2)
 8004dec:	1000fb26 	beq	r2,zero,80051dc <___vfprintf_internal_r+0x450>
 8004df0:	b880030b 	ldhu	r2,12(r23)
 8004df4:	10c8000c 	andi	r3,r2,8192
 8004df8:	1800061e 	bne	r3,zero,8004e14 <___vfprintf_internal_r+0x88>
 8004dfc:	b9001917 	ldw	r4,100(r23)
 8004e00:	00f7ffc4 	movi	r3,-8193
 8004e04:	10880014 	ori	r2,r2,8192
 8004e08:	20c6703a 	and	r3,r4,r3
 8004e0c:	b880030d 	sth	r2,12(r23)
 8004e10:	b8c01915 	stw	r3,100(r23)
 8004e14:	10c0020c 	andi	r3,r2,8
 8004e18:	1800c326 	beq	r3,zero,8005128 <___vfprintf_internal_r+0x39c>
 8004e1c:	b8c00417 	ldw	r3,16(r23)
 8004e20:	1800c126 	beq	r3,zero,8005128 <___vfprintf_internal_r+0x39c>
 8004e24:	1080068c 	andi	r2,r2,26
 8004e28:	00c00284 	movi	r3,10
 8004e2c:	10c0c626 	beq	r2,r3,8005148 <___vfprintf_internal_r+0x3bc>
 8004e30:	d8c00404 	addi	r3,sp,16
 8004e34:	050200b4 	movhi	r20,2050
 8004e38:	d9001e04 	addi	r4,sp,120
 8004e3c:	a52efa84 	addi	r20,r20,-17430
 8004e40:	d8c01e15 	stw	r3,120(sp)
 8004e44:	d8002015 	stw	zero,128(sp)
 8004e48:	d8001f15 	stw	zero,124(sp)
 8004e4c:	d8003315 	stw	zero,204(sp)
 8004e50:	d8003615 	stw	zero,216(sp)
 8004e54:	d8003815 	stw	zero,224(sp)
 8004e58:	1811883a 	mov	r8,r3
 8004e5c:	d8003915 	stw	zero,228(sp)
 8004e60:	d8003a15 	stw	zero,232(sp)
 8004e64:	d8002f15 	stw	zero,188(sp)
 8004e68:	d9002815 	stw	r4,160(sp)
 8004e6c:	a8800007 	ldb	r2,0(r21)
 8004e70:	10028b26 	beq	r2,zero,80058a0 <___vfprintf_internal_r+0xb14>
 8004e74:	00c00944 	movi	r3,37
 8004e78:	a823883a 	mov	r17,r21
 8004e7c:	10c0021e 	bne	r2,r3,8004e88 <___vfprintf_internal_r+0xfc>
 8004e80:	00001406 	br	8004ed4 <___vfprintf_internal_r+0x148>
 8004e84:	10c00326 	beq	r2,r3,8004e94 <___vfprintf_internal_r+0x108>
 8004e88:	8c400044 	addi	r17,r17,1
 8004e8c:	88800007 	ldb	r2,0(r17)
 8004e90:	103ffc1e 	bne	r2,zero,8004e84 <__alt_data_end+0xfc004e84>
 8004e94:	8d61c83a 	sub	r16,r17,r21
 8004e98:	80000e26 	beq	r16,zero,8004ed4 <___vfprintf_internal_r+0x148>
 8004e9c:	d8c02017 	ldw	r3,128(sp)
 8004ea0:	d8801f17 	ldw	r2,124(sp)
 8004ea4:	45400015 	stw	r21,0(r8)
 8004ea8:	1c07883a 	add	r3,r3,r16
 8004eac:	10800044 	addi	r2,r2,1
 8004eb0:	d8c02015 	stw	r3,128(sp)
 8004eb4:	44000115 	stw	r16,4(r8)
 8004eb8:	d8801f15 	stw	r2,124(sp)
 8004ebc:	00c001c4 	movi	r3,7
 8004ec0:	1880a916 	blt	r3,r2,8005168 <___vfprintf_internal_r+0x3dc>
 8004ec4:	42000204 	addi	r8,r8,8
 8004ec8:	d9402f17 	ldw	r5,188(sp)
 8004ecc:	2c0b883a 	add	r5,r5,r16
 8004ed0:	d9402f15 	stw	r5,188(sp)
 8004ed4:	88800007 	ldb	r2,0(r17)
 8004ed8:	1000aa26 	beq	r2,zero,8005184 <___vfprintf_internal_r+0x3f8>
 8004edc:	8d400044 	addi	r21,r17,1
 8004ee0:	8c400047 	ldb	r17,1(r17)
 8004ee4:	0021883a 	mov	r16,zero
 8004ee8:	00bfffc4 	movi	r2,-1
 8004eec:	0025883a 	mov	r18,zero
 8004ef0:	dc002905 	stb	r16,164(sp)
 8004ef4:	d8002785 	stb	zero,158(sp)
 8004ef8:	d8002b05 	stb	zero,172(sp)
 8004efc:	d8802a15 	stw	r2,168(sp)
 8004f00:	d8003115 	stw	zero,196(sp)
 8004f04:	04c01604 	movi	r19,88
 8004f08:	05800244 	movi	r22,9
 8004f0c:	9021883a 	mov	r16,r18
 8004f10:	4039883a 	mov	fp,r8
 8004f14:	ad400044 	addi	r21,r21,1
 8004f18:	88bff804 	addi	r2,r17,-32
 8004f1c:	98833236 	bltu	r19,r2,8005be8 <___vfprintf_internal_r+0xe5c>
 8004f20:	100490ba 	slli	r2,r2,2
 8004f24:	00c20034 	movhi	r3,2048
 8004f28:	18d3ce04 	addi	r3,r3,20280
 8004f2c:	10c5883a 	add	r2,r2,r3
 8004f30:	10800017 	ldw	r2,0(r2)
 8004f34:	1000683a 	jmp	r2
 8004f38:	08005ae0 	cmpeqi	zero,at,363
 8004f3c:	08005be8 	cmpgeui	zero,at,367
 8004f40:	08005be8 	cmpgeui	zero,at,367
 8004f44:	08005b00 	call	8005b0 <__alt_mem_onchip_memory+0x8005b0>
 8004f48:	08005be8 	cmpgeui	zero,at,367
 8004f4c:	08005be8 	cmpgeui	zero,at,367
 8004f50:	08005be8 	cmpgeui	zero,at,367
 8004f54:	08005be8 	cmpgeui	zero,at,367
 8004f58:	08005be8 	cmpgeui	zero,at,367
 8004f5c:	08005be8 	cmpgeui	zero,at,367
 8004f60:	080051e8 	cmpgeui	zero,at,327
 8004f64:	080059f0 	cmpltui	zero,at,359
 8004f68:	08005be8 	cmpgeui	zero,at,367
 8004f6c:	080050ac 	andhi	zero,at,322
 8004f70:	0800520c 	andi	zero,at,328
 8004f74:	08005be8 	cmpgeui	zero,at,367
 8004f78:	0800525c 	xori	zero,at,329
 8004f7c:	08005268 	cmpgeui	zero,at,329
 8004f80:	08005268 	cmpgeui	zero,at,329
 8004f84:	08005268 	cmpgeui	zero,at,329
 8004f88:	08005268 	cmpgeui	zero,at,329
 8004f8c:	08005268 	cmpgeui	zero,at,329
 8004f90:	08005268 	cmpgeui	zero,at,329
 8004f94:	08005268 	cmpgeui	zero,at,329
 8004f98:	08005268 	cmpgeui	zero,at,329
 8004f9c:	08005268 	cmpgeui	zero,at,329
 8004fa0:	08005be8 	cmpgeui	zero,at,367
 8004fa4:	08005be8 	cmpgeui	zero,at,367
 8004fa8:	08005be8 	cmpgeui	zero,at,367
 8004fac:	08005be8 	cmpgeui	zero,at,367
 8004fb0:	08005be8 	cmpgeui	zero,at,367
 8004fb4:	08005be8 	cmpgeui	zero,at,367
 8004fb8:	08005be8 	cmpgeui	zero,at,367
 8004fbc:	08005be8 	cmpgeui	zero,at,367
 8004fc0:	08005be8 	cmpgeui	zero,at,367
 8004fc4:	08005be8 	cmpgeui	zero,at,367
 8004fc8:	080052a4 	muli	zero,at,330
 8004fcc:	0800536c 	andhi	zero,at,333
 8004fd0:	08005be8 	cmpgeui	zero,at,367
 8004fd4:	0800536c 	andhi	zero,at,333
 8004fd8:	08005be8 	cmpgeui	zero,at,367
 8004fdc:	08005be8 	cmpgeui	zero,at,367
 8004fe0:	08005be8 	cmpgeui	zero,at,367
 8004fe4:	08005be8 	cmpgeui	zero,at,367
 8004fe8:	08005418 	cmpnei	zero,at,336
 8004fec:	08005be8 	cmpgeui	zero,at,367
 8004ff0:	08005be8 	cmpgeui	zero,at,367
 8004ff4:	08005424 	muli	zero,at,336
 8004ff8:	08005be8 	cmpgeui	zero,at,367
 8004ffc:	08005be8 	cmpgeui	zero,at,367
 8005000:	08005be8 	cmpgeui	zero,at,367
 8005004:	08005be8 	cmpgeui	zero,at,367
 8005008:	08005be8 	cmpgeui	zero,at,367
 800500c:	080058a8 	cmpgeui	zero,at,354
 8005010:	08005be8 	cmpgeui	zero,at,367
 8005014:	08005be8 	cmpgeui	zero,at,367
 8005018:	08005914 	ori	zero,at,356
 800501c:	08005be8 	cmpgeui	zero,at,367
 8005020:	08005be8 	cmpgeui	zero,at,367
 8005024:	08005be8 	cmpgeui	zero,at,367
 8005028:	08005be8 	cmpgeui	zero,at,367
 800502c:	08005be8 	cmpgeui	zero,at,367
 8005030:	08005be8 	cmpgeui	zero,at,367
 8005034:	08005be8 	cmpgeui	zero,at,367
 8005038:	08005be8 	cmpgeui	zero,at,367
 800503c:	08005be8 	cmpgeui	zero,at,367
 8005040:	08005be8 	cmpgeui	zero,at,367
 8005044:	08005b8c 	andi	zero,at,366
 8005048:	08005b0c 	andi	zero,at,364
 800504c:	0800536c 	andhi	zero,at,333
 8005050:	0800536c 	andhi	zero,at,333
 8005054:	0800536c 	andhi	zero,at,333
 8005058:	08005b2c 	andhi	zero,at,364
 800505c:	08005b0c 	andi	zero,at,364
 8005060:	08005be8 	cmpgeui	zero,at,367
 8005064:	08005be8 	cmpgeui	zero,at,367
 8005068:	08005b38 	rdprs	zero,at,364
 800506c:	08005be8 	cmpgeui	zero,at,367
 8005070:	08005b4c 	andi	zero,at,365
 8005074:	080059d0 	cmplti	zero,at,359
 8005078:	080050b8 	rdprs	zero,at,322
 800507c:	08005a08 	cmpgei	zero,at,360
 8005080:	08005be8 	cmpgeui	zero,at,367
 8005084:	08005a14 	ori	zero,at,360
 8005088:	08005be8 	cmpgeui	zero,at,367
 800508c:	08005a78 	rdprs	zero,at,361
 8005090:	08005be8 	cmpgeui	zero,at,367
 8005094:	08005be8 	cmpgeui	zero,at,367
 8005098:	08005a98 	cmpnei	zero,at,362
 800509c:	d8c03117 	ldw	r3,196(sp)
 80050a0:	d8802e15 	stw	r2,184(sp)
 80050a4:	00c7c83a 	sub	r3,zero,r3
 80050a8:	d8c03115 	stw	r3,196(sp)
 80050ac:	84000114 	ori	r16,r16,4
 80050b0:	ac400007 	ldb	r17,0(r21)
 80050b4:	003f9706 	br	8004f14 <__alt_data_end+0xfc004f14>
 80050b8:	00800c04 	movi	r2,48
 80050bc:	d8802705 	stb	r2,156(sp)
 80050c0:	00801e04 	movi	r2,120
 80050c4:	d8802745 	stb	r2,157(sp)
 80050c8:	d9002a17 	ldw	r4,168(sp)
 80050cc:	d8802e17 	ldw	r2,184(sp)
 80050d0:	d8002785 	stb	zero,158(sp)
 80050d4:	e011883a 	mov	r8,fp
 80050d8:	10c00104 	addi	r3,r2,4
 80050dc:	14c00017 	ldw	r19,0(r2)
 80050e0:	002d883a 	mov	r22,zero
 80050e4:	80800094 	ori	r2,r16,2
 80050e8:	2002ca16 	blt	r4,zero,8005c14 <___vfprintf_internal_r+0xe88>
 80050ec:	00bfdfc4 	movi	r2,-129
 80050f0:	80a4703a 	and	r18,r16,r2
 80050f4:	d8c02e15 	stw	r3,184(sp)
 80050f8:	94800094 	ori	r18,r18,2
 80050fc:	9802b41e 	bne	r19,zero,8005bd0 <___vfprintf_internal_r+0xe44>
 8005100:	014200b4 	movhi	r5,2050
 8005104:	296ef304 	addi	r5,r5,-17460
 8005108:	d9403915 	stw	r5,228(sp)
 800510c:	04401e04 	movi	r17,120
 8005110:	d8802a17 	ldw	r2,168(sp)
 8005114:	0039883a 	mov	fp,zero
 8005118:	1001fa26 	beq	r2,zero,8005904 <___vfprintf_internal_r+0xb78>
 800511c:	0027883a 	mov	r19,zero
 8005120:	002d883a 	mov	r22,zero
 8005124:	00021906 	br	800598c <___vfprintf_internal_r+0xc00>
 8005128:	d9002d17 	ldw	r4,180(sp)
 800512c:	b80b883a 	mov	r5,r23
 8005130:	8008bfc0 	call	8008bfc <__swsetup_r>
 8005134:	1005dc1e 	bne	r2,zero,80068a8 <___vfprintf_internal_r+0x1b1c>
 8005138:	b880030b 	ldhu	r2,12(r23)
 800513c:	00c00284 	movi	r3,10
 8005140:	1080068c 	andi	r2,r2,26
 8005144:	10ff3a1e 	bne	r2,r3,8004e30 <__alt_data_end+0xfc004e30>
 8005148:	b880038f 	ldh	r2,14(r23)
 800514c:	103f3816 	blt	r2,zero,8004e30 <__alt_data_end+0xfc004e30>
 8005150:	d9c02e17 	ldw	r7,184(sp)
 8005154:	d9002d17 	ldw	r4,180(sp)
 8005158:	a80d883a 	mov	r6,r21
 800515c:	b80b883a 	mov	r5,r23
 8005160:	80070840 	call	8007084 <__sbprintf>
 8005164:	00001106 	br	80051ac <___vfprintf_internal_r+0x420>
 8005168:	d9002d17 	ldw	r4,180(sp)
 800516c:	d9801e04 	addi	r6,sp,120
 8005170:	b80b883a 	mov	r5,r23
 8005174:	80117d00 	call	80117d0 <__sprint_r>
 8005178:	1000081e 	bne	r2,zero,800519c <___vfprintf_internal_r+0x410>
 800517c:	da000404 	addi	r8,sp,16
 8005180:	003f5106 	br	8004ec8 <__alt_data_end+0xfc004ec8>
 8005184:	d8802017 	ldw	r2,128(sp)
 8005188:	10000426 	beq	r2,zero,800519c <___vfprintf_internal_r+0x410>
 800518c:	d9002d17 	ldw	r4,180(sp)
 8005190:	d9801e04 	addi	r6,sp,120
 8005194:	b80b883a 	mov	r5,r23
 8005198:	80117d00 	call	80117d0 <__sprint_r>
 800519c:	b880030b 	ldhu	r2,12(r23)
 80051a0:	1080100c 	andi	r2,r2,64
 80051a4:	1005c01e 	bne	r2,zero,80068a8 <___vfprintf_internal_r+0x1b1c>
 80051a8:	d8802f17 	ldw	r2,188(sp)
 80051ac:	dfc04717 	ldw	ra,284(sp)
 80051b0:	df004617 	ldw	fp,280(sp)
 80051b4:	ddc04517 	ldw	r23,276(sp)
 80051b8:	dd804417 	ldw	r22,272(sp)
 80051bc:	dd404317 	ldw	r21,268(sp)
 80051c0:	dd004217 	ldw	r20,264(sp)
 80051c4:	dcc04117 	ldw	r19,260(sp)
 80051c8:	dc804017 	ldw	r18,256(sp)
 80051cc:	dc403f17 	ldw	r17,252(sp)
 80051d0:	dc003e17 	ldw	r16,248(sp)
 80051d4:	dec04804 	addi	sp,sp,288
 80051d8:	f800283a 	ret
 80051dc:	d9002d17 	ldw	r4,180(sp)
 80051e0:	80030280 	call	8003028 <__sinit>
 80051e4:	003f0206 	br	8004df0 <__alt_data_end+0xfc004df0>
 80051e8:	d9002e17 	ldw	r4,184(sp)
 80051ec:	d9402e17 	ldw	r5,184(sp)
 80051f0:	21000017 	ldw	r4,0(r4)
 80051f4:	28800104 	addi	r2,r5,4
 80051f8:	d9003115 	stw	r4,196(sp)
 80051fc:	203fa716 	blt	r4,zero,800509c <__alt_data_end+0xfc00509c>
 8005200:	d8802e15 	stw	r2,184(sp)
 8005204:	ac400007 	ldb	r17,0(r21)
 8005208:	003f4206 	br	8004f14 <__alt_data_end+0xfc004f14>
 800520c:	ac400007 	ldb	r17,0(r21)
 8005210:	01000a84 	movi	r4,42
 8005214:	a8c00044 	addi	r3,r21,1
 8005218:	89075826 	beq	r17,r4,8006f7c <___vfprintf_internal_r+0x21f0>
 800521c:	8cbff404 	addi	r18,r17,-48
 8005220:	b486ae36 	bltu	r22,r18,8006cdc <___vfprintf_internal_r+0x1f50>
 8005224:	0009883a 	mov	r4,zero
 8005228:	1823883a 	mov	r17,r3
 800522c:	01400284 	movi	r5,10
 8005230:	80028f40 	call	80028f4 <__mulsi3>
 8005234:	88c00007 	ldb	r3,0(r17)
 8005238:	1489883a 	add	r4,r2,r18
 800523c:	8d400044 	addi	r21,r17,1
 8005240:	1cbff404 	addi	r18,r3,-48
 8005244:	a823883a 	mov	r17,r21
 8005248:	b4bff82e 	bgeu	r22,r18,800522c <__alt_data_end+0xfc00522c>
 800524c:	1823883a 	mov	r17,r3
 8005250:	2005f616 	blt	r4,zero,8006a2c <___vfprintf_internal_r+0x1ca0>
 8005254:	d9002a15 	stw	r4,168(sp)
 8005258:	003f2f06 	br	8004f18 <__alt_data_end+0xfc004f18>
 800525c:	84002014 	ori	r16,r16,128
 8005260:	ac400007 	ldb	r17,0(r21)
 8005264:	003f2b06 	br	8004f14 <__alt_data_end+0xfc004f14>
 8005268:	8cbff404 	addi	r18,r17,-48
 800526c:	d8003115 	stw	zero,196(sp)
 8005270:	0009883a 	mov	r4,zero
 8005274:	a823883a 	mov	r17,r21
 8005278:	01400284 	movi	r5,10
 800527c:	80028f40 	call	80028f4 <__mulsi3>
 8005280:	88c00007 	ldb	r3,0(r17)
 8005284:	9089883a 	add	r4,r18,r2
 8005288:	ad400044 	addi	r21,r21,1
 800528c:	1cbff404 	addi	r18,r3,-48
 8005290:	a823883a 	mov	r17,r21
 8005294:	b4bff82e 	bgeu	r22,r18,8005278 <__alt_data_end+0xfc005278>
 8005298:	1823883a 	mov	r17,r3
 800529c:	d9003115 	stw	r4,196(sp)
 80052a0:	003f1d06 	br	8004f18 <__alt_data_end+0xfc004f18>
 80052a4:	8025883a 	mov	r18,r16
 80052a8:	dc002903 	ldbu	r16,164(sp)
 80052ac:	e011883a 	mov	r8,fp
 80052b0:	84003fcc 	andi	r16,r16,255
 80052b4:	8007531e 	bne	r16,zero,8007004 <___vfprintf_internal_r+0x2278>
 80052b8:	94800414 	ori	r18,r18,16
 80052bc:	9080080c 	andi	r2,r18,32
 80052c0:	1003a326 	beq	r2,zero,8006150 <___vfprintf_internal_r+0x13c4>
 80052c4:	d9002e17 	ldw	r4,184(sp)
 80052c8:	20800117 	ldw	r2,4(r4)
 80052cc:	24c00017 	ldw	r19,0(r4)
 80052d0:	21000204 	addi	r4,r4,8
 80052d4:	d9002e15 	stw	r4,184(sp)
 80052d8:	102d883a 	mov	r22,r2
 80052dc:	10047316 	blt	r2,zero,80064ac <___vfprintf_internal_r+0x1720>
 80052e0:	d9002a17 	ldw	r4,168(sp)
 80052e4:	df002783 	ldbu	fp,158(sp)
 80052e8:	2003e416 	blt	r4,zero,800627c <___vfprintf_internal_r+0x14f0>
 80052ec:	00ffdfc4 	movi	r3,-129
 80052f0:	9d84b03a 	or	r2,r19,r22
 80052f4:	90e4703a 	and	r18,r18,r3
 80052f8:	10018026 	beq	r2,zero,80058fc <___vfprintf_internal_r+0xb70>
 80052fc:	b003ab26 	beq	r22,zero,80061ac <___vfprintf_internal_r+0x1420>
 8005300:	dc402915 	stw	r17,164(sp)
 8005304:	dc001e04 	addi	r16,sp,120
 8005308:	b023883a 	mov	r17,r22
 800530c:	402d883a 	mov	r22,r8
 8005310:	9809883a 	mov	r4,r19
 8005314:	880b883a 	mov	r5,r17
 8005318:	01800284 	movi	r6,10
 800531c:	000f883a 	mov	r7,zero
 8005320:	8015d580 	call	8015d58 <__umoddi3>
 8005324:	10800c04 	addi	r2,r2,48
 8005328:	843fffc4 	addi	r16,r16,-1
 800532c:	9809883a 	mov	r4,r19
 8005330:	880b883a 	mov	r5,r17
 8005334:	80800005 	stb	r2,0(r16)
 8005338:	01800284 	movi	r6,10
 800533c:	000f883a 	mov	r7,zero
 8005340:	801575c0 	call	801575c <__udivdi3>
 8005344:	1027883a 	mov	r19,r2
 8005348:	10c4b03a 	or	r2,r2,r3
 800534c:	1823883a 	mov	r17,r3
 8005350:	103fef1e 	bne	r2,zero,8005310 <__alt_data_end+0xfc005310>
 8005354:	d8c02817 	ldw	r3,160(sp)
 8005358:	dc402917 	ldw	r17,164(sp)
 800535c:	b011883a 	mov	r8,r22
 8005360:	1c07c83a 	sub	r3,r3,r16
 8005364:	d8c02b15 	stw	r3,172(sp)
 8005368:	00005f06 	br	80054e8 <___vfprintf_internal_r+0x75c>
 800536c:	8025883a 	mov	r18,r16
 8005370:	dc002903 	ldbu	r16,164(sp)
 8005374:	e011883a 	mov	r8,fp
 8005378:	84003fcc 	andi	r16,r16,255
 800537c:	80071e1e 	bne	r16,zero,8006ff8 <___vfprintf_internal_r+0x226c>
 8005380:	9080020c 	andi	r2,r18,8
 8005384:	1004af26 	beq	r2,zero,8006644 <___vfprintf_internal_r+0x18b8>
 8005388:	d9002e17 	ldw	r4,184(sp)
 800538c:	d9402e17 	ldw	r5,184(sp)
 8005390:	d8802e17 	ldw	r2,184(sp)
 8005394:	21000017 	ldw	r4,0(r4)
 8005398:	29400117 	ldw	r5,4(r5)
 800539c:	10800204 	addi	r2,r2,8
 80053a0:	d9003615 	stw	r4,216(sp)
 80053a4:	d9403815 	stw	r5,224(sp)
 80053a8:	d8802e15 	stw	r2,184(sp)
 80053ac:	d9003617 	ldw	r4,216(sp)
 80053b0:	d9403817 	ldw	r5,224(sp)
 80053b4:	da003d15 	stw	r8,244(sp)
 80053b8:	04000044 	movi	r16,1
 80053bc:	800cc200 	call	800cc20 <__fpclassifyd>
 80053c0:	da003d17 	ldw	r8,244(sp)
 80053c4:	1404441e 	bne	r2,r16,80064d8 <___vfprintf_internal_r+0x174c>
 80053c8:	d9003617 	ldw	r4,216(sp)
 80053cc:	d9403817 	ldw	r5,224(sp)
 80053d0:	000d883a 	mov	r6,zero
 80053d4:	000f883a 	mov	r7,zero
 80053d8:	80178f80 	call	80178f8 <__ledf2>
 80053dc:	da003d17 	ldw	r8,244(sp)
 80053e0:	1005e316 	blt	r2,zero,8006b70 <___vfprintf_internal_r+0x1de4>
 80053e4:	df002783 	ldbu	fp,158(sp)
 80053e8:	008011c4 	movi	r2,71
 80053ec:	1445580e 	bge	r2,r17,8006950 <___vfprintf_internal_r+0x1bc4>
 80053f0:	040200b4 	movhi	r16,2050
 80053f4:	842eeb04 	addi	r16,r16,-17492
 80053f8:	00c000c4 	movi	r3,3
 80053fc:	00bfdfc4 	movi	r2,-129
 8005400:	d8c02915 	stw	r3,164(sp)
 8005404:	90a4703a 	and	r18,r18,r2
 8005408:	d8c02b15 	stw	r3,172(sp)
 800540c:	d8002a15 	stw	zero,168(sp)
 8005410:	d8003215 	stw	zero,200(sp)
 8005414:	00003a06 	br	8005500 <___vfprintf_internal_r+0x774>
 8005418:	84000214 	ori	r16,r16,8
 800541c:	ac400007 	ldb	r17,0(r21)
 8005420:	003ebc06 	br	8004f14 <__alt_data_end+0xfc004f14>
 8005424:	8025883a 	mov	r18,r16
 8005428:	dc002903 	ldbu	r16,164(sp)
 800542c:	e011883a 	mov	r8,fp
 8005430:	84003fcc 	andi	r16,r16,255
 8005434:	8007001e 	bne	r16,zero,8007038 <___vfprintf_internal_r+0x22ac>
 8005438:	94800414 	ori	r18,r18,16
 800543c:	9080080c 	andi	r2,r18,32
 8005440:	1002fa26 	beq	r2,zero,800602c <___vfprintf_internal_r+0x12a0>
 8005444:	d9002e17 	ldw	r4,184(sp)
 8005448:	d9402a17 	ldw	r5,168(sp)
 800544c:	d8002785 	stb	zero,158(sp)
 8005450:	20800204 	addi	r2,r4,8
 8005454:	24c00017 	ldw	r19,0(r4)
 8005458:	25800117 	ldw	r22,4(r4)
 800545c:	2804b116 	blt	r5,zero,8006724 <___vfprintf_internal_r+0x1998>
 8005460:	013fdfc4 	movi	r4,-129
 8005464:	9d86b03a 	or	r3,r19,r22
 8005468:	d8802e15 	stw	r2,184(sp)
 800546c:	9124703a 	and	r18,r18,r4
 8005470:	1802fb1e 	bne	r3,zero,8006060 <___vfprintf_internal_r+0x12d4>
 8005474:	d8c02a17 	ldw	r3,168(sp)
 8005478:	0039883a 	mov	fp,zero
 800547c:	1805e526 	beq	r3,zero,8006c14 <___vfprintf_internal_r+0x1e88>
 8005480:	0027883a 	mov	r19,zero
 8005484:	002d883a 	mov	r22,zero
 8005488:	dc001e04 	addi	r16,sp,120
 800548c:	9806d0fa 	srli	r3,r19,3
 8005490:	b008977a 	slli	r4,r22,29
 8005494:	b02cd0fa 	srli	r22,r22,3
 8005498:	9cc001cc 	andi	r19,r19,7
 800549c:	98800c04 	addi	r2,r19,48
 80054a0:	843fffc4 	addi	r16,r16,-1
 80054a4:	20e6b03a 	or	r19,r4,r3
 80054a8:	80800005 	stb	r2,0(r16)
 80054ac:	9d86b03a 	or	r3,r19,r22
 80054b0:	183ff61e 	bne	r3,zero,800548c <__alt_data_end+0xfc00548c>
 80054b4:	90c0004c 	andi	r3,r18,1
 80054b8:	18014126 	beq	r3,zero,80059c0 <___vfprintf_internal_r+0xc34>
 80054bc:	10803fcc 	andi	r2,r2,255
 80054c0:	1080201c 	xori	r2,r2,128
 80054c4:	10bfe004 	addi	r2,r2,-128
 80054c8:	00c00c04 	movi	r3,48
 80054cc:	10c13c26 	beq	r2,r3,80059c0 <___vfprintf_internal_r+0xc34>
 80054d0:	80ffffc5 	stb	r3,-1(r16)
 80054d4:	d8c02817 	ldw	r3,160(sp)
 80054d8:	80bfffc4 	addi	r2,r16,-1
 80054dc:	1021883a 	mov	r16,r2
 80054e0:	1887c83a 	sub	r3,r3,r2
 80054e4:	d8c02b15 	stw	r3,172(sp)
 80054e8:	d8802b17 	ldw	r2,172(sp)
 80054ec:	d9002a17 	ldw	r4,168(sp)
 80054f0:	1100010e 	bge	r2,r4,80054f8 <___vfprintf_internal_r+0x76c>
 80054f4:	2005883a 	mov	r2,r4
 80054f8:	d8802915 	stw	r2,164(sp)
 80054fc:	d8003215 	stw	zero,200(sp)
 8005500:	e7003fcc 	andi	fp,fp,255
 8005504:	e700201c 	xori	fp,fp,128
 8005508:	e73fe004 	addi	fp,fp,-128
 800550c:	e0000326 	beq	fp,zero,800551c <___vfprintf_internal_r+0x790>
 8005510:	d8c02917 	ldw	r3,164(sp)
 8005514:	18c00044 	addi	r3,r3,1
 8005518:	d8c02915 	stw	r3,164(sp)
 800551c:	90c0008c 	andi	r3,r18,2
 8005520:	d8c02c15 	stw	r3,176(sp)
 8005524:	18000326 	beq	r3,zero,8005534 <___vfprintf_internal_r+0x7a8>
 8005528:	d8c02917 	ldw	r3,164(sp)
 800552c:	18c00084 	addi	r3,r3,2
 8005530:	d8c02915 	stw	r3,164(sp)
 8005534:	90c0210c 	andi	r3,r18,132
 8005538:	d8c03015 	stw	r3,192(sp)
 800553c:	1801c51e 	bne	r3,zero,8005c54 <___vfprintf_internal_r+0xec8>
 8005540:	d9003117 	ldw	r4,196(sp)
 8005544:	d8c02917 	ldw	r3,164(sp)
 8005548:	20e7c83a 	sub	r19,r4,r3
 800554c:	04c1c10e 	bge	zero,r19,8005c54 <___vfprintf_internal_r+0xec8>
 8005550:	02400404 	movi	r9,16
 8005554:	d8c02017 	ldw	r3,128(sp)
 8005558:	d8801f17 	ldw	r2,124(sp)
 800555c:	4cc52f0e 	bge	r9,r19,8006a1c <___vfprintf_internal_r+0x1c90>
 8005560:	014200b4 	movhi	r5,2050
 8005564:	296efe84 	addi	r5,r5,-17414
 8005568:	dc403b15 	stw	r17,236(sp)
 800556c:	d9403515 	stw	r5,212(sp)
 8005570:	9823883a 	mov	r17,r19
 8005574:	482d883a 	mov	r22,r9
 8005578:	9027883a 	mov	r19,r18
 800557c:	070001c4 	movi	fp,7
 8005580:	8025883a 	mov	r18,r16
 8005584:	dc002d17 	ldw	r16,180(sp)
 8005588:	00000306 	br	8005598 <___vfprintf_internal_r+0x80c>
 800558c:	8c7ffc04 	addi	r17,r17,-16
 8005590:	42000204 	addi	r8,r8,8
 8005594:	b440130e 	bge	r22,r17,80055e4 <___vfprintf_internal_r+0x858>
 8005598:	010200b4 	movhi	r4,2050
 800559c:	18c00404 	addi	r3,r3,16
 80055a0:	10800044 	addi	r2,r2,1
 80055a4:	212efe84 	addi	r4,r4,-17414
 80055a8:	41000015 	stw	r4,0(r8)
 80055ac:	45800115 	stw	r22,4(r8)
 80055b0:	d8c02015 	stw	r3,128(sp)
 80055b4:	d8801f15 	stw	r2,124(sp)
 80055b8:	e0bff40e 	bge	fp,r2,800558c <__alt_data_end+0xfc00558c>
 80055bc:	d9801e04 	addi	r6,sp,120
 80055c0:	b80b883a 	mov	r5,r23
 80055c4:	8009883a 	mov	r4,r16
 80055c8:	80117d00 	call	80117d0 <__sprint_r>
 80055cc:	103ef31e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 80055d0:	8c7ffc04 	addi	r17,r17,-16
 80055d4:	d8c02017 	ldw	r3,128(sp)
 80055d8:	d8801f17 	ldw	r2,124(sp)
 80055dc:	da000404 	addi	r8,sp,16
 80055e0:	b47fed16 	blt	r22,r17,8005598 <__alt_data_end+0xfc005598>
 80055e4:	9021883a 	mov	r16,r18
 80055e8:	9825883a 	mov	r18,r19
 80055ec:	8827883a 	mov	r19,r17
 80055f0:	dc403b17 	ldw	r17,236(sp)
 80055f4:	d9403517 	ldw	r5,212(sp)
 80055f8:	98c7883a 	add	r3,r19,r3
 80055fc:	10800044 	addi	r2,r2,1
 8005600:	41400015 	stw	r5,0(r8)
 8005604:	44c00115 	stw	r19,4(r8)
 8005608:	d8c02015 	stw	r3,128(sp)
 800560c:	d8801f15 	stw	r2,124(sp)
 8005610:	010001c4 	movi	r4,7
 8005614:	2082c516 	blt	r4,r2,800612c <___vfprintf_internal_r+0x13a0>
 8005618:	df002787 	ldb	fp,158(sp)
 800561c:	42000204 	addi	r8,r8,8
 8005620:	e0000c26 	beq	fp,zero,8005654 <___vfprintf_internal_r+0x8c8>
 8005624:	d8801f17 	ldw	r2,124(sp)
 8005628:	d9002784 	addi	r4,sp,158
 800562c:	18c00044 	addi	r3,r3,1
 8005630:	10800044 	addi	r2,r2,1
 8005634:	41000015 	stw	r4,0(r8)
 8005638:	01000044 	movi	r4,1
 800563c:	41000115 	stw	r4,4(r8)
 8005640:	d8c02015 	stw	r3,128(sp)
 8005644:	d8801f15 	stw	r2,124(sp)
 8005648:	010001c4 	movi	r4,7
 800564c:	20825e16 	blt	r4,r2,8005fc8 <___vfprintf_internal_r+0x123c>
 8005650:	42000204 	addi	r8,r8,8
 8005654:	d8802c17 	ldw	r2,176(sp)
 8005658:	10000c26 	beq	r2,zero,800568c <___vfprintf_internal_r+0x900>
 800565c:	d8801f17 	ldw	r2,124(sp)
 8005660:	d9002704 	addi	r4,sp,156
 8005664:	18c00084 	addi	r3,r3,2
 8005668:	10800044 	addi	r2,r2,1
 800566c:	41000015 	stw	r4,0(r8)
 8005670:	01000084 	movi	r4,2
 8005674:	41000115 	stw	r4,4(r8)
 8005678:	d8c02015 	stw	r3,128(sp)
 800567c:	d8801f15 	stw	r2,124(sp)
 8005680:	010001c4 	movi	r4,7
 8005684:	20825816 	blt	r4,r2,8005fe8 <___vfprintf_internal_r+0x125c>
 8005688:	42000204 	addi	r8,r8,8
 800568c:	d9003017 	ldw	r4,192(sp)
 8005690:	00802004 	movi	r2,128
 8005694:	2081bb26 	beq	r4,r2,8005d84 <___vfprintf_internal_r+0xff8>
 8005698:	d9402a17 	ldw	r5,168(sp)
 800569c:	d8802b17 	ldw	r2,172(sp)
 80056a0:	28adc83a 	sub	r22,r5,r2
 80056a4:	0580310e 	bge	zero,r22,800576c <___vfprintf_internal_r+0x9e0>
 80056a8:	07000404 	movi	fp,16
 80056ac:	d8801f17 	ldw	r2,124(sp)
 80056b0:	e584360e 	bge	fp,r22,800678c <___vfprintf_internal_r+0x1a00>
 80056b4:	014200b4 	movhi	r5,2050
 80056b8:	296efa84 	addi	r5,r5,-17430
 80056bc:	dc402a15 	stw	r17,168(sp)
 80056c0:	d9402c15 	stw	r5,176(sp)
 80056c4:	b023883a 	mov	r17,r22
 80056c8:	04c001c4 	movi	r19,7
 80056cc:	a82d883a 	mov	r22,r21
 80056d0:	902b883a 	mov	r21,r18
 80056d4:	8025883a 	mov	r18,r16
 80056d8:	dc002d17 	ldw	r16,180(sp)
 80056dc:	00000306 	br	80056ec <___vfprintf_internal_r+0x960>
 80056e0:	8c7ffc04 	addi	r17,r17,-16
 80056e4:	42000204 	addi	r8,r8,8
 80056e8:	e440110e 	bge	fp,r17,8005730 <___vfprintf_internal_r+0x9a4>
 80056ec:	18c00404 	addi	r3,r3,16
 80056f0:	10800044 	addi	r2,r2,1
 80056f4:	45000015 	stw	r20,0(r8)
 80056f8:	47000115 	stw	fp,4(r8)
 80056fc:	d8c02015 	stw	r3,128(sp)
 8005700:	d8801f15 	stw	r2,124(sp)
 8005704:	98bff60e 	bge	r19,r2,80056e0 <__alt_data_end+0xfc0056e0>
 8005708:	d9801e04 	addi	r6,sp,120
 800570c:	b80b883a 	mov	r5,r23
 8005710:	8009883a 	mov	r4,r16
 8005714:	80117d00 	call	80117d0 <__sprint_r>
 8005718:	103ea01e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 800571c:	8c7ffc04 	addi	r17,r17,-16
 8005720:	d8c02017 	ldw	r3,128(sp)
 8005724:	d8801f17 	ldw	r2,124(sp)
 8005728:	da000404 	addi	r8,sp,16
 800572c:	e47fef16 	blt	fp,r17,80056ec <__alt_data_end+0xfc0056ec>
 8005730:	9021883a 	mov	r16,r18
 8005734:	a825883a 	mov	r18,r21
 8005738:	b02b883a 	mov	r21,r22
 800573c:	882d883a 	mov	r22,r17
 8005740:	dc402a17 	ldw	r17,168(sp)
 8005744:	d9002c17 	ldw	r4,176(sp)
 8005748:	1d87883a 	add	r3,r3,r22
 800574c:	10800044 	addi	r2,r2,1
 8005750:	41000015 	stw	r4,0(r8)
 8005754:	45800115 	stw	r22,4(r8)
 8005758:	d8c02015 	stw	r3,128(sp)
 800575c:	d8801f15 	stw	r2,124(sp)
 8005760:	010001c4 	movi	r4,7
 8005764:	20821016 	blt	r4,r2,8005fa8 <___vfprintf_internal_r+0x121c>
 8005768:	42000204 	addi	r8,r8,8
 800576c:	9080400c 	andi	r2,r18,256
 8005770:	10013a1e 	bne	r2,zero,8005c5c <___vfprintf_internal_r+0xed0>
 8005774:	d9402b17 	ldw	r5,172(sp)
 8005778:	d8801f17 	ldw	r2,124(sp)
 800577c:	44000015 	stw	r16,0(r8)
 8005780:	1947883a 	add	r3,r3,r5
 8005784:	10800044 	addi	r2,r2,1
 8005788:	41400115 	stw	r5,4(r8)
 800578c:	d8c02015 	stw	r3,128(sp)
 8005790:	d8801f15 	stw	r2,124(sp)
 8005794:	010001c4 	movi	r4,7
 8005798:	2081f516 	blt	r4,r2,8005f70 <___vfprintf_internal_r+0x11e4>
 800579c:	42000204 	addi	r8,r8,8
 80057a0:	9480010c 	andi	r18,r18,4
 80057a4:	90003226 	beq	r18,zero,8005870 <___vfprintf_internal_r+0xae4>
 80057a8:	d9403117 	ldw	r5,196(sp)
 80057ac:	d8802917 	ldw	r2,164(sp)
 80057b0:	28a1c83a 	sub	r16,r5,r2
 80057b4:	04002e0e 	bge	zero,r16,8005870 <___vfprintf_internal_r+0xae4>
 80057b8:	04400404 	movi	r17,16
 80057bc:	d8801f17 	ldw	r2,124(sp)
 80057c0:	8c04c40e 	bge	r17,r16,8006ad4 <___vfprintf_internal_r+0x1d48>
 80057c4:	014200b4 	movhi	r5,2050
 80057c8:	296efe84 	addi	r5,r5,-17414
 80057cc:	d9403515 	stw	r5,212(sp)
 80057d0:	048001c4 	movi	r18,7
 80057d4:	dcc02d17 	ldw	r19,180(sp)
 80057d8:	00000306 	br	80057e8 <___vfprintf_internal_r+0xa5c>
 80057dc:	843ffc04 	addi	r16,r16,-16
 80057e0:	42000204 	addi	r8,r8,8
 80057e4:	8c00130e 	bge	r17,r16,8005834 <___vfprintf_internal_r+0xaa8>
 80057e8:	010200b4 	movhi	r4,2050
 80057ec:	18c00404 	addi	r3,r3,16
 80057f0:	10800044 	addi	r2,r2,1
 80057f4:	212efe84 	addi	r4,r4,-17414
 80057f8:	41000015 	stw	r4,0(r8)
 80057fc:	44400115 	stw	r17,4(r8)
 8005800:	d8c02015 	stw	r3,128(sp)
 8005804:	d8801f15 	stw	r2,124(sp)
 8005808:	90bff40e 	bge	r18,r2,80057dc <__alt_data_end+0xfc0057dc>
 800580c:	d9801e04 	addi	r6,sp,120
 8005810:	b80b883a 	mov	r5,r23
 8005814:	9809883a 	mov	r4,r19
 8005818:	80117d00 	call	80117d0 <__sprint_r>
 800581c:	103e5f1e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8005820:	843ffc04 	addi	r16,r16,-16
 8005824:	d8c02017 	ldw	r3,128(sp)
 8005828:	d8801f17 	ldw	r2,124(sp)
 800582c:	da000404 	addi	r8,sp,16
 8005830:	8c3fed16 	blt	r17,r16,80057e8 <__alt_data_end+0xfc0057e8>
 8005834:	d9403517 	ldw	r5,212(sp)
 8005838:	1c07883a 	add	r3,r3,r16
 800583c:	10800044 	addi	r2,r2,1
 8005840:	41400015 	stw	r5,0(r8)
 8005844:	44000115 	stw	r16,4(r8)
 8005848:	d8c02015 	stw	r3,128(sp)
 800584c:	d8801f15 	stw	r2,124(sp)
 8005850:	010001c4 	movi	r4,7
 8005854:	2080060e 	bge	r4,r2,8005870 <___vfprintf_internal_r+0xae4>
 8005858:	d9002d17 	ldw	r4,180(sp)
 800585c:	d9801e04 	addi	r6,sp,120
 8005860:	b80b883a 	mov	r5,r23
 8005864:	80117d00 	call	80117d0 <__sprint_r>
 8005868:	103e4c1e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 800586c:	d8c02017 	ldw	r3,128(sp)
 8005870:	d8803117 	ldw	r2,196(sp)
 8005874:	d9002917 	ldw	r4,164(sp)
 8005878:	1100010e 	bge	r2,r4,8005880 <___vfprintf_internal_r+0xaf4>
 800587c:	2005883a 	mov	r2,r4
 8005880:	d9402f17 	ldw	r5,188(sp)
 8005884:	288b883a 	add	r5,r5,r2
 8005888:	d9402f15 	stw	r5,188(sp)
 800588c:	1801c01e 	bne	r3,zero,8005f90 <___vfprintf_internal_r+0x1204>
 8005890:	a8800007 	ldb	r2,0(r21)
 8005894:	d8001f15 	stw	zero,124(sp)
 8005898:	da000404 	addi	r8,sp,16
 800589c:	103d751e 	bne	r2,zero,8004e74 <__alt_data_end+0xfc004e74>
 80058a0:	a823883a 	mov	r17,r21
 80058a4:	003d8b06 	br	8004ed4 <__alt_data_end+0xfc004ed4>
 80058a8:	8025883a 	mov	r18,r16
 80058ac:	dc002903 	ldbu	r16,164(sp)
 80058b0:	e011883a 	mov	r8,fp
 80058b4:	84003fcc 	andi	r16,r16,255
 80058b8:	8005e51e 	bne	r16,zero,8007050 <___vfprintf_internal_r+0x22c4>
 80058bc:	94800414 	ori	r18,r18,16
 80058c0:	9080080c 	andi	r2,r18,32
 80058c4:	10022b26 	beq	r2,zero,8006174 <___vfprintf_internal_r+0x13e8>
 80058c8:	d9002e17 	ldw	r4,184(sp)
 80058cc:	d9402a17 	ldw	r5,168(sp)
 80058d0:	d8002785 	stb	zero,158(sp)
 80058d4:	20c00204 	addi	r3,r4,8
 80058d8:	24c00017 	ldw	r19,0(r4)
 80058dc:	25800117 	ldw	r22,4(r4)
 80058e0:	28042e16 	blt	r5,zero,800699c <___vfprintf_internal_r+0x1c10>
 80058e4:	013fdfc4 	movi	r4,-129
 80058e8:	9d84b03a 	or	r2,r19,r22
 80058ec:	d8c02e15 	stw	r3,184(sp)
 80058f0:	9124703a 	and	r18,r18,r4
 80058f4:	0039883a 	mov	fp,zero
 80058f8:	103e801e 	bne	r2,zero,80052fc <__alt_data_end+0xfc0052fc>
 80058fc:	d9002a17 	ldw	r4,168(sp)
 8005900:	2002e01e 	bne	r4,zero,8006484 <___vfprintf_internal_r+0x16f8>
 8005904:	d8002a15 	stw	zero,168(sp)
 8005908:	d8002b15 	stw	zero,172(sp)
 800590c:	dc001e04 	addi	r16,sp,120
 8005910:	003ef506 	br	80054e8 <__alt_data_end+0xfc0054e8>
 8005914:	8025883a 	mov	r18,r16
 8005918:	dc002903 	ldbu	r16,164(sp)
 800591c:	e011883a 	mov	r8,fp
 8005920:	84003fcc 	andi	r16,r16,255
 8005924:	8005ba1e 	bne	r16,zero,8007010 <___vfprintf_internal_r+0x2284>
 8005928:	010200b4 	movhi	r4,2050
 800592c:	212eee04 	addi	r4,r4,-17480
 8005930:	d9003915 	stw	r4,228(sp)
 8005934:	9080080c 	andi	r2,r18,32
 8005938:	10006126 	beq	r2,zero,8005ac0 <___vfprintf_internal_r+0xd34>
 800593c:	d9402e17 	ldw	r5,184(sp)
 8005940:	2cc00017 	ldw	r19,0(r5)
 8005944:	2d800117 	ldw	r22,4(r5)
 8005948:	29400204 	addi	r5,r5,8
 800594c:	d9402e15 	stw	r5,184(sp)
 8005950:	9080004c 	andi	r2,r18,1
 8005954:	1001ac26 	beq	r2,zero,8006008 <___vfprintf_internal_r+0x127c>
 8005958:	9d84b03a 	or	r2,r19,r22
 800595c:	10038526 	beq	r2,zero,8006774 <___vfprintf_internal_r+0x19e8>
 8005960:	d8c02a17 	ldw	r3,168(sp)
 8005964:	00800c04 	movi	r2,48
 8005968:	d8802705 	stb	r2,156(sp)
 800596c:	dc402745 	stb	r17,157(sp)
 8005970:	d8002785 	stb	zero,158(sp)
 8005974:	90800094 	ori	r2,r18,2
 8005978:	18047916 	blt	r3,zero,8006b60 <___vfprintf_internal_r+0x1dd4>
 800597c:	00bfdfc4 	movi	r2,-129
 8005980:	90a4703a 	and	r18,r18,r2
 8005984:	94800094 	ori	r18,r18,2
 8005988:	0039883a 	mov	fp,zero
 800598c:	d9003917 	ldw	r4,228(sp)
 8005990:	dc001e04 	addi	r16,sp,120
 8005994:	988003cc 	andi	r2,r19,15
 8005998:	b006973a 	slli	r3,r22,28
 800599c:	2085883a 	add	r2,r4,r2
 80059a0:	9826d13a 	srli	r19,r19,4
 80059a4:	10800003 	ldbu	r2,0(r2)
 80059a8:	b02cd13a 	srli	r22,r22,4
 80059ac:	843fffc4 	addi	r16,r16,-1
 80059b0:	1ce6b03a 	or	r19,r3,r19
 80059b4:	80800005 	stb	r2,0(r16)
 80059b8:	9d84b03a 	or	r2,r19,r22
 80059bc:	103ff51e 	bne	r2,zero,8005994 <__alt_data_end+0xfc005994>
 80059c0:	d8c02817 	ldw	r3,160(sp)
 80059c4:	1c07c83a 	sub	r3,r3,r16
 80059c8:	d8c02b15 	stw	r3,172(sp)
 80059cc:	003ec606 	br	80054e8 <__alt_data_end+0xfc0054e8>
 80059d0:	8025883a 	mov	r18,r16
 80059d4:	dc002903 	ldbu	r16,164(sp)
 80059d8:	e011883a 	mov	r8,fp
 80059dc:	84003fcc 	andi	r16,r16,255
 80059e0:	803e9626 	beq	r16,zero,800543c <__alt_data_end+0xfc00543c>
 80059e4:	d8c02b03 	ldbu	r3,172(sp)
 80059e8:	d8c02785 	stb	r3,158(sp)
 80059ec:	003e9306 	br	800543c <__alt_data_end+0xfc00543c>
 80059f0:	00c00044 	movi	r3,1
 80059f4:	d8c02905 	stb	r3,164(sp)
 80059f8:	00c00ac4 	movi	r3,43
 80059fc:	d8c02b05 	stb	r3,172(sp)
 8005a00:	ac400007 	ldb	r17,0(r21)
 8005a04:	003d4306 	br	8004f14 <__alt_data_end+0xfc004f14>
 8005a08:	84000814 	ori	r16,r16,32
 8005a0c:	ac400007 	ldb	r17,0(r21)
 8005a10:	003d4006 	br	8004f14 <__alt_data_end+0xfc004f14>
 8005a14:	d8802e17 	ldw	r2,184(sp)
 8005a18:	8025883a 	mov	r18,r16
 8005a1c:	d8002785 	stb	zero,158(sp)
 8005a20:	14000017 	ldw	r16,0(r2)
 8005a24:	e011883a 	mov	r8,fp
 8005a28:	14c00104 	addi	r19,r2,4
 8005a2c:	80042d26 	beq	r16,zero,8006ae4 <___vfprintf_internal_r+0x1d58>
 8005a30:	d8c02a17 	ldw	r3,168(sp)
 8005a34:	1803e416 	blt	r3,zero,80069c8 <___vfprintf_internal_r+0x1c3c>
 8005a38:	180d883a 	mov	r6,r3
 8005a3c:	000b883a 	mov	r5,zero
 8005a40:	8009883a 	mov	r4,r16
 8005a44:	df003d15 	stw	fp,244(sp)
 8005a48:	800b21c0 	call	800b21c <memchr>
 8005a4c:	da003d17 	ldw	r8,244(sp)
 8005a50:	10046826 	beq	r2,zero,8006bf4 <___vfprintf_internal_r+0x1e68>
 8005a54:	1405c83a 	sub	r2,r2,r16
 8005a58:	d8802b15 	stw	r2,172(sp)
 8005a5c:	1003e016 	blt	r2,zero,80069e0 <___vfprintf_internal_r+0x1c54>
 8005a60:	df002783 	ldbu	fp,158(sp)
 8005a64:	d8802915 	stw	r2,164(sp)
 8005a68:	dcc02e15 	stw	r19,184(sp)
 8005a6c:	d8002a15 	stw	zero,168(sp)
 8005a70:	d8003215 	stw	zero,200(sp)
 8005a74:	003ea206 	br	8005500 <__alt_data_end+0xfc005500>
 8005a78:	8025883a 	mov	r18,r16
 8005a7c:	dc002903 	ldbu	r16,164(sp)
 8005a80:	e011883a 	mov	r8,fp
 8005a84:	84003fcc 	andi	r16,r16,255
 8005a88:	803f8d26 	beq	r16,zero,80058c0 <__alt_data_end+0xfc0058c0>
 8005a8c:	d8c02b03 	ldbu	r3,172(sp)
 8005a90:	d8c02785 	stb	r3,158(sp)
 8005a94:	003f8a06 	br	80058c0 <__alt_data_end+0xfc0058c0>
 8005a98:	8025883a 	mov	r18,r16
 8005a9c:	dc002903 	ldbu	r16,164(sp)
 8005aa0:	e011883a 	mov	r8,fp
 8005aa4:	84003fcc 	andi	r16,r16,255
 8005aa8:	8005661e 	bne	r16,zero,8007044 <___vfprintf_internal_r+0x22b8>
 8005aac:	010200b4 	movhi	r4,2050
 8005ab0:	212ef304 	addi	r4,r4,-17460
 8005ab4:	d9003915 	stw	r4,228(sp)
 8005ab8:	9080080c 	andi	r2,r18,32
 8005abc:	103f9f1e 	bne	r2,zero,800593c <__alt_data_end+0xfc00593c>
 8005ac0:	9080040c 	andi	r2,r18,16
 8005ac4:	1002eb26 	beq	r2,zero,8006674 <___vfprintf_internal_r+0x18e8>
 8005ac8:	d8802e17 	ldw	r2,184(sp)
 8005acc:	002d883a 	mov	r22,zero
 8005ad0:	14c00017 	ldw	r19,0(r2)
 8005ad4:	10800104 	addi	r2,r2,4
 8005ad8:	d8802e15 	stw	r2,184(sp)
 8005adc:	003f9c06 	br	8005950 <__alt_data_end+0xfc005950>
 8005ae0:	d8802b07 	ldb	r2,172(sp)
 8005ae4:	1002e11e 	bne	r2,zero,800666c <___vfprintf_internal_r+0x18e0>
 8005ae8:	00c00044 	movi	r3,1
 8005aec:	d8c02905 	stb	r3,164(sp)
 8005af0:	00c00804 	movi	r3,32
 8005af4:	d8c02b05 	stb	r3,172(sp)
 8005af8:	ac400007 	ldb	r17,0(r21)
 8005afc:	003d0506 	br	8004f14 <__alt_data_end+0xfc004f14>
 8005b00:	84000054 	ori	r16,r16,1
 8005b04:	ac400007 	ldb	r17,0(r21)
 8005b08:	003d0206 	br	8004f14 <__alt_data_end+0xfc004f14>
 8005b0c:	8025883a 	mov	r18,r16
 8005b10:	dc002903 	ldbu	r16,164(sp)
 8005b14:	e011883a 	mov	r8,fp
 8005b18:	84003fcc 	andi	r16,r16,255
 8005b1c:	803de726 	beq	r16,zero,80052bc <__alt_data_end+0xfc0052bc>
 8005b20:	d8c02b03 	ldbu	r3,172(sp)
 8005b24:	d8c02785 	stb	r3,158(sp)
 8005b28:	003de406 	br	80052bc <__alt_data_end+0xfc0052bc>
 8005b2c:	84001014 	ori	r16,r16,64
 8005b30:	ac400007 	ldb	r17,0(r21)
 8005b34:	003cf706 	br	8004f14 <__alt_data_end+0xfc004f14>
 8005b38:	ac400007 	ldb	r17,0(r21)
 8005b3c:	00801b04 	movi	r2,108
 8005b40:	88838f26 	beq	r17,r2,8006980 <___vfprintf_internal_r+0x1bf4>
 8005b44:	84000414 	ori	r16,r16,16
 8005b48:	003cf206 	br	8004f14 <__alt_data_end+0xfc004f14>
 8005b4c:	8025883a 	mov	r18,r16
 8005b50:	dc002903 	ldbu	r16,164(sp)
 8005b54:	e011883a 	mov	r8,fp
 8005b58:	84003fcc 	andi	r16,r16,255
 8005b5c:	80053f1e 	bne	r16,zero,800705c <___vfprintf_internal_r+0x22d0>
 8005b60:	9080080c 	andi	r2,r18,32
 8005b64:	1002d226 	beq	r2,zero,80066b0 <___vfprintf_internal_r+0x1924>
 8005b68:	d9002e17 	ldw	r4,184(sp)
 8005b6c:	d9402f17 	ldw	r5,188(sp)
 8005b70:	20800017 	ldw	r2,0(r4)
 8005b74:	2807d7fa 	srai	r3,r5,31
 8005b78:	21000104 	addi	r4,r4,4
 8005b7c:	d9002e15 	stw	r4,184(sp)
 8005b80:	11400015 	stw	r5,0(r2)
 8005b84:	10c00115 	stw	r3,4(r2)
 8005b88:	003cb806 	br	8004e6c <__alt_data_end+0xfc004e6c>
 8005b8c:	d8c02e17 	ldw	r3,184(sp)
 8005b90:	d9002e17 	ldw	r4,184(sp)
 8005b94:	8025883a 	mov	r18,r16
 8005b98:	18800017 	ldw	r2,0(r3)
 8005b9c:	21000104 	addi	r4,r4,4
 8005ba0:	00c00044 	movi	r3,1
 8005ba4:	e011883a 	mov	r8,fp
 8005ba8:	d8c02915 	stw	r3,164(sp)
 8005bac:	d8002785 	stb	zero,158(sp)
 8005bb0:	d8801405 	stb	r2,80(sp)
 8005bb4:	d9002e15 	stw	r4,184(sp)
 8005bb8:	d8c02b15 	stw	r3,172(sp)
 8005bbc:	d8002a15 	stw	zero,168(sp)
 8005bc0:	d8003215 	stw	zero,200(sp)
 8005bc4:	dc001404 	addi	r16,sp,80
 8005bc8:	0039883a 	mov	fp,zero
 8005bcc:	003e5306 	br	800551c <__alt_data_end+0xfc00551c>
 8005bd0:	010200b4 	movhi	r4,2050
 8005bd4:	212ef304 	addi	r4,r4,-17460
 8005bd8:	0039883a 	mov	fp,zero
 8005bdc:	d9003915 	stw	r4,228(sp)
 8005be0:	04401e04 	movi	r17,120
 8005be4:	003f6906 	br	800598c <__alt_data_end+0xfc00598c>
 8005be8:	8025883a 	mov	r18,r16
 8005bec:	dc002903 	ldbu	r16,164(sp)
 8005bf0:	e011883a 	mov	r8,fp
 8005bf4:	84003fcc 	andi	r16,r16,255
 8005bf8:	8005081e 	bne	r16,zero,800701c <___vfprintf_internal_r+0x2290>
 8005bfc:	883d6126 	beq	r17,zero,8005184 <__alt_data_end+0xfc005184>
 8005c00:	00c00044 	movi	r3,1
 8005c04:	d8c02915 	stw	r3,164(sp)
 8005c08:	dc401405 	stb	r17,80(sp)
 8005c0c:	d8002785 	stb	zero,158(sp)
 8005c10:	003fe906 	br	8005bb8 <__alt_data_end+0xfc005bb8>
 8005c14:	014200b4 	movhi	r5,2050
 8005c18:	296ef304 	addi	r5,r5,-17460
 8005c1c:	d9403915 	stw	r5,228(sp)
 8005c20:	d8c02e15 	stw	r3,184(sp)
 8005c24:	1025883a 	mov	r18,r2
 8005c28:	04401e04 	movi	r17,120
 8005c2c:	9d84b03a 	or	r2,r19,r22
 8005c30:	1000fc1e 	bne	r2,zero,8006024 <___vfprintf_internal_r+0x1298>
 8005c34:	0039883a 	mov	fp,zero
 8005c38:	00800084 	movi	r2,2
 8005c3c:	10803fcc 	andi	r2,r2,255
 8005c40:	00c00044 	movi	r3,1
 8005c44:	10c20f26 	beq	r2,r3,8006484 <___vfprintf_internal_r+0x16f8>
 8005c48:	00c00084 	movi	r3,2
 8005c4c:	10fd3326 	beq	r2,r3,800511c <__alt_data_end+0xfc00511c>
 8005c50:	003e0b06 	br	8005480 <__alt_data_end+0xfc005480>
 8005c54:	d8c02017 	ldw	r3,128(sp)
 8005c58:	003e7106 	br	8005620 <__alt_data_end+0xfc005620>
 8005c5c:	00801944 	movi	r2,101
 8005c60:	14407e0e 	bge	r2,r17,8005e5c <___vfprintf_internal_r+0x10d0>
 8005c64:	d9003617 	ldw	r4,216(sp)
 8005c68:	d9403817 	ldw	r5,224(sp)
 8005c6c:	000d883a 	mov	r6,zero
 8005c70:	000f883a 	mov	r7,zero
 8005c74:	d8c03c15 	stw	r3,240(sp)
 8005c78:	da003d15 	stw	r8,244(sp)
 8005c7c:	80177940 	call	8017794 <__eqdf2>
 8005c80:	d8c03c17 	ldw	r3,240(sp)
 8005c84:	da003d17 	ldw	r8,244(sp)
 8005c88:	1000f71e 	bne	r2,zero,8006068 <___vfprintf_internal_r+0x12dc>
 8005c8c:	d8801f17 	ldw	r2,124(sp)
 8005c90:	010200b4 	movhi	r4,2050
 8005c94:	212efa04 	addi	r4,r4,-17432
 8005c98:	18c00044 	addi	r3,r3,1
 8005c9c:	10800044 	addi	r2,r2,1
 8005ca0:	41000015 	stw	r4,0(r8)
 8005ca4:	01000044 	movi	r4,1
 8005ca8:	41000115 	stw	r4,4(r8)
 8005cac:	d8c02015 	stw	r3,128(sp)
 8005cb0:	d8801f15 	stw	r2,124(sp)
 8005cb4:	010001c4 	movi	r4,7
 8005cb8:	2082b816 	blt	r4,r2,800679c <___vfprintf_internal_r+0x1a10>
 8005cbc:	42000204 	addi	r8,r8,8
 8005cc0:	d8802617 	ldw	r2,152(sp)
 8005cc4:	d9403317 	ldw	r5,204(sp)
 8005cc8:	11400216 	blt	r2,r5,8005cd4 <___vfprintf_internal_r+0xf48>
 8005ccc:	9080004c 	andi	r2,r18,1
 8005cd0:	103eb326 	beq	r2,zero,80057a0 <__alt_data_end+0xfc0057a0>
 8005cd4:	d8803717 	ldw	r2,220(sp)
 8005cd8:	d9003417 	ldw	r4,208(sp)
 8005cdc:	d9403717 	ldw	r5,220(sp)
 8005ce0:	1887883a 	add	r3,r3,r2
 8005ce4:	d8801f17 	ldw	r2,124(sp)
 8005ce8:	41000015 	stw	r4,0(r8)
 8005cec:	41400115 	stw	r5,4(r8)
 8005cf0:	10800044 	addi	r2,r2,1
 8005cf4:	d8c02015 	stw	r3,128(sp)
 8005cf8:	d8801f15 	stw	r2,124(sp)
 8005cfc:	010001c4 	movi	r4,7
 8005d00:	20832916 	blt	r4,r2,80069a8 <___vfprintf_internal_r+0x1c1c>
 8005d04:	42000204 	addi	r8,r8,8
 8005d08:	d8803317 	ldw	r2,204(sp)
 8005d0c:	143fffc4 	addi	r16,r2,-1
 8005d10:	043ea30e 	bge	zero,r16,80057a0 <__alt_data_end+0xfc0057a0>
 8005d14:	04400404 	movi	r17,16
 8005d18:	d8801f17 	ldw	r2,124(sp)
 8005d1c:	8c00880e 	bge	r17,r16,8005f40 <___vfprintf_internal_r+0x11b4>
 8005d20:	014200b4 	movhi	r5,2050
 8005d24:	296efa84 	addi	r5,r5,-17430
 8005d28:	d9402c15 	stw	r5,176(sp)
 8005d2c:	058001c4 	movi	r22,7
 8005d30:	dcc02d17 	ldw	r19,180(sp)
 8005d34:	00000306 	br	8005d44 <___vfprintf_internal_r+0xfb8>
 8005d38:	42000204 	addi	r8,r8,8
 8005d3c:	843ffc04 	addi	r16,r16,-16
 8005d40:	8c00820e 	bge	r17,r16,8005f4c <___vfprintf_internal_r+0x11c0>
 8005d44:	18c00404 	addi	r3,r3,16
 8005d48:	10800044 	addi	r2,r2,1
 8005d4c:	45000015 	stw	r20,0(r8)
 8005d50:	44400115 	stw	r17,4(r8)
 8005d54:	d8c02015 	stw	r3,128(sp)
 8005d58:	d8801f15 	stw	r2,124(sp)
 8005d5c:	b0bff60e 	bge	r22,r2,8005d38 <__alt_data_end+0xfc005d38>
 8005d60:	d9801e04 	addi	r6,sp,120
 8005d64:	b80b883a 	mov	r5,r23
 8005d68:	9809883a 	mov	r4,r19
 8005d6c:	80117d00 	call	80117d0 <__sprint_r>
 8005d70:	103d0a1e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8005d74:	d8c02017 	ldw	r3,128(sp)
 8005d78:	d8801f17 	ldw	r2,124(sp)
 8005d7c:	da000404 	addi	r8,sp,16
 8005d80:	003fee06 	br	8005d3c <__alt_data_end+0xfc005d3c>
 8005d84:	d9403117 	ldw	r5,196(sp)
 8005d88:	d8802917 	ldw	r2,164(sp)
 8005d8c:	28adc83a 	sub	r22,r5,r2
 8005d90:	05be410e 	bge	zero,r22,8005698 <__alt_data_end+0xfc005698>
 8005d94:	07000404 	movi	fp,16
 8005d98:	d8801f17 	ldw	r2,124(sp)
 8005d9c:	e5838f0e 	bge	fp,r22,8006bdc <___vfprintf_internal_r+0x1e50>
 8005da0:	014200b4 	movhi	r5,2050
 8005da4:	296efa84 	addi	r5,r5,-17430
 8005da8:	dc403015 	stw	r17,192(sp)
 8005dac:	d9402c15 	stw	r5,176(sp)
 8005db0:	b023883a 	mov	r17,r22
 8005db4:	04c001c4 	movi	r19,7
 8005db8:	a82d883a 	mov	r22,r21
 8005dbc:	902b883a 	mov	r21,r18
 8005dc0:	8025883a 	mov	r18,r16
 8005dc4:	dc002d17 	ldw	r16,180(sp)
 8005dc8:	00000306 	br	8005dd8 <___vfprintf_internal_r+0x104c>
 8005dcc:	8c7ffc04 	addi	r17,r17,-16
 8005dd0:	42000204 	addi	r8,r8,8
 8005dd4:	e440110e 	bge	fp,r17,8005e1c <___vfprintf_internal_r+0x1090>
 8005dd8:	18c00404 	addi	r3,r3,16
 8005ddc:	10800044 	addi	r2,r2,1
 8005de0:	45000015 	stw	r20,0(r8)
 8005de4:	47000115 	stw	fp,4(r8)
 8005de8:	d8c02015 	stw	r3,128(sp)
 8005dec:	d8801f15 	stw	r2,124(sp)
 8005df0:	98bff60e 	bge	r19,r2,8005dcc <__alt_data_end+0xfc005dcc>
 8005df4:	d9801e04 	addi	r6,sp,120
 8005df8:	b80b883a 	mov	r5,r23
 8005dfc:	8009883a 	mov	r4,r16
 8005e00:	80117d00 	call	80117d0 <__sprint_r>
 8005e04:	103ce51e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8005e08:	8c7ffc04 	addi	r17,r17,-16
 8005e0c:	d8c02017 	ldw	r3,128(sp)
 8005e10:	d8801f17 	ldw	r2,124(sp)
 8005e14:	da000404 	addi	r8,sp,16
 8005e18:	e47fef16 	blt	fp,r17,8005dd8 <__alt_data_end+0xfc005dd8>
 8005e1c:	9021883a 	mov	r16,r18
 8005e20:	a825883a 	mov	r18,r21
 8005e24:	b02b883a 	mov	r21,r22
 8005e28:	882d883a 	mov	r22,r17
 8005e2c:	dc403017 	ldw	r17,192(sp)
 8005e30:	d9002c17 	ldw	r4,176(sp)
 8005e34:	1d87883a 	add	r3,r3,r22
 8005e38:	10800044 	addi	r2,r2,1
 8005e3c:	41000015 	stw	r4,0(r8)
 8005e40:	45800115 	stw	r22,4(r8)
 8005e44:	d8c02015 	stw	r3,128(sp)
 8005e48:	d8801f15 	stw	r2,124(sp)
 8005e4c:	010001c4 	movi	r4,7
 8005e50:	20818e16 	blt	r4,r2,800648c <___vfprintf_internal_r+0x1700>
 8005e54:	42000204 	addi	r8,r8,8
 8005e58:	003e0f06 	br	8005698 <__alt_data_end+0xfc005698>
 8005e5c:	d9403317 	ldw	r5,204(sp)
 8005e60:	00800044 	movi	r2,1
 8005e64:	18c00044 	addi	r3,r3,1
 8005e68:	1141530e 	bge	r2,r5,80063b8 <___vfprintf_internal_r+0x162c>
 8005e6c:	dc401f17 	ldw	r17,124(sp)
 8005e70:	00800044 	movi	r2,1
 8005e74:	40800115 	stw	r2,4(r8)
 8005e78:	8c400044 	addi	r17,r17,1
 8005e7c:	44000015 	stw	r16,0(r8)
 8005e80:	d8c02015 	stw	r3,128(sp)
 8005e84:	dc401f15 	stw	r17,124(sp)
 8005e88:	008001c4 	movi	r2,7
 8005e8c:	14416b16 	blt	r2,r17,800643c <___vfprintf_internal_r+0x16b0>
 8005e90:	42000204 	addi	r8,r8,8
 8005e94:	d8803717 	ldw	r2,220(sp)
 8005e98:	d9003417 	ldw	r4,208(sp)
 8005e9c:	8c400044 	addi	r17,r17,1
 8005ea0:	10c7883a 	add	r3,r2,r3
 8005ea4:	40800115 	stw	r2,4(r8)
 8005ea8:	41000015 	stw	r4,0(r8)
 8005eac:	d8c02015 	stw	r3,128(sp)
 8005eb0:	dc401f15 	stw	r17,124(sp)
 8005eb4:	008001c4 	movi	r2,7
 8005eb8:	14416916 	blt	r2,r17,8006460 <___vfprintf_internal_r+0x16d4>
 8005ebc:	45800204 	addi	r22,r8,8
 8005ec0:	d9003617 	ldw	r4,216(sp)
 8005ec4:	d9403817 	ldw	r5,224(sp)
 8005ec8:	000d883a 	mov	r6,zero
 8005ecc:	000f883a 	mov	r7,zero
 8005ed0:	d8c03c15 	stw	r3,240(sp)
 8005ed4:	80177940 	call	8017794 <__eqdf2>
 8005ed8:	d8c03c17 	ldw	r3,240(sp)
 8005edc:	1000bc26 	beq	r2,zero,80061d0 <___vfprintf_internal_r+0x1444>
 8005ee0:	d9403317 	ldw	r5,204(sp)
 8005ee4:	84000044 	addi	r16,r16,1
 8005ee8:	8c400044 	addi	r17,r17,1
 8005eec:	28bfffc4 	addi	r2,r5,-1
 8005ef0:	1887883a 	add	r3,r3,r2
 8005ef4:	b0800115 	stw	r2,4(r22)
 8005ef8:	b4000015 	stw	r16,0(r22)
 8005efc:	d8c02015 	stw	r3,128(sp)
 8005f00:	dc401f15 	stw	r17,124(sp)
 8005f04:	008001c4 	movi	r2,7
 8005f08:	14414316 	blt	r2,r17,8006418 <___vfprintf_internal_r+0x168c>
 8005f0c:	b5800204 	addi	r22,r22,8
 8005f10:	d9003a17 	ldw	r4,232(sp)
 8005f14:	df0022c4 	addi	fp,sp,139
 8005f18:	8c400044 	addi	r17,r17,1
 8005f1c:	20c7883a 	add	r3,r4,r3
 8005f20:	b7000015 	stw	fp,0(r22)
 8005f24:	b1000115 	stw	r4,4(r22)
 8005f28:	d8c02015 	stw	r3,128(sp)
 8005f2c:	dc401f15 	stw	r17,124(sp)
 8005f30:	008001c4 	movi	r2,7
 8005f34:	14400e16 	blt	r2,r17,8005f70 <___vfprintf_internal_r+0x11e4>
 8005f38:	b2000204 	addi	r8,r22,8
 8005f3c:	003e1806 	br	80057a0 <__alt_data_end+0xfc0057a0>
 8005f40:	010200b4 	movhi	r4,2050
 8005f44:	212efa84 	addi	r4,r4,-17430
 8005f48:	d9002c15 	stw	r4,176(sp)
 8005f4c:	d9002c17 	ldw	r4,176(sp)
 8005f50:	1c07883a 	add	r3,r3,r16
 8005f54:	44000115 	stw	r16,4(r8)
 8005f58:	41000015 	stw	r4,0(r8)
 8005f5c:	10800044 	addi	r2,r2,1
 8005f60:	d8c02015 	stw	r3,128(sp)
 8005f64:	d8801f15 	stw	r2,124(sp)
 8005f68:	010001c4 	movi	r4,7
 8005f6c:	20be0b0e 	bge	r4,r2,800579c <__alt_data_end+0xfc00579c>
 8005f70:	d9002d17 	ldw	r4,180(sp)
 8005f74:	d9801e04 	addi	r6,sp,120
 8005f78:	b80b883a 	mov	r5,r23
 8005f7c:	80117d00 	call	80117d0 <__sprint_r>
 8005f80:	103c861e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8005f84:	d8c02017 	ldw	r3,128(sp)
 8005f88:	da000404 	addi	r8,sp,16
 8005f8c:	003e0406 	br	80057a0 <__alt_data_end+0xfc0057a0>
 8005f90:	d9002d17 	ldw	r4,180(sp)
 8005f94:	d9801e04 	addi	r6,sp,120
 8005f98:	b80b883a 	mov	r5,r23
 8005f9c:	80117d00 	call	80117d0 <__sprint_r>
 8005fa0:	103e3b26 	beq	r2,zero,8005890 <__alt_data_end+0xfc005890>
 8005fa4:	003c7d06 	br	800519c <__alt_data_end+0xfc00519c>
 8005fa8:	d9002d17 	ldw	r4,180(sp)
 8005fac:	d9801e04 	addi	r6,sp,120
 8005fb0:	b80b883a 	mov	r5,r23
 8005fb4:	80117d00 	call	80117d0 <__sprint_r>
 8005fb8:	103c781e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8005fbc:	d8c02017 	ldw	r3,128(sp)
 8005fc0:	da000404 	addi	r8,sp,16
 8005fc4:	003de906 	br	800576c <__alt_data_end+0xfc00576c>
 8005fc8:	d9002d17 	ldw	r4,180(sp)
 8005fcc:	d9801e04 	addi	r6,sp,120
 8005fd0:	b80b883a 	mov	r5,r23
 8005fd4:	80117d00 	call	80117d0 <__sprint_r>
 8005fd8:	103c701e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8005fdc:	d8c02017 	ldw	r3,128(sp)
 8005fe0:	da000404 	addi	r8,sp,16
 8005fe4:	003d9b06 	br	8005654 <__alt_data_end+0xfc005654>
 8005fe8:	d9002d17 	ldw	r4,180(sp)
 8005fec:	d9801e04 	addi	r6,sp,120
 8005ff0:	b80b883a 	mov	r5,r23
 8005ff4:	80117d00 	call	80117d0 <__sprint_r>
 8005ff8:	103c681e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8005ffc:	d8c02017 	ldw	r3,128(sp)
 8006000:	da000404 	addi	r8,sp,16
 8006004:	003da106 	br	800568c <__alt_data_end+0xfc00568c>
 8006008:	d9402a17 	ldw	r5,168(sp)
 800600c:	d8002785 	stb	zero,158(sp)
 8006010:	283f0616 	blt	r5,zero,8005c2c <__alt_data_end+0xfc005c2c>
 8006014:	00ffdfc4 	movi	r3,-129
 8006018:	9d84b03a 	or	r2,r19,r22
 800601c:	90e4703a 	and	r18,r18,r3
 8006020:	103c3b26 	beq	r2,zero,8005110 <__alt_data_end+0xfc005110>
 8006024:	0039883a 	mov	fp,zero
 8006028:	003e5806 	br	800598c <__alt_data_end+0xfc00598c>
 800602c:	9080040c 	andi	r2,r18,16
 8006030:	1001b326 	beq	r2,zero,8006700 <___vfprintf_internal_r+0x1974>
 8006034:	d8c02e17 	ldw	r3,184(sp)
 8006038:	d9002a17 	ldw	r4,168(sp)
 800603c:	d8002785 	stb	zero,158(sp)
 8006040:	18800104 	addi	r2,r3,4
 8006044:	1cc00017 	ldw	r19,0(r3)
 8006048:	002d883a 	mov	r22,zero
 800604c:	2001b516 	blt	r4,zero,8006724 <___vfprintf_internal_r+0x1998>
 8006050:	00ffdfc4 	movi	r3,-129
 8006054:	d8802e15 	stw	r2,184(sp)
 8006058:	90e4703a 	and	r18,r18,r3
 800605c:	983d0526 	beq	r19,zero,8005474 <__alt_data_end+0xfc005474>
 8006060:	0039883a 	mov	fp,zero
 8006064:	003d0806 	br	8005488 <__alt_data_end+0xfc005488>
 8006068:	dc402617 	ldw	r17,152(sp)
 800606c:	0441d30e 	bge	zero,r17,80067bc <___vfprintf_internal_r+0x1a30>
 8006070:	dc403217 	ldw	r17,200(sp)
 8006074:	d8803317 	ldw	r2,204(sp)
 8006078:	1440010e 	bge	r2,r17,8006080 <___vfprintf_internal_r+0x12f4>
 800607c:	1023883a 	mov	r17,r2
 8006080:	04400a0e 	bge	zero,r17,80060ac <___vfprintf_internal_r+0x1320>
 8006084:	d8801f17 	ldw	r2,124(sp)
 8006088:	1c47883a 	add	r3,r3,r17
 800608c:	44000015 	stw	r16,0(r8)
 8006090:	10800044 	addi	r2,r2,1
 8006094:	44400115 	stw	r17,4(r8)
 8006098:	d8c02015 	stw	r3,128(sp)
 800609c:	d8801f15 	stw	r2,124(sp)
 80060a0:	010001c4 	movi	r4,7
 80060a4:	20826516 	blt	r4,r2,8006a3c <___vfprintf_internal_r+0x1cb0>
 80060a8:	42000204 	addi	r8,r8,8
 80060ac:	88026116 	blt	r17,zero,8006a34 <___vfprintf_internal_r+0x1ca8>
 80060b0:	d9003217 	ldw	r4,200(sp)
 80060b4:	2463c83a 	sub	r17,r4,r17
 80060b8:	04407b0e 	bge	zero,r17,80062a8 <___vfprintf_internal_r+0x151c>
 80060bc:	05800404 	movi	r22,16
 80060c0:	d8801f17 	ldw	r2,124(sp)
 80060c4:	b4419d0e 	bge	r22,r17,800673c <___vfprintf_internal_r+0x19b0>
 80060c8:	010200b4 	movhi	r4,2050
 80060cc:	212efa84 	addi	r4,r4,-17430
 80060d0:	d9002c15 	stw	r4,176(sp)
 80060d4:	070001c4 	movi	fp,7
 80060d8:	dcc02d17 	ldw	r19,180(sp)
 80060dc:	00000306 	br	80060ec <___vfprintf_internal_r+0x1360>
 80060e0:	42000204 	addi	r8,r8,8
 80060e4:	8c7ffc04 	addi	r17,r17,-16
 80060e8:	b441970e 	bge	r22,r17,8006748 <___vfprintf_internal_r+0x19bc>
 80060ec:	18c00404 	addi	r3,r3,16
 80060f0:	10800044 	addi	r2,r2,1
 80060f4:	45000015 	stw	r20,0(r8)
 80060f8:	45800115 	stw	r22,4(r8)
 80060fc:	d8c02015 	stw	r3,128(sp)
 8006100:	d8801f15 	stw	r2,124(sp)
 8006104:	e0bff60e 	bge	fp,r2,80060e0 <__alt_data_end+0xfc0060e0>
 8006108:	d9801e04 	addi	r6,sp,120
 800610c:	b80b883a 	mov	r5,r23
 8006110:	9809883a 	mov	r4,r19
 8006114:	80117d00 	call	80117d0 <__sprint_r>
 8006118:	103c201e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 800611c:	d8c02017 	ldw	r3,128(sp)
 8006120:	d8801f17 	ldw	r2,124(sp)
 8006124:	da000404 	addi	r8,sp,16
 8006128:	003fee06 	br	80060e4 <__alt_data_end+0xfc0060e4>
 800612c:	d9002d17 	ldw	r4,180(sp)
 8006130:	d9801e04 	addi	r6,sp,120
 8006134:	b80b883a 	mov	r5,r23
 8006138:	80117d00 	call	80117d0 <__sprint_r>
 800613c:	103c171e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8006140:	d8c02017 	ldw	r3,128(sp)
 8006144:	df002787 	ldb	fp,158(sp)
 8006148:	da000404 	addi	r8,sp,16
 800614c:	003d3406 	br	8005620 <__alt_data_end+0xfc005620>
 8006150:	9080040c 	andi	r2,r18,16
 8006154:	10016126 	beq	r2,zero,80066dc <___vfprintf_internal_r+0x1950>
 8006158:	d9402e17 	ldw	r5,184(sp)
 800615c:	2cc00017 	ldw	r19,0(r5)
 8006160:	29400104 	addi	r5,r5,4
 8006164:	d9402e15 	stw	r5,184(sp)
 8006168:	982dd7fa 	srai	r22,r19,31
 800616c:	b005883a 	mov	r2,r22
 8006170:	003c5a06 	br	80052dc <__alt_data_end+0xfc0052dc>
 8006174:	9080040c 	andi	r2,r18,16
 8006178:	10003526 	beq	r2,zero,8006250 <___vfprintf_internal_r+0x14c4>
 800617c:	d8c02e17 	ldw	r3,184(sp)
 8006180:	d9002a17 	ldw	r4,168(sp)
 8006184:	d8002785 	stb	zero,158(sp)
 8006188:	18800104 	addi	r2,r3,4
 800618c:	1cc00017 	ldw	r19,0(r3)
 8006190:	002d883a 	mov	r22,zero
 8006194:	20003716 	blt	r4,zero,8006274 <___vfprintf_internal_r+0x14e8>
 8006198:	00ffdfc4 	movi	r3,-129
 800619c:	d8802e15 	stw	r2,184(sp)
 80061a0:	90e4703a 	and	r18,r18,r3
 80061a4:	0039883a 	mov	fp,zero
 80061a8:	983dd426 	beq	r19,zero,80058fc <__alt_data_end+0xfc0058fc>
 80061ac:	00800244 	movi	r2,9
 80061b0:	14fc5336 	bltu	r2,r19,8005300 <__alt_data_end+0xfc005300>
 80061b4:	d8c02817 	ldw	r3,160(sp)
 80061b8:	dc001dc4 	addi	r16,sp,119
 80061bc:	9cc00c04 	addi	r19,r19,48
 80061c0:	1c07c83a 	sub	r3,r3,r16
 80061c4:	dcc01dc5 	stb	r19,119(sp)
 80061c8:	d8c02b15 	stw	r3,172(sp)
 80061cc:	003cc606 	br	80054e8 <__alt_data_end+0xfc0054e8>
 80061d0:	d8803317 	ldw	r2,204(sp)
 80061d4:	143fffc4 	addi	r16,r2,-1
 80061d8:	043f4d0e 	bge	zero,r16,8005f10 <__alt_data_end+0xfc005f10>
 80061dc:	07000404 	movi	fp,16
 80061e0:	e400810e 	bge	fp,r16,80063e8 <___vfprintf_internal_r+0x165c>
 80061e4:	014200b4 	movhi	r5,2050
 80061e8:	296efa84 	addi	r5,r5,-17430
 80061ec:	d9402c15 	stw	r5,176(sp)
 80061f0:	01c001c4 	movi	r7,7
 80061f4:	dcc02d17 	ldw	r19,180(sp)
 80061f8:	00000306 	br	8006208 <___vfprintf_internal_r+0x147c>
 80061fc:	b5800204 	addi	r22,r22,8
 8006200:	843ffc04 	addi	r16,r16,-16
 8006204:	e4007b0e 	bge	fp,r16,80063f4 <___vfprintf_internal_r+0x1668>
 8006208:	18c00404 	addi	r3,r3,16
 800620c:	8c400044 	addi	r17,r17,1
 8006210:	b5000015 	stw	r20,0(r22)
 8006214:	b7000115 	stw	fp,4(r22)
 8006218:	d8c02015 	stw	r3,128(sp)
 800621c:	dc401f15 	stw	r17,124(sp)
 8006220:	3c7ff60e 	bge	r7,r17,80061fc <__alt_data_end+0xfc0061fc>
 8006224:	d9801e04 	addi	r6,sp,120
 8006228:	b80b883a 	mov	r5,r23
 800622c:	9809883a 	mov	r4,r19
 8006230:	d9c03c15 	stw	r7,240(sp)
 8006234:	80117d00 	call	80117d0 <__sprint_r>
 8006238:	d9c03c17 	ldw	r7,240(sp)
 800623c:	103bd71e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8006240:	d8c02017 	ldw	r3,128(sp)
 8006244:	dc401f17 	ldw	r17,124(sp)
 8006248:	dd800404 	addi	r22,sp,16
 800624c:	003fec06 	br	8006200 <__alt_data_end+0xfc006200>
 8006250:	9080100c 	andi	r2,r18,64
 8006254:	d8002785 	stb	zero,158(sp)
 8006258:	10010e26 	beq	r2,zero,8006694 <___vfprintf_internal_r+0x1908>
 800625c:	d9402e17 	ldw	r5,184(sp)
 8006260:	d8c02a17 	ldw	r3,168(sp)
 8006264:	002d883a 	mov	r22,zero
 8006268:	28800104 	addi	r2,r5,4
 800626c:	2cc0000b 	ldhu	r19,0(r5)
 8006270:	183fc90e 	bge	r3,zero,8006198 <__alt_data_end+0xfc006198>
 8006274:	d8802e15 	stw	r2,184(sp)
 8006278:	0039883a 	mov	fp,zero
 800627c:	9d84b03a 	or	r2,r19,r22
 8006280:	103c1e1e 	bne	r2,zero,80052fc <__alt_data_end+0xfc0052fc>
 8006284:	00800044 	movi	r2,1
 8006288:	003e6c06 	br	8005c3c <__alt_data_end+0xfc005c3c>
 800628c:	d9002d17 	ldw	r4,180(sp)
 8006290:	d9801e04 	addi	r6,sp,120
 8006294:	b80b883a 	mov	r5,r23
 8006298:	80117d00 	call	80117d0 <__sprint_r>
 800629c:	103bbf1e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 80062a0:	d8c02017 	ldw	r3,128(sp)
 80062a4:	da000404 	addi	r8,sp,16
 80062a8:	d9003217 	ldw	r4,200(sp)
 80062ac:	d8802617 	ldw	r2,152(sp)
 80062b0:	d9403317 	ldw	r5,204(sp)
 80062b4:	8123883a 	add	r17,r16,r4
 80062b8:	11400216 	blt	r2,r5,80062c4 <___vfprintf_internal_r+0x1538>
 80062bc:	9100004c 	andi	r4,r18,1
 80062c0:	20000d26 	beq	r4,zero,80062f8 <___vfprintf_internal_r+0x156c>
 80062c4:	d9003717 	ldw	r4,220(sp)
 80062c8:	d9403417 	ldw	r5,208(sp)
 80062cc:	1907883a 	add	r3,r3,r4
 80062d0:	d9001f17 	ldw	r4,124(sp)
 80062d4:	41400015 	stw	r5,0(r8)
 80062d8:	d9403717 	ldw	r5,220(sp)
 80062dc:	21000044 	addi	r4,r4,1
 80062e0:	d8c02015 	stw	r3,128(sp)
 80062e4:	41400115 	stw	r5,4(r8)
 80062e8:	d9001f15 	stw	r4,124(sp)
 80062ec:	014001c4 	movi	r5,7
 80062f0:	2901e816 	blt	r5,r4,8006a94 <___vfprintf_internal_r+0x1d08>
 80062f4:	42000204 	addi	r8,r8,8
 80062f8:	d9003317 	ldw	r4,204(sp)
 80062fc:	8121883a 	add	r16,r16,r4
 8006300:	2085c83a 	sub	r2,r4,r2
 8006304:	8461c83a 	sub	r16,r16,r17
 8006308:	1400010e 	bge	r2,r16,8006310 <___vfprintf_internal_r+0x1584>
 800630c:	1021883a 	mov	r16,r2
 8006310:	04000a0e 	bge	zero,r16,800633c <___vfprintf_internal_r+0x15b0>
 8006314:	d9001f17 	ldw	r4,124(sp)
 8006318:	1c07883a 	add	r3,r3,r16
 800631c:	44400015 	stw	r17,0(r8)
 8006320:	21000044 	addi	r4,r4,1
 8006324:	44000115 	stw	r16,4(r8)
 8006328:	d8c02015 	stw	r3,128(sp)
 800632c:	d9001f15 	stw	r4,124(sp)
 8006330:	014001c4 	movi	r5,7
 8006334:	2901fb16 	blt	r5,r4,8006b24 <___vfprintf_internal_r+0x1d98>
 8006338:	42000204 	addi	r8,r8,8
 800633c:	8001f716 	blt	r16,zero,8006b1c <___vfprintf_internal_r+0x1d90>
 8006340:	1421c83a 	sub	r16,r2,r16
 8006344:	043d160e 	bge	zero,r16,80057a0 <__alt_data_end+0xfc0057a0>
 8006348:	04400404 	movi	r17,16
 800634c:	d8801f17 	ldw	r2,124(sp)
 8006350:	8c3efb0e 	bge	r17,r16,8005f40 <__alt_data_end+0xfc005f40>
 8006354:	014200b4 	movhi	r5,2050
 8006358:	296efa84 	addi	r5,r5,-17430
 800635c:	d9402c15 	stw	r5,176(sp)
 8006360:	058001c4 	movi	r22,7
 8006364:	dcc02d17 	ldw	r19,180(sp)
 8006368:	00000306 	br	8006378 <___vfprintf_internal_r+0x15ec>
 800636c:	42000204 	addi	r8,r8,8
 8006370:	843ffc04 	addi	r16,r16,-16
 8006374:	8c3ef50e 	bge	r17,r16,8005f4c <__alt_data_end+0xfc005f4c>
 8006378:	18c00404 	addi	r3,r3,16
 800637c:	10800044 	addi	r2,r2,1
 8006380:	45000015 	stw	r20,0(r8)
 8006384:	44400115 	stw	r17,4(r8)
 8006388:	d8c02015 	stw	r3,128(sp)
 800638c:	d8801f15 	stw	r2,124(sp)
 8006390:	b0bff60e 	bge	r22,r2,800636c <__alt_data_end+0xfc00636c>
 8006394:	d9801e04 	addi	r6,sp,120
 8006398:	b80b883a 	mov	r5,r23
 800639c:	9809883a 	mov	r4,r19
 80063a0:	80117d00 	call	80117d0 <__sprint_r>
 80063a4:	103b7d1e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 80063a8:	d8c02017 	ldw	r3,128(sp)
 80063ac:	d8801f17 	ldw	r2,124(sp)
 80063b0:	da000404 	addi	r8,sp,16
 80063b4:	003fee06 	br	8006370 <__alt_data_end+0xfc006370>
 80063b8:	9088703a 	and	r4,r18,r2
 80063bc:	203eab1e 	bne	r4,zero,8005e6c <__alt_data_end+0xfc005e6c>
 80063c0:	dc401f17 	ldw	r17,124(sp)
 80063c4:	40800115 	stw	r2,4(r8)
 80063c8:	44000015 	stw	r16,0(r8)
 80063cc:	8c400044 	addi	r17,r17,1
 80063d0:	d8c02015 	stw	r3,128(sp)
 80063d4:	dc401f15 	stw	r17,124(sp)
 80063d8:	008001c4 	movi	r2,7
 80063dc:	14400e16 	blt	r2,r17,8006418 <___vfprintf_internal_r+0x168c>
 80063e0:	45800204 	addi	r22,r8,8
 80063e4:	003eca06 	br	8005f10 <__alt_data_end+0xfc005f10>
 80063e8:	010200b4 	movhi	r4,2050
 80063ec:	212efa84 	addi	r4,r4,-17430
 80063f0:	d9002c15 	stw	r4,176(sp)
 80063f4:	d8802c17 	ldw	r2,176(sp)
 80063f8:	1c07883a 	add	r3,r3,r16
 80063fc:	8c400044 	addi	r17,r17,1
 8006400:	b0800015 	stw	r2,0(r22)
 8006404:	b4000115 	stw	r16,4(r22)
 8006408:	d8c02015 	stw	r3,128(sp)
 800640c:	dc401f15 	stw	r17,124(sp)
 8006410:	008001c4 	movi	r2,7
 8006414:	147ebd0e 	bge	r2,r17,8005f0c <__alt_data_end+0xfc005f0c>
 8006418:	d9002d17 	ldw	r4,180(sp)
 800641c:	d9801e04 	addi	r6,sp,120
 8006420:	b80b883a 	mov	r5,r23
 8006424:	80117d00 	call	80117d0 <__sprint_r>
 8006428:	103b5c1e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 800642c:	d8c02017 	ldw	r3,128(sp)
 8006430:	dc401f17 	ldw	r17,124(sp)
 8006434:	dd800404 	addi	r22,sp,16
 8006438:	003eb506 	br	8005f10 <__alt_data_end+0xfc005f10>
 800643c:	d9002d17 	ldw	r4,180(sp)
 8006440:	d9801e04 	addi	r6,sp,120
 8006444:	b80b883a 	mov	r5,r23
 8006448:	80117d00 	call	80117d0 <__sprint_r>
 800644c:	103b531e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8006450:	d8c02017 	ldw	r3,128(sp)
 8006454:	dc401f17 	ldw	r17,124(sp)
 8006458:	da000404 	addi	r8,sp,16
 800645c:	003e8d06 	br	8005e94 <__alt_data_end+0xfc005e94>
 8006460:	d9002d17 	ldw	r4,180(sp)
 8006464:	d9801e04 	addi	r6,sp,120
 8006468:	b80b883a 	mov	r5,r23
 800646c:	80117d00 	call	80117d0 <__sprint_r>
 8006470:	103b4a1e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8006474:	d8c02017 	ldw	r3,128(sp)
 8006478:	dc401f17 	ldw	r17,124(sp)
 800647c:	dd800404 	addi	r22,sp,16
 8006480:	003e8f06 	br	8005ec0 <__alt_data_end+0xfc005ec0>
 8006484:	0027883a 	mov	r19,zero
 8006488:	003f4a06 	br	80061b4 <__alt_data_end+0xfc0061b4>
 800648c:	d9002d17 	ldw	r4,180(sp)
 8006490:	d9801e04 	addi	r6,sp,120
 8006494:	b80b883a 	mov	r5,r23
 8006498:	80117d00 	call	80117d0 <__sprint_r>
 800649c:	103b3f1e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 80064a0:	d8c02017 	ldw	r3,128(sp)
 80064a4:	da000404 	addi	r8,sp,16
 80064a8:	003c7b06 	br	8005698 <__alt_data_end+0xfc005698>
 80064ac:	d9402a17 	ldw	r5,168(sp)
 80064b0:	04e7c83a 	sub	r19,zero,r19
 80064b4:	07000b44 	movi	fp,45
 80064b8:	9804c03a 	cmpne	r2,r19,zero
 80064bc:	05adc83a 	sub	r22,zero,r22
 80064c0:	df002785 	stb	fp,158(sp)
 80064c4:	b0adc83a 	sub	r22,r22,r2
 80064c8:	28017b16 	blt	r5,zero,8006ab8 <___vfprintf_internal_r+0x1d2c>
 80064cc:	00bfdfc4 	movi	r2,-129
 80064d0:	90a4703a 	and	r18,r18,r2
 80064d4:	003b8906 	br	80052fc <__alt_data_end+0xfc0052fc>
 80064d8:	d9003617 	ldw	r4,216(sp)
 80064dc:	d9403817 	ldw	r5,224(sp)
 80064e0:	da003d15 	stw	r8,244(sp)
 80064e4:	800cc200 	call	800cc20 <__fpclassifyd>
 80064e8:	da003d17 	ldw	r8,244(sp)
 80064ec:	1000f026 	beq	r2,zero,80068b0 <___vfprintf_internal_r+0x1b24>
 80064f0:	d9002a17 	ldw	r4,168(sp)
 80064f4:	05bff7c4 	movi	r22,-33
 80064f8:	00bfffc4 	movi	r2,-1
 80064fc:	8dac703a 	and	r22,r17,r22
 8006500:	20820026 	beq	r4,r2,8006d04 <___vfprintf_internal_r+0x1f78>
 8006504:	008011c4 	movi	r2,71
 8006508:	b081f726 	beq	r22,r2,8006ce8 <___vfprintf_internal_r+0x1f5c>
 800650c:	d9003817 	ldw	r4,224(sp)
 8006510:	90c04014 	ori	r3,r18,256
 8006514:	d8c02c15 	stw	r3,176(sp)
 8006518:	20021516 	blt	r4,zero,8006d70 <___vfprintf_internal_r+0x1fe4>
 800651c:	dcc03817 	ldw	r19,224(sp)
 8006520:	d8002905 	stb	zero,164(sp)
 8006524:	00801984 	movi	r2,102
 8006528:	8881f926 	beq	r17,r2,8006d10 <___vfprintf_internal_r+0x1f84>
 800652c:	00801184 	movi	r2,70
 8006530:	88821c26 	beq	r17,r2,8006da4 <___vfprintf_internal_r+0x2018>
 8006534:	00801144 	movi	r2,69
 8006538:	b081ef26 	beq	r22,r2,8006cf8 <___vfprintf_internal_r+0x1f6c>
 800653c:	d8c02a17 	ldw	r3,168(sp)
 8006540:	d8802104 	addi	r2,sp,132
 8006544:	d8800315 	stw	r2,12(sp)
 8006548:	d9403617 	ldw	r5,216(sp)
 800654c:	d8802504 	addi	r2,sp,148
 8006550:	d9002d17 	ldw	r4,180(sp)
 8006554:	d8800215 	stw	r2,8(sp)
 8006558:	d8802604 	addi	r2,sp,152
 800655c:	d8c00015 	stw	r3,0(sp)
 8006560:	d8800115 	stw	r2,4(sp)
 8006564:	01c00084 	movi	r7,2
 8006568:	980d883a 	mov	r6,r19
 800656c:	d8c03c15 	stw	r3,240(sp)
 8006570:	da003d15 	stw	r8,244(sp)
 8006574:	8008fcc0 	call	8008fcc <_dtoa_r>
 8006578:	1021883a 	mov	r16,r2
 800657c:	008019c4 	movi	r2,103
 8006580:	d8c03c17 	ldw	r3,240(sp)
 8006584:	da003d17 	ldw	r8,244(sp)
 8006588:	88817126 	beq	r17,r2,8006b50 <___vfprintf_internal_r+0x1dc4>
 800658c:	008011c4 	movi	r2,71
 8006590:	88829126 	beq	r17,r2,8006fd8 <___vfprintf_internal_r+0x224c>
 8006594:	80f9883a 	add	fp,r16,r3
 8006598:	d9003617 	ldw	r4,216(sp)
 800659c:	000d883a 	mov	r6,zero
 80065a0:	000f883a 	mov	r7,zero
 80065a4:	980b883a 	mov	r5,r19
 80065a8:	da003d15 	stw	r8,244(sp)
 80065ac:	80177940 	call	8017794 <__eqdf2>
 80065b0:	da003d17 	ldw	r8,244(sp)
 80065b4:	10018d26 	beq	r2,zero,8006bec <___vfprintf_internal_r+0x1e60>
 80065b8:	d8802117 	ldw	r2,132(sp)
 80065bc:	1700062e 	bgeu	r2,fp,80065d8 <___vfprintf_internal_r+0x184c>
 80065c0:	01000c04 	movi	r4,48
 80065c4:	10c00044 	addi	r3,r2,1
 80065c8:	d8c02115 	stw	r3,132(sp)
 80065cc:	11000005 	stb	r4,0(r2)
 80065d0:	d8802117 	ldw	r2,132(sp)
 80065d4:	173ffb36 	bltu	r2,fp,80065c4 <__alt_data_end+0xfc0065c4>
 80065d8:	1405c83a 	sub	r2,r2,r16
 80065dc:	d8803315 	stw	r2,204(sp)
 80065e0:	008011c4 	movi	r2,71
 80065e4:	b0817626 	beq	r22,r2,8006bc0 <___vfprintf_internal_r+0x1e34>
 80065e8:	00801944 	movi	r2,101
 80065ec:	1442800e 	bge	r2,r17,8006ff0 <___vfprintf_internal_r+0x2264>
 80065f0:	d8c02617 	ldw	r3,152(sp)
 80065f4:	00801984 	movi	r2,102
 80065f8:	d8c03215 	stw	r3,200(sp)
 80065fc:	8881fe26 	beq	r17,r2,8006df8 <___vfprintf_internal_r+0x206c>
 8006600:	d8c03217 	ldw	r3,200(sp)
 8006604:	d9003317 	ldw	r4,204(sp)
 8006608:	1901dd16 	blt	r3,r4,8006d80 <___vfprintf_internal_r+0x1ff4>
 800660c:	9480004c 	andi	r18,r18,1
 8006610:	90022b1e 	bne	r18,zero,8006ec0 <___vfprintf_internal_r+0x2134>
 8006614:	1805883a 	mov	r2,r3
 8006618:	18028316 	blt	r3,zero,8007028 <___vfprintf_internal_r+0x229c>
 800661c:	d8c03217 	ldw	r3,200(sp)
 8006620:	044019c4 	movi	r17,103
 8006624:	d8c02b15 	stw	r3,172(sp)
 8006628:	df002907 	ldb	fp,164(sp)
 800662c:	e001531e 	bne	fp,zero,8006b7c <___vfprintf_internal_r+0x1df0>
 8006630:	df002783 	ldbu	fp,158(sp)
 8006634:	d8802915 	stw	r2,164(sp)
 8006638:	dc802c17 	ldw	r18,176(sp)
 800663c:	d8002a15 	stw	zero,168(sp)
 8006640:	003baf06 	br	8005500 <__alt_data_end+0xfc005500>
 8006644:	d8c02e17 	ldw	r3,184(sp)
 8006648:	d9002e17 	ldw	r4,184(sp)
 800664c:	d9402e17 	ldw	r5,184(sp)
 8006650:	18c00017 	ldw	r3,0(r3)
 8006654:	21000117 	ldw	r4,4(r4)
 8006658:	29400204 	addi	r5,r5,8
 800665c:	d8c03615 	stw	r3,216(sp)
 8006660:	d9003815 	stw	r4,224(sp)
 8006664:	d9402e15 	stw	r5,184(sp)
 8006668:	003b5006 	br	80053ac <__alt_data_end+0xfc0053ac>
 800666c:	ac400007 	ldb	r17,0(r21)
 8006670:	003a2806 	br	8004f14 <__alt_data_end+0xfc004f14>
 8006674:	9080100c 	andi	r2,r18,64
 8006678:	1000a826 	beq	r2,zero,800691c <___vfprintf_internal_r+0x1b90>
 800667c:	d8c02e17 	ldw	r3,184(sp)
 8006680:	002d883a 	mov	r22,zero
 8006684:	1cc0000b 	ldhu	r19,0(r3)
 8006688:	18c00104 	addi	r3,r3,4
 800668c:	d8c02e15 	stw	r3,184(sp)
 8006690:	003caf06 	br	8005950 <__alt_data_end+0xfc005950>
 8006694:	d9002e17 	ldw	r4,184(sp)
 8006698:	d9402a17 	ldw	r5,168(sp)
 800669c:	002d883a 	mov	r22,zero
 80066a0:	20800104 	addi	r2,r4,4
 80066a4:	24c00017 	ldw	r19,0(r4)
 80066a8:	283ebb0e 	bge	r5,zero,8006198 <__alt_data_end+0xfc006198>
 80066ac:	003ef106 	br	8006274 <__alt_data_end+0xfc006274>
 80066b0:	9080040c 	andi	r2,r18,16
 80066b4:	1000921e 	bne	r2,zero,8006900 <___vfprintf_internal_r+0x1b74>
 80066b8:	9480100c 	andi	r18,r18,64
 80066bc:	90013926 	beq	r18,zero,8006ba4 <___vfprintf_internal_r+0x1e18>
 80066c0:	d9402e17 	ldw	r5,184(sp)
 80066c4:	d8c02f17 	ldw	r3,188(sp)
 80066c8:	28800017 	ldw	r2,0(r5)
 80066cc:	29400104 	addi	r5,r5,4
 80066d0:	d9402e15 	stw	r5,184(sp)
 80066d4:	10c0000d 	sth	r3,0(r2)
 80066d8:	0039e406 	br	8004e6c <__alt_data_end+0xfc004e6c>
 80066dc:	9080100c 	andi	r2,r18,64
 80066e0:	10008026 	beq	r2,zero,80068e4 <___vfprintf_internal_r+0x1b58>
 80066e4:	d8802e17 	ldw	r2,184(sp)
 80066e8:	14c0000f 	ldh	r19,0(r2)
 80066ec:	10800104 	addi	r2,r2,4
 80066f0:	d8802e15 	stw	r2,184(sp)
 80066f4:	982dd7fa 	srai	r22,r19,31
 80066f8:	b005883a 	mov	r2,r22
 80066fc:	003af706 	br	80052dc <__alt_data_end+0xfc0052dc>
 8006700:	9080100c 	andi	r2,r18,64
 8006704:	d8002785 	stb	zero,158(sp)
 8006708:	10008a1e 	bne	r2,zero,8006934 <___vfprintf_internal_r+0x1ba8>
 800670c:	d9002e17 	ldw	r4,184(sp)
 8006710:	d9402a17 	ldw	r5,168(sp)
 8006714:	002d883a 	mov	r22,zero
 8006718:	20800104 	addi	r2,r4,4
 800671c:	24c00017 	ldw	r19,0(r4)
 8006720:	283e4b0e 	bge	r5,zero,8006050 <__alt_data_end+0xfc006050>
 8006724:	9d86b03a 	or	r3,r19,r22
 8006728:	d8802e15 	stw	r2,184(sp)
 800672c:	183e4c1e 	bne	r3,zero,8006060 <__alt_data_end+0xfc006060>
 8006730:	0039883a 	mov	fp,zero
 8006734:	0005883a 	mov	r2,zero
 8006738:	003d4006 	br	8005c3c <__alt_data_end+0xfc005c3c>
 800673c:	014200b4 	movhi	r5,2050
 8006740:	296efa84 	addi	r5,r5,-17430
 8006744:	d9402c15 	stw	r5,176(sp)
 8006748:	d9402c17 	ldw	r5,176(sp)
 800674c:	1c47883a 	add	r3,r3,r17
 8006750:	10800044 	addi	r2,r2,1
 8006754:	41400015 	stw	r5,0(r8)
 8006758:	44400115 	stw	r17,4(r8)
 800675c:	d8c02015 	stw	r3,128(sp)
 8006760:	d8801f15 	stw	r2,124(sp)
 8006764:	010001c4 	movi	r4,7
 8006768:	20bec816 	blt	r4,r2,800628c <__alt_data_end+0xfc00628c>
 800676c:	42000204 	addi	r8,r8,8
 8006770:	003ecd06 	br	80062a8 <__alt_data_end+0xfc0062a8>
 8006774:	d9002a17 	ldw	r4,168(sp)
 8006778:	d8002785 	stb	zero,158(sp)
 800677c:	203d2d16 	blt	r4,zero,8005c34 <__alt_data_end+0xfc005c34>
 8006780:	00bfdfc4 	movi	r2,-129
 8006784:	90a4703a 	and	r18,r18,r2
 8006788:	003a6106 	br	8005110 <__alt_data_end+0xfc005110>
 800678c:	010200b4 	movhi	r4,2050
 8006790:	212efa84 	addi	r4,r4,-17430
 8006794:	d9002c15 	stw	r4,176(sp)
 8006798:	003bea06 	br	8005744 <__alt_data_end+0xfc005744>
 800679c:	d9002d17 	ldw	r4,180(sp)
 80067a0:	d9801e04 	addi	r6,sp,120
 80067a4:	b80b883a 	mov	r5,r23
 80067a8:	80117d00 	call	80117d0 <__sprint_r>
 80067ac:	103a7b1e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 80067b0:	d8c02017 	ldw	r3,128(sp)
 80067b4:	da000404 	addi	r8,sp,16
 80067b8:	003d4106 	br	8005cc0 <__alt_data_end+0xfc005cc0>
 80067bc:	d8801f17 	ldw	r2,124(sp)
 80067c0:	014200b4 	movhi	r5,2050
 80067c4:	01000044 	movi	r4,1
 80067c8:	18c00044 	addi	r3,r3,1
 80067cc:	10800044 	addi	r2,r2,1
 80067d0:	296efa04 	addi	r5,r5,-17432
 80067d4:	41000115 	stw	r4,4(r8)
 80067d8:	41400015 	stw	r5,0(r8)
 80067dc:	d8c02015 	stw	r3,128(sp)
 80067e0:	d8801f15 	stw	r2,124(sp)
 80067e4:	010001c4 	movi	r4,7
 80067e8:	20805c16 	blt	r4,r2,800695c <___vfprintf_internal_r+0x1bd0>
 80067ec:	42000204 	addi	r8,r8,8
 80067f0:	8800041e 	bne	r17,zero,8006804 <___vfprintf_internal_r+0x1a78>
 80067f4:	d8803317 	ldw	r2,204(sp)
 80067f8:	1000021e 	bne	r2,zero,8006804 <___vfprintf_internal_r+0x1a78>
 80067fc:	9080004c 	andi	r2,r18,1
 8006800:	103be726 	beq	r2,zero,80057a0 <__alt_data_end+0xfc0057a0>
 8006804:	d9003717 	ldw	r4,220(sp)
 8006808:	d8801f17 	ldw	r2,124(sp)
 800680c:	d9403417 	ldw	r5,208(sp)
 8006810:	20c7883a 	add	r3,r4,r3
 8006814:	10800044 	addi	r2,r2,1
 8006818:	41000115 	stw	r4,4(r8)
 800681c:	41400015 	stw	r5,0(r8)
 8006820:	d8c02015 	stw	r3,128(sp)
 8006824:	d8801f15 	stw	r2,124(sp)
 8006828:	010001c4 	movi	r4,7
 800682c:	20812116 	blt	r4,r2,8006cb4 <___vfprintf_internal_r+0x1f28>
 8006830:	42000204 	addi	r8,r8,8
 8006834:	0463c83a 	sub	r17,zero,r17
 8006838:	0440730e 	bge	zero,r17,8006a08 <___vfprintf_internal_r+0x1c7c>
 800683c:	05800404 	movi	r22,16
 8006840:	b440860e 	bge	r22,r17,8006a5c <___vfprintf_internal_r+0x1cd0>
 8006844:	014200b4 	movhi	r5,2050
 8006848:	296efa84 	addi	r5,r5,-17430
 800684c:	d9402c15 	stw	r5,176(sp)
 8006850:	070001c4 	movi	fp,7
 8006854:	dcc02d17 	ldw	r19,180(sp)
 8006858:	00000306 	br	8006868 <___vfprintf_internal_r+0x1adc>
 800685c:	42000204 	addi	r8,r8,8
 8006860:	8c7ffc04 	addi	r17,r17,-16
 8006864:	b440800e 	bge	r22,r17,8006a68 <___vfprintf_internal_r+0x1cdc>
 8006868:	18c00404 	addi	r3,r3,16
 800686c:	10800044 	addi	r2,r2,1
 8006870:	45000015 	stw	r20,0(r8)
 8006874:	45800115 	stw	r22,4(r8)
 8006878:	d8c02015 	stw	r3,128(sp)
 800687c:	d8801f15 	stw	r2,124(sp)
 8006880:	e0bff60e 	bge	fp,r2,800685c <__alt_data_end+0xfc00685c>
 8006884:	d9801e04 	addi	r6,sp,120
 8006888:	b80b883a 	mov	r5,r23
 800688c:	9809883a 	mov	r4,r19
 8006890:	80117d00 	call	80117d0 <__sprint_r>
 8006894:	103a411e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8006898:	d8c02017 	ldw	r3,128(sp)
 800689c:	d8801f17 	ldw	r2,124(sp)
 80068a0:	da000404 	addi	r8,sp,16
 80068a4:	003fee06 	br	8006860 <__alt_data_end+0xfc006860>
 80068a8:	00bfffc4 	movi	r2,-1
 80068ac:	003a3f06 	br	80051ac <__alt_data_end+0xfc0051ac>
 80068b0:	008011c4 	movi	r2,71
 80068b4:	1440b816 	blt	r2,r17,8006b98 <___vfprintf_internal_r+0x1e0c>
 80068b8:	040200b4 	movhi	r16,2050
 80068bc:	842eec04 	addi	r16,r16,-17488
 80068c0:	00c000c4 	movi	r3,3
 80068c4:	00bfdfc4 	movi	r2,-129
 80068c8:	d8c02915 	stw	r3,164(sp)
 80068cc:	90a4703a 	and	r18,r18,r2
 80068d0:	df002783 	ldbu	fp,158(sp)
 80068d4:	d8c02b15 	stw	r3,172(sp)
 80068d8:	d8002a15 	stw	zero,168(sp)
 80068dc:	d8003215 	stw	zero,200(sp)
 80068e0:	003b0706 	br	8005500 <__alt_data_end+0xfc005500>
 80068e4:	d8c02e17 	ldw	r3,184(sp)
 80068e8:	1cc00017 	ldw	r19,0(r3)
 80068ec:	18c00104 	addi	r3,r3,4
 80068f0:	d8c02e15 	stw	r3,184(sp)
 80068f4:	982dd7fa 	srai	r22,r19,31
 80068f8:	b005883a 	mov	r2,r22
 80068fc:	003a7706 	br	80052dc <__alt_data_end+0xfc0052dc>
 8006900:	d8c02e17 	ldw	r3,184(sp)
 8006904:	d9002f17 	ldw	r4,188(sp)
 8006908:	18800017 	ldw	r2,0(r3)
 800690c:	18c00104 	addi	r3,r3,4
 8006910:	d8c02e15 	stw	r3,184(sp)
 8006914:	11000015 	stw	r4,0(r2)
 8006918:	00395406 	br	8004e6c <__alt_data_end+0xfc004e6c>
 800691c:	d9002e17 	ldw	r4,184(sp)
 8006920:	002d883a 	mov	r22,zero
 8006924:	24c00017 	ldw	r19,0(r4)
 8006928:	21000104 	addi	r4,r4,4
 800692c:	d9002e15 	stw	r4,184(sp)
 8006930:	003c0706 	br	8005950 <__alt_data_end+0xfc005950>
 8006934:	d9402e17 	ldw	r5,184(sp)
 8006938:	d8c02a17 	ldw	r3,168(sp)
 800693c:	002d883a 	mov	r22,zero
 8006940:	28800104 	addi	r2,r5,4
 8006944:	2cc0000b 	ldhu	r19,0(r5)
 8006948:	183dc10e 	bge	r3,zero,8006050 <__alt_data_end+0xfc006050>
 800694c:	003f7506 	br	8006724 <__alt_data_end+0xfc006724>
 8006950:	040200b4 	movhi	r16,2050
 8006954:	842eea04 	addi	r16,r16,-17496
 8006958:	003aa706 	br	80053f8 <__alt_data_end+0xfc0053f8>
 800695c:	d9002d17 	ldw	r4,180(sp)
 8006960:	d9801e04 	addi	r6,sp,120
 8006964:	b80b883a 	mov	r5,r23
 8006968:	80117d00 	call	80117d0 <__sprint_r>
 800696c:	103a0b1e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8006970:	dc402617 	ldw	r17,152(sp)
 8006974:	d8c02017 	ldw	r3,128(sp)
 8006978:	da000404 	addi	r8,sp,16
 800697c:	003f9c06 	br	80067f0 <__alt_data_end+0xfc0067f0>
 8006980:	ac400043 	ldbu	r17,1(r21)
 8006984:	84000814 	ori	r16,r16,32
 8006988:	ad400044 	addi	r21,r21,1
 800698c:	8c403fcc 	andi	r17,r17,255
 8006990:	8c40201c 	xori	r17,r17,128
 8006994:	8c7fe004 	addi	r17,r17,-128
 8006998:	00395e06 	br	8004f14 <__alt_data_end+0xfc004f14>
 800699c:	d8c02e15 	stw	r3,184(sp)
 80069a0:	0039883a 	mov	fp,zero
 80069a4:	003e3506 	br	800627c <__alt_data_end+0xfc00627c>
 80069a8:	d9002d17 	ldw	r4,180(sp)
 80069ac:	d9801e04 	addi	r6,sp,120
 80069b0:	b80b883a 	mov	r5,r23
 80069b4:	80117d00 	call	80117d0 <__sprint_r>
 80069b8:	1039f81e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 80069bc:	d8c02017 	ldw	r3,128(sp)
 80069c0:	da000404 	addi	r8,sp,16
 80069c4:	003cd006 	br	8005d08 <__alt_data_end+0xfc005d08>
 80069c8:	8009883a 	mov	r4,r16
 80069cc:	df003d15 	stw	fp,244(sp)
 80069d0:	8004cf40 	call	8004cf4 <strlen>
 80069d4:	d8802b15 	stw	r2,172(sp)
 80069d8:	da003d17 	ldw	r8,244(sp)
 80069dc:	103c200e 	bge	r2,zero,8005a60 <__alt_data_end+0xfc005a60>
 80069e0:	0005883a 	mov	r2,zero
 80069e4:	003c1e06 	br	8005a60 <__alt_data_end+0xfc005a60>
 80069e8:	d9002d17 	ldw	r4,180(sp)
 80069ec:	d9801e04 	addi	r6,sp,120
 80069f0:	b80b883a 	mov	r5,r23
 80069f4:	80117d00 	call	80117d0 <__sprint_r>
 80069f8:	1039e81e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 80069fc:	d8c02017 	ldw	r3,128(sp)
 8006a00:	d8801f17 	ldw	r2,124(sp)
 8006a04:	da000404 	addi	r8,sp,16
 8006a08:	d9403317 	ldw	r5,204(sp)
 8006a0c:	10800044 	addi	r2,r2,1
 8006a10:	44000015 	stw	r16,0(r8)
 8006a14:	28c7883a 	add	r3,r5,r3
 8006a18:	003b5b06 	br	8005788 <__alt_data_end+0xfc005788>
 8006a1c:	010200b4 	movhi	r4,2050
 8006a20:	212efe84 	addi	r4,r4,-17414
 8006a24:	d9003515 	stw	r4,212(sp)
 8006a28:	003af206 	br	80055f4 <__alt_data_end+0xfc0055f4>
 8006a2c:	013fffc4 	movi	r4,-1
 8006a30:	003a0806 	br	8005254 <__alt_data_end+0xfc005254>
 8006a34:	0023883a 	mov	r17,zero
 8006a38:	003d9d06 	br	80060b0 <__alt_data_end+0xfc0060b0>
 8006a3c:	d9002d17 	ldw	r4,180(sp)
 8006a40:	d9801e04 	addi	r6,sp,120
 8006a44:	b80b883a 	mov	r5,r23
 8006a48:	80117d00 	call	80117d0 <__sprint_r>
 8006a4c:	1039d31e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8006a50:	d8c02017 	ldw	r3,128(sp)
 8006a54:	da000404 	addi	r8,sp,16
 8006a58:	003d9406 	br	80060ac <__alt_data_end+0xfc0060ac>
 8006a5c:	010200b4 	movhi	r4,2050
 8006a60:	212efa84 	addi	r4,r4,-17430
 8006a64:	d9002c15 	stw	r4,176(sp)
 8006a68:	d9002c17 	ldw	r4,176(sp)
 8006a6c:	1c47883a 	add	r3,r3,r17
 8006a70:	10800044 	addi	r2,r2,1
 8006a74:	41000015 	stw	r4,0(r8)
 8006a78:	44400115 	stw	r17,4(r8)
 8006a7c:	d8c02015 	stw	r3,128(sp)
 8006a80:	d8801f15 	stw	r2,124(sp)
 8006a84:	010001c4 	movi	r4,7
 8006a88:	20bfd716 	blt	r4,r2,80069e8 <__alt_data_end+0xfc0069e8>
 8006a8c:	42000204 	addi	r8,r8,8
 8006a90:	003fdd06 	br	8006a08 <__alt_data_end+0xfc006a08>
 8006a94:	d9002d17 	ldw	r4,180(sp)
 8006a98:	d9801e04 	addi	r6,sp,120
 8006a9c:	b80b883a 	mov	r5,r23
 8006aa0:	80117d00 	call	80117d0 <__sprint_r>
 8006aa4:	1039bd1e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8006aa8:	d8802617 	ldw	r2,152(sp)
 8006aac:	d8c02017 	ldw	r3,128(sp)
 8006ab0:	da000404 	addi	r8,sp,16
 8006ab4:	003e1006 	br	80062f8 <__alt_data_end+0xfc0062f8>
 8006ab8:	00800044 	movi	r2,1
 8006abc:	10803fcc 	andi	r2,r2,255
 8006ac0:	00c00044 	movi	r3,1
 8006ac4:	10fa0d26 	beq	r2,r3,80052fc <__alt_data_end+0xfc0052fc>
 8006ac8:	00c00084 	movi	r3,2
 8006acc:	10fbaf26 	beq	r2,r3,800598c <__alt_data_end+0xfc00598c>
 8006ad0:	003a6d06 	br	8005488 <__alt_data_end+0xfc005488>
 8006ad4:	010200b4 	movhi	r4,2050
 8006ad8:	212efe84 	addi	r4,r4,-17414
 8006adc:	d9003515 	stw	r4,212(sp)
 8006ae0:	003b5406 	br	8005834 <__alt_data_end+0xfc005834>
 8006ae4:	d8802a17 	ldw	r2,168(sp)
 8006ae8:	00c00184 	movi	r3,6
 8006aec:	1880012e 	bgeu	r3,r2,8006af4 <___vfprintf_internal_r+0x1d68>
 8006af0:	1805883a 	mov	r2,r3
 8006af4:	d8802b15 	stw	r2,172(sp)
 8006af8:	1000ef16 	blt	r2,zero,8006eb8 <___vfprintf_internal_r+0x212c>
 8006afc:	040200b4 	movhi	r16,2050
 8006b00:	d8802915 	stw	r2,164(sp)
 8006b04:	dcc02e15 	stw	r19,184(sp)
 8006b08:	d8002a15 	stw	zero,168(sp)
 8006b0c:	d8003215 	stw	zero,200(sp)
 8006b10:	842ef804 	addi	r16,r16,-17440
 8006b14:	0039883a 	mov	fp,zero
 8006b18:	003a8006 	br	800551c <__alt_data_end+0xfc00551c>
 8006b1c:	0021883a 	mov	r16,zero
 8006b20:	003e0706 	br	8006340 <__alt_data_end+0xfc006340>
 8006b24:	d9002d17 	ldw	r4,180(sp)
 8006b28:	d9801e04 	addi	r6,sp,120
 8006b2c:	b80b883a 	mov	r5,r23
 8006b30:	80117d00 	call	80117d0 <__sprint_r>
 8006b34:	1039991e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8006b38:	d8802617 	ldw	r2,152(sp)
 8006b3c:	d9403317 	ldw	r5,204(sp)
 8006b40:	d8c02017 	ldw	r3,128(sp)
 8006b44:	da000404 	addi	r8,sp,16
 8006b48:	2885c83a 	sub	r2,r5,r2
 8006b4c:	003dfb06 	br	800633c <__alt_data_end+0xfc00633c>
 8006b50:	9080004c 	andi	r2,r18,1
 8006b54:	103e8f1e 	bne	r2,zero,8006594 <__alt_data_end+0xfc006594>
 8006b58:	d8802117 	ldw	r2,132(sp)
 8006b5c:	003e9e06 	br	80065d8 <__alt_data_end+0xfc0065d8>
 8006b60:	1025883a 	mov	r18,r2
 8006b64:	0039883a 	mov	fp,zero
 8006b68:	00800084 	movi	r2,2
 8006b6c:	003fd306 	br	8006abc <__alt_data_end+0xfc006abc>
 8006b70:	07000b44 	movi	fp,45
 8006b74:	df002785 	stb	fp,158(sp)
 8006b78:	003a1b06 	br	80053e8 <__alt_data_end+0xfc0053e8>
 8006b7c:	00c00b44 	movi	r3,45
 8006b80:	d8c02785 	stb	r3,158(sp)
 8006b84:	d8802915 	stw	r2,164(sp)
 8006b88:	dc802c17 	ldw	r18,176(sp)
 8006b8c:	d8002a15 	stw	zero,168(sp)
 8006b90:	07000b44 	movi	fp,45
 8006b94:	003a5e06 	br	8005510 <__alt_data_end+0xfc005510>
 8006b98:	040200b4 	movhi	r16,2050
 8006b9c:	842eed04 	addi	r16,r16,-17484
 8006ba0:	003f4706 	br	80068c0 <__alt_data_end+0xfc0068c0>
 8006ba4:	d9002e17 	ldw	r4,184(sp)
 8006ba8:	d9402f17 	ldw	r5,188(sp)
 8006bac:	20800017 	ldw	r2,0(r4)
 8006bb0:	21000104 	addi	r4,r4,4
 8006bb4:	d9002e15 	stw	r4,184(sp)
 8006bb8:	11400015 	stw	r5,0(r2)
 8006bbc:	0038ab06 	br	8004e6c <__alt_data_end+0xfc004e6c>
 8006bc0:	dd802617 	ldw	r22,152(sp)
 8006bc4:	00bfff44 	movi	r2,-3
 8006bc8:	b0801c16 	blt	r22,r2,8006c3c <___vfprintf_internal_r+0x1eb0>
 8006bcc:	d9402a17 	ldw	r5,168(sp)
 8006bd0:	2d801a16 	blt	r5,r22,8006c3c <___vfprintf_internal_r+0x1eb0>
 8006bd4:	dd803215 	stw	r22,200(sp)
 8006bd8:	003e8906 	br	8006600 <__alt_data_end+0xfc006600>
 8006bdc:	010200b4 	movhi	r4,2050
 8006be0:	212efa84 	addi	r4,r4,-17430
 8006be4:	d9002c15 	stw	r4,176(sp)
 8006be8:	003c9106 	br	8005e30 <__alt_data_end+0xfc005e30>
 8006bec:	e005883a 	mov	r2,fp
 8006bf0:	003e7906 	br	80065d8 <__alt_data_end+0xfc0065d8>
 8006bf4:	d9002a17 	ldw	r4,168(sp)
 8006bf8:	df002783 	ldbu	fp,158(sp)
 8006bfc:	dcc02e15 	stw	r19,184(sp)
 8006c00:	d9002915 	stw	r4,164(sp)
 8006c04:	d9002b15 	stw	r4,172(sp)
 8006c08:	d8002a15 	stw	zero,168(sp)
 8006c0c:	d8003215 	stw	zero,200(sp)
 8006c10:	003a3b06 	br	8005500 <__alt_data_end+0xfc005500>
 8006c14:	9080004c 	andi	r2,r18,1
 8006c18:	0039883a 	mov	fp,zero
 8006c1c:	10000426 	beq	r2,zero,8006c30 <___vfprintf_internal_r+0x1ea4>
 8006c20:	00800c04 	movi	r2,48
 8006c24:	dc001dc4 	addi	r16,sp,119
 8006c28:	d8801dc5 	stb	r2,119(sp)
 8006c2c:	003b6406 	br	80059c0 <__alt_data_end+0xfc0059c0>
 8006c30:	d8002b15 	stw	zero,172(sp)
 8006c34:	dc001e04 	addi	r16,sp,120
 8006c38:	003a2b06 	br	80054e8 <__alt_data_end+0xfc0054e8>
 8006c3c:	8c7fff84 	addi	r17,r17,-2
 8006c40:	b5bfffc4 	addi	r22,r22,-1
 8006c44:	dd802615 	stw	r22,152(sp)
 8006c48:	dc4022c5 	stb	r17,139(sp)
 8006c4c:	b000bf16 	blt	r22,zero,8006f4c <___vfprintf_internal_r+0x21c0>
 8006c50:	00800ac4 	movi	r2,43
 8006c54:	d8802305 	stb	r2,140(sp)
 8006c58:	00800244 	movi	r2,9
 8006c5c:	15807016 	blt	r2,r22,8006e20 <___vfprintf_internal_r+0x2094>
 8006c60:	00800c04 	movi	r2,48
 8006c64:	b5800c04 	addi	r22,r22,48
 8006c68:	d8802345 	stb	r2,141(sp)
 8006c6c:	dd802385 	stb	r22,142(sp)
 8006c70:	d88023c4 	addi	r2,sp,143
 8006c74:	df0022c4 	addi	fp,sp,139
 8006c78:	d8c03317 	ldw	r3,204(sp)
 8006c7c:	1739c83a 	sub	fp,r2,fp
 8006c80:	d9003317 	ldw	r4,204(sp)
 8006c84:	e0c7883a 	add	r3,fp,r3
 8006c88:	df003a15 	stw	fp,232(sp)
 8006c8c:	d8c02b15 	stw	r3,172(sp)
 8006c90:	00800044 	movi	r2,1
 8006c94:	1100b30e 	bge	r2,r4,8006f64 <___vfprintf_internal_r+0x21d8>
 8006c98:	d8c02b17 	ldw	r3,172(sp)
 8006c9c:	18c00044 	addi	r3,r3,1
 8006ca0:	d8c02b15 	stw	r3,172(sp)
 8006ca4:	1805883a 	mov	r2,r3
 8006ca8:	1800ac16 	blt	r3,zero,8006f5c <___vfprintf_internal_r+0x21d0>
 8006cac:	d8003215 	stw	zero,200(sp)
 8006cb0:	003e5d06 	br	8006628 <__alt_data_end+0xfc006628>
 8006cb4:	d9002d17 	ldw	r4,180(sp)
 8006cb8:	d9801e04 	addi	r6,sp,120
 8006cbc:	b80b883a 	mov	r5,r23
 8006cc0:	80117d00 	call	80117d0 <__sprint_r>
 8006cc4:	1039351e 	bne	r2,zero,800519c <__alt_data_end+0xfc00519c>
 8006cc8:	dc402617 	ldw	r17,152(sp)
 8006ccc:	d8c02017 	ldw	r3,128(sp)
 8006cd0:	d8801f17 	ldw	r2,124(sp)
 8006cd4:	da000404 	addi	r8,sp,16
 8006cd8:	003ed606 	br	8006834 <__alt_data_end+0xfc006834>
 8006cdc:	182b883a 	mov	r21,r3
 8006ce0:	d8002a15 	stw	zero,168(sp)
 8006ce4:	00388c06 	br	8004f18 <__alt_data_end+0xfc004f18>
 8006ce8:	d8802a17 	ldw	r2,168(sp)
 8006cec:	103e071e 	bne	r2,zero,800650c <__alt_data_end+0xfc00650c>
 8006cf0:	dc002a15 	stw	r16,168(sp)
 8006cf4:	003e0506 	br	800650c <__alt_data_end+0xfc00650c>
 8006cf8:	d9002a17 	ldw	r4,168(sp)
 8006cfc:	20c00044 	addi	r3,r4,1
 8006d00:	003e0f06 	br	8006540 <__alt_data_end+0xfc006540>
 8006d04:	01400184 	movi	r5,6
 8006d08:	d9402a15 	stw	r5,168(sp)
 8006d0c:	003dff06 	br	800650c <__alt_data_end+0xfc00650c>
 8006d10:	d8802104 	addi	r2,sp,132
 8006d14:	d8800315 	stw	r2,12(sp)
 8006d18:	d8802504 	addi	r2,sp,148
 8006d1c:	d8800215 	stw	r2,8(sp)
 8006d20:	d8802604 	addi	r2,sp,152
 8006d24:	d8800115 	stw	r2,4(sp)
 8006d28:	d8802a17 	ldw	r2,168(sp)
 8006d2c:	d9403617 	ldw	r5,216(sp)
 8006d30:	d9002d17 	ldw	r4,180(sp)
 8006d34:	d8800015 	stw	r2,0(sp)
 8006d38:	01c000c4 	movi	r7,3
 8006d3c:	980d883a 	mov	r6,r19
 8006d40:	da003d15 	stw	r8,244(sp)
 8006d44:	8008fcc0 	call	8008fcc <_dtoa_r>
 8006d48:	d8c02a17 	ldw	r3,168(sp)
 8006d4c:	da003d17 	ldw	r8,244(sp)
 8006d50:	1021883a 	mov	r16,r2
 8006d54:	10f9883a 	add	fp,r2,r3
 8006d58:	81000007 	ldb	r4,0(r16)
 8006d5c:	00800c04 	movi	r2,48
 8006d60:	20805e26 	beq	r4,r2,8006edc <___vfprintf_internal_r+0x2150>
 8006d64:	d8c02617 	ldw	r3,152(sp)
 8006d68:	e0f9883a 	add	fp,fp,r3
 8006d6c:	003e0a06 	br	8006598 <__alt_data_end+0xfc006598>
 8006d70:	00c00b44 	movi	r3,45
 8006d74:	24e0003c 	xorhi	r19,r4,32768
 8006d78:	d8c02905 	stb	r3,164(sp)
 8006d7c:	003de906 	br	8006524 <__alt_data_end+0xfc006524>
 8006d80:	d8c03217 	ldw	r3,200(sp)
 8006d84:	00c07a0e 	bge	zero,r3,8006f70 <___vfprintf_internal_r+0x21e4>
 8006d88:	00800044 	movi	r2,1
 8006d8c:	d9003317 	ldw	r4,204(sp)
 8006d90:	1105883a 	add	r2,r2,r4
 8006d94:	d8802b15 	stw	r2,172(sp)
 8006d98:	10004e16 	blt	r2,zero,8006ed4 <___vfprintf_internal_r+0x2148>
 8006d9c:	044019c4 	movi	r17,103
 8006da0:	003e2106 	br	8006628 <__alt_data_end+0xfc006628>
 8006da4:	d9002a17 	ldw	r4,168(sp)
 8006da8:	d8802104 	addi	r2,sp,132
 8006dac:	d8800315 	stw	r2,12(sp)
 8006db0:	d9000015 	stw	r4,0(sp)
 8006db4:	d8802504 	addi	r2,sp,148
 8006db8:	d9403617 	ldw	r5,216(sp)
 8006dbc:	d9002d17 	ldw	r4,180(sp)
 8006dc0:	d8800215 	stw	r2,8(sp)
 8006dc4:	d8802604 	addi	r2,sp,152
 8006dc8:	d8800115 	stw	r2,4(sp)
 8006dcc:	01c000c4 	movi	r7,3
 8006dd0:	980d883a 	mov	r6,r19
 8006dd4:	da003d15 	stw	r8,244(sp)
 8006dd8:	8008fcc0 	call	8008fcc <_dtoa_r>
 8006ddc:	d8c02a17 	ldw	r3,168(sp)
 8006de0:	da003d17 	ldw	r8,244(sp)
 8006de4:	1021883a 	mov	r16,r2
 8006de8:	00801184 	movi	r2,70
 8006dec:	80f9883a 	add	fp,r16,r3
 8006df0:	88bfd926 	beq	r17,r2,8006d58 <__alt_data_end+0xfc006d58>
 8006df4:	003de806 	br	8006598 <__alt_data_end+0xfc006598>
 8006df8:	d9002a17 	ldw	r4,168(sp)
 8006dfc:	00c04d0e 	bge	zero,r3,8006f34 <___vfprintf_internal_r+0x21a8>
 8006e00:	2000441e 	bne	r4,zero,8006f14 <___vfprintf_internal_r+0x2188>
 8006e04:	9480004c 	andi	r18,r18,1
 8006e08:	9000421e 	bne	r18,zero,8006f14 <___vfprintf_internal_r+0x2188>
 8006e0c:	1805883a 	mov	r2,r3
 8006e10:	18006f16 	blt	r3,zero,8006fd0 <___vfprintf_internal_r+0x2244>
 8006e14:	d8c03217 	ldw	r3,200(sp)
 8006e18:	d8c02b15 	stw	r3,172(sp)
 8006e1c:	003e0206 	br	8006628 <__alt_data_end+0xfc006628>
 8006e20:	df0022c4 	addi	fp,sp,139
 8006e24:	dc002a15 	stw	r16,168(sp)
 8006e28:	4027883a 	mov	r19,r8
 8006e2c:	e021883a 	mov	r16,fp
 8006e30:	b009883a 	mov	r4,r22
 8006e34:	01400284 	movi	r5,10
 8006e38:	80027c40 	call	80027c4 <__modsi3>
 8006e3c:	10800c04 	addi	r2,r2,48
 8006e40:	843fffc4 	addi	r16,r16,-1
 8006e44:	b009883a 	mov	r4,r22
 8006e48:	01400284 	movi	r5,10
 8006e4c:	80800005 	stb	r2,0(r16)
 8006e50:	80027400 	call	8002740 <__divsi3>
 8006e54:	102d883a 	mov	r22,r2
 8006e58:	00800244 	movi	r2,9
 8006e5c:	15bff416 	blt	r2,r22,8006e30 <__alt_data_end+0xfc006e30>
 8006e60:	9811883a 	mov	r8,r19
 8006e64:	b0800c04 	addi	r2,r22,48
 8006e68:	8027883a 	mov	r19,r16
 8006e6c:	997fffc4 	addi	r5,r19,-1
 8006e70:	98bfffc5 	stb	r2,-1(r19)
 8006e74:	dc002a17 	ldw	r16,168(sp)
 8006e78:	2f006d2e 	bgeu	r5,fp,8007030 <___vfprintf_internal_r+0x22a4>
 8006e7c:	d9c02384 	addi	r7,sp,142
 8006e80:	3ccfc83a 	sub	r7,r7,r19
 8006e84:	d9002344 	addi	r4,sp,141
 8006e88:	e1cf883a 	add	r7,fp,r7
 8006e8c:	00000106 	br	8006e94 <___vfprintf_internal_r+0x2108>
 8006e90:	28800003 	ldbu	r2,0(r5)
 8006e94:	20800005 	stb	r2,0(r4)
 8006e98:	21000044 	addi	r4,r4,1
 8006e9c:	29400044 	addi	r5,r5,1
 8006ea0:	393ffb1e 	bne	r7,r4,8006e90 <__alt_data_end+0xfc006e90>
 8006ea4:	d8802304 	addi	r2,sp,140
 8006ea8:	14c5c83a 	sub	r2,r2,r19
 8006eac:	d8c02344 	addi	r3,sp,141
 8006eb0:	1885883a 	add	r2,r3,r2
 8006eb4:	003f7006 	br	8006c78 <__alt_data_end+0xfc006c78>
 8006eb8:	0005883a 	mov	r2,zero
 8006ebc:	003f0f06 	br	8006afc <__alt_data_end+0xfc006afc>
 8006ec0:	d8c03217 	ldw	r3,200(sp)
 8006ec4:	18c00044 	addi	r3,r3,1
 8006ec8:	d8c02b15 	stw	r3,172(sp)
 8006ecc:	1805883a 	mov	r2,r3
 8006ed0:	183fb20e 	bge	r3,zero,8006d9c <__alt_data_end+0xfc006d9c>
 8006ed4:	0005883a 	mov	r2,zero
 8006ed8:	003fb006 	br	8006d9c <__alt_data_end+0xfc006d9c>
 8006edc:	d9003617 	ldw	r4,216(sp)
 8006ee0:	000d883a 	mov	r6,zero
 8006ee4:	000f883a 	mov	r7,zero
 8006ee8:	980b883a 	mov	r5,r19
 8006eec:	d8c03c15 	stw	r3,240(sp)
 8006ef0:	da003d15 	stw	r8,244(sp)
 8006ef4:	80177940 	call	8017794 <__eqdf2>
 8006ef8:	d8c03c17 	ldw	r3,240(sp)
 8006efc:	da003d17 	ldw	r8,244(sp)
 8006f00:	103f9826 	beq	r2,zero,8006d64 <__alt_data_end+0xfc006d64>
 8006f04:	00800044 	movi	r2,1
 8006f08:	10c7c83a 	sub	r3,r2,r3
 8006f0c:	d8c02615 	stw	r3,152(sp)
 8006f10:	003f9506 	br	8006d68 <__alt_data_end+0xfc006d68>
 8006f14:	d9002a17 	ldw	r4,168(sp)
 8006f18:	d8c03217 	ldw	r3,200(sp)
 8006f1c:	20800044 	addi	r2,r4,1
 8006f20:	1885883a 	add	r2,r3,r2
 8006f24:	d8802b15 	stw	r2,172(sp)
 8006f28:	103dbf0e 	bge	r2,zero,8006628 <__alt_data_end+0xfc006628>
 8006f2c:	0005883a 	mov	r2,zero
 8006f30:	003dbd06 	br	8006628 <__alt_data_end+0xfc006628>
 8006f34:	2000201e 	bne	r4,zero,8006fb8 <___vfprintf_internal_r+0x222c>
 8006f38:	9480004c 	andi	r18,r18,1
 8006f3c:	90001e1e 	bne	r18,zero,8006fb8 <___vfprintf_internal_r+0x222c>
 8006f40:	00800044 	movi	r2,1
 8006f44:	d8802b15 	stw	r2,172(sp)
 8006f48:	003db706 	br	8006628 <__alt_data_end+0xfc006628>
 8006f4c:	00800b44 	movi	r2,45
 8006f50:	05adc83a 	sub	r22,zero,r22
 8006f54:	d8802305 	stb	r2,140(sp)
 8006f58:	003f3f06 	br	8006c58 <__alt_data_end+0xfc006c58>
 8006f5c:	0005883a 	mov	r2,zero
 8006f60:	003f5206 	br	8006cac <__alt_data_end+0xfc006cac>
 8006f64:	90a4703a 	and	r18,r18,r2
 8006f68:	903f4e26 	beq	r18,zero,8006ca4 <__alt_data_end+0xfc006ca4>
 8006f6c:	003f4a06 	br	8006c98 <__alt_data_end+0xfc006c98>
 8006f70:	00800084 	movi	r2,2
 8006f74:	10c5c83a 	sub	r2,r2,r3
 8006f78:	003f8406 	br	8006d8c <__alt_data_end+0xfc006d8c>
 8006f7c:	d9402e17 	ldw	r5,184(sp)
 8006f80:	d9002e17 	ldw	r4,184(sp)
 8006f84:	ac400043 	ldbu	r17,1(r21)
 8006f88:	29400017 	ldw	r5,0(r5)
 8006f8c:	20800104 	addi	r2,r4,4
 8006f90:	d8802e15 	stw	r2,184(sp)
 8006f94:	d9402a15 	stw	r5,168(sp)
 8006f98:	182b883a 	mov	r21,r3
 8006f9c:	283e7b0e 	bge	r5,zero,800698c <__alt_data_end+0xfc00698c>
 8006fa0:	8c403fcc 	andi	r17,r17,255
 8006fa4:	017fffc4 	movi	r5,-1
 8006fa8:	8c40201c 	xori	r17,r17,128
 8006fac:	d9402a15 	stw	r5,168(sp)
 8006fb0:	8c7fe004 	addi	r17,r17,-128
 8006fb4:	0037d706 	br	8004f14 <__alt_data_end+0xfc004f14>
 8006fb8:	d8c02a17 	ldw	r3,168(sp)
 8006fbc:	18c00084 	addi	r3,r3,2
 8006fc0:	d8c02b15 	stw	r3,172(sp)
 8006fc4:	1805883a 	mov	r2,r3
 8006fc8:	183d970e 	bge	r3,zero,8006628 <__alt_data_end+0xfc006628>
 8006fcc:	003fd706 	br	8006f2c <__alt_data_end+0xfc006f2c>
 8006fd0:	0005883a 	mov	r2,zero
 8006fd4:	003f8f06 	br	8006e14 <__alt_data_end+0xfc006e14>
 8006fd8:	9080004c 	andi	r2,r18,1
 8006fdc:	103f821e 	bne	r2,zero,8006de8 <__alt_data_end+0xfc006de8>
 8006fe0:	d8802117 	ldw	r2,132(sp)
 8006fe4:	1405c83a 	sub	r2,r2,r16
 8006fe8:	d8803315 	stw	r2,204(sp)
 8006fec:	b47ef426 	beq	r22,r17,8006bc0 <__alt_data_end+0xfc006bc0>
 8006ff0:	dd802617 	ldw	r22,152(sp)
 8006ff4:	003f1206 	br	8006c40 <__alt_data_end+0xfc006c40>
 8006ff8:	d8c02b03 	ldbu	r3,172(sp)
 8006ffc:	d8c02785 	stb	r3,158(sp)
 8007000:	0038df06 	br	8005380 <__alt_data_end+0xfc005380>
 8007004:	d8c02b03 	ldbu	r3,172(sp)
 8007008:	d8c02785 	stb	r3,158(sp)
 800700c:	0038aa06 	br	80052b8 <__alt_data_end+0xfc0052b8>
 8007010:	d8c02b03 	ldbu	r3,172(sp)
 8007014:	d8c02785 	stb	r3,158(sp)
 8007018:	003a4306 	br	8005928 <__alt_data_end+0xfc005928>
 800701c:	d8c02b03 	ldbu	r3,172(sp)
 8007020:	d8c02785 	stb	r3,158(sp)
 8007024:	003af506 	br	8005bfc <__alt_data_end+0xfc005bfc>
 8007028:	0005883a 	mov	r2,zero
 800702c:	003d7b06 	br	800661c <__alt_data_end+0xfc00661c>
 8007030:	d8802344 	addi	r2,sp,141
 8007034:	003f1006 	br	8006c78 <__alt_data_end+0xfc006c78>
 8007038:	d8c02b03 	ldbu	r3,172(sp)
 800703c:	d8c02785 	stb	r3,158(sp)
 8007040:	0038fd06 	br	8005438 <__alt_data_end+0xfc005438>
 8007044:	d8c02b03 	ldbu	r3,172(sp)
 8007048:	d8c02785 	stb	r3,158(sp)
 800704c:	003a9706 	br	8005aac <__alt_data_end+0xfc005aac>
 8007050:	d8c02b03 	ldbu	r3,172(sp)
 8007054:	d8c02785 	stb	r3,158(sp)
 8007058:	003a1806 	br	80058bc <__alt_data_end+0xfc0058bc>
 800705c:	d8c02b03 	ldbu	r3,172(sp)
 8007060:	d8c02785 	stb	r3,158(sp)
 8007064:	003abe06 	br	8005b60 <__alt_data_end+0xfc005b60>

08007068 <__vfprintf_internal>:
 8007068:	008200b4 	movhi	r2,2050
 800706c:	10b77404 	addi	r2,r2,-8752
 8007070:	300f883a 	mov	r7,r6
 8007074:	280d883a 	mov	r6,r5
 8007078:	200b883a 	mov	r5,r4
 800707c:	11000017 	ldw	r4,0(r2)
 8007080:	8004d8c1 	jmpi	8004d8c <___vfprintf_internal_r>

08007084 <__sbprintf>:
 8007084:	2880030b 	ldhu	r2,12(r5)
 8007088:	2ac01917 	ldw	r11,100(r5)
 800708c:	2a80038b 	ldhu	r10,14(r5)
 8007090:	2a400717 	ldw	r9,28(r5)
 8007094:	2a000917 	ldw	r8,36(r5)
 8007098:	defee204 	addi	sp,sp,-1144
 800709c:	00c10004 	movi	r3,1024
 80070a0:	dc011a15 	stw	r16,1128(sp)
 80070a4:	10bfff4c 	andi	r2,r2,65533
 80070a8:	2821883a 	mov	r16,r5
 80070ac:	d8cb883a 	add	r5,sp,r3
 80070b0:	dc811c15 	stw	r18,1136(sp)
 80070b4:	dc411b15 	stw	r17,1132(sp)
 80070b8:	dfc11d15 	stw	ra,1140(sp)
 80070bc:	2025883a 	mov	r18,r4
 80070c0:	d881030d 	sth	r2,1036(sp)
 80070c4:	dac11915 	stw	r11,1124(sp)
 80070c8:	da81038d 	sth	r10,1038(sp)
 80070cc:	da410715 	stw	r9,1052(sp)
 80070d0:	da010915 	stw	r8,1060(sp)
 80070d4:	dec10015 	stw	sp,1024(sp)
 80070d8:	dec10415 	stw	sp,1040(sp)
 80070dc:	d8c10215 	stw	r3,1032(sp)
 80070e0:	d8c10515 	stw	r3,1044(sp)
 80070e4:	d8010615 	stw	zero,1048(sp)
 80070e8:	8004d8c0 	call	8004d8c <___vfprintf_internal_r>
 80070ec:	1023883a 	mov	r17,r2
 80070f0:	10000416 	blt	r2,zero,8007104 <__sbprintf+0x80>
 80070f4:	d9410004 	addi	r5,sp,1024
 80070f8:	9009883a 	mov	r4,r18
 80070fc:	8002c3c0 	call	8002c3c <_fflush_r>
 8007100:	10000d1e 	bne	r2,zero,8007138 <__sbprintf+0xb4>
 8007104:	d881030b 	ldhu	r2,1036(sp)
 8007108:	1080100c 	andi	r2,r2,64
 800710c:	10000326 	beq	r2,zero,800711c <__sbprintf+0x98>
 8007110:	8080030b 	ldhu	r2,12(r16)
 8007114:	10801014 	ori	r2,r2,64
 8007118:	8080030d 	sth	r2,12(r16)
 800711c:	8805883a 	mov	r2,r17
 8007120:	dfc11d17 	ldw	ra,1140(sp)
 8007124:	dc811c17 	ldw	r18,1136(sp)
 8007128:	dc411b17 	ldw	r17,1132(sp)
 800712c:	dc011a17 	ldw	r16,1128(sp)
 8007130:	dec11e04 	addi	sp,sp,1144
 8007134:	f800283a 	ret
 8007138:	047fffc4 	movi	r17,-1
 800713c:	003ff106 	br	8007104 <__alt_data_end+0xfc007104>

08007140 <__svfscanf_r>:
 8007140:	2880030b 	ldhu	r2,12(r5)
 8007144:	deff4b04 	addi	sp,sp,-724
 8007148:	df00b315 	stw	fp,716(sp)
 800714c:	ddc0b215 	stw	r23,712(sp)
 8007150:	dfc0b415 	stw	ra,720(sp)
 8007154:	dd80b115 	stw	r22,708(sp)
 8007158:	dd40b015 	stw	r21,704(sp)
 800715c:	dd00af15 	stw	r20,700(sp)
 8007160:	dcc0ae15 	stw	r19,696(sp)
 8007164:	dc80ad15 	stw	r18,692(sp)
 8007168:	dc40ac15 	stw	r17,688(sp)
 800716c:	dc00ab15 	stw	r16,684(sp)
 8007170:	10c8000c 	andi	r3,r2,8192
 8007174:	d9c09c15 	stw	r7,624(sp)
 8007178:	2839883a 	mov	fp,r5
 800717c:	202f883a 	mov	r23,r4
 8007180:	1800061e 	bne	r3,zero,800719c <__svfscanf_r+0x5c>
 8007184:	29001917 	ldw	r4,100(r5)
 8007188:	00f7ffc4 	movi	r3,-8193
 800718c:	10880014 	ori	r2,r2,8192
 8007190:	20c6703a 	and	r3,r4,r3
 8007194:	2880030d 	sth	r2,12(r5)
 8007198:	28c01915 	stw	r3,100(r5)
 800719c:	30800003 	ldbu	r2,0(r6)
 80071a0:	0021883a 	mov	r16,zero
 80071a4:	058200b4 	movhi	r22,2050
 80071a8:	d800a115 	stw	zero,644(sp)
 80071ac:	d8009e15 	stw	zero,632(sp)
 80071b0:	d800a015 	stw	zero,640(sp)
 80071b4:	d8809b15 	stw	r2,620(sp)
 80071b8:	b5b77704 	addi	r22,r22,-8740
 80071bc:	8025883a 	mov	r18,r16
 80071c0:	e027883a 	mov	r19,fp
 80071c4:	35000044 	addi	r20,r6,1
 80071c8:	10001e26 	beq	r2,zero,8007244 <__svfscanf_r+0x104>
 80071cc:	b4000017 	ldw	r16,0(r22)
 80071d0:	8087883a 	add	r3,r16,r2
 80071d4:	18c00043 	ldbu	r3,1(r3)
 80071d8:	18c0020c 	andi	r3,r3,8
 80071dc:	18001b26 	beq	r3,zero,800724c <__svfscanf_r+0x10c>
 80071e0:	98800117 	ldw	r2,4(r19)
 80071e4:	00800e0e 	bge	zero,r2,8007220 <__svfscanf_r+0xe0>
 80071e8:	98c00017 	ldw	r3,0(r19)
 80071ec:	b1000017 	ldw	r4,0(r22)
 80071f0:	18800003 	ldbu	r2,0(r3)
 80071f4:	2085883a 	add	r2,r4,r2
 80071f8:	10800043 	ldbu	r2,1(r2)
 80071fc:	1080020c 	andi	r2,r2,8
 8007200:	10000b26 	beq	r2,zero,8007230 <__svfscanf_r+0xf0>
 8007204:	98800117 	ldw	r2,4(r19)
 8007208:	18c00044 	addi	r3,r3,1
 800720c:	98c00015 	stw	r3,0(r19)
 8007210:	10bfffc4 	addi	r2,r2,-1
 8007214:	98800115 	stw	r2,4(r19)
 8007218:	94800044 	addi	r18,r18,1
 800721c:	00bff216 	blt	zero,r2,80071e8 <__alt_data_end+0xfc0071e8>
 8007220:	980b883a 	mov	r5,r19
 8007224:	b809883a 	mov	r4,r23
 8007228:	80049240 	call	8004924 <__srefill_r>
 800722c:	103fee26 	beq	r2,zero,80071e8 <__alt_data_end+0xfc0071e8>
 8007230:	a00d883a 	mov	r6,r20
 8007234:	30800003 	ldbu	r2,0(r6)
 8007238:	35000044 	addi	r20,r6,1
 800723c:	d8809b15 	stw	r2,620(sp)
 8007240:	103fe21e 	bne	r2,zero,80071cc <__alt_data_end+0xfc0071cc>
 8007244:	d880a017 	ldw	r2,640(sp)
 8007248:	00009a06 	br	80074b4 <__svfscanf_r+0x374>
 800724c:	00c00944 	movi	r3,37
 8007250:	10c0891e 	bne	r2,r3,8007478 <__svfscanf_r+0x338>
 8007254:	0039883a 	mov	fp,zero
 8007258:	35400043 	ldbu	r21,1(r6)
 800725c:	0023883a 	mov	r17,zero
 8007260:	01801e04 	movi	r6,120
 8007264:	00c01b04 	movi	r3,108
 8007268:	e009883a 	mov	r4,fp
 800726c:	a1c00044 	addi	r7,r20,1
 8007270:	3540a236 	bltu	r6,r21,80074fc <__svfscanf_r+0x3bc>
 8007274:	a80490ba 	slli	r2,r21,2
 8007278:	01420034 	movhi	r5,2048
 800727c:	295ca304 	addi	r5,r5,29324
 8007280:	1145883a 	add	r2,r2,r5
 8007284:	10800017 	ldw	r2,0(r2)
 8007288:	1000683a 	jmp	r2
 800728c:	080074b0 	cmpltui	zero,at,466
 8007290:	080074fc 	xorhi	zero,at,467
 8007294:	080074fc 	xorhi	zero,at,467
 8007298:	080074fc 	xorhi	zero,at,467
 800729c:	080074fc 	xorhi	zero,at,467
 80072a0:	080074fc 	xorhi	zero,at,467
 80072a4:	080074fc 	xorhi	zero,at,467
 80072a8:	080074fc 	xorhi	zero,at,467
 80072ac:	080074fc 	xorhi	zero,at,467
 80072b0:	080074fc 	xorhi	zero,at,467
 80072b4:	080074fc 	xorhi	zero,at,467
 80072b8:	080074fc 	xorhi	zero,at,467
 80072bc:	080074fc 	xorhi	zero,at,467
 80072c0:	080074fc 	xorhi	zero,at,467
 80072c4:	080074fc 	xorhi	zero,at,467
 80072c8:	080074fc 	xorhi	zero,at,467
 80072cc:	080074fc 	xorhi	zero,at,467
 80072d0:	080074fc 	xorhi	zero,at,467
 80072d4:	080074fc 	xorhi	zero,at,467
 80072d8:	080074fc 	xorhi	zero,at,467
 80072dc:	080074fc 	xorhi	zero,at,467
 80072e0:	080074fc 	xorhi	zero,at,467
 80072e4:	080074fc 	xorhi	zero,at,467
 80072e8:	080074fc 	xorhi	zero,at,467
 80072ec:	080074fc 	xorhi	zero,at,467
 80072f0:	080074fc 	xorhi	zero,at,467
 80072f4:	080074fc 	xorhi	zero,at,467
 80072f8:	080074fc 	xorhi	zero,at,467
 80072fc:	080074fc 	xorhi	zero,at,467
 8007300:	080074fc 	xorhi	zero,at,467
 8007304:	080074fc 	xorhi	zero,at,467
 8007308:	080074fc 	xorhi	zero,at,467
 800730c:	080074fc 	xorhi	zero,at,467
 8007310:	080074fc 	xorhi	zero,at,467
 8007314:	080074fc 	xorhi	zero,at,467
 8007318:	080074fc 	xorhi	zero,at,467
 800731c:	080074fc 	xorhi	zero,at,467
 8007320:	08007470 	cmpltui	zero,at,465
 8007324:	080074fc 	xorhi	zero,at,467
 8007328:	080074fc 	xorhi	zero,at,467
 800732c:	080074fc 	xorhi	zero,at,467
 8007330:	080074fc 	xorhi	zero,at,467
 8007334:	080074e4 	muli	zero,at,467
 8007338:	080074fc 	xorhi	zero,at,467
 800733c:	080074fc 	xorhi	zero,at,467
 8007340:	080074fc 	xorhi	zero,at,467
 8007344:	080074fc 	xorhi	zero,at,467
 8007348:	080074fc 	xorhi	zero,at,467
 800734c:	08007644 	addi	zero,at,473
 8007350:	08007644 	addi	zero,at,473
 8007354:	08007644 	addi	zero,at,473
 8007358:	08007644 	addi	zero,at,473
 800735c:	08007644 	addi	zero,at,473
 8007360:	08007644 	addi	zero,at,473
 8007364:	08007644 	addi	zero,at,473
 8007368:	08007644 	addi	zero,at,473
 800736c:	08007644 	addi	zero,at,473
 8007370:	08007644 	addi	zero,at,473
 8007374:	080074fc 	xorhi	zero,at,467
 8007378:	080074fc 	xorhi	zero,at,467
 800737c:	080074fc 	xorhi	zero,at,467
 8007380:	080074fc 	xorhi	zero,at,467
 8007384:	080074fc 	xorhi	zero,at,467
 8007388:	080074fc 	xorhi	zero,at,467
 800738c:	080074fc 	xorhi	zero,at,467
 8007390:	080074fc 	xorhi	zero,at,467
 8007394:	080074fc 	xorhi	zero,at,467
 8007398:	080074fc 	xorhi	zero,at,467
 800739c:	08007614 	ori	zero,at,472
 80073a0:	080076f0 	cmpltui	zero,at,475
 80073a4:	080074fc 	xorhi	zero,at,467
 80073a8:	080076f0 	cmpltui	zero,at,475
 80073ac:	080074fc 	xorhi	zero,at,467
 80073b0:	080074fc 	xorhi	zero,at,467
 80073b4:	080074fc 	xorhi	zero,at,467
 80073b8:	080074fc 	xorhi	zero,at,467
 80073bc:	080076dc 	xori	zero,at,475
 80073c0:	080074fc 	xorhi	zero,at,467
 80073c4:	080074fc 	xorhi	zero,at,467
 80073c8:	080076ac 	andhi	zero,at,474
 80073cc:	080074fc 	xorhi	zero,at,467
 80073d0:	080074fc 	xorhi	zero,at,467
 80073d4:	080074fc 	xorhi	zero,at,467
 80073d8:	080074fc 	xorhi	zero,at,467
 80073dc:	080074fc 	xorhi	zero,at,467
 80073e0:	080074fc 	xorhi	zero,at,467
 80073e4:	080074fc 	xorhi	zero,at,467
 80073e8:	080074fc 	xorhi	zero,at,467
 80073ec:	0800767c 	xorhi	zero,at,473
 80073f0:	080074fc 	xorhi	zero,at,467
 80073f4:	080074fc 	xorhi	zero,at,467
 80073f8:	08007838 	rdprs	zero,at,480
 80073fc:	080074fc 	xorhi	zero,at,467
 8007400:	080074fc 	xorhi	zero,at,467
 8007404:	080074fc 	xorhi	zero,at,467
 8007408:	080074fc 	xorhi	zero,at,467
 800740c:	080074fc 	xorhi	zero,at,467
 8007410:	080074fc 	xorhi	zero,at,467
 8007414:	080074fc 	xorhi	zero,at,467
 8007418:	080077b8 	rdprs	zero,at,478
 800741c:	0800778c 	andi	zero,at,478
 8007420:	080076f0 	cmpltui	zero,at,475
 8007424:	080076f0 	cmpltui	zero,at,475
 8007428:	080076f0 	cmpltui	zero,at,475
 800742c:	08007778 	rdprs	zero,at,477
 8007430:	080078c8 	cmpgei	zero,at,483
 8007434:	080074fc 	xorhi	zero,at,467
 8007438:	080074fc 	xorhi	zero,at,467
 800743c:	08007764 	muli	zero,at,477
 8007440:	080074fc 	xorhi	zero,at,467
 8007444:	08007734 	orhi	zero,at,476
 8007448:	08007708 	cmpgei	zero,at,476
 800744c:	080075e4 	muli	zero,at,471
 8007450:	080074fc 	xorhi	zero,at,467
 8007454:	080074fc 	xorhi	zero,at,467
 8007458:	080075cc 	andi	zero,at,471
 800745c:	080074fc 	xorhi	zero,at,467
 8007460:	08007550 	cmplti	zero,at,469
 8007464:	080074fc 	xorhi	zero,at,467
 8007468:	080074fc 	xorhi	zero,at,467
 800746c:	0800767c 	xorhi	zero,at,473
 8007470:	d9c09d15 	stw	r7,628(sp)
 8007474:	3829883a 	mov	r20,r7
 8007478:	98800117 	ldw	r2,4(r19)
 800747c:	0081c60e 	bge	zero,r2,8007b98 <__svfscanf_r+0xa58>
 8007480:	98800017 	ldw	r2,0(r19)
 8007484:	a0ffffc3 	ldbu	r3,-1(r20)
 8007488:	11000003 	ldbu	r4,0(r2)
 800748c:	20ff6d1e 	bne	r4,r3,8007244 <__alt_data_end+0xfc007244>
 8007490:	98c00117 	ldw	r3,4(r19)
 8007494:	10800044 	addi	r2,r2,1
 8007498:	98800015 	stw	r2,0(r19)
 800749c:	18bfffc4 	addi	r2,r3,-1
 80074a0:	98800115 	stw	r2,4(r19)
 80074a4:	94800044 	addi	r18,r18,1
 80074a8:	a00d883a 	mov	r6,r20
 80074ac:	003f6106 	br	8007234 <__alt_data_end+0xfc007234>
 80074b0:	00bfffc4 	movi	r2,-1
 80074b4:	dfc0b417 	ldw	ra,720(sp)
 80074b8:	df00b317 	ldw	fp,716(sp)
 80074bc:	ddc0b217 	ldw	r23,712(sp)
 80074c0:	dd80b117 	ldw	r22,708(sp)
 80074c4:	dd40b017 	ldw	r21,704(sp)
 80074c8:	dd00af17 	ldw	r20,700(sp)
 80074cc:	dcc0ae17 	ldw	r19,696(sp)
 80074d0:	dc80ad17 	ldw	r18,692(sp)
 80074d4:	dc40ac17 	ldw	r17,688(sp)
 80074d8:	dc00ab17 	ldw	r16,684(sp)
 80074dc:	dec0b504 	addi	sp,sp,724
 80074e0:	f800283a 	ret
 80074e4:	a1400043 	ldbu	r5,1(r20)
 80074e8:	3829883a 	mov	r20,r7
 80074ec:	8c400414 	ori	r17,r17,16
 80074f0:	2d403fcc 	andi	r21,r5,255
 80074f4:	a1c00044 	addi	r7,r20,1
 80074f8:	357f5e2e 	bgeu	r6,r21,8007274 <__alt_data_end+0xfc007274>
 80074fc:	856b883a 	add	r21,r16,r21
 8007500:	a8800043 	ldbu	r2,1(r21)
 8007504:	d9c09d15 	stw	r7,628(sp)
 8007508:	00c00044 	movi	r3,1
 800750c:	108000cc 	andi	r2,r2,3
 8007510:	2039883a 	mov	fp,r4
 8007514:	10c1a526 	beq	r2,r3,8007bac <__svfscanf_r+0xa6c>
 8007518:	98800117 	ldw	r2,4(r19)
 800751c:	00804216 	blt	zero,r2,8007628 <__svfscanf_r+0x4e8>
 8007520:	980b883a 	mov	r5,r19
 8007524:	b809883a 	mov	r4,r23
 8007528:	80049240 	call	8004924 <__srefill_r>
 800752c:	10015e1e 	bne	r2,zero,8007aa8 <__svfscanf_r+0x968>
 8007530:	01020074 	movhi	r4,2049
 8007534:	21399b04 	addi	r4,r4,-6548
 8007538:	01400284 	movi	r5,10
 800753c:	b4000017 	ldw	r16,0(r22)
 8007540:	d900a115 	stw	r4,644(sp)
 8007544:	d9409e15 	stw	r5,632(sp)
 8007548:	050000c4 	movi	r20,3
 800754c:	00000a06 	br	8007578 <__svfscanf_r+0x438>
 8007550:	98800117 	ldw	r2,4(r19)
 8007554:	d9c09d15 	stw	r7,628(sp)
 8007558:	2039883a 	mov	fp,r4
 800755c:	0081e20e 	bge	zero,r2,8007ce8 <__svfscanf_r+0xba8>
 8007560:	00c20074 	movhi	r3,2049
 8007564:	18faf904 	addi	r3,r3,-5148
 8007568:	01000284 	movi	r4,10
 800756c:	d8c0a115 	stw	r3,644(sp)
 8007570:	d9009e15 	stw	r4,632(sp)
 8007574:	050000c4 	movi	r20,3
 8007578:	98c00017 	ldw	r3,0(r19)
 800757c:	00000206 	br	8007588 <__svfscanf_r+0x448>
 8007580:	18c00044 	addi	r3,r3,1
 8007584:	98c00015 	stw	r3,0(r19)
 8007588:	19000003 	ldbu	r4,0(r3)
 800758c:	20803fcc 	andi	r2,r4,255
 8007590:	8085883a 	add	r2,r16,r2
 8007594:	10800043 	ldbu	r2,1(r2)
 8007598:	1140020c 	andi	r5,r2,8
 800759c:	28020126 	beq	r5,zero,8007da4 <__svfscanf_r+0xc64>
 80075a0:	98800117 	ldw	r2,4(r19)
 80075a4:	94800044 	addi	r18,r18,1
 80075a8:	10bfffc4 	addi	r2,r2,-1
 80075ac:	98800115 	stw	r2,4(r19)
 80075b0:	00bff316 	blt	zero,r2,8007580 <__alt_data_end+0xfc007580>
 80075b4:	980b883a 	mov	r5,r19
 80075b8:	b809883a 	mov	r4,r23
 80075bc:	80049240 	call	8004924 <__srefill_r>
 80075c0:	1001391e 	bne	r2,zero,8007aa8 <__svfscanf_r+0x968>
 80075c4:	b4000017 	ldw	r16,0(r22)
 80075c8:	003feb06 	br	8007578 <__alt_data_end+0xfc007578>
 80075cc:	98800117 	ldw	r2,4(r19)
 80075d0:	d9c09d15 	stw	r7,628(sp)
 80075d4:	2039883a 	mov	fp,r4
 80075d8:	0081aa0e 	bge	zero,r2,8007c84 <__svfscanf_r+0xb44>
 80075dc:	05000084 	movi	r20,2
 80075e0:	003fe506 	br	8007578 <__alt_data_end+0xfc007578>
 80075e4:	98800117 	ldw	r2,4(r19)
 80075e8:	d9c09d15 	stw	r7,628(sp)
 80075ec:	2039883a 	mov	fp,r4
 80075f0:	8c408814 	ori	r17,r17,544
 80075f4:	0081df0e 	bge	zero,r2,8007d74 <__svfscanf_r+0xc34>
 80075f8:	00c20074 	movhi	r3,2049
 80075fc:	18faf904 	addi	r3,r3,-5148
 8007600:	01000404 	movi	r4,16
 8007604:	d8c0a115 	stw	r3,644(sp)
 8007608:	d9009e15 	stw	r4,632(sp)
 800760c:	050000c4 	movi	r20,3
 8007610:	003fd906 	br	8007578 <__alt_data_end+0xfc007578>
 8007614:	98800117 	ldw	r2,4(r19)
 8007618:	d9c09d15 	stw	r7,628(sp)
 800761c:	2039883a 	mov	fp,r4
 8007620:	8c400054 	ori	r17,r17,1
 8007624:	0081850e 	bge	zero,r2,8007c3c <__svfscanf_r+0xafc>
 8007628:	00c20074 	movhi	r3,2049
 800762c:	18f99b04 	addi	r3,r3,-6548
 8007630:	01000284 	movi	r4,10
 8007634:	d8c0a115 	stw	r3,644(sp)
 8007638:	d9009e15 	stw	r4,632(sp)
 800763c:	050000c4 	movi	r20,3
 8007640:	003fcd06 	br	8007578 <__alt_data_end+0xfc007578>
 8007644:	01400284 	movi	r5,10
 8007648:	d8c0a615 	stw	r3,664(sp)
 800764c:	d980a915 	stw	r6,676(sp)
 8007650:	d9c0aa15 	stw	r7,680(sp)
 8007654:	80028f40 	call	80028f4 <__mulsi3>
 8007658:	a1400043 	ldbu	r5,1(r20)
 800765c:	d9c0aa17 	ldw	r7,680(sp)
 8007660:	1545883a 	add	r2,r2,r21
 8007664:	113ff404 	addi	r4,r2,-48
 8007668:	3829883a 	mov	r20,r7
 800766c:	2d403fcc 	andi	r21,r5,255
 8007670:	d8c0a617 	ldw	r3,664(sp)
 8007674:	d980a917 	ldw	r6,676(sp)
 8007678:	003efc06 	br	800726c <__alt_data_end+0xfc00726c>
 800767c:	98800117 	ldw	r2,4(r19)
 8007680:	d9c09d15 	stw	r7,628(sp)
 8007684:	2039883a 	mov	fp,r4
 8007688:	8c408014 	ori	r17,r17,512
 800768c:	0081710e 	bge	zero,r2,8007c54 <__svfscanf_r+0xb14>
 8007690:	01420074 	movhi	r5,2049
 8007694:	297af904 	addi	r5,r5,-5148
 8007698:	00800404 	movi	r2,16
 800769c:	d940a115 	stw	r5,644(sp)
 80076a0:	d8809e15 	stw	r2,632(sp)
 80076a4:	050000c4 	movi	r20,3
 80076a8:	003fb306 	br	8007578 <__alt_data_end+0xfc007578>
 80076ac:	98800117 	ldw	r2,4(r19)
 80076b0:	d9c09d15 	stw	r7,628(sp)
 80076b4:	2039883a 	mov	fp,r4
 80076b8:	8c400054 	ori	r17,r17,1
 80076bc:	0081840e 	bge	zero,r2,8007cd0 <__svfscanf_r+0xb90>
 80076c0:	01420074 	movhi	r5,2049
 80076c4:	297af904 	addi	r5,r5,-5148
 80076c8:	00800204 	movi	r2,8
 80076cc:	d940a115 	stw	r5,644(sp)
 80076d0:	d8809e15 	stw	r2,632(sp)
 80076d4:	050000c4 	movi	r20,3
 80076d8:	003fa706 	br	8007578 <__alt_data_end+0xfc007578>
 80076dc:	a1400043 	ldbu	r5,1(r20)
 80076e0:	8c400094 	ori	r17,r17,2
 80076e4:	3829883a 	mov	r20,r7
 80076e8:	2d403fcc 	andi	r21,r5,255
 80076ec:	003edf06 	br	800726c <__alt_data_end+0xfc00726c>
 80076f0:	98800117 	ldw	r2,4(r19)
 80076f4:	d9c09d15 	stw	r7,628(sp)
 80076f8:	2039883a 	mov	fp,r4
 80076fc:	00816d0e 	bge	zero,r2,8007cb4 <__svfscanf_r+0xb74>
 8007700:	05000104 	movi	r20,4
 8007704:	003f9c06 	br	8007578 <__alt_data_end+0xfc007578>
 8007708:	98800117 	ldw	r2,4(r19)
 800770c:	d9c09d15 	stw	r7,628(sp)
 8007710:	2039883a 	mov	fp,r4
 8007714:	0081800e 	bge	zero,r2,8007d18 <__svfscanf_r+0xbd8>
 8007718:	01020074 	movhi	r4,2049
 800771c:	213af904 	addi	r4,r4,-5148
 8007720:	01400204 	movi	r5,8
 8007724:	d900a115 	stw	r4,644(sp)
 8007728:	d9409e15 	stw	r5,632(sp)
 800772c:	050000c4 	movi	r20,3
 8007730:	003f9106 	br	8007578 <__alt_data_end+0xfc007578>
 8007734:	d9c09d15 	stw	r7,628(sp)
 8007738:	8880040c 	andi	r2,r17,16
 800773c:	1000a01e 	bne	r2,zero,80079c0 <__svfscanf_r+0x880>
 8007740:	8880010c 	andi	r2,r17,4
 8007744:	10012826 	beq	r2,zero,8007be8 <__svfscanf_r+0xaa8>
 8007748:	d9009c17 	ldw	r4,624(sp)
 800774c:	3829883a 	mov	r20,r7
 8007750:	20800017 	ldw	r2,0(r4)
 8007754:	21000104 	addi	r4,r4,4
 8007758:	d9009c15 	stw	r4,624(sp)
 800775c:	1480000d 	sth	r18,0(r2)
 8007760:	003eb306 	br	8007230 <__alt_data_end+0xfc007230>
 8007764:	a5400043 	ldbu	r21,1(r20)
 8007768:	a8c11a26 	beq	r21,r3,8007bd4 <__svfscanf_r+0xa94>
 800776c:	8c400054 	ori	r17,r17,1
 8007770:	3829883a 	mov	r20,r7
 8007774:	003ebd06 	br	800726c <__alt_data_end+0xfc00726c>
 8007778:	a1400043 	ldbu	r5,1(r20)
 800777c:	8c400114 	ori	r17,r17,4
 8007780:	3829883a 	mov	r20,r7
 8007784:	2d403fcc 	andi	r21,r5,255
 8007788:	003eb806 	br	800726c <__alt_data_end+0xfc00726c>
 800778c:	98800117 	ldw	r2,4(r19)
 8007790:	d9c09d15 	stw	r7,628(sp)
 8007794:	2039883a 	mov	fp,r4
 8007798:	00bf610e 	bge	zero,r2,8007520 <__alt_data_end+0xfc007520>
 800779c:	00820074 	movhi	r2,2049
 80077a0:	10b99b04 	addi	r2,r2,-6548
 80077a4:	00c00284 	movi	r3,10
 80077a8:	d880a115 	stw	r2,644(sp)
 80077ac:	d8c09e15 	stw	r3,632(sp)
 80077b0:	050000c4 	movi	r20,3
 80077b4:	003f7006 	br	8007578 <__alt_data_end+0xfc007578>
 80077b8:	98800117 	ldw	r2,4(r19)
 80077bc:	d9c09d15 	stw	r7,628(sp)
 80077c0:	2039883a 	mov	fp,r4
 80077c4:	0080c60e 	bge	zero,r2,8007ae0 <__svfscanf_r+0x9a0>
 80077c8:	e000011e 	bne	fp,zero,80077d0 <__svfscanf_r+0x690>
 80077cc:	07000044 	movi	fp,1
 80077d0:	8880004c 	andi	r2,r17,1
 80077d4:	1000461e 	bne	r2,zero,80078f0 <__svfscanf_r+0x7b0>
 80077d8:	8c40040c 	andi	r17,r17,16
 80077dc:	8800dc26 	beq	r17,zero,8007b50 <__svfscanf_r+0xa10>
 80077e0:	0021883a 	mov	r16,zero
 80077e4:	00000806 	br	8007808 <__svfscanf_r+0x6c8>
 80077e8:	1887883a 	add	r3,r3,r2
 80077ec:	980b883a 	mov	r5,r19
 80077f0:	b809883a 	mov	r4,r23
 80077f4:	98c00015 	stw	r3,0(r19)
 80077f8:	80a1883a 	add	r16,r16,r2
 80077fc:	e0b9c83a 	sub	fp,fp,r2
 8007800:	80049240 	call	8004924 <__srefill_r>
 8007804:	1000cc1e 	bne	r2,zero,8007b38 <__svfscanf_r+0x9f8>
 8007808:	98800117 	ldw	r2,4(r19)
 800780c:	98c00017 	ldw	r3,0(r19)
 8007810:	173ff516 	blt	r2,fp,80077e8 <__alt_data_end+0xfc0077e8>
 8007814:	1705c83a 	sub	r2,r2,fp
 8007818:	1f15883a 	add	r10,r3,fp
 800781c:	8721883a 	add	r16,r16,fp
 8007820:	98800115 	stw	r2,4(r19)
 8007824:	9a800015 	stw	r10,0(r19)
 8007828:	dd009d17 	ldw	r20,628(sp)
 800782c:	9425883a 	add	r18,r18,r16
 8007830:	a00d883a 	mov	r6,r20
 8007834:	003e7f06 	br	8007234 <__alt_data_end+0xfc007234>
 8007838:	2039883a 	mov	fp,r4
 800783c:	380b883a 	mov	r5,r7
 8007840:	d9005884 	addi	r4,sp,354
 8007844:	d9c09d15 	stw	r7,628(sp)
 8007848:	800cc940 	call	800cc94 <__sccl>
 800784c:	1029883a 	mov	r20,r2
 8007850:	98800117 	ldw	r2,4(r19)
 8007854:	0081120e 	bge	zero,r2,8007ca0 <__svfscanf_r+0xb60>
 8007858:	99000017 	ldw	r4,0(r19)
 800785c:	20800003 	ldbu	r2,0(r4)
 8007860:	e0005a26 	beq	fp,zero,80079cc <__svfscanf_r+0x88c>
 8007864:	8c40040c 	andi	r17,r17,16
 8007868:	88005b26 	beq	r17,zero,80079d8 <__svfscanf_r+0x898>
 800786c:	e023883a 	mov	r17,fp
 8007870:	0021883a 	mov	r16,zero
 8007874:	00000106 	br	800787c <__svfscanf_r+0x73c>
 8007878:	20800003 	ldbu	r2,0(r4)
 800787c:	10803fcc 	andi	r2,r2,255
 8007880:	d8c05884 	addi	r3,sp,354
 8007884:	1885883a 	add	r2,r3,r2
 8007888:	10800007 	ldb	r2,0(r2)
 800788c:	1000ae26 	beq	r2,zero,8007b48 <__svfscanf_r+0xa08>
 8007890:	98800117 	ldw	r2,4(r19)
 8007894:	21000044 	addi	r4,r4,1
 8007898:	84000044 	addi	r16,r16,1
 800789c:	10bfffc4 	addi	r2,r2,-1
 80078a0:	98800115 	stw	r2,4(r19)
 80078a4:	99000015 	stw	r4,0(r19)
 80078a8:	8700a126 	beq	r16,fp,8007b30 <__svfscanf_r+0x9f0>
 80078ac:	00bff216 	blt	zero,r2,8007878 <__alt_data_end+0xfc007878>
 80078b0:	980b883a 	mov	r5,r19
 80078b4:	b809883a 	mov	r4,r23
 80078b8:	80049240 	call	8004924 <__srefill_r>
 80078bc:	10009b1e 	bne	r2,zero,8007b2c <__svfscanf_r+0x9ec>
 80078c0:	99000017 	ldw	r4,0(r19)
 80078c4:	003fec06 	br	8007878 <__alt_data_end+0xfc007878>
 80078c8:	98800117 	ldw	r2,4(r19)
 80078cc:	d9c09d15 	stw	r7,628(sp)
 80078d0:	2039883a 	mov	fp,r4
 80078d4:	00811c0e 	bge	zero,r2,8007d48 <__svfscanf_r+0xc08>
 80078d8:	01420074 	movhi	r5,2049
 80078dc:	29799b04 	addi	r5,r5,-6548
 80078e0:	d940a115 	stw	r5,644(sp)
 80078e4:	d8009e15 	stw	zero,632(sp)
 80078e8:	050000c4 	movi	r20,3
 80078ec:	003f2206 	br	8007578 <__alt_data_end+0xfc007578>
 80078f0:	dd409904 	addi	r21,sp,612
 80078f4:	8c40040c 	andi	r17,r17,16
 80078f8:	01800204 	movi	r6,8
 80078fc:	000b883a 	mov	r5,zero
 8007900:	a809883a 	mov	r4,r21
 8007904:	dc409f15 	stw	r17,636(sp)
 8007908:	80046400 	call	8004640 <memset>
 800790c:	dc409f17 	ldw	r17,636(sp)
 8007910:	88006e26 	beq	r17,zero,8007acc <__svfscanf_r+0x98c>
 8007914:	0029883a 	mov	r20,zero
 8007918:	0023883a 	mov	r17,zero
 800791c:	800af440 	call	800af44 <__locale_mb_cur_max>
 8007920:	14406126 	beq	r2,r17,8007aa8 <__svfscanf_r+0x968>
 8007924:	98800017 	ldw	r2,0(r19)
 8007928:	98c00117 	ldw	r3,4(r19)
 800792c:	d9000104 	addi	r4,sp,4
 8007930:	12000003 	ldbu	r8,0(r2)
 8007934:	18ffffc4 	addi	r3,r3,-1
 8007938:	10800044 	addi	r2,r2,1
 800793c:	98c00115 	stw	r3,4(r19)
 8007940:	98800015 	stw	r2,0(r19)
 8007944:	8c000044 	addi	r16,r17,1
 8007948:	dd400015 	stw	r21,0(sp)
 800794c:	2463883a 	add	r17,r4,r17
 8007950:	200d883a 	mov	r6,r4
 8007954:	a00b883a 	mov	r5,r20
 8007958:	800f883a 	mov	r7,r16
 800795c:	b809883a 	mov	r4,r23
 8007960:	8a000005 	stb	r8,0(r17)
 8007964:	800aff80 	call	800aff8 <_mbrtowc_r>
 8007968:	017fffc4 	movi	r5,-1
 800796c:	11404e26 	beq	r2,r5,8007aa8 <__svfscanf_r+0x968>
 8007970:	1000601e 	bne	r2,zero,8007af4 <__svfscanf_r+0x9b4>
 8007974:	d8c09f17 	ldw	r3,636(sp)
 8007978:	1800641e 	bne	r3,zero,8007b0c <__svfscanf_r+0x9cc>
 800797c:	a0000015 	stw	zero,0(r20)
 8007980:	9425883a 	add	r18,r18,r16
 8007984:	e179883a 	add	fp,fp,r5
 8007988:	a5000104 	addi	r20,r20,4
 800798c:	98800117 	ldw	r2,4(r19)
 8007990:	0023883a 	mov	r17,zero
 8007994:	00804b16 	blt	zero,r2,8007ac4 <__svfscanf_r+0x984>
 8007998:	980b883a 	mov	r5,r19
 800799c:	b809883a 	mov	r4,r23
 80079a0:	80049240 	call	8004924 <__srefill_r>
 80079a4:	10004726 	beq	r2,zero,8007ac4 <__svfscanf_r+0x984>
 80079a8:	88003f1e 	bne	r17,zero,8007aa8 <__svfscanf_r+0x968>
 80079ac:	d8c09f17 	ldw	r3,636(sp)
 80079b0:	1800031e 	bne	r3,zero,80079c0 <__svfscanf_r+0x880>
 80079b4:	d900a017 	ldw	r4,640(sp)
 80079b8:	21000044 	addi	r4,r4,1
 80079bc:	d900a015 	stw	r4,640(sp)
 80079c0:	dd009d17 	ldw	r20,628(sp)
 80079c4:	a00d883a 	mov	r6,r20
 80079c8:	003e1a06 	br	8007234 <__alt_data_end+0xfc007234>
 80079cc:	8c40040c 	andi	r17,r17,16
 80079d0:	073fffc4 	movi	fp,-1
 80079d4:	883fa51e 	bne	r17,zero,800786c <__alt_data_end+0xfc00786c>
 80079d8:	d9409c17 	ldw	r5,624(sp)
 80079dc:	e2bfffc4 	addi	r10,fp,-1
 80079e0:	2c000017 	ldw	r16,0(r5)
 80079e4:	2c400104 	addi	r17,r5,4
 80079e8:	8007883a 	mov	r3,r16
 80079ec:	82ab883a 	add	r21,r16,r10
 80079f0:	00000306 	br	8007a00 <__svfscanf_r+0x8c0>
 80079f4:	99000017 	ldw	r4,0(r19)
 80079f8:	e007883a 	mov	r3,fp
 80079fc:	20800003 	ldbu	r2,0(r4)
 8007a00:	10803fcc 	andi	r2,r2,255
 8007a04:	d9405884 	addi	r5,sp,354
 8007a08:	2885883a 	add	r2,r5,r2
 8007a0c:	10800007 	ldb	r2,0(r2)
 8007a10:	10004b26 	beq	r2,zero,8007b40 <__svfscanf_r+0xa00>
 8007a14:	98800117 	ldw	r2,4(r19)
 8007a18:	21400044 	addi	r5,r4,1
 8007a1c:	99400015 	stw	r5,0(r19)
 8007a20:	10bfffc4 	addi	r2,r2,-1
 8007a24:	98800115 	stw	r2,4(r19)
 8007a28:	20800003 	ldbu	r2,0(r4)
 8007a2c:	1f000044 	addi	fp,r3,1
 8007a30:	18800005 	stb	r2,0(r3)
 8007a34:	1d400726 	beq	r3,r21,8007a54 <__svfscanf_r+0x914>
 8007a38:	98800117 	ldw	r2,4(r19)
 8007a3c:	00bfed16 	blt	zero,r2,80079f4 <__alt_data_end+0xfc0079f4>
 8007a40:	980b883a 	mov	r5,r19
 8007a44:	b809883a 	mov	r4,r23
 8007a48:	80049240 	call	8004924 <__srefill_r>
 8007a4c:	103fe926 	beq	r2,zero,80079f4 <__alt_data_end+0xfc0079f4>
 8007a50:	87001526 	beq	r16,fp,8007aa8 <__svfscanf_r+0x968>
 8007a54:	e421c83a 	sub	r16,fp,r16
 8007a58:	803dfa26 	beq	r16,zero,8007244 <__alt_data_end+0xfc007244>
 8007a5c:	d880a017 	ldw	r2,640(sp)
 8007a60:	e0000005 	stb	zero,0(fp)
 8007a64:	dc409c15 	stw	r17,624(sp)
 8007a68:	10800044 	addi	r2,r2,1
 8007a6c:	d880a015 	stw	r2,640(sp)
 8007a70:	9425883a 	add	r18,r18,r16
 8007a74:	a00d883a 	mov	r6,r20
 8007a78:	003dee06 	br	8007234 <__alt_data_end+0xfc007234>
 8007a7c:	013fff84 	movi	r4,-2
 8007a80:	1103ed1e 	bne	r2,r4,8008a38 <__svfscanf_r+0x18f8>
 8007a84:	8821883a 	mov	r16,r17
 8007a88:	98800117 	ldw	r2,4(r19)
 8007a8c:	00834116 	blt	zero,r2,8008794 <__svfscanf_r+0x1654>
 8007a90:	980b883a 	mov	r5,r19
 8007a94:	b809883a 	mov	r4,r23
 8007a98:	80049240 	call	8004924 <__srefill_r>
 8007a9c:	10033d26 	beq	r2,zero,8008794 <__svfscanf_r+0x1654>
 8007aa0:	dc409f17 	ldw	r17,636(sp)
 8007aa4:	80034426 	beq	r16,zero,80087b8 <__svfscanf_r+0x1678>
 8007aa8:	d900a017 	ldw	r4,640(sp)
 8007aac:	203e8026 	beq	r4,zero,80074b0 <__alt_data_end+0xfc0074b0>
 8007ab0:	9880030b 	ldhu	r2,12(r19)
 8007ab4:	1080100c 	andi	r2,r2,64
 8007ab8:	103e7d1e 	bne	r2,zero,80074b0 <__alt_data_end+0xfc0074b0>
 8007abc:	2005883a 	mov	r2,r4
 8007ac0:	003e7c06 	br	80074b4 <__alt_data_end+0xfc0074b4>
 8007ac4:	e03f951e 	bne	fp,zero,800791c <__alt_data_end+0xfc00791c>
 8007ac8:	003fb806 	br	80079ac <__alt_data_end+0xfc0079ac>
 8007acc:	d8809c17 	ldw	r2,624(sp)
 8007ad0:	15000017 	ldw	r20,0(r2)
 8007ad4:	10800104 	addi	r2,r2,4
 8007ad8:	d8809c15 	stw	r2,624(sp)
 8007adc:	003f8e06 	br	8007918 <__alt_data_end+0xfc007918>
 8007ae0:	980b883a 	mov	r5,r19
 8007ae4:	b809883a 	mov	r4,r23
 8007ae8:	80049240 	call	8004924 <__srefill_r>
 8007aec:	103f3626 	beq	r2,zero,80077c8 <__alt_data_end+0xfc0077c8>
 8007af0:	003fed06 	br	8007aa8 <__alt_data_end+0xfc007aa8>
 8007af4:	013fff84 	movi	r4,-2
 8007af8:	1100071e 	bne	r2,r4,8007b18 <__svfscanf_r+0x9d8>
 8007afc:	98800117 	ldw	r2,4(r19)
 8007b00:	8023883a 	mov	r17,r16
 8007b04:	00bf8516 	blt	zero,r2,800791c <__alt_data_end+0xfc00791c>
 8007b08:	003fa306 	br	8007998 <__alt_data_end+0xfc007998>
 8007b0c:	9425883a 	add	r18,r18,r16
 8007b10:	e73fffc4 	addi	fp,fp,-1
 8007b14:	003f9d06 	br	800798c <__alt_data_end+0xfc00798c>
 8007b18:	d8c09f17 	ldw	r3,636(sp)
 8007b1c:	9425883a 	add	r18,r18,r16
 8007b20:	e73fffc4 	addi	fp,fp,-1
 8007b24:	183f9826 	beq	r3,zero,8007988 <__alt_data_end+0xfc007988>
 8007b28:	003f9806 	br	800798c <__alt_data_end+0xfc00798c>
 8007b2c:	8023883a 	mov	r17,r16
 8007b30:	8821883a 	mov	r16,r17
 8007b34:	003fce06 	br	8007a70 <__alt_data_end+0xfc007a70>
 8007b38:	803f3b1e 	bne	r16,zero,8007828 <__alt_data_end+0xfc007828>
 8007b3c:	003fda06 	br	8007aa8 <__alt_data_end+0xfc007aa8>
 8007b40:	1839883a 	mov	fp,r3
 8007b44:	003fc306 	br	8007a54 <__alt_data_end+0xfc007a54>
 8007b48:	803fc91e 	bne	r16,zero,8007a70 <__alt_data_end+0xfc007a70>
 8007b4c:	003dbd06 	br	8007244 <__alt_data_end+0xfc007244>
 8007b50:	d8809c17 	ldw	r2,624(sp)
 8007b54:	dcc00015 	stw	r19,0(sp)
 8007b58:	b809883a 	mov	r4,r23
 8007b5c:	11400017 	ldw	r5,0(r2)
 8007b60:	e00f883a 	mov	r7,fp
 8007b64:	01800044 	movi	r6,1
 8007b68:	800a7000 	call	800a700 <_fread_r>
 8007b6c:	d9009c17 	ldw	r4,624(sp)
 8007b70:	20c00104 	addi	r3,r4,4
 8007b74:	103fcc26 	beq	r2,zero,8007aa8 <__alt_data_end+0xfc007aa8>
 8007b78:	d940a017 	ldw	r5,640(sp)
 8007b7c:	dd009d17 	ldw	r20,628(sp)
 8007b80:	90a5883a 	add	r18,r18,r2
 8007b84:	29400044 	addi	r5,r5,1
 8007b88:	d940a015 	stw	r5,640(sp)
 8007b8c:	d8c09c15 	stw	r3,624(sp)
 8007b90:	a00d883a 	mov	r6,r20
 8007b94:	003da706 	br	8007234 <__alt_data_end+0xfc007234>
 8007b98:	980b883a 	mov	r5,r19
 8007b9c:	b809883a 	mov	r4,r23
 8007ba0:	80049240 	call	8004924 <__srefill_r>
 8007ba4:	103e3626 	beq	r2,zero,8007480 <__alt_data_end+0xfc007480>
 8007ba8:	003fbf06 	br	8007aa8 <__alt_data_end+0xfc007aa8>
 8007bac:	98800117 	ldw	r2,4(r19)
 8007bb0:	88e2b03a 	or	r17,r17,r3
 8007bb4:	0080210e 	bge	zero,r2,8007c3c <__svfscanf_r+0xafc>
 8007bb8:	01420074 	movhi	r5,2049
 8007bbc:	29799b04 	addi	r5,r5,-6548
 8007bc0:	00800284 	movi	r2,10
 8007bc4:	d940a115 	stw	r5,644(sp)
 8007bc8:	d8809e15 	stw	r2,632(sp)
 8007bcc:	050000c4 	movi	r20,3
 8007bd0:	003e6906 	br	8007578 <__alt_data_end+0xfc007578>
 8007bd4:	a1400083 	ldbu	r5,2(r20)
 8007bd8:	8c400094 	ori	r17,r17,2
 8007bdc:	a5000084 	addi	r20,r20,2
 8007be0:	2d403fcc 	andi	r21,r5,255
 8007be4:	003da106 	br	800726c <__alt_data_end+0xfc00726c>
 8007be8:	8880004c 	andi	r2,r17,1
 8007bec:	10000c1e 	bne	r2,zero,8007c20 <__svfscanf_r+0xae0>
 8007bf0:	8c40008c 	andi	r17,r17,2
 8007bf4:	88000a26 	beq	r17,zero,8007c20 <__svfscanf_r+0xae0>
 8007bf8:	d8c09c17 	ldw	r3,624(sp)
 8007bfc:	d9009c17 	ldw	r4,624(sp)
 8007c00:	dd009d17 	ldw	r20,628(sp)
 8007c04:	18800017 	ldw	r2,0(r3)
 8007c08:	9007d7fa 	srai	r3,r18,31
 8007c0c:	21000104 	addi	r4,r4,4
 8007c10:	14800015 	stw	r18,0(r2)
 8007c14:	10c00115 	stw	r3,4(r2)
 8007c18:	d9009c15 	stw	r4,624(sp)
 8007c1c:	003d8406 	br	8007230 <__alt_data_end+0xfc007230>
 8007c20:	d9409c17 	ldw	r5,624(sp)
 8007c24:	dd009d17 	ldw	r20,628(sp)
 8007c28:	28800017 	ldw	r2,0(r5)
 8007c2c:	29400104 	addi	r5,r5,4
 8007c30:	d9409c15 	stw	r5,624(sp)
 8007c34:	14800015 	stw	r18,0(r2)
 8007c38:	003d7d06 	br	8007230 <__alt_data_end+0xfc007230>
 8007c3c:	980b883a 	mov	r5,r19
 8007c40:	b809883a 	mov	r4,r23
 8007c44:	80049240 	call	8004924 <__srefill_r>
 8007c48:	103f971e 	bne	r2,zero,8007aa8 <__alt_data_end+0xfc007aa8>
 8007c4c:	b4000017 	ldw	r16,0(r22)
 8007c50:	003ed206 	br	800779c <__alt_data_end+0xfc00779c>
 8007c54:	980b883a 	mov	r5,r19
 8007c58:	b809883a 	mov	r4,r23
 8007c5c:	80049240 	call	8004924 <__srefill_r>
 8007c60:	103f911e 	bne	r2,zero,8007aa8 <__alt_data_end+0xfc007aa8>
 8007c64:	01020074 	movhi	r4,2049
 8007c68:	213af904 	addi	r4,r4,-5148
 8007c6c:	01400404 	movi	r5,16
 8007c70:	b4000017 	ldw	r16,0(r22)
 8007c74:	d900a115 	stw	r4,644(sp)
 8007c78:	d9409e15 	stw	r5,632(sp)
 8007c7c:	050000c4 	movi	r20,3
 8007c80:	003e3d06 	br	8007578 <__alt_data_end+0xfc007578>
 8007c84:	980b883a 	mov	r5,r19
 8007c88:	b809883a 	mov	r4,r23
 8007c8c:	80049240 	call	8004924 <__srefill_r>
 8007c90:	103f851e 	bne	r2,zero,8007aa8 <__alt_data_end+0xfc007aa8>
 8007c94:	b4000017 	ldw	r16,0(r22)
 8007c98:	05000084 	movi	r20,2
 8007c9c:	003e3606 	br	8007578 <__alt_data_end+0xfc007578>
 8007ca0:	980b883a 	mov	r5,r19
 8007ca4:	b809883a 	mov	r4,r23
 8007ca8:	80049240 	call	8004924 <__srefill_r>
 8007cac:	103eea26 	beq	r2,zero,8007858 <__alt_data_end+0xfc007858>
 8007cb0:	003f7d06 	br	8007aa8 <__alt_data_end+0xfc007aa8>
 8007cb4:	980b883a 	mov	r5,r19
 8007cb8:	b809883a 	mov	r4,r23
 8007cbc:	80049240 	call	8004924 <__srefill_r>
 8007cc0:	103f791e 	bne	r2,zero,8007aa8 <__alt_data_end+0xfc007aa8>
 8007cc4:	b4000017 	ldw	r16,0(r22)
 8007cc8:	05000104 	movi	r20,4
 8007ccc:	003e2a06 	br	8007578 <__alt_data_end+0xfc007578>
 8007cd0:	980b883a 	mov	r5,r19
 8007cd4:	b809883a 	mov	r4,r23
 8007cd8:	80049240 	call	8004924 <__srefill_r>
 8007cdc:	103f721e 	bne	r2,zero,8007aa8 <__alt_data_end+0xfc007aa8>
 8007ce0:	b4000017 	ldw	r16,0(r22)
 8007ce4:	003e8c06 	br	8007718 <__alt_data_end+0xfc007718>
 8007ce8:	980b883a 	mov	r5,r19
 8007cec:	b809883a 	mov	r4,r23
 8007cf0:	80049240 	call	8004924 <__srefill_r>
 8007cf4:	103f6c1e 	bne	r2,zero,8007aa8 <__alt_data_end+0xfc007aa8>
 8007cf8:	00820074 	movhi	r2,2049
 8007cfc:	10baf904 	addi	r2,r2,-5148
 8007d00:	00c00284 	movi	r3,10
 8007d04:	b4000017 	ldw	r16,0(r22)
 8007d08:	d880a115 	stw	r2,644(sp)
 8007d0c:	d8c09e15 	stw	r3,632(sp)
 8007d10:	050000c4 	movi	r20,3
 8007d14:	003e1806 	br	8007578 <__alt_data_end+0xfc007578>
 8007d18:	980b883a 	mov	r5,r19
 8007d1c:	b809883a 	mov	r4,r23
 8007d20:	80049240 	call	8004924 <__srefill_r>
 8007d24:	103f601e 	bne	r2,zero,8007aa8 <__alt_data_end+0xfc007aa8>
 8007d28:	00820074 	movhi	r2,2049
 8007d2c:	10baf904 	addi	r2,r2,-5148
 8007d30:	00c00204 	movi	r3,8
 8007d34:	b4000017 	ldw	r16,0(r22)
 8007d38:	d880a115 	stw	r2,644(sp)
 8007d3c:	d8c09e15 	stw	r3,632(sp)
 8007d40:	050000c4 	movi	r20,3
 8007d44:	003e0c06 	br	8007578 <__alt_data_end+0xfc007578>
 8007d48:	980b883a 	mov	r5,r19
 8007d4c:	b809883a 	mov	r4,r23
 8007d50:	80049240 	call	8004924 <__srefill_r>
 8007d54:	103f541e 	bne	r2,zero,8007aa8 <__alt_data_end+0xfc007aa8>
 8007d58:	00820074 	movhi	r2,2049
 8007d5c:	10b99b04 	addi	r2,r2,-6548
 8007d60:	b4000017 	ldw	r16,0(r22)
 8007d64:	d880a115 	stw	r2,644(sp)
 8007d68:	d8009e15 	stw	zero,632(sp)
 8007d6c:	050000c4 	movi	r20,3
 8007d70:	003e0106 	br	8007578 <__alt_data_end+0xfc007578>
 8007d74:	980b883a 	mov	r5,r19
 8007d78:	b809883a 	mov	r4,r23
 8007d7c:	80049240 	call	8004924 <__srefill_r>
 8007d80:	103f491e 	bne	r2,zero,8007aa8 <__alt_data_end+0xfc007aa8>
 8007d84:	00820074 	movhi	r2,2049
 8007d88:	10baf904 	addi	r2,r2,-5148
 8007d8c:	00c00404 	movi	r3,16
 8007d90:	b4000017 	ldw	r16,0(r22)
 8007d94:	d880a115 	stw	r2,644(sp)
 8007d98:	d8c09e15 	stw	r3,632(sp)
 8007d9c:	050000c4 	movi	r20,3
 8007da0:	003df506 	br	8007578 <__alt_data_end+0xfc007578>
 8007da4:	014000c4 	movi	r5,3
 8007da8:	a1416726 	beq	r20,r5,8008348 <__svfscanf_r+0x1208>
 8007dac:	01000104 	movi	r4,4
 8007db0:	a101491e 	bne	r20,r4,80082d8 <__svfscanf_r+0x1198>
 8007db4:	b809883a 	mov	r4,r23
 8007db8:	800af680 	call	800af68 <_localeconv_r>
 8007dbc:	10800017 	ldw	r2,0(r2)
 8007dc0:	e0ffffc4 	addi	r3,fp,-1
 8007dc4:	d880a315 	stw	r2,652(sp)
 8007dc8:	00805704 	movi	r2,348
 8007dcc:	10c21e2e 	bgeu	r2,r3,8008648 <__svfscanf_r+0x1508>
 8007dd0:	e73fa8c4 	addi	fp,fp,-349
 8007dd4:	df00a215 	stw	fp,648(sp)
 8007dd8:	07005744 	movi	fp,349
 8007ddc:	8d01e014 	ori	r20,r17,1920
 8007de0:	0023883a 	mov	r17,zero
 8007de4:	dc000104 	addi	r16,sp,4
 8007de8:	002b883a 	mov	r21,zero
 8007dec:	8805883a 	mov	r2,r17
 8007df0:	0007883a 	mov	r3,zero
 8007df4:	8023883a 	mov	r17,r16
 8007df8:	b80d883a 	mov	r6,r23
 8007dfc:	e021883a 	mov	r16,fp
 8007e00:	a82f883a 	mov	r23,r21
 8007e04:	d800a515 	stw	zero,660(sp)
 8007e08:	d800a415 	stw	zero,656(sp)
 8007e0c:	d8009f15 	stw	zero,636(sp)
 8007e10:	01c01384 	movi	r7,78
 8007e14:	182b883a 	mov	r21,r3
 8007e18:	1039883a 	mov	fp,r2
 8007e1c:	99000017 	ldw	r4,0(r19)
 8007e20:	21400003 	ldbu	r5,0(r4)
 8007e24:	28bff544 	addi	r2,r5,-43
 8007e28:	10803fcc 	andi	r2,r2,255
 8007e2c:	38810e36 	bltu	r7,r2,8008268 <__svfscanf_r+0x1128>
 8007e30:	100490ba 	slli	r2,r2,2
 8007e34:	00c20034 	movhi	r3,2048
 8007e38:	18df9204 	addi	r3,r3,32328
 8007e3c:	10c5883a 	add	r2,r2,r3
 8007e40:	10800017 	ldw	r2,0(r2)
 8007e44:	1000683a 	jmp	r2
 8007e48:	0800813c 	xorhi	zero,at,516
 8007e4c:	08008268 	cmpgeui	zero,at,521
 8007e50:	0800813c 	xorhi	zero,at,516
 8007e54:	08008268 	cmpgeui	zero,at,521
 8007e58:	08008268 	cmpgeui	zero,at,521
 8007e5c:	08008110 	cmplti	zero,at,516
 8007e60:	08007f84 	addi	zero,at,510
 8007e64:	08007f84 	addi	zero,at,510
 8007e68:	08007f84 	addi	zero,at,510
 8007e6c:	08007f84 	addi	zero,at,510
 8007e70:	08007f84 	addi	zero,at,510
 8007e74:	08007f84 	addi	zero,at,510
 8007e78:	08007f84 	addi	zero,at,510
 8007e7c:	08007f84 	addi	zero,at,510
 8007e80:	08007f84 	addi	zero,at,510
 8007e84:	08008268 	cmpgeui	zero,at,521
 8007e88:	08008268 	cmpgeui	zero,at,521
 8007e8c:	08008268 	cmpgeui	zero,at,521
 8007e90:	08008268 	cmpgeui	zero,at,521
 8007e94:	08008268 	cmpgeui	zero,at,521
 8007e98:	08008268 	cmpgeui	zero,at,521
 8007e9c:	08008268 	cmpgeui	zero,at,521
 8007ea0:	08008258 	cmpnei	zero,at,521
 8007ea4:	08008268 	cmpgeui	zero,at,521
 8007ea8:	08008268 	cmpgeui	zero,at,521
 8007eac:	08008268 	cmpgeui	zero,at,521
 8007eb0:	08008214 	ori	zero,at,520
 8007eb4:	080081f8 	rdprs	zero,at,519
 8007eb8:	08008268 	cmpgeui	zero,at,521
 8007ebc:	08008268 	cmpgeui	zero,at,521
 8007ec0:	080081c0 	call	80081c <__alt_mem_onchip_memory+0x80081c>
 8007ec4:	08008268 	cmpgeui	zero,at,521
 8007ec8:	08008268 	cmpgeui	zero,at,521
 8007ecc:	08008268 	cmpgeui	zero,at,521
 8007ed0:	08008268 	cmpgeui	zero,at,521
 8007ed4:	08008188 	cmpgei	zero,at,518
 8007ed8:	08008268 	cmpgeui	zero,at,521
 8007edc:	08008268 	cmpgeui	zero,at,521
 8007ee0:	08008268 	cmpgeui	zero,at,521
 8007ee4:	08008268 	cmpgeui	zero,at,521
 8007ee8:	08008268 	cmpgeui	zero,at,521
 8007eec:	0800816c 	andhi	zero,at,517
 8007ef0:	08008268 	cmpgeui	zero,at,521
 8007ef4:	08008268 	cmpgeui	zero,at,521
 8007ef8:	08008268 	cmpgeui	zero,at,521
 8007efc:	08008268 	cmpgeui	zero,at,521
 8007f00:	08008150 	cmplti	zero,at,517
 8007f04:	08008268 	cmpgeui	zero,at,521
 8007f08:	08008268 	cmpgeui	zero,at,521
 8007f0c:	08008268 	cmpgeui	zero,at,521
 8007f10:	08008268 	cmpgeui	zero,at,521
 8007f14:	08008268 	cmpgeui	zero,at,521
 8007f18:	08008268 	cmpgeui	zero,at,521
 8007f1c:	08008268 	cmpgeui	zero,at,521
 8007f20:	08008258 	cmpnei	zero,at,521
 8007f24:	08008268 	cmpgeui	zero,at,521
 8007f28:	08008268 	cmpgeui	zero,at,521
 8007f2c:	08008268 	cmpgeui	zero,at,521
 8007f30:	08008214 	ori	zero,at,520
 8007f34:	080081f8 	rdprs	zero,at,519
 8007f38:	08008268 	cmpgeui	zero,at,521
 8007f3c:	08008268 	cmpgeui	zero,at,521
 8007f40:	080081c0 	call	80081c <__alt_mem_onchip_memory+0x80081c>
 8007f44:	08008268 	cmpgeui	zero,at,521
 8007f48:	08008268 	cmpgeui	zero,at,521
 8007f4c:	08008268 	cmpgeui	zero,at,521
 8007f50:	08008268 	cmpgeui	zero,at,521
 8007f54:	08008188 	cmpgei	zero,at,518
 8007f58:	08008268 	cmpgeui	zero,at,521
 8007f5c:	08008268 	cmpgeui	zero,at,521
 8007f60:	08008268 	cmpgeui	zero,at,521
 8007f64:	08008268 	cmpgeui	zero,at,521
 8007f68:	08008268 	cmpgeui	zero,at,521
 8007f6c:	0800816c 	andhi	zero,at,517
 8007f70:	08008268 	cmpgeui	zero,at,521
 8007f74:	08008268 	cmpgeui	zero,at,521
 8007f78:	08008268 	cmpgeui	zero,at,521
 8007f7c:	08008268 	cmpgeui	zero,at,521
 8007f80:	08008150 	cmplti	zero,at,517
 8007f84:	a8803fcc 	andi	r2,r21,255
 8007f88:	1080201c 	xori	r2,r2,128
 8007f8c:	10bfe004 	addi	r2,r2,-128
 8007f90:	b885883a 	add	r2,r23,r2
 8007f94:	10000d1e 	bne	r2,zero,8007fcc <__svfscanf_r+0xe8c>
 8007f98:	00bf9fc4 	movi	r2,-385
 8007f9c:	a0a8703a 	and	r20,r20,r2
 8007fa0:	89400005 	stb	r5,0(r17)
 8007fa4:	8c400044 	addi	r17,r17,1
 8007fa8:	98800117 	ldw	r2,4(r19)
 8007fac:	843fffc4 	addi	r16,r16,-1
 8007fb0:	94800044 	addi	r18,r18,1
 8007fb4:	10bfffc4 	addi	r2,r2,-1
 8007fb8:	98800115 	stw	r2,4(r19)
 8007fbc:	0080b40e 	bge	zero,r2,8008290 <__svfscanf_r+0x1150>
 8007fc0:	21000044 	addi	r4,r4,1
 8007fc4:	99000015 	stw	r4,0(r19)
 8007fc8:	803f941e 	bne	r16,zero,8007e1c <__alt_data_end+0xfc007e1c>
 8007fcc:	8821883a 	mov	r16,r17
 8007fd0:	a807883a 	mov	r3,r21
 8007fd4:	e023883a 	mov	r17,fp
 8007fd8:	b82b883a 	mov	r21,r23
 8007fdc:	302f883a 	mov	r23,r6
 8007fe0:	e001961e 	bne	fp,zero,800863c <__svfscanf_r+0x14fc>
 8007fe4:	ab3fffc4 	addi	r12,r21,-1
 8007fe8:	00800044 	movi	r2,1
 8007fec:	1302a22e 	bgeu	r2,r12,8008a78 <__svfscanf_r+0x1938>
 8007ff0:	18803fcc 	andi	r2,r3,255
 8007ff4:	1080201c 	xori	r2,r2,128
 8007ff8:	10bfe004 	addi	r2,r2,-128
 8007ffc:	113fffc4 	addi	r4,r2,-1
 8008000:	01400184 	movi	r5,6
 8008004:	29001136 	bltu	r5,r4,800804c <__svfscanf_r+0xf0c>
 8008008:	01000084 	movi	r4,2
 800800c:	2082770e 	bge	r4,r2,80089ec <__svfscanf_r+0x18ac>
 8008010:	054000c4 	movi	r21,3
 8008014:	1839883a 	mov	fp,r3
 8008018:	15400c26 	beq	r2,r21,800804c <__svfscanf_r+0xf0c>
 800801c:	9425c83a 	sub	r18,r18,r16
 8008020:	843fffc4 	addi	r16,r16,-1
 8008024:	81400007 	ldb	r5,0(r16)
 8008028:	980d883a 	mov	r6,r19
 800802c:	b809883a 	mov	r4,r23
 8008030:	80115280 	call	8011528 <_ungetc_r>
 8008034:	e0bfffc4 	addi	r2,fp,-1
 8008038:	10c03fcc 	andi	r3,r2,255
 800803c:	8493883a 	add	r9,r16,r18
 8008040:	1039883a 	mov	fp,r2
 8008044:	a8fff636 	bltu	r21,r3,8008020 <__alt_data_end+0xfc008020>
 8008048:	4825883a 	mov	r18,r9
 800804c:	a080400c 	andi	r2,r20,256
 8008050:	10001426 	beq	r2,zero,80080a4 <__svfscanf_r+0xf64>
 8008054:	a081000c 	andi	r2,r20,1024
 8008058:	10027b1e 	bne	r2,zero,8008a48 <__svfscanf_r+0x1908>
 800805c:	817fffc7 	ldb	r5,-1(r16)
 8008060:	00801944 	movi	r2,101
 8008064:	873fffc4 	addi	fp,r16,-1
 8008068:	957fffc4 	addi	r21,r18,-1
 800806c:	28800826 	beq	r5,r2,8008090 <__svfscanf_r+0xf50>
 8008070:	00801144 	movi	r2,69
 8008074:	28800626 	beq	r5,r2,8008090 <__svfscanf_r+0xf50>
 8008078:	980d883a 	mov	r6,r19
 800807c:	b809883a 	mov	r4,r23
 8008080:	80115280 	call	8011528 <_ungetc_r>
 8008084:	817fff87 	ldb	r5,-2(r16)
 8008088:	873fff84 	addi	fp,r16,-2
 800808c:	957fff84 	addi	r21,r18,-2
 8008090:	980d883a 	mov	r6,r19
 8008094:	b809883a 	mov	r4,r23
 8008098:	80115280 	call	8011528 <_ungetc_r>
 800809c:	a825883a 	mov	r18,r21
 80080a0:	e021883a 	mov	r16,fp
 80080a4:	a080040c 	andi	r2,r20,16
 80080a8:	103e451e 	bne	r2,zero,80079c0 <__alt_data_end+0xfc0079c0>
 80080ac:	80000005 	stb	zero,0(r16)
 80080b0:	a081800c 	andi	r2,r20,1536
 80080b4:	01010004 	movi	r4,1024
 80080b8:	1101ea26 	beq	r2,r4,8008864 <__svfscanf_r+0x1724>
 80080bc:	d8c0a417 	ldw	r3,656(sp)
 80080c0:	1801f41e 	bne	r3,zero,8008894 <__svfscanf_r+0x1754>
 80080c4:	000d883a 	mov	r6,zero
 80080c8:	d9400104 	addi	r5,sp,4
 80080cc:	b809883a 	mov	r4,r23
 80080d0:	800cf700 	call	800cf70 <_strtod_r>
 80080d4:	1021883a 	mov	r16,r2
 80080d8:	a080004c 	andi	r2,r20,1
 80080dc:	1001b926 	beq	r2,zero,80087c4 <__svfscanf_r+0x1684>
 80080e0:	d9009c17 	ldw	r4,624(sp)
 80080e4:	20800017 	ldw	r2,0(r4)
 80080e8:	21000104 	addi	r4,r4,4
 80080ec:	d9009c15 	stw	r4,624(sp)
 80080f0:	14000015 	stw	r16,0(r2)
 80080f4:	10c00115 	stw	r3,4(r2)
 80080f8:	d8c0a017 	ldw	r3,640(sp)
 80080fc:	dd009d17 	ldw	r20,628(sp)
 8008100:	18c00044 	addi	r3,r3,1
 8008104:	d8c0a015 	stw	r3,640(sp)
 8008108:	a00d883a 	mov	r6,r20
 800810c:	003c4906 	br	8007234 <__alt_data_end+0xfc007234>
 8008110:	a080400c 	andi	r2,r20,256
 8008114:	103f9b26 	beq	r2,zero,8007f84 <__alt_data_end+0xfc007f84>
 8008118:	d8c0a217 	ldw	r3,648(sp)
 800811c:	00bfdfc4 	movi	r2,-129
 8008120:	a0a8703a 	and	r20,r20,r2
 8008124:	e7000044 	addi	fp,fp,1
 8008128:	183f9f26 	beq	r3,zero,8007fa8 <__alt_data_end+0xfc007fa8>
 800812c:	18ffffc4 	addi	r3,r3,-1
 8008130:	d8c0a215 	stw	r3,648(sp)
 8008134:	84000044 	addi	r16,r16,1
 8008138:	003f9b06 	br	8007fa8 <__alt_data_end+0xfc007fa8>
 800813c:	a080200c 	andi	r2,r20,128
 8008140:	103fa226 	beq	r2,zero,8007fcc <__alt_data_end+0xfc007fcc>
 8008144:	00bfdfc4 	movi	r2,-129
 8008148:	a0a8703a 	and	r20,r20,r2
 800814c:	003f9406 	br	8007fa0 <__alt_data_end+0xfc007fa0>
 8008150:	a8803fcc 	andi	r2,r21,255
 8008154:	1080201c 	xori	r2,r2,128
 8008158:	10bfe004 	addi	r2,r2,-128
 800815c:	00c001c4 	movi	r3,7
 8008160:	10ff9a1e 	bne	r2,r3,8007fcc <__alt_data_end+0xfc007fcc>
 8008164:	05400204 	movi	r21,8
 8008168:	003f8d06 	br	8007fa0 <__alt_data_end+0xfc007fa0>
 800816c:	a8803fcc 	andi	r2,r21,255
 8008170:	1080201c 	xori	r2,r2,128
 8008174:	10bfe004 	addi	r2,r2,-128
 8008178:	02000184 	movi	r8,6
 800817c:	123f931e 	bne	r2,r8,8007fcc <__alt_data_end+0xfc007fcc>
 8008180:	054001c4 	movi	r21,7
 8008184:	003f8606 	br	8007fa0 <__alt_data_end+0xfc007fa0>
 8008188:	b8004f1e 	bne	r23,zero,80082c8 <__svfscanf_r+0x1188>
 800818c:	e000031e 	bne	fp,zero,800819c <__svfscanf_r+0x105c>
 8008190:	a081c00c 	andi	r2,r20,1792
 8008194:	0201c004 	movi	r8,1792
 8008198:	1201a226 	beq	r2,r8,8008824 <__svfscanf_r+0x16e4>
 800819c:	a8803fcc 	andi	r2,r21,255
 80081a0:	1080201c 	xori	r2,r2,128
 80081a4:	10bfe004 	addi	r2,r2,-128
 80081a8:	02000044 	movi	r8,1
 80081ac:	12000226 	beq	r2,r8,80081b8 <__svfscanf_r+0x1078>
 80081b0:	02000104 	movi	r8,4
 80081b4:	123f851e 	bne	r2,r8,8007fcc <__alt_data_end+0xfc007fcc>
 80081b8:	ad400044 	addi	r21,r21,1
 80081bc:	003f7806 	br	8007fa0 <__alt_data_end+0xfc007fa0>
 80081c0:	a8803fcc 	andi	r2,r21,255
 80081c4:	1080201c 	xori	r2,r2,128
 80081c8:	10bfe004 	addi	r2,r2,-128
 80081cc:	1000391e 	bne	r2,zero,80082b4 <__svfscanf_r+0x1174>
 80081d0:	e001151e 	bne	fp,zero,8008628 <__svfscanf_r+0x14e8>
 80081d4:	a081c00c 	andi	r2,r20,1792
 80081d8:	0201c004 	movi	r8,1792
 80081dc:	12019b26 	beq	r2,r8,800884c <__svfscanf_r+0x170c>
 80081e0:	8821883a 	mov	r16,r17
 80081e4:	a807883a 	mov	r3,r21
 80081e8:	e023883a 	mov	r17,fp
 80081ec:	b82b883a 	mov	r21,r23
 80081f0:	302f883a 	mov	r23,r6
 80081f4:	003f7b06 	br	8007fe4 <__alt_data_end+0xfc007fe4>
 80081f8:	a8803fcc 	andi	r2,r21,255
 80081fc:	1080201c 	xori	r2,r2,128
 8008200:	10bfe004 	addi	r2,r2,-128
 8008204:	02000084 	movi	r8,2
 8008208:	123f701e 	bne	r2,r8,8007fcc <__alt_data_end+0xfc007fcc>
 800820c:	054000c4 	movi	r21,3
 8008210:	003f6306 	br	8007fa0 <__alt_data_end+0xfc007fa0>
 8008214:	a081400c 	andi	r2,r20,1280
 8008218:	00c10004 	movi	r3,1024
 800821c:	10c00326 	beq	r2,r3,800822c <__svfscanf_r+0x10ec>
 8008220:	a0c4703a 	and	r2,r20,r3
 8008224:	103f6926 	beq	r2,zero,8007fcc <__alt_data_end+0xfc007fcc>
 8008228:	e03fed26 	beq	fp,zero,80081e0 <__alt_data_end+0xfc0081e0>
 800822c:	a080800c 	andi	r2,r20,512
 8008230:	1000041e 	bne	r2,zero,8008244 <__svfscanf_r+0x1104>
 8008234:	d8c09f17 	ldw	r3,636(sp)
 8008238:	dc40a515 	stw	r17,660(sp)
 800823c:	e0f9c83a 	sub	fp,fp,r3
 8008240:	df00a415 	stw	fp,656(sp)
 8008244:	00be1fc4 	movi	r2,-1921
 8008248:	a0a8703a 	and	r20,r20,r2
 800824c:	a5006014 	ori	r20,r20,384
 8008250:	0039883a 	mov	fp,zero
 8008254:	003f5206 	br	8007fa0 <__alt_data_end+0xfc007fa0>
 8008258:	00800044 	movi	r2,1
 800825c:	b8bf5b1e 	bne	r23,r2,8007fcc <__alt_data_end+0xfc007fcc>
 8008260:	05c00084 	movi	r23,2
 8008264:	003f4e06 	br	8007fa0 <__alt_data_end+0xfc007fa0>
 8008268:	d8c0a317 	ldw	r3,652(sp)
 800826c:	2a003fcc 	andi	r8,r5,255
 8008270:	18800003 	ldbu	r2,0(r3)
 8008274:	40bf551e 	bne	r8,r2,8007fcc <__alt_data_end+0xfc007fcc>
 8008278:	a080800c 	andi	r2,r20,512
 800827c:	103f5326 	beq	r2,zero,8007fcc <__alt_data_end+0xfc007fcc>
 8008280:	00bf5fc4 	movi	r2,-641
 8008284:	a0a8703a 	and	r20,r20,r2
 8008288:	df009f15 	stw	fp,636(sp)
 800828c:	003f4406 	br	8007fa0 <__alt_data_end+0xfc007fa0>
 8008290:	3009883a 	mov	r4,r6
 8008294:	980b883a 	mov	r5,r19
 8008298:	d980a915 	stw	r6,676(sp)
 800829c:	d9c0aa15 	stw	r7,680(sp)
 80082a0:	80049240 	call	8004924 <__srefill_r>
 80082a4:	d980a917 	ldw	r6,676(sp)
 80082a8:	d9c0aa17 	ldw	r7,680(sp)
 80082ac:	103f4626 	beq	r2,zero,8007fc8 <__alt_data_end+0xfc007fc8>
 80082b0:	003f4606 	br	8007fcc <__alt_data_end+0xfc007fcc>
 80082b4:	020000c4 	movi	r8,3
 80082b8:	123fbf26 	beq	r2,r8,80081b8 <__alt_data_end+0xfc0081b8>
 80082bc:	02000144 	movi	r8,5
 80082c0:	123fbd26 	beq	r2,r8,80081b8 <__alt_data_end+0xfc0081b8>
 80082c4:	003f4106 	br	8007fcc <__alt_data_end+0xfc007fcc>
 80082c8:	00800084 	movi	r2,2
 80082cc:	b8bfb31e 	bne	r23,r2,800819c <__alt_data_end+0xfc00819c>
 80082d0:	05c000c4 	movi	r23,3
 80082d4:	003f3206 	br	8007fa0 <__alt_data_end+0xfc007fa0>
 80082d8:	e000011e 	bne	fp,zero,80082e0 <__svfscanf_r+0x11a0>
 80082dc:	073fffc4 	movi	fp,-1
 80082e0:	8900004c 	andi	r4,r17,1
 80082e4:	20011d1e 	bne	r4,zero,800875c <__svfscanf_r+0x161c>
 80082e8:	8c40040c 	andi	r17,r17,16
 80082ec:	8800da26 	beq	r17,zero,8008658 <__svfscanf_r+0x1518>
 80082f0:	0023883a 	mov	r17,zero
 80082f4:	00000306 	br	8008304 <__svfscanf_r+0x11c4>
 80082f8:	18800003 	ldbu	r2,0(r3)
 80082fc:	8085883a 	add	r2,r16,r2
 8008300:	10800043 	ldbu	r2,1(r2)
 8008304:	1080020c 	andi	r2,r2,8
 8008308:	1000fc1e 	bne	r2,zero,80086fc <__svfscanf_r+0x15bc>
 800830c:	98800117 	ldw	r2,4(r19)
 8008310:	18c00044 	addi	r3,r3,1
 8008314:	8c400044 	addi	r17,r17,1
 8008318:	10bfffc4 	addi	r2,r2,-1
 800831c:	98800115 	stw	r2,4(r19)
 8008320:	98c00015 	stw	r3,0(r19)
 8008324:	8f00f526 	beq	r17,fp,80086fc <__svfscanf_r+0x15bc>
 8008328:	00bff316 	blt	zero,r2,80082f8 <__alt_data_end+0xfc0082f8>
 800832c:	980b883a 	mov	r5,r19
 8008330:	b809883a 	mov	r4,r23
 8008334:	80049240 	call	8004924 <__srefill_r>
 8008338:	1000f01e 	bne	r2,zero,80086fc <__svfscanf_r+0x15bc>
 800833c:	b4000017 	ldw	r16,0(r22)
 8008340:	98c00017 	ldw	r3,0(r19)
 8008344:	003fec06 	br	80082f8 <__alt_data_end+0xfc0082f8>
 8008348:	e0bfffc4 	addi	r2,fp,-1
 800834c:	01405704 	movi	r5,348
 8008350:	2880bf2e 	bgeu	r5,r2,8008650 <__svfscanf_r+0x1510>
 8008354:	e1ffa8c4 	addi	r7,fp,-349
 8008358:	07005744 	movi	fp,349
 800835c:	8c436014 	ori	r17,r17,3456
 8008360:	9013883a 	mov	r9,r18
 8008364:	8825883a 	mov	r18,r17
 8008368:	dc409e17 	ldw	r17,632(sp)
 800836c:	0029883a 	mov	r20,zero
 8008370:	dc000104 	addi	r16,sp,4
 8008374:	05401344 	movi	r21,77
 8008378:	02c08004 	movi	r11,512
 800837c:	01bf7fc4 	movi	r6,-513
 8008380:	023fdfc4 	movi	r8,-129
 8008384:	20bff544 	addi	r2,r4,-43
 8008388:	10803fcc 	andi	r2,r2,255
 800838c:	a8807236 	bltu	r21,r2,8008558 <__svfscanf_r+0x1418>
 8008390:	100490ba 	slli	r2,r2,2
 8008394:	01420074 	movhi	r5,2049
 8008398:	2960ea04 	addi	r5,r5,-31832
 800839c:	1145883a 	add	r2,r2,r5
 80083a0:	10800017 	ldw	r2,0(r2)
 80083a4:	1000683a 	jmp	r2
 80083a8:	080085dc 	xori	zero,at,535
 80083ac:	08008558 	cmpnei	zero,at,533
 80083b0:	080085dc 	xori	zero,at,535
 80083b4:	08008558 	cmpnei	zero,at,533
 80083b8:	08008558 	cmpnei	zero,at,533
 80083bc:	080085b4 	orhi	zero,at,534
 80083c0:	08008594 	ori	zero,at,534
 80083c4:	08008594 	ori	zero,at,534
 80083c8:	08008594 	ori	zero,at,534
 80083cc:	08008594 	ori	zero,at,534
 80083d0:	08008594 	ori	zero,at,534
 80083d4:	08008594 	ori	zero,at,534
 80083d8:	08008594 	ori	zero,at,534
 80083dc:	0800853c 	xorhi	zero,at,532
 80083e0:	0800853c 	xorhi	zero,at,532
 80083e4:	08008558 	cmpnei	zero,at,533
 80083e8:	08008558 	cmpnei	zero,at,533
 80083ec:	08008558 	cmpnei	zero,at,533
 80083f0:	08008558 	cmpnei	zero,at,533
 80083f4:	08008558 	cmpnei	zero,at,533
 80083f8:	08008558 	cmpnei	zero,at,533
 80083fc:	08008558 	cmpnei	zero,at,533
 8008400:	08008528 	cmpgeui	zero,at,532
 8008404:	08008528 	cmpgeui	zero,at,532
 8008408:	08008528 	cmpgeui	zero,at,532
 800840c:	08008528 	cmpgeui	zero,at,532
 8008410:	08008528 	cmpgeui	zero,at,532
 8008414:	08008528 	cmpgeui	zero,at,532
 8008418:	08008558 	cmpnei	zero,at,533
 800841c:	08008558 	cmpnei	zero,at,533
 8008420:	08008558 	cmpnei	zero,at,533
 8008424:	08008558 	cmpnei	zero,at,533
 8008428:	08008558 	cmpnei	zero,at,533
 800842c:	08008558 	cmpnei	zero,at,533
 8008430:	08008558 	cmpnei	zero,at,533
 8008434:	08008558 	cmpnei	zero,at,533
 8008438:	08008558 	cmpnei	zero,at,533
 800843c:	08008558 	cmpnei	zero,at,533
 8008440:	08008558 	cmpnei	zero,at,533
 8008444:	08008558 	cmpnei	zero,at,533
 8008448:	08008558 	cmpnei	zero,at,533
 800844c:	08008558 	cmpnei	zero,at,533
 8008450:	08008558 	cmpnei	zero,at,533
 8008454:	08008558 	cmpnei	zero,at,533
 8008458:	08008558 	cmpnei	zero,at,533
 800845c:	080084e0 	cmpeqi	zero,at,531
 8008460:	08008558 	cmpnei	zero,at,533
 8008464:	08008558 	cmpnei	zero,at,533
 8008468:	08008558 	cmpnei	zero,at,533
 800846c:	08008558 	cmpnei	zero,at,533
 8008470:	08008558 	cmpnei	zero,at,533
 8008474:	08008558 	cmpnei	zero,at,533
 8008478:	08008558 	cmpnei	zero,at,533
 800847c:	08008558 	cmpnei	zero,at,533
 8008480:	08008528 	cmpgeui	zero,at,532
 8008484:	08008528 	cmpgeui	zero,at,532
 8008488:	08008528 	cmpgeui	zero,at,532
 800848c:	08008528 	cmpgeui	zero,at,532
 8008490:	08008528 	cmpgeui	zero,at,532
 8008494:	08008528 	cmpgeui	zero,at,532
 8008498:	08008558 	cmpnei	zero,at,533
 800849c:	08008558 	cmpnei	zero,at,533
 80084a0:	08008558 	cmpnei	zero,at,533
 80084a4:	08008558 	cmpnei	zero,at,533
 80084a8:	08008558 	cmpnei	zero,at,533
 80084ac:	08008558 	cmpnei	zero,at,533
 80084b0:	08008558 	cmpnei	zero,at,533
 80084b4:	08008558 	cmpnei	zero,at,533
 80084b8:	08008558 	cmpnei	zero,at,533
 80084bc:	08008558 	cmpnei	zero,at,533
 80084c0:	08008558 	cmpnei	zero,at,533
 80084c4:	08008558 	cmpnei	zero,at,533
 80084c8:	08008558 	cmpnei	zero,at,533
 80084cc:	08008558 	cmpnei	zero,at,533
 80084d0:	08008558 	cmpnei	zero,at,533
 80084d4:	08008558 	cmpnei	zero,at,533
 80084d8:	08008558 	cmpnei	zero,at,533
 80084dc:	080084e0 	cmpeqi	zero,at,531
 80084e0:	9081800c 	andi	r2,r18,1536
 80084e4:	12c01c1e 	bne	r2,r11,8008558 <__svfscanf_r+0x1418>
 80084e8:	91a4703a 	and	r18,r18,r6
 80084ec:	94814014 	ori	r18,r18,1280
 80084f0:	04400404 	movi	r17,16
 80084f4:	81000005 	stb	r4,0(r16)
 80084f8:	84000044 	addi	r16,r16,1
 80084fc:	98800117 	ldw	r2,4(r19)
 8008500:	10bfffc4 	addi	r2,r2,-1
 8008504:	98800115 	stw	r2,4(r19)
 8008508:	0080380e 	bge	zero,r2,80085ec <__svfscanf_r+0x14ac>
 800850c:	18c00044 	addi	r3,r3,1
 8008510:	98c00015 	stw	r3,0(r19)
 8008514:	e73fffc4 	addi	fp,fp,-1
 8008518:	e0000f26 	beq	fp,zero,8008558 <__svfscanf_r+0x1418>
 800851c:	98c00017 	ldw	r3,0(r19)
 8008520:	19000003 	ldbu	r4,0(r3)
 8008524:	003f9706 	br	8008384 <__alt_data_end+0xfc008384>
 8008528:	00800284 	movi	r2,10
 800852c:	14400a0e 	bge	r2,r17,8008558 <__svfscanf_r+0x1418>
 8008530:	00bd1fc4 	movi	r2,-2945
 8008534:	90a4703a 	and	r18,r18,r2
 8008538:	003fee06 	br	80084f4 <__alt_data_end+0xfc0084f4>
 800853c:	014200b4 	movhi	r5,2050
 8008540:	8c63883a 	add	r17,r17,r17
 8008544:	296f0484 	addi	r5,r5,-17390
 8008548:	2c45883a 	add	r2,r5,r17
 800854c:	1440000f 	ldh	r17,0(r2)
 8008550:	00800204 	movi	r2,8
 8008554:	147ff616 	blt	r2,r17,8008530 <__alt_data_end+0xfc008530>
 8008558:	dc409e15 	stw	r17,632(sp)
 800855c:	9023883a 	mov	r17,r18
 8008560:	8880400c 	andi	r2,r17,256
 8008564:	4825883a 	mov	r18,r9
 8008568:	10000426 	beq	r2,zero,800857c <__svfscanf_r+0x143c>
 800856c:	d8800104 	addi	r2,sp,4
 8008570:	1400b036 	bltu	r2,r16,8008834 <__svfscanf_r+0x16f4>
 8008574:	d8c00104 	addi	r3,sp,4
 8008578:	1c3b3226 	beq	r3,r16,8007244 <__alt_data_end+0xfc007244>
 800857c:	8880040c 	andi	r2,r17,16
 8008580:	10006226 	beq	r2,zero,800870c <__svfscanf_r+0x15cc>
 8008584:	d8800104 	addi	r2,sp,4
 8008588:	80a1c83a 	sub	r16,r16,r2
 800858c:	8521883a 	add	r16,r16,r20
 8008590:	003ca506 	br	8007828 <__alt_data_end+0xfc007828>
 8008594:	014200b4 	movhi	r5,2050
 8008598:	8c63883a 	add	r17,r17,r17
 800859c:	296f0484 	addi	r5,r5,-17390
 80085a0:	2c45883a 	add	r2,r5,r17
 80085a4:	1440000f 	ldh	r17,0(r2)
 80085a8:	00bd1fc4 	movi	r2,-2945
 80085ac:	90a4703a 	and	r18,r18,r2
 80085b0:	003fd006 	br	80084f4 <__alt_data_end+0xfc0084f4>
 80085b4:	9082000c 	andi	r2,r18,2048
 80085b8:	103fce26 	beq	r2,zero,80084f4 <__alt_data_end+0xfc0084f4>
 80085bc:	8800021e 	bne	r17,zero,80085c8 <__svfscanf_r+0x1488>
 80085c0:	94808014 	ori	r18,r18,512
 80085c4:	04400204 	movi	r17,8
 80085c8:	9081000c 	andi	r2,r18,1024
 80085cc:	10008626 	beq	r2,zero,80087e8 <__svfscanf_r+0x16a8>
 80085d0:	00be9fc4 	movi	r2,-1409
 80085d4:	90a4703a 	and	r18,r18,r2
 80085d8:	003fc606 	br	80084f4 <__alt_data_end+0xfc0084f4>
 80085dc:	9080200c 	andi	r2,r18,128
 80085e0:	103fdd26 	beq	r2,zero,8008558 <__alt_data_end+0xfc008558>
 80085e4:	9224703a 	and	r18,r18,r8
 80085e8:	003fc206 	br	80084f4 <__alt_data_end+0xfc0084f4>
 80085ec:	980b883a 	mov	r5,r19
 80085f0:	b809883a 	mov	r4,r23
 80085f4:	d980a915 	stw	r6,676(sp)
 80085f8:	d9c0aa15 	stw	r7,680(sp)
 80085fc:	da00a715 	stw	r8,668(sp)
 8008600:	da40a815 	stw	r9,672(sp)
 8008604:	dac0a615 	stw	r11,664(sp)
 8008608:	80049240 	call	8004924 <__srefill_r>
 800860c:	d980a917 	ldw	r6,676(sp)
 8008610:	d9c0aa17 	ldw	r7,680(sp)
 8008614:	da00a717 	ldw	r8,668(sp)
 8008618:	da40a817 	ldw	r9,672(sp)
 800861c:	dac0a617 	ldw	r11,664(sp)
 8008620:	103fbc26 	beq	r2,zero,8008514 <__alt_data_end+0xfc008514>
 8008624:	003fcc06 	br	8008558 <__alt_data_end+0xfc008558>
 8008628:	8821883a 	mov	r16,r17
 800862c:	a807883a 	mov	r3,r21
 8008630:	e023883a 	mov	r17,fp
 8008634:	b82b883a 	mov	r21,r23
 8008638:	302f883a 	mov	r23,r6
 800863c:	00bfbfc4 	movi	r2,-257
 8008640:	a0a8703a 	and	r20,r20,r2
 8008644:	003e6706 	br	8007fe4 <__alt_data_end+0xfc007fe4>
 8008648:	d800a215 	stw	zero,648(sp)
 800864c:	003de306 	br	8007ddc <__alt_data_end+0xfc007ddc>
 8008650:	000f883a 	mov	r7,zero
 8008654:	003f4106 	br	800835c <__alt_data_end+0xfc00835c>
 8008658:	d9409c17 	ldw	r5,624(sp)
 800865c:	e2bfffc4 	addi	r10,fp,-1
 8008660:	2c400017 	ldw	r17,0(r5)
 8008664:	2c000104 	addi	r16,r5,4
 8008668:	8aa9883a 	add	r20,r17,r10
 800866c:	880b883a 	mov	r5,r17
 8008670:	00000606 	br	800868c <__svfscanf_r+0x154c>
 8008674:	98c00017 	ldw	r3,0(r19)
 8008678:	b1000017 	ldw	r4,0(r22)
 800867c:	a80b883a 	mov	r5,r21
 8008680:	18800003 	ldbu	r2,0(r3)
 8008684:	2085883a 	add	r2,r4,r2
 8008688:	10800043 	ldbu	r2,1(r2)
 800868c:	1080020c 	andi	r2,r2,8
 8008690:	1000621e 	bne	r2,zero,800881c <__svfscanf_r+0x16dc>
 8008694:	98800117 	ldw	r2,4(r19)
 8008698:	19000044 	addi	r4,r3,1
 800869c:	99000015 	stw	r4,0(r19)
 80086a0:	10bfffc4 	addi	r2,r2,-1
 80086a4:	98800115 	stw	r2,4(r19)
 80086a8:	18800003 	ldbu	r2,0(r3)
 80086ac:	2d400044 	addi	r21,r5,1
 80086b0:	a839883a 	mov	fp,r21
 80086b4:	28800005 	stb	r2,0(r5)
 80086b8:	2d000626 	beq	r5,r20,80086d4 <__svfscanf_r+0x1594>
 80086bc:	98800117 	ldw	r2,4(r19)
 80086c0:	00bfec16 	blt	zero,r2,8008674 <__alt_data_end+0xfc008674>
 80086c4:	980b883a 	mov	r5,r19
 80086c8:	b809883a 	mov	r4,r23
 80086cc:	80049240 	call	8004924 <__srefill_r>
 80086d0:	103fe826 	beq	r2,zero,8008674 <__alt_data_end+0xfc008674>
 80086d4:	d880a017 	ldw	r2,640(sp)
 80086d8:	dd009d17 	ldw	r20,628(sp)
 80086dc:	e463c83a 	sub	r17,fp,r17
 80086e0:	10800044 	addi	r2,r2,1
 80086e4:	e0000005 	stb	zero,0(fp)
 80086e8:	9465883a 	add	r18,r18,r17
 80086ec:	d880a015 	stw	r2,640(sp)
 80086f0:	dc009c15 	stw	r16,624(sp)
 80086f4:	a00d883a 	mov	r6,r20
 80086f8:	003ace06 	br	8007234 <__alt_data_end+0xfc007234>
 80086fc:	dd009d17 	ldw	r20,628(sp)
 8008700:	9465883a 	add	r18,r18,r17
 8008704:	a00d883a 	mov	r6,r20
 8008708:	003aca06 	br	8007234 <__alt_data_end+0xfc007234>
 800870c:	d8c0a117 	ldw	r3,644(sp)
 8008710:	d9c09e17 	ldw	r7,632(sp)
 8008714:	000d883a 	mov	r6,zero
 8008718:	d9400104 	addi	r5,sp,4
 800871c:	b809883a 	mov	r4,r23
 8008720:	80000005 	stb	zero,0(r16)
 8008724:	183ee83a 	callr	r3
 8008728:	88c0080c 	andi	r3,r17,32
 800872c:	1800351e 	bne	r3,zero,8008804 <__svfscanf_r+0x16c4>
 8008730:	88c0010c 	andi	r3,r17,4
 8008734:	18007026 	beq	r3,zero,80088f8 <__svfscanf_r+0x17b8>
 8008738:	d9409c17 	ldw	r5,624(sp)
 800873c:	28c00017 	ldw	r3,0(r5)
 8008740:	29400104 	addi	r5,r5,4
 8008744:	d9409c15 	stw	r5,624(sp)
 8008748:	1880000d 	sth	r2,0(r3)
 800874c:	d940a017 	ldw	r5,640(sp)
 8008750:	29400044 	addi	r5,r5,1
 8008754:	d940a015 	stw	r5,640(sp)
 8008758:	003f8a06 	br	8008584 <__alt_data_end+0xfc008584>
 800875c:	dd409904 	addi	r21,sp,612
 8008760:	8c40040c 	andi	r17,r17,16
 8008764:	01800204 	movi	r6,8
 8008768:	000b883a 	mov	r5,zero
 800876c:	a809883a 	mov	r4,r21
 8008770:	80046400 	call	8004640 <memset>
 8008774:	8800391e 	bne	r17,zero,800885c <__svfscanf_r+0x171c>
 8008778:	d8c09c17 	ldw	r3,624(sp)
 800877c:	1d000017 	ldw	r20,0(r3)
 8008780:	18c00104 	addi	r3,r3,4
 8008784:	d8c09c15 	stw	r3,624(sp)
 8008788:	000d883a 	mov	r6,zero
 800878c:	3021883a 	mov	r16,r6
 8008790:	dc409f15 	stw	r17,636(sp)
 8008794:	98800017 	ldw	r2,0(r19)
 8008798:	b0c00017 	ldw	r3,0(r22)
 800879c:	10800003 	ldbu	r2,0(r2)
 80087a0:	1885883a 	add	r2,r3,r2
 80087a4:	10800043 	ldbu	r2,1(r2)
 80087a8:	1080020c 	andi	r2,r2,8
 80087ac:	1000011e 	bne	r2,zero,80087b4 <__svfscanf_r+0x1674>
 80087b0:	e000651e 	bne	fp,zero,8008948 <__svfscanf_r+0x1808>
 80087b4:	dc409f17 	ldw	r17,636(sp)
 80087b8:	883c811e 	bne	r17,zero,80079c0 <__alt_data_end+0xfc0079c0>
 80087bc:	a0000015 	stw	zero,0(r20)
 80087c0:	003c7c06 	br	80079b4 <__alt_data_end+0xfc0079b4>
 80087c4:	a2c0008c 	andi	r11,r20,2
 80087c8:	58003c26 	beq	r11,zero,80088bc <__svfscanf_r+0x177c>
 80087cc:	d9409c17 	ldw	r5,624(sp)
 80087d0:	28800017 	ldw	r2,0(r5)
 80087d4:	29400104 	addi	r5,r5,4
 80087d8:	d9409c15 	stw	r5,624(sp)
 80087dc:	14000015 	stw	r16,0(r2)
 80087e0:	10c00115 	stw	r3,4(r2)
 80087e4:	003e4406 	br	80080f8 <__alt_data_end+0xfc0080f8>
 80087e8:	00bf1fc4 	movi	r2,-897
 80087ec:	90a4703a 	and	r18,r18,r2
 80087f0:	38000226 	beq	r7,zero,80087fc <__svfscanf_r+0x16bc>
 80087f4:	39ffffc4 	addi	r7,r7,-1
 80087f8:	e7000044 	addi	fp,fp,1
 80087fc:	a5000044 	addi	r20,r20,1
 8008800:	003f3e06 	br	80084fc <__alt_data_end+0xfc0084fc>
 8008804:	d9009c17 	ldw	r4,624(sp)
 8008808:	20c00017 	ldw	r3,0(r4)
 800880c:	21000104 	addi	r4,r4,4
 8008810:	d9009c15 	stw	r4,624(sp)
 8008814:	18800015 	stw	r2,0(r3)
 8008818:	003fcc06 	br	800874c <__alt_data_end+0xfc00874c>
 800881c:	2839883a 	mov	fp,r5
 8008820:	003fac06 	br	80086d4 <__alt_data_end+0xfc0086d4>
 8008824:	00be1fc4 	movi	r2,-1921
 8008828:	a0a8703a 	and	r20,r20,r2
 800882c:	05c00044 	movi	r23,1
 8008830:	003ddb06 	br	8007fa0 <__alt_data_end+0xfc007fa0>
 8008834:	817fffc7 	ldb	r5,-1(r16)
 8008838:	980d883a 	mov	r6,r19
 800883c:	b809883a 	mov	r4,r23
 8008840:	843fffc4 	addi	r16,r16,-1
 8008844:	80115280 	call	8011528 <_ungetc_r>
 8008848:	003f4a06 	br	8008574 <__alt_data_end+0xfc008574>
 800884c:	00fe1fc4 	movi	r3,-1921
 8008850:	a0e8703a 	and	r20,r20,r3
 8008854:	05400044 	movi	r21,1
 8008858:	003dd106 	br	8007fa0 <__alt_data_end+0xfc007fa0>
 800885c:	dd009b04 	addi	r20,sp,620
 8008860:	003fc906 	br	8008788 <__alt_data_end+0xfc008788>
 8008864:	d8c09f17 	ldw	r3,636(sp)
 8008868:	88e3c83a 	sub	r17,r17,r3
 800886c:	044dc83a 	sub	r6,zero,r17
 8008870:	883e1426 	beq	r17,zero,80080c4 <__alt_data_end+0xfc0080c4>
 8008874:	d88055c4 	addi	r2,sp,343
 8008878:	80800136 	bltu	r16,r2,8008880 <__svfscanf_r+0x1740>
 800887c:	dc005584 	addi	r16,sp,342
 8008880:	014200b4 	movhi	r5,2050
 8008884:	296f0304 	addi	r5,r5,-17396
 8008888:	8009883a 	mov	r4,r16
 800888c:	800cdc40 	call	800cdc4 <sprintf>
 8008890:	003e0c06 	br	80080c4 <__alt_data_end+0xfc0080c4>
 8008894:	d8c0a517 	ldw	r3,660(sp)
 8008898:	000d883a 	mov	r6,zero
 800889c:	01c00284 	movi	r7,10
 80088a0:	19400044 	addi	r5,r3,1
 80088a4:	b809883a 	mov	r4,r23
 80088a8:	800e66c0 	call	800e66c <_strtol_r>
 80088ac:	d8c0a417 	ldw	r3,656(sp)
 80088b0:	dc00a517 	ldw	r16,660(sp)
 80088b4:	10cdc83a 	sub	r6,r2,r3
 80088b8:	003fee06 	br	8008874 <__alt_data_end+0xfc008874>
 80088bc:	d8809c17 	ldw	r2,624(sp)
 80088c0:	180b883a 	mov	r5,r3
 80088c4:	8009883a 	mov	r4,r16
 80088c8:	15000017 	ldw	r20,0(r2)
 80088cc:	14400104 	addi	r17,r2,4
 80088d0:	d8c0a615 	stw	r3,664(sp)
 80088d4:	800cc200 	call	800cc20 <__fpclassifyd>
 80088d8:	d8c0a617 	ldw	r3,664(sp)
 80088dc:	10007226 	beq	r2,zero,8008aa8 <__svfscanf_r+0x1968>
 80088e0:	8009883a 	mov	r4,r16
 80088e4:	180b883a 	mov	r5,r3
 80088e8:	8018d580 	call	8018d58 <__truncdfsf2>
 80088ec:	a0800015 	stw	r2,0(r20)
 80088f0:	dc409c15 	stw	r17,624(sp)
 80088f4:	003e0006 	br	80080f8 <__alt_data_end+0xfc0080f8>
 80088f8:	88c0004c 	andi	r3,r17,1
 80088fc:	183fc11e 	bne	r3,zero,8008804 <__alt_data_end+0xfc008804>
 8008900:	8c40008c 	andi	r17,r17,2
 8008904:	883fbf26 	beq	r17,zero,8008804 <__alt_data_end+0xfc008804>
 8008908:	d940a117 	ldw	r5,644(sp)
 800890c:	00820074 	movhi	r2,2049
 8008910:	10baf904 	addi	r2,r2,-5148
 8008914:	d9c09e17 	ldw	r7,632(sp)
 8008918:	000d883a 	mov	r6,zero
 800891c:	28806726 	beq	r5,r2,8008abc <__svfscanf_r+0x197c>
 8008920:	d9400104 	addi	r5,sp,4
 8008924:	b809883a 	mov	r4,r23
 8008928:	800e8e00 	call	800e8e0 <_strtoll_r>
 800892c:	d9409c17 	ldw	r5,624(sp)
 8008930:	29000017 	ldw	r4,0(r5)
 8008934:	29400104 	addi	r5,r5,4
 8008938:	d9409c15 	stw	r5,624(sp)
 800893c:	20800015 	stw	r2,0(r4)
 8008940:	20c00115 	stw	r3,4(r4)
 8008944:	003f8106 	br	800874c <__alt_data_end+0xfc00874c>
 8008948:	800af440 	call	800af44 <__locale_mb_cur_max>
 800894c:	80bc5626 	beq	r16,r2,8007aa8 <__alt_data_end+0xfc007aa8>
 8008950:	98800017 	ldw	r2,0(r19)
 8008954:	99000117 	ldw	r4,4(r19)
 8008958:	d9400104 	addi	r5,sp,4
 800895c:	12000003 	ldbu	r8,0(r2)
 8008960:	213fffc4 	addi	r4,r4,-1
 8008964:	10800044 	addi	r2,r2,1
 8008968:	99000115 	stw	r4,4(r19)
 800896c:	98800015 	stw	r2,0(r19)
 8008970:	84400044 	addi	r17,r16,1
 8008974:	dd400015 	stw	r21,0(sp)
 8008978:	2c21883a 	add	r16,r5,r16
 800897c:	280d883a 	mov	r6,r5
 8008980:	880f883a 	mov	r7,r17
 8008984:	a00b883a 	mov	r5,r20
 8008988:	b809883a 	mov	r4,r23
 800898c:	82000005 	stb	r8,0(r16)
 8008990:	800aff80 	call	800aff8 <_mbrtowc_r>
 8008994:	00ffffc4 	movi	r3,-1
 8008998:	10fc4326 	beq	r2,r3,8007aa8 <__alt_data_end+0xfc007aa8>
 800899c:	103c371e 	bne	r2,zero,8007a7c <__alt_data_end+0xfc007a7c>
 80089a0:	a0000015 	stw	zero,0(r20)
 80089a4:	0009883a 	mov	r4,zero
 80089a8:	800ae8c0 	call	800ae8c <iswspace>
 80089ac:	10001b26 	beq	r2,zero,8008a1c <__svfscanf_r+0x18dc>
 80089b0:	8821883a 	mov	r16,r17
 80089b4:	dc409f17 	ldw	r17,636(sp)
 80089b8:	803f7f26 	beq	r16,zero,80087b8 <__alt_data_end+0xfc0087b8>
 80089bc:	843fffc4 	addi	r16,r16,-1
 80089c0:	d9400104 	addi	r5,sp,4
 80089c4:	2c2b883a 	add	r21,r5,r16
 80089c8:	00000106 	br	80089d0 <__svfscanf_r+0x1890>
 80089cc:	843fffc4 	addi	r16,r16,-1
 80089d0:	a9400003 	ldbu	r5,0(r21)
 80089d4:	980d883a 	mov	r6,r19
 80089d8:	b809883a 	mov	r4,r23
 80089dc:	80115280 	call	8011528 <_ungetc_r>
 80089e0:	ad7fffc4 	addi	r21,r21,-1
 80089e4:	803ff91e 	bne	r16,zero,80089cc <__alt_data_end+0xfc0089cc>
 80089e8:	003f7306 	br	80087b8 <__alt_data_end+0xfc0087b8>
 80089ec:	d9400104 	addi	r5,sp,4
 80089f0:	802b883a 	mov	r21,r16
 80089f4:	9839883a 	mov	fp,r19
 80089f8:	2c3a122e 	bgeu	r5,r16,8007244 <__alt_data_end+0xfc007244>
 80089fc:	ad7fffc4 	addi	r21,r21,-1
 8008a00:	a9400007 	ldb	r5,0(r21)
 8008a04:	e00d883a 	mov	r6,fp
 8008a08:	b809883a 	mov	r4,r23
 8008a0c:	80115280 	call	8011528 <_ungetc_r>
 8008a10:	d8800104 	addi	r2,sp,4
 8008a14:	157ff91e 	bne	r2,r21,80089fc <__alt_data_end+0xfc0089fc>
 8008a18:	003a0a06 	br	8007244 <__alt_data_end+0xfc007244>
 8008a1c:	d8c09f17 	ldw	r3,636(sp)
 8008a20:	9465883a 	add	r18,r18,r17
 8008a24:	e73fffc4 	addi	fp,fp,-1
 8008a28:	1800051e 	bne	r3,zero,8008a40 <__svfscanf_r+0x1900>
 8008a2c:	a5000104 	addi	r20,r20,4
 8008a30:	0021883a 	mov	r16,zero
 8008a34:	003c1406 	br	8007a88 <__alt_data_end+0xfc007a88>
 8008a38:	a1000017 	ldw	r4,0(r20)
 8008a3c:	003fda06 	br	80089a8 <__alt_data_end+0xfc0089a8>
 8008a40:	0021883a 	mov	r16,zero
 8008a44:	003c1006 	br	8007a88 <__alt_data_end+0xfc007a88>
 8008a48:	d8c00104 	addi	r3,sp,4
 8008a4c:	802b883a 	mov	r21,r16
 8008a50:	9839883a 	mov	fp,r19
 8008a54:	1c39fb2e 	bgeu	r3,r16,8007244 <__alt_data_end+0xfc007244>
 8008a58:	ad7fffc4 	addi	r21,r21,-1
 8008a5c:	a9400007 	ldb	r5,0(r21)
 8008a60:	b809883a 	mov	r4,r23
 8008a64:	e00d883a 	mov	r6,fp
 8008a68:	80115280 	call	8011528 <_ungetc_r>
 8008a6c:	d9000104 	addi	r4,sp,4
 8008a70:	257ff91e 	bne	r4,r21,8008a58 <__alt_data_end+0xfc008a58>
 8008a74:	0039f306 	br	8007244 <__alt_data_end+0xfc007244>
 8008a78:	d8c00104 	addi	r3,sp,4
 8008a7c:	802b883a 	mov	r21,r16
 8008a80:	9839883a 	mov	fp,r19
 8008a84:	1c39ef2e 	bgeu	r3,r16,8007244 <__alt_data_end+0xfc007244>
 8008a88:	ad7fffc4 	addi	r21,r21,-1
 8008a8c:	a9400007 	ldb	r5,0(r21)
 8008a90:	b809883a 	mov	r4,r23
 8008a94:	e00d883a 	mov	r6,fp
 8008a98:	80115280 	call	8011528 <_ungetc_r>
 8008a9c:	d9000104 	addi	r4,sp,4
 8008aa0:	257ff91e 	bne	r4,r21,8008a88 <__alt_data_end+0xfc008a88>
 8008aa4:	0039e706 	br	8007244 <__alt_data_end+0xfc007244>
 8008aa8:	0009883a 	mov	r4,zero
 8008aac:	800cd640 	call	800cd64 <nanf>
 8008ab0:	a0800015 	stw	r2,0(r20)
 8008ab4:	dc409c15 	stw	r17,624(sp)
 8008ab8:	003d8f06 	br	80080f8 <__alt_data_end+0xfc0080f8>
 8008abc:	d9400104 	addi	r5,sp,4
 8008ac0:	b809883a 	mov	r4,r23
 8008ac4:	800ee780 	call	800ee78 <_strtoull_r>
 8008ac8:	003f9806 	br	800892c <__alt_data_end+0xfc00892c>

08008acc <vfscanf>:
 8008acc:	008200b4 	movhi	r2,2050
 8008ad0:	defffb04 	addi	sp,sp,-20
 8008ad4:	10b77404 	addi	r2,r2,-8752
 8008ad8:	dc000215 	stw	r16,8(sp)
 8008adc:	14000017 	ldw	r16,0(r2)
 8008ae0:	dc400315 	stw	r17,12(sp)
 8008ae4:	dfc00415 	stw	ra,16(sp)
 8008ae8:	2023883a 	mov	r17,r4
 8008aec:	80000826 	beq	r16,zero,8008b10 <vfscanf+0x44>
 8008af0:	80800e17 	ldw	r2,56(r16)
 8008af4:	1000061e 	bne	r2,zero,8008b10 <vfscanf+0x44>
 8008af8:	8009883a 	mov	r4,r16
 8008afc:	d9400015 	stw	r5,0(sp)
 8008b00:	d9800115 	stw	r6,4(sp)
 8008b04:	80030280 	call	8003028 <__sinit>
 8008b08:	d9800117 	ldw	r6,4(sp)
 8008b0c:	d9400017 	ldw	r5,0(sp)
 8008b10:	300f883a 	mov	r7,r6
 8008b14:	8009883a 	mov	r4,r16
 8008b18:	280d883a 	mov	r6,r5
 8008b1c:	880b883a 	mov	r5,r17
 8008b20:	dfc00417 	ldw	ra,16(sp)
 8008b24:	dc400317 	ldw	r17,12(sp)
 8008b28:	dc000217 	ldw	r16,8(sp)
 8008b2c:	dec00504 	addi	sp,sp,20
 8008b30:	80071401 	jmpi	8007140 <__svfscanf_r>

08008b34 <__svfscanf>:
 8008b34:	008200b4 	movhi	r2,2050
 8008b38:	10b77404 	addi	r2,r2,-8752
 8008b3c:	300f883a 	mov	r7,r6
 8008b40:	280d883a 	mov	r6,r5
 8008b44:	200b883a 	mov	r5,r4
 8008b48:	11000017 	ldw	r4,0(r2)
 8008b4c:	80071401 	jmpi	8007140 <__svfscanf_r>

08008b50 <_vfscanf_r>:
 8008b50:	defffb04 	addi	sp,sp,-20
 8008b54:	dc000315 	stw	r16,12(sp)
 8008b58:	dfc00415 	stw	ra,16(sp)
 8008b5c:	2021883a 	mov	r16,r4
 8008b60:	20000926 	beq	r4,zero,8008b88 <_vfscanf_r+0x38>
 8008b64:	20800e17 	ldw	r2,56(r4)
 8008b68:	1000071e 	bne	r2,zero,8008b88 <_vfscanf_r+0x38>
 8008b6c:	d9400015 	stw	r5,0(sp)
 8008b70:	d9800115 	stw	r6,4(sp)
 8008b74:	d9c00215 	stw	r7,8(sp)
 8008b78:	80030280 	call	8003028 <__sinit>
 8008b7c:	d9c00217 	ldw	r7,8(sp)
 8008b80:	d9800117 	ldw	r6,4(sp)
 8008b84:	d9400017 	ldw	r5,0(sp)
 8008b88:	8009883a 	mov	r4,r16
 8008b8c:	dfc00417 	ldw	ra,16(sp)
 8008b90:	dc000317 	ldw	r16,12(sp)
 8008b94:	dec00504 	addi	sp,sp,20
 8008b98:	80071401 	jmpi	8007140 <__svfscanf_r>

08008b9c <_write_r>:
 8008b9c:	defffd04 	addi	sp,sp,-12
 8008ba0:	2805883a 	mov	r2,r5
 8008ba4:	dc000015 	stw	r16,0(sp)
 8008ba8:	040200b4 	movhi	r16,2050
 8008bac:	dc400115 	stw	r17,4(sp)
 8008bb0:	300b883a 	mov	r5,r6
 8008bb4:	843e5904 	addi	r16,r16,-1692
 8008bb8:	2023883a 	mov	r17,r4
 8008bbc:	380d883a 	mov	r6,r7
 8008bc0:	1009883a 	mov	r4,r2
 8008bc4:	dfc00215 	stw	ra,8(sp)
 8008bc8:	80000015 	stw	zero,0(r16)
 8008bcc:	8019c500 	call	8019c50 <write>
 8008bd0:	00ffffc4 	movi	r3,-1
 8008bd4:	10c00526 	beq	r2,r3,8008bec <_write_r+0x50>
 8008bd8:	dfc00217 	ldw	ra,8(sp)
 8008bdc:	dc400117 	ldw	r17,4(sp)
 8008be0:	dc000017 	ldw	r16,0(sp)
 8008be4:	dec00304 	addi	sp,sp,12
 8008be8:	f800283a 	ret
 8008bec:	80c00017 	ldw	r3,0(r16)
 8008bf0:	183ff926 	beq	r3,zero,8008bd8 <__alt_data_end+0xfc008bd8>
 8008bf4:	88c00015 	stw	r3,0(r17)
 8008bf8:	003ff706 	br	8008bd8 <__alt_data_end+0xfc008bd8>

08008bfc <__swsetup_r>:
 8008bfc:	008200b4 	movhi	r2,2050
 8008c00:	defffd04 	addi	sp,sp,-12
 8008c04:	10b77404 	addi	r2,r2,-8752
 8008c08:	dc400115 	stw	r17,4(sp)
 8008c0c:	2023883a 	mov	r17,r4
 8008c10:	11000017 	ldw	r4,0(r2)
 8008c14:	dc000015 	stw	r16,0(sp)
 8008c18:	dfc00215 	stw	ra,8(sp)
 8008c1c:	2821883a 	mov	r16,r5
 8008c20:	20000226 	beq	r4,zero,8008c2c <__swsetup_r+0x30>
 8008c24:	20800e17 	ldw	r2,56(r4)
 8008c28:	10003126 	beq	r2,zero,8008cf0 <__swsetup_r+0xf4>
 8008c2c:	8080030b 	ldhu	r2,12(r16)
 8008c30:	10c0020c 	andi	r3,r2,8
 8008c34:	1009883a 	mov	r4,r2
 8008c38:	18000f26 	beq	r3,zero,8008c78 <__swsetup_r+0x7c>
 8008c3c:	80c00417 	ldw	r3,16(r16)
 8008c40:	18001526 	beq	r3,zero,8008c98 <__swsetup_r+0x9c>
 8008c44:	1100004c 	andi	r4,r2,1
 8008c48:	20001c1e 	bne	r4,zero,8008cbc <__swsetup_r+0xc0>
 8008c4c:	1080008c 	andi	r2,r2,2
 8008c50:	1000291e 	bne	r2,zero,8008cf8 <__swsetup_r+0xfc>
 8008c54:	80800517 	ldw	r2,20(r16)
 8008c58:	80800215 	stw	r2,8(r16)
 8008c5c:	18001c26 	beq	r3,zero,8008cd0 <__swsetup_r+0xd4>
 8008c60:	0005883a 	mov	r2,zero
 8008c64:	dfc00217 	ldw	ra,8(sp)
 8008c68:	dc400117 	ldw	r17,4(sp)
 8008c6c:	dc000017 	ldw	r16,0(sp)
 8008c70:	dec00304 	addi	sp,sp,12
 8008c74:	f800283a 	ret
 8008c78:	2080040c 	andi	r2,r4,16
 8008c7c:	10002e26 	beq	r2,zero,8008d38 <__swsetup_r+0x13c>
 8008c80:	2080010c 	andi	r2,r4,4
 8008c84:	10001e1e 	bne	r2,zero,8008d00 <__swsetup_r+0x104>
 8008c88:	80c00417 	ldw	r3,16(r16)
 8008c8c:	20800214 	ori	r2,r4,8
 8008c90:	8080030d 	sth	r2,12(r16)
 8008c94:	183feb1e 	bne	r3,zero,8008c44 <__alt_data_end+0xfc008c44>
 8008c98:	1100a00c 	andi	r4,r2,640
 8008c9c:	01408004 	movi	r5,512
 8008ca0:	217fe826 	beq	r4,r5,8008c44 <__alt_data_end+0xfc008c44>
 8008ca4:	800b883a 	mov	r5,r16
 8008ca8:	8809883a 	mov	r4,r17
 8008cac:	8003c780 	call	8003c78 <__smakebuf_r>
 8008cb0:	8080030b 	ldhu	r2,12(r16)
 8008cb4:	80c00417 	ldw	r3,16(r16)
 8008cb8:	003fe206 	br	8008c44 <__alt_data_end+0xfc008c44>
 8008cbc:	80800517 	ldw	r2,20(r16)
 8008cc0:	80000215 	stw	zero,8(r16)
 8008cc4:	0085c83a 	sub	r2,zero,r2
 8008cc8:	80800615 	stw	r2,24(r16)
 8008ccc:	183fe41e 	bne	r3,zero,8008c60 <__alt_data_end+0xfc008c60>
 8008cd0:	80c0030b 	ldhu	r3,12(r16)
 8008cd4:	0005883a 	mov	r2,zero
 8008cd8:	1900200c 	andi	r4,r3,128
 8008cdc:	203fe126 	beq	r4,zero,8008c64 <__alt_data_end+0xfc008c64>
 8008ce0:	18c01014 	ori	r3,r3,64
 8008ce4:	80c0030d 	sth	r3,12(r16)
 8008ce8:	00bfffc4 	movi	r2,-1
 8008cec:	003fdd06 	br	8008c64 <__alt_data_end+0xfc008c64>
 8008cf0:	80030280 	call	8003028 <__sinit>
 8008cf4:	003fcd06 	br	8008c2c <__alt_data_end+0xfc008c2c>
 8008cf8:	0005883a 	mov	r2,zero
 8008cfc:	003fd606 	br	8008c58 <__alt_data_end+0xfc008c58>
 8008d00:	81400c17 	ldw	r5,48(r16)
 8008d04:	28000626 	beq	r5,zero,8008d20 <__swsetup_r+0x124>
 8008d08:	80801004 	addi	r2,r16,64
 8008d0c:	28800326 	beq	r5,r2,8008d1c <__swsetup_r+0x120>
 8008d10:	8809883a 	mov	r4,r17
 8008d14:	80032a80 	call	80032a8 <_free_r>
 8008d18:	8100030b 	ldhu	r4,12(r16)
 8008d1c:	80000c15 	stw	zero,48(r16)
 8008d20:	80c00417 	ldw	r3,16(r16)
 8008d24:	00bff6c4 	movi	r2,-37
 8008d28:	1108703a 	and	r4,r2,r4
 8008d2c:	80000115 	stw	zero,4(r16)
 8008d30:	80c00015 	stw	r3,0(r16)
 8008d34:	003fd506 	br	8008c8c <__alt_data_end+0xfc008c8c>
 8008d38:	00800244 	movi	r2,9
 8008d3c:	88800015 	stw	r2,0(r17)
 8008d40:	20801014 	ori	r2,r4,64
 8008d44:	8080030d 	sth	r2,12(r16)
 8008d48:	00bfffc4 	movi	r2,-1
 8008d4c:	003fc506 	br	8008c64 <__alt_data_end+0xfc008c64>

08008d50 <_close_r>:
 8008d50:	defffd04 	addi	sp,sp,-12
 8008d54:	dc000015 	stw	r16,0(sp)
 8008d58:	040200b4 	movhi	r16,2050
 8008d5c:	dc400115 	stw	r17,4(sp)
 8008d60:	843e5904 	addi	r16,r16,-1692
 8008d64:	2023883a 	mov	r17,r4
 8008d68:	2809883a 	mov	r4,r5
 8008d6c:	dfc00215 	stw	ra,8(sp)
 8008d70:	80000015 	stw	zero,0(r16)
 8008d74:	8018fa00 	call	8018fa0 <close>
 8008d78:	00ffffc4 	movi	r3,-1
 8008d7c:	10c00526 	beq	r2,r3,8008d94 <_close_r+0x44>
 8008d80:	dfc00217 	ldw	ra,8(sp)
 8008d84:	dc400117 	ldw	r17,4(sp)
 8008d88:	dc000017 	ldw	r16,0(sp)
 8008d8c:	dec00304 	addi	sp,sp,12
 8008d90:	f800283a 	ret
 8008d94:	80c00017 	ldw	r3,0(r16)
 8008d98:	183ff926 	beq	r3,zero,8008d80 <__alt_data_end+0xfc008d80>
 8008d9c:	88c00015 	stw	r3,0(r17)
 8008da0:	003ff706 	br	8008d80 <__alt_data_end+0xfc008d80>

08008da4 <quorem>:
 8008da4:	defff204 	addi	sp,sp,-56
 8008da8:	ddc00b15 	stw	r23,44(sp)
 8008dac:	20800417 	ldw	r2,16(r4)
 8008db0:	2dc00417 	ldw	r23,16(r5)
 8008db4:	dfc00d15 	stw	ra,52(sp)
 8008db8:	df000c15 	stw	fp,48(sp)
 8008dbc:	dd800a15 	stw	r22,40(sp)
 8008dc0:	dd400915 	stw	r21,36(sp)
 8008dc4:	dd000815 	stw	r20,32(sp)
 8008dc8:	dcc00715 	stw	r19,28(sp)
 8008dcc:	dc800615 	stw	r18,24(sp)
 8008dd0:	dc400515 	stw	r17,20(sp)
 8008dd4:	dc000415 	stw	r16,16(sp)
 8008dd8:	15c07a16 	blt	r2,r23,8008fc4 <quorem+0x220>
 8008ddc:	bdffffc4 	addi	r23,r23,-1
 8008de0:	bde9883a 	add	r20,r23,r23
 8008de4:	28c00504 	addi	r3,r5,20
 8008de8:	a529883a 	add	r20,r20,r20
 8008dec:	1d39883a 	add	fp,r3,r20
 8008df0:	24c00504 	addi	r19,r4,20
 8008df4:	d9400215 	stw	r5,8(sp)
 8008df8:	9d29883a 	add	r20,r19,r20
 8008dfc:	e1400017 	ldw	r5,0(fp)
 8008e00:	d9000015 	stw	r4,0(sp)
 8008e04:	a1000017 	ldw	r4,0(r20)
 8008e08:	29400044 	addi	r5,r5,1
 8008e0c:	d8c00115 	stw	r3,4(sp)
 8008e10:	dd000315 	stw	r20,12(sp)
 8008e14:	80028380 	call	8002838 <__udivsi3>
 8008e18:	1025883a 	mov	r18,r2
 8008e1c:	10003026 	beq	r2,zero,8008ee0 <quorem+0x13c>
 8008e20:	dc400117 	ldw	r17,4(sp)
 8008e24:	9829883a 	mov	r20,r19
 8008e28:	002d883a 	mov	r22,zero
 8008e2c:	0021883a 	mov	r16,zero
 8008e30:	8d400017 	ldw	r21,0(r17)
 8008e34:	900b883a 	mov	r5,r18
 8008e38:	8c400104 	addi	r17,r17,4
 8008e3c:	a93fffcc 	andi	r4,r21,65535
 8008e40:	80028f40 	call	80028f4 <__mulsi3>
 8008e44:	a808d43a 	srli	r4,r21,16
 8008e48:	900b883a 	mov	r5,r18
 8008e4c:	15ad883a 	add	r22,r2,r22
 8008e50:	80028f40 	call	80028f4 <__mulsi3>
 8008e54:	a1000017 	ldw	r4,0(r20)
 8008e58:	b00cd43a 	srli	r6,r22,16
 8008e5c:	b0ffffcc 	andi	r3,r22,65535
 8008e60:	217fffcc 	andi	r5,r4,65535
 8008e64:	2c21883a 	add	r16,r5,r16
 8008e68:	80c7c83a 	sub	r3,r16,r3
 8008e6c:	2008d43a 	srli	r4,r4,16
 8008e70:	1185883a 	add	r2,r2,r6
 8008e74:	1821d43a 	srai	r16,r3,16
 8008e78:	117fffcc 	andi	r5,r2,65535
 8008e7c:	2149c83a 	sub	r4,r4,r5
 8008e80:	2421883a 	add	r16,r4,r16
 8008e84:	8008943a 	slli	r4,r16,16
 8008e88:	18ffffcc 	andi	r3,r3,65535
 8008e8c:	102cd43a 	srli	r22,r2,16
 8008e90:	20c8b03a 	or	r4,r4,r3
 8008e94:	a1000015 	stw	r4,0(r20)
 8008e98:	8021d43a 	srai	r16,r16,16
 8008e9c:	a5000104 	addi	r20,r20,4
 8008ea0:	e47fe32e 	bgeu	fp,r17,8008e30 <__alt_data_end+0xfc008e30>
 8008ea4:	d8c00317 	ldw	r3,12(sp)
 8008ea8:	18800017 	ldw	r2,0(r3)
 8008eac:	10000c1e 	bne	r2,zero,8008ee0 <quorem+0x13c>
 8008eb0:	18bfff04 	addi	r2,r3,-4
 8008eb4:	9880082e 	bgeu	r19,r2,8008ed8 <quorem+0x134>
 8008eb8:	18ffff17 	ldw	r3,-4(r3)
 8008ebc:	18000326 	beq	r3,zero,8008ecc <quorem+0x128>
 8008ec0:	00000506 	br	8008ed8 <quorem+0x134>
 8008ec4:	10c00017 	ldw	r3,0(r2)
 8008ec8:	1800031e 	bne	r3,zero,8008ed8 <quorem+0x134>
 8008ecc:	10bfff04 	addi	r2,r2,-4
 8008ed0:	bdffffc4 	addi	r23,r23,-1
 8008ed4:	98bffb36 	bltu	r19,r2,8008ec4 <__alt_data_end+0xfc008ec4>
 8008ed8:	d8c00017 	ldw	r3,0(sp)
 8008edc:	1dc00415 	stw	r23,16(r3)
 8008ee0:	d9400217 	ldw	r5,8(sp)
 8008ee4:	d9000017 	ldw	r4,0(sp)
 8008ee8:	800bf280 	call	800bf28 <__mcmp>
 8008eec:	10002816 	blt	r2,zero,8008f90 <quorem+0x1ec>
 8008ef0:	dc400117 	ldw	r17,4(sp)
 8008ef4:	94800044 	addi	r18,r18,1
 8008ef8:	980d883a 	mov	r6,r19
 8008efc:	0007883a 	mov	r3,zero
 8008f00:	31000017 	ldw	r4,0(r6)
 8008f04:	89400017 	ldw	r5,0(r17)
 8008f08:	31800104 	addi	r6,r6,4
 8008f0c:	20bfffcc 	andi	r2,r4,65535
 8008f10:	10c7883a 	add	r3,r2,r3
 8008f14:	28bfffcc 	andi	r2,r5,65535
 8008f18:	1885c83a 	sub	r2,r3,r2
 8008f1c:	280ad43a 	srli	r5,r5,16
 8008f20:	2008d43a 	srli	r4,r4,16
 8008f24:	1007d43a 	srai	r3,r2,16
 8008f28:	10bfffcc 	andi	r2,r2,65535
 8008f2c:	2149c83a 	sub	r4,r4,r5
 8008f30:	20c9883a 	add	r4,r4,r3
 8008f34:	200a943a 	slli	r5,r4,16
 8008f38:	8c400104 	addi	r17,r17,4
 8008f3c:	2007d43a 	srai	r3,r4,16
 8008f40:	2884b03a 	or	r2,r5,r2
 8008f44:	30bfff15 	stw	r2,-4(r6)
 8008f48:	e47fed2e 	bgeu	fp,r17,8008f00 <__alt_data_end+0xfc008f00>
 8008f4c:	bdc5883a 	add	r2,r23,r23
 8008f50:	1085883a 	add	r2,r2,r2
 8008f54:	9887883a 	add	r3,r19,r2
 8008f58:	18800017 	ldw	r2,0(r3)
 8008f5c:	10000c1e 	bne	r2,zero,8008f90 <quorem+0x1ec>
 8008f60:	18bfff04 	addi	r2,r3,-4
 8008f64:	9880082e 	bgeu	r19,r2,8008f88 <quorem+0x1e4>
 8008f68:	18ffff17 	ldw	r3,-4(r3)
 8008f6c:	18000326 	beq	r3,zero,8008f7c <quorem+0x1d8>
 8008f70:	00000506 	br	8008f88 <quorem+0x1e4>
 8008f74:	10c00017 	ldw	r3,0(r2)
 8008f78:	1800031e 	bne	r3,zero,8008f88 <quorem+0x1e4>
 8008f7c:	10bfff04 	addi	r2,r2,-4
 8008f80:	bdffffc4 	addi	r23,r23,-1
 8008f84:	98bffb36 	bltu	r19,r2,8008f74 <__alt_data_end+0xfc008f74>
 8008f88:	d8c00017 	ldw	r3,0(sp)
 8008f8c:	1dc00415 	stw	r23,16(r3)
 8008f90:	9005883a 	mov	r2,r18
 8008f94:	dfc00d17 	ldw	ra,52(sp)
 8008f98:	df000c17 	ldw	fp,48(sp)
 8008f9c:	ddc00b17 	ldw	r23,44(sp)
 8008fa0:	dd800a17 	ldw	r22,40(sp)
 8008fa4:	dd400917 	ldw	r21,36(sp)
 8008fa8:	dd000817 	ldw	r20,32(sp)
 8008fac:	dcc00717 	ldw	r19,28(sp)
 8008fb0:	dc800617 	ldw	r18,24(sp)
 8008fb4:	dc400517 	ldw	r17,20(sp)
 8008fb8:	dc000417 	ldw	r16,16(sp)
 8008fbc:	dec00e04 	addi	sp,sp,56
 8008fc0:	f800283a 	ret
 8008fc4:	0005883a 	mov	r2,zero
 8008fc8:	003ff206 	br	8008f94 <__alt_data_end+0xfc008f94>

08008fcc <_dtoa_r>:
 8008fcc:	20801017 	ldw	r2,64(r4)
 8008fd0:	deffde04 	addi	sp,sp,-136
 8008fd4:	df002015 	stw	fp,128(sp)
 8008fd8:	dcc01b15 	stw	r19,108(sp)
 8008fdc:	dc801a15 	stw	r18,104(sp)
 8008fe0:	dc401915 	stw	r17,100(sp)
 8008fe4:	dc001815 	stw	r16,96(sp)
 8008fe8:	dfc02115 	stw	ra,132(sp)
 8008fec:	ddc01f15 	stw	r23,124(sp)
 8008ff0:	dd801e15 	stw	r22,120(sp)
 8008ff4:	dd401d15 	stw	r21,116(sp)
 8008ff8:	dd001c15 	stw	r20,112(sp)
 8008ffc:	d9c00315 	stw	r7,12(sp)
 8009000:	2039883a 	mov	fp,r4
 8009004:	3023883a 	mov	r17,r6
 8009008:	2825883a 	mov	r18,r5
 800900c:	dc002417 	ldw	r16,144(sp)
 8009010:	3027883a 	mov	r19,r6
 8009014:	10000826 	beq	r2,zero,8009038 <_dtoa_r+0x6c>
 8009018:	21801117 	ldw	r6,68(r4)
 800901c:	00c00044 	movi	r3,1
 8009020:	100b883a 	mov	r5,r2
 8009024:	1986983a 	sll	r3,r3,r6
 8009028:	11800115 	stw	r6,4(r2)
 800902c:	10c00215 	stw	r3,8(r2)
 8009030:	800b64c0 	call	800b64c <_Bfree>
 8009034:	e0001015 	stw	zero,64(fp)
 8009038:	88002e16 	blt	r17,zero,80090f4 <_dtoa_r+0x128>
 800903c:	80000015 	stw	zero,0(r16)
 8009040:	889ffc2c 	andhi	r2,r17,32752
 8009044:	00dffc34 	movhi	r3,32752
 8009048:	10c01c26 	beq	r2,r3,80090bc <_dtoa_r+0xf0>
 800904c:	000d883a 	mov	r6,zero
 8009050:	000f883a 	mov	r7,zero
 8009054:	9009883a 	mov	r4,r18
 8009058:	980b883a 	mov	r5,r19
 800905c:	80177940 	call	8017794 <__eqdf2>
 8009060:	10002b1e 	bne	r2,zero,8009110 <_dtoa_r+0x144>
 8009064:	d9c02317 	ldw	r7,140(sp)
 8009068:	00800044 	movi	r2,1
 800906c:	38800015 	stw	r2,0(r7)
 8009070:	d8802517 	ldw	r2,148(sp)
 8009074:	10019e26 	beq	r2,zero,80096f0 <_dtoa_r+0x724>
 8009078:	d8c02517 	ldw	r3,148(sp)
 800907c:	008200b4 	movhi	r2,2050
 8009080:	10aefa44 	addi	r2,r2,-17431
 8009084:	18800015 	stw	r2,0(r3)
 8009088:	10bfffc4 	addi	r2,r2,-1
 800908c:	dfc02117 	ldw	ra,132(sp)
 8009090:	df002017 	ldw	fp,128(sp)
 8009094:	ddc01f17 	ldw	r23,124(sp)
 8009098:	dd801e17 	ldw	r22,120(sp)
 800909c:	dd401d17 	ldw	r21,116(sp)
 80090a0:	dd001c17 	ldw	r20,112(sp)
 80090a4:	dcc01b17 	ldw	r19,108(sp)
 80090a8:	dc801a17 	ldw	r18,104(sp)
 80090ac:	dc401917 	ldw	r17,100(sp)
 80090b0:	dc001817 	ldw	r16,96(sp)
 80090b4:	dec02204 	addi	sp,sp,136
 80090b8:	f800283a 	ret
 80090bc:	d8c02317 	ldw	r3,140(sp)
 80090c0:	0089c3c4 	movi	r2,9999
 80090c4:	18800015 	stw	r2,0(r3)
 80090c8:	90017726 	beq	r18,zero,80096a8 <_dtoa_r+0x6dc>
 80090cc:	008200b4 	movhi	r2,2050
 80090d0:	10afb104 	addi	r2,r2,-16700
 80090d4:	d9002517 	ldw	r4,148(sp)
 80090d8:	203fec26 	beq	r4,zero,800908c <__alt_data_end+0xfc00908c>
 80090dc:	10c000c7 	ldb	r3,3(r2)
 80090e0:	1801781e 	bne	r3,zero,80096c4 <_dtoa_r+0x6f8>
 80090e4:	10c000c4 	addi	r3,r2,3
 80090e8:	d9802517 	ldw	r6,148(sp)
 80090ec:	30c00015 	stw	r3,0(r6)
 80090f0:	003fe606 	br	800908c <__alt_data_end+0xfc00908c>
 80090f4:	04e00034 	movhi	r19,32768
 80090f8:	9cffffc4 	addi	r19,r19,-1
 80090fc:	00800044 	movi	r2,1
 8009100:	8ce6703a 	and	r19,r17,r19
 8009104:	80800015 	stw	r2,0(r16)
 8009108:	9823883a 	mov	r17,r19
 800910c:	003fcc06 	br	8009040 <__alt_data_end+0xfc009040>
 8009110:	d8800204 	addi	r2,sp,8
 8009114:	d8800015 	stw	r2,0(sp)
 8009118:	d9c00104 	addi	r7,sp,4
 800911c:	900b883a 	mov	r5,r18
 8009120:	980d883a 	mov	r6,r19
 8009124:	e009883a 	mov	r4,fp
 8009128:	8820d53a 	srli	r16,r17,20
 800912c:	800c2f40 	call	800c2f4 <__d2b>
 8009130:	d8800915 	stw	r2,36(sp)
 8009134:	8001651e 	bne	r16,zero,80096cc <_dtoa_r+0x700>
 8009138:	dd800217 	ldw	r22,8(sp)
 800913c:	dc000117 	ldw	r16,4(sp)
 8009140:	00800804 	movi	r2,32
 8009144:	b421883a 	add	r16,r22,r16
 8009148:	80c10c84 	addi	r3,r16,1074
 800914c:	10c2d10e 	bge	r2,r3,8009c94 <_dtoa_r+0xcc8>
 8009150:	00801004 	movi	r2,64
 8009154:	81010484 	addi	r4,r16,1042
 8009158:	10c7c83a 	sub	r3,r2,r3
 800915c:	9108d83a 	srl	r4,r18,r4
 8009160:	88e2983a 	sll	r17,r17,r3
 8009164:	2448b03a 	or	r4,r4,r17
 8009168:	8018cb00 	call	8018cb0 <__floatunsidf>
 800916c:	017f8434 	movhi	r5,65040
 8009170:	01800044 	movi	r6,1
 8009174:	1009883a 	mov	r4,r2
 8009178:	194b883a 	add	r5,r3,r5
 800917c:	843fffc4 	addi	r16,r16,-1
 8009180:	d9801115 	stw	r6,68(sp)
 8009184:	000d883a 	mov	r6,zero
 8009188:	01cffe34 	movhi	r7,16376
 800918c:	80182580 	call	8018258 <__subdf3>
 8009190:	0198dbf4 	movhi	r6,25455
 8009194:	01cff4f4 	movhi	r7,16339
 8009198:	3190d844 	addi	r6,r6,17249
 800919c:	39e1e9c4 	addi	r7,r7,-30809
 80091a0:	1009883a 	mov	r4,r2
 80091a4:	180b883a 	mov	r5,r3
 80091a8:	80179ec0 	call	80179ec <__muldf3>
 80091ac:	01a2d874 	movhi	r6,35681
 80091b0:	01cff1f4 	movhi	r7,16327
 80091b4:	31b22cc4 	addi	r6,r6,-14157
 80091b8:	39e28a04 	addi	r7,r7,-30168
 80091bc:	180b883a 	mov	r5,r3
 80091c0:	1009883a 	mov	r4,r2
 80091c4:	80165180 	call	8016518 <__adddf3>
 80091c8:	8009883a 	mov	r4,r16
 80091cc:	1029883a 	mov	r20,r2
 80091d0:	1823883a 	mov	r17,r3
 80091d4:	8018bd40 	call	8018bd4 <__floatsidf>
 80091d8:	019427f4 	movhi	r6,20639
 80091dc:	01cff4f4 	movhi	r7,16339
 80091e0:	319e7ec4 	addi	r6,r6,31227
 80091e4:	39d104c4 	addi	r7,r7,17427
 80091e8:	1009883a 	mov	r4,r2
 80091ec:	180b883a 	mov	r5,r3
 80091f0:	80179ec0 	call	80179ec <__muldf3>
 80091f4:	100d883a 	mov	r6,r2
 80091f8:	180f883a 	mov	r7,r3
 80091fc:	a009883a 	mov	r4,r20
 8009200:	880b883a 	mov	r5,r17
 8009204:	80165180 	call	8016518 <__adddf3>
 8009208:	1009883a 	mov	r4,r2
 800920c:	180b883a 	mov	r5,r3
 8009210:	1029883a 	mov	r20,r2
 8009214:	1823883a 	mov	r17,r3
 8009218:	8018b540 	call	8018b54 <__fixdfsi>
 800921c:	000d883a 	mov	r6,zero
 8009220:	000f883a 	mov	r7,zero
 8009224:	a009883a 	mov	r4,r20
 8009228:	880b883a 	mov	r5,r17
 800922c:	d8800515 	stw	r2,20(sp)
 8009230:	80178f80 	call	80178f8 <__ledf2>
 8009234:	10028716 	blt	r2,zero,8009c54 <_dtoa_r+0xc88>
 8009238:	d8c00517 	ldw	r3,20(sp)
 800923c:	00800584 	movi	r2,22
 8009240:	10c27536 	bltu	r2,r3,8009c18 <_dtoa_r+0xc4c>
 8009244:	180490fa 	slli	r2,r3,3
 8009248:	00c200b4 	movhi	r3,2050
 800924c:	18efcc04 	addi	r3,r3,-16592
 8009250:	1885883a 	add	r2,r3,r2
 8009254:	11000017 	ldw	r4,0(r2)
 8009258:	11400117 	ldw	r5,4(r2)
 800925c:	900d883a 	mov	r6,r18
 8009260:	980f883a 	mov	r7,r19
 8009264:	801781c0 	call	801781c <__gedf2>
 8009268:	00828d0e 	bge	zero,r2,8009ca0 <_dtoa_r+0xcd4>
 800926c:	d9000517 	ldw	r4,20(sp)
 8009270:	d8000e15 	stw	zero,56(sp)
 8009274:	213fffc4 	addi	r4,r4,-1
 8009278:	d9000515 	stw	r4,20(sp)
 800927c:	b42dc83a 	sub	r22,r22,r16
 8009280:	b5bfffc4 	addi	r22,r22,-1
 8009284:	b0026f16 	blt	r22,zero,8009c44 <_dtoa_r+0xc78>
 8009288:	d8000815 	stw	zero,32(sp)
 800928c:	d9c00517 	ldw	r7,20(sp)
 8009290:	38026416 	blt	r7,zero,8009c24 <_dtoa_r+0xc58>
 8009294:	b1ed883a 	add	r22,r22,r7
 8009298:	d9c00d15 	stw	r7,52(sp)
 800929c:	d8000a15 	stw	zero,40(sp)
 80092a0:	d9800317 	ldw	r6,12(sp)
 80092a4:	00800244 	movi	r2,9
 80092a8:	11811436 	bltu	r2,r6,80096fc <_dtoa_r+0x730>
 80092ac:	00800144 	movi	r2,5
 80092b0:	1184e10e 	bge	r2,r6,800a638 <_dtoa_r+0x166c>
 80092b4:	31bfff04 	addi	r6,r6,-4
 80092b8:	d9800315 	stw	r6,12(sp)
 80092bc:	0023883a 	mov	r17,zero
 80092c0:	d9800317 	ldw	r6,12(sp)
 80092c4:	008000c4 	movi	r2,3
 80092c8:	30836726 	beq	r6,r2,800a068 <_dtoa_r+0x109c>
 80092cc:	1183410e 	bge	r2,r6,8009fd4 <_dtoa_r+0x1008>
 80092d0:	d9c00317 	ldw	r7,12(sp)
 80092d4:	00800104 	movi	r2,4
 80092d8:	38827c26 	beq	r7,r2,8009ccc <_dtoa_r+0xd00>
 80092dc:	00800144 	movi	r2,5
 80092e0:	3884c41e 	bne	r7,r2,800a5f4 <_dtoa_r+0x1628>
 80092e4:	00800044 	movi	r2,1
 80092e8:	d8800b15 	stw	r2,44(sp)
 80092ec:	d8c00517 	ldw	r3,20(sp)
 80092f0:	d9002217 	ldw	r4,136(sp)
 80092f4:	1907883a 	add	r3,r3,r4
 80092f8:	19800044 	addi	r6,r3,1
 80092fc:	d8c00c15 	stw	r3,48(sp)
 8009300:	d9800615 	stw	r6,24(sp)
 8009304:	0183a40e 	bge	zero,r6,800a198 <_dtoa_r+0x11cc>
 8009308:	d9800617 	ldw	r6,24(sp)
 800930c:	3021883a 	mov	r16,r6
 8009310:	e0001115 	stw	zero,68(fp)
 8009314:	008005c4 	movi	r2,23
 8009318:	1184c92e 	bgeu	r2,r6,800a640 <_dtoa_r+0x1674>
 800931c:	00c00044 	movi	r3,1
 8009320:	00800104 	movi	r2,4
 8009324:	1085883a 	add	r2,r2,r2
 8009328:	11000504 	addi	r4,r2,20
 800932c:	180b883a 	mov	r5,r3
 8009330:	18c00044 	addi	r3,r3,1
 8009334:	313ffb2e 	bgeu	r6,r4,8009324 <__alt_data_end+0xfc009324>
 8009338:	e1401115 	stw	r5,68(fp)
 800933c:	e009883a 	mov	r4,fp
 8009340:	800b5a40 	call	800b5a4 <_Balloc>
 8009344:	d8800715 	stw	r2,28(sp)
 8009348:	e0801015 	stw	r2,64(fp)
 800934c:	00800384 	movi	r2,14
 8009350:	1400f736 	bltu	r2,r16,8009730 <_dtoa_r+0x764>
 8009354:	8800f626 	beq	r17,zero,8009730 <_dtoa_r+0x764>
 8009358:	d9c00517 	ldw	r7,20(sp)
 800935c:	01c39a0e 	bge	zero,r7,800a1c8 <_dtoa_r+0x11fc>
 8009360:	388003cc 	andi	r2,r7,15
 8009364:	100490fa 	slli	r2,r2,3
 8009368:	382bd13a 	srai	r21,r7,4
 800936c:	00c200b4 	movhi	r3,2050
 8009370:	18efcc04 	addi	r3,r3,-16592
 8009374:	1885883a 	add	r2,r3,r2
 8009378:	a8c0040c 	andi	r3,r21,16
 800937c:	12400017 	ldw	r9,0(r2)
 8009380:	12000117 	ldw	r8,4(r2)
 8009384:	18037926 	beq	r3,zero,800a16c <_dtoa_r+0x11a0>
 8009388:	008200b4 	movhi	r2,2050
 800938c:	10afc204 	addi	r2,r2,-16632
 8009390:	11800817 	ldw	r6,32(r2)
 8009394:	11c00917 	ldw	r7,36(r2)
 8009398:	9009883a 	mov	r4,r18
 800939c:	980b883a 	mov	r5,r19
 80093a0:	da001715 	stw	r8,92(sp)
 80093a4:	da401615 	stw	r9,88(sp)
 80093a8:	8016dc40 	call	8016dc4 <__divdf3>
 80093ac:	da001717 	ldw	r8,92(sp)
 80093b0:	da401617 	ldw	r9,88(sp)
 80093b4:	ad4003cc 	andi	r21,r21,15
 80093b8:	040000c4 	movi	r16,3
 80093bc:	1023883a 	mov	r17,r2
 80093c0:	1829883a 	mov	r20,r3
 80093c4:	a8001126 	beq	r21,zero,800940c <_dtoa_r+0x440>
 80093c8:	05c200b4 	movhi	r23,2050
 80093cc:	bdefc204 	addi	r23,r23,-16632
 80093d0:	4805883a 	mov	r2,r9
 80093d4:	4007883a 	mov	r3,r8
 80093d8:	a980004c 	andi	r6,r21,1
 80093dc:	1009883a 	mov	r4,r2
 80093e0:	a82bd07a 	srai	r21,r21,1
 80093e4:	180b883a 	mov	r5,r3
 80093e8:	30000426 	beq	r6,zero,80093fc <_dtoa_r+0x430>
 80093ec:	b9800017 	ldw	r6,0(r23)
 80093f0:	b9c00117 	ldw	r7,4(r23)
 80093f4:	84000044 	addi	r16,r16,1
 80093f8:	80179ec0 	call	80179ec <__muldf3>
 80093fc:	bdc00204 	addi	r23,r23,8
 8009400:	a83ff51e 	bne	r21,zero,80093d8 <__alt_data_end+0xfc0093d8>
 8009404:	1013883a 	mov	r9,r2
 8009408:	1811883a 	mov	r8,r3
 800940c:	480d883a 	mov	r6,r9
 8009410:	400f883a 	mov	r7,r8
 8009414:	8809883a 	mov	r4,r17
 8009418:	a00b883a 	mov	r5,r20
 800941c:	8016dc40 	call	8016dc4 <__divdf3>
 8009420:	d8800f15 	stw	r2,60(sp)
 8009424:	d8c01015 	stw	r3,64(sp)
 8009428:	d8c00e17 	ldw	r3,56(sp)
 800942c:	18000626 	beq	r3,zero,8009448 <_dtoa_r+0x47c>
 8009430:	d9000f17 	ldw	r4,60(sp)
 8009434:	d9401017 	ldw	r5,64(sp)
 8009438:	000d883a 	mov	r6,zero
 800943c:	01cffc34 	movhi	r7,16368
 8009440:	80178f80 	call	80178f8 <__ledf2>
 8009444:	10040b16 	blt	r2,zero,800a474 <_dtoa_r+0x14a8>
 8009448:	8009883a 	mov	r4,r16
 800944c:	8018bd40 	call	8018bd4 <__floatsidf>
 8009450:	d9800f17 	ldw	r6,60(sp)
 8009454:	d9c01017 	ldw	r7,64(sp)
 8009458:	1009883a 	mov	r4,r2
 800945c:	180b883a 	mov	r5,r3
 8009460:	80179ec0 	call	80179ec <__muldf3>
 8009464:	000d883a 	mov	r6,zero
 8009468:	01d00734 	movhi	r7,16412
 800946c:	1009883a 	mov	r4,r2
 8009470:	180b883a 	mov	r5,r3
 8009474:	80165180 	call	8016518 <__adddf3>
 8009478:	1021883a 	mov	r16,r2
 800947c:	d8800617 	ldw	r2,24(sp)
 8009480:	047f3034 	movhi	r17,64704
 8009484:	1c63883a 	add	r17,r3,r17
 8009488:	10031826 	beq	r2,zero,800a0ec <_dtoa_r+0x1120>
 800948c:	d8c00517 	ldw	r3,20(sp)
 8009490:	db000617 	ldw	r12,24(sp)
 8009494:	d8c01315 	stw	r3,76(sp)
 8009498:	d9000b17 	ldw	r4,44(sp)
 800949c:	20038f26 	beq	r4,zero,800a2dc <_dtoa_r+0x1310>
 80094a0:	60bfffc4 	addi	r2,r12,-1
 80094a4:	100490fa 	slli	r2,r2,3
 80094a8:	00c200b4 	movhi	r3,2050
 80094ac:	18efcc04 	addi	r3,r3,-16592
 80094b0:	1885883a 	add	r2,r3,r2
 80094b4:	11800017 	ldw	r6,0(r2)
 80094b8:	11c00117 	ldw	r7,4(r2)
 80094bc:	d8800717 	ldw	r2,28(sp)
 80094c0:	0009883a 	mov	r4,zero
 80094c4:	014ff834 	movhi	r5,16352
 80094c8:	db001615 	stw	r12,88(sp)
 80094cc:	15c00044 	addi	r23,r2,1
 80094d0:	8016dc40 	call	8016dc4 <__divdf3>
 80094d4:	800d883a 	mov	r6,r16
 80094d8:	880f883a 	mov	r7,r17
 80094dc:	1009883a 	mov	r4,r2
 80094e0:	180b883a 	mov	r5,r3
 80094e4:	80182580 	call	8018258 <__subdf3>
 80094e8:	d9401017 	ldw	r5,64(sp)
 80094ec:	d9000f17 	ldw	r4,60(sp)
 80094f0:	102b883a 	mov	r21,r2
 80094f4:	d8c01215 	stw	r3,72(sp)
 80094f8:	8018b540 	call	8018b54 <__fixdfsi>
 80094fc:	1009883a 	mov	r4,r2
 8009500:	1029883a 	mov	r20,r2
 8009504:	8018bd40 	call	8018bd4 <__floatsidf>
 8009508:	d9000f17 	ldw	r4,60(sp)
 800950c:	d9401017 	ldw	r5,64(sp)
 8009510:	100d883a 	mov	r6,r2
 8009514:	180f883a 	mov	r7,r3
 8009518:	80182580 	call	8018258 <__subdf3>
 800951c:	1823883a 	mov	r17,r3
 8009520:	d8c00717 	ldw	r3,28(sp)
 8009524:	d9401217 	ldw	r5,72(sp)
 8009528:	a2000c04 	addi	r8,r20,48
 800952c:	1021883a 	mov	r16,r2
 8009530:	1a000005 	stb	r8,0(r3)
 8009534:	800d883a 	mov	r6,r16
 8009538:	880f883a 	mov	r7,r17
 800953c:	a809883a 	mov	r4,r21
 8009540:	4029883a 	mov	r20,r8
 8009544:	801781c0 	call	801781c <__gedf2>
 8009548:	00841d16 	blt	zero,r2,800a5c0 <_dtoa_r+0x15f4>
 800954c:	800d883a 	mov	r6,r16
 8009550:	880f883a 	mov	r7,r17
 8009554:	0009883a 	mov	r4,zero
 8009558:	014ffc34 	movhi	r5,16368
 800955c:	80182580 	call	8018258 <__subdf3>
 8009560:	d9401217 	ldw	r5,72(sp)
 8009564:	100d883a 	mov	r6,r2
 8009568:	180f883a 	mov	r7,r3
 800956c:	a809883a 	mov	r4,r21
 8009570:	801781c0 	call	801781c <__gedf2>
 8009574:	db001617 	ldw	r12,88(sp)
 8009578:	00840e16 	blt	zero,r2,800a5b4 <_dtoa_r+0x15e8>
 800957c:	00800044 	movi	r2,1
 8009580:	13006b0e 	bge	r2,r12,8009730 <_dtoa_r+0x764>
 8009584:	d9000717 	ldw	r4,28(sp)
 8009588:	dd800f15 	stw	r22,60(sp)
 800958c:	dcc01015 	stw	r19,64(sp)
 8009590:	2319883a 	add	r12,r4,r12
 8009594:	dcc01217 	ldw	r19,72(sp)
 8009598:	602d883a 	mov	r22,r12
 800959c:	dc801215 	stw	r18,72(sp)
 80095a0:	b825883a 	mov	r18,r23
 80095a4:	00000906 	br	80095cc <_dtoa_r+0x600>
 80095a8:	80182580 	call	8018258 <__subdf3>
 80095ac:	a80d883a 	mov	r6,r21
 80095b0:	980f883a 	mov	r7,r19
 80095b4:	1009883a 	mov	r4,r2
 80095b8:	180b883a 	mov	r5,r3
 80095bc:	80178f80 	call	80178f8 <__ledf2>
 80095c0:	1003e816 	blt	r2,zero,800a564 <_dtoa_r+0x1598>
 80095c4:	b825883a 	mov	r18,r23
 80095c8:	bd83e926 	beq	r23,r22,800a570 <_dtoa_r+0x15a4>
 80095cc:	a809883a 	mov	r4,r21
 80095d0:	980b883a 	mov	r5,r19
 80095d4:	000d883a 	mov	r6,zero
 80095d8:	01d00934 	movhi	r7,16420
 80095dc:	80179ec0 	call	80179ec <__muldf3>
 80095e0:	000d883a 	mov	r6,zero
 80095e4:	01d00934 	movhi	r7,16420
 80095e8:	8009883a 	mov	r4,r16
 80095ec:	880b883a 	mov	r5,r17
 80095f0:	102b883a 	mov	r21,r2
 80095f4:	1827883a 	mov	r19,r3
 80095f8:	80179ec0 	call	80179ec <__muldf3>
 80095fc:	180b883a 	mov	r5,r3
 8009600:	1009883a 	mov	r4,r2
 8009604:	1821883a 	mov	r16,r3
 8009608:	1023883a 	mov	r17,r2
 800960c:	8018b540 	call	8018b54 <__fixdfsi>
 8009610:	1009883a 	mov	r4,r2
 8009614:	1029883a 	mov	r20,r2
 8009618:	8018bd40 	call	8018bd4 <__floatsidf>
 800961c:	8809883a 	mov	r4,r17
 8009620:	800b883a 	mov	r5,r16
 8009624:	100d883a 	mov	r6,r2
 8009628:	180f883a 	mov	r7,r3
 800962c:	80182580 	call	8018258 <__subdf3>
 8009630:	a5000c04 	addi	r20,r20,48
 8009634:	a80d883a 	mov	r6,r21
 8009638:	980f883a 	mov	r7,r19
 800963c:	1009883a 	mov	r4,r2
 8009640:	180b883a 	mov	r5,r3
 8009644:	95000005 	stb	r20,0(r18)
 8009648:	1021883a 	mov	r16,r2
 800964c:	1823883a 	mov	r17,r3
 8009650:	80178f80 	call	80178f8 <__ledf2>
 8009654:	bdc00044 	addi	r23,r23,1
 8009658:	800d883a 	mov	r6,r16
 800965c:	880f883a 	mov	r7,r17
 8009660:	0009883a 	mov	r4,zero
 8009664:	014ffc34 	movhi	r5,16368
 8009668:	103fcf0e 	bge	r2,zero,80095a8 <__alt_data_end+0xfc0095a8>
 800966c:	d8c01317 	ldw	r3,76(sp)
 8009670:	d8c00515 	stw	r3,20(sp)
 8009674:	d9400917 	ldw	r5,36(sp)
 8009678:	e009883a 	mov	r4,fp
 800967c:	800b64c0 	call	800b64c <_Bfree>
 8009680:	d9000517 	ldw	r4,20(sp)
 8009684:	d9802317 	ldw	r6,140(sp)
 8009688:	d9c02517 	ldw	r7,148(sp)
 800968c:	b8000005 	stb	zero,0(r23)
 8009690:	20800044 	addi	r2,r4,1
 8009694:	30800015 	stw	r2,0(r6)
 8009698:	3802aa26 	beq	r7,zero,800a144 <_dtoa_r+0x1178>
 800969c:	3dc00015 	stw	r23,0(r7)
 80096a0:	d8800717 	ldw	r2,28(sp)
 80096a4:	003e7906 	br	800908c <__alt_data_end+0xfc00908c>
 80096a8:	00800434 	movhi	r2,16
 80096ac:	10bfffc4 	addi	r2,r2,-1
 80096b0:	88a2703a 	and	r17,r17,r2
 80096b4:	883e851e 	bne	r17,zero,80090cc <__alt_data_end+0xfc0090cc>
 80096b8:	008200b4 	movhi	r2,2050
 80096bc:	10afae04 	addi	r2,r2,-16712
 80096c0:	003e8406 	br	80090d4 <__alt_data_end+0xfc0090d4>
 80096c4:	10c00204 	addi	r3,r2,8
 80096c8:	003e8706 	br	80090e8 <__alt_data_end+0xfc0090e8>
 80096cc:	01400434 	movhi	r5,16
 80096d0:	297fffc4 	addi	r5,r5,-1
 80096d4:	994a703a 	and	r5,r19,r5
 80096d8:	9009883a 	mov	r4,r18
 80096dc:	843f0044 	addi	r16,r16,-1023
 80096e0:	294ffc34 	orhi	r5,r5,16368
 80096e4:	dd800217 	ldw	r22,8(sp)
 80096e8:	d8001115 	stw	zero,68(sp)
 80096ec:	003ea506 	br	8009184 <__alt_data_end+0xfc009184>
 80096f0:	008200b4 	movhi	r2,2050
 80096f4:	10aefa04 	addi	r2,r2,-17432
 80096f8:	003e6406 	br	800908c <__alt_data_end+0xfc00908c>
 80096fc:	e0001115 	stw	zero,68(fp)
 8009700:	000b883a 	mov	r5,zero
 8009704:	e009883a 	mov	r4,fp
 8009708:	800b5a40 	call	800b5a4 <_Balloc>
 800970c:	01bfffc4 	movi	r6,-1
 8009710:	01c00044 	movi	r7,1
 8009714:	d8800715 	stw	r2,28(sp)
 8009718:	d9800c15 	stw	r6,48(sp)
 800971c:	e0801015 	stw	r2,64(fp)
 8009720:	d8000315 	stw	zero,12(sp)
 8009724:	d9c00b15 	stw	r7,44(sp)
 8009728:	d9800615 	stw	r6,24(sp)
 800972c:	d8002215 	stw	zero,136(sp)
 8009730:	d8800117 	ldw	r2,4(sp)
 8009734:	10008916 	blt	r2,zero,800995c <_dtoa_r+0x990>
 8009738:	d9000517 	ldw	r4,20(sp)
 800973c:	00c00384 	movi	r3,14
 8009740:	19008616 	blt	r3,r4,800995c <_dtoa_r+0x990>
 8009744:	200490fa 	slli	r2,r4,3
 8009748:	00c200b4 	movhi	r3,2050
 800974c:	d9802217 	ldw	r6,136(sp)
 8009750:	18efcc04 	addi	r3,r3,-16592
 8009754:	1885883a 	add	r2,r3,r2
 8009758:	14000017 	ldw	r16,0(r2)
 800975c:	14400117 	ldw	r17,4(r2)
 8009760:	30016316 	blt	r6,zero,8009cf0 <_dtoa_r+0xd24>
 8009764:	800d883a 	mov	r6,r16
 8009768:	880f883a 	mov	r7,r17
 800976c:	9009883a 	mov	r4,r18
 8009770:	980b883a 	mov	r5,r19
 8009774:	8016dc40 	call	8016dc4 <__divdf3>
 8009778:	180b883a 	mov	r5,r3
 800977c:	1009883a 	mov	r4,r2
 8009780:	8018b540 	call	8018b54 <__fixdfsi>
 8009784:	1009883a 	mov	r4,r2
 8009788:	102b883a 	mov	r21,r2
 800978c:	8018bd40 	call	8018bd4 <__floatsidf>
 8009790:	800d883a 	mov	r6,r16
 8009794:	880f883a 	mov	r7,r17
 8009798:	1009883a 	mov	r4,r2
 800979c:	180b883a 	mov	r5,r3
 80097a0:	80179ec0 	call	80179ec <__muldf3>
 80097a4:	100d883a 	mov	r6,r2
 80097a8:	180f883a 	mov	r7,r3
 80097ac:	9009883a 	mov	r4,r18
 80097b0:	980b883a 	mov	r5,r19
 80097b4:	80182580 	call	8018258 <__subdf3>
 80097b8:	d9c00717 	ldw	r7,28(sp)
 80097bc:	1009883a 	mov	r4,r2
 80097c0:	a8800c04 	addi	r2,r21,48
 80097c4:	38800005 	stb	r2,0(r7)
 80097c8:	3dc00044 	addi	r23,r7,1
 80097cc:	d9c00617 	ldw	r7,24(sp)
 80097d0:	01800044 	movi	r6,1
 80097d4:	180b883a 	mov	r5,r3
 80097d8:	2005883a 	mov	r2,r4
 80097dc:	39803826 	beq	r7,r6,80098c0 <_dtoa_r+0x8f4>
 80097e0:	000d883a 	mov	r6,zero
 80097e4:	01d00934 	movhi	r7,16420
 80097e8:	80179ec0 	call	80179ec <__muldf3>
 80097ec:	000d883a 	mov	r6,zero
 80097f0:	000f883a 	mov	r7,zero
 80097f4:	1009883a 	mov	r4,r2
 80097f8:	180b883a 	mov	r5,r3
 80097fc:	1025883a 	mov	r18,r2
 8009800:	1827883a 	mov	r19,r3
 8009804:	80177940 	call	8017794 <__eqdf2>
 8009808:	103f9a26 	beq	r2,zero,8009674 <__alt_data_end+0xfc009674>
 800980c:	d9c00617 	ldw	r7,24(sp)
 8009810:	d8c00717 	ldw	r3,28(sp)
 8009814:	b829883a 	mov	r20,r23
 8009818:	38bfffc4 	addi	r2,r7,-1
 800981c:	18ad883a 	add	r22,r3,r2
 8009820:	00000a06 	br	800984c <_dtoa_r+0x880>
 8009824:	80179ec0 	call	80179ec <__muldf3>
 8009828:	000d883a 	mov	r6,zero
 800982c:	000f883a 	mov	r7,zero
 8009830:	1009883a 	mov	r4,r2
 8009834:	180b883a 	mov	r5,r3
 8009838:	1025883a 	mov	r18,r2
 800983c:	1827883a 	mov	r19,r3
 8009840:	b829883a 	mov	r20,r23
 8009844:	80177940 	call	8017794 <__eqdf2>
 8009848:	103f8a26 	beq	r2,zero,8009674 <__alt_data_end+0xfc009674>
 800984c:	800d883a 	mov	r6,r16
 8009850:	880f883a 	mov	r7,r17
 8009854:	9009883a 	mov	r4,r18
 8009858:	980b883a 	mov	r5,r19
 800985c:	8016dc40 	call	8016dc4 <__divdf3>
 8009860:	180b883a 	mov	r5,r3
 8009864:	1009883a 	mov	r4,r2
 8009868:	8018b540 	call	8018b54 <__fixdfsi>
 800986c:	1009883a 	mov	r4,r2
 8009870:	102b883a 	mov	r21,r2
 8009874:	8018bd40 	call	8018bd4 <__floatsidf>
 8009878:	800d883a 	mov	r6,r16
 800987c:	880f883a 	mov	r7,r17
 8009880:	1009883a 	mov	r4,r2
 8009884:	180b883a 	mov	r5,r3
 8009888:	80179ec0 	call	80179ec <__muldf3>
 800988c:	100d883a 	mov	r6,r2
 8009890:	180f883a 	mov	r7,r3
 8009894:	9009883a 	mov	r4,r18
 8009898:	980b883a 	mov	r5,r19
 800989c:	80182580 	call	8018258 <__subdf3>
 80098a0:	aa000c04 	addi	r8,r21,48
 80098a4:	a2000005 	stb	r8,0(r20)
 80098a8:	000d883a 	mov	r6,zero
 80098ac:	01d00934 	movhi	r7,16420
 80098b0:	1009883a 	mov	r4,r2
 80098b4:	180b883a 	mov	r5,r3
 80098b8:	a5c00044 	addi	r23,r20,1
 80098bc:	b53fd91e 	bne	r22,r20,8009824 <__alt_data_end+0xfc009824>
 80098c0:	100d883a 	mov	r6,r2
 80098c4:	180f883a 	mov	r7,r3
 80098c8:	1009883a 	mov	r4,r2
 80098cc:	180b883a 	mov	r5,r3
 80098d0:	80165180 	call	8016518 <__adddf3>
 80098d4:	100d883a 	mov	r6,r2
 80098d8:	180f883a 	mov	r7,r3
 80098dc:	8009883a 	mov	r4,r16
 80098e0:	880b883a 	mov	r5,r17
 80098e4:	1027883a 	mov	r19,r2
 80098e8:	1825883a 	mov	r18,r3
 80098ec:	80178f80 	call	80178f8 <__ledf2>
 80098f0:	10000816 	blt	r2,zero,8009914 <_dtoa_r+0x948>
 80098f4:	980d883a 	mov	r6,r19
 80098f8:	900f883a 	mov	r7,r18
 80098fc:	8009883a 	mov	r4,r16
 8009900:	880b883a 	mov	r5,r17
 8009904:	80177940 	call	8017794 <__eqdf2>
 8009908:	103f5a1e 	bne	r2,zero,8009674 <__alt_data_end+0xfc009674>
 800990c:	ad40004c 	andi	r21,r21,1
 8009910:	a83f5826 	beq	r21,zero,8009674 <__alt_data_end+0xfc009674>
 8009914:	bd3fffc3 	ldbu	r20,-1(r23)
 8009918:	b8bfffc4 	addi	r2,r23,-1
 800991c:	1007883a 	mov	r3,r2
 8009920:	01400e44 	movi	r5,57
 8009924:	d9800717 	ldw	r6,28(sp)
 8009928:	00000506 	br	8009940 <_dtoa_r+0x974>
 800992c:	18ffffc4 	addi	r3,r3,-1
 8009930:	11824726 	beq	r2,r6,800a250 <_dtoa_r+0x1284>
 8009934:	1d000003 	ldbu	r20,0(r3)
 8009938:	102f883a 	mov	r23,r2
 800993c:	10bfffc4 	addi	r2,r2,-1
 8009940:	a1003fcc 	andi	r4,r20,255
 8009944:	2100201c 	xori	r4,r4,128
 8009948:	213fe004 	addi	r4,r4,-128
 800994c:	217ff726 	beq	r4,r5,800992c <__alt_data_end+0xfc00992c>
 8009950:	a2000044 	addi	r8,r20,1
 8009954:	12000005 	stb	r8,0(r2)
 8009958:	003f4606 	br	8009674 <__alt_data_end+0xfc009674>
 800995c:	d9000b17 	ldw	r4,44(sp)
 8009960:	2000c826 	beq	r4,zero,8009c84 <_dtoa_r+0xcb8>
 8009964:	d9800317 	ldw	r6,12(sp)
 8009968:	00c00044 	movi	r3,1
 800996c:	1980f90e 	bge	r3,r6,8009d54 <_dtoa_r+0xd88>
 8009970:	d8800617 	ldw	r2,24(sp)
 8009974:	d8c00a17 	ldw	r3,40(sp)
 8009978:	157fffc4 	addi	r21,r2,-1
 800997c:	1d41f316 	blt	r3,r21,800a14c <_dtoa_r+0x1180>
 8009980:	1d6bc83a 	sub	r21,r3,r21
 8009984:	d9c00617 	ldw	r7,24(sp)
 8009988:	3802aa16 	blt	r7,zero,800a434 <_dtoa_r+0x1468>
 800998c:	dd000817 	ldw	r20,32(sp)
 8009990:	d8800617 	ldw	r2,24(sp)
 8009994:	d8c00817 	ldw	r3,32(sp)
 8009998:	01400044 	movi	r5,1
 800999c:	e009883a 	mov	r4,fp
 80099a0:	1887883a 	add	r3,r3,r2
 80099a4:	d8c00815 	stw	r3,32(sp)
 80099a8:	b0ad883a 	add	r22,r22,r2
 80099ac:	800b9d80 	call	800b9d8 <__i2b>
 80099b0:	1023883a 	mov	r17,r2
 80099b4:	a0000826 	beq	r20,zero,80099d8 <_dtoa_r+0xa0c>
 80099b8:	0580070e 	bge	zero,r22,80099d8 <_dtoa_r+0xa0c>
 80099bc:	a005883a 	mov	r2,r20
 80099c0:	b500b916 	blt	r22,r20,8009ca8 <_dtoa_r+0xcdc>
 80099c4:	d9000817 	ldw	r4,32(sp)
 80099c8:	a0a9c83a 	sub	r20,r20,r2
 80099cc:	b0adc83a 	sub	r22,r22,r2
 80099d0:	2089c83a 	sub	r4,r4,r2
 80099d4:	d9000815 	stw	r4,32(sp)
 80099d8:	d9800a17 	ldw	r6,40(sp)
 80099dc:	0181810e 	bge	zero,r6,8009fe4 <_dtoa_r+0x1018>
 80099e0:	d9c00b17 	ldw	r7,44(sp)
 80099e4:	3800b326 	beq	r7,zero,8009cb4 <_dtoa_r+0xce8>
 80099e8:	a800b226 	beq	r21,zero,8009cb4 <_dtoa_r+0xce8>
 80099ec:	880b883a 	mov	r5,r17
 80099f0:	a80d883a 	mov	r6,r21
 80099f4:	e009883a 	mov	r4,fp
 80099f8:	800bca00 	call	800bca0 <__pow5mult>
 80099fc:	d9800917 	ldw	r6,36(sp)
 8009a00:	100b883a 	mov	r5,r2
 8009a04:	e009883a 	mov	r4,fp
 8009a08:	1023883a 	mov	r17,r2
 8009a0c:	800ba140 	call	800ba14 <__multiply>
 8009a10:	1021883a 	mov	r16,r2
 8009a14:	d8800a17 	ldw	r2,40(sp)
 8009a18:	d9400917 	ldw	r5,36(sp)
 8009a1c:	e009883a 	mov	r4,fp
 8009a20:	1545c83a 	sub	r2,r2,r21
 8009a24:	d8800a15 	stw	r2,40(sp)
 8009a28:	800b64c0 	call	800b64c <_Bfree>
 8009a2c:	d8c00a17 	ldw	r3,40(sp)
 8009a30:	18009f1e 	bne	r3,zero,8009cb0 <_dtoa_r+0xce4>
 8009a34:	05c00044 	movi	r23,1
 8009a38:	e009883a 	mov	r4,fp
 8009a3c:	b80b883a 	mov	r5,r23
 8009a40:	800b9d80 	call	800b9d8 <__i2b>
 8009a44:	d9000d17 	ldw	r4,52(sp)
 8009a48:	102b883a 	mov	r21,r2
 8009a4c:	2000ce26 	beq	r4,zero,8009d88 <_dtoa_r+0xdbc>
 8009a50:	200d883a 	mov	r6,r4
 8009a54:	100b883a 	mov	r5,r2
 8009a58:	e009883a 	mov	r4,fp
 8009a5c:	800bca00 	call	800bca0 <__pow5mult>
 8009a60:	d9800317 	ldw	r6,12(sp)
 8009a64:	102b883a 	mov	r21,r2
 8009a68:	b981810e 	bge	r23,r6,800a070 <_dtoa_r+0x10a4>
 8009a6c:	0027883a 	mov	r19,zero
 8009a70:	a8800417 	ldw	r2,16(r21)
 8009a74:	05c00804 	movi	r23,32
 8009a78:	10800104 	addi	r2,r2,4
 8009a7c:	1085883a 	add	r2,r2,r2
 8009a80:	1085883a 	add	r2,r2,r2
 8009a84:	a885883a 	add	r2,r21,r2
 8009a88:	11000017 	ldw	r4,0(r2)
 8009a8c:	800b8c00 	call	800b8c0 <__hi0bits>
 8009a90:	b885c83a 	sub	r2,r23,r2
 8009a94:	1585883a 	add	r2,r2,r22
 8009a98:	108007cc 	andi	r2,r2,31
 8009a9c:	1000b326 	beq	r2,zero,8009d6c <_dtoa_r+0xda0>
 8009aa0:	00c00804 	movi	r3,32
 8009aa4:	1887c83a 	sub	r3,r3,r2
 8009aa8:	01000104 	movi	r4,4
 8009aac:	20c2cd0e 	bge	r4,r3,800a5e4 <_dtoa_r+0x1618>
 8009ab0:	00c00704 	movi	r3,28
 8009ab4:	1885c83a 	sub	r2,r3,r2
 8009ab8:	d8c00817 	ldw	r3,32(sp)
 8009abc:	a0a9883a 	add	r20,r20,r2
 8009ac0:	b0ad883a 	add	r22,r22,r2
 8009ac4:	1887883a 	add	r3,r3,r2
 8009ac8:	d8c00815 	stw	r3,32(sp)
 8009acc:	d9800817 	ldw	r6,32(sp)
 8009ad0:	0180040e 	bge	zero,r6,8009ae4 <_dtoa_r+0xb18>
 8009ad4:	800b883a 	mov	r5,r16
 8009ad8:	e009883a 	mov	r4,fp
 8009adc:	800bde00 	call	800bde0 <__lshift>
 8009ae0:	1021883a 	mov	r16,r2
 8009ae4:	0580050e 	bge	zero,r22,8009afc <_dtoa_r+0xb30>
 8009ae8:	a80b883a 	mov	r5,r21
 8009aec:	b00d883a 	mov	r6,r22
 8009af0:	e009883a 	mov	r4,fp
 8009af4:	800bde00 	call	800bde0 <__lshift>
 8009af8:	102b883a 	mov	r21,r2
 8009afc:	d9c00e17 	ldw	r7,56(sp)
 8009b00:	3801211e 	bne	r7,zero,8009f88 <_dtoa_r+0xfbc>
 8009b04:	d9800617 	ldw	r6,24(sp)
 8009b08:	0181380e 	bge	zero,r6,8009fec <_dtoa_r+0x1020>
 8009b0c:	d8c00b17 	ldw	r3,44(sp)
 8009b10:	1800ab1e 	bne	r3,zero,8009dc0 <_dtoa_r+0xdf4>
 8009b14:	dc800717 	ldw	r18,28(sp)
 8009b18:	dcc00617 	ldw	r19,24(sp)
 8009b1c:	9029883a 	mov	r20,r18
 8009b20:	00000206 	br	8009b2c <_dtoa_r+0xb60>
 8009b24:	800b6740 	call	800b674 <__multadd>
 8009b28:	1021883a 	mov	r16,r2
 8009b2c:	a80b883a 	mov	r5,r21
 8009b30:	8009883a 	mov	r4,r16
 8009b34:	8008da40 	call	8008da4 <quorem>
 8009b38:	10800c04 	addi	r2,r2,48
 8009b3c:	90800005 	stb	r2,0(r18)
 8009b40:	94800044 	addi	r18,r18,1
 8009b44:	9507c83a 	sub	r3,r18,r20
 8009b48:	000f883a 	mov	r7,zero
 8009b4c:	01800284 	movi	r6,10
 8009b50:	800b883a 	mov	r5,r16
 8009b54:	e009883a 	mov	r4,fp
 8009b58:	1cfff216 	blt	r3,r19,8009b24 <__alt_data_end+0xfc009b24>
 8009b5c:	1011883a 	mov	r8,r2
 8009b60:	d8800617 	ldw	r2,24(sp)
 8009b64:	0082370e 	bge	zero,r2,800a444 <_dtoa_r+0x1478>
 8009b68:	d9000717 	ldw	r4,28(sp)
 8009b6c:	0025883a 	mov	r18,zero
 8009b70:	20af883a 	add	r23,r4,r2
 8009b74:	01800044 	movi	r6,1
 8009b78:	800b883a 	mov	r5,r16
 8009b7c:	e009883a 	mov	r4,fp
 8009b80:	da001715 	stw	r8,92(sp)
 8009b84:	800bde00 	call	800bde0 <__lshift>
 8009b88:	a80b883a 	mov	r5,r21
 8009b8c:	1009883a 	mov	r4,r2
 8009b90:	d8800915 	stw	r2,36(sp)
 8009b94:	800bf280 	call	800bf28 <__mcmp>
 8009b98:	da001717 	ldw	r8,92(sp)
 8009b9c:	0081800e 	bge	zero,r2,800a1a0 <_dtoa_r+0x11d4>
 8009ba0:	b93fffc3 	ldbu	r4,-1(r23)
 8009ba4:	b8bfffc4 	addi	r2,r23,-1
 8009ba8:	1007883a 	mov	r3,r2
 8009bac:	01800e44 	movi	r6,57
 8009bb0:	d9c00717 	ldw	r7,28(sp)
 8009bb4:	00000506 	br	8009bcc <_dtoa_r+0xc00>
 8009bb8:	18ffffc4 	addi	r3,r3,-1
 8009bbc:	11c12326 	beq	r2,r7,800a04c <_dtoa_r+0x1080>
 8009bc0:	19000003 	ldbu	r4,0(r3)
 8009bc4:	102f883a 	mov	r23,r2
 8009bc8:	10bfffc4 	addi	r2,r2,-1
 8009bcc:	21403fcc 	andi	r5,r4,255
 8009bd0:	2940201c 	xori	r5,r5,128
 8009bd4:	297fe004 	addi	r5,r5,-128
 8009bd8:	29bff726 	beq	r5,r6,8009bb8 <__alt_data_end+0xfc009bb8>
 8009bdc:	21000044 	addi	r4,r4,1
 8009be0:	11000005 	stb	r4,0(r2)
 8009be4:	a80b883a 	mov	r5,r21
 8009be8:	e009883a 	mov	r4,fp
 8009bec:	800b64c0 	call	800b64c <_Bfree>
 8009bf0:	883ea026 	beq	r17,zero,8009674 <__alt_data_end+0xfc009674>
 8009bf4:	90000426 	beq	r18,zero,8009c08 <_dtoa_r+0xc3c>
 8009bf8:	94400326 	beq	r18,r17,8009c08 <_dtoa_r+0xc3c>
 8009bfc:	900b883a 	mov	r5,r18
 8009c00:	e009883a 	mov	r4,fp
 8009c04:	800b64c0 	call	800b64c <_Bfree>
 8009c08:	880b883a 	mov	r5,r17
 8009c0c:	e009883a 	mov	r4,fp
 8009c10:	800b64c0 	call	800b64c <_Bfree>
 8009c14:	003e9706 	br	8009674 <__alt_data_end+0xfc009674>
 8009c18:	01800044 	movi	r6,1
 8009c1c:	d9800e15 	stw	r6,56(sp)
 8009c20:	003d9606 	br	800927c <__alt_data_end+0xfc00927c>
 8009c24:	d8800817 	ldw	r2,32(sp)
 8009c28:	d8c00517 	ldw	r3,20(sp)
 8009c2c:	d8000d15 	stw	zero,52(sp)
 8009c30:	10c5c83a 	sub	r2,r2,r3
 8009c34:	00c9c83a 	sub	r4,zero,r3
 8009c38:	d8800815 	stw	r2,32(sp)
 8009c3c:	d9000a15 	stw	r4,40(sp)
 8009c40:	003d9706 	br	80092a0 <__alt_data_end+0xfc0092a0>
 8009c44:	05adc83a 	sub	r22,zero,r22
 8009c48:	dd800815 	stw	r22,32(sp)
 8009c4c:	002d883a 	mov	r22,zero
 8009c50:	003d8e06 	br	800928c <__alt_data_end+0xfc00928c>
 8009c54:	d9000517 	ldw	r4,20(sp)
 8009c58:	8018bd40 	call	8018bd4 <__floatsidf>
 8009c5c:	100d883a 	mov	r6,r2
 8009c60:	180f883a 	mov	r7,r3
 8009c64:	a009883a 	mov	r4,r20
 8009c68:	880b883a 	mov	r5,r17
 8009c6c:	80177940 	call	8017794 <__eqdf2>
 8009c70:	103d7126 	beq	r2,zero,8009238 <__alt_data_end+0xfc009238>
 8009c74:	d9c00517 	ldw	r7,20(sp)
 8009c78:	39ffffc4 	addi	r7,r7,-1
 8009c7c:	d9c00515 	stw	r7,20(sp)
 8009c80:	003d6d06 	br	8009238 <__alt_data_end+0xfc009238>
 8009c84:	dd400a17 	ldw	r21,40(sp)
 8009c88:	dd000817 	ldw	r20,32(sp)
 8009c8c:	0023883a 	mov	r17,zero
 8009c90:	003f4806 	br	80099b4 <__alt_data_end+0xfc0099b4>
 8009c94:	10e3c83a 	sub	r17,r2,r3
 8009c98:	9448983a 	sll	r4,r18,r17
 8009c9c:	003d3206 	br	8009168 <__alt_data_end+0xfc009168>
 8009ca0:	d8000e15 	stw	zero,56(sp)
 8009ca4:	003d7506 	br	800927c <__alt_data_end+0xfc00927c>
 8009ca8:	b005883a 	mov	r2,r22
 8009cac:	003f4506 	br	80099c4 <__alt_data_end+0xfc0099c4>
 8009cb0:	dc000915 	stw	r16,36(sp)
 8009cb4:	d9800a17 	ldw	r6,40(sp)
 8009cb8:	d9400917 	ldw	r5,36(sp)
 8009cbc:	e009883a 	mov	r4,fp
 8009cc0:	800bca00 	call	800bca0 <__pow5mult>
 8009cc4:	1021883a 	mov	r16,r2
 8009cc8:	003f5a06 	br	8009a34 <__alt_data_end+0xfc009a34>
 8009ccc:	01c00044 	movi	r7,1
 8009cd0:	d9c00b15 	stw	r7,44(sp)
 8009cd4:	d8802217 	ldw	r2,136(sp)
 8009cd8:	0081280e 	bge	zero,r2,800a17c <_dtoa_r+0x11b0>
 8009cdc:	100d883a 	mov	r6,r2
 8009ce0:	1021883a 	mov	r16,r2
 8009ce4:	d8800c15 	stw	r2,48(sp)
 8009ce8:	d8800615 	stw	r2,24(sp)
 8009cec:	003d8806 	br	8009310 <__alt_data_end+0xfc009310>
 8009cf0:	d8800617 	ldw	r2,24(sp)
 8009cf4:	00be9b16 	blt	zero,r2,8009764 <__alt_data_end+0xfc009764>
 8009cf8:	10010f1e 	bne	r2,zero,800a138 <_dtoa_r+0x116c>
 8009cfc:	880b883a 	mov	r5,r17
 8009d00:	000d883a 	mov	r6,zero
 8009d04:	01d00534 	movhi	r7,16404
 8009d08:	8009883a 	mov	r4,r16
 8009d0c:	80179ec0 	call	80179ec <__muldf3>
 8009d10:	900d883a 	mov	r6,r18
 8009d14:	980f883a 	mov	r7,r19
 8009d18:	1009883a 	mov	r4,r2
 8009d1c:	180b883a 	mov	r5,r3
 8009d20:	801781c0 	call	801781c <__gedf2>
 8009d24:	002b883a 	mov	r21,zero
 8009d28:	0023883a 	mov	r17,zero
 8009d2c:	1000bf16 	blt	r2,zero,800a02c <_dtoa_r+0x1060>
 8009d30:	d9802217 	ldw	r6,136(sp)
 8009d34:	ddc00717 	ldw	r23,28(sp)
 8009d38:	018c303a 	nor	r6,zero,r6
 8009d3c:	d9800515 	stw	r6,20(sp)
 8009d40:	a80b883a 	mov	r5,r21
 8009d44:	e009883a 	mov	r4,fp
 8009d48:	800b64c0 	call	800b64c <_Bfree>
 8009d4c:	883e4926 	beq	r17,zero,8009674 <__alt_data_end+0xfc009674>
 8009d50:	003fad06 	br	8009c08 <__alt_data_end+0xfc009c08>
 8009d54:	d9c01117 	ldw	r7,68(sp)
 8009d58:	3801bc26 	beq	r7,zero,800a44c <_dtoa_r+0x1480>
 8009d5c:	10810cc4 	addi	r2,r2,1075
 8009d60:	dd400a17 	ldw	r21,40(sp)
 8009d64:	dd000817 	ldw	r20,32(sp)
 8009d68:	003f0a06 	br	8009994 <__alt_data_end+0xfc009994>
 8009d6c:	00800704 	movi	r2,28
 8009d70:	d9000817 	ldw	r4,32(sp)
 8009d74:	a0a9883a 	add	r20,r20,r2
 8009d78:	b0ad883a 	add	r22,r22,r2
 8009d7c:	2089883a 	add	r4,r4,r2
 8009d80:	d9000815 	stw	r4,32(sp)
 8009d84:	003f5106 	br	8009acc <__alt_data_end+0xfc009acc>
 8009d88:	d8c00317 	ldw	r3,12(sp)
 8009d8c:	b8c1fc0e 	bge	r23,r3,800a580 <_dtoa_r+0x15b4>
 8009d90:	0027883a 	mov	r19,zero
 8009d94:	b805883a 	mov	r2,r23
 8009d98:	003f3e06 	br	8009a94 <__alt_data_end+0xfc009a94>
 8009d9c:	880b883a 	mov	r5,r17
 8009da0:	e009883a 	mov	r4,fp
 8009da4:	000f883a 	mov	r7,zero
 8009da8:	01800284 	movi	r6,10
 8009dac:	800b6740 	call	800b674 <__multadd>
 8009db0:	d9000c17 	ldw	r4,48(sp)
 8009db4:	1023883a 	mov	r17,r2
 8009db8:	0102040e 	bge	zero,r4,800a5cc <_dtoa_r+0x1600>
 8009dbc:	d9000615 	stw	r4,24(sp)
 8009dc0:	0500050e 	bge	zero,r20,8009dd8 <_dtoa_r+0xe0c>
 8009dc4:	880b883a 	mov	r5,r17
 8009dc8:	a00d883a 	mov	r6,r20
 8009dcc:	e009883a 	mov	r4,fp
 8009dd0:	800bde00 	call	800bde0 <__lshift>
 8009dd4:	1023883a 	mov	r17,r2
 8009dd8:	9801241e 	bne	r19,zero,800a26c <_dtoa_r+0x12a0>
 8009ddc:	8829883a 	mov	r20,r17
 8009de0:	d9000617 	ldw	r4,24(sp)
 8009de4:	dcc00717 	ldw	r19,28(sp)
 8009de8:	9480004c 	andi	r18,r18,1
 8009dec:	20bfffc4 	addi	r2,r4,-1
 8009df0:	9885883a 	add	r2,r19,r2
 8009df4:	d8800415 	stw	r2,16(sp)
 8009df8:	dc800615 	stw	r18,24(sp)
 8009dfc:	a80b883a 	mov	r5,r21
 8009e00:	8009883a 	mov	r4,r16
 8009e04:	8008da40 	call	8008da4 <quorem>
 8009e08:	880b883a 	mov	r5,r17
 8009e0c:	8009883a 	mov	r4,r16
 8009e10:	102f883a 	mov	r23,r2
 8009e14:	800bf280 	call	800bf28 <__mcmp>
 8009e18:	a80b883a 	mov	r5,r21
 8009e1c:	a00d883a 	mov	r6,r20
 8009e20:	e009883a 	mov	r4,fp
 8009e24:	102d883a 	mov	r22,r2
 8009e28:	800bf880 	call	800bf88 <__mdiff>
 8009e2c:	1007883a 	mov	r3,r2
 8009e30:	10800317 	ldw	r2,12(r2)
 8009e34:	bc800c04 	addi	r18,r23,48
 8009e38:	180b883a 	mov	r5,r3
 8009e3c:	10004e1e 	bne	r2,zero,8009f78 <_dtoa_r+0xfac>
 8009e40:	8009883a 	mov	r4,r16
 8009e44:	d8c01615 	stw	r3,88(sp)
 8009e48:	800bf280 	call	800bf28 <__mcmp>
 8009e4c:	d8c01617 	ldw	r3,88(sp)
 8009e50:	e009883a 	mov	r4,fp
 8009e54:	d8801615 	stw	r2,88(sp)
 8009e58:	180b883a 	mov	r5,r3
 8009e5c:	800b64c0 	call	800b64c <_Bfree>
 8009e60:	d8801617 	ldw	r2,88(sp)
 8009e64:	1000041e 	bne	r2,zero,8009e78 <_dtoa_r+0xeac>
 8009e68:	d9800317 	ldw	r6,12(sp)
 8009e6c:	3000021e 	bne	r6,zero,8009e78 <_dtoa_r+0xeac>
 8009e70:	d8c00617 	ldw	r3,24(sp)
 8009e74:	18003726 	beq	r3,zero,8009f54 <_dtoa_r+0xf88>
 8009e78:	b0002016 	blt	r22,zero,8009efc <_dtoa_r+0xf30>
 8009e7c:	b000041e 	bne	r22,zero,8009e90 <_dtoa_r+0xec4>
 8009e80:	d9000317 	ldw	r4,12(sp)
 8009e84:	2000021e 	bne	r4,zero,8009e90 <_dtoa_r+0xec4>
 8009e88:	d8c00617 	ldw	r3,24(sp)
 8009e8c:	18001b26 	beq	r3,zero,8009efc <_dtoa_r+0xf30>
 8009e90:	00810716 	blt	zero,r2,800a2b0 <_dtoa_r+0x12e4>
 8009e94:	d8c00417 	ldw	r3,16(sp)
 8009e98:	9d800044 	addi	r22,r19,1
 8009e9c:	9c800005 	stb	r18,0(r19)
 8009ea0:	b02f883a 	mov	r23,r22
 8009ea4:	98c10626 	beq	r19,r3,800a2c0 <_dtoa_r+0x12f4>
 8009ea8:	800b883a 	mov	r5,r16
 8009eac:	000f883a 	mov	r7,zero
 8009eb0:	01800284 	movi	r6,10
 8009eb4:	e009883a 	mov	r4,fp
 8009eb8:	800b6740 	call	800b674 <__multadd>
 8009ebc:	1021883a 	mov	r16,r2
 8009ec0:	000f883a 	mov	r7,zero
 8009ec4:	01800284 	movi	r6,10
 8009ec8:	880b883a 	mov	r5,r17
 8009ecc:	e009883a 	mov	r4,fp
 8009ed0:	8d002526 	beq	r17,r20,8009f68 <_dtoa_r+0xf9c>
 8009ed4:	800b6740 	call	800b674 <__multadd>
 8009ed8:	a00b883a 	mov	r5,r20
 8009edc:	000f883a 	mov	r7,zero
 8009ee0:	01800284 	movi	r6,10
 8009ee4:	e009883a 	mov	r4,fp
 8009ee8:	1023883a 	mov	r17,r2
 8009eec:	800b6740 	call	800b674 <__multadd>
 8009ef0:	1029883a 	mov	r20,r2
 8009ef4:	b027883a 	mov	r19,r22
 8009ef8:	003fc006 	br	8009dfc <__alt_data_end+0xfc009dfc>
 8009efc:	9011883a 	mov	r8,r18
 8009f00:	00800e0e 	bge	zero,r2,8009f3c <_dtoa_r+0xf70>
 8009f04:	800b883a 	mov	r5,r16
 8009f08:	01800044 	movi	r6,1
 8009f0c:	e009883a 	mov	r4,fp
 8009f10:	da001715 	stw	r8,92(sp)
 8009f14:	800bde00 	call	800bde0 <__lshift>
 8009f18:	a80b883a 	mov	r5,r21
 8009f1c:	1009883a 	mov	r4,r2
 8009f20:	1021883a 	mov	r16,r2
 8009f24:	800bf280 	call	800bf28 <__mcmp>
 8009f28:	da001717 	ldw	r8,92(sp)
 8009f2c:	0081960e 	bge	zero,r2,800a588 <_dtoa_r+0x15bc>
 8009f30:	00800e44 	movi	r2,57
 8009f34:	40817026 	beq	r8,r2,800a4f8 <_dtoa_r+0x152c>
 8009f38:	ba000c44 	addi	r8,r23,49
 8009f3c:	8825883a 	mov	r18,r17
 8009f40:	9dc00044 	addi	r23,r19,1
 8009f44:	9a000005 	stb	r8,0(r19)
 8009f48:	a023883a 	mov	r17,r20
 8009f4c:	dc000915 	stw	r16,36(sp)
 8009f50:	003f2406 	br	8009be4 <__alt_data_end+0xfc009be4>
 8009f54:	00800e44 	movi	r2,57
 8009f58:	9011883a 	mov	r8,r18
 8009f5c:	90816626 	beq	r18,r2,800a4f8 <_dtoa_r+0x152c>
 8009f60:	05bff516 	blt	zero,r22,8009f38 <__alt_data_end+0xfc009f38>
 8009f64:	003ff506 	br	8009f3c <__alt_data_end+0xfc009f3c>
 8009f68:	800b6740 	call	800b674 <__multadd>
 8009f6c:	1023883a 	mov	r17,r2
 8009f70:	1029883a 	mov	r20,r2
 8009f74:	003fdf06 	br	8009ef4 <__alt_data_end+0xfc009ef4>
 8009f78:	e009883a 	mov	r4,fp
 8009f7c:	800b64c0 	call	800b64c <_Bfree>
 8009f80:	00800044 	movi	r2,1
 8009f84:	003fbc06 	br	8009e78 <__alt_data_end+0xfc009e78>
 8009f88:	a80b883a 	mov	r5,r21
 8009f8c:	8009883a 	mov	r4,r16
 8009f90:	800bf280 	call	800bf28 <__mcmp>
 8009f94:	103edb0e 	bge	r2,zero,8009b04 <__alt_data_end+0xfc009b04>
 8009f98:	800b883a 	mov	r5,r16
 8009f9c:	000f883a 	mov	r7,zero
 8009fa0:	01800284 	movi	r6,10
 8009fa4:	e009883a 	mov	r4,fp
 8009fa8:	800b6740 	call	800b674 <__multadd>
 8009fac:	1021883a 	mov	r16,r2
 8009fb0:	d8800517 	ldw	r2,20(sp)
 8009fb4:	d8c00b17 	ldw	r3,44(sp)
 8009fb8:	10bfffc4 	addi	r2,r2,-1
 8009fbc:	d8800515 	stw	r2,20(sp)
 8009fc0:	183f761e 	bne	r3,zero,8009d9c <__alt_data_end+0xfc009d9c>
 8009fc4:	d9000c17 	ldw	r4,48(sp)
 8009fc8:	0101730e 	bge	zero,r4,800a598 <_dtoa_r+0x15cc>
 8009fcc:	d9000615 	stw	r4,24(sp)
 8009fd0:	003ed006 	br	8009b14 <__alt_data_end+0xfc009b14>
 8009fd4:	00800084 	movi	r2,2
 8009fd8:	3081861e 	bne	r6,r2,800a5f4 <_dtoa_r+0x1628>
 8009fdc:	d8000b15 	stw	zero,44(sp)
 8009fe0:	003f3c06 	br	8009cd4 <__alt_data_end+0xfc009cd4>
 8009fe4:	dc000917 	ldw	r16,36(sp)
 8009fe8:	003e9206 	br	8009a34 <__alt_data_end+0xfc009a34>
 8009fec:	d9c00317 	ldw	r7,12(sp)
 8009ff0:	00800084 	movi	r2,2
 8009ff4:	11fec50e 	bge	r2,r7,8009b0c <__alt_data_end+0xfc009b0c>
 8009ff8:	d9000617 	ldw	r4,24(sp)
 8009ffc:	20013c1e 	bne	r4,zero,800a4f0 <_dtoa_r+0x1524>
 800a000:	a80b883a 	mov	r5,r21
 800a004:	000f883a 	mov	r7,zero
 800a008:	01800144 	movi	r6,5
 800a00c:	e009883a 	mov	r4,fp
 800a010:	800b6740 	call	800b674 <__multadd>
 800a014:	100b883a 	mov	r5,r2
 800a018:	8009883a 	mov	r4,r16
 800a01c:	102b883a 	mov	r21,r2
 800a020:	800bf280 	call	800bf28 <__mcmp>
 800a024:	dc000915 	stw	r16,36(sp)
 800a028:	00bf410e 	bge	zero,r2,8009d30 <__alt_data_end+0xfc009d30>
 800a02c:	d9c00717 	ldw	r7,28(sp)
 800a030:	00800c44 	movi	r2,49
 800a034:	38800005 	stb	r2,0(r7)
 800a038:	d8800517 	ldw	r2,20(sp)
 800a03c:	3dc00044 	addi	r23,r7,1
 800a040:	10800044 	addi	r2,r2,1
 800a044:	d8800515 	stw	r2,20(sp)
 800a048:	003f3d06 	br	8009d40 <__alt_data_end+0xfc009d40>
 800a04c:	d9800517 	ldw	r6,20(sp)
 800a050:	d9c00717 	ldw	r7,28(sp)
 800a054:	00800c44 	movi	r2,49
 800a058:	31800044 	addi	r6,r6,1
 800a05c:	d9800515 	stw	r6,20(sp)
 800a060:	38800005 	stb	r2,0(r7)
 800a064:	003edf06 	br	8009be4 <__alt_data_end+0xfc009be4>
 800a068:	d8000b15 	stw	zero,44(sp)
 800a06c:	003c9f06 	br	80092ec <__alt_data_end+0xfc0092ec>
 800a070:	903e7e1e 	bne	r18,zero,8009a6c <__alt_data_end+0xfc009a6c>
 800a074:	00800434 	movhi	r2,16
 800a078:	10bfffc4 	addi	r2,r2,-1
 800a07c:	9884703a 	and	r2,r19,r2
 800a080:	1000ea1e 	bne	r2,zero,800a42c <_dtoa_r+0x1460>
 800a084:	9cdffc2c 	andhi	r19,r19,32752
 800a088:	9800e826 	beq	r19,zero,800a42c <_dtoa_r+0x1460>
 800a08c:	d9c00817 	ldw	r7,32(sp)
 800a090:	b5800044 	addi	r22,r22,1
 800a094:	04c00044 	movi	r19,1
 800a098:	39c00044 	addi	r7,r7,1
 800a09c:	d9c00815 	stw	r7,32(sp)
 800a0a0:	d8800d17 	ldw	r2,52(sp)
 800a0a4:	103e721e 	bne	r2,zero,8009a70 <__alt_data_end+0xfc009a70>
 800a0a8:	00800044 	movi	r2,1
 800a0ac:	003e7906 	br	8009a94 <__alt_data_end+0xfc009a94>
 800a0b0:	8009883a 	mov	r4,r16
 800a0b4:	8018bd40 	call	8018bd4 <__floatsidf>
 800a0b8:	d9800f17 	ldw	r6,60(sp)
 800a0bc:	d9c01017 	ldw	r7,64(sp)
 800a0c0:	1009883a 	mov	r4,r2
 800a0c4:	180b883a 	mov	r5,r3
 800a0c8:	80179ec0 	call	80179ec <__muldf3>
 800a0cc:	000d883a 	mov	r6,zero
 800a0d0:	01d00734 	movhi	r7,16412
 800a0d4:	1009883a 	mov	r4,r2
 800a0d8:	180b883a 	mov	r5,r3
 800a0dc:	80165180 	call	8016518 <__adddf3>
 800a0e0:	047f3034 	movhi	r17,64704
 800a0e4:	1021883a 	mov	r16,r2
 800a0e8:	1c63883a 	add	r17,r3,r17
 800a0ec:	d9000f17 	ldw	r4,60(sp)
 800a0f0:	d9401017 	ldw	r5,64(sp)
 800a0f4:	000d883a 	mov	r6,zero
 800a0f8:	01d00534 	movhi	r7,16404
 800a0fc:	80182580 	call	8018258 <__subdf3>
 800a100:	800d883a 	mov	r6,r16
 800a104:	880f883a 	mov	r7,r17
 800a108:	1009883a 	mov	r4,r2
 800a10c:	180b883a 	mov	r5,r3
 800a110:	102b883a 	mov	r21,r2
 800a114:	1829883a 	mov	r20,r3
 800a118:	801781c0 	call	801781c <__gedf2>
 800a11c:	00806c16 	blt	zero,r2,800a2d0 <_dtoa_r+0x1304>
 800a120:	89e0003c 	xorhi	r7,r17,32768
 800a124:	800d883a 	mov	r6,r16
 800a128:	a809883a 	mov	r4,r21
 800a12c:	a00b883a 	mov	r5,r20
 800a130:	80178f80 	call	80178f8 <__ledf2>
 800a134:	103d7e0e 	bge	r2,zero,8009730 <__alt_data_end+0xfc009730>
 800a138:	002b883a 	mov	r21,zero
 800a13c:	0023883a 	mov	r17,zero
 800a140:	003efb06 	br	8009d30 <__alt_data_end+0xfc009d30>
 800a144:	d8800717 	ldw	r2,28(sp)
 800a148:	003bd006 	br	800908c <__alt_data_end+0xfc00908c>
 800a14c:	d9000a17 	ldw	r4,40(sp)
 800a150:	d9800d17 	ldw	r6,52(sp)
 800a154:	dd400a15 	stw	r21,40(sp)
 800a158:	a905c83a 	sub	r2,r21,r4
 800a15c:	308d883a 	add	r6,r6,r2
 800a160:	d9800d15 	stw	r6,52(sp)
 800a164:	002b883a 	mov	r21,zero
 800a168:	003e0606 	br	8009984 <__alt_data_end+0xfc009984>
 800a16c:	9023883a 	mov	r17,r18
 800a170:	9829883a 	mov	r20,r19
 800a174:	04000084 	movi	r16,2
 800a178:	003c9206 	br	80093c4 <__alt_data_end+0xfc0093c4>
 800a17c:	04000044 	movi	r16,1
 800a180:	dc000c15 	stw	r16,48(sp)
 800a184:	dc000615 	stw	r16,24(sp)
 800a188:	dc002215 	stw	r16,136(sp)
 800a18c:	e0001115 	stw	zero,68(fp)
 800a190:	000b883a 	mov	r5,zero
 800a194:	003c6906 	br	800933c <__alt_data_end+0xfc00933c>
 800a198:	3021883a 	mov	r16,r6
 800a19c:	003ffb06 	br	800a18c <__alt_data_end+0xfc00a18c>
 800a1a0:	1000021e 	bne	r2,zero,800a1ac <_dtoa_r+0x11e0>
 800a1a4:	4200004c 	andi	r8,r8,1
 800a1a8:	403e7d1e 	bne	r8,zero,8009ba0 <__alt_data_end+0xfc009ba0>
 800a1ac:	01000c04 	movi	r4,48
 800a1b0:	00000106 	br	800a1b8 <_dtoa_r+0x11ec>
 800a1b4:	102f883a 	mov	r23,r2
 800a1b8:	b8bfffc4 	addi	r2,r23,-1
 800a1bc:	10c00007 	ldb	r3,0(r2)
 800a1c0:	193ffc26 	beq	r3,r4,800a1b4 <__alt_data_end+0xfc00a1b4>
 800a1c4:	003e8706 	br	8009be4 <__alt_data_end+0xfc009be4>
 800a1c8:	d8800517 	ldw	r2,20(sp)
 800a1cc:	00a3c83a 	sub	r17,zero,r2
 800a1d0:	8800a426 	beq	r17,zero,800a464 <_dtoa_r+0x1498>
 800a1d4:	888003cc 	andi	r2,r17,15
 800a1d8:	100490fa 	slli	r2,r2,3
 800a1dc:	00c200b4 	movhi	r3,2050
 800a1e0:	18efcc04 	addi	r3,r3,-16592
 800a1e4:	1885883a 	add	r2,r3,r2
 800a1e8:	11800017 	ldw	r6,0(r2)
 800a1ec:	11c00117 	ldw	r7,4(r2)
 800a1f0:	9009883a 	mov	r4,r18
 800a1f4:	980b883a 	mov	r5,r19
 800a1f8:	8823d13a 	srai	r17,r17,4
 800a1fc:	80179ec0 	call	80179ec <__muldf3>
 800a200:	d8800f15 	stw	r2,60(sp)
 800a204:	d8c01015 	stw	r3,64(sp)
 800a208:	8800e826 	beq	r17,zero,800a5ac <_dtoa_r+0x15e0>
 800a20c:	050200b4 	movhi	r20,2050
 800a210:	a52fc204 	addi	r20,r20,-16632
 800a214:	04000084 	movi	r16,2
 800a218:	8980004c 	andi	r6,r17,1
 800a21c:	1009883a 	mov	r4,r2
 800a220:	8823d07a 	srai	r17,r17,1
 800a224:	180b883a 	mov	r5,r3
 800a228:	30000426 	beq	r6,zero,800a23c <_dtoa_r+0x1270>
 800a22c:	a1800017 	ldw	r6,0(r20)
 800a230:	a1c00117 	ldw	r7,4(r20)
 800a234:	84000044 	addi	r16,r16,1
 800a238:	80179ec0 	call	80179ec <__muldf3>
 800a23c:	a5000204 	addi	r20,r20,8
 800a240:	883ff51e 	bne	r17,zero,800a218 <__alt_data_end+0xfc00a218>
 800a244:	d8800f15 	stw	r2,60(sp)
 800a248:	d8c01015 	stw	r3,64(sp)
 800a24c:	003c7606 	br	8009428 <__alt_data_end+0xfc009428>
 800a250:	00c00c04 	movi	r3,48
 800a254:	10c00005 	stb	r3,0(r2)
 800a258:	d8c00517 	ldw	r3,20(sp)
 800a25c:	bd3fffc3 	ldbu	r20,-1(r23)
 800a260:	18c00044 	addi	r3,r3,1
 800a264:	d8c00515 	stw	r3,20(sp)
 800a268:	003db906 	br	8009950 <__alt_data_end+0xfc009950>
 800a26c:	89400117 	ldw	r5,4(r17)
 800a270:	e009883a 	mov	r4,fp
 800a274:	800b5a40 	call	800b5a4 <_Balloc>
 800a278:	89800417 	ldw	r6,16(r17)
 800a27c:	89400304 	addi	r5,r17,12
 800a280:	11000304 	addi	r4,r2,12
 800a284:	31800084 	addi	r6,r6,2
 800a288:	318d883a 	add	r6,r6,r6
 800a28c:	318d883a 	add	r6,r6,r6
 800a290:	1027883a 	mov	r19,r2
 800a294:	800b3000 	call	800b300 <memcpy>
 800a298:	01800044 	movi	r6,1
 800a29c:	980b883a 	mov	r5,r19
 800a2a0:	e009883a 	mov	r4,fp
 800a2a4:	800bde00 	call	800bde0 <__lshift>
 800a2a8:	1029883a 	mov	r20,r2
 800a2ac:	003ecc06 	br	8009de0 <__alt_data_end+0xfc009de0>
 800a2b0:	00800e44 	movi	r2,57
 800a2b4:	90809026 	beq	r18,r2,800a4f8 <_dtoa_r+0x152c>
 800a2b8:	92000044 	addi	r8,r18,1
 800a2bc:	003f1f06 	br	8009f3c <__alt_data_end+0xfc009f3c>
 800a2c0:	9011883a 	mov	r8,r18
 800a2c4:	8825883a 	mov	r18,r17
 800a2c8:	a023883a 	mov	r17,r20
 800a2cc:	003e2906 	br	8009b74 <__alt_data_end+0xfc009b74>
 800a2d0:	002b883a 	mov	r21,zero
 800a2d4:	0023883a 	mov	r17,zero
 800a2d8:	003f5406 	br	800a02c <__alt_data_end+0xfc00a02c>
 800a2dc:	61bfffc4 	addi	r6,r12,-1
 800a2e0:	300490fa 	slli	r2,r6,3
 800a2e4:	00c200b4 	movhi	r3,2050
 800a2e8:	18efcc04 	addi	r3,r3,-16592
 800a2ec:	1885883a 	add	r2,r3,r2
 800a2f0:	11000017 	ldw	r4,0(r2)
 800a2f4:	11400117 	ldw	r5,4(r2)
 800a2f8:	d8800717 	ldw	r2,28(sp)
 800a2fc:	880f883a 	mov	r7,r17
 800a300:	d9801215 	stw	r6,72(sp)
 800a304:	800d883a 	mov	r6,r16
 800a308:	db001615 	stw	r12,88(sp)
 800a30c:	15c00044 	addi	r23,r2,1
 800a310:	80179ec0 	call	80179ec <__muldf3>
 800a314:	d9401017 	ldw	r5,64(sp)
 800a318:	d9000f17 	ldw	r4,60(sp)
 800a31c:	d8c01515 	stw	r3,84(sp)
 800a320:	d8801415 	stw	r2,80(sp)
 800a324:	8018b540 	call	8018b54 <__fixdfsi>
 800a328:	1009883a 	mov	r4,r2
 800a32c:	1021883a 	mov	r16,r2
 800a330:	8018bd40 	call	8018bd4 <__floatsidf>
 800a334:	d9000f17 	ldw	r4,60(sp)
 800a338:	d9401017 	ldw	r5,64(sp)
 800a33c:	100d883a 	mov	r6,r2
 800a340:	180f883a 	mov	r7,r3
 800a344:	80182580 	call	8018258 <__subdf3>
 800a348:	1829883a 	mov	r20,r3
 800a34c:	d8c00717 	ldw	r3,28(sp)
 800a350:	84000c04 	addi	r16,r16,48
 800a354:	1023883a 	mov	r17,r2
 800a358:	1c000005 	stb	r16,0(r3)
 800a35c:	db001617 	ldw	r12,88(sp)
 800a360:	00800044 	movi	r2,1
 800a364:	60802226 	beq	r12,r2,800a3f0 <_dtoa_r+0x1424>
 800a368:	d9c00717 	ldw	r7,28(sp)
 800a36c:	8805883a 	mov	r2,r17
 800a370:	b82b883a 	mov	r21,r23
 800a374:	3b19883a 	add	r12,r7,r12
 800a378:	6023883a 	mov	r17,r12
 800a37c:	a007883a 	mov	r3,r20
 800a380:	dc800f15 	stw	r18,60(sp)
 800a384:	000d883a 	mov	r6,zero
 800a388:	01d00934 	movhi	r7,16420
 800a38c:	1009883a 	mov	r4,r2
 800a390:	180b883a 	mov	r5,r3
 800a394:	80179ec0 	call	80179ec <__muldf3>
 800a398:	180b883a 	mov	r5,r3
 800a39c:	1009883a 	mov	r4,r2
 800a3a0:	1829883a 	mov	r20,r3
 800a3a4:	1025883a 	mov	r18,r2
 800a3a8:	8018b540 	call	8018b54 <__fixdfsi>
 800a3ac:	1009883a 	mov	r4,r2
 800a3b0:	1021883a 	mov	r16,r2
 800a3b4:	8018bd40 	call	8018bd4 <__floatsidf>
 800a3b8:	100d883a 	mov	r6,r2
 800a3bc:	180f883a 	mov	r7,r3
 800a3c0:	9009883a 	mov	r4,r18
 800a3c4:	a00b883a 	mov	r5,r20
 800a3c8:	84000c04 	addi	r16,r16,48
 800a3cc:	80182580 	call	8018258 <__subdf3>
 800a3d0:	ad400044 	addi	r21,r21,1
 800a3d4:	ac3fffc5 	stb	r16,-1(r21)
 800a3d8:	ac7fea1e 	bne	r21,r17,800a384 <__alt_data_end+0xfc00a384>
 800a3dc:	1023883a 	mov	r17,r2
 800a3e0:	d8801217 	ldw	r2,72(sp)
 800a3e4:	dc800f17 	ldw	r18,60(sp)
 800a3e8:	1829883a 	mov	r20,r3
 800a3ec:	b8af883a 	add	r23,r23,r2
 800a3f0:	d9001417 	ldw	r4,80(sp)
 800a3f4:	d9401517 	ldw	r5,84(sp)
 800a3f8:	000d883a 	mov	r6,zero
 800a3fc:	01cff834 	movhi	r7,16352
 800a400:	80165180 	call	8016518 <__adddf3>
 800a404:	880d883a 	mov	r6,r17
 800a408:	a00f883a 	mov	r7,r20
 800a40c:	1009883a 	mov	r4,r2
 800a410:	180b883a 	mov	r5,r3
 800a414:	80178f80 	call	80178f8 <__ledf2>
 800a418:	10003e0e 	bge	r2,zero,800a514 <_dtoa_r+0x1548>
 800a41c:	d9001317 	ldw	r4,76(sp)
 800a420:	bd3fffc3 	ldbu	r20,-1(r23)
 800a424:	d9000515 	stw	r4,20(sp)
 800a428:	003d3b06 	br	8009918 <__alt_data_end+0xfc009918>
 800a42c:	0027883a 	mov	r19,zero
 800a430:	003f1b06 	br	800a0a0 <__alt_data_end+0xfc00a0a0>
 800a434:	d8800817 	ldw	r2,32(sp)
 800a438:	11e9c83a 	sub	r20,r2,r7
 800a43c:	0005883a 	mov	r2,zero
 800a440:	003d5406 	br	8009994 <__alt_data_end+0xfc009994>
 800a444:	00800044 	movi	r2,1
 800a448:	003dc706 	br	8009b68 <__alt_data_end+0xfc009b68>
 800a44c:	d8c00217 	ldw	r3,8(sp)
 800a450:	00800d84 	movi	r2,54
 800a454:	dd400a17 	ldw	r21,40(sp)
 800a458:	10c5c83a 	sub	r2,r2,r3
 800a45c:	dd000817 	ldw	r20,32(sp)
 800a460:	003d4c06 	br	8009994 <__alt_data_end+0xfc009994>
 800a464:	dc800f15 	stw	r18,60(sp)
 800a468:	dcc01015 	stw	r19,64(sp)
 800a46c:	04000084 	movi	r16,2
 800a470:	003bed06 	br	8009428 <__alt_data_end+0xfc009428>
 800a474:	d9000617 	ldw	r4,24(sp)
 800a478:	203f0d26 	beq	r4,zero,800a0b0 <__alt_data_end+0xfc00a0b0>
 800a47c:	d9800c17 	ldw	r6,48(sp)
 800a480:	01bcab0e 	bge	zero,r6,8009730 <__alt_data_end+0xfc009730>
 800a484:	d9401017 	ldw	r5,64(sp)
 800a488:	d9000f17 	ldw	r4,60(sp)
 800a48c:	000d883a 	mov	r6,zero
 800a490:	01d00934 	movhi	r7,16420
 800a494:	80179ec0 	call	80179ec <__muldf3>
 800a498:	81000044 	addi	r4,r16,1
 800a49c:	d8800f15 	stw	r2,60(sp)
 800a4a0:	d8c01015 	stw	r3,64(sp)
 800a4a4:	8018bd40 	call	8018bd4 <__floatsidf>
 800a4a8:	d9800f17 	ldw	r6,60(sp)
 800a4ac:	d9c01017 	ldw	r7,64(sp)
 800a4b0:	1009883a 	mov	r4,r2
 800a4b4:	180b883a 	mov	r5,r3
 800a4b8:	80179ec0 	call	80179ec <__muldf3>
 800a4bc:	01d00734 	movhi	r7,16412
 800a4c0:	000d883a 	mov	r6,zero
 800a4c4:	1009883a 	mov	r4,r2
 800a4c8:	180b883a 	mov	r5,r3
 800a4cc:	80165180 	call	8016518 <__adddf3>
 800a4d0:	d9c00517 	ldw	r7,20(sp)
 800a4d4:	047f3034 	movhi	r17,64704
 800a4d8:	1021883a 	mov	r16,r2
 800a4dc:	39ffffc4 	addi	r7,r7,-1
 800a4e0:	d9c01315 	stw	r7,76(sp)
 800a4e4:	1c63883a 	add	r17,r3,r17
 800a4e8:	db000c17 	ldw	r12,48(sp)
 800a4ec:	003bea06 	br	8009498 <__alt_data_end+0xfc009498>
 800a4f0:	dc000915 	stw	r16,36(sp)
 800a4f4:	003e0e06 	br	8009d30 <__alt_data_end+0xfc009d30>
 800a4f8:	01000e44 	movi	r4,57
 800a4fc:	8825883a 	mov	r18,r17
 800a500:	9dc00044 	addi	r23,r19,1
 800a504:	99000005 	stb	r4,0(r19)
 800a508:	a023883a 	mov	r17,r20
 800a50c:	dc000915 	stw	r16,36(sp)
 800a510:	003da406 	br	8009ba4 <__alt_data_end+0xfc009ba4>
 800a514:	d9801417 	ldw	r6,80(sp)
 800a518:	d9c01517 	ldw	r7,84(sp)
 800a51c:	0009883a 	mov	r4,zero
 800a520:	014ff834 	movhi	r5,16352
 800a524:	80182580 	call	8018258 <__subdf3>
 800a528:	880d883a 	mov	r6,r17
 800a52c:	a00f883a 	mov	r7,r20
 800a530:	1009883a 	mov	r4,r2
 800a534:	180b883a 	mov	r5,r3
 800a538:	801781c0 	call	801781c <__gedf2>
 800a53c:	00bc7c0e 	bge	zero,r2,8009730 <__alt_data_end+0xfc009730>
 800a540:	01000c04 	movi	r4,48
 800a544:	00000106 	br	800a54c <_dtoa_r+0x1580>
 800a548:	102f883a 	mov	r23,r2
 800a54c:	b8bfffc4 	addi	r2,r23,-1
 800a550:	10c00007 	ldb	r3,0(r2)
 800a554:	193ffc26 	beq	r3,r4,800a548 <__alt_data_end+0xfc00a548>
 800a558:	d9801317 	ldw	r6,76(sp)
 800a55c:	d9800515 	stw	r6,20(sp)
 800a560:	003c4406 	br	8009674 <__alt_data_end+0xfc009674>
 800a564:	d9801317 	ldw	r6,76(sp)
 800a568:	d9800515 	stw	r6,20(sp)
 800a56c:	003cea06 	br	8009918 <__alt_data_end+0xfc009918>
 800a570:	dd800f17 	ldw	r22,60(sp)
 800a574:	dcc01017 	ldw	r19,64(sp)
 800a578:	dc801217 	ldw	r18,72(sp)
 800a57c:	003c6c06 	br	8009730 <__alt_data_end+0xfc009730>
 800a580:	903e031e 	bne	r18,zero,8009d90 <__alt_data_end+0xfc009d90>
 800a584:	003ebb06 	br	800a074 <__alt_data_end+0xfc00a074>
 800a588:	103e6c1e 	bne	r2,zero,8009f3c <__alt_data_end+0xfc009f3c>
 800a58c:	4080004c 	andi	r2,r8,1
 800a590:	103e6a26 	beq	r2,zero,8009f3c <__alt_data_end+0xfc009f3c>
 800a594:	003e6606 	br	8009f30 <__alt_data_end+0xfc009f30>
 800a598:	d8c00317 	ldw	r3,12(sp)
 800a59c:	00800084 	movi	r2,2
 800a5a0:	10c02916 	blt	r2,r3,800a648 <_dtoa_r+0x167c>
 800a5a4:	d9000c17 	ldw	r4,48(sp)
 800a5a8:	003e8806 	br	8009fcc <__alt_data_end+0xfc009fcc>
 800a5ac:	04000084 	movi	r16,2
 800a5b0:	003b9d06 	br	8009428 <__alt_data_end+0xfc009428>
 800a5b4:	d9001317 	ldw	r4,76(sp)
 800a5b8:	d9000515 	stw	r4,20(sp)
 800a5bc:	003cd606 	br	8009918 <__alt_data_end+0xfc009918>
 800a5c0:	d8801317 	ldw	r2,76(sp)
 800a5c4:	d8800515 	stw	r2,20(sp)
 800a5c8:	003c2a06 	br	8009674 <__alt_data_end+0xfc009674>
 800a5cc:	d9800317 	ldw	r6,12(sp)
 800a5d0:	00800084 	movi	r2,2
 800a5d4:	11801516 	blt	r2,r6,800a62c <_dtoa_r+0x1660>
 800a5d8:	d9c00c17 	ldw	r7,48(sp)
 800a5dc:	d9c00615 	stw	r7,24(sp)
 800a5e0:	003df706 	br	8009dc0 <__alt_data_end+0xfc009dc0>
 800a5e4:	193d3926 	beq	r3,r4,8009acc <__alt_data_end+0xfc009acc>
 800a5e8:	00c00f04 	movi	r3,60
 800a5ec:	1885c83a 	sub	r2,r3,r2
 800a5f0:	003ddf06 	br	8009d70 <__alt_data_end+0xfc009d70>
 800a5f4:	e009883a 	mov	r4,fp
 800a5f8:	e0001115 	stw	zero,68(fp)
 800a5fc:	000b883a 	mov	r5,zero
 800a600:	800b5a40 	call	800b5a4 <_Balloc>
 800a604:	d8800715 	stw	r2,28(sp)
 800a608:	d8c00717 	ldw	r3,28(sp)
 800a60c:	00bfffc4 	movi	r2,-1
 800a610:	01000044 	movi	r4,1
 800a614:	d8800c15 	stw	r2,48(sp)
 800a618:	e0c01015 	stw	r3,64(fp)
 800a61c:	d9000b15 	stw	r4,44(sp)
 800a620:	d8800615 	stw	r2,24(sp)
 800a624:	d8002215 	stw	zero,136(sp)
 800a628:	003c4106 	br	8009730 <__alt_data_end+0xfc009730>
 800a62c:	d8c00c17 	ldw	r3,48(sp)
 800a630:	d8c00615 	stw	r3,24(sp)
 800a634:	003e7006 	br	8009ff8 <__alt_data_end+0xfc009ff8>
 800a638:	04400044 	movi	r17,1
 800a63c:	003b2006 	br	80092c0 <__alt_data_end+0xfc0092c0>
 800a640:	000b883a 	mov	r5,zero
 800a644:	003b3d06 	br	800933c <__alt_data_end+0xfc00933c>
 800a648:	d8800c17 	ldw	r2,48(sp)
 800a64c:	d8800615 	stw	r2,24(sp)
 800a650:	003e6906 	br	8009ff8 <__alt_data_end+0xfc009ff8>

0800a654 <__sflags>:
 800a654:	28800007 	ldb	r2,0(r5)
 800a658:	00c01c84 	movi	r3,114
 800a65c:	10c02426 	beq	r2,r3,800a6f0 <__sflags+0x9c>
 800a660:	00c01dc4 	movi	r3,119
 800a664:	10c01e26 	beq	r2,r3,800a6e0 <__sflags+0x8c>
 800a668:	00c01844 	movi	r3,97
 800a66c:	10c00426 	beq	r2,r3,800a680 <__sflags+0x2c>
 800a670:	00800584 	movi	r2,22
 800a674:	20800015 	stw	r2,0(r4)
 800a678:	0005883a 	mov	r2,zero
 800a67c:	f800283a 	ret
 800a680:	02c08204 	movi	r11,520
 800a684:	01000044 	movi	r4,1
 800a688:	00804204 	movi	r2,264
 800a68c:	01c00ac4 	movi	r7,43
 800a690:	02bff8c4 	movi	r10,-29
 800a694:	027fff04 	movi	r9,-4
 800a698:	02001e04 	movi	r8,120
 800a69c:	29400044 	addi	r5,r5,1
 800a6a0:	28c00007 	ldb	r3,0(r5)
 800a6a4:	18000626 	beq	r3,zero,800a6c0 <__sflags+0x6c>
 800a6a8:	19c00826 	beq	r3,r7,800a6cc <__sflags+0x78>
 800a6ac:	1a3ffb1e 	bne	r3,r8,800a69c <__alt_data_end+0xfc00a69c>
 800a6b0:	29400044 	addi	r5,r5,1
 800a6b4:	28c00007 	ldb	r3,0(r5)
 800a6b8:	21020014 	ori	r4,r4,2048
 800a6bc:	183ffa1e 	bne	r3,zero,800a6a8 <__alt_data_end+0xfc00a6a8>
 800a6c0:	22c8b03a 	or	r4,r4,r11
 800a6c4:	31000015 	stw	r4,0(r6)
 800a6c8:	f800283a 	ret
 800a6cc:	1284703a 	and	r2,r2,r10
 800a6d0:	2248703a 	and	r4,r4,r9
 800a6d4:	10800414 	ori	r2,r2,16
 800a6d8:	21000094 	ori	r4,r4,2
 800a6dc:	003fef06 	br	800a69c <__alt_data_end+0xfc00a69c>
 800a6e0:	02c18004 	movi	r11,1536
 800a6e4:	01000044 	movi	r4,1
 800a6e8:	00800204 	movi	r2,8
 800a6ec:	003fe706 	br	800a68c <__alt_data_end+0xfc00a68c>
 800a6f0:	0017883a 	mov	r11,zero
 800a6f4:	0009883a 	mov	r4,zero
 800a6f8:	00800104 	movi	r2,4
 800a6fc:	003fe306 	br	800a68c <__alt_data_end+0xfc00a68c>

0800a700 <_fread_r>:
 800a700:	defff404 	addi	sp,sp,-48
 800a704:	dd000615 	stw	r20,24(sp)
 800a708:	dcc00515 	stw	r19,20(sp)
 800a70c:	2029883a 	mov	r20,r4
 800a710:	2827883a 	mov	r19,r5
 800a714:	3809883a 	mov	r4,r7
 800a718:	300b883a 	mov	r5,r6
 800a71c:	ddc00915 	stw	r23,36(sp)
 800a720:	dd400715 	stw	r21,28(sp)
 800a724:	dc000215 	stw	r16,8(sp)
 800a728:	dfc00b15 	stw	ra,44(sp)
 800a72c:	df000a15 	stw	fp,40(sp)
 800a730:	dd800815 	stw	r22,32(sp)
 800a734:	dc800415 	stw	r18,16(sp)
 800a738:	dc400315 	stw	r17,12(sp)
 800a73c:	302f883a 	mov	r23,r6
 800a740:	382b883a 	mov	r21,r7
 800a744:	80028f40 	call	80028f4 <__mulsi3>
 800a748:	dc000c17 	ldw	r16,48(sp)
 800a74c:	10003826 	beq	r2,zero,800a830 <_fread_r+0x130>
 800a750:	102d883a 	mov	r22,r2
 800a754:	a0000226 	beq	r20,zero,800a760 <_fread_r+0x60>
 800a758:	a0800e17 	ldw	r2,56(r20)
 800a75c:	10006e26 	beq	r2,zero,800a918 <_fread_r+0x218>
 800a760:	8080030b 	ldhu	r2,12(r16)
 800a764:	10c8000c 	andi	r3,r2,8192
 800a768:	1800061e 	bne	r3,zero,800a784 <_fread_r+0x84>
 800a76c:	81001917 	ldw	r4,100(r16)
 800a770:	00f7ffc4 	movi	r3,-8193
 800a774:	10880014 	ori	r2,r2,8192
 800a778:	20c6703a 	and	r3,r4,r3
 800a77c:	8080030d 	sth	r2,12(r16)
 800a780:	80c01915 	stw	r3,100(r16)
 800a784:	84400117 	ldw	r17,4(r16)
 800a788:	88005f16 	blt	r17,zero,800a908 <_fread_r+0x208>
 800a78c:	8809883a 	mov	r4,r17
 800a790:	1080008c 	andi	r2,r2,2
 800a794:	1000281e 	bne	r2,zero,800a838 <_fread_r+0x138>
 800a798:	b025883a 	mov	r18,r22
 800a79c:	00000b06 	br	800a7cc <_fread_r+0xcc>
 800a7a0:	800b3000 	call	800b300 <memcpy>
 800a7a4:	80800017 	ldw	r2,0(r16)
 800a7a8:	9c67883a 	add	r19,r19,r17
 800a7ac:	9465c83a 	sub	r18,r18,r17
 800a7b0:	1463883a 	add	r17,r2,r17
 800a7b4:	800b883a 	mov	r5,r16
 800a7b8:	a009883a 	mov	r4,r20
 800a7bc:	84400015 	stw	r17,0(r16)
 800a7c0:	80049240 	call	8004924 <__srefill_r>
 800a7c4:	10004c1e 	bne	r2,zero,800a8f8 <_fread_r+0x1f8>
 800a7c8:	84400117 	ldw	r17,4(r16)
 800a7cc:	880d883a 	mov	r6,r17
 800a7d0:	9809883a 	mov	r4,r19
 800a7d4:	81400017 	ldw	r5,0(r16)
 800a7d8:	8cbff136 	bltu	r17,r18,800a7a0 <__alt_data_end+0xfc00a7a0>
 800a7dc:	900d883a 	mov	r6,r18
 800a7e0:	800b3000 	call	800b300 <memcpy>
 800a7e4:	80c00117 	ldw	r3,4(r16)
 800a7e8:	81000017 	ldw	r4,0(r16)
 800a7ec:	a805883a 	mov	r2,r21
 800a7f0:	1c87c83a 	sub	r3,r3,r18
 800a7f4:	24a5883a 	add	r18,r4,r18
 800a7f8:	80c00115 	stw	r3,4(r16)
 800a7fc:	84800015 	stw	r18,0(r16)
 800a800:	dfc00b17 	ldw	ra,44(sp)
 800a804:	df000a17 	ldw	fp,40(sp)
 800a808:	ddc00917 	ldw	r23,36(sp)
 800a80c:	dd800817 	ldw	r22,32(sp)
 800a810:	dd400717 	ldw	r21,28(sp)
 800a814:	dd000617 	ldw	r20,24(sp)
 800a818:	dcc00517 	ldw	r19,20(sp)
 800a81c:	dc800417 	ldw	r18,16(sp)
 800a820:	dc400317 	ldw	r17,12(sp)
 800a824:	dc000217 	ldw	r16,8(sp)
 800a828:	dec00c04 	addi	sp,sp,48
 800a82c:	f800283a 	ret
 800a830:	0005883a 	mov	r2,zero
 800a834:	003ff206 	br	800a800 <__alt_data_end+0xfc00a800>
 800a838:	b007883a 	mov	r3,r22
 800a83c:	2580012e 	bgeu	r4,r22,800a844 <_fread_r+0x144>
 800a840:	2007883a 	mov	r3,r4
 800a844:	81400017 	ldw	r5,0(r16)
 800a848:	180d883a 	mov	r6,r3
 800a84c:	9809883a 	mov	r4,r19
 800a850:	d8c00115 	stw	r3,4(sp)
 800a854:	800b3000 	call	800b300 <memcpy>
 800a858:	d8c00117 	ldw	r3,4(sp)
 800a85c:	84400017 	ldw	r17,0(r16)
 800a860:	80800117 	ldw	r2,4(r16)
 800a864:	81400c17 	ldw	r5,48(r16)
 800a868:	88e3883a 	add	r17,r17,r3
 800a86c:	10c5c83a 	sub	r2,r2,r3
 800a870:	84400015 	stw	r17,0(r16)
 800a874:	80800115 	stw	r2,4(r16)
 800a878:	b0e5c83a 	sub	r18,r22,r3
 800a87c:	28002c26 	beq	r5,zero,800a930 <_fread_r+0x230>
 800a880:	90002c26 	beq	r18,zero,800a934 <_fread_r+0x234>
 800a884:	80801004 	addi	r2,r16,64
 800a888:	28800526 	beq	r5,r2,800a8a0 <_fread_r+0x1a0>
 800a88c:	a009883a 	mov	r4,r20
 800a890:	d8c00115 	stw	r3,4(sp)
 800a894:	80032a80 	call	80032a8 <_free_r>
 800a898:	d8c00117 	ldw	r3,4(sp)
 800a89c:	84400017 	ldw	r17,0(r16)
 800a8a0:	80000c15 	stw	zero,48(r16)
 800a8a4:	80800517 	ldw	r2,20(r16)
 800a8a8:	87000417 	ldw	fp,16(r16)
 800a8ac:	98e7883a 	add	r19,r19,r3
 800a8b0:	d8800015 	stw	r2,0(sp)
 800a8b4:	00000106 	br	800a8bc <_fread_r+0x1bc>
 800a8b8:	90001e26 	beq	r18,zero,800a934 <_fread_r+0x234>
 800a8bc:	84c00415 	stw	r19,16(r16)
 800a8c0:	84800515 	stw	r18,20(r16)
 800a8c4:	84c00015 	stw	r19,0(r16)
 800a8c8:	a009883a 	mov	r4,r20
 800a8cc:	800b883a 	mov	r5,r16
 800a8d0:	80049240 	call	8004924 <__srefill_r>
 800a8d4:	d9000017 	ldw	r4,0(sp)
 800a8d8:	80c00117 	ldw	r3,4(r16)
 800a8dc:	87000415 	stw	fp,16(r16)
 800a8e0:	81000515 	stw	r4,20(r16)
 800a8e4:	84400015 	stw	r17,0(r16)
 800a8e8:	80000115 	stw	zero,4(r16)
 800a8ec:	90e5c83a 	sub	r18,r18,r3
 800a8f0:	98e7883a 	add	r19,r19,r3
 800a8f4:	103ff026 	beq	r2,zero,800a8b8 <__alt_data_end+0xfc00a8b8>
 800a8f8:	b80b883a 	mov	r5,r23
 800a8fc:	b489c83a 	sub	r4,r22,r18
 800a900:	80028380 	call	8002838 <__udivsi3>
 800a904:	003fbe06 	br	800a800 <__alt_data_end+0xfc00a800>
 800a908:	80000115 	stw	zero,4(r16)
 800a90c:	0009883a 	mov	r4,zero
 800a910:	0023883a 	mov	r17,zero
 800a914:	003f9e06 	br	800a790 <__alt_data_end+0xfc00a790>
 800a918:	a009883a 	mov	r4,r20
 800a91c:	80030280 	call	8003028 <__sinit>
 800a920:	8080030b 	ldhu	r2,12(r16)
 800a924:	10c8000c 	andi	r3,r2,8192
 800a928:	183f961e 	bne	r3,zero,800a784 <__alt_data_end+0xfc00a784>
 800a92c:	003f8f06 	br	800a76c <__alt_data_end+0xfc00a76c>
 800a930:	903fdc1e 	bne	r18,zero,800a8a4 <__alt_data_end+0xfc00a8a4>
 800a934:	a805883a 	mov	r2,r21
 800a938:	003fb106 	br	800a800 <__alt_data_end+0xfc00a800>

0800a93c <fread>:
 800a93c:	defffe04 	addi	sp,sp,-8
 800a940:	008200b4 	movhi	r2,2050
 800a944:	d9c00015 	stw	r7,0(sp)
 800a948:	10b77404 	addi	r2,r2,-8752
 800a94c:	300f883a 	mov	r7,r6
 800a950:	280d883a 	mov	r6,r5
 800a954:	200b883a 	mov	r5,r4
 800a958:	11000017 	ldw	r4,0(r2)
 800a95c:	dfc00115 	stw	ra,4(sp)
 800a960:	800a7000 	call	800a700 <_fread_r>
 800a964:	dfc00117 	ldw	ra,4(sp)
 800a968:	dec00204 	addi	sp,sp,8
 800a96c:	f800283a 	ret

0800a970 <__sfvwrite_r>:
 800a970:	30800217 	ldw	r2,8(r6)
 800a974:	10006726 	beq	r2,zero,800ab14 <__sfvwrite_r+0x1a4>
 800a978:	28c0030b 	ldhu	r3,12(r5)
 800a97c:	defff404 	addi	sp,sp,-48
 800a980:	dd400715 	stw	r21,28(sp)
 800a984:	dd000615 	stw	r20,24(sp)
 800a988:	dc000215 	stw	r16,8(sp)
 800a98c:	dfc00b15 	stw	ra,44(sp)
 800a990:	df000a15 	stw	fp,40(sp)
 800a994:	ddc00915 	stw	r23,36(sp)
 800a998:	dd800815 	stw	r22,32(sp)
 800a99c:	dcc00515 	stw	r19,20(sp)
 800a9a0:	dc800415 	stw	r18,16(sp)
 800a9a4:	dc400315 	stw	r17,12(sp)
 800a9a8:	1880020c 	andi	r2,r3,8
 800a9ac:	2821883a 	mov	r16,r5
 800a9b0:	202b883a 	mov	r21,r4
 800a9b4:	3029883a 	mov	r20,r6
 800a9b8:	10002726 	beq	r2,zero,800aa58 <__sfvwrite_r+0xe8>
 800a9bc:	28800417 	ldw	r2,16(r5)
 800a9c0:	10002526 	beq	r2,zero,800aa58 <__sfvwrite_r+0xe8>
 800a9c4:	1880008c 	andi	r2,r3,2
 800a9c8:	a4400017 	ldw	r17,0(r20)
 800a9cc:	10002a26 	beq	r2,zero,800aa78 <__sfvwrite_r+0x108>
 800a9d0:	05a00034 	movhi	r22,32768
 800a9d4:	0027883a 	mov	r19,zero
 800a9d8:	0025883a 	mov	r18,zero
 800a9dc:	b5bf0004 	addi	r22,r22,-1024
 800a9e0:	980d883a 	mov	r6,r19
 800a9e4:	a809883a 	mov	r4,r21
 800a9e8:	90004626 	beq	r18,zero,800ab04 <__sfvwrite_r+0x194>
 800a9ec:	900f883a 	mov	r7,r18
 800a9f0:	b480022e 	bgeu	r22,r18,800a9fc <__sfvwrite_r+0x8c>
 800a9f4:	01e00034 	movhi	r7,32768
 800a9f8:	39ff0004 	addi	r7,r7,-1024
 800a9fc:	80800917 	ldw	r2,36(r16)
 800aa00:	81400717 	ldw	r5,28(r16)
 800aa04:	103ee83a 	callr	r2
 800aa08:	00805a0e 	bge	zero,r2,800ab74 <__sfvwrite_r+0x204>
 800aa0c:	a0c00217 	ldw	r3,8(r20)
 800aa10:	98a7883a 	add	r19,r19,r2
 800aa14:	90a5c83a 	sub	r18,r18,r2
 800aa18:	1885c83a 	sub	r2,r3,r2
 800aa1c:	a0800215 	stw	r2,8(r20)
 800aa20:	103fef1e 	bne	r2,zero,800a9e0 <__alt_data_end+0xfc00a9e0>
 800aa24:	0005883a 	mov	r2,zero
 800aa28:	dfc00b17 	ldw	ra,44(sp)
 800aa2c:	df000a17 	ldw	fp,40(sp)
 800aa30:	ddc00917 	ldw	r23,36(sp)
 800aa34:	dd800817 	ldw	r22,32(sp)
 800aa38:	dd400717 	ldw	r21,28(sp)
 800aa3c:	dd000617 	ldw	r20,24(sp)
 800aa40:	dcc00517 	ldw	r19,20(sp)
 800aa44:	dc800417 	ldw	r18,16(sp)
 800aa48:	dc400317 	ldw	r17,12(sp)
 800aa4c:	dc000217 	ldw	r16,8(sp)
 800aa50:	dec00c04 	addi	sp,sp,48
 800aa54:	f800283a 	ret
 800aa58:	800b883a 	mov	r5,r16
 800aa5c:	a809883a 	mov	r4,r21
 800aa60:	8008bfc0 	call	8008bfc <__swsetup_r>
 800aa64:	1000ee1e 	bne	r2,zero,800ae20 <__sfvwrite_r+0x4b0>
 800aa68:	80c0030b 	ldhu	r3,12(r16)
 800aa6c:	a4400017 	ldw	r17,0(r20)
 800aa70:	1880008c 	andi	r2,r3,2
 800aa74:	103fd61e 	bne	r2,zero,800a9d0 <__alt_data_end+0xfc00a9d0>
 800aa78:	1880004c 	andi	r2,r3,1
 800aa7c:	1000421e 	bne	r2,zero,800ab88 <__sfvwrite_r+0x218>
 800aa80:	0039883a 	mov	fp,zero
 800aa84:	0025883a 	mov	r18,zero
 800aa88:	90001a26 	beq	r18,zero,800aaf4 <__sfvwrite_r+0x184>
 800aa8c:	1880800c 	andi	r2,r3,512
 800aa90:	84c00217 	ldw	r19,8(r16)
 800aa94:	10002126 	beq	r2,zero,800ab1c <__sfvwrite_r+0x1ac>
 800aa98:	982f883a 	mov	r23,r19
 800aa9c:	94c09636 	bltu	r18,r19,800acf8 <__sfvwrite_r+0x388>
 800aaa0:	1881200c 	andi	r2,r3,1152
 800aaa4:	1000a11e 	bne	r2,zero,800ad2c <__sfvwrite_r+0x3bc>
 800aaa8:	81000017 	ldw	r4,0(r16)
 800aaac:	b80d883a 	mov	r6,r23
 800aab0:	e00b883a 	mov	r5,fp
 800aab4:	800b4480 	call	800b448 <memmove>
 800aab8:	80c00217 	ldw	r3,8(r16)
 800aabc:	81000017 	ldw	r4,0(r16)
 800aac0:	9005883a 	mov	r2,r18
 800aac4:	1ce7c83a 	sub	r19,r3,r19
 800aac8:	25cf883a 	add	r7,r4,r23
 800aacc:	84c00215 	stw	r19,8(r16)
 800aad0:	81c00015 	stw	r7,0(r16)
 800aad4:	a0c00217 	ldw	r3,8(r20)
 800aad8:	e0b9883a 	add	fp,fp,r2
 800aadc:	90a5c83a 	sub	r18,r18,r2
 800aae0:	18a7c83a 	sub	r19,r3,r2
 800aae4:	a4c00215 	stw	r19,8(r20)
 800aae8:	983fce26 	beq	r19,zero,800aa24 <__alt_data_end+0xfc00aa24>
 800aaec:	80c0030b 	ldhu	r3,12(r16)
 800aaf0:	903fe61e 	bne	r18,zero,800aa8c <__alt_data_end+0xfc00aa8c>
 800aaf4:	8f000017 	ldw	fp,0(r17)
 800aaf8:	8c800117 	ldw	r18,4(r17)
 800aafc:	8c400204 	addi	r17,r17,8
 800ab00:	003fe106 	br	800aa88 <__alt_data_end+0xfc00aa88>
 800ab04:	8cc00017 	ldw	r19,0(r17)
 800ab08:	8c800117 	ldw	r18,4(r17)
 800ab0c:	8c400204 	addi	r17,r17,8
 800ab10:	003fb306 	br	800a9e0 <__alt_data_end+0xfc00a9e0>
 800ab14:	0005883a 	mov	r2,zero
 800ab18:	f800283a 	ret
 800ab1c:	81000017 	ldw	r4,0(r16)
 800ab20:	80800417 	ldw	r2,16(r16)
 800ab24:	11005a36 	bltu	r2,r4,800ac90 <__sfvwrite_r+0x320>
 800ab28:	85c00517 	ldw	r23,20(r16)
 800ab2c:	95c05836 	bltu	r18,r23,800ac90 <__sfvwrite_r+0x320>
 800ab30:	00a00034 	movhi	r2,32768
 800ab34:	10bfffc4 	addi	r2,r2,-1
 800ab38:	9009883a 	mov	r4,r18
 800ab3c:	1480012e 	bgeu	r2,r18,800ab44 <__sfvwrite_r+0x1d4>
 800ab40:	1009883a 	mov	r4,r2
 800ab44:	b80b883a 	mov	r5,r23
 800ab48:	80027400 	call	8002740 <__divsi3>
 800ab4c:	b80b883a 	mov	r5,r23
 800ab50:	1009883a 	mov	r4,r2
 800ab54:	80028f40 	call	80028f4 <__mulsi3>
 800ab58:	81400717 	ldw	r5,28(r16)
 800ab5c:	80c00917 	ldw	r3,36(r16)
 800ab60:	100f883a 	mov	r7,r2
 800ab64:	e00d883a 	mov	r6,fp
 800ab68:	a809883a 	mov	r4,r21
 800ab6c:	183ee83a 	callr	r3
 800ab70:	00bfd816 	blt	zero,r2,800aad4 <__alt_data_end+0xfc00aad4>
 800ab74:	8080030b 	ldhu	r2,12(r16)
 800ab78:	10801014 	ori	r2,r2,64
 800ab7c:	8080030d 	sth	r2,12(r16)
 800ab80:	00bfffc4 	movi	r2,-1
 800ab84:	003fa806 	br	800aa28 <__alt_data_end+0xfc00aa28>
 800ab88:	0027883a 	mov	r19,zero
 800ab8c:	0011883a 	mov	r8,zero
 800ab90:	0039883a 	mov	fp,zero
 800ab94:	0025883a 	mov	r18,zero
 800ab98:	90001f26 	beq	r18,zero,800ac18 <__sfvwrite_r+0x2a8>
 800ab9c:	40005a26 	beq	r8,zero,800ad08 <__sfvwrite_r+0x398>
 800aba0:	982d883a 	mov	r22,r19
 800aba4:	94c0012e 	bgeu	r18,r19,800abac <__sfvwrite_r+0x23c>
 800aba8:	902d883a 	mov	r22,r18
 800abac:	81000017 	ldw	r4,0(r16)
 800abb0:	80800417 	ldw	r2,16(r16)
 800abb4:	b02f883a 	mov	r23,r22
 800abb8:	81c00517 	ldw	r7,20(r16)
 800abbc:	1100032e 	bgeu	r2,r4,800abcc <__sfvwrite_r+0x25c>
 800abc0:	80c00217 	ldw	r3,8(r16)
 800abc4:	38c7883a 	add	r3,r7,r3
 800abc8:	1d801816 	blt	r3,r22,800ac2c <__sfvwrite_r+0x2bc>
 800abcc:	b1c03e16 	blt	r22,r7,800acc8 <__sfvwrite_r+0x358>
 800abd0:	80800917 	ldw	r2,36(r16)
 800abd4:	81400717 	ldw	r5,28(r16)
 800abd8:	e00d883a 	mov	r6,fp
 800abdc:	da000115 	stw	r8,4(sp)
 800abe0:	a809883a 	mov	r4,r21
 800abe4:	103ee83a 	callr	r2
 800abe8:	102f883a 	mov	r23,r2
 800abec:	da000117 	ldw	r8,4(sp)
 800abf0:	00bfe00e 	bge	zero,r2,800ab74 <__alt_data_end+0xfc00ab74>
 800abf4:	9de7c83a 	sub	r19,r19,r23
 800abf8:	98001f26 	beq	r19,zero,800ac78 <__sfvwrite_r+0x308>
 800abfc:	a0800217 	ldw	r2,8(r20)
 800ac00:	e5f9883a 	add	fp,fp,r23
 800ac04:	95e5c83a 	sub	r18,r18,r23
 800ac08:	15efc83a 	sub	r23,r2,r23
 800ac0c:	a5c00215 	stw	r23,8(r20)
 800ac10:	b83f8426 	beq	r23,zero,800aa24 <__alt_data_end+0xfc00aa24>
 800ac14:	903fe11e 	bne	r18,zero,800ab9c <__alt_data_end+0xfc00ab9c>
 800ac18:	8f000017 	ldw	fp,0(r17)
 800ac1c:	8c800117 	ldw	r18,4(r17)
 800ac20:	0011883a 	mov	r8,zero
 800ac24:	8c400204 	addi	r17,r17,8
 800ac28:	003fdb06 	br	800ab98 <__alt_data_end+0xfc00ab98>
 800ac2c:	180d883a 	mov	r6,r3
 800ac30:	e00b883a 	mov	r5,fp
 800ac34:	da000115 	stw	r8,4(sp)
 800ac38:	d8c00015 	stw	r3,0(sp)
 800ac3c:	800b4480 	call	800b448 <memmove>
 800ac40:	d8c00017 	ldw	r3,0(sp)
 800ac44:	80800017 	ldw	r2,0(r16)
 800ac48:	800b883a 	mov	r5,r16
 800ac4c:	a809883a 	mov	r4,r21
 800ac50:	10c5883a 	add	r2,r2,r3
 800ac54:	80800015 	stw	r2,0(r16)
 800ac58:	d8c00015 	stw	r3,0(sp)
 800ac5c:	8002c3c0 	call	8002c3c <_fflush_r>
 800ac60:	d8c00017 	ldw	r3,0(sp)
 800ac64:	da000117 	ldw	r8,4(sp)
 800ac68:	103fc21e 	bne	r2,zero,800ab74 <__alt_data_end+0xfc00ab74>
 800ac6c:	182f883a 	mov	r23,r3
 800ac70:	9de7c83a 	sub	r19,r19,r23
 800ac74:	983fe11e 	bne	r19,zero,800abfc <__alt_data_end+0xfc00abfc>
 800ac78:	800b883a 	mov	r5,r16
 800ac7c:	a809883a 	mov	r4,r21
 800ac80:	8002c3c0 	call	8002c3c <_fflush_r>
 800ac84:	103fbb1e 	bne	r2,zero,800ab74 <__alt_data_end+0xfc00ab74>
 800ac88:	0011883a 	mov	r8,zero
 800ac8c:	003fdb06 	br	800abfc <__alt_data_end+0xfc00abfc>
 800ac90:	94c0012e 	bgeu	r18,r19,800ac98 <__sfvwrite_r+0x328>
 800ac94:	9027883a 	mov	r19,r18
 800ac98:	980d883a 	mov	r6,r19
 800ac9c:	e00b883a 	mov	r5,fp
 800aca0:	800b4480 	call	800b448 <memmove>
 800aca4:	80800217 	ldw	r2,8(r16)
 800aca8:	80c00017 	ldw	r3,0(r16)
 800acac:	14c5c83a 	sub	r2,r2,r19
 800acb0:	1cc7883a 	add	r3,r3,r19
 800acb4:	80800215 	stw	r2,8(r16)
 800acb8:	80c00015 	stw	r3,0(r16)
 800acbc:	10004326 	beq	r2,zero,800adcc <__sfvwrite_r+0x45c>
 800acc0:	9805883a 	mov	r2,r19
 800acc4:	003f8306 	br	800aad4 <__alt_data_end+0xfc00aad4>
 800acc8:	b00d883a 	mov	r6,r22
 800accc:	e00b883a 	mov	r5,fp
 800acd0:	da000115 	stw	r8,4(sp)
 800acd4:	800b4480 	call	800b448 <memmove>
 800acd8:	80800217 	ldw	r2,8(r16)
 800acdc:	80c00017 	ldw	r3,0(r16)
 800ace0:	da000117 	ldw	r8,4(sp)
 800ace4:	1585c83a 	sub	r2,r2,r22
 800ace8:	1dad883a 	add	r22,r3,r22
 800acec:	80800215 	stw	r2,8(r16)
 800acf0:	85800015 	stw	r22,0(r16)
 800acf4:	003fbf06 	br	800abf4 <__alt_data_end+0xfc00abf4>
 800acf8:	81000017 	ldw	r4,0(r16)
 800acfc:	9027883a 	mov	r19,r18
 800ad00:	902f883a 	mov	r23,r18
 800ad04:	003f6906 	br	800aaac <__alt_data_end+0xfc00aaac>
 800ad08:	900d883a 	mov	r6,r18
 800ad0c:	01400284 	movi	r5,10
 800ad10:	e009883a 	mov	r4,fp
 800ad14:	800b21c0 	call	800b21c <memchr>
 800ad18:	10003e26 	beq	r2,zero,800ae14 <__sfvwrite_r+0x4a4>
 800ad1c:	10800044 	addi	r2,r2,1
 800ad20:	1727c83a 	sub	r19,r2,fp
 800ad24:	02000044 	movi	r8,1
 800ad28:	003f9d06 	br	800aba0 <__alt_data_end+0xfc00aba0>
 800ad2c:	80800517 	ldw	r2,20(r16)
 800ad30:	81400417 	ldw	r5,16(r16)
 800ad34:	81c00017 	ldw	r7,0(r16)
 800ad38:	10a7883a 	add	r19,r2,r2
 800ad3c:	9885883a 	add	r2,r19,r2
 800ad40:	1026d7fa 	srli	r19,r2,31
 800ad44:	396dc83a 	sub	r22,r7,r5
 800ad48:	b1000044 	addi	r4,r22,1
 800ad4c:	9885883a 	add	r2,r19,r2
 800ad50:	1027d07a 	srai	r19,r2,1
 800ad54:	2485883a 	add	r2,r4,r18
 800ad58:	980d883a 	mov	r6,r19
 800ad5c:	9880022e 	bgeu	r19,r2,800ad68 <__sfvwrite_r+0x3f8>
 800ad60:	1027883a 	mov	r19,r2
 800ad64:	100d883a 	mov	r6,r2
 800ad68:	18c1000c 	andi	r3,r3,1024
 800ad6c:	18001c26 	beq	r3,zero,800ade0 <__sfvwrite_r+0x470>
 800ad70:	300b883a 	mov	r5,r6
 800ad74:	a809883a 	mov	r4,r21
 800ad78:	8003e340 	call	8003e34 <_malloc_r>
 800ad7c:	102f883a 	mov	r23,r2
 800ad80:	10002926 	beq	r2,zero,800ae28 <__sfvwrite_r+0x4b8>
 800ad84:	81400417 	ldw	r5,16(r16)
 800ad88:	b00d883a 	mov	r6,r22
 800ad8c:	1009883a 	mov	r4,r2
 800ad90:	800b3000 	call	800b300 <memcpy>
 800ad94:	8080030b 	ldhu	r2,12(r16)
 800ad98:	00fedfc4 	movi	r3,-1153
 800ad9c:	10c4703a 	and	r2,r2,r3
 800ada0:	10802014 	ori	r2,r2,128
 800ada4:	8080030d 	sth	r2,12(r16)
 800ada8:	bd89883a 	add	r4,r23,r22
 800adac:	9d8fc83a 	sub	r7,r19,r22
 800adb0:	85c00415 	stw	r23,16(r16)
 800adb4:	84c00515 	stw	r19,20(r16)
 800adb8:	81000015 	stw	r4,0(r16)
 800adbc:	9027883a 	mov	r19,r18
 800adc0:	81c00215 	stw	r7,8(r16)
 800adc4:	902f883a 	mov	r23,r18
 800adc8:	003f3806 	br	800aaac <__alt_data_end+0xfc00aaac>
 800adcc:	800b883a 	mov	r5,r16
 800add0:	a809883a 	mov	r4,r21
 800add4:	8002c3c0 	call	8002c3c <_fflush_r>
 800add8:	103fb926 	beq	r2,zero,800acc0 <__alt_data_end+0xfc00acc0>
 800addc:	003f6506 	br	800ab74 <__alt_data_end+0xfc00ab74>
 800ade0:	a809883a 	mov	r4,r21
 800ade4:	800c6bc0 	call	800c6bc <_realloc_r>
 800ade8:	102f883a 	mov	r23,r2
 800adec:	103fee1e 	bne	r2,zero,800ada8 <__alt_data_end+0xfc00ada8>
 800adf0:	81400417 	ldw	r5,16(r16)
 800adf4:	a809883a 	mov	r4,r21
 800adf8:	80032a80 	call	80032a8 <_free_r>
 800adfc:	8080030b 	ldhu	r2,12(r16)
 800ae00:	00ffdfc4 	movi	r3,-129
 800ae04:	1884703a 	and	r2,r3,r2
 800ae08:	00c00304 	movi	r3,12
 800ae0c:	a8c00015 	stw	r3,0(r21)
 800ae10:	003f5906 	br	800ab78 <__alt_data_end+0xfc00ab78>
 800ae14:	94c00044 	addi	r19,r18,1
 800ae18:	02000044 	movi	r8,1
 800ae1c:	003f6006 	br	800aba0 <__alt_data_end+0xfc00aba0>
 800ae20:	00bfffc4 	movi	r2,-1
 800ae24:	003f0006 	br	800aa28 <__alt_data_end+0xfc00aa28>
 800ae28:	00800304 	movi	r2,12
 800ae2c:	a8800015 	stw	r2,0(r21)
 800ae30:	8080030b 	ldhu	r2,12(r16)
 800ae34:	003f5006 	br	800ab78 <__alt_data_end+0xfc00ab78>

0800ae38 <_isatty_r>:
 800ae38:	defffd04 	addi	sp,sp,-12
 800ae3c:	dc000015 	stw	r16,0(sp)
 800ae40:	040200b4 	movhi	r16,2050
 800ae44:	dc400115 	stw	r17,4(sp)
 800ae48:	843e5904 	addi	r16,r16,-1692
 800ae4c:	2023883a 	mov	r17,r4
 800ae50:	2809883a 	mov	r4,r5
 800ae54:	dfc00215 	stw	ra,8(sp)
 800ae58:	80000015 	stw	zero,0(r16)
 800ae5c:	80191d40 	call	80191d4 <isatty>
 800ae60:	00ffffc4 	movi	r3,-1
 800ae64:	10c00526 	beq	r2,r3,800ae7c <_isatty_r+0x44>
 800ae68:	dfc00217 	ldw	ra,8(sp)
 800ae6c:	dc400117 	ldw	r17,4(sp)
 800ae70:	dc000017 	ldw	r16,0(sp)
 800ae74:	dec00304 	addi	sp,sp,12
 800ae78:	f800283a 	ret
 800ae7c:	80c00017 	ldw	r3,0(r16)
 800ae80:	183ff926 	beq	r3,zero,800ae68 <__alt_data_end+0xfc00ae68>
 800ae84:	88c00015 	stw	r3,0(r17)
 800ae88:	003ff706 	br	800ae68 <__alt_data_end+0xfc00ae68>

0800ae8c <iswspace>:
 800ae8c:	00803fc4 	movi	r2,255
 800ae90:	11000836 	bltu	r2,r4,800aeb4 <iswspace+0x28>
 800ae94:	008200b4 	movhi	r2,2050
 800ae98:	10b77704 	addi	r2,r2,-8740
 800ae9c:	10800017 	ldw	r2,0(r2)
 800aea0:	1109883a 	add	r4,r2,r4
 800aea4:	20800043 	ldbu	r2,1(r4)
 800aea8:	1080020c 	andi	r2,r2,8
 800aeac:	10803fcc 	andi	r2,r2,255
 800aeb0:	f800283a 	ret
 800aeb4:	0005883a 	mov	r2,zero
 800aeb8:	f800283a 	ret

0800aebc <_setlocale_r>:
 800aebc:	30001b26 	beq	r6,zero,800af2c <_setlocale_r+0x70>
 800aec0:	014200b4 	movhi	r5,2050
 800aec4:	defffe04 	addi	sp,sp,-8
 800aec8:	296fb204 	addi	r5,r5,-16696
 800aecc:	3009883a 	mov	r4,r6
 800aed0:	dc000015 	stw	r16,0(sp)
 800aed4:	dfc00115 	stw	ra,4(sp)
 800aed8:	3021883a 	mov	r16,r6
 800aedc:	800ce300 	call	800ce30 <strcmp>
 800aee0:	1000061e 	bne	r2,zero,800aefc <_setlocale_r+0x40>
 800aee4:	008200b4 	movhi	r2,2050
 800aee8:	10aee804 	addi	r2,r2,-17504
 800aeec:	dfc00117 	ldw	ra,4(sp)
 800aef0:	dc000017 	ldw	r16,0(sp)
 800aef4:	dec00204 	addi	sp,sp,8
 800aef8:	f800283a 	ret
 800aefc:	014200b4 	movhi	r5,2050
 800af00:	296ee804 	addi	r5,r5,-17504
 800af04:	8009883a 	mov	r4,r16
 800af08:	800ce300 	call	800ce30 <strcmp>
 800af0c:	103ff526 	beq	r2,zero,800aee4 <__alt_data_end+0xfc00aee4>
 800af10:	014200b4 	movhi	r5,2050
 800af14:	296ef204 	addi	r5,r5,-17464
 800af18:	8009883a 	mov	r4,r16
 800af1c:	800ce300 	call	800ce30 <strcmp>
 800af20:	103ff026 	beq	r2,zero,800aee4 <__alt_data_end+0xfc00aee4>
 800af24:	0005883a 	mov	r2,zero
 800af28:	003ff006 	br	800aeec <__alt_data_end+0xfc00aeec>
 800af2c:	008200b4 	movhi	r2,2050
 800af30:	10aee804 	addi	r2,r2,-17504
 800af34:	f800283a 	ret

0800af38 <__locale_charset>:
 800af38:	008200b4 	movhi	r2,2050
 800af3c:	10b2d804 	addi	r2,r2,-13472
 800af40:	f800283a 	ret

0800af44 <__locale_mb_cur_max>:
 800af44:	008200b4 	movhi	r2,2050
 800af48:	10b77804 	addi	r2,r2,-8736
 800af4c:	10800017 	ldw	r2,0(r2)
 800af50:	f800283a 	ret

0800af54 <__locale_msgcharset>:
 800af54:	008200b4 	movhi	r2,2050
 800af58:	10b2d004 	addi	r2,r2,-13504
 800af5c:	f800283a 	ret

0800af60 <__locale_cjk_lang>:
 800af60:	0005883a 	mov	r2,zero
 800af64:	f800283a 	ret

0800af68 <_localeconv_r>:
 800af68:	008200b4 	movhi	r2,2050
 800af6c:	10b2e004 	addi	r2,r2,-13440
 800af70:	f800283a 	ret

0800af74 <setlocale>:
 800af74:	008200b4 	movhi	r2,2050
 800af78:	10b77404 	addi	r2,r2,-8752
 800af7c:	280d883a 	mov	r6,r5
 800af80:	200b883a 	mov	r5,r4
 800af84:	11000017 	ldw	r4,0(r2)
 800af88:	800aebc1 	jmpi	800aebc <_setlocale_r>

0800af8c <localeconv>:
 800af8c:	008200b4 	movhi	r2,2050
 800af90:	10b2e004 	addi	r2,r2,-13440
 800af94:	f800283a 	ret

0800af98 <_lseek_r>:
 800af98:	defffd04 	addi	sp,sp,-12
 800af9c:	2805883a 	mov	r2,r5
 800afa0:	dc000015 	stw	r16,0(sp)
 800afa4:	040200b4 	movhi	r16,2050
 800afa8:	dc400115 	stw	r17,4(sp)
 800afac:	300b883a 	mov	r5,r6
 800afb0:	843e5904 	addi	r16,r16,-1692
 800afb4:	2023883a 	mov	r17,r4
 800afb8:	380d883a 	mov	r6,r7
 800afbc:	1009883a 	mov	r4,r2
 800afc0:	dfc00215 	stw	ra,8(sp)
 800afc4:	80000015 	stw	zero,0(r16)
 800afc8:	80193a80 	call	80193a8 <lseek>
 800afcc:	00ffffc4 	movi	r3,-1
 800afd0:	10c00526 	beq	r2,r3,800afe8 <_lseek_r+0x50>
 800afd4:	dfc00217 	ldw	ra,8(sp)
 800afd8:	dc400117 	ldw	r17,4(sp)
 800afdc:	dc000017 	ldw	r16,0(sp)
 800afe0:	dec00304 	addi	sp,sp,12
 800afe4:	f800283a 	ret
 800afe8:	80c00017 	ldw	r3,0(r16)
 800afec:	183ff926 	beq	r3,zero,800afd4 <__alt_data_end+0xfc00afd4>
 800aff0:	88c00015 	stw	r3,0(r17)
 800aff4:	003ff706 	br	800afd4 <__alt_data_end+0xfc00afd4>

0800aff8 <_mbrtowc_r>:
 800aff8:	defff704 	addi	sp,sp,-36
 800affc:	008200b4 	movhi	r2,2050
 800b000:	dc800715 	stw	r18,28(sp)
 800b004:	dc400615 	stw	r17,24(sp)
 800b008:	dc000515 	stw	r16,20(sp)
 800b00c:	10b77904 	addi	r2,r2,-8732
 800b010:	dfc00815 	stw	ra,32(sp)
 800b014:	2021883a 	mov	r16,r4
 800b018:	dc400917 	ldw	r17,36(sp)
 800b01c:	14800017 	ldw	r18,0(r2)
 800b020:	30001626 	beq	r6,zero,800b07c <_mbrtowc_r+0x84>
 800b024:	d9400215 	stw	r5,8(sp)
 800b028:	d9800315 	stw	r6,12(sp)
 800b02c:	d9c00415 	stw	r7,16(sp)
 800b030:	800af380 	call	800af38 <__locale_charset>
 800b034:	d9c00417 	ldw	r7,16(sp)
 800b038:	d9800317 	ldw	r6,12(sp)
 800b03c:	d9400217 	ldw	r5,8(sp)
 800b040:	d8800015 	stw	r2,0(sp)
 800b044:	dc400115 	stw	r17,4(sp)
 800b048:	8009883a 	mov	r4,r16
 800b04c:	903ee83a 	callr	r18
 800b050:	00ffffc4 	movi	r3,-1
 800b054:	10c0031e 	bne	r2,r3,800b064 <_mbrtowc_r+0x6c>
 800b058:	88000015 	stw	zero,0(r17)
 800b05c:	00c02284 	movi	r3,138
 800b060:	80c00015 	stw	r3,0(r16)
 800b064:	dfc00817 	ldw	ra,32(sp)
 800b068:	dc800717 	ldw	r18,28(sp)
 800b06c:	dc400617 	ldw	r17,24(sp)
 800b070:	dc000517 	ldw	r16,20(sp)
 800b074:	dec00904 	addi	sp,sp,36
 800b078:	f800283a 	ret
 800b07c:	800af380 	call	800af38 <__locale_charset>
 800b080:	018200b4 	movhi	r6,2050
 800b084:	31aef204 	addi	r6,r6,-17464
 800b088:	dc400115 	stw	r17,4(sp)
 800b08c:	d8800015 	stw	r2,0(sp)
 800b090:	01c00044 	movi	r7,1
 800b094:	000b883a 	mov	r5,zero
 800b098:	8009883a 	mov	r4,r16
 800b09c:	903ee83a 	callr	r18
 800b0a0:	003feb06 	br	800b050 <__alt_data_end+0xfc00b050>

0800b0a4 <mbrtowc>:
 800b0a4:	defff704 	addi	sp,sp,-36
 800b0a8:	008200b4 	movhi	r2,2050
 800b0ac:	dc800415 	stw	r18,16(sp)
 800b0b0:	dc400315 	stw	r17,12(sp)
 800b0b4:	10b77404 	addi	r2,r2,-8752
 800b0b8:	dfc00815 	stw	ra,32(sp)
 800b0bc:	dd400715 	stw	r21,28(sp)
 800b0c0:	dd000615 	stw	r20,24(sp)
 800b0c4:	dcc00515 	stw	r19,20(sp)
 800b0c8:	dc000215 	stw	r16,8(sp)
 800b0cc:	3825883a 	mov	r18,r7
 800b0d0:	14400017 	ldw	r17,0(r2)
 800b0d4:	28001c26 	beq	r5,zero,800b148 <mbrtowc+0xa4>
 800b0d8:	008200b4 	movhi	r2,2050
 800b0dc:	10b77904 	addi	r2,r2,-8732
 800b0e0:	15400017 	ldw	r21,0(r2)
 800b0e4:	2821883a 	mov	r16,r5
 800b0e8:	2027883a 	mov	r19,r4
 800b0ec:	3029883a 	mov	r20,r6
 800b0f0:	800af380 	call	800af38 <__locale_charset>
 800b0f4:	d8800015 	stw	r2,0(sp)
 800b0f8:	dc800115 	stw	r18,4(sp)
 800b0fc:	a00f883a 	mov	r7,r20
 800b100:	800d883a 	mov	r6,r16
 800b104:	980b883a 	mov	r5,r19
 800b108:	8809883a 	mov	r4,r17
 800b10c:	a83ee83a 	callr	r21
 800b110:	00ffffc4 	movi	r3,-1
 800b114:	10c0031e 	bne	r2,r3,800b124 <mbrtowc+0x80>
 800b118:	90000015 	stw	zero,0(r18)
 800b11c:	00c02284 	movi	r3,138
 800b120:	88c00015 	stw	r3,0(r17)
 800b124:	dfc00817 	ldw	ra,32(sp)
 800b128:	dd400717 	ldw	r21,28(sp)
 800b12c:	dd000617 	ldw	r20,24(sp)
 800b130:	dcc00517 	ldw	r19,20(sp)
 800b134:	dc800417 	ldw	r18,16(sp)
 800b138:	dc400317 	ldw	r17,12(sp)
 800b13c:	dc000217 	ldw	r16,8(sp)
 800b140:	dec00904 	addi	sp,sp,36
 800b144:	f800283a 	ret
 800b148:	008200b4 	movhi	r2,2050
 800b14c:	10b77904 	addi	r2,r2,-8732
 800b150:	14000017 	ldw	r16,0(r2)
 800b154:	800af380 	call	800af38 <__locale_charset>
 800b158:	018200b4 	movhi	r6,2050
 800b15c:	31aef204 	addi	r6,r6,-17464
 800b160:	dc800115 	stw	r18,4(sp)
 800b164:	d8800015 	stw	r2,0(sp)
 800b168:	01c00044 	movi	r7,1
 800b16c:	000b883a 	mov	r5,zero
 800b170:	8809883a 	mov	r4,r17
 800b174:	803ee83a 	callr	r16
 800b178:	003fe506 	br	800b110 <__alt_data_end+0xfc00b110>

0800b17c <__ascii_mbtowc>:
 800b17c:	deffff04 	addi	sp,sp,-4
 800b180:	28000826 	beq	r5,zero,800b1a4 <__ascii_mbtowc+0x28>
 800b184:	30000926 	beq	r6,zero,800b1ac <__ascii_mbtowc+0x30>
 800b188:	38000b26 	beq	r7,zero,800b1b8 <__ascii_mbtowc+0x3c>
 800b18c:	30800003 	ldbu	r2,0(r6)
 800b190:	28800015 	stw	r2,0(r5)
 800b194:	30800003 	ldbu	r2,0(r6)
 800b198:	1004c03a 	cmpne	r2,r2,zero
 800b19c:	dec00104 	addi	sp,sp,4
 800b1a0:	f800283a 	ret
 800b1a4:	d80b883a 	mov	r5,sp
 800b1a8:	303ff71e 	bne	r6,zero,800b188 <__alt_data_end+0xfc00b188>
 800b1ac:	0005883a 	mov	r2,zero
 800b1b0:	dec00104 	addi	sp,sp,4
 800b1b4:	f800283a 	ret
 800b1b8:	00bfff84 	movi	r2,-2
 800b1bc:	003ff706 	br	800b19c <__alt_data_end+0xfc00b19c>

0800b1c0 <_mbtowc_r>:
 800b1c0:	008200b4 	movhi	r2,2050
 800b1c4:	defff804 	addi	sp,sp,-32
 800b1c8:	10b77904 	addi	r2,r2,-8732
 800b1cc:	dfc00715 	stw	ra,28(sp)
 800b1d0:	dc000615 	stw	r16,24(sp)
 800b1d4:	14000017 	ldw	r16,0(r2)
 800b1d8:	d9000215 	stw	r4,8(sp)
 800b1dc:	d9400315 	stw	r5,12(sp)
 800b1e0:	d9800415 	stw	r6,16(sp)
 800b1e4:	d9c00515 	stw	r7,20(sp)
 800b1e8:	800af380 	call	800af38 <__locale_charset>
 800b1ec:	d8800015 	stw	r2,0(sp)
 800b1f0:	d8800817 	ldw	r2,32(sp)
 800b1f4:	d9c00517 	ldw	r7,20(sp)
 800b1f8:	d9800417 	ldw	r6,16(sp)
 800b1fc:	d9400317 	ldw	r5,12(sp)
 800b200:	d9000217 	ldw	r4,8(sp)
 800b204:	d8800115 	stw	r2,4(sp)
 800b208:	803ee83a 	callr	r16
 800b20c:	dfc00717 	ldw	ra,28(sp)
 800b210:	dc000617 	ldw	r16,24(sp)
 800b214:	dec00804 	addi	sp,sp,32
 800b218:	f800283a 	ret

0800b21c <memchr>:
 800b21c:	208000cc 	andi	r2,r4,3
 800b220:	280f883a 	mov	r7,r5
 800b224:	10003426 	beq	r2,zero,800b2f8 <memchr+0xdc>
 800b228:	30bfffc4 	addi	r2,r6,-1
 800b22c:	30001a26 	beq	r6,zero,800b298 <memchr+0x7c>
 800b230:	20c00003 	ldbu	r3,0(r4)
 800b234:	29803fcc 	andi	r6,r5,255
 800b238:	30c0051e 	bne	r6,r3,800b250 <memchr+0x34>
 800b23c:	00001806 	br	800b2a0 <memchr+0x84>
 800b240:	10001526 	beq	r2,zero,800b298 <memchr+0x7c>
 800b244:	20c00003 	ldbu	r3,0(r4)
 800b248:	10bfffc4 	addi	r2,r2,-1
 800b24c:	30c01426 	beq	r6,r3,800b2a0 <memchr+0x84>
 800b250:	21000044 	addi	r4,r4,1
 800b254:	20c000cc 	andi	r3,r4,3
 800b258:	183ff91e 	bne	r3,zero,800b240 <__alt_data_end+0xfc00b240>
 800b25c:	020000c4 	movi	r8,3
 800b260:	40801136 	bltu	r8,r2,800b2a8 <memchr+0x8c>
 800b264:	10000c26 	beq	r2,zero,800b298 <memchr+0x7c>
 800b268:	20c00003 	ldbu	r3,0(r4)
 800b26c:	29403fcc 	andi	r5,r5,255
 800b270:	28c00b26 	beq	r5,r3,800b2a0 <memchr+0x84>
 800b274:	20c00044 	addi	r3,r4,1
 800b278:	39803fcc 	andi	r6,r7,255
 800b27c:	2089883a 	add	r4,r4,r2
 800b280:	00000306 	br	800b290 <memchr+0x74>
 800b284:	18c00044 	addi	r3,r3,1
 800b288:	197fffc3 	ldbu	r5,-1(r3)
 800b28c:	31400526 	beq	r6,r5,800b2a4 <memchr+0x88>
 800b290:	1805883a 	mov	r2,r3
 800b294:	20fffb1e 	bne	r4,r3,800b284 <__alt_data_end+0xfc00b284>
 800b298:	0005883a 	mov	r2,zero
 800b29c:	f800283a 	ret
 800b2a0:	2005883a 	mov	r2,r4
 800b2a4:	f800283a 	ret
 800b2a8:	28c03fcc 	andi	r3,r5,255
 800b2ac:	1812923a 	slli	r9,r3,8
 800b2b0:	02ffbff4 	movhi	r11,65279
 800b2b4:	02a02074 	movhi	r10,32897
 800b2b8:	48d2b03a 	or	r9,r9,r3
 800b2bc:	4806943a 	slli	r3,r9,16
 800b2c0:	5affbfc4 	addi	r11,r11,-257
 800b2c4:	52a02004 	addi	r10,r10,-32640
 800b2c8:	48d2b03a 	or	r9,r9,r3
 800b2cc:	20c00017 	ldw	r3,0(r4)
 800b2d0:	48c6f03a 	xor	r3,r9,r3
 800b2d4:	1acd883a 	add	r6,r3,r11
 800b2d8:	00c6303a 	nor	r3,zero,r3
 800b2dc:	30c6703a 	and	r3,r6,r3
 800b2e0:	1a86703a 	and	r3,r3,r10
 800b2e4:	183fe01e 	bne	r3,zero,800b268 <__alt_data_end+0xfc00b268>
 800b2e8:	10bfff04 	addi	r2,r2,-4
 800b2ec:	21000104 	addi	r4,r4,4
 800b2f0:	40bff636 	bltu	r8,r2,800b2cc <__alt_data_end+0xfc00b2cc>
 800b2f4:	003fdb06 	br	800b264 <__alt_data_end+0xfc00b264>
 800b2f8:	3005883a 	mov	r2,r6
 800b2fc:	003fd706 	br	800b25c <__alt_data_end+0xfc00b25c>

0800b300 <memcpy>:
 800b300:	defffd04 	addi	sp,sp,-12
 800b304:	dfc00215 	stw	ra,8(sp)
 800b308:	dc400115 	stw	r17,4(sp)
 800b30c:	dc000015 	stw	r16,0(sp)
 800b310:	00c003c4 	movi	r3,15
 800b314:	2005883a 	mov	r2,r4
 800b318:	1980452e 	bgeu	r3,r6,800b430 <memcpy+0x130>
 800b31c:	2906b03a 	or	r3,r5,r4
 800b320:	18c000cc 	andi	r3,r3,3
 800b324:	1800441e 	bne	r3,zero,800b438 <memcpy+0x138>
 800b328:	347ffc04 	addi	r17,r6,-16
 800b32c:	8822d13a 	srli	r17,r17,4
 800b330:	28c00104 	addi	r3,r5,4
 800b334:	23400104 	addi	r13,r4,4
 800b338:	8820913a 	slli	r16,r17,4
 800b33c:	2b000204 	addi	r12,r5,8
 800b340:	22c00204 	addi	r11,r4,8
 800b344:	84000504 	addi	r16,r16,20
 800b348:	2a800304 	addi	r10,r5,12
 800b34c:	22400304 	addi	r9,r4,12
 800b350:	2c21883a 	add	r16,r5,r16
 800b354:	2811883a 	mov	r8,r5
 800b358:	200f883a 	mov	r7,r4
 800b35c:	41000017 	ldw	r4,0(r8)
 800b360:	1fc00017 	ldw	ra,0(r3)
 800b364:	63c00017 	ldw	r15,0(r12)
 800b368:	39000015 	stw	r4,0(r7)
 800b36c:	53800017 	ldw	r14,0(r10)
 800b370:	6fc00015 	stw	ra,0(r13)
 800b374:	5bc00015 	stw	r15,0(r11)
 800b378:	4b800015 	stw	r14,0(r9)
 800b37c:	18c00404 	addi	r3,r3,16
 800b380:	39c00404 	addi	r7,r7,16
 800b384:	42000404 	addi	r8,r8,16
 800b388:	6b400404 	addi	r13,r13,16
 800b38c:	63000404 	addi	r12,r12,16
 800b390:	5ac00404 	addi	r11,r11,16
 800b394:	52800404 	addi	r10,r10,16
 800b398:	4a400404 	addi	r9,r9,16
 800b39c:	1c3fef1e 	bne	r3,r16,800b35c <__alt_data_end+0xfc00b35c>
 800b3a0:	89c00044 	addi	r7,r17,1
 800b3a4:	380e913a 	slli	r7,r7,4
 800b3a8:	310003cc 	andi	r4,r6,15
 800b3ac:	02c000c4 	movi	r11,3
 800b3b0:	11c7883a 	add	r3,r2,r7
 800b3b4:	29cb883a 	add	r5,r5,r7
 800b3b8:	5900212e 	bgeu	r11,r4,800b440 <memcpy+0x140>
 800b3bc:	1813883a 	mov	r9,r3
 800b3c0:	2811883a 	mov	r8,r5
 800b3c4:	200f883a 	mov	r7,r4
 800b3c8:	42800017 	ldw	r10,0(r8)
 800b3cc:	4a400104 	addi	r9,r9,4
 800b3d0:	39ffff04 	addi	r7,r7,-4
 800b3d4:	4abfff15 	stw	r10,-4(r9)
 800b3d8:	42000104 	addi	r8,r8,4
 800b3dc:	59fffa36 	bltu	r11,r7,800b3c8 <__alt_data_end+0xfc00b3c8>
 800b3e0:	213fff04 	addi	r4,r4,-4
 800b3e4:	2008d0ba 	srli	r4,r4,2
 800b3e8:	318000cc 	andi	r6,r6,3
 800b3ec:	21000044 	addi	r4,r4,1
 800b3f0:	2109883a 	add	r4,r4,r4
 800b3f4:	2109883a 	add	r4,r4,r4
 800b3f8:	1907883a 	add	r3,r3,r4
 800b3fc:	290b883a 	add	r5,r5,r4
 800b400:	30000626 	beq	r6,zero,800b41c <memcpy+0x11c>
 800b404:	198d883a 	add	r6,r3,r6
 800b408:	29c00003 	ldbu	r7,0(r5)
 800b40c:	18c00044 	addi	r3,r3,1
 800b410:	29400044 	addi	r5,r5,1
 800b414:	19ffffc5 	stb	r7,-1(r3)
 800b418:	19bffb1e 	bne	r3,r6,800b408 <__alt_data_end+0xfc00b408>
 800b41c:	dfc00217 	ldw	ra,8(sp)
 800b420:	dc400117 	ldw	r17,4(sp)
 800b424:	dc000017 	ldw	r16,0(sp)
 800b428:	dec00304 	addi	sp,sp,12
 800b42c:	f800283a 	ret
 800b430:	2007883a 	mov	r3,r4
 800b434:	003ff206 	br	800b400 <__alt_data_end+0xfc00b400>
 800b438:	2007883a 	mov	r3,r4
 800b43c:	003ff106 	br	800b404 <__alt_data_end+0xfc00b404>
 800b440:	200d883a 	mov	r6,r4
 800b444:	003fee06 	br	800b400 <__alt_data_end+0xfc00b400>

0800b448 <memmove>:
 800b448:	2005883a 	mov	r2,r4
 800b44c:	29000b2e 	bgeu	r5,r4,800b47c <memmove+0x34>
 800b450:	298f883a 	add	r7,r5,r6
 800b454:	21c0092e 	bgeu	r4,r7,800b47c <memmove+0x34>
 800b458:	2187883a 	add	r3,r4,r6
 800b45c:	198bc83a 	sub	r5,r3,r6
 800b460:	30004826 	beq	r6,zero,800b584 <memmove+0x13c>
 800b464:	39ffffc4 	addi	r7,r7,-1
 800b468:	39000003 	ldbu	r4,0(r7)
 800b46c:	18ffffc4 	addi	r3,r3,-1
 800b470:	19000005 	stb	r4,0(r3)
 800b474:	28fffb1e 	bne	r5,r3,800b464 <__alt_data_end+0xfc00b464>
 800b478:	f800283a 	ret
 800b47c:	00c003c4 	movi	r3,15
 800b480:	1980412e 	bgeu	r3,r6,800b588 <memmove+0x140>
 800b484:	2886b03a 	or	r3,r5,r2
 800b488:	18c000cc 	andi	r3,r3,3
 800b48c:	1800401e 	bne	r3,zero,800b590 <memmove+0x148>
 800b490:	33fffc04 	addi	r15,r6,-16
 800b494:	781ed13a 	srli	r15,r15,4
 800b498:	28c00104 	addi	r3,r5,4
 800b49c:	13400104 	addi	r13,r2,4
 800b4a0:	781c913a 	slli	r14,r15,4
 800b4a4:	2b000204 	addi	r12,r5,8
 800b4a8:	12c00204 	addi	r11,r2,8
 800b4ac:	73800504 	addi	r14,r14,20
 800b4b0:	2a800304 	addi	r10,r5,12
 800b4b4:	12400304 	addi	r9,r2,12
 800b4b8:	2b9d883a 	add	r14,r5,r14
 800b4bc:	2811883a 	mov	r8,r5
 800b4c0:	100f883a 	mov	r7,r2
 800b4c4:	41000017 	ldw	r4,0(r8)
 800b4c8:	39c00404 	addi	r7,r7,16
 800b4cc:	18c00404 	addi	r3,r3,16
 800b4d0:	393ffc15 	stw	r4,-16(r7)
 800b4d4:	193ffc17 	ldw	r4,-16(r3)
 800b4d8:	6b400404 	addi	r13,r13,16
 800b4dc:	5ac00404 	addi	r11,r11,16
 800b4e0:	693ffc15 	stw	r4,-16(r13)
 800b4e4:	61000017 	ldw	r4,0(r12)
 800b4e8:	4a400404 	addi	r9,r9,16
 800b4ec:	42000404 	addi	r8,r8,16
 800b4f0:	593ffc15 	stw	r4,-16(r11)
 800b4f4:	51000017 	ldw	r4,0(r10)
 800b4f8:	63000404 	addi	r12,r12,16
 800b4fc:	52800404 	addi	r10,r10,16
 800b500:	493ffc15 	stw	r4,-16(r9)
 800b504:	1bbfef1e 	bne	r3,r14,800b4c4 <__alt_data_end+0xfc00b4c4>
 800b508:	79000044 	addi	r4,r15,1
 800b50c:	2008913a 	slli	r4,r4,4
 800b510:	328003cc 	andi	r10,r6,15
 800b514:	02c000c4 	movi	r11,3
 800b518:	1107883a 	add	r3,r2,r4
 800b51c:	290b883a 	add	r5,r5,r4
 800b520:	5a801e2e 	bgeu	r11,r10,800b59c <memmove+0x154>
 800b524:	1813883a 	mov	r9,r3
 800b528:	2811883a 	mov	r8,r5
 800b52c:	500f883a 	mov	r7,r10
 800b530:	41000017 	ldw	r4,0(r8)
 800b534:	4a400104 	addi	r9,r9,4
 800b538:	39ffff04 	addi	r7,r7,-4
 800b53c:	493fff15 	stw	r4,-4(r9)
 800b540:	42000104 	addi	r8,r8,4
 800b544:	59fffa36 	bltu	r11,r7,800b530 <__alt_data_end+0xfc00b530>
 800b548:	513fff04 	addi	r4,r10,-4
 800b54c:	2008d0ba 	srli	r4,r4,2
 800b550:	318000cc 	andi	r6,r6,3
 800b554:	21000044 	addi	r4,r4,1
 800b558:	2109883a 	add	r4,r4,r4
 800b55c:	2109883a 	add	r4,r4,r4
 800b560:	1907883a 	add	r3,r3,r4
 800b564:	290b883a 	add	r5,r5,r4
 800b568:	30000b26 	beq	r6,zero,800b598 <memmove+0x150>
 800b56c:	198d883a 	add	r6,r3,r6
 800b570:	29c00003 	ldbu	r7,0(r5)
 800b574:	18c00044 	addi	r3,r3,1
 800b578:	29400044 	addi	r5,r5,1
 800b57c:	19ffffc5 	stb	r7,-1(r3)
 800b580:	19bffb1e 	bne	r3,r6,800b570 <__alt_data_end+0xfc00b570>
 800b584:	f800283a 	ret
 800b588:	1007883a 	mov	r3,r2
 800b58c:	003ff606 	br	800b568 <__alt_data_end+0xfc00b568>
 800b590:	1007883a 	mov	r3,r2
 800b594:	003ff506 	br	800b56c <__alt_data_end+0xfc00b56c>
 800b598:	f800283a 	ret
 800b59c:	500d883a 	mov	r6,r10
 800b5a0:	003ff106 	br	800b568 <__alt_data_end+0xfc00b568>

0800b5a4 <_Balloc>:
 800b5a4:	20801317 	ldw	r2,76(r4)
 800b5a8:	defffc04 	addi	sp,sp,-16
 800b5ac:	dc400115 	stw	r17,4(sp)
 800b5b0:	dc000015 	stw	r16,0(sp)
 800b5b4:	dfc00315 	stw	ra,12(sp)
 800b5b8:	dc800215 	stw	r18,8(sp)
 800b5bc:	2023883a 	mov	r17,r4
 800b5c0:	2821883a 	mov	r16,r5
 800b5c4:	10000f26 	beq	r2,zero,800b604 <_Balloc+0x60>
 800b5c8:	8407883a 	add	r3,r16,r16
 800b5cc:	18c7883a 	add	r3,r3,r3
 800b5d0:	10c7883a 	add	r3,r2,r3
 800b5d4:	18800017 	ldw	r2,0(r3)
 800b5d8:	10001126 	beq	r2,zero,800b620 <_Balloc+0x7c>
 800b5dc:	11000017 	ldw	r4,0(r2)
 800b5e0:	19000015 	stw	r4,0(r3)
 800b5e4:	10000415 	stw	zero,16(r2)
 800b5e8:	10000315 	stw	zero,12(r2)
 800b5ec:	dfc00317 	ldw	ra,12(sp)
 800b5f0:	dc800217 	ldw	r18,8(sp)
 800b5f4:	dc400117 	ldw	r17,4(sp)
 800b5f8:	dc000017 	ldw	r16,0(sp)
 800b5fc:	dec00404 	addi	sp,sp,16
 800b600:	f800283a 	ret
 800b604:	01800844 	movi	r6,33
 800b608:	01400104 	movi	r5,4
 800b60c:	8012dcc0 	call	8012dcc <_calloc_r>
 800b610:	88801315 	stw	r2,76(r17)
 800b614:	103fec1e 	bne	r2,zero,800b5c8 <__alt_data_end+0xfc00b5c8>
 800b618:	0005883a 	mov	r2,zero
 800b61c:	003ff306 	br	800b5ec <__alt_data_end+0xfc00b5ec>
 800b620:	01400044 	movi	r5,1
 800b624:	2c24983a 	sll	r18,r5,r16
 800b628:	8809883a 	mov	r4,r17
 800b62c:	91800144 	addi	r6,r18,5
 800b630:	318d883a 	add	r6,r6,r6
 800b634:	318d883a 	add	r6,r6,r6
 800b638:	8012dcc0 	call	8012dcc <_calloc_r>
 800b63c:	103ff626 	beq	r2,zero,800b618 <__alt_data_end+0xfc00b618>
 800b640:	14000115 	stw	r16,4(r2)
 800b644:	14800215 	stw	r18,8(r2)
 800b648:	003fe606 	br	800b5e4 <__alt_data_end+0xfc00b5e4>

0800b64c <_Bfree>:
 800b64c:	28000826 	beq	r5,zero,800b670 <_Bfree+0x24>
 800b650:	28c00117 	ldw	r3,4(r5)
 800b654:	20801317 	ldw	r2,76(r4)
 800b658:	18c7883a 	add	r3,r3,r3
 800b65c:	18c7883a 	add	r3,r3,r3
 800b660:	10c5883a 	add	r2,r2,r3
 800b664:	10c00017 	ldw	r3,0(r2)
 800b668:	28c00015 	stw	r3,0(r5)
 800b66c:	11400015 	stw	r5,0(r2)
 800b670:	f800283a 	ret

0800b674 <__multadd>:
 800b674:	defff704 	addi	sp,sp,-36
 800b678:	dc800215 	stw	r18,8(sp)
 800b67c:	2c800417 	ldw	r18,16(r5)
 800b680:	dd800615 	stw	r22,24(sp)
 800b684:	dd400515 	stw	r21,20(sp)
 800b688:	dd000415 	stw	r20,16(sp)
 800b68c:	dcc00315 	stw	r19,12(sp)
 800b690:	dc400115 	stw	r17,4(sp)
 800b694:	dc000015 	stw	r16,0(sp)
 800b698:	dfc00815 	stw	ra,32(sp)
 800b69c:	ddc00715 	stw	r23,28(sp)
 800b6a0:	2827883a 	mov	r19,r5
 800b6a4:	2029883a 	mov	r20,r4
 800b6a8:	3023883a 	mov	r17,r6
 800b6ac:	3821883a 	mov	r16,r7
 800b6b0:	2d400504 	addi	r21,r5,20
 800b6b4:	002d883a 	mov	r22,zero
 800b6b8:	adc00017 	ldw	r23,0(r21)
 800b6bc:	880b883a 	mov	r5,r17
 800b6c0:	ad400104 	addi	r21,r21,4
 800b6c4:	b93fffcc 	andi	r4,r23,65535
 800b6c8:	80028f40 	call	80028f4 <__mulsi3>
 800b6cc:	b808d43a 	srli	r4,r23,16
 800b6d0:	880b883a 	mov	r5,r17
 800b6d4:	1421883a 	add	r16,r2,r16
 800b6d8:	80028f40 	call	80028f4 <__mulsi3>
 800b6dc:	800ed43a 	srli	r7,r16,16
 800b6e0:	80ffffcc 	andi	r3,r16,65535
 800b6e4:	b5800044 	addi	r22,r22,1
 800b6e8:	11c5883a 	add	r2,r2,r7
 800b6ec:	100e943a 	slli	r7,r2,16
 800b6f0:	1020d43a 	srli	r16,r2,16
 800b6f4:	38c7883a 	add	r3,r7,r3
 800b6f8:	a8ffff15 	stw	r3,-4(r21)
 800b6fc:	b4bfee16 	blt	r22,r18,800b6b8 <__alt_data_end+0xfc00b6b8>
 800b700:	80000926 	beq	r16,zero,800b728 <__multadd+0xb4>
 800b704:	98800217 	ldw	r2,8(r19)
 800b708:	9080130e 	bge	r18,r2,800b758 <__multadd+0xe4>
 800b70c:	90800144 	addi	r2,r18,5
 800b710:	1085883a 	add	r2,r2,r2
 800b714:	1085883a 	add	r2,r2,r2
 800b718:	9885883a 	add	r2,r19,r2
 800b71c:	14000015 	stw	r16,0(r2)
 800b720:	94800044 	addi	r18,r18,1
 800b724:	9c800415 	stw	r18,16(r19)
 800b728:	9805883a 	mov	r2,r19
 800b72c:	dfc00817 	ldw	ra,32(sp)
 800b730:	ddc00717 	ldw	r23,28(sp)
 800b734:	dd800617 	ldw	r22,24(sp)
 800b738:	dd400517 	ldw	r21,20(sp)
 800b73c:	dd000417 	ldw	r20,16(sp)
 800b740:	dcc00317 	ldw	r19,12(sp)
 800b744:	dc800217 	ldw	r18,8(sp)
 800b748:	dc400117 	ldw	r17,4(sp)
 800b74c:	dc000017 	ldw	r16,0(sp)
 800b750:	dec00904 	addi	sp,sp,36
 800b754:	f800283a 	ret
 800b758:	99400117 	ldw	r5,4(r19)
 800b75c:	a009883a 	mov	r4,r20
 800b760:	29400044 	addi	r5,r5,1
 800b764:	800b5a40 	call	800b5a4 <_Balloc>
 800b768:	99800417 	ldw	r6,16(r19)
 800b76c:	99400304 	addi	r5,r19,12
 800b770:	11000304 	addi	r4,r2,12
 800b774:	31800084 	addi	r6,r6,2
 800b778:	318d883a 	add	r6,r6,r6
 800b77c:	318d883a 	add	r6,r6,r6
 800b780:	1023883a 	mov	r17,r2
 800b784:	800b3000 	call	800b300 <memcpy>
 800b788:	98000a26 	beq	r19,zero,800b7b4 <__multadd+0x140>
 800b78c:	98c00117 	ldw	r3,4(r19)
 800b790:	a0801317 	ldw	r2,76(r20)
 800b794:	18c7883a 	add	r3,r3,r3
 800b798:	18c7883a 	add	r3,r3,r3
 800b79c:	10c5883a 	add	r2,r2,r3
 800b7a0:	10c00017 	ldw	r3,0(r2)
 800b7a4:	98c00015 	stw	r3,0(r19)
 800b7a8:	14c00015 	stw	r19,0(r2)
 800b7ac:	8827883a 	mov	r19,r17
 800b7b0:	003fd606 	br	800b70c <__alt_data_end+0xfc00b70c>
 800b7b4:	8827883a 	mov	r19,r17
 800b7b8:	003fd406 	br	800b70c <__alt_data_end+0xfc00b70c>

0800b7bc <__s2b>:
 800b7bc:	defff904 	addi	sp,sp,-28
 800b7c0:	dc400115 	stw	r17,4(sp)
 800b7c4:	dc000015 	stw	r16,0(sp)
 800b7c8:	2023883a 	mov	r17,r4
 800b7cc:	2821883a 	mov	r16,r5
 800b7d0:	39000204 	addi	r4,r7,8
 800b7d4:	01400244 	movi	r5,9
 800b7d8:	dcc00315 	stw	r19,12(sp)
 800b7dc:	dc800215 	stw	r18,8(sp)
 800b7e0:	dfc00615 	stw	ra,24(sp)
 800b7e4:	dd400515 	stw	r21,20(sp)
 800b7e8:	dd000415 	stw	r20,16(sp)
 800b7ec:	3825883a 	mov	r18,r7
 800b7f0:	3027883a 	mov	r19,r6
 800b7f4:	80027400 	call	8002740 <__divsi3>
 800b7f8:	00c00044 	movi	r3,1
 800b7fc:	000b883a 	mov	r5,zero
 800b800:	1880030e 	bge	r3,r2,800b810 <__s2b+0x54>
 800b804:	18c7883a 	add	r3,r3,r3
 800b808:	29400044 	addi	r5,r5,1
 800b80c:	18bffd16 	blt	r3,r2,800b804 <__alt_data_end+0xfc00b804>
 800b810:	8809883a 	mov	r4,r17
 800b814:	800b5a40 	call	800b5a4 <_Balloc>
 800b818:	d8c00717 	ldw	r3,28(sp)
 800b81c:	10c00515 	stw	r3,20(r2)
 800b820:	00c00044 	movi	r3,1
 800b824:	10c00415 	stw	r3,16(r2)
 800b828:	00c00244 	movi	r3,9
 800b82c:	1cc0210e 	bge	r3,r19,800b8b4 <__s2b+0xf8>
 800b830:	80eb883a 	add	r21,r16,r3
 800b834:	a829883a 	mov	r20,r21
 800b838:	84e1883a 	add	r16,r16,r19
 800b83c:	a1c00007 	ldb	r7,0(r20)
 800b840:	01800284 	movi	r6,10
 800b844:	a5000044 	addi	r20,r20,1
 800b848:	100b883a 	mov	r5,r2
 800b84c:	39fff404 	addi	r7,r7,-48
 800b850:	8809883a 	mov	r4,r17
 800b854:	800b6740 	call	800b674 <__multadd>
 800b858:	a43ff81e 	bne	r20,r16,800b83c <__alt_data_end+0xfc00b83c>
 800b85c:	ace1883a 	add	r16,r21,r19
 800b860:	843ffe04 	addi	r16,r16,-8
 800b864:	9c800a0e 	bge	r19,r18,800b890 <__s2b+0xd4>
 800b868:	94e5c83a 	sub	r18,r18,r19
 800b86c:	84a5883a 	add	r18,r16,r18
 800b870:	81c00007 	ldb	r7,0(r16)
 800b874:	01800284 	movi	r6,10
 800b878:	84000044 	addi	r16,r16,1
 800b87c:	100b883a 	mov	r5,r2
 800b880:	39fff404 	addi	r7,r7,-48
 800b884:	8809883a 	mov	r4,r17
 800b888:	800b6740 	call	800b674 <__multadd>
 800b88c:	84bff81e 	bne	r16,r18,800b870 <__alt_data_end+0xfc00b870>
 800b890:	dfc00617 	ldw	ra,24(sp)
 800b894:	dd400517 	ldw	r21,20(sp)
 800b898:	dd000417 	ldw	r20,16(sp)
 800b89c:	dcc00317 	ldw	r19,12(sp)
 800b8a0:	dc800217 	ldw	r18,8(sp)
 800b8a4:	dc400117 	ldw	r17,4(sp)
 800b8a8:	dc000017 	ldw	r16,0(sp)
 800b8ac:	dec00704 	addi	sp,sp,28
 800b8b0:	f800283a 	ret
 800b8b4:	84000284 	addi	r16,r16,10
 800b8b8:	1827883a 	mov	r19,r3
 800b8bc:	003fe906 	br	800b864 <__alt_data_end+0xfc00b864>

0800b8c0 <__hi0bits>:
 800b8c0:	20bfffec 	andhi	r2,r4,65535
 800b8c4:	1000141e 	bne	r2,zero,800b918 <__hi0bits+0x58>
 800b8c8:	2008943a 	slli	r4,r4,16
 800b8cc:	00800404 	movi	r2,16
 800b8d0:	20ffc02c 	andhi	r3,r4,65280
 800b8d4:	1800021e 	bne	r3,zero,800b8e0 <__hi0bits+0x20>
 800b8d8:	2008923a 	slli	r4,r4,8
 800b8dc:	10800204 	addi	r2,r2,8
 800b8e0:	20fc002c 	andhi	r3,r4,61440
 800b8e4:	1800021e 	bne	r3,zero,800b8f0 <__hi0bits+0x30>
 800b8e8:	2008913a 	slli	r4,r4,4
 800b8ec:	10800104 	addi	r2,r2,4
 800b8f0:	20f0002c 	andhi	r3,r4,49152
 800b8f4:	1800031e 	bne	r3,zero,800b904 <__hi0bits+0x44>
 800b8f8:	2109883a 	add	r4,r4,r4
 800b8fc:	10800084 	addi	r2,r2,2
 800b900:	2109883a 	add	r4,r4,r4
 800b904:	20000316 	blt	r4,zero,800b914 <__hi0bits+0x54>
 800b908:	2110002c 	andhi	r4,r4,16384
 800b90c:	2000041e 	bne	r4,zero,800b920 <__hi0bits+0x60>
 800b910:	00800804 	movi	r2,32
 800b914:	f800283a 	ret
 800b918:	0005883a 	mov	r2,zero
 800b91c:	003fec06 	br	800b8d0 <__alt_data_end+0xfc00b8d0>
 800b920:	10800044 	addi	r2,r2,1
 800b924:	f800283a 	ret

0800b928 <__lo0bits>:
 800b928:	20c00017 	ldw	r3,0(r4)
 800b92c:	188001cc 	andi	r2,r3,7
 800b930:	10000826 	beq	r2,zero,800b954 <__lo0bits+0x2c>
 800b934:	1880004c 	andi	r2,r3,1
 800b938:	1000211e 	bne	r2,zero,800b9c0 <__lo0bits+0x98>
 800b93c:	1880008c 	andi	r2,r3,2
 800b940:	1000211e 	bne	r2,zero,800b9c8 <__lo0bits+0xa0>
 800b944:	1806d0ba 	srli	r3,r3,2
 800b948:	00800084 	movi	r2,2
 800b94c:	20c00015 	stw	r3,0(r4)
 800b950:	f800283a 	ret
 800b954:	18bfffcc 	andi	r2,r3,65535
 800b958:	10001326 	beq	r2,zero,800b9a8 <__lo0bits+0x80>
 800b95c:	0005883a 	mov	r2,zero
 800b960:	19403fcc 	andi	r5,r3,255
 800b964:	2800021e 	bne	r5,zero,800b970 <__lo0bits+0x48>
 800b968:	1806d23a 	srli	r3,r3,8
 800b96c:	10800204 	addi	r2,r2,8
 800b970:	194003cc 	andi	r5,r3,15
 800b974:	2800021e 	bne	r5,zero,800b980 <__lo0bits+0x58>
 800b978:	1806d13a 	srli	r3,r3,4
 800b97c:	10800104 	addi	r2,r2,4
 800b980:	194000cc 	andi	r5,r3,3
 800b984:	2800021e 	bne	r5,zero,800b990 <__lo0bits+0x68>
 800b988:	1806d0ba 	srli	r3,r3,2
 800b98c:	10800084 	addi	r2,r2,2
 800b990:	1940004c 	andi	r5,r3,1
 800b994:	2800081e 	bne	r5,zero,800b9b8 <__lo0bits+0x90>
 800b998:	1806d07a 	srli	r3,r3,1
 800b99c:	1800051e 	bne	r3,zero,800b9b4 <__lo0bits+0x8c>
 800b9a0:	00800804 	movi	r2,32
 800b9a4:	f800283a 	ret
 800b9a8:	1806d43a 	srli	r3,r3,16
 800b9ac:	00800404 	movi	r2,16
 800b9b0:	003feb06 	br	800b960 <__alt_data_end+0xfc00b960>
 800b9b4:	10800044 	addi	r2,r2,1
 800b9b8:	20c00015 	stw	r3,0(r4)
 800b9bc:	f800283a 	ret
 800b9c0:	0005883a 	mov	r2,zero
 800b9c4:	f800283a 	ret
 800b9c8:	1806d07a 	srli	r3,r3,1
 800b9cc:	00800044 	movi	r2,1
 800b9d0:	20c00015 	stw	r3,0(r4)
 800b9d4:	f800283a 	ret

0800b9d8 <__i2b>:
 800b9d8:	defffd04 	addi	sp,sp,-12
 800b9dc:	dc000015 	stw	r16,0(sp)
 800b9e0:	04000044 	movi	r16,1
 800b9e4:	dc400115 	stw	r17,4(sp)
 800b9e8:	2823883a 	mov	r17,r5
 800b9ec:	800b883a 	mov	r5,r16
 800b9f0:	dfc00215 	stw	ra,8(sp)
 800b9f4:	800b5a40 	call	800b5a4 <_Balloc>
 800b9f8:	14400515 	stw	r17,20(r2)
 800b9fc:	14000415 	stw	r16,16(r2)
 800ba00:	dfc00217 	ldw	ra,8(sp)
 800ba04:	dc400117 	ldw	r17,4(sp)
 800ba08:	dc000017 	ldw	r16,0(sp)
 800ba0c:	dec00304 	addi	sp,sp,12
 800ba10:	f800283a 	ret

0800ba14 <__multiply>:
 800ba14:	deffef04 	addi	sp,sp,-68
 800ba18:	dc400815 	stw	r17,32(sp)
 800ba1c:	dc000715 	stw	r16,28(sp)
 800ba20:	34400417 	ldw	r17,16(r6)
 800ba24:	2c000417 	ldw	r16,16(r5)
 800ba28:	dd800d15 	stw	r22,52(sp)
 800ba2c:	dc800915 	stw	r18,36(sp)
 800ba30:	dfc01015 	stw	ra,64(sp)
 800ba34:	df000f15 	stw	fp,60(sp)
 800ba38:	ddc00e15 	stw	r23,56(sp)
 800ba3c:	dd400c15 	stw	r21,48(sp)
 800ba40:	dd000b15 	stw	r20,44(sp)
 800ba44:	dcc00a15 	stw	r19,40(sp)
 800ba48:	2825883a 	mov	r18,r5
 800ba4c:	302d883a 	mov	r22,r6
 800ba50:	8440050e 	bge	r16,r17,800ba68 <__multiply+0x54>
 800ba54:	8007883a 	mov	r3,r16
 800ba58:	3025883a 	mov	r18,r6
 800ba5c:	8821883a 	mov	r16,r17
 800ba60:	282d883a 	mov	r22,r5
 800ba64:	1823883a 	mov	r17,r3
 800ba68:	90800217 	ldw	r2,8(r18)
 800ba6c:	8447883a 	add	r3,r16,r17
 800ba70:	d8c00215 	stw	r3,8(sp)
 800ba74:	91400117 	ldw	r5,4(r18)
 800ba78:	10c0010e 	bge	r2,r3,800ba80 <__multiply+0x6c>
 800ba7c:	29400044 	addi	r5,r5,1
 800ba80:	800b5a40 	call	800b5a4 <_Balloc>
 800ba84:	d8c00217 	ldw	r3,8(sp)
 800ba88:	d8800615 	stw	r2,24(sp)
 800ba8c:	18eb883a 	add	r21,r3,r3
 800ba90:	ad6b883a 	add	r21,r21,r21
 800ba94:	10c00504 	addi	r3,r2,20
 800ba98:	1d6b883a 	add	r21,r3,r21
 800ba9c:	d8c00115 	stw	r3,4(sp)
 800baa0:	dd400315 	stw	r21,12(sp)
 800baa4:	1805883a 	mov	r2,r3
 800baa8:	1d40042e 	bgeu	r3,r21,800babc <__multiply+0xa8>
 800baac:	d8c00317 	ldw	r3,12(sp)
 800bab0:	10000015 	stw	zero,0(r2)
 800bab4:	10800104 	addi	r2,r2,4
 800bab8:	10fffc36 	bltu	r2,r3,800baac <__alt_data_end+0xfc00baac>
 800babc:	8c63883a 	add	r17,r17,r17
 800bac0:	b5800504 	addi	r22,r22,20
 800bac4:	8c63883a 	add	r17,r17,r17
 800bac8:	94800504 	addi	r18,r18,20
 800bacc:	8421883a 	add	r16,r16,r16
 800bad0:	b463883a 	add	r17,r22,r17
 800bad4:	8421883a 	add	r16,r16,r16
 800bad8:	dd800015 	stw	r22,0(sp)
 800badc:	dc800415 	stw	r18,16(sp)
 800bae0:	dc400515 	stw	r17,20(sp)
 800bae4:	9429883a 	add	r20,r18,r16
 800bae8:	b4404f2e 	bgeu	r22,r17,800bc28 <__multiply+0x214>
 800baec:	d8c00017 	ldw	r3,0(sp)
 800baf0:	1c800017 	ldw	r18,0(r3)
 800baf4:	947fffcc 	andi	r17,r18,65535
 800baf8:	88001e26 	beq	r17,zero,800bb74 <__multiply+0x160>
 800bafc:	dd800117 	ldw	r22,4(sp)
 800bb00:	dd400417 	ldw	r21,16(sp)
 800bb04:	0027883a 	mov	r19,zero
 800bb08:	ac800017 	ldw	r18,0(r21)
 800bb0c:	b4000017 	ldw	r16,0(r22)
 800bb10:	880b883a 	mov	r5,r17
 800bb14:	913fffcc 	andi	r4,r18,65535
 800bb18:	80028f40 	call	80028f4 <__mulsi3>
 800bb1c:	9008d43a 	srli	r4,r18,16
 800bb20:	84bfffcc 	andi	r18,r16,65535
 800bb24:	1485883a 	add	r2,r2,r18
 800bb28:	14e5883a 	add	r18,r2,r19
 800bb2c:	8020d43a 	srli	r16,r16,16
 800bb30:	9026d43a 	srli	r19,r18,16
 800bb34:	880b883a 	mov	r5,r17
 800bb38:	80028f40 	call	80028f4 <__mulsi3>
 800bb3c:	1405883a 	add	r2,r2,r16
 800bb40:	14e1883a 	add	r16,r2,r19
 800bb44:	90ffffcc 	andi	r3,r18,65535
 800bb48:	8024943a 	slli	r18,r16,16
 800bb4c:	ad400104 	addi	r21,r21,4
 800bb50:	b005883a 	mov	r2,r22
 800bb54:	90c6b03a 	or	r3,r18,r3
 800bb58:	b0c00015 	stw	r3,0(r22)
 800bb5c:	8026d43a 	srli	r19,r16,16
 800bb60:	b5800104 	addi	r22,r22,4
 800bb64:	ad3fe836 	bltu	r21,r20,800bb08 <__alt_data_end+0xfc00bb08>
 800bb68:	d8c00017 	ldw	r3,0(sp)
 800bb6c:	14c00115 	stw	r19,4(r2)
 800bb70:	1c800017 	ldw	r18,0(r3)
 800bb74:	9024d43a 	srli	r18,r18,16
 800bb78:	90002226 	beq	r18,zero,800bc04 <__multiply+0x1f0>
 800bb7c:	d8c00117 	ldw	r3,4(sp)
 800bb80:	dd800417 	ldw	r22,16(sp)
 800bb84:	002f883a 	mov	r23,zero
 800bb88:	1f000017 	ldw	fp,0(r3)
 800bb8c:	1823883a 	mov	r17,r3
 800bb90:	182b883a 	mov	r21,r3
 800bb94:	e021883a 	mov	r16,fp
 800bb98:	00000106 	br	800bba0 <__multiply+0x18c>
 800bb9c:	982b883a 	mov	r21,r19
 800bba0:	b100000b 	ldhu	r4,0(r22)
 800bba4:	8020d43a 	srli	r16,r16,16
 800bba8:	900b883a 	mov	r5,r18
 800bbac:	80028f40 	call	80028f4 <__mulsi3>
 800bbb0:	1405883a 	add	r2,r2,r16
 800bbb4:	15ef883a 	add	r23,r2,r23
 800bbb8:	b804943a 	slli	r2,r23,16
 800bbbc:	e0ffffcc 	andi	r3,fp,65535
 800bbc0:	8c400104 	addi	r17,r17,4
 800bbc4:	10c6b03a 	or	r3,r2,r3
 800bbc8:	88ffff15 	stw	r3,-4(r17)
 800bbcc:	b5800104 	addi	r22,r22,4
 800bbd0:	b13fff17 	ldw	r4,-4(r22)
 800bbd4:	acc00104 	addi	r19,r21,4
 800bbd8:	900b883a 	mov	r5,r18
 800bbdc:	2008d43a 	srli	r4,r4,16
 800bbe0:	9c000017 	ldw	r16,0(r19)
 800bbe4:	80028f40 	call	80028f4 <__mulsi3>
 800bbe8:	b806d43a 	srli	r3,r23,16
 800bbec:	813fffcc 	andi	r4,r16,65535
 800bbf0:	1105883a 	add	r2,r2,r4
 800bbf4:	10f9883a 	add	fp,r2,r3
 800bbf8:	e02ed43a 	srli	r23,fp,16
 800bbfc:	b53fe736 	bltu	r22,r20,800bb9c <__alt_data_end+0xfc00bb9c>
 800bc00:	af000115 	stw	fp,4(r21)
 800bc04:	d8c00017 	ldw	r3,0(sp)
 800bc08:	d9000517 	ldw	r4,20(sp)
 800bc0c:	18c00104 	addi	r3,r3,4
 800bc10:	d8c00015 	stw	r3,0(sp)
 800bc14:	d8c00117 	ldw	r3,4(sp)
 800bc18:	18c00104 	addi	r3,r3,4
 800bc1c:	d8c00115 	stw	r3,4(sp)
 800bc20:	d8c00017 	ldw	r3,0(sp)
 800bc24:	193fb136 	bltu	r3,r4,800baec <__alt_data_end+0xfc00baec>
 800bc28:	d8c00217 	ldw	r3,8(sp)
 800bc2c:	00c00c0e 	bge	zero,r3,800bc60 <__multiply+0x24c>
 800bc30:	d8c00317 	ldw	r3,12(sp)
 800bc34:	18bfff17 	ldw	r2,-4(r3)
 800bc38:	1d7fff04 	addi	r21,r3,-4
 800bc3c:	10000326 	beq	r2,zero,800bc4c <__multiply+0x238>
 800bc40:	00000706 	br	800bc60 <__multiply+0x24c>
 800bc44:	a8800017 	ldw	r2,0(r21)
 800bc48:	1000051e 	bne	r2,zero,800bc60 <__multiply+0x24c>
 800bc4c:	d8c00217 	ldw	r3,8(sp)
 800bc50:	ad7fff04 	addi	r21,r21,-4
 800bc54:	18ffffc4 	addi	r3,r3,-1
 800bc58:	d8c00215 	stw	r3,8(sp)
 800bc5c:	183ff91e 	bne	r3,zero,800bc44 <__alt_data_end+0xfc00bc44>
 800bc60:	d8c00617 	ldw	r3,24(sp)
 800bc64:	d9000217 	ldw	r4,8(sp)
 800bc68:	1805883a 	mov	r2,r3
 800bc6c:	19000415 	stw	r4,16(r3)
 800bc70:	dfc01017 	ldw	ra,64(sp)
 800bc74:	df000f17 	ldw	fp,60(sp)
 800bc78:	ddc00e17 	ldw	r23,56(sp)
 800bc7c:	dd800d17 	ldw	r22,52(sp)
 800bc80:	dd400c17 	ldw	r21,48(sp)
 800bc84:	dd000b17 	ldw	r20,44(sp)
 800bc88:	dcc00a17 	ldw	r19,40(sp)
 800bc8c:	dc800917 	ldw	r18,36(sp)
 800bc90:	dc400817 	ldw	r17,32(sp)
 800bc94:	dc000717 	ldw	r16,28(sp)
 800bc98:	dec01104 	addi	sp,sp,68
 800bc9c:	f800283a 	ret

0800bca0 <__pow5mult>:
 800bca0:	defffa04 	addi	sp,sp,-24
 800bca4:	dcc00315 	stw	r19,12(sp)
 800bca8:	dc000015 	stw	r16,0(sp)
 800bcac:	dfc00515 	stw	ra,20(sp)
 800bcb0:	dd000415 	stw	r20,16(sp)
 800bcb4:	dc800215 	stw	r18,8(sp)
 800bcb8:	dc400115 	stw	r17,4(sp)
 800bcbc:	308000cc 	andi	r2,r6,3
 800bcc0:	3021883a 	mov	r16,r6
 800bcc4:	2027883a 	mov	r19,r4
 800bcc8:	10002f1e 	bne	r2,zero,800bd88 <__pow5mult+0xe8>
 800bccc:	2825883a 	mov	r18,r5
 800bcd0:	8021d0ba 	srai	r16,r16,2
 800bcd4:	80001a26 	beq	r16,zero,800bd40 <__pow5mult+0xa0>
 800bcd8:	9c401217 	ldw	r17,72(r19)
 800bcdc:	8800061e 	bne	r17,zero,800bcf8 <__pow5mult+0x58>
 800bce0:	00003406 	br	800bdb4 <__pow5mult+0x114>
 800bce4:	8021d07a 	srai	r16,r16,1
 800bce8:	80001526 	beq	r16,zero,800bd40 <__pow5mult+0xa0>
 800bcec:	88800017 	ldw	r2,0(r17)
 800bcf0:	10001c26 	beq	r2,zero,800bd64 <__pow5mult+0xc4>
 800bcf4:	1023883a 	mov	r17,r2
 800bcf8:	8080004c 	andi	r2,r16,1
 800bcfc:	103ff926 	beq	r2,zero,800bce4 <__alt_data_end+0xfc00bce4>
 800bd00:	880d883a 	mov	r6,r17
 800bd04:	900b883a 	mov	r5,r18
 800bd08:	9809883a 	mov	r4,r19
 800bd0c:	800ba140 	call	800ba14 <__multiply>
 800bd10:	90001b26 	beq	r18,zero,800bd80 <__pow5mult+0xe0>
 800bd14:	91000117 	ldw	r4,4(r18)
 800bd18:	98c01317 	ldw	r3,76(r19)
 800bd1c:	8021d07a 	srai	r16,r16,1
 800bd20:	2109883a 	add	r4,r4,r4
 800bd24:	2109883a 	add	r4,r4,r4
 800bd28:	1907883a 	add	r3,r3,r4
 800bd2c:	19000017 	ldw	r4,0(r3)
 800bd30:	91000015 	stw	r4,0(r18)
 800bd34:	1c800015 	stw	r18,0(r3)
 800bd38:	1025883a 	mov	r18,r2
 800bd3c:	803feb1e 	bne	r16,zero,800bcec <__alt_data_end+0xfc00bcec>
 800bd40:	9005883a 	mov	r2,r18
 800bd44:	dfc00517 	ldw	ra,20(sp)
 800bd48:	dd000417 	ldw	r20,16(sp)
 800bd4c:	dcc00317 	ldw	r19,12(sp)
 800bd50:	dc800217 	ldw	r18,8(sp)
 800bd54:	dc400117 	ldw	r17,4(sp)
 800bd58:	dc000017 	ldw	r16,0(sp)
 800bd5c:	dec00604 	addi	sp,sp,24
 800bd60:	f800283a 	ret
 800bd64:	880d883a 	mov	r6,r17
 800bd68:	880b883a 	mov	r5,r17
 800bd6c:	9809883a 	mov	r4,r19
 800bd70:	800ba140 	call	800ba14 <__multiply>
 800bd74:	88800015 	stw	r2,0(r17)
 800bd78:	10000015 	stw	zero,0(r2)
 800bd7c:	003fdd06 	br	800bcf4 <__alt_data_end+0xfc00bcf4>
 800bd80:	1025883a 	mov	r18,r2
 800bd84:	003fd706 	br	800bce4 <__alt_data_end+0xfc00bce4>
 800bd88:	10bfffc4 	addi	r2,r2,-1
 800bd8c:	1085883a 	add	r2,r2,r2
 800bd90:	00c200b4 	movhi	r3,2050
 800bd94:	18efb504 	addi	r3,r3,-16684
 800bd98:	1085883a 	add	r2,r2,r2
 800bd9c:	1885883a 	add	r2,r3,r2
 800bda0:	11800017 	ldw	r6,0(r2)
 800bda4:	000f883a 	mov	r7,zero
 800bda8:	800b6740 	call	800b674 <__multadd>
 800bdac:	1025883a 	mov	r18,r2
 800bdb0:	003fc706 	br	800bcd0 <__alt_data_end+0xfc00bcd0>
 800bdb4:	05000044 	movi	r20,1
 800bdb8:	a00b883a 	mov	r5,r20
 800bdbc:	9809883a 	mov	r4,r19
 800bdc0:	800b5a40 	call	800b5a4 <_Balloc>
 800bdc4:	1023883a 	mov	r17,r2
 800bdc8:	00809c44 	movi	r2,625
 800bdcc:	88800515 	stw	r2,20(r17)
 800bdd0:	8d000415 	stw	r20,16(r17)
 800bdd4:	9c401215 	stw	r17,72(r19)
 800bdd8:	88000015 	stw	zero,0(r17)
 800bddc:	003fc606 	br	800bcf8 <__alt_data_end+0xfc00bcf8>

0800bde0 <__lshift>:
 800bde0:	defff904 	addi	sp,sp,-28
 800bde4:	dd400515 	stw	r21,20(sp)
 800bde8:	dcc00315 	stw	r19,12(sp)
 800bdec:	302bd17a 	srai	r21,r6,5
 800bdf0:	2cc00417 	ldw	r19,16(r5)
 800bdf4:	28800217 	ldw	r2,8(r5)
 800bdf8:	dd000415 	stw	r20,16(sp)
 800bdfc:	ace7883a 	add	r19,r21,r19
 800be00:	dc800215 	stw	r18,8(sp)
 800be04:	dc400115 	stw	r17,4(sp)
 800be08:	dc000015 	stw	r16,0(sp)
 800be0c:	dfc00615 	stw	ra,24(sp)
 800be10:	9c000044 	addi	r16,r19,1
 800be14:	2823883a 	mov	r17,r5
 800be18:	3029883a 	mov	r20,r6
 800be1c:	2025883a 	mov	r18,r4
 800be20:	29400117 	ldw	r5,4(r5)
 800be24:	1400030e 	bge	r2,r16,800be34 <__lshift+0x54>
 800be28:	1085883a 	add	r2,r2,r2
 800be2c:	29400044 	addi	r5,r5,1
 800be30:	143ffd16 	blt	r2,r16,800be28 <__alt_data_end+0xfc00be28>
 800be34:	9009883a 	mov	r4,r18
 800be38:	800b5a40 	call	800b5a4 <_Balloc>
 800be3c:	10c00504 	addi	r3,r2,20
 800be40:	0540070e 	bge	zero,r21,800be60 <__lshift+0x80>
 800be44:	ad6b883a 	add	r21,r21,r21
 800be48:	ad6b883a 	add	r21,r21,r21
 800be4c:	1809883a 	mov	r4,r3
 800be50:	1d47883a 	add	r3,r3,r21
 800be54:	20000015 	stw	zero,0(r4)
 800be58:	21000104 	addi	r4,r4,4
 800be5c:	193ffd1e 	bne	r3,r4,800be54 <__alt_data_end+0xfc00be54>
 800be60:	8a000417 	ldw	r8,16(r17)
 800be64:	89000504 	addi	r4,r17,20
 800be68:	a18007cc 	andi	r6,r20,31
 800be6c:	4211883a 	add	r8,r8,r8
 800be70:	4211883a 	add	r8,r8,r8
 800be74:	2211883a 	add	r8,r4,r8
 800be78:	30002326 	beq	r6,zero,800bf08 <__lshift+0x128>
 800be7c:	02400804 	movi	r9,32
 800be80:	4993c83a 	sub	r9,r9,r6
 800be84:	000b883a 	mov	r5,zero
 800be88:	21c00017 	ldw	r7,0(r4)
 800be8c:	1815883a 	mov	r10,r3
 800be90:	18c00104 	addi	r3,r3,4
 800be94:	398e983a 	sll	r7,r7,r6
 800be98:	21000104 	addi	r4,r4,4
 800be9c:	394ab03a 	or	r5,r7,r5
 800bea0:	197fff15 	stw	r5,-4(r3)
 800bea4:	217fff17 	ldw	r5,-4(r4)
 800bea8:	2a4ad83a 	srl	r5,r5,r9
 800beac:	223ff636 	bltu	r4,r8,800be88 <__alt_data_end+0xfc00be88>
 800beb0:	51400115 	stw	r5,4(r10)
 800beb4:	28001a1e 	bne	r5,zero,800bf20 <__lshift+0x140>
 800beb8:	843fffc4 	addi	r16,r16,-1
 800bebc:	14000415 	stw	r16,16(r2)
 800bec0:	88000826 	beq	r17,zero,800bee4 <__lshift+0x104>
 800bec4:	89000117 	ldw	r4,4(r17)
 800bec8:	90c01317 	ldw	r3,76(r18)
 800becc:	2109883a 	add	r4,r4,r4
 800bed0:	2109883a 	add	r4,r4,r4
 800bed4:	1907883a 	add	r3,r3,r4
 800bed8:	19000017 	ldw	r4,0(r3)
 800bedc:	89000015 	stw	r4,0(r17)
 800bee0:	1c400015 	stw	r17,0(r3)
 800bee4:	dfc00617 	ldw	ra,24(sp)
 800bee8:	dd400517 	ldw	r21,20(sp)
 800beec:	dd000417 	ldw	r20,16(sp)
 800bef0:	dcc00317 	ldw	r19,12(sp)
 800bef4:	dc800217 	ldw	r18,8(sp)
 800bef8:	dc400117 	ldw	r17,4(sp)
 800befc:	dc000017 	ldw	r16,0(sp)
 800bf00:	dec00704 	addi	sp,sp,28
 800bf04:	f800283a 	ret
 800bf08:	21400017 	ldw	r5,0(r4)
 800bf0c:	18c00104 	addi	r3,r3,4
 800bf10:	21000104 	addi	r4,r4,4
 800bf14:	197fff15 	stw	r5,-4(r3)
 800bf18:	223ffb36 	bltu	r4,r8,800bf08 <__alt_data_end+0xfc00bf08>
 800bf1c:	003fe606 	br	800beb8 <__alt_data_end+0xfc00beb8>
 800bf20:	9c000084 	addi	r16,r19,2
 800bf24:	003fe406 	br	800beb8 <__alt_data_end+0xfc00beb8>

0800bf28 <__mcmp>:
 800bf28:	20800417 	ldw	r2,16(r4)
 800bf2c:	28c00417 	ldw	r3,16(r5)
 800bf30:	10c5c83a 	sub	r2,r2,r3
 800bf34:	1000111e 	bne	r2,zero,800bf7c <__mcmp+0x54>
 800bf38:	18c7883a 	add	r3,r3,r3
 800bf3c:	18c7883a 	add	r3,r3,r3
 800bf40:	21000504 	addi	r4,r4,20
 800bf44:	29400504 	addi	r5,r5,20
 800bf48:	20c5883a 	add	r2,r4,r3
 800bf4c:	28cb883a 	add	r5,r5,r3
 800bf50:	00000106 	br	800bf58 <__mcmp+0x30>
 800bf54:	20800a2e 	bgeu	r4,r2,800bf80 <__mcmp+0x58>
 800bf58:	10bfff04 	addi	r2,r2,-4
 800bf5c:	297fff04 	addi	r5,r5,-4
 800bf60:	11800017 	ldw	r6,0(r2)
 800bf64:	28c00017 	ldw	r3,0(r5)
 800bf68:	30fffa26 	beq	r6,r3,800bf54 <__alt_data_end+0xfc00bf54>
 800bf6c:	30c00236 	bltu	r6,r3,800bf78 <__mcmp+0x50>
 800bf70:	00800044 	movi	r2,1
 800bf74:	f800283a 	ret
 800bf78:	00bfffc4 	movi	r2,-1
 800bf7c:	f800283a 	ret
 800bf80:	0005883a 	mov	r2,zero
 800bf84:	f800283a 	ret

0800bf88 <__mdiff>:
 800bf88:	28c00417 	ldw	r3,16(r5)
 800bf8c:	30800417 	ldw	r2,16(r6)
 800bf90:	defffa04 	addi	sp,sp,-24
 800bf94:	dcc00315 	stw	r19,12(sp)
 800bf98:	dc800215 	stw	r18,8(sp)
 800bf9c:	dfc00515 	stw	ra,20(sp)
 800bfa0:	dd000415 	stw	r20,16(sp)
 800bfa4:	dc400115 	stw	r17,4(sp)
 800bfa8:	dc000015 	stw	r16,0(sp)
 800bfac:	1887c83a 	sub	r3,r3,r2
 800bfb0:	2825883a 	mov	r18,r5
 800bfb4:	3027883a 	mov	r19,r6
 800bfb8:	1800141e 	bne	r3,zero,800c00c <__mdiff+0x84>
 800bfbc:	1085883a 	add	r2,r2,r2
 800bfc0:	1085883a 	add	r2,r2,r2
 800bfc4:	2a000504 	addi	r8,r5,20
 800bfc8:	34000504 	addi	r16,r6,20
 800bfcc:	4087883a 	add	r3,r8,r2
 800bfd0:	8085883a 	add	r2,r16,r2
 800bfd4:	00000106 	br	800bfdc <__mdiff+0x54>
 800bfd8:	40c0592e 	bgeu	r8,r3,800c140 <__mdiff+0x1b8>
 800bfdc:	18ffff04 	addi	r3,r3,-4
 800bfe0:	10bfff04 	addi	r2,r2,-4
 800bfe4:	19c00017 	ldw	r7,0(r3)
 800bfe8:	11400017 	ldw	r5,0(r2)
 800bfec:	397ffa26 	beq	r7,r5,800bfd8 <__alt_data_end+0xfc00bfd8>
 800bff0:	3940592e 	bgeu	r7,r5,800c158 <__mdiff+0x1d0>
 800bff4:	9005883a 	mov	r2,r18
 800bff8:	4023883a 	mov	r17,r8
 800bffc:	9825883a 	mov	r18,r19
 800c000:	05000044 	movi	r20,1
 800c004:	1027883a 	mov	r19,r2
 800c008:	00000406 	br	800c01c <__mdiff+0x94>
 800c00c:	18005616 	blt	r3,zero,800c168 <__mdiff+0x1e0>
 800c010:	34400504 	addi	r17,r6,20
 800c014:	2c000504 	addi	r16,r5,20
 800c018:	0029883a 	mov	r20,zero
 800c01c:	91400117 	ldw	r5,4(r18)
 800c020:	800b5a40 	call	800b5a4 <_Balloc>
 800c024:	92400417 	ldw	r9,16(r18)
 800c028:	9b000417 	ldw	r12,16(r19)
 800c02c:	12c00504 	addi	r11,r2,20
 800c030:	4a51883a 	add	r8,r9,r9
 800c034:	6319883a 	add	r12,r12,r12
 800c038:	4211883a 	add	r8,r8,r8
 800c03c:	6319883a 	add	r12,r12,r12
 800c040:	15000315 	stw	r20,12(r2)
 800c044:	8211883a 	add	r8,r16,r8
 800c048:	8b19883a 	add	r12,r17,r12
 800c04c:	0007883a 	mov	r3,zero
 800c050:	81400017 	ldw	r5,0(r16)
 800c054:	89c00017 	ldw	r7,0(r17)
 800c058:	59800104 	addi	r6,r11,4
 800c05c:	293fffcc 	andi	r4,r5,65535
 800c060:	20c7883a 	add	r3,r4,r3
 800c064:	393fffcc 	andi	r4,r7,65535
 800c068:	1909c83a 	sub	r4,r3,r4
 800c06c:	280ad43a 	srli	r5,r5,16
 800c070:	380ed43a 	srli	r7,r7,16
 800c074:	2007d43a 	srai	r3,r4,16
 800c078:	213fffcc 	andi	r4,r4,65535
 800c07c:	29cbc83a 	sub	r5,r5,r7
 800c080:	28c7883a 	add	r3,r5,r3
 800c084:	180a943a 	slli	r5,r3,16
 800c088:	8c400104 	addi	r17,r17,4
 800c08c:	84000104 	addi	r16,r16,4
 800c090:	2908b03a 	or	r4,r5,r4
 800c094:	59000015 	stw	r4,0(r11)
 800c098:	1807d43a 	srai	r3,r3,16
 800c09c:	3015883a 	mov	r10,r6
 800c0a0:	3017883a 	mov	r11,r6
 800c0a4:	8b3fea36 	bltu	r17,r12,800c050 <__alt_data_end+0xfc00c050>
 800c0a8:	8200162e 	bgeu	r16,r8,800c104 <__mdiff+0x17c>
 800c0ac:	8017883a 	mov	r11,r16
 800c0b0:	59400017 	ldw	r5,0(r11)
 800c0b4:	31800104 	addi	r6,r6,4
 800c0b8:	5ac00104 	addi	r11,r11,4
 800c0bc:	293fffcc 	andi	r4,r5,65535
 800c0c0:	20c7883a 	add	r3,r4,r3
 800c0c4:	280ed43a 	srli	r7,r5,16
 800c0c8:	180bd43a 	srai	r5,r3,16
 800c0cc:	193fffcc 	andi	r4,r3,65535
 800c0d0:	3947883a 	add	r3,r7,r5
 800c0d4:	180a943a 	slli	r5,r3,16
 800c0d8:	1807d43a 	srai	r3,r3,16
 800c0dc:	2908b03a 	or	r4,r5,r4
 800c0e0:	313fff15 	stw	r4,-4(r6)
 800c0e4:	5a3ff236 	bltu	r11,r8,800c0b0 <__alt_data_end+0xfc00c0b0>
 800c0e8:	0406303a 	nor	r3,zero,r16
 800c0ec:	1a07883a 	add	r3,r3,r8
 800c0f0:	1806d0ba 	srli	r3,r3,2
 800c0f4:	18c00044 	addi	r3,r3,1
 800c0f8:	18c7883a 	add	r3,r3,r3
 800c0fc:	18c7883a 	add	r3,r3,r3
 800c100:	50d5883a 	add	r10,r10,r3
 800c104:	50ffff04 	addi	r3,r10,-4
 800c108:	2000041e 	bne	r4,zero,800c11c <__mdiff+0x194>
 800c10c:	18ffff04 	addi	r3,r3,-4
 800c110:	19000017 	ldw	r4,0(r3)
 800c114:	4a7fffc4 	addi	r9,r9,-1
 800c118:	203ffc26 	beq	r4,zero,800c10c <__alt_data_end+0xfc00c10c>
 800c11c:	12400415 	stw	r9,16(r2)
 800c120:	dfc00517 	ldw	ra,20(sp)
 800c124:	dd000417 	ldw	r20,16(sp)
 800c128:	dcc00317 	ldw	r19,12(sp)
 800c12c:	dc800217 	ldw	r18,8(sp)
 800c130:	dc400117 	ldw	r17,4(sp)
 800c134:	dc000017 	ldw	r16,0(sp)
 800c138:	dec00604 	addi	sp,sp,24
 800c13c:	f800283a 	ret
 800c140:	000b883a 	mov	r5,zero
 800c144:	800b5a40 	call	800b5a4 <_Balloc>
 800c148:	00c00044 	movi	r3,1
 800c14c:	10c00415 	stw	r3,16(r2)
 800c150:	10000515 	stw	zero,20(r2)
 800c154:	003ff206 	br	800c120 <__alt_data_end+0xfc00c120>
 800c158:	8023883a 	mov	r17,r16
 800c15c:	0029883a 	mov	r20,zero
 800c160:	4021883a 	mov	r16,r8
 800c164:	003fad06 	br	800c01c <__alt_data_end+0xfc00c01c>
 800c168:	9005883a 	mov	r2,r18
 800c16c:	94400504 	addi	r17,r18,20
 800c170:	9c000504 	addi	r16,r19,20
 800c174:	9825883a 	mov	r18,r19
 800c178:	05000044 	movi	r20,1
 800c17c:	1027883a 	mov	r19,r2
 800c180:	003fa606 	br	800c01c <__alt_data_end+0xfc00c01c>

0800c184 <__ulp>:
 800c184:	295ffc2c 	andhi	r5,r5,32752
 800c188:	00bf3034 	movhi	r2,64704
 800c18c:	2887883a 	add	r3,r5,r2
 800c190:	00c0020e 	bge	zero,r3,800c19c <__ulp+0x18>
 800c194:	0005883a 	mov	r2,zero
 800c198:	f800283a 	ret
 800c19c:	00c7c83a 	sub	r3,zero,r3
 800c1a0:	1807d53a 	srai	r3,r3,20
 800c1a4:	008004c4 	movi	r2,19
 800c1a8:	10c00b0e 	bge	r2,r3,800c1d8 <__ulp+0x54>
 800c1ac:	18bffb04 	addi	r2,r3,-20
 800c1b0:	01000784 	movi	r4,30
 800c1b4:	0007883a 	mov	r3,zero
 800c1b8:	20800516 	blt	r4,r2,800c1d0 <__ulp+0x4c>
 800c1bc:	010007c4 	movi	r4,31
 800c1c0:	2089c83a 	sub	r4,r4,r2
 800c1c4:	00800044 	movi	r2,1
 800c1c8:	1104983a 	sll	r2,r2,r4
 800c1cc:	f800283a 	ret
 800c1d0:	00800044 	movi	r2,1
 800c1d4:	f800283a 	ret
 800c1d8:	01400234 	movhi	r5,8
 800c1dc:	28c7d83a 	sra	r3,r5,r3
 800c1e0:	0005883a 	mov	r2,zero
 800c1e4:	f800283a 	ret

0800c1e8 <__b2d>:
 800c1e8:	defffa04 	addi	sp,sp,-24
 800c1ec:	dc000015 	stw	r16,0(sp)
 800c1f0:	24000417 	ldw	r16,16(r4)
 800c1f4:	dc400115 	stw	r17,4(sp)
 800c1f8:	24400504 	addi	r17,r4,20
 800c1fc:	8421883a 	add	r16,r16,r16
 800c200:	8421883a 	add	r16,r16,r16
 800c204:	8c21883a 	add	r16,r17,r16
 800c208:	dc800215 	stw	r18,8(sp)
 800c20c:	84bfff17 	ldw	r18,-4(r16)
 800c210:	dd000415 	stw	r20,16(sp)
 800c214:	dcc00315 	stw	r19,12(sp)
 800c218:	9009883a 	mov	r4,r18
 800c21c:	2829883a 	mov	r20,r5
 800c220:	dfc00515 	stw	ra,20(sp)
 800c224:	800b8c00 	call	800b8c0 <__hi0bits>
 800c228:	00c00804 	movi	r3,32
 800c22c:	1889c83a 	sub	r4,r3,r2
 800c230:	a1000015 	stw	r4,0(r20)
 800c234:	01000284 	movi	r4,10
 800c238:	84ffff04 	addi	r19,r16,-4
 800c23c:	20801216 	blt	r4,r2,800c288 <__b2d+0xa0>
 800c240:	018002c4 	movi	r6,11
 800c244:	308dc83a 	sub	r6,r6,r2
 800c248:	9186d83a 	srl	r3,r18,r6
 800c24c:	18cffc34 	orhi	r3,r3,16368
 800c250:	8cc0212e 	bgeu	r17,r19,800c2d8 <__b2d+0xf0>
 800c254:	813ffe17 	ldw	r4,-8(r16)
 800c258:	218cd83a 	srl	r6,r4,r6
 800c25c:	10800544 	addi	r2,r2,21
 800c260:	9084983a 	sll	r2,r18,r2
 800c264:	1184b03a 	or	r2,r2,r6
 800c268:	dfc00517 	ldw	ra,20(sp)
 800c26c:	dd000417 	ldw	r20,16(sp)
 800c270:	dcc00317 	ldw	r19,12(sp)
 800c274:	dc800217 	ldw	r18,8(sp)
 800c278:	dc400117 	ldw	r17,4(sp)
 800c27c:	dc000017 	ldw	r16,0(sp)
 800c280:	dec00604 	addi	sp,sp,24
 800c284:	f800283a 	ret
 800c288:	8cc00f2e 	bgeu	r17,r19,800c2c8 <__b2d+0xe0>
 800c28c:	117ffd44 	addi	r5,r2,-11
 800c290:	80bffe17 	ldw	r2,-8(r16)
 800c294:	28000e26 	beq	r5,zero,800c2d0 <__b2d+0xe8>
 800c298:	1949c83a 	sub	r4,r3,r5
 800c29c:	9164983a 	sll	r18,r18,r5
 800c2a0:	1106d83a 	srl	r3,r2,r4
 800c2a4:	81bffe04 	addi	r6,r16,-8
 800c2a8:	948ffc34 	orhi	r18,r18,16368
 800c2ac:	90c6b03a 	or	r3,r18,r3
 800c2b0:	89800e2e 	bgeu	r17,r6,800c2ec <__b2d+0x104>
 800c2b4:	81bffd17 	ldw	r6,-12(r16)
 800c2b8:	1144983a 	sll	r2,r2,r5
 800c2bc:	310ad83a 	srl	r5,r6,r4
 800c2c0:	2884b03a 	or	r2,r5,r2
 800c2c4:	003fe806 	br	800c268 <__alt_data_end+0xfc00c268>
 800c2c8:	10bffd44 	addi	r2,r2,-11
 800c2cc:	1000041e 	bne	r2,zero,800c2e0 <__b2d+0xf8>
 800c2d0:	90cffc34 	orhi	r3,r18,16368
 800c2d4:	003fe406 	br	800c268 <__alt_data_end+0xfc00c268>
 800c2d8:	000d883a 	mov	r6,zero
 800c2dc:	003fdf06 	br	800c25c <__alt_data_end+0xfc00c25c>
 800c2e0:	90a4983a 	sll	r18,r18,r2
 800c2e4:	0005883a 	mov	r2,zero
 800c2e8:	003ff906 	br	800c2d0 <__alt_data_end+0xfc00c2d0>
 800c2ec:	1144983a 	sll	r2,r2,r5
 800c2f0:	003fdd06 	br	800c268 <__alt_data_end+0xfc00c268>

0800c2f4 <__d2b>:
 800c2f4:	defff804 	addi	sp,sp,-32
 800c2f8:	dc000215 	stw	r16,8(sp)
 800c2fc:	3021883a 	mov	r16,r6
 800c300:	dc400315 	stw	r17,12(sp)
 800c304:	8022907a 	slli	r17,r16,1
 800c308:	dd000615 	stw	r20,24(sp)
 800c30c:	2829883a 	mov	r20,r5
 800c310:	01400044 	movi	r5,1
 800c314:	dcc00515 	stw	r19,20(sp)
 800c318:	dc800415 	stw	r18,16(sp)
 800c31c:	dfc00715 	stw	ra,28(sp)
 800c320:	3825883a 	mov	r18,r7
 800c324:	8822d57a 	srli	r17,r17,21
 800c328:	800b5a40 	call	800b5a4 <_Balloc>
 800c32c:	1027883a 	mov	r19,r2
 800c330:	00800434 	movhi	r2,16
 800c334:	10bfffc4 	addi	r2,r2,-1
 800c338:	808c703a 	and	r6,r16,r2
 800c33c:	88000126 	beq	r17,zero,800c344 <__d2b+0x50>
 800c340:	31800434 	orhi	r6,r6,16
 800c344:	d9800015 	stw	r6,0(sp)
 800c348:	a0002426 	beq	r20,zero,800c3dc <__d2b+0xe8>
 800c34c:	d9000104 	addi	r4,sp,4
 800c350:	dd000115 	stw	r20,4(sp)
 800c354:	800b9280 	call	800b928 <__lo0bits>
 800c358:	d8c00017 	ldw	r3,0(sp)
 800c35c:	10002f1e 	bne	r2,zero,800c41c <__d2b+0x128>
 800c360:	d9000117 	ldw	r4,4(sp)
 800c364:	99000515 	stw	r4,20(r19)
 800c368:	1821003a 	cmpeq	r16,r3,zero
 800c36c:	01000084 	movi	r4,2
 800c370:	2421c83a 	sub	r16,r4,r16
 800c374:	98c00615 	stw	r3,24(r19)
 800c378:	9c000415 	stw	r16,16(r19)
 800c37c:	88001f1e 	bne	r17,zero,800c3fc <__d2b+0x108>
 800c380:	10bef384 	addi	r2,r2,-1074
 800c384:	90800015 	stw	r2,0(r18)
 800c388:	00900034 	movhi	r2,16384
 800c38c:	10bfffc4 	addi	r2,r2,-1
 800c390:	8085883a 	add	r2,r16,r2
 800c394:	1085883a 	add	r2,r2,r2
 800c398:	1085883a 	add	r2,r2,r2
 800c39c:	9885883a 	add	r2,r19,r2
 800c3a0:	11000517 	ldw	r4,20(r2)
 800c3a4:	8020917a 	slli	r16,r16,5
 800c3a8:	800b8c00 	call	800b8c0 <__hi0bits>
 800c3ac:	d8c00817 	ldw	r3,32(sp)
 800c3b0:	8085c83a 	sub	r2,r16,r2
 800c3b4:	18800015 	stw	r2,0(r3)
 800c3b8:	9805883a 	mov	r2,r19
 800c3bc:	dfc00717 	ldw	ra,28(sp)
 800c3c0:	dd000617 	ldw	r20,24(sp)
 800c3c4:	dcc00517 	ldw	r19,20(sp)
 800c3c8:	dc800417 	ldw	r18,16(sp)
 800c3cc:	dc400317 	ldw	r17,12(sp)
 800c3d0:	dc000217 	ldw	r16,8(sp)
 800c3d4:	dec00804 	addi	sp,sp,32
 800c3d8:	f800283a 	ret
 800c3dc:	d809883a 	mov	r4,sp
 800c3e0:	800b9280 	call	800b928 <__lo0bits>
 800c3e4:	d8c00017 	ldw	r3,0(sp)
 800c3e8:	04000044 	movi	r16,1
 800c3ec:	9c000415 	stw	r16,16(r19)
 800c3f0:	98c00515 	stw	r3,20(r19)
 800c3f4:	10800804 	addi	r2,r2,32
 800c3f8:	883fe126 	beq	r17,zero,800c380 <__alt_data_end+0xfc00c380>
 800c3fc:	00c00d44 	movi	r3,53
 800c400:	8c7ef344 	addi	r17,r17,-1075
 800c404:	88a3883a 	add	r17,r17,r2
 800c408:	1885c83a 	sub	r2,r3,r2
 800c40c:	d8c00817 	ldw	r3,32(sp)
 800c410:	94400015 	stw	r17,0(r18)
 800c414:	18800015 	stw	r2,0(r3)
 800c418:	003fe706 	br	800c3b8 <__alt_data_end+0xfc00c3b8>
 800c41c:	01000804 	movi	r4,32
 800c420:	2089c83a 	sub	r4,r4,r2
 800c424:	1908983a 	sll	r4,r3,r4
 800c428:	d9400117 	ldw	r5,4(sp)
 800c42c:	1886d83a 	srl	r3,r3,r2
 800c430:	2148b03a 	or	r4,r4,r5
 800c434:	99000515 	stw	r4,20(r19)
 800c438:	d8c00015 	stw	r3,0(sp)
 800c43c:	003fca06 	br	800c368 <__alt_data_end+0xfc00c368>

0800c440 <__ratio>:
 800c440:	defff904 	addi	sp,sp,-28
 800c444:	dc400315 	stw	r17,12(sp)
 800c448:	2823883a 	mov	r17,r5
 800c44c:	d9400104 	addi	r5,sp,4
 800c450:	dfc00615 	stw	ra,24(sp)
 800c454:	dcc00515 	stw	r19,20(sp)
 800c458:	dc800415 	stw	r18,16(sp)
 800c45c:	2027883a 	mov	r19,r4
 800c460:	dc000215 	stw	r16,8(sp)
 800c464:	800c1e80 	call	800c1e8 <__b2d>
 800c468:	d80b883a 	mov	r5,sp
 800c46c:	8809883a 	mov	r4,r17
 800c470:	1025883a 	mov	r18,r2
 800c474:	1821883a 	mov	r16,r3
 800c478:	800c1e80 	call	800c1e8 <__b2d>
 800c47c:	8a000417 	ldw	r8,16(r17)
 800c480:	99000417 	ldw	r4,16(r19)
 800c484:	d9400117 	ldw	r5,4(sp)
 800c488:	2209c83a 	sub	r4,r4,r8
 800c48c:	2010917a 	slli	r8,r4,5
 800c490:	d9000017 	ldw	r4,0(sp)
 800c494:	2909c83a 	sub	r4,r5,r4
 800c498:	4109883a 	add	r4,r8,r4
 800c49c:	01000e0e 	bge	zero,r4,800c4d8 <__ratio+0x98>
 800c4a0:	2008953a 	slli	r4,r4,20
 800c4a4:	2421883a 	add	r16,r4,r16
 800c4a8:	100d883a 	mov	r6,r2
 800c4ac:	180f883a 	mov	r7,r3
 800c4b0:	9009883a 	mov	r4,r18
 800c4b4:	800b883a 	mov	r5,r16
 800c4b8:	8016dc40 	call	8016dc4 <__divdf3>
 800c4bc:	dfc00617 	ldw	ra,24(sp)
 800c4c0:	dcc00517 	ldw	r19,20(sp)
 800c4c4:	dc800417 	ldw	r18,16(sp)
 800c4c8:	dc400317 	ldw	r17,12(sp)
 800c4cc:	dc000217 	ldw	r16,8(sp)
 800c4d0:	dec00704 	addi	sp,sp,28
 800c4d4:	f800283a 	ret
 800c4d8:	2008953a 	slli	r4,r4,20
 800c4dc:	1907c83a 	sub	r3,r3,r4
 800c4e0:	003ff106 	br	800c4a8 <__alt_data_end+0xfc00c4a8>

0800c4e4 <_mprec_log10>:
 800c4e4:	defffe04 	addi	sp,sp,-8
 800c4e8:	dc000015 	stw	r16,0(sp)
 800c4ec:	dfc00115 	stw	ra,4(sp)
 800c4f0:	008005c4 	movi	r2,23
 800c4f4:	2021883a 	mov	r16,r4
 800c4f8:	11000d0e 	bge	r2,r4,800c530 <_mprec_log10+0x4c>
 800c4fc:	0005883a 	mov	r2,zero
 800c500:	00cffc34 	movhi	r3,16368
 800c504:	843fffc4 	addi	r16,r16,-1
 800c508:	000d883a 	mov	r6,zero
 800c50c:	01d00934 	movhi	r7,16420
 800c510:	1009883a 	mov	r4,r2
 800c514:	180b883a 	mov	r5,r3
 800c518:	80179ec0 	call	80179ec <__muldf3>
 800c51c:	803ff91e 	bne	r16,zero,800c504 <__alt_data_end+0xfc00c504>
 800c520:	dfc00117 	ldw	ra,4(sp)
 800c524:	dc000017 	ldw	r16,0(sp)
 800c528:	dec00204 	addi	sp,sp,8
 800c52c:	f800283a 	ret
 800c530:	202090fa 	slli	r16,r4,3
 800c534:	008200b4 	movhi	r2,2050
 800c538:	10afcc04 	addi	r2,r2,-16592
 800c53c:	1421883a 	add	r16,r2,r16
 800c540:	80800017 	ldw	r2,0(r16)
 800c544:	80c00117 	ldw	r3,4(r16)
 800c548:	dfc00117 	ldw	ra,4(sp)
 800c54c:	dc000017 	ldw	r16,0(sp)
 800c550:	dec00204 	addi	sp,sp,8
 800c554:	f800283a 	ret

0800c558 <__copybits>:
 800c558:	297fffc4 	addi	r5,r5,-1
 800c55c:	280fd17a 	srai	r7,r5,5
 800c560:	30c00417 	ldw	r3,16(r6)
 800c564:	30800504 	addi	r2,r6,20
 800c568:	39c00044 	addi	r7,r7,1
 800c56c:	18c7883a 	add	r3,r3,r3
 800c570:	39cf883a 	add	r7,r7,r7
 800c574:	18c7883a 	add	r3,r3,r3
 800c578:	39cf883a 	add	r7,r7,r7
 800c57c:	10c7883a 	add	r3,r2,r3
 800c580:	21cf883a 	add	r7,r4,r7
 800c584:	10c00d2e 	bgeu	r2,r3,800c5bc <__copybits+0x64>
 800c588:	200b883a 	mov	r5,r4
 800c58c:	12000017 	ldw	r8,0(r2)
 800c590:	29400104 	addi	r5,r5,4
 800c594:	10800104 	addi	r2,r2,4
 800c598:	2a3fff15 	stw	r8,-4(r5)
 800c59c:	10fffb36 	bltu	r2,r3,800c58c <__alt_data_end+0xfc00c58c>
 800c5a0:	1985c83a 	sub	r2,r3,r6
 800c5a4:	10bffac4 	addi	r2,r2,-21
 800c5a8:	1004d0ba 	srli	r2,r2,2
 800c5ac:	10800044 	addi	r2,r2,1
 800c5b0:	1085883a 	add	r2,r2,r2
 800c5b4:	1085883a 	add	r2,r2,r2
 800c5b8:	2089883a 	add	r4,r4,r2
 800c5bc:	21c0032e 	bgeu	r4,r7,800c5cc <__copybits+0x74>
 800c5c0:	20000015 	stw	zero,0(r4)
 800c5c4:	21000104 	addi	r4,r4,4
 800c5c8:	21fffd36 	bltu	r4,r7,800c5c0 <__alt_data_end+0xfc00c5c0>
 800c5cc:	f800283a 	ret

0800c5d0 <__any_on>:
 800c5d0:	20c00417 	ldw	r3,16(r4)
 800c5d4:	2805d17a 	srai	r2,r5,5
 800c5d8:	21000504 	addi	r4,r4,20
 800c5dc:	18800d0e 	bge	r3,r2,800c614 <__any_on+0x44>
 800c5e0:	18c7883a 	add	r3,r3,r3
 800c5e4:	18c7883a 	add	r3,r3,r3
 800c5e8:	20c7883a 	add	r3,r4,r3
 800c5ec:	20c0192e 	bgeu	r4,r3,800c654 <__any_on+0x84>
 800c5f0:	18bfff17 	ldw	r2,-4(r3)
 800c5f4:	18ffff04 	addi	r3,r3,-4
 800c5f8:	1000041e 	bne	r2,zero,800c60c <__any_on+0x3c>
 800c5fc:	20c0142e 	bgeu	r4,r3,800c650 <__any_on+0x80>
 800c600:	18ffff04 	addi	r3,r3,-4
 800c604:	19400017 	ldw	r5,0(r3)
 800c608:	283ffc26 	beq	r5,zero,800c5fc <__alt_data_end+0xfc00c5fc>
 800c60c:	00800044 	movi	r2,1
 800c610:	f800283a 	ret
 800c614:	10c00a0e 	bge	r2,r3,800c640 <__any_on+0x70>
 800c618:	1085883a 	add	r2,r2,r2
 800c61c:	1085883a 	add	r2,r2,r2
 800c620:	294007cc 	andi	r5,r5,31
 800c624:	2087883a 	add	r3,r4,r2
 800c628:	283ff026 	beq	r5,zero,800c5ec <__alt_data_end+0xfc00c5ec>
 800c62c:	19800017 	ldw	r6,0(r3)
 800c630:	3144d83a 	srl	r2,r6,r5
 800c634:	114a983a 	sll	r5,r2,r5
 800c638:	317ff41e 	bne	r6,r5,800c60c <__alt_data_end+0xfc00c60c>
 800c63c:	003feb06 	br	800c5ec <__alt_data_end+0xfc00c5ec>
 800c640:	1085883a 	add	r2,r2,r2
 800c644:	1085883a 	add	r2,r2,r2
 800c648:	2087883a 	add	r3,r4,r2
 800c64c:	003fe706 	br	800c5ec <__alt_data_end+0xfc00c5ec>
 800c650:	f800283a 	ret
 800c654:	0005883a 	mov	r2,zero
 800c658:	f800283a 	ret

0800c65c <_read_r>:
 800c65c:	defffd04 	addi	sp,sp,-12
 800c660:	2805883a 	mov	r2,r5
 800c664:	dc000015 	stw	r16,0(sp)
 800c668:	040200b4 	movhi	r16,2050
 800c66c:	dc400115 	stw	r17,4(sp)
 800c670:	300b883a 	mov	r5,r6
 800c674:	843e5904 	addi	r16,r16,-1692
 800c678:	2023883a 	mov	r17,r4
 800c67c:	380d883a 	mov	r6,r7
 800c680:	1009883a 	mov	r4,r2
 800c684:	dfc00215 	stw	ra,8(sp)
 800c688:	80000015 	stw	zero,0(r16)
 800c68c:	80198080 	call	8019808 <read>
 800c690:	00ffffc4 	movi	r3,-1
 800c694:	10c00526 	beq	r2,r3,800c6ac <_read_r+0x50>
 800c698:	dfc00217 	ldw	ra,8(sp)
 800c69c:	dc400117 	ldw	r17,4(sp)
 800c6a0:	dc000017 	ldw	r16,0(sp)
 800c6a4:	dec00304 	addi	sp,sp,12
 800c6a8:	f800283a 	ret
 800c6ac:	80c00017 	ldw	r3,0(r16)
 800c6b0:	183ff926 	beq	r3,zero,800c698 <__alt_data_end+0xfc00c698>
 800c6b4:	88c00015 	stw	r3,0(r17)
 800c6b8:	003ff706 	br	800c698 <__alt_data_end+0xfc00c698>

0800c6bc <_realloc_r>:
 800c6bc:	defff604 	addi	sp,sp,-40
 800c6c0:	dc800215 	stw	r18,8(sp)
 800c6c4:	dfc00915 	stw	ra,36(sp)
 800c6c8:	df000815 	stw	fp,32(sp)
 800c6cc:	ddc00715 	stw	r23,28(sp)
 800c6d0:	dd800615 	stw	r22,24(sp)
 800c6d4:	dd400515 	stw	r21,20(sp)
 800c6d8:	dd000415 	stw	r20,16(sp)
 800c6dc:	dcc00315 	stw	r19,12(sp)
 800c6e0:	dc400115 	stw	r17,4(sp)
 800c6e4:	dc000015 	stw	r16,0(sp)
 800c6e8:	3025883a 	mov	r18,r6
 800c6ec:	2800b726 	beq	r5,zero,800c9cc <_realloc_r+0x310>
 800c6f0:	282b883a 	mov	r21,r5
 800c6f4:	2029883a 	mov	r20,r4
 800c6f8:	80195000 	call	8019500 <__malloc_lock>
 800c6fc:	a8bfff17 	ldw	r2,-4(r21)
 800c700:	043fff04 	movi	r16,-4
 800c704:	90c002c4 	addi	r3,r18,11
 800c708:	01000584 	movi	r4,22
 800c70c:	acfffe04 	addi	r19,r21,-8
 800c710:	1420703a 	and	r16,r2,r16
 800c714:	20c0332e 	bgeu	r4,r3,800c7e4 <_realloc_r+0x128>
 800c718:	047ffe04 	movi	r17,-8
 800c71c:	1c62703a 	and	r17,r3,r17
 800c720:	8807883a 	mov	r3,r17
 800c724:	88005816 	blt	r17,zero,800c888 <_realloc_r+0x1cc>
 800c728:	8c805736 	bltu	r17,r18,800c888 <_realloc_r+0x1cc>
 800c72c:	80c0300e 	bge	r16,r3,800c7f0 <_realloc_r+0x134>
 800c730:	070200b4 	movhi	fp,2050
 800c734:	e731ce04 	addi	fp,fp,-14536
 800c738:	e1c00217 	ldw	r7,8(fp)
 800c73c:	9c09883a 	add	r4,r19,r16
 800c740:	22000117 	ldw	r8,4(r4)
 800c744:	21c06326 	beq	r4,r7,800c8d4 <_realloc_r+0x218>
 800c748:	017fff84 	movi	r5,-2
 800c74c:	414a703a 	and	r5,r8,r5
 800c750:	214b883a 	add	r5,r4,r5
 800c754:	29800117 	ldw	r6,4(r5)
 800c758:	3180004c 	andi	r6,r6,1
 800c75c:	30003f26 	beq	r6,zero,800c85c <_realloc_r+0x1a0>
 800c760:	1080004c 	andi	r2,r2,1
 800c764:	10008326 	beq	r2,zero,800c974 <_realloc_r+0x2b8>
 800c768:	900b883a 	mov	r5,r18
 800c76c:	a009883a 	mov	r4,r20
 800c770:	8003e340 	call	8003e34 <_malloc_r>
 800c774:	1025883a 	mov	r18,r2
 800c778:	10011e26 	beq	r2,zero,800cbf4 <_realloc_r+0x538>
 800c77c:	a93fff17 	ldw	r4,-4(r21)
 800c780:	10fffe04 	addi	r3,r2,-8
 800c784:	00bfff84 	movi	r2,-2
 800c788:	2084703a 	and	r2,r4,r2
 800c78c:	9885883a 	add	r2,r19,r2
 800c790:	1880ee26 	beq	r3,r2,800cb4c <_realloc_r+0x490>
 800c794:	81bfff04 	addi	r6,r16,-4
 800c798:	00800904 	movi	r2,36
 800c79c:	1180b836 	bltu	r2,r6,800ca80 <_realloc_r+0x3c4>
 800c7a0:	00c004c4 	movi	r3,19
 800c7a4:	19809636 	bltu	r3,r6,800ca00 <_realloc_r+0x344>
 800c7a8:	9005883a 	mov	r2,r18
 800c7ac:	a807883a 	mov	r3,r21
 800c7b0:	19000017 	ldw	r4,0(r3)
 800c7b4:	11000015 	stw	r4,0(r2)
 800c7b8:	19000117 	ldw	r4,4(r3)
 800c7bc:	11000115 	stw	r4,4(r2)
 800c7c0:	18c00217 	ldw	r3,8(r3)
 800c7c4:	10c00215 	stw	r3,8(r2)
 800c7c8:	a80b883a 	mov	r5,r21
 800c7cc:	a009883a 	mov	r4,r20
 800c7d0:	80032a80 	call	80032a8 <_free_r>
 800c7d4:	a009883a 	mov	r4,r20
 800c7d8:	80195240 	call	8019524 <__malloc_unlock>
 800c7dc:	9005883a 	mov	r2,r18
 800c7e0:	00001206 	br	800c82c <_realloc_r+0x170>
 800c7e4:	00c00404 	movi	r3,16
 800c7e8:	1823883a 	mov	r17,r3
 800c7ec:	003fce06 	br	800c728 <__alt_data_end+0xfc00c728>
 800c7f0:	a825883a 	mov	r18,r21
 800c7f4:	8445c83a 	sub	r2,r16,r17
 800c7f8:	00c003c4 	movi	r3,15
 800c7fc:	18802636 	bltu	r3,r2,800c898 <_realloc_r+0x1dc>
 800c800:	99800117 	ldw	r6,4(r19)
 800c804:	9c07883a 	add	r3,r19,r16
 800c808:	3180004c 	andi	r6,r6,1
 800c80c:	3420b03a 	or	r16,r6,r16
 800c810:	9c000115 	stw	r16,4(r19)
 800c814:	18800117 	ldw	r2,4(r3)
 800c818:	10800054 	ori	r2,r2,1
 800c81c:	18800115 	stw	r2,4(r3)
 800c820:	a009883a 	mov	r4,r20
 800c824:	80195240 	call	8019524 <__malloc_unlock>
 800c828:	9005883a 	mov	r2,r18
 800c82c:	dfc00917 	ldw	ra,36(sp)
 800c830:	df000817 	ldw	fp,32(sp)
 800c834:	ddc00717 	ldw	r23,28(sp)
 800c838:	dd800617 	ldw	r22,24(sp)
 800c83c:	dd400517 	ldw	r21,20(sp)
 800c840:	dd000417 	ldw	r20,16(sp)
 800c844:	dcc00317 	ldw	r19,12(sp)
 800c848:	dc800217 	ldw	r18,8(sp)
 800c84c:	dc400117 	ldw	r17,4(sp)
 800c850:	dc000017 	ldw	r16,0(sp)
 800c854:	dec00a04 	addi	sp,sp,40
 800c858:	f800283a 	ret
 800c85c:	017fff04 	movi	r5,-4
 800c860:	414a703a 	and	r5,r8,r5
 800c864:	814d883a 	add	r6,r16,r5
 800c868:	30c01f16 	blt	r6,r3,800c8e8 <_realloc_r+0x22c>
 800c86c:	20800317 	ldw	r2,12(r4)
 800c870:	20c00217 	ldw	r3,8(r4)
 800c874:	a825883a 	mov	r18,r21
 800c878:	3021883a 	mov	r16,r6
 800c87c:	18800315 	stw	r2,12(r3)
 800c880:	10c00215 	stw	r3,8(r2)
 800c884:	003fdb06 	br	800c7f4 <__alt_data_end+0xfc00c7f4>
 800c888:	00800304 	movi	r2,12
 800c88c:	a0800015 	stw	r2,0(r20)
 800c890:	0005883a 	mov	r2,zero
 800c894:	003fe506 	br	800c82c <__alt_data_end+0xfc00c82c>
 800c898:	98c00117 	ldw	r3,4(r19)
 800c89c:	9c4b883a 	add	r5,r19,r17
 800c8a0:	11000054 	ori	r4,r2,1
 800c8a4:	18c0004c 	andi	r3,r3,1
 800c8a8:	1c62b03a 	or	r17,r3,r17
 800c8ac:	9c400115 	stw	r17,4(r19)
 800c8b0:	29000115 	stw	r4,4(r5)
 800c8b4:	2885883a 	add	r2,r5,r2
 800c8b8:	10c00117 	ldw	r3,4(r2)
 800c8bc:	29400204 	addi	r5,r5,8
 800c8c0:	a009883a 	mov	r4,r20
 800c8c4:	18c00054 	ori	r3,r3,1
 800c8c8:	10c00115 	stw	r3,4(r2)
 800c8cc:	80032a80 	call	80032a8 <_free_r>
 800c8d0:	003fd306 	br	800c820 <__alt_data_end+0xfc00c820>
 800c8d4:	017fff04 	movi	r5,-4
 800c8d8:	414a703a 	and	r5,r8,r5
 800c8dc:	89800404 	addi	r6,r17,16
 800c8e0:	8151883a 	add	r8,r16,r5
 800c8e4:	4180590e 	bge	r8,r6,800ca4c <_realloc_r+0x390>
 800c8e8:	1080004c 	andi	r2,r2,1
 800c8ec:	103f9e1e 	bne	r2,zero,800c768 <__alt_data_end+0xfc00c768>
 800c8f0:	adbffe17 	ldw	r22,-8(r21)
 800c8f4:	00bfff04 	movi	r2,-4
 800c8f8:	9dadc83a 	sub	r22,r19,r22
 800c8fc:	b1800117 	ldw	r6,4(r22)
 800c900:	3084703a 	and	r2,r6,r2
 800c904:	20002026 	beq	r4,zero,800c988 <_realloc_r+0x2cc>
 800c908:	80af883a 	add	r23,r16,r2
 800c90c:	b96f883a 	add	r23,r23,r5
 800c910:	21c05f26 	beq	r4,r7,800ca90 <_realloc_r+0x3d4>
 800c914:	b8c01c16 	blt	r23,r3,800c988 <_realloc_r+0x2cc>
 800c918:	20800317 	ldw	r2,12(r4)
 800c91c:	20c00217 	ldw	r3,8(r4)
 800c920:	81bfff04 	addi	r6,r16,-4
 800c924:	01000904 	movi	r4,36
 800c928:	18800315 	stw	r2,12(r3)
 800c92c:	10c00215 	stw	r3,8(r2)
 800c930:	b0c00217 	ldw	r3,8(r22)
 800c934:	b0800317 	ldw	r2,12(r22)
 800c938:	b4800204 	addi	r18,r22,8
 800c93c:	18800315 	stw	r2,12(r3)
 800c940:	10c00215 	stw	r3,8(r2)
 800c944:	21801b36 	bltu	r4,r6,800c9b4 <_realloc_r+0x2f8>
 800c948:	008004c4 	movi	r2,19
 800c94c:	1180352e 	bgeu	r2,r6,800ca24 <_realloc_r+0x368>
 800c950:	a8800017 	ldw	r2,0(r21)
 800c954:	b0800215 	stw	r2,8(r22)
 800c958:	a8800117 	ldw	r2,4(r21)
 800c95c:	b0800315 	stw	r2,12(r22)
 800c960:	008006c4 	movi	r2,27
 800c964:	11807f36 	bltu	r2,r6,800cb64 <_realloc_r+0x4a8>
 800c968:	b0800404 	addi	r2,r22,16
 800c96c:	ad400204 	addi	r21,r21,8
 800c970:	00002d06 	br	800ca28 <_realloc_r+0x36c>
 800c974:	adbffe17 	ldw	r22,-8(r21)
 800c978:	00bfff04 	movi	r2,-4
 800c97c:	9dadc83a 	sub	r22,r19,r22
 800c980:	b1000117 	ldw	r4,4(r22)
 800c984:	2084703a 	and	r2,r4,r2
 800c988:	b03f7726 	beq	r22,zero,800c768 <__alt_data_end+0xfc00c768>
 800c98c:	80af883a 	add	r23,r16,r2
 800c990:	b8ff7516 	blt	r23,r3,800c768 <__alt_data_end+0xfc00c768>
 800c994:	b0800317 	ldw	r2,12(r22)
 800c998:	b0c00217 	ldw	r3,8(r22)
 800c99c:	81bfff04 	addi	r6,r16,-4
 800c9a0:	01000904 	movi	r4,36
 800c9a4:	18800315 	stw	r2,12(r3)
 800c9a8:	10c00215 	stw	r3,8(r2)
 800c9ac:	b4800204 	addi	r18,r22,8
 800c9b0:	21bfe52e 	bgeu	r4,r6,800c948 <__alt_data_end+0xfc00c948>
 800c9b4:	a80b883a 	mov	r5,r21
 800c9b8:	9009883a 	mov	r4,r18
 800c9bc:	800b4480 	call	800b448 <memmove>
 800c9c0:	b821883a 	mov	r16,r23
 800c9c4:	b027883a 	mov	r19,r22
 800c9c8:	003f8a06 	br	800c7f4 <__alt_data_end+0xfc00c7f4>
 800c9cc:	300b883a 	mov	r5,r6
 800c9d0:	dfc00917 	ldw	ra,36(sp)
 800c9d4:	df000817 	ldw	fp,32(sp)
 800c9d8:	ddc00717 	ldw	r23,28(sp)
 800c9dc:	dd800617 	ldw	r22,24(sp)
 800c9e0:	dd400517 	ldw	r21,20(sp)
 800c9e4:	dd000417 	ldw	r20,16(sp)
 800c9e8:	dcc00317 	ldw	r19,12(sp)
 800c9ec:	dc800217 	ldw	r18,8(sp)
 800c9f0:	dc400117 	ldw	r17,4(sp)
 800c9f4:	dc000017 	ldw	r16,0(sp)
 800c9f8:	dec00a04 	addi	sp,sp,40
 800c9fc:	8003e341 	jmpi	8003e34 <_malloc_r>
 800ca00:	a8c00017 	ldw	r3,0(r21)
 800ca04:	90c00015 	stw	r3,0(r18)
 800ca08:	a8c00117 	ldw	r3,4(r21)
 800ca0c:	90c00115 	stw	r3,4(r18)
 800ca10:	00c006c4 	movi	r3,27
 800ca14:	19804536 	bltu	r3,r6,800cb2c <_realloc_r+0x470>
 800ca18:	90800204 	addi	r2,r18,8
 800ca1c:	a8c00204 	addi	r3,r21,8
 800ca20:	003f6306 	br	800c7b0 <__alt_data_end+0xfc00c7b0>
 800ca24:	9005883a 	mov	r2,r18
 800ca28:	a8c00017 	ldw	r3,0(r21)
 800ca2c:	b821883a 	mov	r16,r23
 800ca30:	b027883a 	mov	r19,r22
 800ca34:	10c00015 	stw	r3,0(r2)
 800ca38:	a8c00117 	ldw	r3,4(r21)
 800ca3c:	10c00115 	stw	r3,4(r2)
 800ca40:	a8c00217 	ldw	r3,8(r21)
 800ca44:	10c00215 	stw	r3,8(r2)
 800ca48:	003f6a06 	br	800c7f4 <__alt_data_end+0xfc00c7f4>
 800ca4c:	9c67883a 	add	r19,r19,r17
 800ca50:	4445c83a 	sub	r2,r8,r17
 800ca54:	e4c00215 	stw	r19,8(fp)
 800ca58:	10800054 	ori	r2,r2,1
 800ca5c:	98800115 	stw	r2,4(r19)
 800ca60:	a8bfff17 	ldw	r2,-4(r21)
 800ca64:	a009883a 	mov	r4,r20
 800ca68:	1080004c 	andi	r2,r2,1
 800ca6c:	1462b03a 	or	r17,r2,r17
 800ca70:	ac7fff15 	stw	r17,-4(r21)
 800ca74:	80195240 	call	8019524 <__malloc_unlock>
 800ca78:	a805883a 	mov	r2,r21
 800ca7c:	003f6b06 	br	800c82c <__alt_data_end+0xfc00c82c>
 800ca80:	a80b883a 	mov	r5,r21
 800ca84:	9009883a 	mov	r4,r18
 800ca88:	800b4480 	call	800b448 <memmove>
 800ca8c:	003f4e06 	br	800c7c8 <__alt_data_end+0xfc00c7c8>
 800ca90:	89000404 	addi	r4,r17,16
 800ca94:	b93fbc16 	blt	r23,r4,800c988 <__alt_data_end+0xfc00c988>
 800ca98:	b0800317 	ldw	r2,12(r22)
 800ca9c:	b0c00217 	ldw	r3,8(r22)
 800caa0:	81bfff04 	addi	r6,r16,-4
 800caa4:	01000904 	movi	r4,36
 800caa8:	18800315 	stw	r2,12(r3)
 800caac:	10c00215 	stw	r3,8(r2)
 800cab0:	b4800204 	addi	r18,r22,8
 800cab4:	21804336 	bltu	r4,r6,800cbc4 <_realloc_r+0x508>
 800cab8:	008004c4 	movi	r2,19
 800cabc:	11803f2e 	bgeu	r2,r6,800cbbc <_realloc_r+0x500>
 800cac0:	a8800017 	ldw	r2,0(r21)
 800cac4:	b0800215 	stw	r2,8(r22)
 800cac8:	a8800117 	ldw	r2,4(r21)
 800cacc:	b0800315 	stw	r2,12(r22)
 800cad0:	008006c4 	movi	r2,27
 800cad4:	11803f36 	bltu	r2,r6,800cbd4 <_realloc_r+0x518>
 800cad8:	b0800404 	addi	r2,r22,16
 800cadc:	ad400204 	addi	r21,r21,8
 800cae0:	a8c00017 	ldw	r3,0(r21)
 800cae4:	10c00015 	stw	r3,0(r2)
 800cae8:	a8c00117 	ldw	r3,4(r21)
 800caec:	10c00115 	stw	r3,4(r2)
 800caf0:	a8c00217 	ldw	r3,8(r21)
 800caf4:	10c00215 	stw	r3,8(r2)
 800caf8:	b447883a 	add	r3,r22,r17
 800cafc:	bc45c83a 	sub	r2,r23,r17
 800cb00:	e0c00215 	stw	r3,8(fp)
 800cb04:	10800054 	ori	r2,r2,1
 800cb08:	18800115 	stw	r2,4(r3)
 800cb0c:	b0800117 	ldw	r2,4(r22)
 800cb10:	a009883a 	mov	r4,r20
 800cb14:	1080004c 	andi	r2,r2,1
 800cb18:	1462b03a 	or	r17,r2,r17
 800cb1c:	b4400115 	stw	r17,4(r22)
 800cb20:	80195240 	call	8019524 <__malloc_unlock>
 800cb24:	9005883a 	mov	r2,r18
 800cb28:	003f4006 	br	800c82c <__alt_data_end+0xfc00c82c>
 800cb2c:	a8c00217 	ldw	r3,8(r21)
 800cb30:	90c00215 	stw	r3,8(r18)
 800cb34:	a8c00317 	ldw	r3,12(r21)
 800cb38:	90c00315 	stw	r3,12(r18)
 800cb3c:	30801126 	beq	r6,r2,800cb84 <_realloc_r+0x4c8>
 800cb40:	90800404 	addi	r2,r18,16
 800cb44:	a8c00404 	addi	r3,r21,16
 800cb48:	003f1906 	br	800c7b0 <__alt_data_end+0xfc00c7b0>
 800cb4c:	90ffff17 	ldw	r3,-4(r18)
 800cb50:	00bfff04 	movi	r2,-4
 800cb54:	a825883a 	mov	r18,r21
 800cb58:	1884703a 	and	r2,r3,r2
 800cb5c:	80a1883a 	add	r16,r16,r2
 800cb60:	003f2406 	br	800c7f4 <__alt_data_end+0xfc00c7f4>
 800cb64:	a8800217 	ldw	r2,8(r21)
 800cb68:	b0800415 	stw	r2,16(r22)
 800cb6c:	a8800317 	ldw	r2,12(r21)
 800cb70:	b0800515 	stw	r2,20(r22)
 800cb74:	31000a26 	beq	r6,r4,800cba0 <_realloc_r+0x4e4>
 800cb78:	b0800604 	addi	r2,r22,24
 800cb7c:	ad400404 	addi	r21,r21,16
 800cb80:	003fa906 	br	800ca28 <__alt_data_end+0xfc00ca28>
 800cb84:	a9000417 	ldw	r4,16(r21)
 800cb88:	90800604 	addi	r2,r18,24
 800cb8c:	a8c00604 	addi	r3,r21,24
 800cb90:	91000415 	stw	r4,16(r18)
 800cb94:	a9000517 	ldw	r4,20(r21)
 800cb98:	91000515 	stw	r4,20(r18)
 800cb9c:	003f0406 	br	800c7b0 <__alt_data_end+0xfc00c7b0>
 800cba0:	a8c00417 	ldw	r3,16(r21)
 800cba4:	ad400604 	addi	r21,r21,24
 800cba8:	b0800804 	addi	r2,r22,32
 800cbac:	b0c00615 	stw	r3,24(r22)
 800cbb0:	a8ffff17 	ldw	r3,-4(r21)
 800cbb4:	b0c00715 	stw	r3,28(r22)
 800cbb8:	003f9b06 	br	800ca28 <__alt_data_end+0xfc00ca28>
 800cbbc:	9005883a 	mov	r2,r18
 800cbc0:	003fc706 	br	800cae0 <__alt_data_end+0xfc00cae0>
 800cbc4:	a80b883a 	mov	r5,r21
 800cbc8:	9009883a 	mov	r4,r18
 800cbcc:	800b4480 	call	800b448 <memmove>
 800cbd0:	003fc906 	br	800caf8 <__alt_data_end+0xfc00caf8>
 800cbd4:	a8800217 	ldw	r2,8(r21)
 800cbd8:	b0800415 	stw	r2,16(r22)
 800cbdc:	a8800317 	ldw	r2,12(r21)
 800cbe0:	b0800515 	stw	r2,20(r22)
 800cbe4:	31000726 	beq	r6,r4,800cc04 <_realloc_r+0x548>
 800cbe8:	b0800604 	addi	r2,r22,24
 800cbec:	ad400404 	addi	r21,r21,16
 800cbf0:	003fbb06 	br	800cae0 <__alt_data_end+0xfc00cae0>
 800cbf4:	a009883a 	mov	r4,r20
 800cbf8:	80195240 	call	8019524 <__malloc_unlock>
 800cbfc:	0005883a 	mov	r2,zero
 800cc00:	003f0a06 	br	800c82c <__alt_data_end+0xfc00c82c>
 800cc04:	a8c00417 	ldw	r3,16(r21)
 800cc08:	ad400604 	addi	r21,r21,24
 800cc0c:	b0800804 	addi	r2,r22,32
 800cc10:	b0c00615 	stw	r3,24(r22)
 800cc14:	a8ffff17 	ldw	r3,-4(r21)
 800cc18:	b0c00715 	stw	r3,28(r22)
 800cc1c:	003fb006 	br	800cae0 <__alt_data_end+0xfc00cae0>

0800cc20 <__fpclassifyd>:
 800cc20:	00a00034 	movhi	r2,32768
 800cc24:	10bfffc4 	addi	r2,r2,-1
 800cc28:	2884703a 	and	r2,r5,r2
 800cc2c:	10000726 	beq	r2,zero,800cc4c <__fpclassifyd+0x2c>
 800cc30:	00fffc34 	movhi	r3,65520
 800cc34:	019ff834 	movhi	r6,32736
 800cc38:	28c7883a 	add	r3,r5,r3
 800cc3c:	31bfffc4 	addi	r6,r6,-1
 800cc40:	30c00536 	bltu	r6,r3,800cc58 <__fpclassifyd+0x38>
 800cc44:	00800104 	movi	r2,4
 800cc48:	f800283a 	ret
 800cc4c:	2000021e 	bne	r4,zero,800cc58 <__fpclassifyd+0x38>
 800cc50:	00800084 	movi	r2,2
 800cc54:	f800283a 	ret
 800cc58:	00dffc34 	movhi	r3,32752
 800cc5c:	019ff834 	movhi	r6,32736
 800cc60:	28cb883a 	add	r5,r5,r3
 800cc64:	31bfffc4 	addi	r6,r6,-1
 800cc68:	317ff62e 	bgeu	r6,r5,800cc44 <__alt_data_end+0xfc00cc44>
 800cc6c:	01400434 	movhi	r5,16
 800cc70:	297fffc4 	addi	r5,r5,-1
 800cc74:	28800236 	bltu	r5,r2,800cc80 <__fpclassifyd+0x60>
 800cc78:	008000c4 	movi	r2,3
 800cc7c:	f800283a 	ret
 800cc80:	10c00226 	beq	r2,r3,800cc8c <__fpclassifyd+0x6c>
 800cc84:	0005883a 	mov	r2,zero
 800cc88:	f800283a 	ret
 800cc8c:	2005003a 	cmpeq	r2,r4,zero
 800cc90:	f800283a 	ret

0800cc94 <__sccl>:
 800cc94:	2a000003 	ldbu	r8,0(r5)
 800cc98:	00801784 	movi	r2,94
 800cc9c:	40802a26 	beq	r8,r2,800cd48 <__sccl+0xb4>
 800cca0:	29400044 	addi	r5,r5,1
 800cca4:	000f883a 	mov	r7,zero
 800cca8:	0013883a 	mov	r9,zero
 800ccac:	2007883a 	mov	r3,r4
 800ccb0:	21804004 	addi	r6,r4,256
 800ccb4:	19c00005 	stb	r7,0(r3)
 800ccb8:	18c00044 	addi	r3,r3,1
 800ccbc:	19bffd1e 	bne	r3,r6,800ccb4 <__alt_data_end+0xfc00ccb4>
 800ccc0:	40001126 	beq	r8,zero,800cd08 <__sccl+0x74>
 800ccc4:	00800044 	movi	r2,1
 800ccc8:	124fc83a 	sub	r7,r2,r9
 800cccc:	02800b44 	movi	r10,45
 800ccd0:	02c01744 	movi	r11,93
 800ccd4:	2205883a 	add	r2,r4,r8
 800ccd8:	11c00005 	stb	r7,0(r2)
 800ccdc:	28800044 	addi	r2,r5,1
 800cce0:	28c00003 	ldbu	r3,0(r5)
 800cce4:	1a800a26 	beq	r3,r10,800cd10 <__sccl+0x7c>
 800cce8:	1ac00426 	beq	r3,r11,800ccfc <__sccl+0x68>
 800ccec:	18000426 	beq	r3,zero,800cd00 <__sccl+0x6c>
 800ccf0:	1811883a 	mov	r8,r3
 800ccf4:	100b883a 	mov	r5,r2
 800ccf8:	003ff606 	br	800ccd4 <__alt_data_end+0xfc00ccd4>
 800ccfc:	f800283a 	ret
 800cd00:	2805883a 	mov	r2,r5
 800cd04:	f800283a 	ret
 800cd08:	28bfffc4 	addi	r2,r5,-1
 800cd0c:	f800283a 	ret
 800cd10:	12400003 	ldbu	r9,0(r2)
 800cd14:	4ac01126 	beq	r9,r11,800cd5c <__sccl+0xc8>
 800cd18:	4a001016 	blt	r9,r8,800cd5c <__sccl+0xc8>
 800cd1c:	41800044 	addi	r6,r8,1
 800cd20:	29400084 	addi	r5,r5,2
 800cd24:	2187883a 	add	r3,r4,r6
 800cd28:	00000106 	br	800cd30 <__sccl+0x9c>
 800cd2c:	31800044 	addi	r6,r6,1
 800cd30:	19c00005 	stb	r7,0(r3)
 800cd34:	3011883a 	mov	r8,r6
 800cd38:	18c00044 	addi	r3,r3,1
 800cd3c:	327ffb16 	blt	r6,r9,800cd2c <__alt_data_end+0xfc00cd2c>
 800cd40:	10800084 	addi	r2,r2,2
 800cd44:	003fe606 	br	800cce0 <__alt_data_end+0xfc00cce0>
 800cd48:	2a000043 	ldbu	r8,1(r5)
 800cd4c:	01c00044 	movi	r7,1
 800cd50:	29400084 	addi	r5,r5,2
 800cd54:	02400044 	movi	r9,1
 800cd58:	003fd406 	br	800ccac <__alt_data_end+0xfc00ccac>
 800cd5c:	5011883a 	mov	r8,r10
 800cd60:	003fe406 	br	800ccf4 <__alt_data_end+0xfc00ccf4>

0800cd64 <nanf>:
 800cd64:	009ff034 	movhi	r2,32704
 800cd68:	f800283a 	ret

0800cd6c <_sprintf_r>:
 800cd6c:	deffe404 	addi	sp,sp,-112
 800cd70:	2807883a 	mov	r3,r5
 800cd74:	dfc01a15 	stw	ra,104(sp)
 800cd78:	d9c01b15 	stw	r7,108(sp)
 800cd7c:	00a00034 	movhi	r2,32768
 800cd80:	10bfffc4 	addi	r2,r2,-1
 800cd84:	02008204 	movi	r8,520
 800cd88:	d8800215 	stw	r2,8(sp)
 800cd8c:	d8800515 	stw	r2,20(sp)
 800cd90:	d9c01b04 	addi	r7,sp,108
 800cd94:	d80b883a 	mov	r5,sp
 800cd98:	00bfffc4 	movi	r2,-1
 800cd9c:	d8c00015 	stw	r3,0(sp)
 800cda0:	d8c00415 	stw	r3,16(sp)
 800cda4:	da00030d 	sth	r8,12(sp)
 800cda8:	d880038d 	sth	r2,14(sp)
 800cdac:	800f1980 	call	800f198 <___svfprintf_internal_r>
 800cdb0:	d8c00017 	ldw	r3,0(sp)
 800cdb4:	18000005 	stb	zero,0(r3)
 800cdb8:	dfc01a17 	ldw	ra,104(sp)
 800cdbc:	dec01c04 	addi	sp,sp,112
 800cdc0:	f800283a 	ret

0800cdc4 <sprintf>:
 800cdc4:	deffe304 	addi	sp,sp,-116
 800cdc8:	2007883a 	mov	r3,r4
 800cdcc:	dfc01a15 	stw	ra,104(sp)
 800cdd0:	d9801b15 	stw	r6,108(sp)
 800cdd4:	d9c01c15 	stw	r7,112(sp)
 800cdd8:	010200b4 	movhi	r4,2050
 800cddc:	21377404 	addi	r4,r4,-8752
 800cde0:	21000017 	ldw	r4,0(r4)
 800cde4:	00a00034 	movhi	r2,32768
 800cde8:	10bfffc4 	addi	r2,r2,-1
 800cdec:	280d883a 	mov	r6,r5
 800cdf0:	02008204 	movi	r8,520
 800cdf4:	d8800215 	stw	r2,8(sp)
 800cdf8:	d8800515 	stw	r2,20(sp)
 800cdfc:	d9c01b04 	addi	r7,sp,108
 800ce00:	d80b883a 	mov	r5,sp
 800ce04:	00bfffc4 	movi	r2,-1
 800ce08:	d8c00015 	stw	r3,0(sp)
 800ce0c:	d8c00415 	stw	r3,16(sp)
 800ce10:	da00030d 	sth	r8,12(sp)
 800ce14:	d880038d 	sth	r2,14(sp)
 800ce18:	800f1980 	call	800f198 <___svfprintf_internal_r>
 800ce1c:	d8c00017 	ldw	r3,0(sp)
 800ce20:	18000005 	stb	zero,0(r3)
 800ce24:	dfc01a17 	ldw	ra,104(sp)
 800ce28:	dec01d04 	addi	sp,sp,116
 800ce2c:	f800283a 	ret

0800ce30 <strcmp>:
 800ce30:	2144b03a 	or	r2,r4,r5
 800ce34:	108000cc 	andi	r2,r2,3
 800ce38:	1000171e 	bne	r2,zero,800ce98 <strcmp+0x68>
 800ce3c:	20800017 	ldw	r2,0(r4)
 800ce40:	28c00017 	ldw	r3,0(r5)
 800ce44:	10c0141e 	bne	r2,r3,800ce98 <strcmp+0x68>
 800ce48:	027fbff4 	movhi	r9,65279
 800ce4c:	4a7fbfc4 	addi	r9,r9,-257
 800ce50:	0086303a 	nor	r3,zero,r2
 800ce54:	02202074 	movhi	r8,32897
 800ce58:	1245883a 	add	r2,r2,r9
 800ce5c:	42202004 	addi	r8,r8,-32640
 800ce60:	10c4703a 	and	r2,r2,r3
 800ce64:	1204703a 	and	r2,r2,r8
 800ce68:	10000226 	beq	r2,zero,800ce74 <strcmp+0x44>
 800ce6c:	00002306 	br	800cefc <strcmp+0xcc>
 800ce70:	1000221e 	bne	r2,zero,800cefc <strcmp+0xcc>
 800ce74:	21000104 	addi	r4,r4,4
 800ce78:	20c00017 	ldw	r3,0(r4)
 800ce7c:	29400104 	addi	r5,r5,4
 800ce80:	29800017 	ldw	r6,0(r5)
 800ce84:	1a4f883a 	add	r7,r3,r9
 800ce88:	00c4303a 	nor	r2,zero,r3
 800ce8c:	3884703a 	and	r2,r7,r2
 800ce90:	1204703a 	and	r2,r2,r8
 800ce94:	19bff626 	beq	r3,r6,800ce70 <__alt_data_end+0xfc00ce70>
 800ce98:	20800003 	ldbu	r2,0(r4)
 800ce9c:	10c03fcc 	andi	r3,r2,255
 800cea0:	18c0201c 	xori	r3,r3,128
 800cea4:	18ffe004 	addi	r3,r3,-128
 800cea8:	18000c26 	beq	r3,zero,800cedc <strcmp+0xac>
 800ceac:	29800007 	ldb	r6,0(r5)
 800ceb0:	19800326 	beq	r3,r6,800cec0 <strcmp+0x90>
 800ceb4:	00001306 	br	800cf04 <strcmp+0xd4>
 800ceb8:	29800007 	ldb	r6,0(r5)
 800cebc:	11800b1e 	bne	r2,r6,800ceec <strcmp+0xbc>
 800cec0:	21000044 	addi	r4,r4,1
 800cec4:	20c00003 	ldbu	r3,0(r4)
 800cec8:	29400044 	addi	r5,r5,1
 800cecc:	18803fcc 	andi	r2,r3,255
 800ced0:	1080201c 	xori	r2,r2,128
 800ced4:	10bfe004 	addi	r2,r2,-128
 800ced8:	103ff71e 	bne	r2,zero,800ceb8 <__alt_data_end+0xfc00ceb8>
 800cedc:	0007883a 	mov	r3,zero
 800cee0:	28800003 	ldbu	r2,0(r5)
 800cee4:	1885c83a 	sub	r2,r3,r2
 800cee8:	f800283a 	ret
 800ceec:	28800003 	ldbu	r2,0(r5)
 800cef0:	18c03fcc 	andi	r3,r3,255
 800cef4:	1885c83a 	sub	r2,r3,r2
 800cef8:	f800283a 	ret
 800cefc:	0005883a 	mov	r2,zero
 800cf00:	f800283a 	ret
 800cf04:	10c03fcc 	andi	r3,r2,255
 800cf08:	003ff506 	br	800cee0 <__alt_data_end+0xfc00cee0>

0800cf0c <sulp>:
 800cf0c:	defffd04 	addi	sp,sp,-12
 800cf10:	dc400115 	stw	r17,4(sp)
 800cf14:	3023883a 	mov	r17,r6
 800cf18:	dc000015 	stw	r16,0(sp)
 800cf1c:	dfc00215 	stw	ra,8(sp)
 800cf20:	2821883a 	mov	r16,r5
 800cf24:	800c1840 	call	800c184 <__ulp>
 800cf28:	88000c26 	beq	r17,zero,800cf5c <sulp+0x50>
 800cf2c:	841ffc2c 	andhi	r16,r16,32752
 800cf30:	8020d53a 	srli	r16,r16,20
 800cf34:	01c01ac4 	movi	r7,107
 800cf38:	3c21c83a 	sub	r16,r7,r16
 800cf3c:	0400070e 	bge	zero,r16,800cf5c <sulp+0x50>
 800cf40:	8020953a 	slli	r16,r16,20
 800cf44:	01cffc34 	movhi	r7,16368
 800cf48:	000d883a 	mov	r6,zero
 800cf4c:	81cf883a 	add	r7,r16,r7
 800cf50:	1009883a 	mov	r4,r2
 800cf54:	180b883a 	mov	r5,r3
 800cf58:	80179ec0 	call	80179ec <__muldf3>
 800cf5c:	dfc00217 	ldw	ra,8(sp)
 800cf60:	dc400117 	ldw	r17,4(sp)
 800cf64:	dc000017 	ldw	r16,0(sp)
 800cf68:	dec00304 	addi	sp,sp,12
 800cf6c:	f800283a 	ret

0800cf70 <_strtod_r>:
 800cf70:	deffe204 	addi	sp,sp,-120
 800cf74:	ddc01b15 	stw	r23,108(sp)
 800cf78:	dd801a15 	stw	r22,104(sp)
 800cf7c:	dc401515 	stw	r17,84(sp)
 800cf80:	dfc01d15 	stw	ra,116(sp)
 800cf84:	df001c15 	stw	fp,112(sp)
 800cf88:	dd401915 	stw	r21,100(sp)
 800cf8c:	dd001815 	stw	r20,96(sp)
 800cf90:	dcc01715 	stw	r19,92(sp)
 800cf94:	dc801615 	stw	r18,88(sp)
 800cf98:	dc001415 	stw	r16,80(sp)
 800cf9c:	d8000515 	stw	zero,20(sp)
 800cfa0:	d9400615 	stw	r5,24(sp)
 800cfa4:	2807883a 	mov	r3,r5
 800cfa8:	1f000003 	ldbu	fp,0(r3)
 800cfac:	01c20074 	movhi	r7,2049
 800cfb0:	2023883a 	mov	r17,r4
 800cfb4:	d9400715 	stw	r5,28(sp)
 800cfb8:	d9800915 	stw	r6,36(sp)
 800cfbc:	01000b44 	movi	r4,45
 800cfc0:	e0803fcc 	andi	r2,fp,255
 800cfc4:	39f3f904 	addi	r7,r7,-12316
 800cfc8:	002f883a 	mov	r23,zero
 800cfcc:	002d883a 	mov	r22,zero
 800cfd0:	20809c36 	bltu	r4,r2,800d244 <_strtod_r+0x2d4>
 800cfd4:	100490ba 	slli	r2,r2,2
 800cfd8:	11c5883a 	add	r2,r2,r7
 800cfdc:	10800017 	ldw	r2,0(r2)
 800cfe0:	1000683a 	jmp	r2
 800cfe4:	0800d0a4 	muli	zero,at,834
 800cfe8:	0800d244 	addi	zero,at,841
 800cfec:	0800d244 	addi	zero,at,841
 800cff0:	0800d244 	addi	zero,at,841
 800cff4:	0800d244 	addi	zero,at,841
 800cff8:	0800d244 	addi	zero,at,841
 800cffc:	0800d244 	addi	zero,at,841
 800d000:	0800d244 	addi	zero,at,841
 800d004:	0800d244 	addi	zero,at,841
 800d008:	0800d230 	cmpltui	zero,at,840
 800d00c:	0800d230 	cmpltui	zero,at,840
 800d010:	0800d230 	cmpltui	zero,at,840
 800d014:	0800d230 	cmpltui	zero,at,840
 800d018:	0800d230 	cmpltui	zero,at,840
 800d01c:	0800d244 	addi	zero,at,841
 800d020:	0800d244 	addi	zero,at,841
 800d024:	0800d244 	addi	zero,at,841
 800d028:	0800d244 	addi	zero,at,841
 800d02c:	0800d244 	addi	zero,at,841
 800d030:	0800d244 	addi	zero,at,841
 800d034:	0800d244 	addi	zero,at,841
 800d038:	0800d244 	addi	zero,at,841
 800d03c:	0800d244 	addi	zero,at,841
 800d040:	0800d244 	addi	zero,at,841
 800d044:	0800d244 	addi	zero,at,841
 800d048:	0800d244 	addi	zero,at,841
 800d04c:	0800d244 	addi	zero,at,841
 800d050:	0800d244 	addi	zero,at,841
 800d054:	0800d244 	addi	zero,at,841
 800d058:	0800d244 	addi	zero,at,841
 800d05c:	0800d244 	addi	zero,at,841
 800d060:	0800d244 	addi	zero,at,841
 800d064:	0800d230 	cmpltui	zero,at,840
 800d068:	0800d244 	addi	zero,at,841
 800d06c:	0800d244 	addi	zero,at,841
 800d070:	0800d244 	addi	zero,at,841
 800d074:	0800d244 	addi	zero,at,841
 800d078:	0800d244 	addi	zero,at,841
 800d07c:	0800d244 	addi	zero,at,841
 800d080:	0800d244 	addi	zero,at,841
 800d084:	0800d244 	addi	zero,at,841
 800d088:	0800d244 	addi	zero,at,841
 800d08c:	0800d244 	addi	zero,at,841
 800d090:	0800d108 	cmpgei	zero,at,836
 800d094:	0800d244 	addi	zero,at,841
 800d098:	0800d224 	muli	zero,at,840
 800d09c:	00801244 	movi	r2,73
 800d0a0:	b8844726 	beq	r23,r2,800e1c0 <_strtod_r+0x1250>
 800d0a4:	d9000917 	ldw	r4,36(sp)
 800d0a8:	d8000815 	stw	zero,32(sp)
 800d0ac:	0039883a 	mov	fp,zero
 800d0b0:	20000726 	beq	r4,zero,800d0d0 <_strtod_r+0x160>
 800d0b4:	dc800717 	ldw	r18,28(sp)
 800d0b8:	d8000a15 	stw	zero,40(sp)
 800d0bc:	d9400917 	ldw	r5,36(sp)
 800d0c0:	2c800015 	stw	r18,0(r5)
 800d0c4:	d8800a17 	ldw	r2,40(sp)
 800d0c8:	10000126 	beq	r2,zero,800d0d0 <_strtod_r+0x160>
 800d0cc:	e720003c 	xorhi	fp,fp,32768
 800d0d0:	d8800817 	ldw	r2,32(sp)
 800d0d4:	e007883a 	mov	r3,fp
 800d0d8:	dfc01d17 	ldw	ra,116(sp)
 800d0dc:	df001c17 	ldw	fp,112(sp)
 800d0e0:	ddc01b17 	ldw	r23,108(sp)
 800d0e4:	dd801a17 	ldw	r22,104(sp)
 800d0e8:	dd401917 	ldw	r21,100(sp)
 800d0ec:	dd001817 	ldw	r20,96(sp)
 800d0f0:	dcc01717 	ldw	r19,92(sp)
 800d0f4:	dc801617 	ldw	r18,88(sp)
 800d0f8:	dc401517 	ldw	r17,84(sp)
 800d0fc:	dc001417 	ldw	r16,80(sp)
 800d100:	dec01e04 	addi	sp,sp,120
 800d104:	f800283a 	ret
 800d108:	d8000a15 	stw	zero,40(sp)
 800d10c:	1c000044 	addi	r16,r3,1
 800d110:	dc000615 	stw	r16,24(sp)
 800d114:	1f000043 	ldbu	fp,1(r3)
 800d118:	e0803fcc 	andi	r2,fp,255
 800d11c:	1080201c 	xori	r2,r2,128
 800d120:	10bfe004 	addi	r2,r2,-128
 800d124:	103fdf26 	beq	r2,zero,800d0a4 <__alt_data_end+0xfc00d0a4>
 800d128:	e1003fcc 	andi	r4,fp,255
 800d12c:	2100201c 	xori	r4,r4,128
 800d130:	213fe004 	addi	r4,r4,-128
 800d134:	00800c04 	movi	r2,48
 800d138:	2080d426 	beq	r4,r2,800d48c <_strtod_r+0x51c>
 800d13c:	dc000815 	stw	r16,32(sp)
 800d140:	d8000c15 	stw	zero,48(sp)
 800d144:	e0bff404 	addi	r2,fp,-48
 800d148:	10803fcc 	andi	r2,r2,255
 800d14c:	05400244 	movi	r21,9
 800d150:	a8837836 	bltu	r21,r2,800df34 <_strtod_r+0xfc4>
 800d154:	dc800817 	ldw	r18,32(sp)
 800d158:	0029883a 	mov	r20,zero
 800d15c:	0027883a 	mov	r19,zero
 800d160:	0021883a 	mov	r16,zero
 800d164:	05800204 	movi	r22,8
 800d168:	b4003916 	blt	r22,r16,800d250 <_strtod_r+0x2e0>
 800d16c:	e7003fcc 	andi	fp,fp,255
 800d170:	9809883a 	mov	r4,r19
 800d174:	01400284 	movi	r5,10
 800d178:	e700201c 	xori	fp,fp,128
 800d17c:	80028f40 	call	80028f4 <__mulsi3>
 800d180:	e73fe004 	addi	fp,fp,-128
 800d184:	1705883a 	add	r2,r2,fp
 800d188:	14fff404 	addi	r19,r2,-48
 800d18c:	94800044 	addi	r18,r18,1
 800d190:	dc800615 	stw	r18,24(sp)
 800d194:	97000003 	ldbu	fp,0(r18)
 800d198:	84000044 	addi	r16,r16,1
 800d19c:	e0bff404 	addi	r2,fp,-48
 800d1a0:	10803fcc 	andi	r2,r2,255
 800d1a4:	a8bff02e 	bgeu	r21,r2,800d168 <__alt_data_end+0xfc00d168>
 800d1a8:	e5c03fcc 	andi	r23,fp,255
 800d1ac:	bdc0201c 	xori	r23,r23,128
 800d1b0:	bdffe004 	addi	r23,r23,-128
 800d1b4:	8809883a 	mov	r4,r17
 800d1b8:	800af680 	call	800af68 <_localeconv_r>
 800d1bc:	8809883a 	mov	r4,r17
 800d1c0:	15400017 	ldw	r21,0(r2)
 800d1c4:	800af680 	call	800af68 <_localeconv_r>
 800d1c8:	11000017 	ldw	r4,0(r2)
 800d1cc:	8004cf40 	call	8004cf4 <strlen>
 800d1d0:	100d883a 	mov	r6,r2
 800d1d4:	a80b883a 	mov	r5,r21
 800d1d8:	9009883a 	mov	r4,r18
 800d1dc:	8013c5c0 	call	8013c5c <strncmp>
 800d1e0:	1000bd26 	beq	r2,zero,800d4d8 <_strtod_r+0x568>
 800d1e4:	8039883a 	mov	fp,r16
 800d1e8:	002d883a 	mov	r22,zero
 800d1ec:	d8000b15 	stw	zero,44(sp)
 800d1f0:	0025883a 	mov	r18,zero
 800d1f4:	00801944 	movi	r2,101
 800d1f8:	b8806026 	beq	r23,r2,800d37c <_strtod_r+0x40c>
 800d1fc:	00801144 	movi	r2,69
 800d200:	b8805e26 	beq	r23,r2,800d37c <_strtod_r+0x40c>
 800d204:	0009883a 	mov	r4,zero
 800d208:	e0001a1e 	bne	fp,zero,800d274 <_strtod_r+0x304>
 800d20c:	b000cd26 	beq	r22,zero,800d544 <_strtod_r+0x5d4>
 800d210:	d8000815 	stw	zero,32(sp)
 800d214:	d9000917 	ldw	r4,36(sp)
 800d218:	203faa26 	beq	r4,zero,800d0c4 <__alt_data_end+0xfc00d0c4>
 800d21c:	dc800617 	ldw	r18,24(sp)
 800d220:	003fa606 	br	800d0bc <__alt_data_end+0xfc00d0bc>
 800d224:	00800044 	movi	r2,1
 800d228:	d8800a15 	stw	r2,40(sp)
 800d22c:	003fb706 	br	800d10c <__alt_data_end+0xfc00d10c>
 800d230:	18c00044 	addi	r3,r3,1
 800d234:	d8c00615 	stw	r3,24(sp)
 800d238:	1f000003 	ldbu	fp,0(r3)
 800d23c:	e0803fcc 	andi	r2,fp,255
 800d240:	20bf642e 	bgeu	r4,r2,800cfd4 <__alt_data_end+0xfc00cfd4>
 800d244:	1821883a 	mov	r16,r3
 800d248:	d8000a15 	stw	zero,40(sp)
 800d24c:	003fb606 	br	800d128 <__alt_data_end+0xfc00d128>
 800d250:	e7003fcc 	andi	fp,fp,255
 800d254:	a009883a 	mov	r4,r20
 800d258:	01400284 	movi	r5,10
 800d25c:	e700201c 	xori	fp,fp,128
 800d260:	80028f40 	call	80028f4 <__mulsi3>
 800d264:	e73fe004 	addi	fp,fp,-128
 800d268:	1705883a 	add	r2,r2,fp
 800d26c:	153ff404 	addi	r20,r2,-48
 800d270:	003fc606 	br	800d18c <__alt_data_end+0xfc00d18c>
 800d274:	d8c00b17 	ldw	r3,44(sp)
 800d278:	20ebc83a 	sub	r21,r4,r3
 800d27c:	8000011e 	bne	r16,zero,800d284 <_strtod_r+0x314>
 800d280:	e021883a 	mov	r16,fp
 800d284:	00800404 	movi	r2,16
 800d288:	e025883a 	mov	r18,fp
 800d28c:	1700010e 	bge	r2,fp,800d294 <_strtod_r+0x324>
 800d290:	1025883a 	mov	r18,r2
 800d294:	9809883a 	mov	r4,r19
 800d298:	8018cb00 	call	8018cb0 <__floatunsidf>
 800d29c:	102f883a 	mov	r23,r2
 800d2a0:	00800244 	movi	r2,9
 800d2a4:	182d883a 	mov	r22,r3
 800d2a8:	1480150e 	bge	r2,r18,800d300 <_strtod_r+0x390>
 800d2ac:	90bffdc4 	addi	r2,r18,-9
 800d2b0:	100490fa 	slli	r2,r2,3
 800d2b4:	180b883a 	mov	r5,r3
 800d2b8:	00c200b4 	movhi	r3,2050
 800d2bc:	18efcc04 	addi	r3,r3,-16592
 800d2c0:	1885883a 	add	r2,r3,r2
 800d2c4:	11800017 	ldw	r6,0(r2)
 800d2c8:	11c00117 	ldw	r7,4(r2)
 800d2cc:	b809883a 	mov	r4,r23
 800d2d0:	80179ec0 	call	80179ec <__muldf3>
 800d2d4:	a009883a 	mov	r4,r20
 800d2d8:	102f883a 	mov	r23,r2
 800d2dc:	182d883a 	mov	r22,r3
 800d2e0:	8018cb00 	call	8018cb0 <__floatunsidf>
 800d2e4:	b809883a 	mov	r4,r23
 800d2e8:	b00b883a 	mov	r5,r22
 800d2ec:	100d883a 	mov	r6,r2
 800d2f0:	180f883a 	mov	r7,r3
 800d2f4:	80165180 	call	8016518 <__adddf3>
 800d2f8:	102f883a 	mov	r23,r2
 800d2fc:	182d883a 	mov	r22,r3
 800d300:	008003c4 	movi	r2,15
 800d304:	17009416 	blt	r2,fp,800d558 <_strtod_r+0x5e8>
 800d308:	a8001926 	beq	r21,zero,800d370 <_strtod_r+0x400>
 800d30c:	05439c0e 	bge	zero,r21,800e180 <_strtod_r+0x1210>
 800d310:	00c00584 	movi	r3,22
 800d314:	1d430f16 	blt	r3,r21,800df54 <_strtod_r+0xfe4>
 800d318:	a82a90fa 	slli	r21,r21,3
 800d31c:	008200b4 	movhi	r2,2050
 800d320:	10afcc04 	addi	r2,r2,-16592
 800d324:	1545883a 	add	r2,r2,r21
 800d328:	11000017 	ldw	r4,0(r2)
 800d32c:	11400117 	ldw	r5,4(r2)
 800d330:	b80d883a 	mov	r6,r23
 800d334:	b00f883a 	mov	r7,r22
 800d338:	80179ec0 	call	80179ec <__muldf3>
 800d33c:	d8800815 	stw	r2,32(sp)
 800d340:	1839883a 	mov	fp,r3
 800d344:	003fb306 	br	800d214 <__alt_data_end+0xfc00d214>
 800d348:	014200b4 	movhi	r5,2050
 800d34c:	29700204 	addi	r5,r5,-16376
 800d350:	d9800204 	addi	r6,sp,8
 800d354:	d9000604 	addi	r4,sp,24
 800d358:	8013a000 	call	8013a00 <__hexnan>
 800d35c:	00c00144 	movi	r3,5
 800d360:	10c2161e 	bne	r2,r3,800dbbc <_strtod_r+0xc4c>
 800d364:	dd800317 	ldw	r22,12(sp)
 800d368:	ddc00217 	ldw	r23,8(sp)
 800d36c:	b59ffc34 	orhi	r22,r22,32752
 800d370:	ddc00815 	stw	r23,32(sp)
 800d374:	b039883a 	mov	fp,r22
 800d378:	003fa606 	br	800d214 <__alt_data_end+0xfc00d214>
 800d37c:	e001a926 	beq	fp,zero,800da24 <_strtod_r+0xab4>
 800d380:	d8c00617 	ldw	r3,24(sp)
 800d384:	18800044 	addi	r2,r3,1
 800d388:	d8800615 	stw	r2,24(sp)
 800d38c:	d8c00715 	stw	r3,28(sp)
 800d390:	18c00047 	ldb	r3,1(r3)
 800d394:	00800ac4 	movi	r2,43
 800d398:	1881e526 	beq	r3,r2,800db30 <_strtod_r+0xbc0>
 800d39c:	00800b44 	movi	r2,45
 800d3a0:	1881dc26 	beq	r3,r2,800db14 <_strtod_r+0xba4>
 800d3a4:	182f883a 	mov	r23,r3
 800d3a8:	d8000e15 	stw	zero,56(sp)
 800d3ac:	b8bff404 	addi	r2,r23,-48
 800d3b0:	01000244 	movi	r4,9
 800d3b4:	2081ab36 	bltu	r4,r2,800da64 <_strtod_r+0xaf4>
 800d3b8:	00800c04 	movi	r2,48
 800d3bc:	b880071e 	bne	r23,r2,800d3dc <_strtod_r+0x46c>
 800d3c0:	d8800617 	ldw	r2,24(sp)
 800d3c4:	b809883a 	mov	r4,r23
 800d3c8:	10800044 	addi	r2,r2,1
 800d3cc:	d8800615 	stw	r2,24(sp)
 800d3d0:	15c00007 	ldb	r23,0(r2)
 800d3d4:	10800044 	addi	r2,r2,1
 800d3d8:	b93ffc26 	beq	r23,r4,800d3cc <__alt_data_end+0xfc00d3cc>
 800d3dc:	b8bff3c4 	addi	r2,r23,-49
 800d3e0:	01000204 	movi	r4,8
 800d3e4:	20bf8736 	bltu	r4,r2,800d204 <__alt_data_end+0xfc00d204>
 800d3e8:	d8c00617 	ldw	r3,24(sp)
 800d3ec:	b93ff404 	addi	r4,r23,-48
 800d3f0:	01400244 	movi	r5,9
 800d3f4:	1ac00044 	addi	r11,r3,1
 800d3f8:	dac00615 	stw	r11,24(sp)
 800d3fc:	d8c00d15 	stw	r3,52(sp)
 800d400:	18c00043 	ldbu	r3,1(r3)
 800d404:	18bff404 	addi	r2,r3,-48
 800d408:	1dc03fcc 	andi	r23,r3,255
 800d40c:	bdc0201c 	xori	r23,r23,128
 800d410:	10803fcc 	andi	r2,r2,255
 800d414:	bdffe004 	addi	r23,r23,-128
 800d418:	28801136 	bltu	r5,r2,800d460 <_strtod_r+0x4f0>
 800d41c:	d8c00d17 	ldw	r3,52(sp)
 800d420:	1d400084 	addi	r21,r3,2
 800d424:	01400284 	movi	r5,10
 800d428:	80028f40 	call	80028f4 <__mulsi3>
 800d42c:	dd400615 	stw	r21,24(sp)
 800d430:	a9400003 	ldbu	r5,0(r21)
 800d434:	15c5883a 	add	r2,r2,r23
 800d438:	a817883a 	mov	r11,r21
 800d43c:	28fff404 	addi	r3,r5,-48
 800d440:	2dc03fcc 	andi	r23,r5,255
 800d444:	bdc0201c 	xori	r23,r23,128
 800d448:	18c03fcc 	andi	r3,r3,255
 800d44c:	01400244 	movi	r5,9
 800d450:	113ff404 	addi	r4,r2,-48
 800d454:	bdffe004 	addi	r23,r23,-128
 800d458:	ad400044 	addi	r21,r21,1
 800d45c:	28fff12e 	bgeu	r5,r3,800d424 <__alt_data_end+0xfc00d424>
 800d460:	d8c00d17 	ldw	r3,52(sp)
 800d464:	00800204 	movi	r2,8
 800d468:	58d7c83a 	sub	r11,r11,r3
 800d46c:	12c2ab16 	blt	r2,r11,800df1c <_strtod_r+0xfac>
 800d470:	009387c4 	movi	r2,19999
 800d474:	1100010e 	bge	r2,r4,800d47c <_strtod_r+0x50c>
 800d478:	1009883a 	mov	r4,r2
 800d47c:	d8c00e17 	ldw	r3,56(sp)
 800d480:	183f6126 	beq	r3,zero,800d208 <__alt_data_end+0xfc00d208>
 800d484:	0109c83a 	sub	r4,zero,r4
 800d488:	003f5f06 	br	800d208 <__alt_data_end+0xfc00d208>
 800d48c:	80800047 	ldb	r2,1(r16)
 800d490:	00c01604 	movi	r3,88
 800d494:	10c20026 	beq	r2,r3,800dc98 <_strtod_r+0xd28>
 800d498:	00c01e04 	movi	r3,120
 800d49c:	10c1fe26 	beq	r2,r3,800dc98 <_strtod_r+0xd28>
 800d4a0:	80800044 	addi	r2,r16,1
 800d4a4:	1021883a 	mov	r16,r2
 800d4a8:	d8800615 	stw	r2,24(sp)
 800d4ac:	10800044 	addi	r2,r2,1
 800d4b0:	173fffc3 	ldbu	fp,-1(r2)
 800d4b4:	e0c03fcc 	andi	r3,fp,255
 800d4b8:	18c0201c 	xori	r3,r3,128
 800d4bc:	18ffe004 	addi	r3,r3,-128
 800d4c0:	193ff826 	beq	r3,r4,800d4a4 <__alt_data_end+0xfc00d4a4>
 800d4c4:	18002126 	beq	r3,zero,800d54c <_strtod_r+0x5dc>
 800d4c8:	00c00044 	movi	r3,1
 800d4cc:	dc000815 	stw	r16,32(sp)
 800d4d0:	d8c00c15 	stw	r3,48(sp)
 800d4d4:	003f1b06 	br	800d144 <__alt_data_end+0xfc00d144>
 800d4d8:	8809883a 	mov	r4,r17
 800d4dc:	800af680 	call	800af68 <_localeconv_r>
 800d4e0:	11000017 	ldw	r4,0(r2)
 800d4e4:	8004cf40 	call	8004cf4 <strlen>
 800d4e8:	d8c00617 	ldw	r3,24(sp)
 800d4ec:	1885883a 	add	r2,r3,r2
 800d4f0:	d8800615 	stw	r2,24(sp)
 800d4f4:	15c00007 	ldb	r23,0(r2)
 800d4f8:	8001771e 	bne	r16,zero,800dad8 <_strtod_r+0xb68>
 800d4fc:	01000c04 	movi	r4,48
 800d500:	b903581e 	bne	r23,r4,800e264 <_strtod_r+0x12f4>
 800d504:	11000044 	addi	r4,r2,1
 800d508:	b80b883a 	mov	r5,r23
 800d50c:	d9000615 	stw	r4,24(sp)
 800d510:	25c00007 	ldb	r23,0(r4)
 800d514:	20adc83a 	sub	r22,r4,r2
 800d518:	21000044 	addi	r4,r4,1
 800d51c:	b97ffb26 	beq	r23,r5,800d50c <__alt_data_end+0xfc00d50c>
 800d520:	b8bff3c4 	addi	r2,r23,-49
 800d524:	01000204 	movi	r4,8
 800d528:	2083002e 	bgeu	r4,r2,800e12c <_strtod_r+0x11bc>
 800d52c:	00801944 	movi	r2,101
 800d530:	b8813a26 	beq	r23,r2,800da1c <_strtod_r+0xaac>
 800d534:	0039883a 	mov	fp,zero
 800d538:	d8000b15 	stw	zero,44(sp)
 800d53c:	04800044 	movi	r18,1
 800d540:	003f2e06 	br	800d1fc <__alt_data_end+0xfc00d1fc>
 800d544:	d8c00c17 	ldw	r3,48(sp)
 800d548:	18017d26 	beq	r3,zero,800db40 <_strtod_r+0xbd0>
 800d54c:	d8000815 	stw	zero,32(sp)
 800d550:	0039883a 	mov	fp,zero
 800d554:	003f2f06 	br	800d214 <__alt_data_end+0xfc00d214>
 800d558:	e4a5c83a 	sub	r18,fp,r18
 800d55c:	9565883a 	add	r18,r18,r21
 800d560:	0482370e 	bge	zero,r18,800de40 <_strtod_r+0xed0>
 800d564:	908003cc 	andi	r2,r18,15
 800d568:	10000b26 	beq	r2,zero,800d598 <_strtod_r+0x628>
 800d56c:	100490fa 	slli	r2,r2,3
 800d570:	00c200b4 	movhi	r3,2050
 800d574:	18efcc04 	addi	r3,r3,-16592
 800d578:	1885883a 	add	r2,r3,r2
 800d57c:	11000017 	ldw	r4,0(r2)
 800d580:	11400117 	ldw	r5,4(r2)
 800d584:	b80d883a 	mov	r6,r23
 800d588:	b00f883a 	mov	r7,r22
 800d58c:	80179ec0 	call	80179ec <__muldf3>
 800d590:	102f883a 	mov	r23,r2
 800d594:	182d883a 	mov	r22,r3
 800d598:	053ffc04 	movi	r20,-16
 800d59c:	9524703a 	and	r18,r18,r20
 800d5a0:	90003826 	beq	r18,zero,800d684 <_strtod_r+0x714>
 800d5a4:	00804d04 	movi	r2,308
 800d5a8:	1481eb16 	blt	r2,r18,800dd58 <_strtod_r+0xde8>
 800d5ac:	9029d13a 	srai	r20,r18,4
 800d5b0:	02c00044 	movi	r11,1
 800d5b4:	5d03900e 	bge	r11,r20,800e3f8 <_strtod_r+0x1488>
 800d5b8:	010200b4 	movhi	r4,2050
 800d5bc:	212fc204 	addi	r4,r4,-16632
 800d5c0:	2011883a 	mov	r8,r4
 800d5c4:	0025883a 	mov	r18,zero
 800d5c8:	880b883a 	mov	r5,r17
 800d5cc:	d9000715 	stw	r4,28(sp)
 800d5d0:	dc000b15 	stw	r16,44(sp)
 800d5d4:	9023883a 	mov	r17,r18
 800d5d8:	b805883a 	mov	r2,r23
 800d5dc:	b007883a 	mov	r3,r22
 800d5e0:	0009883a 	mov	r4,zero
 800d5e4:	4021883a 	mov	r16,r8
 800d5e8:	2825883a 	mov	r18,r5
 800d5ec:	a180004c 	andi	r6,r20,1
 800d5f0:	30000826 	beq	r6,zero,800d614 <_strtod_r+0x6a4>
 800d5f4:	81800017 	ldw	r6,0(r16)
 800d5f8:	81c00117 	ldw	r7,4(r16)
 800d5fc:	1009883a 	mov	r4,r2
 800d600:	180b883a 	mov	r5,r3
 800d604:	dac01315 	stw	r11,76(sp)
 800d608:	80179ec0 	call	80179ec <__muldf3>
 800d60c:	dac01317 	ldw	r11,76(sp)
 800d610:	01000044 	movi	r4,1
 800d614:	a029d07a 	srai	r20,r20,1
 800d618:	8c400044 	addi	r17,r17,1
 800d61c:	84000204 	addi	r16,r16,8
 800d620:	a2fff21e 	bne	r20,r11,800d5ec <__alt_data_end+0xfc00d5ec>
 800d624:	900b883a 	mov	r5,r18
 800d628:	21003fcc 	andi	r4,r4,255
 800d62c:	8825883a 	mov	r18,r17
 800d630:	dc000b17 	ldw	r16,44(sp)
 800d634:	2823883a 	mov	r17,r5
 800d638:	2003c01e 	bne	r4,zero,800e53c <_strtod_r+0x15cc>
 800d63c:	901490fa 	slli	r10,r18,3
 800d640:	d8800717 	ldw	r2,28(sp)
 800d644:	01ff2c34 	movhi	r7,64688
 800d648:	b80d883a 	mov	r6,r23
 800d64c:	12a5883a 	add	r18,r2,r10
 800d650:	91000017 	ldw	r4,0(r18)
 800d654:	91400117 	ldw	r5,4(r18)
 800d658:	b1cf883a 	add	r7,r22,r7
 800d65c:	80179ec0 	call	80179ec <__muldf3>
 800d660:	102f883a 	mov	r23,r2
 800d664:	011f2834 	movhi	r4,31904
 800d668:	189ffc2c 	andhi	r2,r3,32752
 800d66c:	2081ba36 	bltu	r4,r2,800dd58 <_strtod_r+0xde8>
 800d670:	011f2434 	movhi	r4,31888
 800d674:	20834a2e 	bgeu	r4,r2,800e3a0 <_strtod_r+0x1430>
 800d678:	059ffc34 	movhi	r22,32752
 800d67c:	b5bfffc4 	addi	r22,r22,-1
 800d680:	05ffffc4 	movi	r23,-1
 800d684:	d8000715 	stw	zero,28(sp)
 800d688:	d9400817 	ldw	r5,32(sp)
 800d68c:	dcc00015 	stw	r19,0(sp)
 800d690:	e00f883a 	mov	r7,fp
 800d694:	800d883a 	mov	r6,r16
 800d698:	8809883a 	mov	r4,r17
 800d69c:	800b7bc0 	call	800b7bc <__s2b>
 800d6a0:	d8800b15 	stw	r2,44(sp)
 800d6a4:	1001ac26 	beq	r2,zero,800dd58 <_strtod_r+0xde8>
 800d6a8:	a807d7fa 	srai	r3,r21,31
 800d6ac:	0545c83a 	sub	r2,zero,r21
 800d6b0:	dd400c15 	stw	r21,48(sp)
 800d6b4:	1886703a 	and	r3,r3,r2
 800d6b8:	d8c00e15 	stw	r3,56(sp)
 800d6bc:	a8015916 	blt	r21,zero,800dc24 <_strtod_r+0xcb4>
 800d6c0:	d9400b17 	ldw	r5,44(sp)
 800d6c4:	0011883a 	mov	r8,zero
 800d6c8:	0021883a 	mov	r16,zero
 800d6cc:	29400304 	addi	r5,r5,12
 800d6d0:	d9401115 	stw	r5,68(sp)
 800d6d4:	4025883a 	mov	r18,r8
 800d6d8:	d8800b17 	ldw	r2,44(sp)
 800d6dc:	8809883a 	mov	r4,r17
 800d6e0:	11400117 	ldw	r5,4(r2)
 800d6e4:	800b5a40 	call	800b5a4 <_Balloc>
 800d6e8:	1027883a 	mov	r19,r2
 800d6ec:	10015226 	beq	r2,zero,800dc38 <_strtod_r+0xcc8>
 800d6f0:	d8c00b17 	ldw	r3,44(sp)
 800d6f4:	d9401117 	ldw	r5,68(sp)
 800d6f8:	11000304 	addi	r4,r2,12
 800d6fc:	19800417 	ldw	r6,16(r3)
 800d700:	31800084 	addi	r6,r6,2
 800d704:	318d883a 	add	r6,r6,r6
 800d708:	318d883a 	add	r6,r6,r6
 800d70c:	800b3000 	call	800b300 <memcpy>
 800d710:	d9000204 	addi	r4,sp,8
 800d714:	d9000015 	stw	r4,0(sp)
 800d718:	d9c00404 	addi	r7,sp,16
 800d71c:	b80b883a 	mov	r5,r23
 800d720:	b00d883a 	mov	r6,r22
 800d724:	8809883a 	mov	r4,r17
 800d728:	800c2f40 	call	800c2f4 <__d2b>
 800d72c:	d8800515 	stw	r2,20(sp)
 800d730:	ddc00815 	stw	r23,32(sp)
 800d734:	dd801215 	stw	r22,72(sp)
 800d738:	10029f26 	beq	r2,zero,800e1b8 <_strtod_r+0x1248>
 800d73c:	01400044 	movi	r5,1
 800d740:	8809883a 	mov	r4,r17
 800d744:	800b9d80 	call	800b9d8 <__i2b>
 800d748:	1021883a 	mov	r16,r2
 800d74c:	10013a26 	beq	r2,zero,800dc38 <_strtod_r+0xcc8>
 800d750:	d8800417 	ldw	r2,16(sp)
 800d754:	1000b816 	blt	r2,zero,800da38 <_strtod_r+0xac8>
 800d758:	d9400e17 	ldw	r5,56(sp)
 800d75c:	d9000c17 	ldw	r4,48(sp)
 800d760:	28a9883a 	add	r20,r5,r2
 800d764:	d9400717 	ldw	r5,28(sp)
 800d768:	dd400217 	ldw	r21,8(sp)
 800d76c:	073f0084 	movi	fp,-1022
 800d770:	1147c83a 	sub	r3,r2,r5
 800d774:	1d47883a 	add	r3,r3,r21
 800d778:	00800d84 	movi	r2,54
 800d77c:	18ffffc4 	addi	r3,r3,-1
 800d780:	156bc83a 	sub	r21,r2,r21
 800d784:	1f00950e 	bge	r3,fp,800d9dc <_strtod_r+0xa6c>
 800d788:	e0f9c83a 	sub	fp,fp,r3
 800d78c:	008007c4 	movi	r2,31
 800d790:	af2bc83a 	sub	r21,r21,fp
 800d794:	1700ac16 	blt	r2,fp,800da48 <_strtod_r+0xad8>
 800d798:	00800044 	movi	r2,1
 800d79c:	1704983a 	sll	r2,r2,fp
 800d7a0:	d8000d15 	stw	zero,52(sp)
 800d7a4:	d8800f15 	stw	r2,60(sp)
 800d7a8:	2547883a 	add	r3,r4,r21
 800d7ac:	d9000717 	ldw	r4,28(sp)
 800d7b0:	a56b883a 	add	r21,r20,r21
 800d7b4:	20f9883a 	add	fp,r4,r3
 800d7b8:	a009883a 	mov	r4,r20
 800d7bc:	ad00010e 	bge	r21,r20,800d7c4 <_strtod_r+0x854>
 800d7c0:	a809883a 	mov	r4,r21
 800d7c4:	e005883a 	mov	r2,fp
 800d7c8:	2700010e 	bge	r4,fp,800d7d0 <_strtod_r+0x860>
 800d7cc:	2005883a 	mov	r2,r4
 800d7d0:	0080030e 	bge	zero,r2,800d7e0 <_strtod_r+0x870>
 800d7d4:	a8abc83a 	sub	r21,r21,r2
 800d7d8:	e0b9c83a 	sub	fp,fp,r2
 800d7dc:	a0a9c83a 	sub	r20,r20,r2
 800d7e0:	d9400e17 	ldw	r5,56(sp)
 800d7e4:	28001126 	beq	r5,zero,800d82c <_strtod_r+0x8bc>
 800d7e8:	280d883a 	mov	r6,r5
 800d7ec:	8809883a 	mov	r4,r17
 800d7f0:	800b883a 	mov	r5,r16
 800d7f4:	800bca00 	call	800bca0 <__pow5mult>
 800d7f8:	1021883a 	mov	r16,r2
 800d7fc:	10010e26 	beq	r2,zero,800dc38 <_strtod_r+0xcc8>
 800d800:	d9800517 	ldw	r6,20(sp)
 800d804:	100b883a 	mov	r5,r2
 800d808:	8809883a 	mov	r4,r17
 800d80c:	800ba140 	call	800ba14 <__multiply>
 800d810:	10010926 	beq	r2,zero,800dc38 <_strtod_r+0xcc8>
 800d814:	d9400517 	ldw	r5,20(sp)
 800d818:	8809883a 	mov	r4,r17
 800d81c:	d8801315 	stw	r2,76(sp)
 800d820:	800b64c0 	call	800b64c <_Bfree>
 800d824:	d8801317 	ldw	r2,76(sp)
 800d828:	d8800515 	stw	r2,20(sp)
 800d82c:	0540060e 	bge	zero,r21,800d848 <_strtod_r+0x8d8>
 800d830:	d9400517 	ldw	r5,20(sp)
 800d834:	a80d883a 	mov	r6,r21
 800d838:	8809883a 	mov	r4,r17
 800d83c:	800bde00 	call	800bde0 <__lshift>
 800d840:	d8800515 	stw	r2,20(sp)
 800d844:	10025c26 	beq	r2,zero,800e1b8 <_strtod_r+0x1248>
 800d848:	d8800c17 	ldw	r2,48(sp)
 800d84c:	10000626 	beq	r2,zero,800d868 <_strtod_r+0x8f8>
 800d850:	d9800c17 	ldw	r6,48(sp)
 800d854:	980b883a 	mov	r5,r19
 800d858:	8809883a 	mov	r4,r17
 800d85c:	800bca00 	call	800bca0 <__pow5mult>
 800d860:	1027883a 	mov	r19,r2
 800d864:	1000f426 	beq	r2,zero,800dc38 <_strtod_r+0xcc8>
 800d868:	0700060e 	bge	zero,fp,800d884 <_strtod_r+0x914>
 800d86c:	980b883a 	mov	r5,r19
 800d870:	e00d883a 	mov	r6,fp
 800d874:	8809883a 	mov	r4,r17
 800d878:	800bde00 	call	800bde0 <__lshift>
 800d87c:	1027883a 	mov	r19,r2
 800d880:	1000ed26 	beq	r2,zero,800dc38 <_strtod_r+0xcc8>
 800d884:	0500060e 	bge	zero,r20,800d8a0 <_strtod_r+0x930>
 800d888:	800b883a 	mov	r5,r16
 800d88c:	a00d883a 	mov	r6,r20
 800d890:	8809883a 	mov	r4,r17
 800d894:	800bde00 	call	800bde0 <__lshift>
 800d898:	1021883a 	mov	r16,r2
 800d89c:	1000e626 	beq	r2,zero,800dc38 <_strtod_r+0xcc8>
 800d8a0:	d9400517 	ldw	r5,20(sp)
 800d8a4:	980d883a 	mov	r6,r19
 800d8a8:	8809883a 	mov	r4,r17
 800d8ac:	800bf880 	call	800bf88 <__mdiff>
 800d8b0:	1025883a 	mov	r18,r2
 800d8b4:	1000e026 	beq	r2,zero,800dc38 <_strtod_r+0xcc8>
 800d8b8:	15400317 	ldw	r21,12(r2)
 800d8bc:	800b883a 	mov	r5,r16
 800d8c0:	10000315 	stw	zero,12(r2)
 800d8c4:	1009883a 	mov	r4,r2
 800d8c8:	800bf280 	call	800bf28 <__mcmp>
 800d8cc:	10026716 	blt	r2,zero,800e26c <_strtod_r+0x12fc>
 800d8d0:	10029626 	beq	r2,zero,800e32c <_strtod_r+0x13bc>
 800d8d4:	800b883a 	mov	r5,r16
 800d8d8:	9009883a 	mov	r4,r18
 800d8dc:	800c4400 	call	800c440 <__ratio>
 800d8e0:	000d883a 	mov	r6,zero
 800d8e4:	01d00034 	movhi	r7,16384
 800d8e8:	1009883a 	mov	r4,r2
 800d8ec:	180b883a 	mov	r5,r3
 800d8f0:	1039883a 	mov	fp,r2
 800d8f4:	1829883a 	mov	r20,r3
 800d8f8:	80178f80 	call	80178f8 <__ledf2>
 800d8fc:	00803b16 	blt	zero,r2,800d9ec <_strtod_r+0xa7c>
 800d900:	a8005e26 	beq	r21,zero,800da7c <_strtod_r+0xb0c>
 800d904:	050ffc34 	movhi	r20,16368
 800d908:	d8000f15 	stw	zero,60(sp)
 800d90c:	d8001015 	stw	zero,64(sp)
 800d910:	dd000d15 	stw	r20,52(sp)
 800d914:	b71ffc2c 	andhi	fp,r22,32752
 800d918:	009ff834 	movhi	r2,32736
 800d91c:	e080f226 	beq	fp,r2,800dce8 <_strtod_r+0xd78>
 800d920:	d9000717 	ldw	r4,28(sp)
 800d924:	20000c26 	beq	r4,zero,800d958 <_strtod_r+0x9e8>
 800d928:	0081a834 	movhi	r2,1696
 800d92c:	17000a36 	bltu	r2,fp,800d958 <_strtod_r+0x9e8>
 800d930:	d9001017 	ldw	r4,64(sp)
 800d934:	d9400d17 	ldw	r5,52(sp)
 800d938:	01d07834 	movhi	r7,16864
 800d93c:	39ffffc4 	addi	r7,r7,-1
 800d940:	01bff034 	movhi	r6,65472
 800d944:	80178f80 	call	80178f8 <__ledf2>
 800d948:	0080a70e 	bge	zero,r2,800dbe8 <_strtod_r+0xc78>
 800d94c:	0081ac34 	movhi	r2,1712
 800d950:	a091883a 	add	r8,r20,r2
 800d954:	4729c83a 	sub	r20,r8,fp
 800d958:	b809883a 	mov	r4,r23
 800d95c:	b00b883a 	mov	r5,r22
 800d960:	800c1840 	call	800c184 <__ulp>
 800d964:	d9000f17 	ldw	r4,60(sp)
 800d968:	a00b883a 	mov	r5,r20
 800d96c:	100d883a 	mov	r6,r2
 800d970:	180f883a 	mov	r7,r3
 800d974:	80179ec0 	call	80179ec <__muldf3>
 800d978:	b80d883a 	mov	r6,r23
 800d97c:	b00f883a 	mov	r7,r22
 800d980:	1009883a 	mov	r4,r2
 800d984:	180b883a 	mov	r5,r3
 800d988:	80165180 	call	8016518 <__adddf3>
 800d98c:	102f883a 	mov	r23,r2
 800d990:	182d883a 	mov	r22,r3
 800d994:	1829883a 	mov	r20,r3
 800d998:	d9000717 	ldw	r4,28(sp)
 800d99c:	2000021e 	bne	r4,zero,800d9a8 <_strtod_r+0xa38>
 800d9a0:	a09ffc2c 	andhi	r2,r20,32752
 800d9a4:	e080f126 	beq	fp,r2,800dd6c <_strtod_r+0xdfc>
 800d9a8:	d9400517 	ldw	r5,20(sp)
 800d9ac:	8809883a 	mov	r4,r17
 800d9b0:	800b64c0 	call	800b64c <_Bfree>
 800d9b4:	980b883a 	mov	r5,r19
 800d9b8:	8809883a 	mov	r4,r17
 800d9bc:	800b64c0 	call	800b64c <_Bfree>
 800d9c0:	800b883a 	mov	r5,r16
 800d9c4:	8809883a 	mov	r4,r17
 800d9c8:	800b64c0 	call	800b64c <_Bfree>
 800d9cc:	900b883a 	mov	r5,r18
 800d9d0:	8809883a 	mov	r4,r17
 800d9d4:	800b64c0 	call	800b64c <_Bfree>
 800d9d8:	003f3f06 	br	800d6d8 <__alt_data_end+0xfc00d6d8>
 800d9dc:	00c00044 	movi	r3,1
 800d9e0:	d8000d15 	stw	zero,52(sp)
 800d9e4:	d8c00f15 	stw	r3,60(sp)
 800d9e8:	003f6f06 	br	800d7a8 <__alt_data_end+0xfc00d7a8>
 800d9ec:	000d883a 	mov	r6,zero
 800d9f0:	01cff834 	movhi	r7,16352
 800d9f4:	e009883a 	mov	r4,fp
 800d9f8:	a00b883a 	mov	r5,r20
 800d9fc:	80179ec0 	call	80179ec <__muldf3>
 800da00:	d8801015 	stw	r2,64(sp)
 800da04:	d8c00d15 	stw	r3,52(sp)
 800da08:	a8001a1e 	bne	r21,zero,800da74 <_strtod_r+0xb04>
 800da0c:	1a20003c 	xorhi	r8,r3,32768
 800da10:	d8800f15 	stw	r2,60(sp)
 800da14:	4029883a 	mov	r20,r8
 800da18:	003fbe06 	br	800d914 <__alt_data_end+0xfc00d914>
 800da1c:	d8000b15 	stw	zero,44(sp)
 800da20:	04800044 	movi	r18,1
 800da24:	b000021e 	bne	r22,zero,800da30 <_strtod_r+0xac0>
 800da28:	d8c00c17 	ldw	r3,48(sp)
 800da2c:	183d9d26 	beq	r3,zero,800d0a4 <__alt_data_end+0xfc00d0a4>
 800da30:	0039883a 	mov	fp,zero
 800da34:	003e5206 	br	800d380 <__alt_data_end+0xfc00d380>
 800da38:	d8c00c17 	ldw	r3,48(sp)
 800da3c:	dd000e17 	ldw	r20,56(sp)
 800da40:	1889c83a 	sub	r4,r3,r2
 800da44:	003f4706 	br	800d764 <__alt_data_end+0xfc00d764>
 800da48:	00bef884 	movi	r2,-1054
 800da4c:	07000044 	movi	fp,1
 800da50:	10c5c83a 	sub	r2,r2,r3
 800da54:	e084983a 	sll	r2,fp,r2
 800da58:	df000f15 	stw	fp,60(sp)
 800da5c:	d8800d15 	stw	r2,52(sp)
 800da60:	003f5106 	br	800d7a8 <__alt_data_end+0xfc00d7a8>
 800da64:	d8c00717 	ldw	r3,28(sp)
 800da68:	0009883a 	mov	r4,zero
 800da6c:	d8c00615 	stw	r3,24(sp)
 800da70:	003de506 	br	800d208 <__alt_data_end+0xfc00d208>
 800da74:	da000d17 	ldw	r8,52(sp)
 800da78:	003fe506 	br	800da10 <__alt_data_end+0xfc00da10>
 800da7c:	b800521e 	bne	r23,zero,800dbc8 <_strtod_r+0xc58>
 800da80:	01000434 	movhi	r4,16
 800da84:	213fffc4 	addi	r4,r4,-1
 800da88:	b104703a 	and	r2,r22,r4
 800da8c:	1000501e 	bne	r2,zero,800dbd0 <_strtod_r+0xc60>
 800da90:	000d883a 	mov	r6,zero
 800da94:	01cffc34 	movhi	r7,16368
 800da98:	e009883a 	mov	r4,fp
 800da9c:	a00b883a 	mov	r5,r20
 800daa0:	80178f80 	call	80178f8 <__ledf2>
 800daa4:	10024216 	blt	r2,zero,800e3b0 <_strtod_r+0x1440>
 800daa8:	a00b883a 	mov	r5,r20
 800daac:	000d883a 	mov	r6,zero
 800dab0:	01cff834 	movhi	r7,16352
 800dab4:	e009883a 	mov	r4,fp
 800dab8:	80179ec0 	call	80179ec <__muldf3>
 800dabc:	d8801015 	stw	r2,64(sp)
 800dac0:	d8c00d15 	stw	r3,52(sp)
 800dac4:	1029883a 	mov	r20,r2
 800dac8:	1a20003c 	xorhi	r8,r3,32768
 800dacc:	dd000f15 	stw	r20,60(sp)
 800dad0:	4029883a 	mov	r20,r8
 800dad4:	003f8f06 	br	800d914 <__alt_data_end+0xfc00d914>
 800dad8:	8039883a 	mov	fp,r16
 800dadc:	002d883a 	mov	r22,zero
 800dae0:	d8000b15 	stw	zero,44(sp)
 800dae4:	bd7ff404 	addi	r21,r23,-48
 800dae8:	00800244 	movi	r2,9
 800daec:	15401236 	bltu	r2,r21,800db38 <_strtod_r+0xbc8>
 800daf0:	dd400e15 	stw	r21,56(sp)
 800daf4:	b0800044 	addi	r2,r22,1
 800daf8:	a801701e 	bne	r21,zero,800e0bc <_strtod_r+0x114c>
 800dafc:	ddc00617 	ldw	r23,24(sp)
 800db00:	102d883a 	mov	r22,r2
 800db04:	b8800044 	addi	r2,r23,1
 800db08:	d8800615 	stw	r2,24(sp)
 800db0c:	bdc00047 	ldb	r23,1(r23)
 800db10:	003ff406 	br	800dae4 <__alt_data_end+0xfc00dae4>
 800db14:	00c00044 	movi	r3,1
 800db18:	d8c00e15 	stw	r3,56(sp)
 800db1c:	d8c00717 	ldw	r3,28(sp)
 800db20:	18800084 	addi	r2,r3,2
 800db24:	d8800615 	stw	r2,24(sp)
 800db28:	1dc00087 	ldb	r23,2(r3)
 800db2c:	003e1f06 	br	800d3ac <__alt_data_end+0xfc00d3ac>
 800db30:	d8000e15 	stw	zero,56(sp)
 800db34:	003ff906 	br	800db1c <__alt_data_end+0xfc00db1c>
 800db38:	04800044 	movi	r18,1
 800db3c:	003dad06 	br	800d1f4 <__alt_data_end+0xfc00d1f4>
 800db40:	903d581e 	bne	r18,zero,800d0a4 <__alt_data_end+0xfc00d0a4>
 800db44:	00801384 	movi	r2,78
 800db48:	b8800526 	beq	r23,r2,800db60 <_strtod_r+0xbf0>
 800db4c:	15fd530e 	bge	r2,r23,800d09c <__alt_data_end+0xfc00d09c>
 800db50:	00801a44 	movi	r2,105
 800db54:	b8819a26 	beq	r23,r2,800e1c0 <_strtod_r+0x1250>
 800db58:	00801b84 	movi	r2,110
 800db5c:	b8bd511e 	bne	r23,r2,800d0a4 <__alt_data_end+0xfc00d0a4>
 800db60:	014200b4 	movhi	r5,2050
 800db64:	d9000617 	ldw	r4,24(sp)
 800db68:	29700104 	addi	r5,r5,-16380
 800db6c:	01c00644 	movi	r7,25
 800db70:	00000b06 	br	800dba0 <_strtod_r+0xc30>
 800db74:	21000044 	addi	r4,r4,1
 800db78:	20800003 	ldbu	r2,0(r4)
 800db7c:	10ffefc4 	addi	r3,r2,-65
 800db80:	10803fcc 	andi	r2,r2,255
 800db84:	1080201c 	xori	r2,r2,128
 800db88:	18c03fcc 	andi	r3,r3,255
 800db8c:	10bfe004 	addi	r2,r2,-128
 800db90:	38c00136 	bltu	r7,r3,800db98 <_strtod_r+0xc28>
 800db94:	10800804 	addi	r2,r2,32
 800db98:	29400044 	addi	r5,r5,1
 800db9c:	11bd411e 	bne	r2,r6,800d0a4 <__alt_data_end+0xfc00d0a4>
 800dba0:	29800007 	ldb	r6,0(r5)
 800dba4:	303ff31e 	bne	r6,zero,800db74 <__alt_data_end+0xfc00db74>
 800dba8:	20800044 	addi	r2,r4,1
 800dbac:	d8800615 	stw	r2,24(sp)
 800dbb0:	20c00047 	ldb	r3,1(r4)
 800dbb4:	00800a04 	movi	r2,40
 800dbb8:	18bde326 	beq	r3,r2,800d348 <__alt_data_end+0xfc00d348>
 800dbbc:	05bffe34 	movhi	r22,65528
 800dbc0:	002f883a 	mov	r23,zero
 800dbc4:	003dea06 	br	800d370 <__alt_data_end+0xfc00d370>
 800dbc8:	00800044 	movi	r2,1
 800dbcc:	b880ff26 	beq	r23,r2,800dfcc <_strtod_r+0x105c>
 800dbd0:	014ffc34 	movhi	r5,16368
 800dbd4:	d8000f15 	stw	zero,60(sp)
 800dbd8:	052ffc34 	movhi	r20,49136
 800dbdc:	d8001015 	stw	zero,64(sp)
 800dbe0:	d9400d15 	stw	r5,52(sp)
 800dbe4:	003f4b06 	br	800d914 <__alt_data_end+0xfc00d914>
 800dbe8:	d9001017 	ldw	r4,64(sp)
 800dbec:	d9400d17 	ldw	r5,52(sp)
 800dbf0:	80156e80 	call	80156e8 <__fixunsdfsi>
 800dbf4:	1000f126 	beq	r2,zero,800dfbc <_strtod_r+0x104c>
 800dbf8:	1009883a 	mov	r4,r2
 800dbfc:	8018cb00 	call	8018cb0 <__floatunsidf>
 800dc00:	d8801015 	stw	r2,64(sp)
 800dc04:	d8c00d15 	stw	r3,52(sp)
 800dc08:	a800ea1e 	bne	r21,zero,800dfb4 <_strtod_r+0x1044>
 800dc0c:	d8800d17 	ldw	r2,52(sp)
 800dc10:	1220003c 	xorhi	r8,r2,32768
 800dc14:	d8c01017 	ldw	r3,64(sp)
 800dc18:	4029883a 	mov	r20,r8
 800dc1c:	d8c00f15 	stw	r3,60(sp)
 800dc20:	003f4a06 	br	800d94c <__alt_data_end+0xfc00d94c>
 800dc24:	d8000c15 	stw	zero,48(sp)
 800dc28:	003ea506 	br	800d6c0 <__alt_data_end+0xfc00d6c0>
 800dc2c:	d8c00817 	ldw	r3,32(sp)
 800dc30:	00bfffc4 	movi	r2,-1
 800dc34:	1880441e 	bne	r3,r2,800dd48 <_strtod_r+0xdd8>
 800dc38:	9011883a 	mov	r8,r18
 800dc3c:	d8800517 	ldw	r2,20(sp)
 800dc40:	00c00884 	movi	r3,34
 800dc44:	88c00015 	stw	r3,0(r17)
 800dc48:	d8000815 	stw	zero,32(sp)
 800dc4c:	071ffc34 	movhi	fp,32752
 800dc50:	100b883a 	mov	r5,r2
 800dc54:	8809883a 	mov	r4,r17
 800dc58:	da001315 	stw	r8,76(sp)
 800dc5c:	800b64c0 	call	800b64c <_Bfree>
 800dc60:	980b883a 	mov	r5,r19
 800dc64:	8809883a 	mov	r4,r17
 800dc68:	800b64c0 	call	800b64c <_Bfree>
 800dc6c:	800b883a 	mov	r5,r16
 800dc70:	8809883a 	mov	r4,r17
 800dc74:	800b64c0 	call	800b64c <_Bfree>
 800dc78:	d9400b17 	ldw	r5,44(sp)
 800dc7c:	8809883a 	mov	r4,r17
 800dc80:	800b64c0 	call	800b64c <_Bfree>
 800dc84:	da001317 	ldw	r8,76(sp)
 800dc88:	8809883a 	mov	r4,r17
 800dc8c:	400b883a 	mov	r5,r8
 800dc90:	800b64c0 	call	800b64c <_Bfree>
 800dc94:	003d5f06 	br	800d214 <__alt_data_end+0xfc00d214>
 800dc98:	d8c00a17 	ldw	r3,40(sp)
 800dc9c:	d8800504 	addi	r2,sp,20
 800dca0:	018200b4 	movhi	r6,2050
 800dca4:	31b00704 	addi	r6,r6,-16356
 800dca8:	d8c00115 	stw	r3,4(sp)
 800dcac:	d8800015 	stw	r2,0(sp)
 800dcb0:	d9c00404 	addi	r7,sp,16
 800dcb4:	d9400604 	addi	r5,sp,24
 800dcb8:	8809883a 	mov	r4,r17
 800dcbc:	80131b00 	call	80131b0 <__gethex>
 800dcc0:	148001cc 	andi	r18,r2,7
 800dcc4:	903e2126 	beq	r18,zero,800d54c <__alt_data_end+0xfc00d54c>
 800dcc8:	00c00184 	movi	r3,6
 800dccc:	90c0c71e 	bne	r18,r3,800dfec <_strtod_r+0x107c>
 800dcd0:	84000044 	addi	r16,r16,1
 800dcd4:	dc000615 	stw	r16,24(sp)
 800dcd8:	d8000815 	stw	zero,32(sp)
 800dcdc:	0039883a 	mov	fp,zero
 800dce0:	d8000a15 	stw	zero,40(sp)
 800dce4:	003d4b06 	br	800d214 <__alt_data_end+0xfc00d214>
 800dce8:	00bf2c34 	movhi	r2,64688
 800dcec:	b0ad883a 	add	r22,r22,r2
 800dcf0:	b809883a 	mov	r4,r23
 800dcf4:	b00b883a 	mov	r5,r22
 800dcf8:	800c1840 	call	800c184 <__ulp>
 800dcfc:	d9000f17 	ldw	r4,60(sp)
 800dd00:	100d883a 	mov	r6,r2
 800dd04:	180f883a 	mov	r7,r3
 800dd08:	a00b883a 	mov	r5,r20
 800dd0c:	80179ec0 	call	80179ec <__muldf3>
 800dd10:	b80d883a 	mov	r6,r23
 800dd14:	1009883a 	mov	r4,r2
 800dd18:	b00f883a 	mov	r7,r22
 800dd1c:	180b883a 	mov	r5,r3
 800dd20:	80165180 	call	8016518 <__adddf3>
 800dd24:	011f2834 	movhi	r4,31904
 800dd28:	102f883a 	mov	r23,r2
 800dd2c:	213fffc4 	addi	r4,r4,-1
 800dd30:	189ffc2c 	andhi	r2,r3,32752
 800dd34:	20807b2e 	bgeu	r4,r2,800df24 <_strtod_r+0xfb4>
 800dd38:	d9401217 	ldw	r5,72(sp)
 800dd3c:	009ffc34 	movhi	r2,32752
 800dd40:	10bfffc4 	addi	r2,r2,-1
 800dd44:	28bfb926 	beq	r5,r2,800dc2c <__alt_data_end+0xfc00dc2c>
 800dd48:	059ffc34 	movhi	r22,32752
 800dd4c:	b5bfffc4 	addi	r22,r22,-1
 800dd50:	05ffffc4 	movi	r23,-1
 800dd54:	003f1406 	br	800d9a8 <__alt_data_end+0xfc00d9a8>
 800dd58:	00800884 	movi	r2,34
 800dd5c:	88800015 	stw	r2,0(r17)
 800dd60:	d8000815 	stw	zero,32(sp)
 800dd64:	071ffc34 	movhi	fp,32752
 800dd68:	003d2a06 	br	800d214 <__alt_data_end+0xfc00d214>
 800dd6c:	d9400d17 	ldw	r5,52(sp)
 800dd70:	d9001017 	ldw	r4,64(sp)
 800dd74:	8018b540 	call	8018b54 <__fixdfsi>
 800dd78:	1009883a 	mov	r4,r2
 800dd7c:	8018bd40 	call	8018bd4 <__floatsidf>
 800dd80:	d9001017 	ldw	r4,64(sp)
 800dd84:	d9400d17 	ldw	r5,52(sp)
 800dd88:	100d883a 	mov	r6,r2
 800dd8c:	180f883a 	mov	r7,r3
 800dd90:	80182580 	call	8018258 <__subdf3>
 800dd94:	1011883a 	mov	r8,r2
 800dd98:	1839883a 	mov	fp,r3
 800dd9c:	a800121e 	bne	r21,zero,800dde8 <_strtod_r+0xe78>
 800dda0:	b800111e 	bne	r23,zero,800dde8 <_strtod_r+0xe78>
 800dda4:	01400434 	movhi	r5,16
 800dda8:	297fffc4 	addi	r5,r5,-1
 800ddac:	a168703a 	and	r20,r20,r5
 800ddb0:	a0000d1e 	bne	r20,zero,800dde8 <_strtod_r+0xe78>
 800ddb4:	01a52834 	movhi	r6,38048
 800ddb8:	01cff434 	movhi	r7,16336
 800ddbc:	318d6544 	addi	r6,r6,13717
 800ddc0:	39ffffc4 	addi	r7,r7,-1
 800ddc4:	1009883a 	mov	r4,r2
 800ddc8:	180b883a 	mov	r5,r3
 800ddcc:	80178f80 	call	80178f8 <__ledf2>
 800ddd0:	103ef50e 	bge	r2,zero,800d9a8 <__alt_data_end+0xfc00d9a8>
 800ddd4:	9011883a 	mov	r8,r18
 800ddd8:	d8800517 	ldw	r2,20(sp)
 800dddc:	d8000815 	stw	zero,32(sp)
 800dde0:	b039883a 	mov	fp,r22
 800dde4:	003f9a06 	br	800dc50 <__alt_data_end+0xfc00dc50>
 800dde8:	01a52834 	movhi	r6,38048
 800ddec:	01cff834 	movhi	r7,16352
 800ddf0:	4009883a 	mov	r4,r8
 800ddf4:	318d6544 	addi	r6,r6,13717
 800ddf8:	39ffffc4 	addi	r7,r7,-1
 800ddfc:	e00b883a 	mov	r5,fp
 800de00:	da001315 	stw	r8,76(sp)
 800de04:	80178f80 	call	80178f8 <__ledf2>
 800de08:	da001317 	ldw	r8,76(sp)
 800de0c:	10000716 	blt	r2,zero,800de2c <_strtod_r+0xebc>
 800de10:	018d6c34 	movhi	r6,13744
 800de14:	31b94d44 	addi	r6,r6,-6859
 800de18:	01cff834 	movhi	r7,16352
 800de1c:	4009883a 	mov	r4,r8
 800de20:	e00b883a 	mov	r5,fp
 800de24:	801781c0 	call	801781c <__gedf2>
 800de28:	00bedf0e 	bge	zero,r2,800d9a8 <__alt_data_end+0xfc00d9a8>
 800de2c:	9011883a 	mov	r8,r18
 800de30:	d8800517 	ldw	r2,20(sp)
 800de34:	ddc00815 	stw	r23,32(sp)
 800de38:	b039883a 	mov	fp,r22
 800de3c:	003f8406 	br	800dc50 <__alt_data_end+0xfc00dc50>
 800de40:	903e1026 	beq	r18,zero,800d684 <__alt_data_end+0xfc00d684>
 800de44:	04a5c83a 	sub	r18,zero,r18
 800de48:	908003cc 	andi	r2,r18,15
 800de4c:	10000b26 	beq	r2,zero,800de7c <_strtod_r+0xf0c>
 800de50:	100490fa 	slli	r2,r2,3
 800de54:	00c200b4 	movhi	r3,2050
 800de58:	18efcc04 	addi	r3,r3,-16592
 800de5c:	1885883a 	add	r2,r3,r2
 800de60:	11800017 	ldw	r6,0(r2)
 800de64:	11c00117 	ldw	r7,4(r2)
 800de68:	b809883a 	mov	r4,r23
 800de6c:	b00b883a 	mov	r5,r22
 800de70:	8016dc40 	call	8016dc4 <__divdf3>
 800de74:	102f883a 	mov	r23,r2
 800de78:	182d883a 	mov	r22,r3
 800de7c:	9025d13a 	srai	r18,r18,4
 800de80:	903e0026 	beq	r18,zero,800d684 <__alt_data_end+0xfc00d684>
 800de84:	008007c4 	movi	r2,31
 800de88:	14801f16 	blt	r2,r18,800df08 <_strtod_r+0xf98>
 800de8c:	9080040c 	andi	r2,r18,16
 800de90:	10018d26 	beq	r2,zero,800e4c8 <_strtod_r+0x1558>
 800de94:	00c01a84 	movi	r3,106
 800de98:	d8c00715 	stw	r3,28(sp)
 800de9c:	04817e0e 	bge	zero,r18,800e498 <_strtod_r+0x1528>
 800dea0:	050200b4 	movhi	r20,2050
 800dea4:	a5300c04 	addi	r20,r20,-16336
 800dea8:	b805883a 	mov	r2,r23
 800deac:	b007883a 	mov	r3,r22
 800deb0:	0009883a 	mov	r4,zero
 800deb4:	9180004c 	andi	r6,r18,1
 800deb8:	30000626 	beq	r6,zero,800ded4 <_strtod_r+0xf64>
 800debc:	a1800017 	ldw	r6,0(r20)
 800dec0:	a1c00117 	ldw	r7,4(r20)
 800dec4:	1009883a 	mov	r4,r2
 800dec8:	180b883a 	mov	r5,r3
 800decc:	80179ec0 	call	80179ec <__muldf3>
 800ded0:	01000044 	movi	r4,1
 800ded4:	9025d07a 	srai	r18,r18,1
 800ded8:	a5000204 	addi	r20,r20,8
 800dedc:	903ff51e 	bne	r18,zero,800deb4 <__alt_data_end+0xfc00deb4>
 800dee0:	21003fcc 	andi	r4,r4,255
 800dee4:	2001891e 	bne	r4,zero,800e50c <_strtod_r+0x159c>
 800dee8:	d9000717 	ldw	r4,28(sp)
 800deec:	20016a1e 	bne	r4,zero,800e498 <_strtod_r+0x1528>
 800def0:	000d883a 	mov	r6,zero
 800def4:	000f883a 	mov	r7,zero
 800def8:	b809883a 	mov	r4,r23
 800defc:	b00b883a 	mov	r5,r22
 800df00:	80177940 	call	8017794 <__eqdf2>
 800df04:	103de01e 	bne	r2,zero,800d688 <__alt_data_end+0xfc00d688>
 800df08:	00800884 	movi	r2,34
 800df0c:	88800015 	stw	r2,0(r17)
 800df10:	d8000815 	stw	zero,32(sp)
 800df14:	0039883a 	mov	fp,zero
 800df18:	003cbe06 	br	800d214 <__alt_data_end+0xfc00d214>
 800df1c:	011387c4 	movi	r4,19999
 800df20:	003d5606 	br	800d47c <__alt_data_end+0xfc00d47c>
 800df24:	0580d434 	movhi	r22,848
 800df28:	1dad883a 	add	r22,r3,r22
 800df2c:	b029883a 	mov	r20,r22
 800df30:	003e9906 	br	800d998 <__alt_data_end+0xfc00d998>
 800df34:	e5c03fcc 	andi	r23,fp,255
 800df38:	bdc0201c 	xori	r23,r23,128
 800df3c:	bdffe004 	addi	r23,r23,-128
 800df40:	dc800817 	ldw	r18,32(sp)
 800df44:	0029883a 	mov	r20,zero
 800df48:	0027883a 	mov	r19,zero
 800df4c:	0021883a 	mov	r16,zero
 800df50:	003c9806 	br	800d1b4 <__alt_data_end+0xfc00d1b4>
 800df54:	00c00944 	movi	r3,37
 800df58:	1f07c83a 	sub	r3,r3,fp
 800df5c:	1d7d7e16 	blt	r3,r21,800d558 <__alt_data_end+0xfc00d558>
 800df60:	1721c83a 	sub	r16,r2,fp
 800df64:	800490fa 	slli	r2,r16,3
 800df68:	044200b4 	movhi	r17,2050
 800df6c:	8c6fcc04 	addi	r17,r17,-16592
 800df70:	8885883a 	add	r2,r17,r2
 800df74:	11000017 	ldw	r4,0(r2)
 800df78:	11400117 	ldw	r5,4(r2)
 800df7c:	b80d883a 	mov	r6,r23
 800df80:	b00f883a 	mov	r7,r22
 800df84:	80179ec0 	call	80179ec <__muldf3>
 800df88:	ac2bc83a 	sub	r21,r21,r16
 800df8c:	a80c90fa 	slli	r6,r21,3
 800df90:	1009883a 	mov	r4,r2
 800df94:	180b883a 	mov	r5,r3
 800df98:	8985883a 	add	r2,r17,r6
 800df9c:	11800017 	ldw	r6,0(r2)
 800dfa0:	11c00117 	ldw	r7,4(r2)
 800dfa4:	80179ec0 	call	80179ec <__muldf3>
 800dfa8:	d8800815 	stw	r2,32(sp)
 800dfac:	1839883a 	mov	fp,r3
 800dfb0:	003c9806 	br	800d214 <__alt_data_end+0xfc00d214>
 800dfb4:	da000d17 	ldw	r8,52(sp)
 800dfb8:	003f1606 	br	800dc14 <__alt_data_end+0xfc00dc14>
 800dfbc:	014ffc34 	movhi	r5,16368
 800dfc0:	d8001015 	stw	zero,64(sp)
 800dfc4:	d9400d15 	stw	r5,52(sp)
 800dfc8:	003f0f06 	br	800dc08 <__alt_data_end+0xfc00dc08>
 800dfcc:	b03f001e 	bne	r22,zero,800dbd0 <__alt_data_end+0xfc00dbd0>
 800dfd0:	9011883a 	mov	r8,r18
 800dfd4:	00800884 	movi	r2,34
 800dfd8:	88800015 	stw	r2,0(r17)
 800dfdc:	d8000815 	stw	zero,32(sp)
 800dfe0:	d8800517 	ldw	r2,20(sp)
 800dfe4:	0039883a 	mov	fp,zero
 800dfe8:	003f1906 	br	800dc50 <__alt_data_end+0xfc00dc50>
 800dfec:	d9800517 	ldw	r6,20(sp)
 800dff0:	30000826 	beq	r6,zero,800e014 <_strtod_r+0x10a4>
 800dff4:	01400d44 	movi	r5,53
 800dff8:	d9000204 	addi	r4,sp,8
 800dffc:	d8801315 	stw	r2,76(sp)
 800e000:	800c5580 	call	800c558 <__copybits>
 800e004:	d9400517 	ldw	r5,20(sp)
 800e008:	8809883a 	mov	r4,r17
 800e00c:	800b64c0 	call	800b64c <_Bfree>
 800e010:	d8801317 	ldw	r2,76(sp)
 800e014:	00c00184 	movi	r3,6
 800e018:	1c800f36 	bltu	r3,r18,800e058 <_strtod_r+0x10e8>
 800e01c:	902490ba 	slli	r18,r18,2
 800e020:	00c20074 	movhi	r3,2049
 800e024:	18f80d04 	addi	r3,r3,-8140
 800e028:	90e5883a 	add	r18,r18,r3
 800e02c:	90c00017 	ldw	r3,0(r18)
 800e030:	1800683a 	jmp	r3
 800e034:	0800e0b0 	cmpltui	zero,at,898
 800e038:	0800e088 	cmpgei	zero,at,898
 800e03c:	0800e06c 	andhi	zero,at,897
 800e040:	0800e050 	cmplti	zero,at,897
 800e044:	0800e078 	rdprs	zero,at,897
 800e048:	0800e088 	cmpgei	zero,at,898
 800e04c:	0800e0b0 	cmpltui	zero,at,898
 800e050:	059ffc34 	movhi	r22,32752
 800e054:	002f883a 	mov	r23,zero
 800e058:	1080020c 	andi	r2,r2,8
 800e05c:	ddc00815 	stw	r23,32(sp)
 800e060:	103cc426 	beq	r2,zero,800d374 <__alt_data_end+0xfc00d374>
 800e064:	b7200034 	orhi	fp,r22,32768
 800e068:	003c6a06 	br	800d214 <__alt_data_end+0xfc00d214>
 800e06c:	ddc00217 	ldw	r23,8(sp)
 800e070:	dd800317 	ldw	r22,12(sp)
 800e074:	003ff806 	br	800e058 <__alt_data_end+0xfc00e058>
 800e078:	05a00034 	movhi	r22,32768
 800e07c:	b5bfffc4 	addi	r22,r22,-1
 800e080:	05ffffc4 	movi	r23,-1
 800e084:	003ff406 	br	800e058 <__alt_data_end+0xfc00e058>
 800e088:	d8c00417 	ldw	r3,16(sp)
 800e08c:	dd800317 	ldw	r22,12(sp)
 800e090:	013ffc34 	movhi	r4,65520
 800e094:	18c10cc4 	addi	r3,r3,1075
 800e098:	1806953a 	slli	r3,r3,20
 800e09c:	213fffc4 	addi	r4,r4,-1
 800e0a0:	b12c703a 	and	r22,r22,r4
 800e0a4:	ddc00217 	ldw	r23,8(sp)
 800e0a8:	b0ecb03a 	or	r22,r22,r3
 800e0ac:	003fea06 	br	800e058 <__alt_data_end+0xfc00e058>
 800e0b0:	002d883a 	mov	r22,zero
 800e0b4:	002f883a 	mov	r23,zero
 800e0b8:	003fe706 	br	800e058 <__alt_data_end+0xfc00e058>
 800e0bc:	d8c00b17 	ldw	r3,44(sp)
 800e0c0:	b72d883a 	add	r22,r22,fp
 800e0c4:	1887883a 	add	r3,r3,r2
 800e0c8:	d8c00b15 	stw	r3,44(sp)
 800e0cc:	00c00044 	movi	r3,1
 800e0d0:	10c11126 	beq	r2,r3,800e518 <_strtod_r+0x15a8>
 800e0d4:	05c00204 	movi	r23,8
 800e0d8:	04800404 	movi	r18,16
 800e0dc:	e7000044 	addi	fp,fp,1
 800e0e0:	e0bfffc4 	addi	r2,fp,-1
 800e0e4:	b8802016 	blt	r23,r2,800e168 <_strtod_r+0x11f8>
 800e0e8:	9809883a 	mov	r4,r19
 800e0ec:	01400284 	movi	r5,10
 800e0f0:	80028f40 	call	80028f4 <__mulsi3>
 800e0f4:	1027883a 	mov	r19,r2
 800e0f8:	e5bff81e 	bne	fp,r22,800e0dc <__alt_data_end+0xfc00e0dc>
 800e0fc:	ddc00617 	ldw	r23,24(sp)
 800e100:	e7000044 	addi	fp,fp,1
 800e104:	00800204 	movi	r2,8
 800e108:	1580100e 	bge	r2,r22,800e14c <_strtod_r+0x11dc>
 800e10c:	00800404 	movi	r2,16
 800e110:	002d883a 	mov	r22,zero
 800e114:	173e7b16 	blt	r2,fp,800db04 <__alt_data_end+0xfc00db04>
 800e118:	a009883a 	mov	r4,r20
 800e11c:	01400284 	movi	r5,10
 800e120:	80028f40 	call	80028f4 <__mulsi3>
 800e124:	a8a9883a 	add	r20,r21,r2
 800e128:	003e7606 	br	800db04 <__alt_data_end+0xfc00db04>
 800e12c:	d9000617 	ldw	r4,24(sp)
 800e130:	bdfff404 	addi	r23,r23,-48
 800e134:	b5800044 	addi	r22,r22,1
 800e138:	ddc00e15 	stw	r23,56(sp)
 800e13c:	d9000815 	stw	r4,32(sp)
 800e140:	dd800b15 	stw	r22,44(sp)
 800e144:	202f883a 	mov	r23,r4
 800e148:	07000044 	movi	fp,1
 800e14c:	9809883a 	mov	r4,r19
 800e150:	01400284 	movi	r5,10
 800e154:	80028f40 	call	80028f4 <__mulsi3>
 800e158:	d8c00e17 	ldw	r3,56(sp)
 800e15c:	002d883a 	mov	r22,zero
 800e160:	18a7883a 	add	r19,r3,r2
 800e164:	003e6706 	br	800db04 <__alt_data_end+0xfc00db04>
 800e168:	973fe316 	blt	r18,fp,800e0f8 <__alt_data_end+0xfc00e0f8>
 800e16c:	a009883a 	mov	r4,r20
 800e170:	01400284 	movi	r5,10
 800e174:	80028f40 	call	80028f4 <__mulsi3>
 800e178:	1029883a 	mov	r20,r2
 800e17c:	003fde06 	br	800e0f8 <__alt_data_end+0xfc00e0f8>
 800e180:	00bffa84 	movi	r2,-22
 800e184:	a8bcf416 	blt	r21,r2,800d558 <__alt_data_end+0xfc00d558>
 800e188:	a82a90fa 	slli	r21,r21,3
 800e18c:	008200b4 	movhi	r2,2050
 800e190:	10afcc04 	addi	r2,r2,-16592
 800e194:	1545c83a 	sub	r2,r2,r21
 800e198:	11800017 	ldw	r6,0(r2)
 800e19c:	11c00117 	ldw	r7,4(r2)
 800e1a0:	b809883a 	mov	r4,r23
 800e1a4:	b00b883a 	mov	r5,r22
 800e1a8:	8016dc40 	call	8016dc4 <__divdf3>
 800e1ac:	d8800815 	stw	r2,32(sp)
 800e1b0:	1839883a 	mov	fp,r3
 800e1b4:	003c1706 	br	800d214 <__alt_data_end+0xfc00d214>
 800e1b8:	9011883a 	mov	r8,r18
 800e1bc:	003ea006 	br	800dc40 <__alt_data_end+0xfc00dc40>
 800e1c0:	014200b4 	movhi	r5,2050
 800e1c4:	d9000617 	ldw	r4,24(sp)
 800e1c8:	296ffe04 	addi	r5,r5,-16392
 800e1cc:	01c00644 	movi	r7,25
 800e1d0:	00000b06 	br	800e200 <_strtod_r+0x1290>
 800e1d4:	21000044 	addi	r4,r4,1
 800e1d8:	20800003 	ldbu	r2,0(r4)
 800e1dc:	10ffefc4 	addi	r3,r2,-65
 800e1e0:	10803fcc 	andi	r2,r2,255
 800e1e4:	1080201c 	xori	r2,r2,128
 800e1e8:	18c03fcc 	andi	r3,r3,255
 800e1ec:	10bfe004 	addi	r2,r2,-128
 800e1f0:	38c00136 	bltu	r7,r3,800e1f8 <_strtod_r+0x1288>
 800e1f4:	10800804 	addi	r2,r2,32
 800e1f8:	29400044 	addi	r5,r5,1
 800e1fc:	11bba91e 	bne	r2,r6,800d0a4 <__alt_data_end+0xfc00d0a4>
 800e200:	29800007 	ldb	r6,0(r5)
 800e204:	303ff31e 	bne	r6,zero,800e1d4 <__alt_data_end+0xfc00e1d4>
 800e208:	018200b4 	movhi	r6,2050
 800e20c:	d9000615 	stw	r4,24(sp)
 800e210:	31afff04 	addi	r6,r6,-16388
 800e214:	200b883a 	mov	r5,r4
 800e218:	02000644 	movi	r8,25
 800e21c:	00000a06 	br	800e248 <_strtod_r+0x12d8>
 800e220:	28800003 	ldbu	r2,0(r5)
 800e224:	10ffefc4 	addi	r3,r2,-65
 800e228:	10803fcc 	andi	r2,r2,255
 800e22c:	1080201c 	xori	r2,r2,128
 800e230:	18c03fcc 	andi	r3,r3,255
 800e234:	10bfe004 	addi	r2,r2,-128
 800e238:	40c00136 	bltu	r8,r3,800e240 <_strtod_r+0x12d0>
 800e23c:	10800804 	addi	r2,r2,32
 800e240:	31800044 	addi	r6,r6,1
 800e244:	11c0691e 	bne	r2,r7,800e3ec <_strtod_r+0x147c>
 800e248:	31c00007 	ldb	r7,0(r6)
 800e24c:	29400044 	addi	r5,r5,1
 800e250:	383ff31e 	bne	r7,zero,800e220 <__alt_data_end+0xfc00e220>
 800e254:	d9400615 	stw	r5,24(sp)
 800e258:	059ffc34 	movhi	r22,32752
 800e25c:	002f883a 	mov	r23,zero
 800e260:	003c4306 	br	800d370 <__alt_data_end+0xfc00d370>
 800e264:	002d883a 	mov	r22,zero
 800e268:	003cad06 	br	800d520 <__alt_data_end+0xfc00d520>
 800e26c:	9011883a 	mov	r8,r18
 800e270:	df001217 	ldw	fp,72(sp)
 800e274:	a800461e 	bne	r21,zero,800e390 <_strtod_r+0x1420>
 800e278:	b800451e 	bne	r23,zero,800e390 <_strtod_r+0x1420>
 800e27c:	00800434 	movhi	r2,16
 800e280:	10bfffc4 	addi	r2,r2,-1
 800e284:	b084703a 	and	r2,r22,r2
 800e288:	1000411e 	bne	r2,zero,800e390 <_strtod_r+0x1420>
 800e28c:	b49ffc2c 	andhi	r18,r22,32752
 800e290:	0081ac34 	movhi	r2,1712
 800e294:	14803e2e 	bgeu	r2,r18,800e390 <_strtod_r+0x1420>
 800e298:	40800517 	ldw	r2,20(r8)
 800e29c:	1000031e 	bne	r2,zero,800e2ac <_strtod_r+0x133c>
 800e2a0:	40800417 	ldw	r2,16(r8)
 800e2a4:	00c00044 	movi	r3,1
 800e2a8:	1880390e 	bge	r3,r2,800e390 <_strtod_r+0x1420>
 800e2ac:	400b883a 	mov	r5,r8
 800e2b0:	01800044 	movi	r6,1
 800e2b4:	8809883a 	mov	r4,r17
 800e2b8:	800bde00 	call	800bde0 <__lshift>
 800e2bc:	800b883a 	mov	r5,r16
 800e2c0:	1009883a 	mov	r4,r2
 800e2c4:	d8801315 	stw	r2,76(sp)
 800e2c8:	800bf280 	call	800bf28 <__mcmp>
 800e2cc:	da001317 	ldw	r8,76(sp)
 800e2d0:	00802f0e 	bge	zero,r2,800e390 <_strtod_r+0x1420>
 800e2d4:	d9000717 	ldw	r4,28(sp)
 800e2d8:	20008026 	beq	r4,zero,800e4dc <_strtod_r+0x156c>
 800e2dc:	0081ac34 	movhi	r2,1712
 800e2e0:	14807e16 	blt	r2,r18,800e4dc <_strtod_r+0x156c>
 800e2e4:	0080dc34 	movhi	r2,880
 800e2e8:	14bf3a0e 	bge	r2,r18,800dfd4 <__alt_data_end+0xfc00dfd4>
 800e2ec:	d9000817 	ldw	r4,32(sp)
 800e2f0:	e00b883a 	mov	r5,fp
 800e2f4:	000d883a 	mov	r6,zero
 800e2f8:	01ce5434 	movhi	r7,14672
 800e2fc:	da001315 	stw	r8,76(sp)
 800e300:	80179ec0 	call	80179ec <__muldf3>
 800e304:	d8800815 	stw	r2,32(sp)
 800e308:	1839883a 	mov	fp,r3
 800e30c:	da001317 	ldw	r8,76(sp)
 800e310:	1800211e 	bne	r3,zero,800e398 <_strtod_r+0x1428>
 800e314:	d8c00817 	ldw	r3,32(sp)
 800e318:	d8800517 	ldw	r2,20(sp)
 800e31c:	183e4c1e 	bne	r3,zero,800dc50 <__alt_data_end+0xfc00dc50>
 800e320:	00c00884 	movi	r3,34
 800e324:	88c00015 	stw	r3,0(r17)
 800e328:	003e4906 	br	800dc50 <__alt_data_end+0xfc00dc50>
 800e32c:	00800434 	movhi	r2,16
 800e330:	9011883a 	mov	r8,r18
 800e334:	df001217 	ldw	fp,72(sp)
 800e338:	10bfffc4 	addi	r2,r2,-1
 800e33c:	a8002226 	beq	r21,zero,800e3c8 <_strtod_r+0x1458>
 800e340:	b086703a 	and	r3,r22,r2
 800e344:	18804126 	beq	r3,r2,800e44c <_strtod_r+0x14dc>
 800e348:	d8c00d17 	ldw	r3,52(sp)
 800e34c:	18002326 	beq	r3,zero,800e3dc <_strtod_r+0x146c>
 800e350:	1da4703a 	and	r18,r3,r22
 800e354:	90000e26 	beq	r18,zero,800e390 <_strtod_r+0x1420>
 800e358:	da001315 	stw	r8,76(sp)
 800e35c:	d9800717 	ldw	r6,28(sp)
 800e360:	b809883a 	mov	r4,r23
 800e364:	b00b883a 	mov	r5,r22
 800e368:	a8002826 	beq	r21,zero,800e40c <_strtod_r+0x149c>
 800e36c:	800cf0c0 	call	800cf0c <sulp>
 800e370:	100d883a 	mov	r6,r2
 800e374:	180f883a 	mov	r7,r3
 800e378:	b809883a 	mov	r4,r23
 800e37c:	b00b883a 	mov	r5,r22
 800e380:	80165180 	call	8016518 <__adddf3>
 800e384:	da001317 	ldw	r8,76(sp)
 800e388:	d8800815 	stw	r2,32(sp)
 800e38c:	1839883a 	mov	fp,r3
 800e390:	d8800717 	ldw	r2,28(sp)
 800e394:	103fd51e 	bne	r2,zero,800e2ec <__alt_data_end+0xfc00e2ec>
 800e398:	d8800517 	ldw	r2,20(sp)
 800e39c:	003e2c06 	br	800dc50 <__alt_data_end+0xfc00dc50>
 800e3a0:	0580d434 	movhi	r22,848
 800e3a4:	1dad883a 	add	r22,r3,r22
 800e3a8:	d8000715 	stw	zero,28(sp)
 800e3ac:	003cb606 	br	800d688 <__alt_data_end+0xfc00d688>
 800e3b0:	008ff834 	movhi	r2,16352
 800e3b4:	0029883a 	mov	r20,zero
 800e3b8:	022ff834 	movhi	r8,49120
 800e3bc:	d8001015 	stw	zero,64(sp)
 800e3c0:	d8800d15 	stw	r2,52(sp)
 800e3c4:	003dc106 	br	800dacc <__alt_data_end+0xfc00dacc>
 800e3c8:	b084703a 	and	r2,r22,r2
 800e3cc:	103fde1e 	bne	r2,zero,800e348 <__alt_data_end+0xfc00e348>
 800e3d0:	b83fdd1e 	bne	r23,zero,800e348 <__alt_data_end+0xfc00e348>
 800e3d4:	b49ffc2c 	andhi	r18,r22,32752
 800e3d8:	003fbe06 	br	800e2d4 <__alt_data_end+0xfc00e2d4>
 800e3dc:	d8c00f17 	ldw	r3,60(sp)
 800e3e0:	1de8703a 	and	r20,r3,r23
 800e3e4:	a03fea26 	beq	r20,zero,800e390 <__alt_data_end+0xfc00e390>
 800e3e8:	003fdb06 	br	800e358 <__alt_data_end+0xfc00e358>
 800e3ec:	21000044 	addi	r4,r4,1
 800e3f0:	d9000615 	stw	r4,24(sp)
 800e3f4:	003f9806 	br	800e258 <__alt_data_end+0xfc00e258>
 800e3f8:	014200b4 	movhi	r5,2050
 800e3fc:	296fc204 	addi	r5,r5,-16632
 800e400:	d9400715 	stw	r5,28(sp)
 800e404:	0025883a 	mov	r18,zero
 800e408:	003c8c06 	br	800d63c <__alt_data_end+0xfc00d63c>
 800e40c:	800cf0c0 	call	800cf0c <sulp>
 800e410:	100d883a 	mov	r6,r2
 800e414:	180f883a 	mov	r7,r3
 800e418:	b809883a 	mov	r4,r23
 800e41c:	b00b883a 	mov	r5,r22
 800e420:	80182580 	call	8018258 <__subdf3>
 800e424:	000d883a 	mov	r6,zero
 800e428:	000f883a 	mov	r7,zero
 800e42c:	1009883a 	mov	r4,r2
 800e430:	180b883a 	mov	r5,r3
 800e434:	d8800815 	stw	r2,32(sp)
 800e438:	1839883a 	mov	fp,r3
 800e43c:	80177940 	call	8017794 <__eqdf2>
 800e440:	da001317 	ldw	r8,76(sp)
 800e444:	103ee326 	beq	r2,zero,800dfd4 <__alt_data_end+0xfc00dfd4>
 800e448:	003fd106 	br	800e390 <__alt_data_end+0xfc00e390>
 800e44c:	d8c00717 	ldw	r3,28(sp)
 800e450:	18002026 	beq	r3,zero,800e4d4 <_strtod_r+0x1564>
 800e454:	b09ffc2c 	andhi	r2,r22,32752
 800e458:	00c1a834 	movhi	r3,1696
 800e45c:	18801d36 	bltu	r3,r2,800e4d4 <_strtod_r+0x1564>
 800e460:	1004d53a 	srli	r2,r2,20
 800e464:	00c01ac4 	movi	r3,107
 800e468:	1887c83a 	sub	r3,r3,r2
 800e46c:	00bfffc4 	movi	r2,-1
 800e470:	10c4983a 	sll	r2,r2,r3
 800e474:	15ffb41e 	bne	r2,r23,800e348 <__alt_data_end+0xfc00e348>
 800e478:	00dffc34 	movhi	r3,32752
 800e47c:	18ffffc4 	addi	r3,r3,-1
 800e480:	b0c03126 	beq	r22,r3,800e548 <_strtod_r+0x15d8>
 800e484:	b59ffc2c 	andhi	r22,r22,32752
 800e488:	00800434 	movhi	r2,16
 800e48c:	d8000815 	stw	zero,32(sp)
 800e490:	b0b9883a 	add	fp,r22,r2
 800e494:	003fbe06 	br	800e390 <__alt_data_end+0xfc00e390>
 800e498:	b49ffc2c 	andhi	r18,r22,32752
 800e49c:	9024d53a 	srli	r18,r18,20
 800e4a0:	00801ac4 	movi	r2,107
 800e4a4:	14a5c83a 	sub	r18,r2,r18
 800e4a8:	04be910e 	bge	zero,r18,800def0 <__alt_data_end+0xfc00def0>
 800e4ac:	008007c4 	movi	r2,31
 800e4b0:	1480120e 	bge	r2,r18,800e4fc <_strtod_r+0x158c>
 800e4b4:	00800d04 	movi	r2,52
 800e4b8:	002f883a 	mov	r23,zero
 800e4bc:	14801a0e 	bge	r2,r18,800e528 <_strtod_r+0x15b8>
 800e4c0:	0580dc34 	movhi	r22,880
 800e4c4:	003e8a06 	br	800def0 <__alt_data_end+0xfc00def0>
 800e4c8:	d8000715 	stw	zero,28(sp)
 800e4cc:	04be7416 	blt	zero,r18,800dea0 <__alt_data_end+0xfc00dea0>
 800e4d0:	003e8706 	br	800def0 <__alt_data_end+0xfc00def0>
 800e4d4:	00bfffc4 	movi	r2,-1
 800e4d8:	003fe606 	br	800e474 <__alt_data_end+0xfc00e474>
 800e4dc:	073ffc34 	movhi	fp,65520
 800e4e0:	9725883a 	add	r18,r18,fp
 800e4e4:	017fffc4 	movi	r5,-1
 800e4e8:	07000434 	movhi	fp,16
 800e4ec:	e179883a 	add	fp,fp,r5
 800e4f0:	d9400815 	stw	r5,32(sp)
 800e4f4:	9738b03a 	or	fp,r18,fp
 800e4f8:	003fa506 	br	800e390 <__alt_data_end+0xfc00e390>
 800e4fc:	00bfffc4 	movi	r2,-1
 800e500:	14a4983a 	sll	r18,r2,r18
 800e504:	95ee703a 	and	r23,r18,r23
 800e508:	003e7906 	br	800def0 <__alt_data_end+0xfc00def0>
 800e50c:	102f883a 	mov	r23,r2
 800e510:	182d883a 	mov	r22,r3
 800e514:	003e7406 	br	800dee8 <__alt_data_end+0xfc00dee8>
 800e518:	e02d883a 	mov	r22,fp
 800e51c:	ddc00617 	ldw	r23,24(sp)
 800e520:	e0f9883a 	add	fp,fp,r3
 800e524:	003ef706 	br	800e104 <__alt_data_end+0xfc00e104>
 800e528:	94bff804 	addi	r18,r18,-32
 800e52c:	00bfffc4 	movi	r2,-1
 800e530:	14a4983a 	sll	r18,r2,r18
 800e534:	95ac703a 	and	r22,r18,r22
 800e538:	003e6d06 	br	800def0 <__alt_data_end+0xfc00def0>
 800e53c:	102f883a 	mov	r23,r2
 800e540:	182d883a 	mov	r22,r3
 800e544:	003c3d06 	br	800d63c <__alt_data_end+0xfc00d63c>
 800e548:	00ffffc4 	movi	r3,-1
 800e54c:	10ffcd1e 	bne	r2,r3,800e484 <__alt_data_end+0xfc00e484>
 800e550:	003dba06 	br	800dc3c <__alt_data_end+0xfc00dc3c>

0800e554 <strtod>:
 800e554:	008200b4 	movhi	r2,2050
 800e558:	10b77404 	addi	r2,r2,-8752
 800e55c:	280d883a 	mov	r6,r5
 800e560:	200b883a 	mov	r5,r4
 800e564:	11000017 	ldw	r4,0(r2)
 800e568:	800cf701 	jmpi	800cf70 <_strtod_r>

0800e56c <strtof>:
 800e56c:	defffb04 	addi	sp,sp,-20
 800e570:	dcc00315 	stw	r19,12(sp)
 800e574:	04c200b4 	movhi	r19,2050
 800e578:	9cf77404 	addi	r19,r19,-8752
 800e57c:	280d883a 	mov	r6,r5
 800e580:	200b883a 	mov	r5,r4
 800e584:	99000017 	ldw	r4,0(r19)
 800e588:	dfc00415 	stw	ra,16(sp)
 800e58c:	dc800215 	stw	r18,8(sp)
 800e590:	dc400115 	stw	r17,4(sp)
 800e594:	dc000015 	stw	r16,0(sp)
 800e598:	800cf700 	call	800cf70 <_strtod_r>
 800e59c:	1009883a 	mov	r4,r2
 800e5a0:	180b883a 	mov	r5,r3
 800e5a4:	1025883a 	mov	r18,r2
 800e5a8:	1823883a 	mov	r17,r3
 800e5ac:	8018d580 	call	8018d58 <__truncdfsf2>
 800e5b0:	000b883a 	mov	r5,zero
 800e5b4:	1009883a 	mov	r4,r2
 800e5b8:	1021883a 	mov	r16,r2
 800e5bc:	801631c0 	call	801631c <__eqsf2>
 800e5c0:	1000111e 	bne	r2,zero,800e608 <strtof+0x9c>
 800e5c4:	000d883a 	mov	r6,zero
 800e5c8:	000f883a 	mov	r7,zero
 800e5cc:	9009883a 	mov	r4,r18
 800e5d0:	880b883a 	mov	r5,r17
 800e5d4:	80177940 	call	8017794 <__eqdf2>
 800e5d8:	10000b26 	beq	r2,zero,800e608 <strtof+0x9c>
 800e5dc:	98800017 	ldw	r2,0(r19)
 800e5e0:	00c00884 	movi	r3,34
 800e5e4:	10c00015 	stw	r3,0(r2)
 800e5e8:	8005883a 	mov	r2,r16
 800e5ec:	dfc00417 	ldw	ra,16(sp)
 800e5f0:	dcc00317 	ldw	r19,12(sp)
 800e5f4:	dc800217 	ldw	r18,8(sp)
 800e5f8:	dc400117 	ldw	r17,4(sp)
 800e5fc:	dc000017 	ldw	r16,0(sp)
 800e600:	dec00504 	addi	sp,sp,20
 800e604:	f800283a 	ret
 800e608:	015fe034 	movhi	r5,32640
 800e60c:	297fffc4 	addi	r5,r5,-1
 800e610:	8009883a 	mov	r4,r16
 800e614:	80163940 	call	8016394 <__gesf2>
 800e618:	0080070e 	bge	zero,r2,800e638 <strtof+0xcc>
 800e61c:	01dffc34 	movhi	r7,32752
 800e620:	39ffffc4 	addi	r7,r7,-1
 800e624:	01bfffc4 	movi	r6,-1
 800e628:	9009883a 	mov	r4,r18
 800e62c:	880b883a 	mov	r5,r17
 800e630:	801781c0 	call	801781c <__gedf2>
 800e634:	00bfe90e 	bge	zero,r2,800e5dc <__alt_data_end+0xfc00e5dc>
 800e638:	017fe034 	movhi	r5,65408
 800e63c:	297fffc4 	addi	r5,r5,-1
 800e640:	8009883a 	mov	r4,r16
 800e644:	80164500 	call	8016450 <__lesf2>
 800e648:	103fe70e 	bge	r2,zero,800e5e8 <__alt_data_end+0xfc00e5e8>
 800e64c:	01fffc34 	movhi	r7,65520
 800e650:	39ffffc4 	addi	r7,r7,-1
 800e654:	01bfffc4 	movi	r6,-1
 800e658:	9009883a 	mov	r4,r18
 800e65c:	880b883a 	mov	r5,r17
 800e660:	80178f80 	call	80178f8 <__ledf2>
 800e664:	103fdd0e 	bge	r2,zero,800e5dc <__alt_data_end+0xfc00e5dc>
 800e668:	003fdf06 	br	800e5e8 <__alt_data_end+0xfc00e5e8>

0800e66c <_strtol_r>:
 800e66c:	008200b4 	movhi	r2,2050
 800e670:	defff204 	addi	sp,sp,-56
 800e674:	10b77704 	addi	r2,r2,-8740
 800e678:	dd800a15 	stw	r22,40(sp)
 800e67c:	15800017 	ldw	r22,0(r2)
 800e680:	df000c15 	stw	fp,48(sp)
 800e684:	d9000315 	stw	r4,12(sp)
 800e688:	dfc00d15 	stw	ra,52(sp)
 800e68c:	ddc00b15 	stw	r23,44(sp)
 800e690:	dd400915 	stw	r21,36(sp)
 800e694:	dd000815 	stw	r20,32(sp)
 800e698:	dcc00715 	stw	r19,28(sp)
 800e69c:	dc800615 	stw	r18,24(sp)
 800e6a0:	dc400515 	stw	r17,20(sp)
 800e6a4:	dc000415 	stw	r16,16(sp)
 800e6a8:	d9400215 	stw	r5,8(sp)
 800e6ac:	d9800015 	stw	r6,0(sp)
 800e6b0:	3839883a 	mov	fp,r7
 800e6b4:	2809883a 	mov	r4,r5
 800e6b8:	24000003 	ldbu	r16,0(r4)
 800e6bc:	24400044 	addi	r17,r4,1
 800e6c0:	2007883a 	mov	r3,r4
 800e6c4:	b405883a 	add	r2,r22,r16
 800e6c8:	10800043 	ldbu	r2,1(r2)
 800e6cc:	8809883a 	mov	r4,r17
 800e6d0:	1080020c 	andi	r2,r2,8
 800e6d4:	103ff81e 	bne	r2,zero,800e6b8 <__alt_data_end+0xfc00e6b8>
 800e6d8:	00800b44 	movi	r2,45
 800e6dc:	80805526 	beq	r16,r2,800e834 <_strtol_r+0x1c8>
 800e6e0:	00800ac4 	movi	r2,43
 800e6e4:	80806026 	beq	r16,r2,800e868 <_strtol_r+0x1fc>
 800e6e8:	0029883a 	mov	r20,zero
 800e6ec:	e0004726 	beq	fp,zero,800e80c <_strtol_r+0x1a0>
 800e6f0:	00800404 	movi	r2,16
 800e6f4:	e0806626 	beq	fp,r2,800e890 <_strtol_r+0x224>
 800e6f8:	e027883a 	mov	r19,fp
 800e6fc:	00a00034 	movhi	r2,32768
 800e700:	a025003a 	cmpeq	r18,r20,zero
 800e704:	14a5c83a 	sub	r18,r2,r18
 800e708:	9009883a 	mov	r4,r18
 800e70c:	980b883a 	mov	r5,r19
 800e710:	800289c0 	call	800289c <__umodsi3>
 800e714:	9009883a 	mov	r4,r18
 800e718:	980b883a 	mov	r5,r19
 800e71c:	d8800115 	stw	r2,4(sp)
 800e720:	80028380 	call	8002838 <__udivsi3>
 800e724:	b407883a 	add	r3,r22,r16
 800e728:	18c00043 	ldbu	r3,1(r3)
 800e72c:	102b883a 	mov	r21,r2
 800e730:	0009883a 	mov	r4,zero
 800e734:	1940010c 	andi	r5,r3,4
 800e738:	0005883a 	mov	r2,zero
 800e73c:	04800044 	movi	r18,1
 800e740:	05ffffc4 	movi	r23,-1
 800e744:	28000f26 	beq	r5,zero,800e784 <_strtol_r+0x118>
 800e748:	843ff404 	addi	r16,r16,-48
 800e74c:	8700130e 	bge	r16,fp,800e79c <_strtol_r+0x130>
 800e750:	15c00626 	beq	r2,r23,800e76c <_strtol_r+0x100>
 800e754:	a9002936 	bltu	r21,r4,800e7fc <_strtol_r+0x190>
 800e758:	25402626 	beq	r4,r21,800e7f4 <_strtol_r+0x188>
 800e75c:	980b883a 	mov	r5,r19
 800e760:	80028f40 	call	80028f4 <__mulsi3>
 800e764:	8089883a 	add	r4,r16,r2
 800e768:	00800044 	movi	r2,1
 800e76c:	8c000003 	ldbu	r16,0(r17)
 800e770:	8c400044 	addi	r17,r17,1
 800e774:	b407883a 	add	r3,r22,r16
 800e778:	18c00043 	ldbu	r3,1(r3)
 800e77c:	1940010c 	andi	r5,r3,4
 800e780:	283ff11e 	bne	r5,zero,800e748 <__alt_data_end+0xfc00e748>
 800e784:	18c000cc 	andi	r3,r3,3
 800e788:	18000426 	beq	r3,zero,800e79c <_strtol_r+0x130>
 800e78c:	1c801d26 	beq	r3,r18,800e804 <_strtol_r+0x198>
 800e790:	00c015c4 	movi	r3,87
 800e794:	80e1c83a 	sub	r16,r16,r3
 800e798:	873fed16 	blt	r16,fp,800e750 <__alt_data_end+0xfc00e750>
 800e79c:	00ffffc4 	movi	r3,-1
 800e7a0:	10c02826 	beq	r2,r3,800e844 <_strtol_r+0x1d8>
 800e7a4:	a0001e1e 	bne	r20,zero,800e820 <_strtol_r+0x1b4>
 800e7a8:	d8c00017 	ldw	r3,0(sp)
 800e7ac:	18004326 	beq	r3,zero,800e8bc <_strtol_r+0x250>
 800e7b0:	10001d1e 	bne	r2,zero,800e828 <_strtol_r+0x1bc>
 800e7b4:	dd800217 	ldw	r22,8(sp)
 800e7b8:	2005883a 	mov	r2,r4
 800e7bc:	d8c00017 	ldw	r3,0(sp)
 800e7c0:	1d800015 	stw	r22,0(r3)
 800e7c4:	dfc00d17 	ldw	ra,52(sp)
 800e7c8:	df000c17 	ldw	fp,48(sp)
 800e7cc:	ddc00b17 	ldw	r23,44(sp)
 800e7d0:	dd800a17 	ldw	r22,40(sp)
 800e7d4:	dd400917 	ldw	r21,36(sp)
 800e7d8:	dd000817 	ldw	r20,32(sp)
 800e7dc:	dcc00717 	ldw	r19,28(sp)
 800e7e0:	dc800617 	ldw	r18,24(sp)
 800e7e4:	dc400517 	ldw	r17,20(sp)
 800e7e8:	dc000417 	ldw	r16,16(sp)
 800e7ec:	dec00e04 	addi	sp,sp,56
 800e7f0:	f800283a 	ret
 800e7f4:	d8c00117 	ldw	r3,4(sp)
 800e7f8:	1c3fd80e 	bge	r3,r16,800e75c <__alt_data_end+0xfc00e75c>
 800e7fc:	00bfffc4 	movi	r2,-1
 800e800:	003fda06 	br	800e76c <__alt_data_end+0xfc00e76c>
 800e804:	00c00dc4 	movi	r3,55
 800e808:	003fe206 	br	800e794 <__alt_data_end+0xfc00e794>
 800e80c:	00800c04 	movi	r2,48
 800e810:	80801926 	beq	r16,r2,800e878 <_strtol_r+0x20c>
 800e814:	07000284 	movi	fp,10
 800e818:	e027883a 	mov	r19,fp
 800e81c:	003fb706 	br	800e6fc <__alt_data_end+0xfc00e6fc>
 800e820:	0109c83a 	sub	r4,zero,r4
 800e824:	003fe006 	br	800e7a8 <__alt_data_end+0xfc00e7a8>
 800e828:	2005883a 	mov	r2,r4
 800e82c:	8dbfffc4 	addi	r22,r17,-1
 800e830:	003fe206 	br	800e7bc <__alt_data_end+0xfc00e7bc>
 800e834:	1c400084 	addi	r17,r3,2
 800e838:	1c000043 	ldbu	r16,1(r3)
 800e83c:	05000044 	movi	r20,1
 800e840:	003faa06 	br	800e6ec <__alt_data_end+0xfc00e6ec>
 800e844:	d9000317 	ldw	r4,12(sp)
 800e848:	00c00884 	movi	r3,34
 800e84c:	a005003a 	cmpeq	r2,r20,zero
 800e850:	20c00015 	stw	r3,0(r4)
 800e854:	00e00034 	movhi	r3,32768
 800e858:	1885c83a 	sub	r2,r3,r2
 800e85c:	d8c00017 	ldw	r3,0(sp)
 800e860:	183ff21e 	bne	r3,zero,800e82c <__alt_data_end+0xfc00e82c>
 800e864:	003fd706 	br	800e7c4 <__alt_data_end+0xfc00e7c4>
 800e868:	1c400084 	addi	r17,r3,2
 800e86c:	1c000043 	ldbu	r16,1(r3)
 800e870:	0029883a 	mov	r20,zero
 800e874:	003f9d06 	br	800e6ec <__alt_data_end+0xfc00e6ec>
 800e878:	88800003 	ldbu	r2,0(r17)
 800e87c:	00c01604 	movi	r3,88
 800e880:	108037cc 	andi	r2,r2,223
 800e884:	10c00826 	beq	r2,r3,800e8a8 <_strtol_r+0x23c>
 800e888:	07000204 	movi	fp,8
 800e88c:	003f9a06 	br	800e6f8 <__alt_data_end+0xfc00e6f8>
 800e890:	00800c04 	movi	r2,48
 800e894:	80bf981e 	bne	r16,r2,800e6f8 <__alt_data_end+0xfc00e6f8>
 800e898:	88800003 	ldbu	r2,0(r17)
 800e89c:	00c01604 	movi	r3,88
 800e8a0:	108037cc 	andi	r2,r2,223
 800e8a4:	10ff941e 	bne	r2,r3,800e6f8 <__alt_data_end+0xfc00e6f8>
 800e8a8:	04c00404 	movi	r19,16
 800e8ac:	8c000043 	ldbu	r16,1(r17)
 800e8b0:	9839883a 	mov	fp,r19
 800e8b4:	8c400084 	addi	r17,r17,2
 800e8b8:	003f9006 	br	800e6fc <__alt_data_end+0xfc00e6fc>
 800e8bc:	2005883a 	mov	r2,r4
 800e8c0:	003fc006 	br	800e7c4 <__alt_data_end+0xfc00e7c4>

0800e8c4 <strtol>:
 800e8c4:	008200b4 	movhi	r2,2050
 800e8c8:	10b77404 	addi	r2,r2,-8752
 800e8cc:	300f883a 	mov	r7,r6
 800e8d0:	280d883a 	mov	r6,r5
 800e8d4:	200b883a 	mov	r5,r4
 800e8d8:	11000017 	ldw	r4,0(r2)
 800e8dc:	800e66c1 	jmpi	800e66c <_strtol_r>

0800e8e0 <_strtoll_r>:
 800e8e0:	008200b4 	movhi	r2,2050
 800e8e4:	deffef04 	addi	sp,sp,-68
 800e8e8:	10b77704 	addi	r2,r2,-8740
 800e8ec:	dd800d15 	stw	r22,52(sp)
 800e8f0:	15800017 	ldw	r22,0(r2)
 800e8f4:	df000f15 	stw	fp,60(sp)
 800e8f8:	d9000515 	stw	r4,20(sp)
 800e8fc:	dfc01015 	stw	ra,64(sp)
 800e900:	ddc00e15 	stw	r23,56(sp)
 800e904:	dd400c15 	stw	r21,48(sp)
 800e908:	dd000b15 	stw	r20,44(sp)
 800e90c:	dcc00a15 	stw	r19,40(sp)
 800e910:	dc800915 	stw	r18,36(sp)
 800e914:	dc400815 	stw	r17,32(sp)
 800e918:	dc000715 	stw	r16,28(sp)
 800e91c:	d9400415 	stw	r5,16(sp)
 800e920:	d9800215 	stw	r6,8(sp)
 800e924:	3839883a 	mov	fp,r7
 800e928:	2809883a 	mov	r4,r5
 800e92c:	22000003 	ldbu	r8,0(r4)
 800e930:	24400044 	addi	r17,r4,1
 800e934:	2007883a 	mov	r3,r4
 800e938:	b205883a 	add	r2,r22,r8
 800e93c:	10800043 	ldbu	r2,1(r2)
 800e940:	8809883a 	mov	r4,r17
 800e944:	1080020c 	andi	r2,r2,8
 800e948:	103ff81e 	bne	r2,zero,800e92c <__alt_data_end+0xfc00e92c>
 800e94c:	00800b44 	movi	r2,45
 800e950:	40807e26 	beq	r8,r2,800eb4c <_strtoll_r+0x26c>
 800e954:	00800ac4 	movi	r2,43
 800e958:	40808126 	beq	r8,r2,800eb60 <_strtoll_r+0x280>
 800e95c:	d8000115 	stw	zero,4(sp)
 800e960:	e0000b26 	beq	fp,zero,800e990 <_strtoll_r+0xb0>
 800e964:	00800404 	movi	r2,16
 800e968:	e0808926 	beq	fp,r2,800eb90 <_strtoll_r+0x2b0>
 800e96c:	e00bd7fa 	srai	r5,fp,31
 800e970:	d9000117 	ldw	r4,4(sp)
 800e974:	e025883a 	mov	r18,fp
 800e978:	d9400015 	stw	r5,0(sp)
 800e97c:	20000b1e 	bne	r4,zero,800e9ac <_strtoll_r+0xcc>
 800e980:	04200034 	movhi	r16,32768
 800e984:	843fffc4 	addi	r16,r16,-1
 800e988:	053fffc4 	movi	r20,-1
 800e98c:	00000906 	br	800e9b4 <_strtoll_r+0xd4>
 800e990:	00800c04 	movi	r2,48
 800e994:	40807626 	beq	r8,r2,800eb70 <_strtoll_r+0x290>
 800e998:	04800284 	movi	r18,10
 800e99c:	d8000015 	stw	zero,0(sp)
 800e9a0:	9039883a 	mov	fp,r18
 800e9a4:	d9000117 	ldw	r4,4(sp)
 800e9a8:	203ff526 	beq	r4,zero,800e980 <__alt_data_end+0xfc00e980>
 800e9ac:	0029883a 	mov	r20,zero
 800e9b0:	04200034 	movhi	r16,32768
 800e9b4:	d9c00017 	ldw	r7,0(sp)
 800e9b8:	a009883a 	mov	r4,r20
 800e9bc:	800b883a 	mov	r5,r16
 800e9c0:	900d883a 	mov	r6,r18
 800e9c4:	da000615 	stw	r8,24(sp)
 800e9c8:	8015d580 	call	8015d58 <__umoddi3>
 800e9cc:	d9c00017 	ldw	r7,0(sp)
 800e9d0:	a009883a 	mov	r4,r20
 800e9d4:	800b883a 	mov	r5,r16
 800e9d8:	900d883a 	mov	r6,r18
 800e9dc:	d8800315 	stw	r2,12(sp)
 800e9e0:	801575c0 	call	801575c <__udivdi3>
 800e9e4:	da000617 	ldw	r8,24(sp)
 800e9e8:	1829883a 	mov	r20,r3
 800e9ec:	882f883a 	mov	r23,r17
 800e9f0:	b207883a 	add	r3,r22,r8
 800e9f4:	19800043 	ldbu	r6,1(r3)
 800e9f8:	1021883a 	mov	r16,r2
 800e9fc:	000f883a 	mov	r7,zero
 800ea00:	30c0010c 	andi	r3,r6,4
 800ea04:	0009883a 	mov	r4,zero
 800ea08:	000b883a 	mov	r5,zero
 800ea0c:	04400044 	movi	r17,1
 800ea10:	057fffc4 	movi	r21,-1
 800ea14:	18000d26 	beq	r3,zero,800ea4c <_strtoll_r+0x16c>
 800ea18:	44fff404 	addi	r19,r8,-48
 800ea1c:	9f00110e 	bge	r19,fp,800ea64 <_strtoll_r+0x184>
 800ea20:	3d400426 	beq	r7,r21,800ea34 <_strtoll_r+0x154>
 800ea24:	a1400236 	bltu	r20,r5,800ea30 <_strtoll_r+0x150>
 800ea28:	2d002a1e 	bne	r5,r20,800ead4 <_strtoll_r+0x1f4>
 800ea2c:	8100292e 	bgeu	r16,r4,800ead4 <_strtoll_r+0x1f4>
 800ea30:	01ffffc4 	movi	r7,-1
 800ea34:	ba000003 	ldbu	r8,0(r23)
 800ea38:	bdc00044 	addi	r23,r23,1
 800ea3c:	b207883a 	add	r3,r22,r8
 800ea40:	19800043 	ldbu	r6,1(r3)
 800ea44:	30c0010c 	andi	r3,r6,4
 800ea48:	183ff31e 	bne	r3,zero,800ea18 <__alt_data_end+0xfc00ea18>
 800ea4c:	318000cc 	andi	r6,r6,3
 800ea50:	30000426 	beq	r6,zero,800ea64 <_strtoll_r+0x184>
 800ea54:	34402b26 	beq	r6,r17,800eb04 <_strtoll_r+0x224>
 800ea58:	00c015c4 	movi	r3,87
 800ea5c:	40e7c83a 	sub	r19,r8,r3
 800ea60:	9f3fef16 	blt	r19,fp,800ea20 <__alt_data_end+0xfc00ea20>
 800ea64:	00bfffc4 	movi	r2,-1
 800ea68:	38802c26 	beq	r7,r2,800eb1c <_strtoll_r+0x23c>
 800ea6c:	d8800117 	ldw	r2,4(sp)
 800ea70:	10000426 	beq	r2,zero,800ea84 <_strtoll_r+0x1a4>
 800ea74:	0109c83a 	sub	r4,zero,r4
 800ea78:	2004c03a 	cmpne	r2,r4,zero
 800ea7c:	0151c83a 	sub	r8,zero,r5
 800ea80:	408bc83a 	sub	r5,r8,r2
 800ea84:	d8800217 	ldw	r2,8(sp)
 800ea88:	10005026 	beq	r2,zero,800ebcc <_strtoll_r+0x2ec>
 800ea8c:	2005883a 	mov	r2,r4
 800ea90:	2807883a 	mov	r3,r5
 800ea94:	38002b1e 	bne	r7,zero,800eb44 <_strtoll_r+0x264>
 800ea98:	dd800417 	ldw	r22,16(sp)
 800ea9c:	d9000217 	ldw	r4,8(sp)
 800eaa0:	25800015 	stw	r22,0(r4)
 800eaa4:	dfc01017 	ldw	ra,64(sp)
 800eaa8:	df000f17 	ldw	fp,60(sp)
 800eaac:	ddc00e17 	ldw	r23,56(sp)
 800eab0:	dd800d17 	ldw	r22,52(sp)
 800eab4:	dd400c17 	ldw	r21,48(sp)
 800eab8:	dd000b17 	ldw	r20,44(sp)
 800eabc:	dcc00a17 	ldw	r19,40(sp)
 800eac0:	dc800917 	ldw	r18,36(sp)
 800eac4:	dc400817 	ldw	r17,32(sp)
 800eac8:	dc000717 	ldw	r16,28(sp)
 800eacc:	dec01104 	addi	sp,sp,68
 800ead0:	f800283a 	ret
 800ead4:	24000d26 	beq	r4,r16,800eb0c <_strtoll_r+0x22c>
 800ead8:	d9c00017 	ldw	r7,0(sp)
 800eadc:	900d883a 	mov	r6,r18
 800eae0:	80155dc0 	call	80155dc <__muldi3>
 800eae4:	980bd7fa 	srai	r5,r19,31
 800eae8:	9885883a 	add	r2,r19,r2
 800eaec:	14d1803a 	cmpltu	r8,r2,r19
 800eaf0:	28c7883a 	add	r3,r5,r3
 800eaf4:	1009883a 	mov	r4,r2
 800eaf8:	40cb883a 	add	r5,r8,r3
 800eafc:	01c00044 	movi	r7,1
 800eb00:	003fcc06 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800eb04:	00c00dc4 	movi	r3,55
 800eb08:	003fd406 	br	800ea5c <__alt_data_end+0xfc00ea5c>
 800eb0c:	2d3ff21e 	bne	r5,r20,800ead8 <__alt_data_end+0xfc00ead8>
 800eb10:	d8800317 	ldw	r2,12(sp)
 800eb14:	14ffc616 	blt	r2,r19,800ea30 <__alt_data_end+0xfc00ea30>
 800eb18:	003fef06 	br	800ead8 <__alt_data_end+0xfc00ead8>
 800eb1c:	d9000117 	ldw	r4,4(sp)
 800eb20:	2000271e 	bne	r4,zero,800ebc0 <_strtoll_r+0x2e0>
 800eb24:	00e00034 	movhi	r3,32768
 800eb28:	18ffffc4 	addi	r3,r3,-1
 800eb2c:	3805883a 	mov	r2,r7
 800eb30:	d9400517 	ldw	r5,20(sp)
 800eb34:	01000884 	movi	r4,34
 800eb38:	29000015 	stw	r4,0(r5)
 800eb3c:	d9000217 	ldw	r4,8(sp)
 800eb40:	203fd826 	beq	r4,zero,800eaa4 <__alt_data_end+0xfc00eaa4>
 800eb44:	bdbfffc4 	addi	r22,r23,-1
 800eb48:	003fd406 	br	800ea9c <__alt_data_end+0xfc00ea9c>
 800eb4c:	00800044 	movi	r2,1
 800eb50:	1c400084 	addi	r17,r3,2
 800eb54:	1a000043 	ldbu	r8,1(r3)
 800eb58:	d8800115 	stw	r2,4(sp)
 800eb5c:	003f8006 	br	800e960 <__alt_data_end+0xfc00e960>
 800eb60:	1c400084 	addi	r17,r3,2
 800eb64:	1a000043 	ldbu	r8,1(r3)
 800eb68:	d8000115 	stw	zero,4(sp)
 800eb6c:	003f7c06 	br	800e960 <__alt_data_end+0xfc00e960>
 800eb70:	88800003 	ldbu	r2,0(r17)
 800eb74:	00c01604 	movi	r3,88
 800eb78:	108037cc 	andi	r2,r2,223
 800eb7c:	10c00a26 	beq	r2,r3,800eba8 <_strtoll_r+0x2c8>
 800eb80:	04800204 	movi	r18,8
 800eb84:	d8000015 	stw	zero,0(sp)
 800eb88:	9039883a 	mov	fp,r18
 800eb8c:	003f8506 	br	800e9a4 <__alt_data_end+0xfc00e9a4>
 800eb90:	00800c04 	movi	r2,48
 800eb94:	4080101e 	bne	r8,r2,800ebd8 <_strtoll_r+0x2f8>
 800eb98:	88800003 	ldbu	r2,0(r17)
 800eb9c:	00c01604 	movi	r3,88
 800eba0:	108037cc 	andi	r2,r2,223
 800eba4:	10c00c1e 	bne	r2,r3,800ebd8 <_strtoll_r+0x2f8>
 800eba8:	04800404 	movi	r18,16
 800ebac:	8a000043 	ldbu	r8,1(r17)
 800ebb0:	d8000015 	stw	zero,0(sp)
 800ebb4:	8c400084 	addi	r17,r17,2
 800ebb8:	9039883a 	mov	fp,r18
 800ebbc:	003f7906 	br	800e9a4 <__alt_data_end+0xfc00e9a4>
 800ebc0:	0005883a 	mov	r2,zero
 800ebc4:	00e00034 	movhi	r3,32768
 800ebc8:	003fd906 	br	800eb30 <__alt_data_end+0xfc00eb30>
 800ebcc:	2005883a 	mov	r2,r4
 800ebd0:	2807883a 	mov	r3,r5
 800ebd4:	003fb306 	br	800eaa4 <__alt_data_end+0xfc00eaa4>
 800ebd8:	e025883a 	mov	r18,fp
 800ebdc:	d8000015 	stw	zero,0(sp)
 800ebe0:	003f7006 	br	800e9a4 <__alt_data_end+0xfc00e9a4>

0800ebe4 <_strtoul_r>:
 800ebe4:	008200b4 	movhi	r2,2050
 800ebe8:	defff204 	addi	sp,sp,-56
 800ebec:	10b77704 	addi	r2,r2,-8740
 800ebf0:	dd800a15 	stw	r22,40(sp)
 800ebf4:	15800017 	ldw	r22,0(r2)
 800ebf8:	df000c15 	stw	fp,48(sp)
 800ebfc:	dd400915 	stw	r21,36(sp)
 800ec00:	d9000315 	stw	r4,12(sp)
 800ec04:	dfc00d15 	stw	ra,52(sp)
 800ec08:	ddc00b15 	stw	r23,44(sp)
 800ec0c:	dd000815 	stw	r20,32(sp)
 800ec10:	dcc00715 	stw	r19,28(sp)
 800ec14:	dc800615 	stw	r18,24(sp)
 800ec18:	dc400515 	stw	r17,20(sp)
 800ec1c:	dc000415 	stw	r16,16(sp)
 800ec20:	d9400015 	stw	r5,0(sp)
 800ec24:	302b883a 	mov	r21,r6
 800ec28:	3839883a 	mov	fp,r7
 800ec2c:	2809883a 	mov	r4,r5
 800ec30:	24000003 	ldbu	r16,0(r4)
 800ec34:	24400044 	addi	r17,r4,1
 800ec38:	2007883a 	mov	r3,r4
 800ec3c:	b405883a 	add	r2,r22,r16
 800ec40:	10800043 	ldbu	r2,1(r2)
 800ec44:	8809883a 	mov	r4,r17
 800ec48:	1080020c 	andi	r2,r2,8
 800ec4c:	103ff81e 	bne	r2,zero,800ec30 <__alt_data_end+0xfc00ec30>
 800ec50:	00800b44 	movi	r2,45
 800ec54:	80805826 	beq	r16,r2,800edb8 <_strtoul_r+0x1d4>
 800ec58:	00800ac4 	movi	r2,43
 800ec5c:	80805b26 	beq	r16,r2,800edcc <_strtoul_r+0x1e8>
 800ec60:	d8000215 	stw	zero,8(sp)
 800ec64:	e0000d26 	beq	fp,zero,800ec9c <_strtoul_r+0xb8>
 800ec68:	00800404 	movi	r2,16
 800ec6c:	e0806626 	beq	fp,r2,800ee08 <_strtoul_r+0x224>
 800ec70:	013fffc4 	movi	r4,-1
 800ec74:	e00b883a 	mov	r5,fp
 800ec78:	80028380 	call	8002838 <__udivsi3>
 800ec7c:	e00b883a 	mov	r5,fp
 800ec80:	013fffc4 	movi	r4,-1
 800ec84:	1025883a 	mov	r18,r2
 800ec88:	800289c0 	call	800289c <__umodsi3>
 800ec8c:	d8800115 	stw	r2,4(sp)
 800ec90:	e027883a 	mov	r19,fp
 800ec94:	902f883a 	mov	r23,r18
 800ec98:	00000806 	br	800ecbc <_strtoul_r+0xd8>
 800ec9c:	00800c04 	movi	r2,48
 800eca0:	80804e26 	beq	r16,r2,800eddc <_strtoul_r+0x1f8>
 800eca4:	07000284 	movi	fp,10
 800eca8:	00c00144 	movi	r3,5
 800ecac:	05c666b4 	movhi	r23,6554
 800ecb0:	d8c00115 	stw	r3,4(sp)
 800ecb4:	bde66644 	addi	r23,r23,-26215
 800ecb8:	e027883a 	mov	r19,fp
 800ecbc:	b407883a 	add	r3,r22,r16
 800ecc0:	18c00043 	ldbu	r3,1(r3)
 800ecc4:	0005883a 	mov	r2,zero
 800ecc8:	0009883a 	mov	r4,zero
 800eccc:	1940010c 	andi	r5,r3,4
 800ecd0:	04800044 	movi	r18,1
 800ecd4:	053fffc4 	movi	r20,-1
 800ecd8:	28000f26 	beq	r5,zero,800ed18 <_strtoul_r+0x134>
 800ecdc:	843ff404 	addi	r16,r16,-48
 800ece0:	8700130e 	bge	r16,fp,800ed30 <_strtoul_r+0x14c>
 800ece4:	15000626 	beq	r2,r20,800ed00 <_strtoul_r+0x11c>
 800ece8:	b9002836 	bltu	r23,r4,800ed8c <_strtoul_r+0x1a8>
 800ecec:	25c02526 	beq	r4,r23,800ed84 <_strtoul_r+0x1a0>
 800ecf0:	980b883a 	mov	r5,r19
 800ecf4:	80028f40 	call	80028f4 <__mulsi3>
 800ecf8:	8089883a 	add	r4,r16,r2
 800ecfc:	00800044 	movi	r2,1
 800ed00:	8c000003 	ldbu	r16,0(r17)
 800ed04:	8c400044 	addi	r17,r17,1
 800ed08:	b407883a 	add	r3,r22,r16
 800ed0c:	18c00043 	ldbu	r3,1(r3)
 800ed10:	1940010c 	andi	r5,r3,4
 800ed14:	283ff11e 	bne	r5,zero,800ecdc <__alt_data_end+0xfc00ecdc>
 800ed18:	18c000cc 	andi	r3,r3,3
 800ed1c:	18000426 	beq	r3,zero,800ed30 <_strtoul_r+0x14c>
 800ed20:	1c801c26 	beq	r3,r18,800ed94 <_strtoul_r+0x1b0>
 800ed24:	00c015c4 	movi	r3,87
 800ed28:	80e1c83a 	sub	r16,r16,r3
 800ed2c:	873fed16 	blt	r16,fp,800ece4 <__alt_data_end+0xfc00ece4>
 800ed30:	10001a16 	blt	r2,zero,800ed9c <_strtoul_r+0x1b8>
 800ed34:	d8c00217 	ldw	r3,8(sp)
 800ed38:	18000126 	beq	r3,zero,800ed40 <_strtoul_r+0x15c>
 800ed3c:	0109c83a 	sub	r4,zero,r4
 800ed40:	a8000326 	beq	r21,zero,800ed50 <_strtoul_r+0x16c>
 800ed44:	dd000017 	ldw	r20,0(sp)
 800ed48:	1000191e 	bne	r2,zero,800edb0 <_strtoul_r+0x1cc>
 800ed4c:	ad000015 	stw	r20,0(r21)
 800ed50:	2005883a 	mov	r2,r4
 800ed54:	dfc00d17 	ldw	ra,52(sp)
 800ed58:	df000c17 	ldw	fp,48(sp)
 800ed5c:	ddc00b17 	ldw	r23,44(sp)
 800ed60:	dd800a17 	ldw	r22,40(sp)
 800ed64:	dd400917 	ldw	r21,36(sp)
 800ed68:	dd000817 	ldw	r20,32(sp)
 800ed6c:	dcc00717 	ldw	r19,28(sp)
 800ed70:	dc800617 	ldw	r18,24(sp)
 800ed74:	dc400517 	ldw	r17,20(sp)
 800ed78:	dc000417 	ldw	r16,16(sp)
 800ed7c:	dec00e04 	addi	sp,sp,56
 800ed80:	f800283a 	ret
 800ed84:	d8c00117 	ldw	r3,4(sp)
 800ed88:	1c3fd90e 	bge	r3,r16,800ecf0 <__alt_data_end+0xfc00ecf0>
 800ed8c:	00bfffc4 	movi	r2,-1
 800ed90:	003fdb06 	br	800ed00 <__alt_data_end+0xfc00ed00>
 800ed94:	00c00dc4 	movi	r3,55
 800ed98:	003fe306 	br	800ed28 <__alt_data_end+0xfc00ed28>
 800ed9c:	d8c00317 	ldw	r3,12(sp)
 800eda0:	00800884 	movi	r2,34
 800eda4:	013fffc4 	movi	r4,-1
 800eda8:	18800015 	stw	r2,0(r3)
 800edac:	a83fe826 	beq	r21,zero,800ed50 <__alt_data_end+0xfc00ed50>
 800edb0:	8d3fffc4 	addi	r20,r17,-1
 800edb4:	003fe506 	br	800ed4c <__alt_data_end+0xfc00ed4c>
 800edb8:	1c400084 	addi	r17,r3,2
 800edbc:	1c000043 	ldbu	r16,1(r3)
 800edc0:	00c00044 	movi	r3,1
 800edc4:	d8c00215 	stw	r3,8(sp)
 800edc8:	003fa606 	br	800ec64 <__alt_data_end+0xfc00ec64>
 800edcc:	1c400084 	addi	r17,r3,2
 800edd0:	1c000043 	ldbu	r16,1(r3)
 800edd4:	d8000215 	stw	zero,8(sp)
 800edd8:	003fa206 	br	800ec64 <__alt_data_end+0xfc00ec64>
 800eddc:	88800003 	ldbu	r2,0(r17)
 800ede0:	00c01604 	movi	r3,88
 800ede4:	108037cc 	andi	r2,r2,223
 800ede8:	10c00d26 	beq	r2,r3,800ee20 <_strtoul_r+0x23c>
 800edec:	07000204 	movi	fp,8
 800edf0:	00c001c4 	movi	r3,7
 800edf4:	05c80034 	movhi	r23,8192
 800edf8:	d8c00115 	stw	r3,4(sp)
 800edfc:	bdffffc4 	addi	r23,r23,-1
 800ee00:	e027883a 	mov	r19,fp
 800ee04:	003fad06 	br	800ecbc <__alt_data_end+0xfc00ecbc>
 800ee08:	00800c04 	movi	r2,48
 800ee0c:	80800d1e 	bne	r16,r2,800ee44 <_strtoul_r+0x260>
 800ee10:	88800003 	ldbu	r2,0(r17)
 800ee14:	00c01604 	movi	r3,88
 800ee18:	108037cc 	andi	r2,r2,223
 800ee1c:	10c0091e 	bne	r2,r3,800ee44 <_strtoul_r+0x260>
 800ee20:	04c00404 	movi	r19,16
 800ee24:	00c003c4 	movi	r3,15
 800ee28:	04840034 	movhi	r18,4096
 800ee2c:	8c000043 	ldbu	r16,1(r17)
 800ee30:	d8c00115 	stw	r3,4(sp)
 800ee34:	8c400084 	addi	r17,r17,2
 800ee38:	94bfffc4 	addi	r18,r18,-1
 800ee3c:	9839883a 	mov	fp,r19
 800ee40:	003f9406 	br	800ec94 <__alt_data_end+0xfc00ec94>
 800ee44:	00c003c4 	movi	r3,15
 800ee48:	05c40034 	movhi	r23,4096
 800ee4c:	d8c00115 	stw	r3,4(sp)
 800ee50:	bdffffc4 	addi	r23,r23,-1
 800ee54:	e027883a 	mov	r19,fp
 800ee58:	003f9806 	br	800ecbc <__alt_data_end+0xfc00ecbc>

0800ee5c <strtoul>:
 800ee5c:	008200b4 	movhi	r2,2050
 800ee60:	10b77404 	addi	r2,r2,-8752
 800ee64:	300f883a 	mov	r7,r6
 800ee68:	280d883a 	mov	r6,r5
 800ee6c:	200b883a 	mov	r5,r4
 800ee70:	11000017 	ldw	r4,0(r2)
 800ee74:	800ebe41 	jmpi	800ebe4 <_strtoul_r>

0800ee78 <_strtoull_r>:
 800ee78:	008200b4 	movhi	r2,2050
 800ee7c:	deffef04 	addi	sp,sp,-68
 800ee80:	10b77704 	addi	r2,r2,-8740
 800ee84:	dd800d15 	stw	r22,52(sp)
 800ee88:	15800017 	ldw	r22,0(r2)
 800ee8c:	df000f15 	stw	fp,60(sp)
 800ee90:	d9000515 	stw	r4,20(sp)
 800ee94:	dfc01015 	stw	ra,64(sp)
 800ee98:	ddc00e15 	stw	r23,56(sp)
 800ee9c:	dd400c15 	stw	r21,48(sp)
 800eea0:	dd000b15 	stw	r20,44(sp)
 800eea4:	dcc00a15 	stw	r19,40(sp)
 800eea8:	dc800915 	stw	r18,36(sp)
 800eeac:	dc400815 	stw	r17,32(sp)
 800eeb0:	dc000715 	stw	r16,28(sp)
 800eeb4:	d9400215 	stw	r5,8(sp)
 800eeb8:	d9800115 	stw	r6,4(sp)
 800eebc:	3839883a 	mov	fp,r7
 800eec0:	2809883a 	mov	r4,r5
 800eec4:	22000003 	ldbu	r8,0(r4)
 800eec8:	24400044 	addi	r17,r4,1
 800eecc:	2007883a 	mov	r3,r4
 800eed0:	b205883a 	add	r2,r22,r8
 800eed4:	10800043 	ldbu	r2,1(r2)
 800eed8:	8809883a 	mov	r4,r17
 800eedc:	1080020c 	andi	r2,r2,8
 800eee0:	103ff81e 	bne	r2,zero,800eec4 <__alt_data_end+0xfc00eec4>
 800eee4:	00800b44 	movi	r2,45
 800eee8:	40807726 	beq	r8,r2,800f0c8 <_strtoull_r+0x250>
 800eeec:	00800ac4 	movi	r2,43
 800eef0:	40807a26 	beq	r8,r2,800f0dc <_strtoull_r+0x264>
 800eef4:	d8000415 	stw	zero,16(sp)
 800eef8:	e0001426 	beq	fp,zero,800ef4c <_strtoull_r+0xd4>
 800eefc:	00800404 	movi	r2,16
 800ef00:	e0808826 	beq	fp,r2,800f124 <_strtoull_r+0x2ac>
 800ef04:	e025d7fa 	srai	r18,fp,31
 800ef08:	013fffc4 	movi	r4,-1
 800ef0c:	200b883a 	mov	r5,r4
 800ef10:	e00d883a 	mov	r6,fp
 800ef14:	900f883a 	mov	r7,r18
 800ef18:	da000615 	stw	r8,24(sp)
 800ef1c:	801575c0 	call	801575c <__udivdi3>
 800ef20:	013fffc4 	movi	r4,-1
 800ef24:	e00d883a 	mov	r6,fp
 800ef28:	900f883a 	mov	r7,r18
 800ef2c:	200b883a 	mov	r5,r4
 800ef30:	1021883a 	mov	r16,r2
 800ef34:	182f883a 	mov	r23,r3
 800ef38:	8015d580 	call	8015d58 <__umoddi3>
 800ef3c:	d8800315 	stw	r2,12(sp)
 800ef40:	df000015 	stw	fp,0(sp)
 800ef44:	da000617 	ldw	r8,24(sp)
 800ef48:	00000c06 	br	800ef7c <_strtoull_r+0x104>
 800ef4c:	00800c04 	movi	r2,48
 800ef50:	40806626 	beq	r8,r2,800f0ec <_strtoull_r+0x274>
 800ef54:	00800284 	movi	r2,10
 800ef58:	00c00144 	movi	r3,5
 800ef5c:	042666b4 	movhi	r16,39322
 800ef60:	05c666b4 	movhi	r23,6554
 800ef64:	d8800015 	stw	r2,0(sp)
 800ef68:	d8c00315 	stw	r3,12(sp)
 800ef6c:	84266644 	addi	r16,r16,-26215
 800ef70:	bde66644 	addi	r23,r23,-26215
 800ef74:	0025883a 	mov	r18,zero
 800ef78:	1039883a 	mov	fp,r2
 800ef7c:	b205883a 	add	r2,r22,r8
 800ef80:	11800043 	ldbu	r6,1(r2)
 800ef84:	882b883a 	mov	r21,r17
 800ef88:	000f883a 	mov	r7,zero
 800ef8c:	3080010c 	andi	r2,r6,4
 800ef90:	0009883a 	mov	r4,zero
 800ef94:	000b883a 	mov	r5,zero
 800ef98:	04400044 	movi	r17,1
 800ef9c:	053fffc4 	movi	r20,-1
 800efa0:	10000d26 	beq	r2,zero,800efd8 <_strtoull_r+0x160>
 800efa4:	44fff404 	addi	r19,r8,-48
 800efa8:	9f00110e 	bge	r19,fp,800eff0 <_strtoull_r+0x178>
 800efac:	3d000426 	beq	r7,r20,800efc0 <_strtoull_r+0x148>
 800efb0:	b9400236 	bltu	r23,r5,800efbc <_strtoull_r+0x144>
 800efb4:	2dc0291e 	bne	r5,r23,800f05c <_strtoull_r+0x1e4>
 800efb8:	8100282e 	bgeu	r16,r4,800f05c <_strtoull_r+0x1e4>
 800efbc:	01ffffc4 	movi	r7,-1
 800efc0:	aa000003 	ldbu	r8,0(r21)
 800efc4:	ad400044 	addi	r21,r21,1
 800efc8:	b205883a 	add	r2,r22,r8
 800efcc:	11800043 	ldbu	r6,1(r2)
 800efd0:	3080010c 	andi	r2,r6,4
 800efd4:	103ff31e 	bne	r2,zero,800efa4 <__alt_data_end+0xfc00efa4>
 800efd8:	318000cc 	andi	r6,r6,3
 800efdc:	30000426 	beq	r6,zero,800eff0 <_strtoull_r+0x178>
 800efe0:	34402a26 	beq	r6,r17,800f08c <_strtoull_r+0x214>
 800efe4:	00c015c4 	movi	r3,87
 800efe8:	40e7c83a 	sub	r19,r8,r3
 800efec:	9f3fef16 	blt	r19,fp,800efac <__alt_data_end+0xfc00efac>
 800eff0:	38002c16 	blt	r7,zero,800f0a4 <_strtoull_r+0x22c>
 800eff4:	d8c00417 	ldw	r3,16(sp)
 800eff8:	18000426 	beq	r3,zero,800f00c <_strtoull_r+0x194>
 800effc:	0109c83a 	sub	r4,zero,r4
 800f000:	2004c03a 	cmpne	r2,r4,zero
 800f004:	0151c83a 	sub	r8,zero,r5
 800f008:	408bc83a 	sub	r5,r8,r2
 800f00c:	d8800117 	ldw	r2,4(sp)
 800f010:	10000426 	beq	r2,zero,800f024 <_strtoull_r+0x1ac>
 800f014:	dd000217 	ldw	r20,8(sp)
 800f018:	3800291e 	bne	r7,zero,800f0c0 <_strtoull_r+0x248>
 800f01c:	d8c00117 	ldw	r3,4(sp)
 800f020:	1d000015 	stw	r20,0(r3)
 800f024:	2005883a 	mov	r2,r4
 800f028:	2807883a 	mov	r3,r5
 800f02c:	dfc01017 	ldw	ra,64(sp)
 800f030:	df000f17 	ldw	fp,60(sp)
 800f034:	ddc00e17 	ldw	r23,56(sp)
 800f038:	dd800d17 	ldw	r22,52(sp)
 800f03c:	dd400c17 	ldw	r21,48(sp)
 800f040:	dd000b17 	ldw	r20,44(sp)
 800f044:	dcc00a17 	ldw	r19,40(sp)
 800f048:	dc800917 	ldw	r18,36(sp)
 800f04c:	dc400817 	ldw	r17,32(sp)
 800f050:	dc000717 	ldw	r16,28(sp)
 800f054:	dec01104 	addi	sp,sp,68
 800f058:	f800283a 	ret
 800f05c:	24000d26 	beq	r4,r16,800f094 <_strtoull_r+0x21c>
 800f060:	d9800017 	ldw	r6,0(sp)
 800f064:	900f883a 	mov	r7,r18
 800f068:	80155dc0 	call	80155dc <__muldi3>
 800f06c:	980bd7fa 	srai	r5,r19,31
 800f070:	9885883a 	add	r2,r19,r2
 800f074:	14d1803a 	cmpltu	r8,r2,r19
 800f078:	28c7883a 	add	r3,r5,r3
 800f07c:	1009883a 	mov	r4,r2
 800f080:	40cb883a 	add	r5,r8,r3
 800f084:	01c00044 	movi	r7,1
 800f088:	003fcd06 	br	800efc0 <__alt_data_end+0xfc00efc0>
 800f08c:	00c00dc4 	movi	r3,55
 800f090:	003fd506 	br	800efe8 <__alt_data_end+0xfc00efe8>
 800f094:	2dfff21e 	bne	r5,r23,800f060 <__alt_data_end+0xfc00f060>
 800f098:	d8c00317 	ldw	r3,12(sp)
 800f09c:	1cffc716 	blt	r3,r19,800efbc <__alt_data_end+0xfc00efbc>
 800f0a0:	003fef06 	br	800f060 <__alt_data_end+0xfc00f060>
 800f0a4:	d8c00517 	ldw	r3,20(sp)
 800f0a8:	00800884 	movi	r2,34
 800f0ac:	013fffc4 	movi	r4,-1
 800f0b0:	18800015 	stw	r2,0(r3)
 800f0b4:	d8800117 	ldw	r2,4(sp)
 800f0b8:	200b883a 	mov	r5,r4
 800f0bc:	103fd926 	beq	r2,zero,800f024 <__alt_data_end+0xfc00f024>
 800f0c0:	ad3fffc4 	addi	r20,r21,-1
 800f0c4:	003fd506 	br	800f01c <__alt_data_end+0xfc00f01c>
 800f0c8:	00800044 	movi	r2,1
 800f0cc:	1c400084 	addi	r17,r3,2
 800f0d0:	1a000043 	ldbu	r8,1(r3)
 800f0d4:	d8800415 	stw	r2,16(sp)
 800f0d8:	003f8706 	br	800eef8 <__alt_data_end+0xfc00eef8>
 800f0dc:	1c400084 	addi	r17,r3,2
 800f0e0:	1a000043 	ldbu	r8,1(r3)
 800f0e4:	d8000415 	stw	zero,16(sp)
 800f0e8:	003f8306 	br	800eef8 <__alt_data_end+0xfc00eef8>
 800f0ec:	88800003 	ldbu	r2,0(r17)
 800f0f0:	00c01604 	movi	r3,88
 800f0f4:	108037cc 	andi	r2,r2,223
 800f0f8:	10c01026 	beq	r2,r3,800f13c <_strtoull_r+0x2c4>
 800f0fc:	00c00204 	movi	r3,8
 800f100:	008001c4 	movi	r2,7
 800f104:	043fffc4 	movi	r16,-1
 800f108:	05c80034 	movhi	r23,8192
 800f10c:	d8c00015 	stw	r3,0(sp)
 800f110:	d8800315 	stw	r2,12(sp)
 800f114:	bc2f883a 	add	r23,r23,r16
 800f118:	0025883a 	mov	r18,zero
 800f11c:	1839883a 	mov	fp,r3
 800f120:	003f9606 	br	800ef7c <__alt_data_end+0xfc00ef7c>
 800f124:	00800c04 	movi	r2,48
 800f128:	4080101e 	bne	r8,r2,800f16c <_strtoull_r+0x2f4>
 800f12c:	88800003 	ldbu	r2,0(r17)
 800f130:	00c01604 	movi	r3,88
 800f134:	108037cc 	andi	r2,r2,223
 800f138:	10c0141e 	bne	r2,r3,800f18c <_strtoull_r+0x314>
 800f13c:	00c00404 	movi	r3,16
 800f140:	008003c4 	movi	r2,15
 800f144:	043fffc4 	movi	r16,-1
 800f148:	05c40034 	movhi	r23,4096
 800f14c:	8a000043 	ldbu	r8,1(r17)
 800f150:	d8c00015 	stw	r3,0(sp)
 800f154:	d8800315 	stw	r2,12(sp)
 800f158:	8c400084 	addi	r17,r17,2
 800f15c:	bc2f883a 	add	r23,r23,r16
 800f160:	0025883a 	mov	r18,zero
 800f164:	1839883a 	mov	fp,r3
 800f168:	003f8406 	br	800ef7c <__alt_data_end+0xfc00ef7c>
 800f16c:	008003c4 	movi	r2,15
 800f170:	d8800315 	stw	r2,12(sp)
 800f174:	043fffc4 	movi	r16,-1
 800f178:	05c40034 	movhi	r23,4096
 800f17c:	bc2f883a 	add	r23,r23,r16
 800f180:	df000015 	stw	fp,0(sp)
 800f184:	0025883a 	mov	r18,zero
 800f188:	003f7c06 	br	800ef7c <__alt_data_end+0xfc00ef7c>
 800f18c:	00c003c4 	movi	r3,15
 800f190:	d8c00315 	stw	r3,12(sp)
 800f194:	003ff706 	br	800f174 <__alt_data_end+0xfc00f174>

0800f198 <___svfprintf_internal_r>:
 800f198:	deffb704 	addi	sp,sp,-292
 800f19c:	dfc04815 	stw	ra,288(sp)
 800f1a0:	ddc04615 	stw	r23,280(sp)
 800f1a4:	d9402d15 	stw	r5,180(sp)
 800f1a8:	d9003915 	stw	r4,228(sp)
 800f1ac:	302f883a 	mov	r23,r6
 800f1b0:	d9c02e15 	stw	r7,184(sp)
 800f1b4:	df004715 	stw	fp,284(sp)
 800f1b8:	dd804515 	stw	r22,276(sp)
 800f1bc:	dd404415 	stw	r21,272(sp)
 800f1c0:	dd004315 	stw	r20,268(sp)
 800f1c4:	dcc04215 	stw	r19,264(sp)
 800f1c8:	dc804115 	stw	r18,260(sp)
 800f1cc:	dc404015 	stw	r17,256(sp)
 800f1d0:	dc003f15 	stw	r16,252(sp)
 800f1d4:	800af680 	call	800af68 <_localeconv_r>
 800f1d8:	10800017 	ldw	r2,0(r2)
 800f1dc:	1009883a 	mov	r4,r2
 800f1e0:	d8803415 	stw	r2,208(sp)
 800f1e4:	8004cf40 	call	8004cf4 <strlen>
 800f1e8:	d8c02d17 	ldw	r3,180(sp)
 800f1ec:	d8803815 	stw	r2,224(sp)
 800f1f0:	1880030b 	ldhu	r2,12(r3)
 800f1f4:	1080200c 	andi	r2,r2,128
 800f1f8:	10000226 	beq	r2,zero,800f204 <___svfprintf_internal_r+0x6c>
 800f1fc:	18800417 	ldw	r2,16(r3)
 800f200:	1006b126 	beq	r2,zero,8010cc8 <___svfprintf_internal_r+0x1b30>
 800f204:	dcc03917 	ldw	r19,228(sp)
 800f208:	d8c00404 	addi	r3,sp,16
 800f20c:	054200b4 	movhi	r21,2050
 800f210:	d9001e04 	addi	r4,sp,120
 800f214:	ad701604 	addi	r21,r21,-16296
 800f218:	d8c01e15 	stw	r3,120(sp)
 800f21c:	d8002015 	stw	zero,128(sp)
 800f220:	d8001f15 	stw	zero,124(sp)
 800f224:	d8003315 	stw	zero,204(sp)
 800f228:	d8003615 	stw	zero,216(sp)
 800f22c:	d8003715 	stw	zero,220(sp)
 800f230:	1811883a 	mov	r8,r3
 800f234:	d8003a15 	stw	zero,232(sp)
 800f238:	d8003b15 	stw	zero,236(sp)
 800f23c:	d8002f15 	stw	zero,188(sp)
 800f240:	d9002815 	stw	r4,160(sp)
 800f244:	b8800007 	ldb	r2,0(r23)
 800f248:	10027726 	beq	r2,zero,800fc28 <___svfprintf_internal_r+0xa90>
 800f24c:	00c00944 	movi	r3,37
 800f250:	b823883a 	mov	r17,r23
 800f254:	10c0021e 	bne	r2,r3,800f260 <___svfprintf_internal_r+0xc8>
 800f258:	00001406 	br	800f2ac <___svfprintf_internal_r+0x114>
 800f25c:	10c00326 	beq	r2,r3,800f26c <___svfprintf_internal_r+0xd4>
 800f260:	8c400044 	addi	r17,r17,1
 800f264:	88800007 	ldb	r2,0(r17)
 800f268:	103ffc1e 	bne	r2,zero,800f25c <__alt_data_end+0xfc00f25c>
 800f26c:	8de1c83a 	sub	r16,r17,r23
 800f270:	80000e26 	beq	r16,zero,800f2ac <___svfprintf_internal_r+0x114>
 800f274:	d8c02017 	ldw	r3,128(sp)
 800f278:	d8801f17 	ldw	r2,124(sp)
 800f27c:	45c00015 	stw	r23,0(r8)
 800f280:	1c07883a 	add	r3,r3,r16
 800f284:	10800044 	addi	r2,r2,1
 800f288:	d8c02015 	stw	r3,128(sp)
 800f28c:	44000115 	stw	r16,4(r8)
 800f290:	d8801f15 	stw	r2,124(sp)
 800f294:	00c001c4 	movi	r3,7
 800f298:	18809916 	blt	r3,r2,800f500 <___svfprintf_internal_r+0x368>
 800f29c:	42000204 	addi	r8,r8,8
 800f2a0:	d9402f17 	ldw	r5,188(sp)
 800f2a4:	2c0b883a 	add	r5,r5,r16
 800f2a8:	d9402f15 	stw	r5,188(sp)
 800f2ac:	88800007 	ldb	r2,0(r17)
 800f2b0:	10009a26 	beq	r2,zero,800f51c <___svfprintf_internal_r+0x384>
 800f2b4:	8dc00044 	addi	r23,r17,1
 800f2b8:	8c400047 	ldb	r17,1(r17)
 800f2bc:	0021883a 	mov	r16,zero
 800f2c0:	00bfffc4 	movi	r2,-1
 800f2c4:	0025883a 	mov	r18,zero
 800f2c8:	dc002905 	stb	r16,164(sp)
 800f2cc:	d8002785 	stb	zero,158(sp)
 800f2d0:	d8002b05 	stb	zero,172(sp)
 800f2d4:	d8802a15 	stw	r2,168(sp)
 800f2d8:	d8003115 	stw	zero,196(sp)
 800f2dc:	05001604 	movi	r20,88
 800f2e0:	05800244 	movi	r22,9
 800f2e4:	4039883a 	mov	fp,r8
 800f2e8:	9021883a 	mov	r16,r18
 800f2ec:	bdc00044 	addi	r23,r23,1
 800f2f0:	88bff804 	addi	r2,r17,-32
 800f2f4:	a0831e36 	bltu	r20,r2,800ff70 <___svfprintf_internal_r+0xdd8>
 800f2f8:	100490ba 	slli	r2,r2,2
 800f2fc:	00c20074 	movhi	r3,2049
 800f300:	18fcc404 	addi	r3,r3,-3312
 800f304:	10c5883a 	add	r2,r2,r3
 800f308:	10800017 	ldw	r2,0(r2)
 800f30c:	1000683a 	jmp	r2
 800f310:	0800feb8 	rdprs	zero,at,1018
 800f314:	0800ff70 	cmpltui	zero,at,1021
 800f318:	0800ff70 	cmpltui	zero,at,1021
 800f31c:	0800feac 	andhi	zero,at,1018
 800f320:	0800ff70 	cmpltui	zero,at,1021
 800f324:	0800ff70 	cmpltui	zero,at,1021
 800f328:	0800ff70 	cmpltui	zero,at,1021
 800f32c:	0800ff70 	cmpltui	zero,at,1021
 800f330:	0800ff70 	cmpltui	zero,at,1021
 800f334:	0800ff70 	cmpltui	zero,at,1021
 800f338:	0800f578 	rdprs	zero,at,981
 800f33c:	0800fdbc 	xorhi	zero,at,1014
 800f340:	0800ff70 	cmpltui	zero,at,1021
 800f344:	0800f484 	addi	zero,at,978
 800f348:	0800f59c 	xori	zero,at,982
 800f34c:	0800ff70 	cmpltui	zero,at,1021
 800f350:	0800f628 	cmpgeui	zero,at,984
 800f354:	0800f5ec 	andhi	zero,at,983
 800f358:	0800f5ec 	andhi	zero,at,983
 800f35c:	0800f5ec 	andhi	zero,at,983
 800f360:	0800f5ec 	andhi	zero,at,983
 800f364:	0800f5ec 	andhi	zero,at,983
 800f368:	0800f5ec 	andhi	zero,at,983
 800f36c:	0800f5ec 	andhi	zero,at,983
 800f370:	0800f5ec 	andhi	zero,at,983
 800f374:	0800f5ec 	andhi	zero,at,983
 800f378:	0800ff70 	cmpltui	zero,at,1021
 800f37c:	0800ff70 	cmpltui	zero,at,1021
 800f380:	0800ff70 	cmpltui	zero,at,1021
 800f384:	0800ff70 	cmpltui	zero,at,1021
 800f388:	0800ff70 	cmpltui	zero,at,1021
 800f38c:	0800ff70 	cmpltui	zero,at,1021
 800f390:	0800ff70 	cmpltui	zero,at,1021
 800f394:	0800ff70 	cmpltui	zero,at,1021
 800f398:	0800ff70 	cmpltui	zero,at,1021
 800f39c:	0800ff70 	cmpltui	zero,at,1021
 800f3a0:	0800f6ec 	andhi	zero,at,987
 800f3a4:	0800f634 	orhi	zero,at,984
 800f3a8:	0800ff70 	cmpltui	zero,at,1021
 800f3ac:	0800f634 	orhi	zero,at,984
 800f3b0:	0800ff70 	cmpltui	zero,at,1021
 800f3b4:	0800ff70 	cmpltui	zero,at,1021
 800f3b8:	0800ff70 	cmpltui	zero,at,1021
 800f3bc:	0800ff70 	cmpltui	zero,at,1021
 800f3c0:	0800f6e0 	cmpeqi	zero,at,987
 800f3c4:	0800ff70 	cmpltui	zero,at,1021
 800f3c8:	0800ff70 	cmpltui	zero,at,1021
 800f3cc:	0800f7b4 	orhi	zero,at,990
 800f3d0:	0800ff70 	cmpltui	zero,at,1021
 800f3d4:	0800ff70 	cmpltui	zero,at,1021
 800f3d8:	0800ff70 	cmpltui	zero,at,1021
 800f3dc:	0800ff70 	cmpltui	zero,at,1021
 800f3e0:	0800ff70 	cmpltui	zero,at,1021
 800f3e4:	0800fc30 	cmpltui	zero,at,1008
 800f3e8:	0800ff70 	cmpltui	zero,at,1021
 800f3ec:	0800ff70 	cmpltui	zero,at,1021
 800f3f0:	0800fc9c 	xori	zero,at,1010
 800f3f4:	0800ff70 	cmpltui	zero,at,1021
 800f3f8:	0800ff70 	cmpltui	zero,at,1021
 800f3fc:	0800ff70 	cmpltui	zero,at,1021
 800f400:	0800ff70 	cmpltui	zero,at,1021
 800f404:	0800ff70 	cmpltui	zero,at,1021
 800f408:	0800ff70 	cmpltui	zero,at,1021
 800f40c:	0800ff70 	cmpltui	zero,at,1021
 800f410:	0800ff70 	cmpltui	zero,at,1021
 800f414:	0800ff70 	cmpltui	zero,at,1021
 800f418:	0800ff70 	cmpltui	zero,at,1021
 800f41c:	0800fd58 	cmpnei	zero,at,1013
 800f420:	0800fed8 	cmpnei	zero,at,1019
 800f424:	0800f634 	orhi	zero,at,984
 800f428:	0800f634 	orhi	zero,at,984
 800f42c:	0800f634 	orhi	zero,at,984
 800f430:	0800ff4c 	andi	zero,at,1021
 800f434:	0800fed8 	cmpnei	zero,at,1019
 800f438:	0800ff70 	cmpltui	zero,at,1021
 800f43c:	0800ff70 	cmpltui	zero,at,1021
 800f440:	0800fef8 	rdprs	zero,at,1019
 800f444:	0800ff70 	cmpltui	zero,at,1021
 800f448:	0800ff0c 	andi	zero,at,1020
 800f44c:	0800fd9c 	xori	zero,at,1014
 800f450:	0800f490 	cmplti	zero,at,978
 800f454:	0800fdd4 	ori	zero,at,1015
 800f458:	0800ff70 	cmpltui	zero,at,1021
 800f45c:	0800fde0 	cmpeqi	zero,at,1015
 800f460:	0800ff70 	cmpltui	zero,at,1021
 800f464:	0800fe44 	addi	zero,at,1017
 800f468:	0800ff70 	cmpltui	zero,at,1021
 800f46c:	0800ff70 	cmpltui	zero,at,1021
 800f470:	0800fe64 	muli	zero,at,1017
 800f474:	d8c03117 	ldw	r3,196(sp)
 800f478:	d8802e15 	stw	r2,184(sp)
 800f47c:	00c7c83a 	sub	r3,zero,r3
 800f480:	d8c03115 	stw	r3,196(sp)
 800f484:	84000114 	ori	r16,r16,4
 800f488:	bc400007 	ldb	r17,0(r23)
 800f48c:	003f9706 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 800f490:	00800c04 	movi	r2,48
 800f494:	d8802705 	stb	r2,156(sp)
 800f498:	00801e04 	movi	r2,120
 800f49c:	d8802745 	stb	r2,157(sp)
 800f4a0:	d9002a17 	ldw	r4,168(sp)
 800f4a4:	d8802e17 	ldw	r2,184(sp)
 800f4a8:	d8002785 	stb	zero,158(sp)
 800f4ac:	e011883a 	mov	r8,fp
 800f4b0:	10c00104 	addi	r3,r2,4
 800f4b4:	15000017 	ldw	r20,0(r2)
 800f4b8:	002d883a 	mov	r22,zero
 800f4bc:	80800094 	ori	r2,r16,2
 800f4c0:	2002b616 	blt	r4,zero,800ff9c <___svfprintf_internal_r+0xe04>
 800f4c4:	00bfdfc4 	movi	r2,-129
 800f4c8:	80a4703a 	and	r18,r16,r2
 800f4cc:	d8c02e15 	stw	r3,184(sp)
 800f4d0:	94800094 	ori	r18,r18,2
 800f4d4:	a002a01e 	bne	r20,zero,800ff58 <___svfprintf_internal_r+0xdc0>
 800f4d8:	014200b4 	movhi	r5,2050
 800f4dc:	296ef304 	addi	r5,r5,-17460
 800f4e0:	d9403a15 	stw	r5,232(sp)
 800f4e4:	04401e04 	movi	r17,120
 800f4e8:	d8c02a17 	ldw	r3,168(sp)
 800f4ec:	0039883a 	mov	fp,zero
 800f4f0:	1801e626 	beq	r3,zero,800fc8c <___svfprintf_internal_r+0xaf4>
 800f4f4:	0029883a 	mov	r20,zero
 800f4f8:	002d883a 	mov	r22,zero
 800f4fc:	00020506 	br	800fd14 <___svfprintf_internal_r+0xb7c>
 800f500:	d9402d17 	ldw	r5,180(sp)
 800f504:	d9801e04 	addi	r6,sp,120
 800f508:	9809883a 	mov	r4,r19
 800f50c:	8013d2c0 	call	8013d2c <__ssprint_r>
 800f510:	1000081e 	bne	r2,zero,800f534 <___svfprintf_internal_r+0x39c>
 800f514:	da000404 	addi	r8,sp,16
 800f518:	003f6106 	br	800f2a0 <__alt_data_end+0xfc00f2a0>
 800f51c:	d8802017 	ldw	r2,128(sp)
 800f520:	10000426 	beq	r2,zero,800f534 <___svfprintf_internal_r+0x39c>
 800f524:	d9402d17 	ldw	r5,180(sp)
 800f528:	d9003917 	ldw	r4,228(sp)
 800f52c:	d9801e04 	addi	r6,sp,120
 800f530:	8013d2c0 	call	8013d2c <__ssprint_r>
 800f534:	d8802d17 	ldw	r2,180(sp)
 800f538:	10c0030b 	ldhu	r3,12(r2)
 800f53c:	d8802f17 	ldw	r2,188(sp)
 800f540:	18c0100c 	andi	r3,r3,64
 800f544:	1806251e 	bne	r3,zero,8010ddc <___svfprintf_internal_r+0x1c44>
 800f548:	dfc04817 	ldw	ra,288(sp)
 800f54c:	df004717 	ldw	fp,284(sp)
 800f550:	ddc04617 	ldw	r23,280(sp)
 800f554:	dd804517 	ldw	r22,276(sp)
 800f558:	dd404417 	ldw	r21,272(sp)
 800f55c:	dd004317 	ldw	r20,268(sp)
 800f560:	dcc04217 	ldw	r19,264(sp)
 800f564:	dc804117 	ldw	r18,260(sp)
 800f568:	dc404017 	ldw	r17,256(sp)
 800f56c:	dc003f17 	ldw	r16,252(sp)
 800f570:	dec04904 	addi	sp,sp,292
 800f574:	f800283a 	ret
 800f578:	d9002e17 	ldw	r4,184(sp)
 800f57c:	d9402e17 	ldw	r5,184(sp)
 800f580:	21000017 	ldw	r4,0(r4)
 800f584:	28800104 	addi	r2,r5,4
 800f588:	d9003115 	stw	r4,196(sp)
 800f58c:	203fb916 	blt	r4,zero,800f474 <__alt_data_end+0xfc00f474>
 800f590:	d8802e15 	stw	r2,184(sp)
 800f594:	bc400007 	ldb	r17,0(r23)
 800f598:	003f5406 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 800f59c:	bc400007 	ldb	r17,0(r23)
 800f5a0:	01000a84 	movi	r4,42
 800f5a4:	b8c00044 	addi	r3,r23,1
 800f5a8:	89076926 	beq	r17,r4,8011350 <___svfprintf_internal_r+0x21b8>
 800f5ac:	8cbff404 	addi	r18,r17,-48
 800f5b0:	b486b936 	bltu	r22,r18,8011098 <___svfprintf_internal_r+0x1f00>
 800f5b4:	0009883a 	mov	r4,zero
 800f5b8:	1823883a 	mov	r17,r3
 800f5bc:	01400284 	movi	r5,10
 800f5c0:	80028f40 	call	80028f4 <__mulsi3>
 800f5c4:	88c00007 	ldb	r3,0(r17)
 800f5c8:	1489883a 	add	r4,r2,r18
 800f5cc:	8dc00044 	addi	r23,r17,1
 800f5d0:	1cbff404 	addi	r18,r3,-48
 800f5d4:	b823883a 	mov	r17,r23
 800f5d8:	b4bff82e 	bgeu	r22,r18,800f5bc <__alt_data_end+0xfc00f5bc>
 800f5dc:	1823883a 	mov	r17,r3
 800f5e0:	20060416 	blt	r4,zero,8010df4 <___svfprintf_internal_r+0x1c5c>
 800f5e4:	d9002a15 	stw	r4,168(sp)
 800f5e8:	003f4106 	br	800f2f0 <__alt_data_end+0xfc00f2f0>
 800f5ec:	8cbff404 	addi	r18,r17,-48
 800f5f0:	d8003115 	stw	zero,196(sp)
 800f5f4:	0009883a 	mov	r4,zero
 800f5f8:	b823883a 	mov	r17,r23
 800f5fc:	01400284 	movi	r5,10
 800f600:	80028f40 	call	80028f4 <__mulsi3>
 800f604:	88c00007 	ldb	r3,0(r17)
 800f608:	9089883a 	add	r4,r18,r2
 800f60c:	bdc00044 	addi	r23,r23,1
 800f610:	1cbff404 	addi	r18,r3,-48
 800f614:	b823883a 	mov	r17,r23
 800f618:	b4bff82e 	bgeu	r22,r18,800f5fc <__alt_data_end+0xfc00f5fc>
 800f61c:	1823883a 	mov	r17,r3
 800f620:	d9003115 	stw	r4,196(sp)
 800f624:	003f3206 	br	800f2f0 <__alt_data_end+0xfc00f2f0>
 800f628:	84002014 	ori	r16,r16,128
 800f62c:	bc400007 	ldb	r17,0(r23)
 800f630:	003f2e06 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 800f634:	8025883a 	mov	r18,r16
 800f638:	dc002903 	ldbu	r16,164(sp)
 800f63c:	e011883a 	mov	r8,fp
 800f640:	84003fcc 	andi	r16,r16,255
 800f644:	8007721e 	bne	r16,zero,8011410 <___svfprintf_internal_r+0x2278>
 800f648:	9080020c 	andi	r2,r18,8
 800f64c:	1004a526 	beq	r2,zero,80108e4 <___svfprintf_internal_r+0x174c>
 800f650:	d9002e17 	ldw	r4,184(sp)
 800f654:	d9402e17 	ldw	r5,184(sp)
 800f658:	d8802e17 	ldw	r2,184(sp)
 800f65c:	21000017 	ldw	r4,0(r4)
 800f660:	29400117 	ldw	r5,4(r5)
 800f664:	10800204 	addi	r2,r2,8
 800f668:	d9003615 	stw	r4,216(sp)
 800f66c:	d9403715 	stw	r5,220(sp)
 800f670:	d8802e15 	stw	r2,184(sp)
 800f674:	d9003617 	ldw	r4,216(sp)
 800f678:	d9403717 	ldw	r5,220(sp)
 800f67c:	da003e15 	stw	r8,248(sp)
 800f680:	04000044 	movi	r16,1
 800f684:	800cc200 	call	800cc20 <__fpclassifyd>
 800f688:	da003e17 	ldw	r8,248(sp)
 800f68c:	1404731e 	bne	r2,r16,801085c <___svfprintf_internal_r+0x16c4>
 800f690:	d9003617 	ldw	r4,216(sp)
 800f694:	d9403717 	ldw	r5,220(sp)
 800f698:	000d883a 	mov	r6,zero
 800f69c:	000f883a 	mov	r7,zero
 800f6a0:	80178f80 	call	80178f8 <__ledf2>
 800f6a4:	da003e17 	ldw	r8,248(sp)
 800f6a8:	10061b16 	blt	r2,zero,8010f18 <___svfprintf_internal_r+0x1d80>
 800f6ac:	df002783 	ldbu	fp,158(sp)
 800f6b0:	008011c4 	movi	r2,71
 800f6b4:	1445810e 	bge	r2,r17,8010cbc <___svfprintf_internal_r+0x1b24>
 800f6b8:	040200b4 	movhi	r16,2050
 800f6bc:	842eeb04 	addi	r16,r16,-17492
 800f6c0:	00c000c4 	movi	r3,3
 800f6c4:	00bfdfc4 	movi	r2,-129
 800f6c8:	d8c02915 	stw	r3,164(sp)
 800f6cc:	90a4703a 	and	r18,r18,r2
 800f6d0:	d8c02b15 	stw	r3,172(sp)
 800f6d4:	d8002a15 	stw	zero,168(sp)
 800f6d8:	d8003215 	stw	zero,200(sp)
 800f6dc:	00006c06 	br	800f890 <___svfprintf_internal_r+0x6f8>
 800f6e0:	84000214 	ori	r16,r16,8
 800f6e4:	bc400007 	ldb	r17,0(r23)
 800f6e8:	003f0006 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 800f6ec:	8025883a 	mov	r18,r16
 800f6f0:	dc002903 	ldbu	r16,164(sp)
 800f6f4:	e011883a 	mov	r8,fp
 800f6f8:	84003fcc 	andi	r16,r16,255
 800f6fc:	80073f1e 	bne	r16,zero,80113fc <___svfprintf_internal_r+0x2264>
 800f700:	94800414 	ori	r18,r18,16
 800f704:	9080080c 	andi	r2,r18,32
 800f708:	1003bb26 	beq	r2,zero,80105f8 <___svfprintf_internal_r+0x1460>
 800f70c:	d9002e17 	ldw	r4,184(sp)
 800f710:	20800117 	ldw	r2,4(r4)
 800f714:	25000017 	ldw	r20,0(r4)
 800f718:	21000204 	addi	r4,r4,8
 800f71c:	d9002e15 	stw	r4,184(sp)
 800f720:	102d883a 	mov	r22,r2
 800f724:	1003bd16 	blt	r2,zero,801061c <___svfprintf_internal_r+0x1484>
 800f728:	d9002a17 	ldw	r4,168(sp)
 800f72c:	df002783 	ldbu	fp,158(sp)
 800f730:	2003d016 	blt	r4,zero,8010674 <___svfprintf_internal_r+0x14dc>
 800f734:	00ffdfc4 	movi	r3,-129
 800f738:	a584b03a 	or	r2,r20,r22
 800f73c:	90e4703a 	and	r18,r18,r3
 800f740:	10015026 	beq	r2,zero,800fc84 <___svfprintf_internal_r+0xaec>
 800f744:	b0037026 	beq	r22,zero,8010508 <___svfprintf_internal_r+0x1370>
 800f748:	dc402915 	stw	r17,164(sp)
 800f74c:	dc001e04 	addi	r16,sp,120
 800f750:	b023883a 	mov	r17,r22
 800f754:	402d883a 	mov	r22,r8
 800f758:	a009883a 	mov	r4,r20
 800f75c:	880b883a 	mov	r5,r17
 800f760:	01800284 	movi	r6,10
 800f764:	000f883a 	mov	r7,zero
 800f768:	8015d580 	call	8015d58 <__umoddi3>
 800f76c:	10800c04 	addi	r2,r2,48
 800f770:	843fffc4 	addi	r16,r16,-1
 800f774:	a009883a 	mov	r4,r20
 800f778:	880b883a 	mov	r5,r17
 800f77c:	80800005 	stb	r2,0(r16)
 800f780:	01800284 	movi	r6,10
 800f784:	000f883a 	mov	r7,zero
 800f788:	801575c0 	call	801575c <__udivdi3>
 800f78c:	1029883a 	mov	r20,r2
 800f790:	10c4b03a 	or	r2,r2,r3
 800f794:	1823883a 	mov	r17,r3
 800f798:	103fef1e 	bne	r2,zero,800f758 <__alt_data_end+0xfc00f758>
 800f79c:	d8c02817 	ldw	r3,160(sp)
 800f7a0:	dc402917 	ldw	r17,164(sp)
 800f7a4:	b011883a 	mov	r8,r22
 800f7a8:	1c07c83a 	sub	r3,r3,r16
 800f7ac:	d8c02b15 	stw	r3,172(sp)
 800f7b0:	00003106 	br	800f878 <___svfprintf_internal_r+0x6e0>
 800f7b4:	8025883a 	mov	r18,r16
 800f7b8:	dc002903 	ldbu	r16,164(sp)
 800f7bc:	e011883a 	mov	r8,fp
 800f7c0:	84003fcc 	andi	r16,r16,255
 800f7c4:	80070a1e 	bne	r16,zero,80113f0 <___svfprintf_internal_r+0x2258>
 800f7c8:	94800414 	ori	r18,r18,16
 800f7cc:	9080080c 	andi	r2,r18,32
 800f7d0:	1002f626 	beq	r2,zero,80103ac <___svfprintf_internal_r+0x1214>
 800f7d4:	d9002e17 	ldw	r4,184(sp)
 800f7d8:	d9402a17 	ldw	r5,168(sp)
 800f7dc:	d8002785 	stb	zero,158(sp)
 800f7e0:	20800204 	addi	r2,r4,8
 800f7e4:	25000017 	ldw	r20,0(r4)
 800f7e8:	25800117 	ldw	r22,4(r4)
 800f7ec:	28043716 	blt	r5,zero,80108cc <___svfprintf_internal_r+0x1734>
 800f7f0:	013fdfc4 	movi	r4,-129
 800f7f4:	a586b03a 	or	r3,r20,r22
 800f7f8:	d8802e15 	stw	r2,184(sp)
 800f7fc:	9124703a 	and	r18,r18,r4
 800f800:	1802f71e 	bne	r3,zero,80103e0 <___svfprintf_internal_r+0x1248>
 800f804:	d9402a17 	ldw	r5,168(sp)
 800f808:	0039883a 	mov	fp,zero
 800f80c:	2806df26 	beq	r5,zero,801138c <___svfprintf_internal_r+0x21f4>
 800f810:	0029883a 	mov	r20,zero
 800f814:	002d883a 	mov	r22,zero
 800f818:	dc001e04 	addi	r16,sp,120
 800f81c:	a006d0fa 	srli	r3,r20,3
 800f820:	b008977a 	slli	r4,r22,29
 800f824:	b02cd0fa 	srli	r22,r22,3
 800f828:	a50001cc 	andi	r20,r20,7
 800f82c:	a0800c04 	addi	r2,r20,48
 800f830:	843fffc4 	addi	r16,r16,-1
 800f834:	20e8b03a 	or	r20,r4,r3
 800f838:	80800005 	stb	r2,0(r16)
 800f83c:	a586b03a 	or	r3,r20,r22
 800f840:	183ff61e 	bne	r3,zero,800f81c <__alt_data_end+0xfc00f81c>
 800f844:	90c0004c 	andi	r3,r18,1
 800f848:	18013f26 	beq	r3,zero,800fd48 <___svfprintf_internal_r+0xbb0>
 800f84c:	10803fcc 	andi	r2,r2,255
 800f850:	1080201c 	xori	r2,r2,128
 800f854:	10bfe004 	addi	r2,r2,-128
 800f858:	00c00c04 	movi	r3,48
 800f85c:	10c13a26 	beq	r2,r3,800fd48 <___svfprintf_internal_r+0xbb0>
 800f860:	80ffffc5 	stb	r3,-1(r16)
 800f864:	d8c02817 	ldw	r3,160(sp)
 800f868:	80bfffc4 	addi	r2,r16,-1
 800f86c:	1021883a 	mov	r16,r2
 800f870:	1887c83a 	sub	r3,r3,r2
 800f874:	d8c02b15 	stw	r3,172(sp)
 800f878:	d8802b17 	ldw	r2,172(sp)
 800f87c:	d9002a17 	ldw	r4,168(sp)
 800f880:	1100010e 	bge	r2,r4,800f888 <___svfprintf_internal_r+0x6f0>
 800f884:	2005883a 	mov	r2,r4
 800f888:	d8802915 	stw	r2,164(sp)
 800f88c:	d8003215 	stw	zero,200(sp)
 800f890:	e7003fcc 	andi	fp,fp,255
 800f894:	e700201c 	xori	fp,fp,128
 800f898:	e73fe004 	addi	fp,fp,-128
 800f89c:	e0000326 	beq	fp,zero,800f8ac <___svfprintf_internal_r+0x714>
 800f8a0:	d8c02917 	ldw	r3,164(sp)
 800f8a4:	18c00044 	addi	r3,r3,1
 800f8a8:	d8c02915 	stw	r3,164(sp)
 800f8ac:	90c0008c 	andi	r3,r18,2
 800f8b0:	d8c02c15 	stw	r3,176(sp)
 800f8b4:	18000326 	beq	r3,zero,800f8c4 <___svfprintf_internal_r+0x72c>
 800f8b8:	d8c02917 	ldw	r3,164(sp)
 800f8bc:	18c00084 	addi	r3,r3,2
 800f8c0:	d8c02915 	stw	r3,164(sp)
 800f8c4:	90c0210c 	andi	r3,r18,132
 800f8c8:	d8c03015 	stw	r3,192(sp)
 800f8cc:	1801c31e 	bne	r3,zero,800ffdc <___svfprintf_internal_r+0xe44>
 800f8d0:	d9003117 	ldw	r4,196(sp)
 800f8d4:	d8c02917 	ldw	r3,164(sp)
 800f8d8:	20e9c83a 	sub	r20,r4,r3
 800f8dc:	0501bf0e 	bge	zero,r20,800ffdc <___svfprintf_internal_r+0xe44>
 800f8e0:	02400404 	movi	r9,16
 800f8e4:	d8c02017 	ldw	r3,128(sp)
 800f8e8:	d8801f17 	ldw	r2,124(sp)
 800f8ec:	4d053d0e 	bge	r9,r20,8010de4 <___svfprintf_internal_r+0x1c4c>
 800f8f0:	014200b4 	movhi	r5,2050
 800f8f4:	29701a04 	addi	r5,r5,-16280
 800f8f8:	dc403c15 	stw	r17,240(sp)
 800f8fc:	d9403515 	stw	r5,212(sp)
 800f900:	a023883a 	mov	r17,r20
 800f904:	482d883a 	mov	r22,r9
 800f908:	9029883a 	mov	r20,r18
 800f90c:	070001c4 	movi	fp,7
 800f910:	8025883a 	mov	r18,r16
 800f914:	dc002d17 	ldw	r16,180(sp)
 800f918:	00000306 	br	800f928 <___svfprintf_internal_r+0x790>
 800f91c:	8c7ffc04 	addi	r17,r17,-16
 800f920:	42000204 	addi	r8,r8,8
 800f924:	b440130e 	bge	r22,r17,800f974 <___svfprintf_internal_r+0x7dc>
 800f928:	010200b4 	movhi	r4,2050
 800f92c:	18c00404 	addi	r3,r3,16
 800f930:	10800044 	addi	r2,r2,1
 800f934:	21301a04 	addi	r4,r4,-16280
 800f938:	41000015 	stw	r4,0(r8)
 800f93c:	45800115 	stw	r22,4(r8)
 800f940:	d8c02015 	stw	r3,128(sp)
 800f944:	d8801f15 	stw	r2,124(sp)
 800f948:	e0bff40e 	bge	fp,r2,800f91c <__alt_data_end+0xfc00f91c>
 800f94c:	d9801e04 	addi	r6,sp,120
 800f950:	800b883a 	mov	r5,r16
 800f954:	9809883a 	mov	r4,r19
 800f958:	8013d2c0 	call	8013d2c <__ssprint_r>
 800f95c:	103ef51e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 800f960:	8c7ffc04 	addi	r17,r17,-16
 800f964:	d8c02017 	ldw	r3,128(sp)
 800f968:	d8801f17 	ldw	r2,124(sp)
 800f96c:	da000404 	addi	r8,sp,16
 800f970:	b47fed16 	blt	r22,r17,800f928 <__alt_data_end+0xfc00f928>
 800f974:	9021883a 	mov	r16,r18
 800f978:	a025883a 	mov	r18,r20
 800f97c:	8829883a 	mov	r20,r17
 800f980:	dc403c17 	ldw	r17,240(sp)
 800f984:	d9403517 	ldw	r5,212(sp)
 800f988:	a0c7883a 	add	r3,r20,r3
 800f98c:	10800044 	addi	r2,r2,1
 800f990:	41400015 	stw	r5,0(r8)
 800f994:	45000115 	stw	r20,4(r8)
 800f998:	d8c02015 	stw	r3,128(sp)
 800f99c:	d8801f15 	stw	r2,124(sp)
 800f9a0:	010001c4 	movi	r4,7
 800f9a4:	2082c116 	blt	r4,r2,80104ac <___svfprintf_internal_r+0x1314>
 800f9a8:	df002787 	ldb	fp,158(sp)
 800f9ac:	42000204 	addi	r8,r8,8
 800f9b0:	e0000c26 	beq	fp,zero,800f9e4 <___svfprintf_internal_r+0x84c>
 800f9b4:	d8801f17 	ldw	r2,124(sp)
 800f9b8:	d9002784 	addi	r4,sp,158
 800f9bc:	18c00044 	addi	r3,r3,1
 800f9c0:	10800044 	addi	r2,r2,1
 800f9c4:	41000015 	stw	r4,0(r8)
 800f9c8:	01000044 	movi	r4,1
 800f9cc:	41000115 	stw	r4,4(r8)
 800f9d0:	d8c02015 	stw	r3,128(sp)
 800f9d4:	d8801f15 	stw	r2,124(sp)
 800f9d8:	010001c4 	movi	r4,7
 800f9dc:	20825a16 	blt	r4,r2,8010348 <___svfprintf_internal_r+0x11b0>
 800f9e0:	42000204 	addi	r8,r8,8
 800f9e4:	d8802c17 	ldw	r2,176(sp)
 800f9e8:	10000c26 	beq	r2,zero,800fa1c <___svfprintf_internal_r+0x884>
 800f9ec:	d8801f17 	ldw	r2,124(sp)
 800f9f0:	d9002704 	addi	r4,sp,156
 800f9f4:	18c00084 	addi	r3,r3,2
 800f9f8:	10800044 	addi	r2,r2,1
 800f9fc:	41000015 	stw	r4,0(r8)
 800fa00:	01000084 	movi	r4,2
 800fa04:	41000115 	stw	r4,4(r8)
 800fa08:	d8c02015 	stw	r3,128(sp)
 800fa0c:	d8801f15 	stw	r2,124(sp)
 800fa10:	010001c4 	movi	r4,7
 800fa14:	20825416 	blt	r4,r2,8010368 <___svfprintf_internal_r+0x11d0>
 800fa18:	42000204 	addi	r8,r8,8
 800fa1c:	d9003017 	ldw	r4,192(sp)
 800fa20:	00802004 	movi	r2,128
 800fa24:	2081b926 	beq	r4,r2,801010c <___svfprintf_internal_r+0xf74>
 800fa28:	d9402a17 	ldw	r5,168(sp)
 800fa2c:	d8802b17 	ldw	r2,172(sp)
 800fa30:	28adc83a 	sub	r22,r5,r2
 800fa34:	05802f0e 	bge	zero,r22,800faf4 <___svfprintf_internal_r+0x95c>
 800fa38:	07000404 	movi	fp,16
 800fa3c:	d8801f17 	ldw	r2,124(sp)
 800fa40:	e583e20e 	bge	fp,r22,80109cc <___svfprintf_internal_r+0x1834>
 800fa44:	014200b4 	movhi	r5,2050
 800fa48:	29701604 	addi	r5,r5,-16296
 800fa4c:	dc402a15 	stw	r17,168(sp)
 800fa50:	d9402c15 	stw	r5,176(sp)
 800fa54:	b023883a 	mov	r17,r22
 800fa58:	050001c4 	movi	r20,7
 800fa5c:	902d883a 	mov	r22,r18
 800fa60:	8025883a 	mov	r18,r16
 800fa64:	dc002d17 	ldw	r16,180(sp)
 800fa68:	00000306 	br	800fa78 <___svfprintf_internal_r+0x8e0>
 800fa6c:	8c7ffc04 	addi	r17,r17,-16
 800fa70:	42000204 	addi	r8,r8,8
 800fa74:	e440110e 	bge	fp,r17,800fabc <___svfprintf_internal_r+0x924>
 800fa78:	18c00404 	addi	r3,r3,16
 800fa7c:	10800044 	addi	r2,r2,1
 800fa80:	45400015 	stw	r21,0(r8)
 800fa84:	47000115 	stw	fp,4(r8)
 800fa88:	d8c02015 	stw	r3,128(sp)
 800fa8c:	d8801f15 	stw	r2,124(sp)
 800fa90:	a0bff60e 	bge	r20,r2,800fa6c <__alt_data_end+0xfc00fa6c>
 800fa94:	d9801e04 	addi	r6,sp,120
 800fa98:	800b883a 	mov	r5,r16
 800fa9c:	9809883a 	mov	r4,r19
 800faa0:	8013d2c0 	call	8013d2c <__ssprint_r>
 800faa4:	103ea31e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 800faa8:	8c7ffc04 	addi	r17,r17,-16
 800faac:	d8c02017 	ldw	r3,128(sp)
 800fab0:	d8801f17 	ldw	r2,124(sp)
 800fab4:	da000404 	addi	r8,sp,16
 800fab8:	e47fef16 	blt	fp,r17,800fa78 <__alt_data_end+0xfc00fa78>
 800fabc:	9021883a 	mov	r16,r18
 800fac0:	b025883a 	mov	r18,r22
 800fac4:	882d883a 	mov	r22,r17
 800fac8:	dc402a17 	ldw	r17,168(sp)
 800facc:	d9002c17 	ldw	r4,176(sp)
 800fad0:	1d87883a 	add	r3,r3,r22
 800fad4:	10800044 	addi	r2,r2,1
 800fad8:	41000015 	stw	r4,0(r8)
 800fadc:	45800115 	stw	r22,4(r8)
 800fae0:	d8c02015 	stw	r3,128(sp)
 800fae4:	d8801f15 	stw	r2,124(sp)
 800fae8:	010001c4 	movi	r4,7
 800faec:	20820e16 	blt	r4,r2,8010328 <___svfprintf_internal_r+0x1190>
 800faf0:	42000204 	addi	r8,r8,8
 800faf4:	9080400c 	andi	r2,r18,256
 800faf8:	10013a1e 	bne	r2,zero,800ffe4 <___svfprintf_internal_r+0xe4c>
 800fafc:	d9402b17 	ldw	r5,172(sp)
 800fb00:	d8801f17 	ldw	r2,124(sp)
 800fb04:	44000015 	stw	r16,0(r8)
 800fb08:	1947883a 	add	r3,r3,r5
 800fb0c:	10800044 	addi	r2,r2,1
 800fb10:	41400115 	stw	r5,4(r8)
 800fb14:	d8c02015 	stw	r3,128(sp)
 800fb18:	d8801f15 	stw	r2,124(sp)
 800fb1c:	010001c4 	movi	r4,7
 800fb20:	2081f316 	blt	r4,r2,80102f0 <___svfprintf_internal_r+0x1158>
 800fb24:	42000204 	addi	r8,r8,8
 800fb28:	9480010c 	andi	r18,r18,4
 800fb2c:	90003226 	beq	r18,zero,800fbf8 <___svfprintf_internal_r+0xa60>
 800fb30:	d9403117 	ldw	r5,196(sp)
 800fb34:	d8802917 	ldw	r2,164(sp)
 800fb38:	28a1c83a 	sub	r16,r5,r2
 800fb3c:	04002e0e 	bge	zero,r16,800fbf8 <___svfprintf_internal_r+0xa60>
 800fb40:	04400404 	movi	r17,16
 800fb44:	d8801f17 	ldw	r2,124(sp)
 800fb48:	8c04db0e 	bge	r17,r16,8010eb8 <___svfprintf_internal_r+0x1d20>
 800fb4c:	014200b4 	movhi	r5,2050
 800fb50:	29701a04 	addi	r5,r5,-16280
 800fb54:	d9403515 	stw	r5,212(sp)
 800fb58:	048001c4 	movi	r18,7
 800fb5c:	dd002d17 	ldw	r20,180(sp)
 800fb60:	00000306 	br	800fb70 <___svfprintf_internal_r+0x9d8>
 800fb64:	843ffc04 	addi	r16,r16,-16
 800fb68:	42000204 	addi	r8,r8,8
 800fb6c:	8c00130e 	bge	r17,r16,800fbbc <___svfprintf_internal_r+0xa24>
 800fb70:	010200b4 	movhi	r4,2050
 800fb74:	18c00404 	addi	r3,r3,16
 800fb78:	10800044 	addi	r2,r2,1
 800fb7c:	21301a04 	addi	r4,r4,-16280
 800fb80:	41000015 	stw	r4,0(r8)
 800fb84:	44400115 	stw	r17,4(r8)
 800fb88:	d8c02015 	stw	r3,128(sp)
 800fb8c:	d8801f15 	stw	r2,124(sp)
 800fb90:	90bff40e 	bge	r18,r2,800fb64 <__alt_data_end+0xfc00fb64>
 800fb94:	d9801e04 	addi	r6,sp,120
 800fb98:	a00b883a 	mov	r5,r20
 800fb9c:	9809883a 	mov	r4,r19
 800fba0:	8013d2c0 	call	8013d2c <__ssprint_r>
 800fba4:	103e631e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 800fba8:	843ffc04 	addi	r16,r16,-16
 800fbac:	d8c02017 	ldw	r3,128(sp)
 800fbb0:	d8801f17 	ldw	r2,124(sp)
 800fbb4:	da000404 	addi	r8,sp,16
 800fbb8:	8c3fed16 	blt	r17,r16,800fb70 <__alt_data_end+0xfc00fb70>
 800fbbc:	d9403517 	ldw	r5,212(sp)
 800fbc0:	1c07883a 	add	r3,r3,r16
 800fbc4:	10800044 	addi	r2,r2,1
 800fbc8:	41400015 	stw	r5,0(r8)
 800fbcc:	44000115 	stw	r16,4(r8)
 800fbd0:	d8c02015 	stw	r3,128(sp)
 800fbd4:	d8801f15 	stw	r2,124(sp)
 800fbd8:	010001c4 	movi	r4,7
 800fbdc:	2080060e 	bge	r4,r2,800fbf8 <___svfprintf_internal_r+0xa60>
 800fbe0:	d9402d17 	ldw	r5,180(sp)
 800fbe4:	d9801e04 	addi	r6,sp,120
 800fbe8:	9809883a 	mov	r4,r19
 800fbec:	8013d2c0 	call	8013d2c <__ssprint_r>
 800fbf0:	103e501e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 800fbf4:	d8c02017 	ldw	r3,128(sp)
 800fbf8:	d8803117 	ldw	r2,196(sp)
 800fbfc:	d9002917 	ldw	r4,164(sp)
 800fc00:	1100010e 	bge	r2,r4,800fc08 <___svfprintf_internal_r+0xa70>
 800fc04:	2005883a 	mov	r2,r4
 800fc08:	d9402f17 	ldw	r5,188(sp)
 800fc0c:	288b883a 	add	r5,r5,r2
 800fc10:	d9402f15 	stw	r5,188(sp)
 800fc14:	1801be1e 	bne	r3,zero,8010310 <___svfprintf_internal_r+0x1178>
 800fc18:	b8800007 	ldb	r2,0(r23)
 800fc1c:	d8001f15 	stw	zero,124(sp)
 800fc20:	da000404 	addi	r8,sp,16
 800fc24:	103d891e 	bne	r2,zero,800f24c <__alt_data_end+0xfc00f24c>
 800fc28:	b823883a 	mov	r17,r23
 800fc2c:	003d9f06 	br	800f2ac <__alt_data_end+0xfc00f2ac>
 800fc30:	8025883a 	mov	r18,r16
 800fc34:	dc002903 	ldbu	r16,164(sp)
 800fc38:	e011883a 	mov	r8,fp
 800fc3c:	84003fcc 	andi	r16,r16,255
 800fc40:	8005e61e 	bne	r16,zero,80113dc <___svfprintf_internal_r+0x2244>
 800fc44:	94800414 	ori	r18,r18,16
 800fc48:	9080080c 	andi	r2,r18,32
 800fc4c:	10022026 	beq	r2,zero,80104d0 <___svfprintf_internal_r+0x1338>
 800fc50:	d9002e17 	ldw	r4,184(sp)
 800fc54:	d9402a17 	ldw	r5,168(sp)
 800fc58:	d8002785 	stb	zero,158(sp)
 800fc5c:	20c00204 	addi	r3,r4,8
 800fc60:	25000017 	ldw	r20,0(r4)
 800fc64:	25800117 	ldw	r22,4(r4)
 800fc68:	2803ad16 	blt	r5,zero,8010b20 <___svfprintf_internal_r+0x1988>
 800fc6c:	013fdfc4 	movi	r4,-129
 800fc70:	a584b03a 	or	r2,r20,r22
 800fc74:	d8c02e15 	stw	r3,184(sp)
 800fc78:	9124703a 	and	r18,r18,r4
 800fc7c:	0039883a 	mov	fp,zero
 800fc80:	103eb01e 	bne	r2,zero,800f744 <__alt_data_end+0xfc00f744>
 800fc84:	d8802a17 	ldw	r2,168(sp)
 800fc88:	1002e71e 	bne	r2,zero,8010828 <___svfprintf_internal_r+0x1690>
 800fc8c:	d8002a15 	stw	zero,168(sp)
 800fc90:	d8002b15 	stw	zero,172(sp)
 800fc94:	dc001e04 	addi	r16,sp,120
 800fc98:	003ef706 	br	800f878 <__alt_data_end+0xfc00f878>
 800fc9c:	8025883a 	mov	r18,r16
 800fca0:	dc002903 	ldbu	r16,164(sp)
 800fca4:	e011883a 	mov	r8,fp
 800fca8:	84003fcc 	andi	r16,r16,255
 800fcac:	8005c81e 	bne	r16,zero,80113d0 <___svfprintf_internal_r+0x2238>
 800fcb0:	010200b4 	movhi	r4,2050
 800fcb4:	212eee04 	addi	r4,r4,-17480
 800fcb8:	d9003a15 	stw	r4,232(sp)
 800fcbc:	9080080c 	andi	r2,r18,32
 800fcc0:	10007226 	beq	r2,zero,800fe8c <___svfprintf_internal_r+0xcf4>
 800fcc4:	d9402e17 	ldw	r5,184(sp)
 800fcc8:	2d000017 	ldw	r20,0(r5)
 800fccc:	2d800117 	ldw	r22,4(r5)
 800fcd0:	29400204 	addi	r5,r5,8
 800fcd4:	d9402e15 	stw	r5,184(sp)
 800fcd8:	9080004c 	andi	r2,r18,1
 800fcdc:	1001aa26 	beq	r2,zero,8010388 <___svfprintf_internal_r+0x11f0>
 800fce0:	a584b03a 	or	r2,r20,r22
 800fce4:	10032526 	beq	r2,zero,801097c <___svfprintf_internal_r+0x17e4>
 800fce8:	d8c02a17 	ldw	r3,168(sp)
 800fcec:	00800c04 	movi	r2,48
 800fcf0:	d8802705 	stb	r2,156(sp)
 800fcf4:	dc402745 	stb	r17,157(sp)
 800fcf8:	d8002785 	stb	zero,158(sp)
 800fcfc:	90800094 	ori	r2,r18,2
 800fd00:	1804a316 	blt	r3,zero,8010f90 <___svfprintf_internal_r+0x1df8>
 800fd04:	00bfdfc4 	movi	r2,-129
 800fd08:	90a4703a 	and	r18,r18,r2
 800fd0c:	94800094 	ori	r18,r18,2
 800fd10:	0039883a 	mov	fp,zero
 800fd14:	d9003a17 	ldw	r4,232(sp)
 800fd18:	dc001e04 	addi	r16,sp,120
 800fd1c:	a08003cc 	andi	r2,r20,15
 800fd20:	b006973a 	slli	r3,r22,28
 800fd24:	2085883a 	add	r2,r4,r2
 800fd28:	a028d13a 	srli	r20,r20,4
 800fd2c:	10800003 	ldbu	r2,0(r2)
 800fd30:	b02cd13a 	srli	r22,r22,4
 800fd34:	843fffc4 	addi	r16,r16,-1
 800fd38:	1d28b03a 	or	r20,r3,r20
 800fd3c:	80800005 	stb	r2,0(r16)
 800fd40:	a584b03a 	or	r2,r20,r22
 800fd44:	103ff51e 	bne	r2,zero,800fd1c <__alt_data_end+0xfc00fd1c>
 800fd48:	d8c02817 	ldw	r3,160(sp)
 800fd4c:	1c07c83a 	sub	r3,r3,r16
 800fd50:	d8c02b15 	stw	r3,172(sp)
 800fd54:	003ec806 	br	800f878 <__alt_data_end+0xfc00f878>
 800fd58:	d8c02e17 	ldw	r3,184(sp)
 800fd5c:	d9002e17 	ldw	r4,184(sp)
 800fd60:	8025883a 	mov	r18,r16
 800fd64:	18800017 	ldw	r2,0(r3)
 800fd68:	21000104 	addi	r4,r4,4
 800fd6c:	00c00044 	movi	r3,1
 800fd70:	e011883a 	mov	r8,fp
 800fd74:	d8c02915 	stw	r3,164(sp)
 800fd78:	d8002785 	stb	zero,158(sp)
 800fd7c:	d8801405 	stb	r2,80(sp)
 800fd80:	d9002e15 	stw	r4,184(sp)
 800fd84:	d8c02b15 	stw	r3,172(sp)
 800fd88:	d8002a15 	stw	zero,168(sp)
 800fd8c:	d8003215 	stw	zero,200(sp)
 800fd90:	dc001404 	addi	r16,sp,80
 800fd94:	0039883a 	mov	fp,zero
 800fd98:	003ec406 	br	800f8ac <__alt_data_end+0xfc00f8ac>
 800fd9c:	8025883a 	mov	r18,r16
 800fda0:	dc002903 	ldbu	r16,164(sp)
 800fda4:	e011883a 	mov	r8,fp
 800fda8:	84003fcc 	andi	r16,r16,255
 800fdac:	803e8726 	beq	r16,zero,800f7cc <__alt_data_end+0xfc00f7cc>
 800fdb0:	d8c02b03 	ldbu	r3,172(sp)
 800fdb4:	d8c02785 	stb	r3,158(sp)
 800fdb8:	003e8406 	br	800f7cc <__alt_data_end+0xfc00f7cc>
 800fdbc:	00c00044 	movi	r3,1
 800fdc0:	d8c02905 	stb	r3,164(sp)
 800fdc4:	00c00ac4 	movi	r3,43
 800fdc8:	d8c02b05 	stb	r3,172(sp)
 800fdcc:	bc400007 	ldb	r17,0(r23)
 800fdd0:	003d4606 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 800fdd4:	84000814 	ori	r16,r16,32
 800fdd8:	bc400007 	ldb	r17,0(r23)
 800fddc:	003d4306 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 800fde0:	d8802e17 	ldw	r2,184(sp)
 800fde4:	8025883a 	mov	r18,r16
 800fde8:	d8002785 	stb	zero,158(sp)
 800fdec:	14000017 	ldw	r16,0(r2)
 800fdf0:	e011883a 	mov	r8,fp
 800fdf4:	15000104 	addi	r20,r2,4
 800fdf8:	80042126 	beq	r16,zero,8010e80 <___svfprintf_internal_r+0x1ce8>
 800fdfc:	d8c02a17 	ldw	r3,168(sp)
 800fe00:	1803ee16 	blt	r3,zero,8010dbc <___svfprintf_internal_r+0x1c24>
 800fe04:	180d883a 	mov	r6,r3
 800fe08:	000b883a 	mov	r5,zero
 800fe0c:	8009883a 	mov	r4,r16
 800fe10:	df003e15 	stw	fp,248(sp)
 800fe14:	800b21c0 	call	800b21c <memchr>
 800fe18:	da003e17 	ldw	r8,248(sp)
 800fe1c:	10046a26 	beq	r2,zero,8010fc8 <___svfprintf_internal_r+0x1e30>
 800fe20:	1405c83a 	sub	r2,r2,r16
 800fe24:	d8802b15 	stw	r2,172(sp)
 800fe28:	1003ea16 	blt	r2,zero,8010dd4 <___svfprintf_internal_r+0x1c3c>
 800fe2c:	df002783 	ldbu	fp,158(sp)
 800fe30:	d8802915 	stw	r2,164(sp)
 800fe34:	dd002e15 	stw	r20,184(sp)
 800fe38:	d8002a15 	stw	zero,168(sp)
 800fe3c:	d8003215 	stw	zero,200(sp)
 800fe40:	003e9306 	br	800f890 <__alt_data_end+0xfc00f890>
 800fe44:	8025883a 	mov	r18,r16
 800fe48:	dc002903 	ldbu	r16,164(sp)
 800fe4c:	e011883a 	mov	r8,fp
 800fe50:	84003fcc 	andi	r16,r16,255
 800fe54:	803f7c26 	beq	r16,zero,800fc48 <__alt_data_end+0xfc00fc48>
 800fe58:	d8c02b03 	ldbu	r3,172(sp)
 800fe5c:	d8c02785 	stb	r3,158(sp)
 800fe60:	003f7906 	br	800fc48 <__alt_data_end+0xfc00fc48>
 800fe64:	8025883a 	mov	r18,r16
 800fe68:	dc002903 	ldbu	r16,164(sp)
 800fe6c:	e011883a 	mov	r8,fp
 800fe70:	84003fcc 	andi	r16,r16,255
 800fe74:	8005741e 	bne	r16,zero,8011448 <___svfprintf_internal_r+0x22b0>
 800fe78:	010200b4 	movhi	r4,2050
 800fe7c:	212ef304 	addi	r4,r4,-17460
 800fe80:	d9003a15 	stw	r4,232(sp)
 800fe84:	9080080c 	andi	r2,r18,32
 800fe88:	103f8e1e 	bne	r2,zero,800fcc4 <__alt_data_end+0xfc00fcc4>
 800fe8c:	9080040c 	andi	r2,r18,16
 800fe90:	1002a726 	beq	r2,zero,8010930 <___svfprintf_internal_r+0x1798>
 800fe94:	d8802e17 	ldw	r2,184(sp)
 800fe98:	002d883a 	mov	r22,zero
 800fe9c:	15000017 	ldw	r20,0(r2)
 800fea0:	10800104 	addi	r2,r2,4
 800fea4:	d8802e15 	stw	r2,184(sp)
 800fea8:	003f8b06 	br	800fcd8 <__alt_data_end+0xfc00fcd8>
 800feac:	84000054 	ori	r16,r16,1
 800feb0:	bc400007 	ldb	r17,0(r23)
 800feb4:	003d0d06 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 800feb8:	d8802b07 	ldb	r2,172(sp)
 800febc:	1002a41e 	bne	r2,zero,8010950 <___svfprintf_internal_r+0x17b8>
 800fec0:	00c00044 	movi	r3,1
 800fec4:	d8c02905 	stb	r3,164(sp)
 800fec8:	00c00804 	movi	r3,32
 800fecc:	d8c02b05 	stb	r3,172(sp)
 800fed0:	bc400007 	ldb	r17,0(r23)
 800fed4:	003d0506 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 800fed8:	8025883a 	mov	r18,r16
 800fedc:	dc002903 	ldbu	r16,164(sp)
 800fee0:	e011883a 	mov	r8,fp
 800fee4:	84003fcc 	andi	r16,r16,255
 800fee8:	803e0626 	beq	r16,zero,800f704 <__alt_data_end+0xfc00f704>
 800feec:	d8c02b03 	ldbu	r3,172(sp)
 800fef0:	d8c02785 	stb	r3,158(sp)
 800fef4:	003e0306 	br	800f704 <__alt_data_end+0xfc00f704>
 800fef8:	bc400007 	ldb	r17,0(r23)
 800fefc:	00801b04 	movi	r2,108
 800ff00:	88830a26 	beq	r17,r2,8010b2c <___svfprintf_internal_r+0x1994>
 800ff04:	84000414 	ori	r16,r16,16
 800ff08:	003cf806 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 800ff0c:	8025883a 	mov	r18,r16
 800ff10:	dc002903 	ldbu	r16,164(sp)
 800ff14:	e011883a 	mov	r8,fp
 800ff18:	84003fcc 	andi	r16,r16,255
 800ff1c:	8005471e 	bne	r16,zero,801143c <___svfprintf_internal_r+0x22a4>
 800ff20:	9080080c 	andi	r2,r18,32
 800ff24:	10028c26 	beq	r2,zero,8010958 <___svfprintf_internal_r+0x17c0>
 800ff28:	d9002e17 	ldw	r4,184(sp)
 800ff2c:	d9402f17 	ldw	r5,188(sp)
 800ff30:	20800017 	ldw	r2,0(r4)
 800ff34:	2807d7fa 	srai	r3,r5,31
 800ff38:	21000104 	addi	r4,r4,4
 800ff3c:	d9002e15 	stw	r4,184(sp)
 800ff40:	11400015 	stw	r5,0(r2)
 800ff44:	10c00115 	stw	r3,4(r2)
 800ff48:	003cbe06 	br	800f244 <__alt_data_end+0xfc00f244>
 800ff4c:	84001014 	ori	r16,r16,64
 800ff50:	bc400007 	ldb	r17,0(r23)
 800ff54:	003ce506 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 800ff58:	010200b4 	movhi	r4,2050
 800ff5c:	212ef304 	addi	r4,r4,-17460
 800ff60:	0039883a 	mov	fp,zero
 800ff64:	d9003a15 	stw	r4,232(sp)
 800ff68:	04401e04 	movi	r17,120
 800ff6c:	003f6906 	br	800fd14 <__alt_data_end+0xfc00fd14>
 800ff70:	8025883a 	mov	r18,r16
 800ff74:	dc002903 	ldbu	r16,164(sp)
 800ff78:	e011883a 	mov	r8,fp
 800ff7c:	84003fcc 	andi	r16,r16,255
 800ff80:	8005261e 	bne	r16,zero,801141c <___svfprintf_internal_r+0x2284>
 800ff84:	883d6526 	beq	r17,zero,800f51c <__alt_data_end+0xfc00f51c>
 800ff88:	00c00044 	movi	r3,1
 800ff8c:	d8c02915 	stw	r3,164(sp)
 800ff90:	dc401405 	stb	r17,80(sp)
 800ff94:	d8002785 	stb	zero,158(sp)
 800ff98:	003f7a06 	br	800fd84 <__alt_data_end+0xfc00fd84>
 800ff9c:	010200b4 	movhi	r4,2050
 800ffa0:	212ef304 	addi	r4,r4,-17460
 800ffa4:	d9003a15 	stw	r4,232(sp)
 800ffa8:	d8c02e15 	stw	r3,184(sp)
 800ffac:	1025883a 	mov	r18,r2
 800ffb0:	04401e04 	movi	r17,120
 800ffb4:	a584b03a 	or	r2,r20,r22
 800ffb8:	1000fa1e 	bne	r2,zero,80103a4 <___svfprintf_internal_r+0x120c>
 800ffbc:	0039883a 	mov	fp,zero
 800ffc0:	00800084 	movi	r2,2
 800ffc4:	10803fcc 	andi	r2,r2,255
 800ffc8:	00c00044 	movi	r3,1
 800ffcc:	10c21626 	beq	r2,r3,8010828 <___svfprintf_internal_r+0x1690>
 800ffd0:	00c00084 	movi	r3,2
 800ffd4:	10fe0e1e 	bne	r2,r3,800f810 <__alt_data_end+0xfc00f810>
 800ffd8:	003d4606 	br	800f4f4 <__alt_data_end+0xfc00f4f4>
 800ffdc:	d8c02017 	ldw	r3,128(sp)
 800ffe0:	003e7306 	br	800f9b0 <__alt_data_end+0xfc00f9b0>
 800ffe4:	00801944 	movi	r2,101
 800ffe8:	14407c0e 	bge	r2,r17,80101dc <___svfprintf_internal_r+0x1044>
 800ffec:	d9003617 	ldw	r4,216(sp)
 800fff0:	d9403717 	ldw	r5,220(sp)
 800fff4:	000d883a 	mov	r6,zero
 800fff8:	000f883a 	mov	r7,zero
 800fffc:	d8c03d15 	stw	r3,244(sp)
 8010000:	da003e15 	stw	r8,248(sp)
 8010004:	80177940 	call	8017794 <__eqdf2>
 8010008:	d8c03d17 	ldw	r3,244(sp)
 801000c:	da003e17 	ldw	r8,248(sp)
 8010010:	1000f51e 	bne	r2,zero,80103e8 <___svfprintf_internal_r+0x1250>
 8010014:	d8801f17 	ldw	r2,124(sp)
 8010018:	010200b4 	movhi	r4,2050
 801001c:	212efa04 	addi	r4,r4,-17432
 8010020:	18c00044 	addi	r3,r3,1
 8010024:	10800044 	addi	r2,r2,1
 8010028:	41000015 	stw	r4,0(r8)
 801002c:	01000044 	movi	r4,1
 8010030:	41000115 	stw	r4,4(r8)
 8010034:	d8c02015 	stw	r3,128(sp)
 8010038:	d8801f15 	stw	r2,124(sp)
 801003c:	010001c4 	movi	r4,7
 8010040:	20826616 	blt	r4,r2,80109dc <___svfprintf_internal_r+0x1844>
 8010044:	42000204 	addi	r8,r8,8
 8010048:	d8802617 	ldw	r2,152(sp)
 801004c:	d9403317 	ldw	r5,204(sp)
 8010050:	11400216 	blt	r2,r5,801005c <___svfprintf_internal_r+0xec4>
 8010054:	9080004c 	andi	r2,r18,1
 8010058:	103eb326 	beq	r2,zero,800fb28 <__alt_data_end+0xfc00fb28>
 801005c:	d8803817 	ldw	r2,224(sp)
 8010060:	d9003417 	ldw	r4,208(sp)
 8010064:	d9403817 	ldw	r5,224(sp)
 8010068:	1887883a 	add	r3,r3,r2
 801006c:	d8801f17 	ldw	r2,124(sp)
 8010070:	41000015 	stw	r4,0(r8)
 8010074:	41400115 	stw	r5,4(r8)
 8010078:	10800044 	addi	r2,r2,1
 801007c:	d8c02015 	stw	r3,128(sp)
 8010080:	d8801f15 	stw	r2,124(sp)
 8010084:	010001c4 	movi	r4,7
 8010088:	2082af16 	blt	r4,r2,8010b48 <___svfprintf_internal_r+0x19b0>
 801008c:	42000204 	addi	r8,r8,8
 8010090:	d8803317 	ldw	r2,204(sp)
 8010094:	143fffc4 	addi	r16,r2,-1
 8010098:	043ea30e 	bge	zero,r16,800fb28 <__alt_data_end+0xfc00fb28>
 801009c:	04400404 	movi	r17,16
 80100a0:	d8801f17 	ldw	r2,124(sp)
 80100a4:	8c00860e 	bge	r17,r16,80102c0 <___svfprintf_internal_r+0x1128>
 80100a8:	014200b4 	movhi	r5,2050
 80100ac:	29701604 	addi	r5,r5,-16296
 80100b0:	d9402c15 	stw	r5,176(sp)
 80100b4:	058001c4 	movi	r22,7
 80100b8:	dd002d17 	ldw	r20,180(sp)
 80100bc:	00000306 	br	80100cc <___svfprintf_internal_r+0xf34>
 80100c0:	42000204 	addi	r8,r8,8
 80100c4:	843ffc04 	addi	r16,r16,-16
 80100c8:	8c00800e 	bge	r17,r16,80102cc <___svfprintf_internal_r+0x1134>
 80100cc:	18c00404 	addi	r3,r3,16
 80100d0:	10800044 	addi	r2,r2,1
 80100d4:	45400015 	stw	r21,0(r8)
 80100d8:	44400115 	stw	r17,4(r8)
 80100dc:	d8c02015 	stw	r3,128(sp)
 80100e0:	d8801f15 	stw	r2,124(sp)
 80100e4:	b0bff60e 	bge	r22,r2,80100c0 <__alt_data_end+0xfc0100c0>
 80100e8:	d9801e04 	addi	r6,sp,120
 80100ec:	a00b883a 	mov	r5,r20
 80100f0:	9809883a 	mov	r4,r19
 80100f4:	8013d2c0 	call	8013d2c <__ssprint_r>
 80100f8:	103d0e1e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 80100fc:	d8c02017 	ldw	r3,128(sp)
 8010100:	d8801f17 	ldw	r2,124(sp)
 8010104:	da000404 	addi	r8,sp,16
 8010108:	003fee06 	br	80100c4 <__alt_data_end+0xfc0100c4>
 801010c:	d9403117 	ldw	r5,196(sp)
 8010110:	d8802917 	ldw	r2,164(sp)
 8010114:	28adc83a 	sub	r22,r5,r2
 8010118:	05be430e 	bge	zero,r22,800fa28 <__alt_data_end+0xfc00fa28>
 801011c:	07000404 	movi	fp,16
 8010120:	d8801f17 	ldw	r2,124(sp)
 8010124:	e583a20e 	bge	fp,r22,8010fb0 <___svfprintf_internal_r+0x1e18>
 8010128:	014200b4 	movhi	r5,2050
 801012c:	29701604 	addi	r5,r5,-16296
 8010130:	dc403015 	stw	r17,192(sp)
 8010134:	d9402c15 	stw	r5,176(sp)
 8010138:	b023883a 	mov	r17,r22
 801013c:	050001c4 	movi	r20,7
 8010140:	902d883a 	mov	r22,r18
 8010144:	8025883a 	mov	r18,r16
 8010148:	dc002d17 	ldw	r16,180(sp)
 801014c:	00000306 	br	801015c <___svfprintf_internal_r+0xfc4>
 8010150:	8c7ffc04 	addi	r17,r17,-16
 8010154:	42000204 	addi	r8,r8,8
 8010158:	e440110e 	bge	fp,r17,80101a0 <___svfprintf_internal_r+0x1008>
 801015c:	18c00404 	addi	r3,r3,16
 8010160:	10800044 	addi	r2,r2,1
 8010164:	45400015 	stw	r21,0(r8)
 8010168:	47000115 	stw	fp,4(r8)
 801016c:	d8c02015 	stw	r3,128(sp)
 8010170:	d8801f15 	stw	r2,124(sp)
 8010174:	a0bff60e 	bge	r20,r2,8010150 <__alt_data_end+0xfc010150>
 8010178:	d9801e04 	addi	r6,sp,120
 801017c:	800b883a 	mov	r5,r16
 8010180:	9809883a 	mov	r4,r19
 8010184:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010188:	103cea1e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 801018c:	8c7ffc04 	addi	r17,r17,-16
 8010190:	d8c02017 	ldw	r3,128(sp)
 8010194:	d8801f17 	ldw	r2,124(sp)
 8010198:	da000404 	addi	r8,sp,16
 801019c:	e47fef16 	blt	fp,r17,801015c <__alt_data_end+0xfc01015c>
 80101a0:	9021883a 	mov	r16,r18
 80101a4:	b025883a 	mov	r18,r22
 80101a8:	882d883a 	mov	r22,r17
 80101ac:	dc403017 	ldw	r17,192(sp)
 80101b0:	d9002c17 	ldw	r4,176(sp)
 80101b4:	1d87883a 	add	r3,r3,r22
 80101b8:	10800044 	addi	r2,r2,1
 80101bc:	41000015 	stw	r4,0(r8)
 80101c0:	45800115 	stw	r22,4(r8)
 80101c4:	d8c02015 	stw	r3,128(sp)
 80101c8:	d8801f15 	stw	r2,124(sp)
 80101cc:	010001c4 	movi	r4,7
 80101d0:	20819a16 	blt	r4,r2,801083c <___svfprintf_internal_r+0x16a4>
 80101d4:	42000204 	addi	r8,r8,8
 80101d8:	003e1306 	br	800fa28 <__alt_data_end+0xfc00fa28>
 80101dc:	d9403317 	ldw	r5,204(sp)
 80101e0:	00800044 	movi	r2,1
 80101e4:	18c00044 	addi	r3,r3,1
 80101e8:	1141710e 	bge	r2,r5,80107b0 <___svfprintf_internal_r+0x1618>
 80101ec:	dc401f17 	ldw	r17,124(sp)
 80101f0:	00800044 	movi	r2,1
 80101f4:	40800115 	stw	r2,4(r8)
 80101f8:	8c400044 	addi	r17,r17,1
 80101fc:	44000015 	stw	r16,0(r8)
 8010200:	d8c02015 	stw	r3,128(sp)
 8010204:	dc401f15 	stw	r17,124(sp)
 8010208:	008001c4 	movi	r2,7
 801020c:	14417416 	blt	r2,r17,80107e0 <___svfprintf_internal_r+0x1648>
 8010210:	42000204 	addi	r8,r8,8
 8010214:	d8803817 	ldw	r2,224(sp)
 8010218:	d9003417 	ldw	r4,208(sp)
 801021c:	8c400044 	addi	r17,r17,1
 8010220:	10c7883a 	add	r3,r2,r3
 8010224:	40800115 	stw	r2,4(r8)
 8010228:	41000015 	stw	r4,0(r8)
 801022c:	d8c02015 	stw	r3,128(sp)
 8010230:	dc401f15 	stw	r17,124(sp)
 8010234:	008001c4 	movi	r2,7
 8010238:	14417216 	blt	r2,r17,8010804 <___svfprintf_internal_r+0x166c>
 801023c:	45800204 	addi	r22,r8,8
 8010240:	d9003617 	ldw	r4,216(sp)
 8010244:	d9403717 	ldw	r5,220(sp)
 8010248:	000d883a 	mov	r6,zero
 801024c:	000f883a 	mov	r7,zero
 8010250:	d8c03d15 	stw	r3,244(sp)
 8010254:	80177940 	call	8017794 <__eqdf2>
 8010258:	d8c03d17 	ldw	r3,244(sp)
 801025c:	1000b326 	beq	r2,zero,801052c <___svfprintf_internal_r+0x1394>
 8010260:	d9403317 	ldw	r5,204(sp)
 8010264:	84000044 	addi	r16,r16,1
 8010268:	8c400044 	addi	r17,r17,1
 801026c:	28bfffc4 	addi	r2,r5,-1
 8010270:	1887883a 	add	r3,r3,r2
 8010274:	b0800115 	stw	r2,4(r22)
 8010278:	b4000015 	stw	r16,0(r22)
 801027c:	d8c02015 	stw	r3,128(sp)
 8010280:	dc401f15 	stw	r17,124(sp)
 8010284:	008001c4 	movi	r2,7
 8010288:	1440d216 	blt	r2,r17,80105d4 <___svfprintf_internal_r+0x143c>
 801028c:	b5800204 	addi	r22,r22,8
 8010290:	d9003b17 	ldw	r4,236(sp)
 8010294:	df0022c4 	addi	fp,sp,139
 8010298:	8c400044 	addi	r17,r17,1
 801029c:	20c7883a 	add	r3,r4,r3
 80102a0:	b7000015 	stw	fp,0(r22)
 80102a4:	b1000115 	stw	r4,4(r22)
 80102a8:	d8c02015 	stw	r3,128(sp)
 80102ac:	dc401f15 	stw	r17,124(sp)
 80102b0:	008001c4 	movi	r2,7
 80102b4:	14400e16 	blt	r2,r17,80102f0 <___svfprintf_internal_r+0x1158>
 80102b8:	b2000204 	addi	r8,r22,8
 80102bc:	003e1a06 	br	800fb28 <__alt_data_end+0xfc00fb28>
 80102c0:	010200b4 	movhi	r4,2050
 80102c4:	21301604 	addi	r4,r4,-16296
 80102c8:	d9002c15 	stw	r4,176(sp)
 80102cc:	d9002c17 	ldw	r4,176(sp)
 80102d0:	1c07883a 	add	r3,r3,r16
 80102d4:	44000115 	stw	r16,4(r8)
 80102d8:	41000015 	stw	r4,0(r8)
 80102dc:	10800044 	addi	r2,r2,1
 80102e0:	d8c02015 	stw	r3,128(sp)
 80102e4:	d8801f15 	stw	r2,124(sp)
 80102e8:	010001c4 	movi	r4,7
 80102ec:	20be0d0e 	bge	r4,r2,800fb24 <__alt_data_end+0xfc00fb24>
 80102f0:	d9402d17 	ldw	r5,180(sp)
 80102f4:	d9801e04 	addi	r6,sp,120
 80102f8:	9809883a 	mov	r4,r19
 80102fc:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010300:	103c8c1e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 8010304:	d8c02017 	ldw	r3,128(sp)
 8010308:	da000404 	addi	r8,sp,16
 801030c:	003e0606 	br	800fb28 <__alt_data_end+0xfc00fb28>
 8010310:	d9402d17 	ldw	r5,180(sp)
 8010314:	d9801e04 	addi	r6,sp,120
 8010318:	9809883a 	mov	r4,r19
 801031c:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010320:	103e3d26 	beq	r2,zero,800fc18 <__alt_data_end+0xfc00fc18>
 8010324:	003c8306 	br	800f534 <__alt_data_end+0xfc00f534>
 8010328:	d9402d17 	ldw	r5,180(sp)
 801032c:	d9801e04 	addi	r6,sp,120
 8010330:	9809883a 	mov	r4,r19
 8010334:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010338:	103c7e1e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 801033c:	d8c02017 	ldw	r3,128(sp)
 8010340:	da000404 	addi	r8,sp,16
 8010344:	003deb06 	br	800faf4 <__alt_data_end+0xfc00faf4>
 8010348:	d9402d17 	ldw	r5,180(sp)
 801034c:	d9801e04 	addi	r6,sp,120
 8010350:	9809883a 	mov	r4,r19
 8010354:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010358:	103c761e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 801035c:	d8c02017 	ldw	r3,128(sp)
 8010360:	da000404 	addi	r8,sp,16
 8010364:	003d9f06 	br	800f9e4 <__alt_data_end+0xfc00f9e4>
 8010368:	d9402d17 	ldw	r5,180(sp)
 801036c:	d9801e04 	addi	r6,sp,120
 8010370:	9809883a 	mov	r4,r19
 8010374:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010378:	103c6e1e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 801037c:	d8c02017 	ldw	r3,128(sp)
 8010380:	da000404 	addi	r8,sp,16
 8010384:	003da506 	br	800fa1c <__alt_data_end+0xfc00fa1c>
 8010388:	d9402a17 	ldw	r5,168(sp)
 801038c:	d8002785 	stb	zero,158(sp)
 8010390:	283f0816 	blt	r5,zero,800ffb4 <__alt_data_end+0xfc00ffb4>
 8010394:	00ffdfc4 	movi	r3,-129
 8010398:	a584b03a 	or	r2,r20,r22
 801039c:	90e4703a 	and	r18,r18,r3
 80103a0:	103c5126 	beq	r2,zero,800f4e8 <__alt_data_end+0xfc00f4e8>
 80103a4:	0039883a 	mov	fp,zero
 80103a8:	003e5a06 	br	800fd14 <__alt_data_end+0xfc00fd14>
 80103ac:	9080040c 	andi	r2,r18,16
 80103b0:	10013d26 	beq	r2,zero,80108a8 <___svfprintf_internal_r+0x1710>
 80103b4:	d8c02e17 	ldw	r3,184(sp)
 80103b8:	d9002a17 	ldw	r4,168(sp)
 80103bc:	d8002785 	stb	zero,158(sp)
 80103c0:	18800104 	addi	r2,r3,4
 80103c4:	1d000017 	ldw	r20,0(r3)
 80103c8:	002d883a 	mov	r22,zero
 80103cc:	20013f16 	blt	r4,zero,80108cc <___svfprintf_internal_r+0x1734>
 80103d0:	00ffdfc4 	movi	r3,-129
 80103d4:	d8802e15 	stw	r2,184(sp)
 80103d8:	90e4703a 	and	r18,r18,r3
 80103dc:	a03d0926 	beq	r20,zero,800f804 <__alt_data_end+0xfc00f804>
 80103e0:	0039883a 	mov	fp,zero
 80103e4:	003d0c06 	br	800f818 <__alt_data_end+0xfc00f818>
 80103e8:	dc402617 	ldw	r17,152(sp)
 80103ec:	0441830e 	bge	zero,r17,80109fc <___svfprintf_internal_r+0x1864>
 80103f0:	dc403217 	ldw	r17,200(sp)
 80103f4:	d8803317 	ldw	r2,204(sp)
 80103f8:	1440010e 	bge	r2,r17,8010400 <___svfprintf_internal_r+0x1268>
 80103fc:	1023883a 	mov	r17,r2
 8010400:	04400a0e 	bge	zero,r17,801042c <___svfprintf_internal_r+0x1294>
 8010404:	d8801f17 	ldw	r2,124(sp)
 8010408:	1c47883a 	add	r3,r3,r17
 801040c:	44000015 	stw	r16,0(r8)
 8010410:	10800044 	addi	r2,r2,1
 8010414:	44400115 	stw	r17,4(r8)
 8010418:	d8c02015 	stw	r3,128(sp)
 801041c:	d8801f15 	stw	r2,124(sp)
 8010420:	010001c4 	movi	r4,7
 8010424:	20827516 	blt	r4,r2,8010dfc <___svfprintf_internal_r+0x1c64>
 8010428:	42000204 	addi	r8,r8,8
 801042c:	88027b16 	blt	r17,zero,8010e1c <___svfprintf_internal_r+0x1c84>
 8010430:	d9003217 	ldw	r4,200(sp)
 8010434:	2463c83a 	sub	r17,r4,r17
 8010438:	0440990e 	bge	zero,r17,80106a0 <___svfprintf_internal_r+0x1508>
 801043c:	05800404 	movi	r22,16
 8010440:	d8801f17 	ldw	r2,124(sp)
 8010444:	b441530e 	bge	r22,r17,8010994 <___svfprintf_internal_r+0x17fc>
 8010448:	010200b4 	movhi	r4,2050
 801044c:	21301604 	addi	r4,r4,-16296
 8010450:	d9002c15 	stw	r4,176(sp)
 8010454:	070001c4 	movi	fp,7
 8010458:	dd002d17 	ldw	r20,180(sp)
 801045c:	00000306 	br	801046c <___svfprintf_internal_r+0x12d4>
 8010460:	42000204 	addi	r8,r8,8
 8010464:	8c7ffc04 	addi	r17,r17,-16
 8010468:	b4414d0e 	bge	r22,r17,80109a0 <___svfprintf_internal_r+0x1808>
 801046c:	18c00404 	addi	r3,r3,16
 8010470:	10800044 	addi	r2,r2,1
 8010474:	45400015 	stw	r21,0(r8)
 8010478:	45800115 	stw	r22,4(r8)
 801047c:	d8c02015 	stw	r3,128(sp)
 8010480:	d8801f15 	stw	r2,124(sp)
 8010484:	e0bff60e 	bge	fp,r2,8010460 <__alt_data_end+0xfc010460>
 8010488:	d9801e04 	addi	r6,sp,120
 801048c:	a00b883a 	mov	r5,r20
 8010490:	9809883a 	mov	r4,r19
 8010494:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010498:	103c261e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 801049c:	d8c02017 	ldw	r3,128(sp)
 80104a0:	d8801f17 	ldw	r2,124(sp)
 80104a4:	da000404 	addi	r8,sp,16
 80104a8:	003fee06 	br	8010464 <__alt_data_end+0xfc010464>
 80104ac:	d9402d17 	ldw	r5,180(sp)
 80104b0:	d9801e04 	addi	r6,sp,120
 80104b4:	9809883a 	mov	r4,r19
 80104b8:	8013d2c0 	call	8013d2c <__ssprint_r>
 80104bc:	103c1d1e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 80104c0:	d8c02017 	ldw	r3,128(sp)
 80104c4:	df002787 	ldb	fp,158(sp)
 80104c8:	da000404 	addi	r8,sp,16
 80104cc:	003d3806 	br	800f9b0 <__alt_data_end+0xfc00f9b0>
 80104d0:	9080040c 	andi	r2,r18,16
 80104d4:	10005c26 	beq	r2,zero,8010648 <___svfprintf_internal_r+0x14b0>
 80104d8:	d8c02e17 	ldw	r3,184(sp)
 80104dc:	d9002a17 	ldw	r4,168(sp)
 80104e0:	d8002785 	stb	zero,158(sp)
 80104e4:	18800104 	addi	r2,r3,4
 80104e8:	1d000017 	ldw	r20,0(r3)
 80104ec:	002d883a 	mov	r22,zero
 80104f0:	20005e16 	blt	r4,zero,801066c <___svfprintf_internal_r+0x14d4>
 80104f4:	00ffdfc4 	movi	r3,-129
 80104f8:	d8802e15 	stw	r2,184(sp)
 80104fc:	90e4703a 	and	r18,r18,r3
 8010500:	0039883a 	mov	fp,zero
 8010504:	a03ddf26 	beq	r20,zero,800fc84 <__alt_data_end+0xfc00fc84>
 8010508:	00800244 	movi	r2,9
 801050c:	153c8e36 	bltu	r2,r20,800f748 <__alt_data_end+0xfc00f748>
 8010510:	a5000c04 	addi	r20,r20,48
 8010514:	dc001dc4 	addi	r16,sp,119
 8010518:	dd001dc5 	stb	r20,119(sp)
 801051c:	d8c02817 	ldw	r3,160(sp)
 8010520:	1c07c83a 	sub	r3,r3,r16
 8010524:	d8c02b15 	stw	r3,172(sp)
 8010528:	003cd306 	br	800f878 <__alt_data_end+0xfc00f878>
 801052c:	d8803317 	ldw	r2,204(sp)
 8010530:	143fffc4 	addi	r16,r2,-1
 8010534:	043f560e 	bge	zero,r16,8010290 <__alt_data_end+0xfc010290>
 8010538:	07000404 	movi	fp,16
 801053c:	e403530e 	bge	fp,r16,801128c <___svfprintf_internal_r+0x20f4>
 8010540:	014200b4 	movhi	r5,2050
 8010544:	29701604 	addi	r5,r5,-16296
 8010548:	d9402c15 	stw	r5,176(sp)
 801054c:	01c001c4 	movi	r7,7
 8010550:	dd002d17 	ldw	r20,180(sp)
 8010554:	00000306 	br	8010564 <___svfprintf_internal_r+0x13cc>
 8010558:	843ffc04 	addi	r16,r16,-16
 801055c:	b5800204 	addi	r22,r22,8
 8010560:	e400130e 	bge	fp,r16,80105b0 <___svfprintf_internal_r+0x1418>
 8010564:	18c00404 	addi	r3,r3,16
 8010568:	8c400044 	addi	r17,r17,1
 801056c:	b5400015 	stw	r21,0(r22)
 8010570:	b7000115 	stw	fp,4(r22)
 8010574:	d8c02015 	stw	r3,128(sp)
 8010578:	dc401f15 	stw	r17,124(sp)
 801057c:	3c7ff60e 	bge	r7,r17,8010558 <__alt_data_end+0xfc010558>
 8010580:	d9801e04 	addi	r6,sp,120
 8010584:	a00b883a 	mov	r5,r20
 8010588:	9809883a 	mov	r4,r19
 801058c:	d9c03d15 	stw	r7,244(sp)
 8010590:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010594:	d9c03d17 	ldw	r7,244(sp)
 8010598:	103be61e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 801059c:	843ffc04 	addi	r16,r16,-16
 80105a0:	d8c02017 	ldw	r3,128(sp)
 80105a4:	dc401f17 	ldw	r17,124(sp)
 80105a8:	dd800404 	addi	r22,sp,16
 80105ac:	e43fed16 	blt	fp,r16,8010564 <__alt_data_end+0xfc010564>
 80105b0:	d8802c17 	ldw	r2,176(sp)
 80105b4:	1c07883a 	add	r3,r3,r16
 80105b8:	8c400044 	addi	r17,r17,1
 80105bc:	b0800015 	stw	r2,0(r22)
 80105c0:	b4000115 	stw	r16,4(r22)
 80105c4:	d8c02015 	stw	r3,128(sp)
 80105c8:	dc401f15 	stw	r17,124(sp)
 80105cc:	008001c4 	movi	r2,7
 80105d0:	147f2e0e 	bge	r2,r17,801028c <__alt_data_end+0xfc01028c>
 80105d4:	d9402d17 	ldw	r5,180(sp)
 80105d8:	d9801e04 	addi	r6,sp,120
 80105dc:	9809883a 	mov	r4,r19
 80105e0:	8013d2c0 	call	8013d2c <__ssprint_r>
 80105e4:	103bd31e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 80105e8:	d8c02017 	ldw	r3,128(sp)
 80105ec:	dc401f17 	ldw	r17,124(sp)
 80105f0:	dd800404 	addi	r22,sp,16
 80105f4:	003f2606 	br	8010290 <__alt_data_end+0xfc010290>
 80105f8:	9080040c 	andi	r2,r18,16
 80105fc:	1000c326 	beq	r2,zero,801090c <___svfprintf_internal_r+0x1774>
 8010600:	d9402e17 	ldw	r5,184(sp)
 8010604:	2d000017 	ldw	r20,0(r5)
 8010608:	29400104 	addi	r5,r5,4
 801060c:	d9402e15 	stw	r5,184(sp)
 8010610:	a02dd7fa 	srai	r22,r20,31
 8010614:	b005883a 	mov	r2,r22
 8010618:	103c430e 	bge	r2,zero,800f728 <__alt_data_end+0xfc00f728>
 801061c:	d9402a17 	ldw	r5,168(sp)
 8010620:	0529c83a 	sub	r20,zero,r20
 8010624:	07000b44 	movi	fp,45
 8010628:	a004c03a 	cmpne	r2,r20,zero
 801062c:	05adc83a 	sub	r22,zero,r22
 8010630:	df002785 	stb	fp,158(sp)
 8010634:	b0adc83a 	sub	r22,r22,r2
 8010638:	28022e16 	blt	r5,zero,8010ef4 <___svfprintf_internal_r+0x1d5c>
 801063c:	00bfdfc4 	movi	r2,-129
 8010640:	90a4703a 	and	r18,r18,r2
 8010644:	003c3f06 	br	800f744 <__alt_data_end+0xfc00f744>
 8010648:	9080100c 	andi	r2,r18,64
 801064c:	d8002785 	stb	zero,158(sp)
 8010650:	10012526 	beq	r2,zero,8010ae8 <___svfprintf_internal_r+0x1950>
 8010654:	d9402e17 	ldw	r5,184(sp)
 8010658:	d8c02a17 	ldw	r3,168(sp)
 801065c:	002d883a 	mov	r22,zero
 8010660:	28800104 	addi	r2,r5,4
 8010664:	2d00000b 	ldhu	r20,0(r5)
 8010668:	183fa20e 	bge	r3,zero,80104f4 <__alt_data_end+0xfc0104f4>
 801066c:	d8802e15 	stw	r2,184(sp)
 8010670:	0039883a 	mov	fp,zero
 8010674:	a584b03a 	or	r2,r20,r22
 8010678:	103c321e 	bne	r2,zero,800f744 <__alt_data_end+0xfc00f744>
 801067c:	00800044 	movi	r2,1
 8010680:	003e5006 	br	800ffc4 <__alt_data_end+0xfc00ffc4>
 8010684:	d9402d17 	ldw	r5,180(sp)
 8010688:	d9801e04 	addi	r6,sp,120
 801068c:	9809883a 	mov	r4,r19
 8010690:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010694:	103ba71e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 8010698:	d8c02017 	ldw	r3,128(sp)
 801069c:	da000404 	addi	r8,sp,16
 80106a0:	d9003217 	ldw	r4,200(sp)
 80106a4:	d8802617 	ldw	r2,152(sp)
 80106a8:	d9403317 	ldw	r5,204(sp)
 80106ac:	8123883a 	add	r17,r16,r4
 80106b0:	11400216 	blt	r2,r5,80106bc <___svfprintf_internal_r+0x1524>
 80106b4:	9100004c 	andi	r4,r18,1
 80106b8:	20000d26 	beq	r4,zero,80106f0 <___svfprintf_internal_r+0x1558>
 80106bc:	d9003817 	ldw	r4,224(sp)
 80106c0:	d9403417 	ldw	r5,208(sp)
 80106c4:	1907883a 	add	r3,r3,r4
 80106c8:	d9001f17 	ldw	r4,124(sp)
 80106cc:	41400015 	stw	r5,0(r8)
 80106d0:	d9403817 	ldw	r5,224(sp)
 80106d4:	21000044 	addi	r4,r4,1
 80106d8:	d8c02015 	stw	r3,128(sp)
 80106dc:	41400115 	stw	r5,4(r8)
 80106e0:	d9001f15 	stw	r4,124(sp)
 80106e4:	014001c4 	movi	r5,7
 80106e8:	2901dc16 	blt	r5,r4,8010e5c <___svfprintf_internal_r+0x1cc4>
 80106ec:	42000204 	addi	r8,r8,8
 80106f0:	d9003317 	ldw	r4,204(sp)
 80106f4:	8121883a 	add	r16,r16,r4
 80106f8:	2085c83a 	sub	r2,r4,r2
 80106fc:	8461c83a 	sub	r16,r16,r17
 8010700:	1400010e 	bge	r2,r16,8010708 <___svfprintf_internal_r+0x1570>
 8010704:	1021883a 	mov	r16,r2
 8010708:	04000a0e 	bge	zero,r16,8010734 <___svfprintf_internal_r+0x159c>
 801070c:	d9001f17 	ldw	r4,124(sp)
 8010710:	1c07883a 	add	r3,r3,r16
 8010714:	44400015 	stw	r17,0(r8)
 8010718:	21000044 	addi	r4,r4,1
 801071c:	44000115 	stw	r16,4(r8)
 8010720:	d8c02015 	stw	r3,128(sp)
 8010724:	d9001f15 	stw	r4,124(sp)
 8010728:	014001c4 	movi	r5,7
 801072c:	2901e616 	blt	r5,r4,8010ec8 <___svfprintf_internal_r+0x1d30>
 8010730:	42000204 	addi	r8,r8,8
 8010734:	8001f616 	blt	r16,zero,8010f10 <___svfprintf_internal_r+0x1d78>
 8010738:	1421c83a 	sub	r16,r2,r16
 801073c:	043cfa0e 	bge	zero,r16,800fb28 <__alt_data_end+0xfc00fb28>
 8010740:	04400404 	movi	r17,16
 8010744:	d8801f17 	ldw	r2,124(sp)
 8010748:	8c3edd0e 	bge	r17,r16,80102c0 <__alt_data_end+0xfc0102c0>
 801074c:	014200b4 	movhi	r5,2050
 8010750:	29701604 	addi	r5,r5,-16296
 8010754:	d9402c15 	stw	r5,176(sp)
 8010758:	058001c4 	movi	r22,7
 801075c:	dd002d17 	ldw	r20,180(sp)
 8010760:	00000306 	br	8010770 <___svfprintf_internal_r+0x15d8>
 8010764:	42000204 	addi	r8,r8,8
 8010768:	843ffc04 	addi	r16,r16,-16
 801076c:	8c3ed70e 	bge	r17,r16,80102cc <__alt_data_end+0xfc0102cc>
 8010770:	18c00404 	addi	r3,r3,16
 8010774:	10800044 	addi	r2,r2,1
 8010778:	45400015 	stw	r21,0(r8)
 801077c:	44400115 	stw	r17,4(r8)
 8010780:	d8c02015 	stw	r3,128(sp)
 8010784:	d8801f15 	stw	r2,124(sp)
 8010788:	b0bff60e 	bge	r22,r2,8010764 <__alt_data_end+0xfc010764>
 801078c:	d9801e04 	addi	r6,sp,120
 8010790:	a00b883a 	mov	r5,r20
 8010794:	9809883a 	mov	r4,r19
 8010798:	8013d2c0 	call	8013d2c <__ssprint_r>
 801079c:	103b651e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 80107a0:	d8c02017 	ldw	r3,128(sp)
 80107a4:	d8801f17 	ldw	r2,124(sp)
 80107a8:	da000404 	addi	r8,sp,16
 80107ac:	003fee06 	br	8010768 <__alt_data_end+0xfc010768>
 80107b0:	9088703a 	and	r4,r18,r2
 80107b4:	203e8d1e 	bne	r4,zero,80101ec <__alt_data_end+0xfc0101ec>
 80107b8:	dc401f17 	ldw	r17,124(sp)
 80107bc:	40800115 	stw	r2,4(r8)
 80107c0:	44000015 	stw	r16,0(r8)
 80107c4:	8c400044 	addi	r17,r17,1
 80107c8:	d8c02015 	stw	r3,128(sp)
 80107cc:	dc401f15 	stw	r17,124(sp)
 80107d0:	008001c4 	movi	r2,7
 80107d4:	147f7f16 	blt	r2,r17,80105d4 <__alt_data_end+0xfc0105d4>
 80107d8:	45800204 	addi	r22,r8,8
 80107dc:	003eac06 	br	8010290 <__alt_data_end+0xfc010290>
 80107e0:	d9402d17 	ldw	r5,180(sp)
 80107e4:	d9801e04 	addi	r6,sp,120
 80107e8:	9809883a 	mov	r4,r19
 80107ec:	8013d2c0 	call	8013d2c <__ssprint_r>
 80107f0:	103b501e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 80107f4:	d8c02017 	ldw	r3,128(sp)
 80107f8:	dc401f17 	ldw	r17,124(sp)
 80107fc:	da000404 	addi	r8,sp,16
 8010800:	003e8406 	br	8010214 <__alt_data_end+0xfc010214>
 8010804:	d9402d17 	ldw	r5,180(sp)
 8010808:	d9801e04 	addi	r6,sp,120
 801080c:	9809883a 	mov	r4,r19
 8010810:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010814:	103b471e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 8010818:	d8c02017 	ldw	r3,128(sp)
 801081c:	dc401f17 	ldw	r17,124(sp)
 8010820:	dd800404 	addi	r22,sp,16
 8010824:	003e8606 	br	8010240 <__alt_data_end+0xfc010240>
 8010828:	0029883a 	mov	r20,zero
 801082c:	a5000c04 	addi	r20,r20,48
 8010830:	dc001dc4 	addi	r16,sp,119
 8010834:	dd001dc5 	stb	r20,119(sp)
 8010838:	003f3806 	br	801051c <__alt_data_end+0xfc01051c>
 801083c:	d9402d17 	ldw	r5,180(sp)
 8010840:	d9801e04 	addi	r6,sp,120
 8010844:	9809883a 	mov	r4,r19
 8010848:	8013d2c0 	call	8013d2c <__ssprint_r>
 801084c:	103b391e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 8010850:	d8c02017 	ldw	r3,128(sp)
 8010854:	da000404 	addi	r8,sp,16
 8010858:	003c7306 	br	800fa28 <__alt_data_end+0xfc00fa28>
 801085c:	d9003617 	ldw	r4,216(sp)
 8010860:	d9403717 	ldw	r5,220(sp)
 8010864:	da003e15 	stw	r8,248(sp)
 8010868:	800cc200 	call	800cc20 <__fpclassifyd>
 801086c:	da003e17 	ldw	r8,248(sp)
 8010870:	1000bd1e 	bne	r2,zero,8010b68 <___svfprintf_internal_r+0x19d0>
 8010874:	008011c4 	movi	r2,71
 8010878:	14411e0e 	bge	r2,r17,8010cf4 <___svfprintf_internal_r+0x1b5c>
 801087c:	040200b4 	movhi	r16,2050
 8010880:	842eed04 	addi	r16,r16,-17484
 8010884:	00c000c4 	movi	r3,3
 8010888:	00bfdfc4 	movi	r2,-129
 801088c:	d8c02915 	stw	r3,164(sp)
 8010890:	90a4703a 	and	r18,r18,r2
 8010894:	df002783 	ldbu	fp,158(sp)
 8010898:	d8c02b15 	stw	r3,172(sp)
 801089c:	d8002a15 	stw	zero,168(sp)
 80108a0:	d8003215 	stw	zero,200(sp)
 80108a4:	003bfa06 	br	800f890 <__alt_data_end+0xfc00f890>
 80108a8:	9080100c 	andi	r2,r18,64
 80108ac:	d8002785 	stb	zero,158(sp)
 80108b0:	10009426 	beq	r2,zero,8010b04 <___svfprintf_internal_r+0x196c>
 80108b4:	d9402e17 	ldw	r5,184(sp)
 80108b8:	d8c02a17 	ldw	r3,168(sp)
 80108bc:	002d883a 	mov	r22,zero
 80108c0:	28800104 	addi	r2,r5,4
 80108c4:	2d00000b 	ldhu	r20,0(r5)
 80108c8:	183ec10e 	bge	r3,zero,80103d0 <__alt_data_end+0xfc0103d0>
 80108cc:	a586b03a 	or	r3,r20,r22
 80108d0:	d8802e15 	stw	r2,184(sp)
 80108d4:	183ec21e 	bne	r3,zero,80103e0 <__alt_data_end+0xfc0103e0>
 80108d8:	0039883a 	mov	fp,zero
 80108dc:	0005883a 	mov	r2,zero
 80108e0:	003db806 	br	800ffc4 <__alt_data_end+0xfc00ffc4>
 80108e4:	d8c02e17 	ldw	r3,184(sp)
 80108e8:	d9002e17 	ldw	r4,184(sp)
 80108ec:	d9402e17 	ldw	r5,184(sp)
 80108f0:	18c00017 	ldw	r3,0(r3)
 80108f4:	21000117 	ldw	r4,4(r4)
 80108f8:	29400204 	addi	r5,r5,8
 80108fc:	d8c03615 	stw	r3,216(sp)
 8010900:	d9003715 	stw	r4,220(sp)
 8010904:	d9402e15 	stw	r5,184(sp)
 8010908:	003b5a06 	br	800f674 <__alt_data_end+0xfc00f674>
 801090c:	9080100c 	andi	r2,r18,64
 8010910:	10010726 	beq	r2,zero,8010d30 <___svfprintf_internal_r+0x1b98>
 8010914:	d8802e17 	ldw	r2,184(sp)
 8010918:	1500000f 	ldh	r20,0(r2)
 801091c:	10800104 	addi	r2,r2,4
 8010920:	d8802e15 	stw	r2,184(sp)
 8010924:	a02dd7fa 	srai	r22,r20,31
 8010928:	b005883a 	mov	r2,r22
 801092c:	003b7d06 	br	800f724 <__alt_data_end+0xfc00f724>
 8010930:	9080100c 	andi	r2,r18,64
 8010934:	10010526 	beq	r2,zero,8010d4c <___svfprintf_internal_r+0x1bb4>
 8010938:	d8c02e17 	ldw	r3,184(sp)
 801093c:	002d883a 	mov	r22,zero
 8010940:	1d00000b 	ldhu	r20,0(r3)
 8010944:	18c00104 	addi	r3,r3,4
 8010948:	d8c02e15 	stw	r3,184(sp)
 801094c:	003ce206 	br	800fcd8 <__alt_data_end+0xfc00fcd8>
 8010950:	bc400007 	ldb	r17,0(r23)
 8010954:	003a6506 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 8010958:	9080040c 	andi	r2,r18,16
 801095c:	10010126 	beq	r2,zero,8010d64 <___svfprintf_internal_r+0x1bcc>
 8010960:	d8c02e17 	ldw	r3,184(sp)
 8010964:	d9002f17 	ldw	r4,188(sp)
 8010968:	18800017 	ldw	r2,0(r3)
 801096c:	18c00104 	addi	r3,r3,4
 8010970:	d8c02e15 	stw	r3,184(sp)
 8010974:	11000015 	stw	r4,0(r2)
 8010978:	003a3206 	br	800f244 <__alt_data_end+0xfc00f244>
 801097c:	d9002a17 	ldw	r4,168(sp)
 8010980:	d8002785 	stb	zero,158(sp)
 8010984:	203d8d16 	blt	r4,zero,800ffbc <__alt_data_end+0xfc00ffbc>
 8010988:	00bfdfc4 	movi	r2,-129
 801098c:	90a4703a 	and	r18,r18,r2
 8010990:	003ad506 	br	800f4e8 <__alt_data_end+0xfc00f4e8>
 8010994:	014200b4 	movhi	r5,2050
 8010998:	29701604 	addi	r5,r5,-16296
 801099c:	d9402c15 	stw	r5,176(sp)
 80109a0:	d9402c17 	ldw	r5,176(sp)
 80109a4:	1c47883a 	add	r3,r3,r17
 80109a8:	10800044 	addi	r2,r2,1
 80109ac:	41400015 	stw	r5,0(r8)
 80109b0:	44400115 	stw	r17,4(r8)
 80109b4:	d8c02015 	stw	r3,128(sp)
 80109b8:	d8801f15 	stw	r2,124(sp)
 80109bc:	010001c4 	movi	r4,7
 80109c0:	20bf3016 	blt	r4,r2,8010684 <__alt_data_end+0xfc010684>
 80109c4:	42000204 	addi	r8,r8,8
 80109c8:	003f3506 	br	80106a0 <__alt_data_end+0xfc0106a0>
 80109cc:	010200b4 	movhi	r4,2050
 80109d0:	21301604 	addi	r4,r4,-16296
 80109d4:	d9002c15 	stw	r4,176(sp)
 80109d8:	003c3c06 	br	800facc <__alt_data_end+0xfc00facc>
 80109dc:	d9402d17 	ldw	r5,180(sp)
 80109e0:	d9801e04 	addi	r6,sp,120
 80109e4:	9809883a 	mov	r4,r19
 80109e8:	8013d2c0 	call	8013d2c <__ssprint_r>
 80109ec:	103ad11e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 80109f0:	d8c02017 	ldw	r3,128(sp)
 80109f4:	da000404 	addi	r8,sp,16
 80109f8:	003d9306 	br	8010048 <__alt_data_end+0xfc010048>
 80109fc:	d8801f17 	ldw	r2,124(sp)
 8010a00:	014200b4 	movhi	r5,2050
 8010a04:	01000044 	movi	r4,1
 8010a08:	18c00044 	addi	r3,r3,1
 8010a0c:	10800044 	addi	r2,r2,1
 8010a10:	296efa04 	addi	r5,r5,-17432
 8010a14:	41000115 	stw	r4,4(r8)
 8010a18:	41400015 	stw	r5,0(r8)
 8010a1c:	d8c02015 	stw	r3,128(sp)
 8010a20:	d8801f15 	stw	r2,124(sp)
 8010a24:	010001c4 	movi	r4,7
 8010a28:	2080b516 	blt	r4,r2,8010d00 <___svfprintf_internal_r+0x1b68>
 8010a2c:	42000204 	addi	r8,r8,8
 8010a30:	8800041e 	bne	r17,zero,8010a44 <___svfprintf_internal_r+0x18ac>
 8010a34:	d8803317 	ldw	r2,204(sp)
 8010a38:	1000021e 	bne	r2,zero,8010a44 <___svfprintf_internal_r+0x18ac>
 8010a3c:	9080004c 	andi	r2,r18,1
 8010a40:	103c3926 	beq	r2,zero,800fb28 <__alt_data_end+0xfc00fb28>
 8010a44:	d9003817 	ldw	r4,224(sp)
 8010a48:	d8801f17 	ldw	r2,124(sp)
 8010a4c:	d9403417 	ldw	r5,208(sp)
 8010a50:	20c7883a 	add	r3,r4,r3
 8010a54:	10800044 	addi	r2,r2,1
 8010a58:	41000115 	stw	r4,4(r8)
 8010a5c:	41400015 	stw	r5,0(r8)
 8010a60:	d8c02015 	stw	r3,128(sp)
 8010a64:	d8801f15 	stw	r2,124(sp)
 8010a68:	010001c4 	movi	r4,7
 8010a6c:	20818016 	blt	r4,r2,8011070 <___svfprintf_internal_r+0x1ed8>
 8010a70:	42000204 	addi	r8,r8,8
 8010a74:	0463c83a 	sub	r17,zero,r17
 8010a78:	0440cb0e 	bge	zero,r17,8010da8 <___svfprintf_internal_r+0x1c10>
 8010a7c:	05800404 	movi	r22,16
 8010a80:	b440e80e 	bge	r22,r17,8010e24 <___svfprintf_internal_r+0x1c8c>
 8010a84:	014200b4 	movhi	r5,2050
 8010a88:	29701604 	addi	r5,r5,-16296
 8010a8c:	d9402c15 	stw	r5,176(sp)
 8010a90:	070001c4 	movi	fp,7
 8010a94:	dd002d17 	ldw	r20,180(sp)
 8010a98:	00000306 	br	8010aa8 <___svfprintf_internal_r+0x1910>
 8010a9c:	42000204 	addi	r8,r8,8
 8010aa0:	8c7ffc04 	addi	r17,r17,-16
 8010aa4:	b440e20e 	bge	r22,r17,8010e30 <___svfprintf_internal_r+0x1c98>
 8010aa8:	18c00404 	addi	r3,r3,16
 8010aac:	10800044 	addi	r2,r2,1
 8010ab0:	45400015 	stw	r21,0(r8)
 8010ab4:	45800115 	stw	r22,4(r8)
 8010ab8:	d8c02015 	stw	r3,128(sp)
 8010abc:	d8801f15 	stw	r2,124(sp)
 8010ac0:	e0bff60e 	bge	fp,r2,8010a9c <__alt_data_end+0xfc010a9c>
 8010ac4:	d9801e04 	addi	r6,sp,120
 8010ac8:	a00b883a 	mov	r5,r20
 8010acc:	9809883a 	mov	r4,r19
 8010ad0:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010ad4:	103a971e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 8010ad8:	d8c02017 	ldw	r3,128(sp)
 8010adc:	d8801f17 	ldw	r2,124(sp)
 8010ae0:	da000404 	addi	r8,sp,16
 8010ae4:	003fee06 	br	8010aa0 <__alt_data_end+0xfc010aa0>
 8010ae8:	d9002e17 	ldw	r4,184(sp)
 8010aec:	d9402a17 	ldw	r5,168(sp)
 8010af0:	002d883a 	mov	r22,zero
 8010af4:	20800104 	addi	r2,r4,4
 8010af8:	25000017 	ldw	r20,0(r4)
 8010afc:	283e7d0e 	bge	r5,zero,80104f4 <__alt_data_end+0xfc0104f4>
 8010b00:	003eda06 	br	801066c <__alt_data_end+0xfc01066c>
 8010b04:	d9002e17 	ldw	r4,184(sp)
 8010b08:	d9402a17 	ldw	r5,168(sp)
 8010b0c:	002d883a 	mov	r22,zero
 8010b10:	20800104 	addi	r2,r4,4
 8010b14:	25000017 	ldw	r20,0(r4)
 8010b18:	283e2d0e 	bge	r5,zero,80103d0 <__alt_data_end+0xfc0103d0>
 8010b1c:	003f6b06 	br	80108cc <__alt_data_end+0xfc0108cc>
 8010b20:	d8c02e15 	stw	r3,184(sp)
 8010b24:	0039883a 	mov	fp,zero
 8010b28:	003ed206 	br	8010674 <__alt_data_end+0xfc010674>
 8010b2c:	bc400043 	ldbu	r17,1(r23)
 8010b30:	84000814 	ori	r16,r16,32
 8010b34:	bdc00044 	addi	r23,r23,1
 8010b38:	8c403fcc 	andi	r17,r17,255
 8010b3c:	8c40201c 	xori	r17,r17,128
 8010b40:	8c7fe004 	addi	r17,r17,-128
 8010b44:	0039e906 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 8010b48:	d9402d17 	ldw	r5,180(sp)
 8010b4c:	d9801e04 	addi	r6,sp,120
 8010b50:	9809883a 	mov	r4,r19
 8010b54:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010b58:	103a761e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 8010b5c:	d8c02017 	ldw	r3,128(sp)
 8010b60:	da000404 	addi	r8,sp,16
 8010b64:	003d4a06 	br	8010090 <__alt_data_end+0xfc010090>
 8010b68:	d9002a17 	ldw	r4,168(sp)
 8010b6c:	05bff7c4 	movi	r22,-33
 8010b70:	00bfffc4 	movi	r2,-1
 8010b74:	8dac703a 	and	r22,r17,r22
 8010b78:	20806a26 	beq	r4,r2,8010d24 <___svfprintf_internal_r+0x1b8c>
 8010b7c:	008011c4 	movi	r2,71
 8010b80:	b0813726 	beq	r22,r2,8011060 <___svfprintf_internal_r+0x1ec8>
 8010b84:	d9003717 	ldw	r4,220(sp)
 8010b88:	90c04014 	ori	r3,r18,256
 8010b8c:	d8c02c15 	stw	r3,176(sp)
 8010b90:	20015d16 	blt	r4,zero,8011108 <___svfprintf_internal_r+0x1f70>
 8010b94:	dd003717 	ldw	r20,220(sp)
 8010b98:	d8002905 	stb	zero,164(sp)
 8010b9c:	00801984 	movi	r2,102
 8010ba0:	88814026 	beq	r17,r2,80110a4 <___svfprintf_internal_r+0x1f0c>
 8010ba4:	00801184 	movi	r2,70
 8010ba8:	88817126 	beq	r17,r2,8011170 <___svfprintf_internal_r+0x1fd8>
 8010bac:	00801144 	movi	r2,69
 8010bb0:	b0816226 	beq	r22,r2,801113c <___svfprintf_internal_r+0x1fa4>
 8010bb4:	d8c02a17 	ldw	r3,168(sp)
 8010bb8:	d8802104 	addi	r2,sp,132
 8010bbc:	d8800315 	stw	r2,12(sp)
 8010bc0:	d9403617 	ldw	r5,216(sp)
 8010bc4:	d8802504 	addi	r2,sp,148
 8010bc8:	d8800215 	stw	r2,8(sp)
 8010bcc:	d8802604 	addi	r2,sp,152
 8010bd0:	d8c00015 	stw	r3,0(sp)
 8010bd4:	d8800115 	stw	r2,4(sp)
 8010bd8:	01c00084 	movi	r7,2
 8010bdc:	a00d883a 	mov	r6,r20
 8010be0:	9809883a 	mov	r4,r19
 8010be4:	d8c03d15 	stw	r3,244(sp)
 8010be8:	da003e15 	stw	r8,248(sp)
 8010bec:	8008fcc0 	call	8008fcc <_dtoa_r>
 8010bf0:	1021883a 	mov	r16,r2
 8010bf4:	008019c4 	movi	r2,103
 8010bf8:	d8c03d17 	ldw	r3,244(sp)
 8010bfc:	da003e17 	ldw	r8,248(sp)
 8010c00:	8880e726 	beq	r17,r2,8010fa0 <___svfprintf_internal_r+0x1e08>
 8010c04:	008011c4 	movi	r2,71
 8010c08:	8880d426 	beq	r17,r2,8010f5c <___svfprintf_internal_r+0x1dc4>
 8010c0c:	80f9883a 	add	fp,r16,r3
 8010c10:	d9003617 	ldw	r4,216(sp)
 8010c14:	000d883a 	mov	r6,zero
 8010c18:	000f883a 	mov	r7,zero
 8010c1c:	a00b883a 	mov	r5,r20
 8010c20:	da003e15 	stw	r8,248(sp)
 8010c24:	80177940 	call	8017794 <__eqdf2>
 8010c28:	da003e17 	ldw	r8,248(sp)
 8010c2c:	1000e426 	beq	r2,zero,8010fc0 <___svfprintf_internal_r+0x1e28>
 8010c30:	d8802117 	ldw	r2,132(sp)
 8010c34:	1700062e 	bgeu	r2,fp,8010c50 <___svfprintf_internal_r+0x1ab8>
 8010c38:	01000c04 	movi	r4,48
 8010c3c:	10c00044 	addi	r3,r2,1
 8010c40:	d8c02115 	stw	r3,132(sp)
 8010c44:	11000005 	stb	r4,0(r2)
 8010c48:	d8802117 	ldw	r2,132(sp)
 8010c4c:	173ffb36 	bltu	r2,fp,8010c3c <__alt_data_end+0xfc010c3c>
 8010c50:	1405c83a 	sub	r2,r2,r16
 8010c54:	d8803315 	stw	r2,204(sp)
 8010c58:	008011c4 	movi	r2,71
 8010c5c:	b080c526 	beq	r22,r2,8010f74 <___svfprintf_internal_r+0x1ddc>
 8010c60:	00801944 	movi	r2,101
 8010c64:	1441d80e 	bge	r2,r17,80113c8 <___svfprintf_internal_r+0x2230>
 8010c68:	d8c02617 	ldw	r3,152(sp)
 8010c6c:	00801984 	movi	r2,102
 8010c70:	d8c03215 	stw	r3,200(sp)
 8010c74:	88813426 	beq	r17,r2,8011148 <___svfprintf_internal_r+0x1fb0>
 8010c78:	d8c03217 	ldw	r3,200(sp)
 8010c7c:	d9003317 	ldw	r4,204(sp)
 8010c80:	19012516 	blt	r3,r4,8011118 <___svfprintf_internal_r+0x1f80>
 8010c84:	9480004c 	andi	r18,r18,1
 8010c88:	9001841e 	bne	r18,zero,801129c <___svfprintf_internal_r+0x2104>
 8010c8c:	1805883a 	mov	r2,r3
 8010c90:	1801cb16 	blt	r3,zero,80113c0 <___svfprintf_internal_r+0x2228>
 8010c94:	d8c03217 	ldw	r3,200(sp)
 8010c98:	044019c4 	movi	r17,103
 8010c9c:	d8c02b15 	stw	r3,172(sp)
 8010ca0:	df002907 	ldb	fp,164(sp)
 8010ca4:	e000a61e 	bne	fp,zero,8010f40 <___svfprintf_internal_r+0x1da8>
 8010ca8:	df002783 	ldbu	fp,158(sp)
 8010cac:	d8802915 	stw	r2,164(sp)
 8010cb0:	dc802c17 	ldw	r18,176(sp)
 8010cb4:	d8002a15 	stw	zero,168(sp)
 8010cb8:	003af506 	br	800f890 <__alt_data_end+0xfc00f890>
 8010cbc:	040200b4 	movhi	r16,2050
 8010cc0:	842eea04 	addi	r16,r16,-17496
 8010cc4:	003a7e06 	br	800f6c0 <__alt_data_end+0xfc00f6c0>
 8010cc8:	d9003917 	ldw	r4,228(sp)
 8010ccc:	04001004 	movi	r16,64
 8010cd0:	800b883a 	mov	r5,r16
 8010cd4:	8003e340 	call	8003e34 <_malloc_r>
 8010cd8:	d9002d17 	ldw	r4,180(sp)
 8010cdc:	20800015 	stw	r2,0(r4)
 8010ce0:	20800415 	stw	r2,16(r4)
 8010ce4:	1001d026 	beq	r2,zero,8011428 <___svfprintf_internal_r+0x2290>
 8010ce8:	d8802d17 	ldw	r2,180(sp)
 8010cec:	14000515 	stw	r16,20(r2)
 8010cf0:	00394406 	br	800f204 <__alt_data_end+0xfc00f204>
 8010cf4:	040200b4 	movhi	r16,2050
 8010cf8:	842eec04 	addi	r16,r16,-17488
 8010cfc:	003ee106 	br	8010884 <__alt_data_end+0xfc010884>
 8010d00:	d9402d17 	ldw	r5,180(sp)
 8010d04:	d9801e04 	addi	r6,sp,120
 8010d08:	9809883a 	mov	r4,r19
 8010d0c:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010d10:	103a081e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 8010d14:	dc402617 	ldw	r17,152(sp)
 8010d18:	d8c02017 	ldw	r3,128(sp)
 8010d1c:	da000404 	addi	r8,sp,16
 8010d20:	003f4306 	br	8010a30 <__alt_data_end+0xfc010a30>
 8010d24:	01400184 	movi	r5,6
 8010d28:	d9402a15 	stw	r5,168(sp)
 8010d2c:	003f9506 	br	8010b84 <__alt_data_end+0xfc010b84>
 8010d30:	d8c02e17 	ldw	r3,184(sp)
 8010d34:	1d000017 	ldw	r20,0(r3)
 8010d38:	18c00104 	addi	r3,r3,4
 8010d3c:	d8c02e15 	stw	r3,184(sp)
 8010d40:	a02dd7fa 	srai	r22,r20,31
 8010d44:	b005883a 	mov	r2,r22
 8010d48:	003a7606 	br	800f724 <__alt_data_end+0xfc00f724>
 8010d4c:	d9002e17 	ldw	r4,184(sp)
 8010d50:	002d883a 	mov	r22,zero
 8010d54:	25000017 	ldw	r20,0(r4)
 8010d58:	21000104 	addi	r4,r4,4
 8010d5c:	d9002e15 	stw	r4,184(sp)
 8010d60:	003bdd06 	br	800fcd8 <__alt_data_end+0xfc00fcd8>
 8010d64:	9480100c 	andi	r18,r18,64
 8010d68:	90006e26 	beq	r18,zero,8010f24 <___svfprintf_internal_r+0x1d8c>
 8010d6c:	d9402e17 	ldw	r5,184(sp)
 8010d70:	d8c02f17 	ldw	r3,188(sp)
 8010d74:	28800017 	ldw	r2,0(r5)
 8010d78:	29400104 	addi	r5,r5,4
 8010d7c:	d9402e15 	stw	r5,184(sp)
 8010d80:	10c0000d 	sth	r3,0(r2)
 8010d84:	00392f06 	br	800f244 <__alt_data_end+0xfc00f244>
 8010d88:	d9402d17 	ldw	r5,180(sp)
 8010d8c:	d9801e04 	addi	r6,sp,120
 8010d90:	9809883a 	mov	r4,r19
 8010d94:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010d98:	1039e61e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 8010d9c:	d8c02017 	ldw	r3,128(sp)
 8010da0:	d8801f17 	ldw	r2,124(sp)
 8010da4:	da000404 	addi	r8,sp,16
 8010da8:	d9403317 	ldw	r5,204(sp)
 8010dac:	10800044 	addi	r2,r2,1
 8010db0:	44000015 	stw	r16,0(r8)
 8010db4:	28c7883a 	add	r3,r5,r3
 8010db8:	003b5506 	br	800fb10 <__alt_data_end+0xfc00fb10>
 8010dbc:	8009883a 	mov	r4,r16
 8010dc0:	df003e15 	stw	fp,248(sp)
 8010dc4:	8004cf40 	call	8004cf4 <strlen>
 8010dc8:	d8802b15 	stw	r2,172(sp)
 8010dcc:	da003e17 	ldw	r8,248(sp)
 8010dd0:	103c160e 	bge	r2,zero,800fe2c <__alt_data_end+0xfc00fe2c>
 8010dd4:	0005883a 	mov	r2,zero
 8010dd8:	003c1406 	br	800fe2c <__alt_data_end+0xfc00fe2c>
 8010ddc:	00bfffc4 	movi	r2,-1
 8010de0:	0039d906 	br	800f548 <__alt_data_end+0xfc00f548>
 8010de4:	010200b4 	movhi	r4,2050
 8010de8:	21301a04 	addi	r4,r4,-16280
 8010dec:	d9003515 	stw	r4,212(sp)
 8010df0:	003ae406 	br	800f984 <__alt_data_end+0xfc00f984>
 8010df4:	013fffc4 	movi	r4,-1
 8010df8:	0039fa06 	br	800f5e4 <__alt_data_end+0xfc00f5e4>
 8010dfc:	d9402d17 	ldw	r5,180(sp)
 8010e00:	d9801e04 	addi	r6,sp,120
 8010e04:	9809883a 	mov	r4,r19
 8010e08:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010e0c:	1039c91e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 8010e10:	d8c02017 	ldw	r3,128(sp)
 8010e14:	da000404 	addi	r8,sp,16
 8010e18:	003d8406 	br	801042c <__alt_data_end+0xfc01042c>
 8010e1c:	0023883a 	mov	r17,zero
 8010e20:	003d8306 	br	8010430 <__alt_data_end+0xfc010430>
 8010e24:	010200b4 	movhi	r4,2050
 8010e28:	21301604 	addi	r4,r4,-16296
 8010e2c:	d9002c15 	stw	r4,176(sp)
 8010e30:	d9002c17 	ldw	r4,176(sp)
 8010e34:	1c47883a 	add	r3,r3,r17
 8010e38:	10800044 	addi	r2,r2,1
 8010e3c:	41000015 	stw	r4,0(r8)
 8010e40:	44400115 	stw	r17,4(r8)
 8010e44:	d8c02015 	stw	r3,128(sp)
 8010e48:	d8801f15 	stw	r2,124(sp)
 8010e4c:	010001c4 	movi	r4,7
 8010e50:	20bfcd16 	blt	r4,r2,8010d88 <__alt_data_end+0xfc010d88>
 8010e54:	42000204 	addi	r8,r8,8
 8010e58:	003fd306 	br	8010da8 <__alt_data_end+0xfc010da8>
 8010e5c:	d9402d17 	ldw	r5,180(sp)
 8010e60:	d9801e04 	addi	r6,sp,120
 8010e64:	9809883a 	mov	r4,r19
 8010e68:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010e6c:	1039b11e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 8010e70:	d8802617 	ldw	r2,152(sp)
 8010e74:	d8c02017 	ldw	r3,128(sp)
 8010e78:	da000404 	addi	r8,sp,16
 8010e7c:	003e1c06 	br	80106f0 <__alt_data_end+0xfc0106f0>
 8010e80:	d8802a17 	ldw	r2,168(sp)
 8010e84:	00c00184 	movi	r3,6
 8010e88:	1880012e 	bgeu	r3,r2,8010e90 <___svfprintf_internal_r+0x1cf8>
 8010e8c:	1805883a 	mov	r2,r3
 8010e90:	d8802b15 	stw	r2,172(sp)
 8010e94:	1000f316 	blt	r2,zero,8011264 <___svfprintf_internal_r+0x20cc>
 8010e98:	040200b4 	movhi	r16,2050
 8010e9c:	d8802915 	stw	r2,164(sp)
 8010ea0:	dd002e15 	stw	r20,184(sp)
 8010ea4:	d8002a15 	stw	zero,168(sp)
 8010ea8:	d8003215 	stw	zero,200(sp)
 8010eac:	842ef804 	addi	r16,r16,-17440
 8010eb0:	0039883a 	mov	fp,zero
 8010eb4:	003a7d06 	br	800f8ac <__alt_data_end+0xfc00f8ac>
 8010eb8:	010200b4 	movhi	r4,2050
 8010ebc:	21301a04 	addi	r4,r4,-16280
 8010ec0:	d9003515 	stw	r4,212(sp)
 8010ec4:	003b3d06 	br	800fbbc <__alt_data_end+0xfc00fbbc>
 8010ec8:	d9402d17 	ldw	r5,180(sp)
 8010ecc:	d9801e04 	addi	r6,sp,120
 8010ed0:	9809883a 	mov	r4,r19
 8010ed4:	8013d2c0 	call	8013d2c <__ssprint_r>
 8010ed8:	1039961e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 8010edc:	d8802617 	ldw	r2,152(sp)
 8010ee0:	d9403317 	ldw	r5,204(sp)
 8010ee4:	d8c02017 	ldw	r3,128(sp)
 8010ee8:	da000404 	addi	r8,sp,16
 8010eec:	2885c83a 	sub	r2,r5,r2
 8010ef0:	003e1006 	br	8010734 <__alt_data_end+0xfc010734>
 8010ef4:	00800044 	movi	r2,1
 8010ef8:	10803fcc 	andi	r2,r2,255
 8010efc:	00c00044 	movi	r3,1
 8010f00:	10fa1026 	beq	r2,r3,800f744 <__alt_data_end+0xfc00f744>
 8010f04:	00c00084 	movi	r3,2
 8010f08:	10fb8226 	beq	r2,r3,800fd14 <__alt_data_end+0xfc00fd14>
 8010f0c:	003a4206 	br	800f818 <__alt_data_end+0xfc00f818>
 8010f10:	0021883a 	mov	r16,zero
 8010f14:	003e0806 	br	8010738 <__alt_data_end+0xfc010738>
 8010f18:	07000b44 	movi	fp,45
 8010f1c:	df002785 	stb	fp,158(sp)
 8010f20:	0039e306 	br	800f6b0 <__alt_data_end+0xfc00f6b0>
 8010f24:	d9002e17 	ldw	r4,184(sp)
 8010f28:	d9402f17 	ldw	r5,188(sp)
 8010f2c:	20800017 	ldw	r2,0(r4)
 8010f30:	21000104 	addi	r4,r4,4
 8010f34:	d9002e15 	stw	r4,184(sp)
 8010f38:	11400015 	stw	r5,0(r2)
 8010f3c:	0038c106 	br	800f244 <__alt_data_end+0xfc00f244>
 8010f40:	00c00b44 	movi	r3,45
 8010f44:	d8c02785 	stb	r3,158(sp)
 8010f48:	d8802915 	stw	r2,164(sp)
 8010f4c:	dc802c17 	ldw	r18,176(sp)
 8010f50:	d8002a15 	stw	zero,168(sp)
 8010f54:	07000b44 	movi	fp,45
 8010f58:	003a5106 	br	800f8a0 <__alt_data_end+0xfc00f8a0>
 8010f5c:	9080004c 	andi	r2,r18,1
 8010f60:	1000941e 	bne	r2,zero,80111b4 <___svfprintf_internal_r+0x201c>
 8010f64:	d8802117 	ldw	r2,132(sp)
 8010f68:	1405c83a 	sub	r2,r2,r16
 8010f6c:	d8803315 	stw	r2,204(sp)
 8010f70:	b441151e 	bne	r22,r17,80113c8 <___svfprintf_internal_r+0x2230>
 8010f74:	dd802617 	ldw	r22,152(sp)
 8010f78:	00bfff44 	movi	r2,-3
 8010f7c:	b0801a16 	blt	r22,r2,8010fe8 <___svfprintf_internal_r+0x1e50>
 8010f80:	d9402a17 	ldw	r5,168(sp)
 8010f84:	2d801816 	blt	r5,r22,8010fe8 <___svfprintf_internal_r+0x1e50>
 8010f88:	dd803215 	stw	r22,200(sp)
 8010f8c:	003f3a06 	br	8010c78 <__alt_data_end+0xfc010c78>
 8010f90:	1025883a 	mov	r18,r2
 8010f94:	0039883a 	mov	fp,zero
 8010f98:	00800084 	movi	r2,2
 8010f9c:	003fd606 	br	8010ef8 <__alt_data_end+0xfc010ef8>
 8010fa0:	9080004c 	andi	r2,r18,1
 8010fa4:	103f191e 	bne	r2,zero,8010c0c <__alt_data_end+0xfc010c0c>
 8010fa8:	d8802117 	ldw	r2,132(sp)
 8010fac:	003f2806 	br	8010c50 <__alt_data_end+0xfc010c50>
 8010fb0:	010200b4 	movhi	r4,2050
 8010fb4:	21301604 	addi	r4,r4,-16296
 8010fb8:	d9002c15 	stw	r4,176(sp)
 8010fbc:	003c7c06 	br	80101b0 <__alt_data_end+0xfc0101b0>
 8010fc0:	e005883a 	mov	r2,fp
 8010fc4:	003f2206 	br	8010c50 <__alt_data_end+0xfc010c50>
 8010fc8:	d9002a17 	ldw	r4,168(sp)
 8010fcc:	df002783 	ldbu	fp,158(sp)
 8010fd0:	dd002e15 	stw	r20,184(sp)
 8010fd4:	d9002915 	stw	r4,164(sp)
 8010fd8:	d9002b15 	stw	r4,172(sp)
 8010fdc:	d8002a15 	stw	zero,168(sp)
 8010fe0:	d8003215 	stw	zero,200(sp)
 8010fe4:	003a2a06 	br	800f890 <__alt_data_end+0xfc00f890>
 8010fe8:	8c7fff84 	addi	r17,r17,-2
 8010fec:	b5bfffc4 	addi	r22,r22,-1
 8010ff0:	dd802615 	stw	r22,152(sp)
 8010ff4:	dc4022c5 	stb	r17,139(sp)
 8010ff8:	b000c316 	blt	r22,zero,8011308 <___svfprintf_internal_r+0x2170>
 8010ffc:	00800ac4 	movi	r2,43
 8011000:	d8802305 	stb	r2,140(sp)
 8011004:	00800244 	movi	r2,9
 8011008:	15806e16 	blt	r2,r22,80111c4 <___svfprintf_internal_r+0x202c>
 801100c:	00800c04 	movi	r2,48
 8011010:	b5800c04 	addi	r22,r22,48
 8011014:	d8802345 	stb	r2,141(sp)
 8011018:	dd802385 	stb	r22,142(sp)
 801101c:	d88023c4 	addi	r2,sp,143
 8011020:	df0022c4 	addi	fp,sp,139
 8011024:	d8c03317 	ldw	r3,204(sp)
 8011028:	1739c83a 	sub	fp,r2,fp
 801102c:	d9003317 	ldw	r4,204(sp)
 8011030:	e0c7883a 	add	r3,fp,r3
 8011034:	df003b15 	stw	fp,236(sp)
 8011038:	d8c02b15 	stw	r3,172(sp)
 801103c:	00800044 	movi	r2,1
 8011040:	1100b70e 	bge	r2,r4,8011320 <___svfprintf_internal_r+0x2188>
 8011044:	d8c02b17 	ldw	r3,172(sp)
 8011048:	18c00044 	addi	r3,r3,1
 801104c:	d8c02b15 	stw	r3,172(sp)
 8011050:	1805883a 	mov	r2,r3
 8011054:	1800b016 	blt	r3,zero,8011318 <___svfprintf_internal_r+0x2180>
 8011058:	d8003215 	stw	zero,200(sp)
 801105c:	003f1006 	br	8010ca0 <__alt_data_end+0xfc010ca0>
 8011060:	d8802a17 	ldw	r2,168(sp)
 8011064:	103ec71e 	bne	r2,zero,8010b84 <__alt_data_end+0xfc010b84>
 8011068:	dc002a15 	stw	r16,168(sp)
 801106c:	003ec506 	br	8010b84 <__alt_data_end+0xfc010b84>
 8011070:	d9402d17 	ldw	r5,180(sp)
 8011074:	d9801e04 	addi	r6,sp,120
 8011078:	9809883a 	mov	r4,r19
 801107c:	8013d2c0 	call	8013d2c <__ssprint_r>
 8011080:	10392c1e 	bne	r2,zero,800f534 <__alt_data_end+0xfc00f534>
 8011084:	dc402617 	ldw	r17,152(sp)
 8011088:	d8c02017 	ldw	r3,128(sp)
 801108c:	d8801f17 	ldw	r2,124(sp)
 8011090:	da000404 	addi	r8,sp,16
 8011094:	003e7706 	br	8010a74 <__alt_data_end+0xfc010a74>
 8011098:	182f883a 	mov	r23,r3
 801109c:	d8002a15 	stw	zero,168(sp)
 80110a0:	00389306 	br	800f2f0 <__alt_data_end+0xfc00f2f0>
 80110a4:	d8c02a17 	ldw	r3,168(sp)
 80110a8:	d8802104 	addi	r2,sp,132
 80110ac:	d8800315 	stw	r2,12(sp)
 80110b0:	d9403617 	ldw	r5,216(sp)
 80110b4:	d8802504 	addi	r2,sp,148
 80110b8:	d8800215 	stw	r2,8(sp)
 80110bc:	d8802604 	addi	r2,sp,152
 80110c0:	d8c00015 	stw	r3,0(sp)
 80110c4:	9809883a 	mov	r4,r19
 80110c8:	d8800115 	stw	r2,4(sp)
 80110cc:	01c000c4 	movi	r7,3
 80110d0:	a00d883a 	mov	r6,r20
 80110d4:	da003e15 	stw	r8,248(sp)
 80110d8:	8008fcc0 	call	8008fcc <_dtoa_r>
 80110dc:	d9002a17 	ldw	r4,168(sp)
 80110e0:	da003e17 	ldw	r8,248(sp)
 80110e4:	1021883a 	mov	r16,r2
 80110e8:	1139883a 	add	fp,r2,r4
 80110ec:	2007883a 	mov	r3,r4
 80110f0:	81000007 	ldb	r4,0(r16)
 80110f4:	00800c04 	movi	r2,48
 80110f8:	20806f26 	beq	r4,r2,80112b8 <___svfprintf_internal_r+0x2120>
 80110fc:	d8c02617 	ldw	r3,152(sp)
 8011100:	e0f9883a 	add	fp,fp,r3
 8011104:	003ec206 	br	8010c10 <__alt_data_end+0xfc010c10>
 8011108:	00c00b44 	movi	r3,45
 801110c:	2520003c 	xorhi	r20,r4,32768
 8011110:	d8c02905 	stb	r3,164(sp)
 8011114:	003ea106 	br	8010b9c <__alt_data_end+0xfc010b9c>
 8011118:	d8c03217 	ldw	r3,200(sp)
 801111c:	00c0890e 	bge	zero,r3,8011344 <___svfprintf_internal_r+0x21ac>
 8011120:	00800044 	movi	r2,1
 8011124:	d9003317 	ldw	r4,204(sp)
 8011128:	1105883a 	add	r2,r2,r4
 801112c:	d8802b15 	stw	r2,172(sp)
 8011130:	10005f16 	blt	r2,zero,80112b0 <___svfprintf_internal_r+0x2118>
 8011134:	044019c4 	movi	r17,103
 8011138:	003ed906 	br	8010ca0 <__alt_data_end+0xfc010ca0>
 801113c:	d9002a17 	ldw	r4,168(sp)
 8011140:	20c00044 	addi	r3,r4,1
 8011144:	003e9c06 	br	8010bb8 <__alt_data_end+0xfc010bb8>
 8011148:	d9002a17 	ldw	r4,168(sp)
 801114c:	00c0680e 	bge	zero,r3,80112f0 <___svfprintf_internal_r+0x2158>
 8011150:	2000461e 	bne	r4,zero,801126c <___svfprintf_internal_r+0x20d4>
 8011154:	9480004c 	andi	r18,r18,1
 8011158:	9000441e 	bne	r18,zero,801126c <___svfprintf_internal_r+0x20d4>
 801115c:	1805883a 	mov	r2,r3
 8011160:	1800a116 	blt	r3,zero,80113e8 <___svfprintf_internal_r+0x2250>
 8011164:	d8c03217 	ldw	r3,200(sp)
 8011168:	d8c02b15 	stw	r3,172(sp)
 801116c:	003ecc06 	br	8010ca0 <__alt_data_end+0xfc010ca0>
 8011170:	d9402a17 	ldw	r5,168(sp)
 8011174:	d8802104 	addi	r2,sp,132
 8011178:	d8800315 	stw	r2,12(sp)
 801117c:	d9400015 	stw	r5,0(sp)
 8011180:	d8802504 	addi	r2,sp,148
 8011184:	d9403617 	ldw	r5,216(sp)
 8011188:	d8800215 	stw	r2,8(sp)
 801118c:	d8802604 	addi	r2,sp,152
 8011190:	d8800115 	stw	r2,4(sp)
 8011194:	01c000c4 	movi	r7,3
 8011198:	a00d883a 	mov	r6,r20
 801119c:	9809883a 	mov	r4,r19
 80111a0:	da003e15 	stw	r8,248(sp)
 80111a4:	8008fcc0 	call	8008fcc <_dtoa_r>
 80111a8:	d8c02a17 	ldw	r3,168(sp)
 80111ac:	da003e17 	ldw	r8,248(sp)
 80111b0:	1021883a 	mov	r16,r2
 80111b4:	00801184 	movi	r2,70
 80111b8:	80f9883a 	add	fp,r16,r3
 80111bc:	88bfcc26 	beq	r17,r2,80110f0 <__alt_data_end+0xfc0110f0>
 80111c0:	003e9306 	br	8010c10 <__alt_data_end+0xfc010c10>
 80111c4:	df0022c4 	addi	fp,sp,139
 80111c8:	dc002a15 	stw	r16,168(sp)
 80111cc:	9829883a 	mov	r20,r19
 80111d0:	e021883a 	mov	r16,fp
 80111d4:	4027883a 	mov	r19,r8
 80111d8:	b009883a 	mov	r4,r22
 80111dc:	01400284 	movi	r5,10
 80111e0:	80027c40 	call	80027c4 <__modsi3>
 80111e4:	10800c04 	addi	r2,r2,48
 80111e8:	843fffc4 	addi	r16,r16,-1
 80111ec:	b009883a 	mov	r4,r22
 80111f0:	01400284 	movi	r5,10
 80111f4:	80800005 	stb	r2,0(r16)
 80111f8:	80027400 	call	8002740 <__divsi3>
 80111fc:	102d883a 	mov	r22,r2
 8011200:	00800244 	movi	r2,9
 8011204:	15bff416 	blt	r2,r22,80111d8 <__alt_data_end+0xfc0111d8>
 8011208:	9811883a 	mov	r8,r19
 801120c:	b0800c04 	addi	r2,r22,48
 8011210:	a027883a 	mov	r19,r20
 8011214:	8029883a 	mov	r20,r16
 8011218:	a17fffc4 	addi	r5,r20,-1
 801121c:	a0bfffc5 	stb	r2,-1(r20)
 8011220:	dc002a17 	ldw	r16,168(sp)
 8011224:	2f00782e 	bgeu	r5,fp,8011408 <___svfprintf_internal_r+0x2270>
 8011228:	d9c02384 	addi	r7,sp,142
 801122c:	3d0fc83a 	sub	r7,r7,r20
 8011230:	d9002344 	addi	r4,sp,141
 8011234:	e1cf883a 	add	r7,fp,r7
 8011238:	00000106 	br	8011240 <___svfprintf_internal_r+0x20a8>
 801123c:	28800003 	ldbu	r2,0(r5)
 8011240:	20800005 	stb	r2,0(r4)
 8011244:	21000044 	addi	r4,r4,1
 8011248:	29400044 	addi	r5,r5,1
 801124c:	21fffb1e 	bne	r4,r7,801123c <__alt_data_end+0xfc01123c>
 8011250:	d8802304 	addi	r2,sp,140
 8011254:	1505c83a 	sub	r2,r2,r20
 8011258:	d8c02344 	addi	r3,sp,141
 801125c:	1885883a 	add	r2,r3,r2
 8011260:	003f7006 	br	8011024 <__alt_data_end+0xfc011024>
 8011264:	0005883a 	mov	r2,zero
 8011268:	003f0b06 	br	8010e98 <__alt_data_end+0xfc010e98>
 801126c:	d9002a17 	ldw	r4,168(sp)
 8011270:	d8c03217 	ldw	r3,200(sp)
 8011274:	20800044 	addi	r2,r4,1
 8011278:	1885883a 	add	r2,r3,r2
 801127c:	d8802b15 	stw	r2,172(sp)
 8011280:	103e870e 	bge	r2,zero,8010ca0 <__alt_data_end+0xfc010ca0>
 8011284:	0005883a 	mov	r2,zero
 8011288:	003e8506 	br	8010ca0 <__alt_data_end+0xfc010ca0>
 801128c:	010200b4 	movhi	r4,2050
 8011290:	21301604 	addi	r4,r4,-16296
 8011294:	d9002c15 	stw	r4,176(sp)
 8011298:	003cc506 	br	80105b0 <__alt_data_end+0xfc0105b0>
 801129c:	d8c03217 	ldw	r3,200(sp)
 80112a0:	18c00044 	addi	r3,r3,1
 80112a4:	d8c02b15 	stw	r3,172(sp)
 80112a8:	1805883a 	mov	r2,r3
 80112ac:	183fa10e 	bge	r3,zero,8011134 <__alt_data_end+0xfc011134>
 80112b0:	0005883a 	mov	r2,zero
 80112b4:	003f9f06 	br	8011134 <__alt_data_end+0xfc011134>
 80112b8:	d9003617 	ldw	r4,216(sp)
 80112bc:	000d883a 	mov	r6,zero
 80112c0:	000f883a 	mov	r7,zero
 80112c4:	a00b883a 	mov	r5,r20
 80112c8:	d8c03d15 	stw	r3,244(sp)
 80112cc:	da003e15 	stw	r8,248(sp)
 80112d0:	80177940 	call	8017794 <__eqdf2>
 80112d4:	d8c03d17 	ldw	r3,244(sp)
 80112d8:	da003e17 	ldw	r8,248(sp)
 80112dc:	103f8726 	beq	r2,zero,80110fc <__alt_data_end+0xfc0110fc>
 80112e0:	00800044 	movi	r2,1
 80112e4:	10c7c83a 	sub	r3,r2,r3
 80112e8:	d8c02615 	stw	r3,152(sp)
 80112ec:	003f8406 	br	8011100 <__alt_data_end+0xfc011100>
 80112f0:	20000e1e 	bne	r4,zero,801132c <___svfprintf_internal_r+0x2194>
 80112f4:	9480004c 	andi	r18,r18,1
 80112f8:	90000c1e 	bne	r18,zero,801132c <___svfprintf_internal_r+0x2194>
 80112fc:	00800044 	movi	r2,1
 8011300:	d8802b15 	stw	r2,172(sp)
 8011304:	003e6606 	br	8010ca0 <__alt_data_end+0xfc010ca0>
 8011308:	00800b44 	movi	r2,45
 801130c:	05adc83a 	sub	r22,zero,r22
 8011310:	d8802305 	stb	r2,140(sp)
 8011314:	003f3b06 	br	8011004 <__alt_data_end+0xfc011004>
 8011318:	0005883a 	mov	r2,zero
 801131c:	003f4e06 	br	8011058 <__alt_data_end+0xfc011058>
 8011320:	90a4703a 	and	r18,r18,r2
 8011324:	903f4a26 	beq	r18,zero,8011050 <__alt_data_end+0xfc011050>
 8011328:	003f4606 	br	8011044 <__alt_data_end+0xfc011044>
 801132c:	d8c02a17 	ldw	r3,168(sp)
 8011330:	18c00084 	addi	r3,r3,2
 8011334:	d8c02b15 	stw	r3,172(sp)
 8011338:	1805883a 	mov	r2,r3
 801133c:	183e580e 	bge	r3,zero,8010ca0 <__alt_data_end+0xfc010ca0>
 8011340:	003fd006 	br	8011284 <__alt_data_end+0xfc011284>
 8011344:	00800084 	movi	r2,2
 8011348:	10c5c83a 	sub	r2,r2,r3
 801134c:	003f7506 	br	8011124 <__alt_data_end+0xfc011124>
 8011350:	d9402e17 	ldw	r5,184(sp)
 8011354:	d9002e17 	ldw	r4,184(sp)
 8011358:	bc400043 	ldbu	r17,1(r23)
 801135c:	29400017 	ldw	r5,0(r5)
 8011360:	20800104 	addi	r2,r4,4
 8011364:	d8802e15 	stw	r2,184(sp)
 8011368:	d9402a15 	stw	r5,168(sp)
 801136c:	182f883a 	mov	r23,r3
 8011370:	283df10e 	bge	r5,zero,8010b38 <__alt_data_end+0xfc010b38>
 8011374:	8c403fcc 	andi	r17,r17,255
 8011378:	017fffc4 	movi	r5,-1
 801137c:	8c40201c 	xori	r17,r17,128
 8011380:	d9402a15 	stw	r5,168(sp)
 8011384:	8c7fe004 	addi	r17,r17,-128
 8011388:	0037d806 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 801138c:	9080004c 	andi	r2,r18,1
 8011390:	0039883a 	mov	fp,zero
 8011394:	10000726 	beq	r2,zero,80113b4 <___svfprintf_internal_r+0x221c>
 8011398:	d8c02817 	ldw	r3,160(sp)
 801139c:	dc001dc4 	addi	r16,sp,119
 80113a0:	00800c04 	movi	r2,48
 80113a4:	1c07c83a 	sub	r3,r3,r16
 80113a8:	d8801dc5 	stb	r2,119(sp)
 80113ac:	d8c02b15 	stw	r3,172(sp)
 80113b0:	00393106 	br	800f878 <__alt_data_end+0xfc00f878>
 80113b4:	d8002b15 	stw	zero,172(sp)
 80113b8:	dc001e04 	addi	r16,sp,120
 80113bc:	00392e06 	br	800f878 <__alt_data_end+0xfc00f878>
 80113c0:	0005883a 	mov	r2,zero
 80113c4:	003e3306 	br	8010c94 <__alt_data_end+0xfc010c94>
 80113c8:	dd802617 	ldw	r22,152(sp)
 80113cc:	003f0706 	br	8010fec <__alt_data_end+0xfc010fec>
 80113d0:	d8c02b03 	ldbu	r3,172(sp)
 80113d4:	d8c02785 	stb	r3,158(sp)
 80113d8:	003a3506 	br	800fcb0 <__alt_data_end+0xfc00fcb0>
 80113dc:	d8c02b03 	ldbu	r3,172(sp)
 80113e0:	d8c02785 	stb	r3,158(sp)
 80113e4:	003a1706 	br	800fc44 <__alt_data_end+0xfc00fc44>
 80113e8:	0005883a 	mov	r2,zero
 80113ec:	003f5d06 	br	8011164 <__alt_data_end+0xfc011164>
 80113f0:	d8c02b03 	ldbu	r3,172(sp)
 80113f4:	d8c02785 	stb	r3,158(sp)
 80113f8:	0038f306 	br	800f7c8 <__alt_data_end+0xfc00f7c8>
 80113fc:	d8c02b03 	ldbu	r3,172(sp)
 8011400:	d8c02785 	stb	r3,158(sp)
 8011404:	0038be06 	br	800f700 <__alt_data_end+0xfc00f700>
 8011408:	d8802344 	addi	r2,sp,141
 801140c:	003f0506 	br	8011024 <__alt_data_end+0xfc011024>
 8011410:	d8c02b03 	ldbu	r3,172(sp)
 8011414:	d8c02785 	stb	r3,158(sp)
 8011418:	00388b06 	br	800f648 <__alt_data_end+0xfc00f648>
 801141c:	d8c02b03 	ldbu	r3,172(sp)
 8011420:	d8c02785 	stb	r3,158(sp)
 8011424:	003ad706 	br	800ff84 <__alt_data_end+0xfc00ff84>
 8011428:	d9403917 	ldw	r5,228(sp)
 801142c:	00800304 	movi	r2,12
 8011430:	28800015 	stw	r2,0(r5)
 8011434:	00bfffc4 	movi	r2,-1
 8011438:	00384306 	br	800f548 <__alt_data_end+0xfc00f548>
 801143c:	d8c02b03 	ldbu	r3,172(sp)
 8011440:	d8c02785 	stb	r3,158(sp)
 8011444:	003ab606 	br	800ff20 <__alt_data_end+0xfc00ff20>
 8011448:	d8c02b03 	ldbu	r3,172(sp)
 801144c:	d8c02785 	stb	r3,158(sp)
 8011450:	003a8906 	br	800fe78 <__alt_data_end+0xfc00fe78>

08011454 <__submore>:
 8011454:	defffa04 	addi	sp,sp,-24
 8011458:	dc000015 	stw	r16,0(sp)
 801145c:	2821883a 	mov	r16,r5
 8011460:	29400c17 	ldw	r5,48(r5)
 8011464:	dfc00515 	stw	ra,20(sp)
 8011468:	dd000415 	stw	r20,16(sp)
 801146c:	dcc00315 	stw	r19,12(sp)
 8011470:	dc800215 	stw	r18,8(sp)
 8011474:	dc400115 	stw	r17,4(sp)
 8011478:	80801004 	addi	r2,r16,64
 801147c:	28801726 	beq	r5,r2,80114dc <__submore+0x88>
 8011480:	84400d17 	ldw	r17,52(r16)
 8011484:	8c67883a 	add	r19,r17,r17
 8011488:	980d883a 	mov	r6,r19
 801148c:	800c6bc0 	call	800c6bc <_realloc_r>
 8011490:	1025883a 	mov	r18,r2
 8011494:	10002226 	beq	r2,zero,8011520 <__submore+0xcc>
 8011498:	1469883a 	add	r20,r2,r17
 801149c:	880d883a 	mov	r6,r17
 80114a0:	100b883a 	mov	r5,r2
 80114a4:	a009883a 	mov	r4,r20
 80114a8:	800b3000 	call	800b300 <memcpy>
 80114ac:	0005883a 	mov	r2,zero
 80114b0:	85000015 	stw	r20,0(r16)
 80114b4:	84800c15 	stw	r18,48(r16)
 80114b8:	84c00d15 	stw	r19,52(r16)
 80114bc:	dfc00517 	ldw	ra,20(sp)
 80114c0:	dd000417 	ldw	r20,16(sp)
 80114c4:	dcc00317 	ldw	r19,12(sp)
 80114c8:	dc800217 	ldw	r18,8(sp)
 80114cc:	dc400117 	ldw	r17,4(sp)
 80114d0:	dc000017 	ldw	r16,0(sp)
 80114d4:	dec00604 	addi	sp,sp,24
 80114d8:	f800283a 	ret
 80114dc:	04410004 	movi	r17,1024
 80114e0:	880b883a 	mov	r5,r17
 80114e4:	8003e340 	call	8003e34 <_malloc_r>
 80114e8:	1007883a 	mov	r3,r2
 80114ec:	10000c26 	beq	r2,zero,8011520 <__submore+0xcc>
 80114f0:	80801083 	ldbu	r2,66(r16)
 80114f4:	80c00c15 	stw	r3,48(r16)
 80114f8:	84400d15 	stw	r17,52(r16)
 80114fc:	1880ffc5 	stb	r2,1023(r3)
 8011500:	81401043 	ldbu	r5,65(r16)
 8011504:	1900ff44 	addi	r4,r3,1021
 8011508:	0005883a 	mov	r2,zero
 801150c:	1940ff85 	stb	r5,1022(r3)
 8011510:	81401003 	ldbu	r5,64(r16)
 8011514:	1940ff45 	stb	r5,1021(r3)
 8011518:	81000015 	stw	r4,0(r16)
 801151c:	003fe706 	br	80114bc <__alt_data_end+0xfc0114bc>
 8011520:	00bfffc4 	movi	r2,-1
 8011524:	003fe506 	br	80114bc <__alt_data_end+0xfc0114bc>

08011528 <_ungetc_r>:
 8011528:	00bfffc4 	movi	r2,-1
 801152c:	28806126 	beq	r5,r2,80116b4 <_ungetc_r+0x18c>
 8011530:	defffb04 	addi	sp,sp,-20
 8011534:	dcc00315 	stw	r19,12(sp)
 8011538:	dc400115 	stw	r17,4(sp)
 801153c:	dc000015 	stw	r16,0(sp)
 8011540:	dfc00415 	stw	ra,16(sp)
 8011544:	dc800215 	stw	r18,8(sp)
 8011548:	2023883a 	mov	r17,r4
 801154c:	3021883a 	mov	r16,r6
 8011550:	2827883a 	mov	r19,r5
 8011554:	20000226 	beq	r4,zero,8011560 <_ungetc_r+0x38>
 8011558:	20800e17 	ldw	r2,56(r4)
 801155c:	10002e26 	beq	r2,zero,8011618 <_ungetc_r+0xf0>
 8011560:	80c0030b 	ldhu	r3,12(r16)
 8011564:	1888000c 	andi	r2,r3,8192
 8011568:	1000051e 	bne	r2,zero,8011580 <_ungetc_r+0x58>
 801156c:	81001917 	ldw	r4,100(r16)
 8011570:	00b7ffc4 	movi	r2,-8193
 8011574:	18c80014 	ori	r3,r3,8192
 8011578:	2084703a 	and	r2,r4,r2
 801157c:	80801915 	stw	r2,100(r16)
 8011580:	00bff7c4 	movi	r2,-33
 8011584:	1884703a 	and	r2,r3,r2
 8011588:	8080030d 	sth	r2,12(r16)
 801158c:	1900010c 	andi	r4,r3,4
 8011590:	2000061e 	bne	r4,zero,80115ac <_ungetc_r+0x84>
 8011594:	1900040c 	andi	r4,r3,16
 8011598:	20001d26 	beq	r4,zero,8011610 <_ungetc_r+0xe8>
 801159c:	18c0020c 	andi	r3,r3,8
 80115a0:	1800331e 	bne	r3,zero,8011670 <_ungetc_r+0x148>
 80115a4:	10800114 	ori	r2,r2,4
 80115a8:	8080030d 	sth	r2,12(r16)
 80115ac:	80800c17 	ldw	r2,48(r16)
 80115b0:	9c803fcc 	andi	r18,r19,255
 80115b4:	10001a26 	beq	r2,zero,8011620 <_ungetc_r+0xf8>
 80115b8:	80c00117 	ldw	r3,4(r16)
 80115bc:	80800d17 	ldw	r2,52(r16)
 80115c0:	18800f0e 	bge	r3,r2,8011600 <_ungetc_r+0xd8>
 80115c4:	80c00017 	ldw	r3,0(r16)
 80115c8:	9005883a 	mov	r2,r18
 80115cc:	193fffc4 	addi	r4,r3,-1
 80115d0:	81000015 	stw	r4,0(r16)
 80115d4:	1cffffc5 	stb	r19,-1(r3)
 80115d8:	80c00117 	ldw	r3,4(r16)
 80115dc:	18c00044 	addi	r3,r3,1
 80115e0:	80c00115 	stw	r3,4(r16)
 80115e4:	dfc00417 	ldw	ra,16(sp)
 80115e8:	dcc00317 	ldw	r19,12(sp)
 80115ec:	dc800217 	ldw	r18,8(sp)
 80115f0:	dc400117 	ldw	r17,4(sp)
 80115f4:	dc000017 	ldw	r16,0(sp)
 80115f8:	dec00504 	addi	sp,sp,20
 80115fc:	f800283a 	ret
 8011600:	800b883a 	mov	r5,r16
 8011604:	8809883a 	mov	r4,r17
 8011608:	80114540 	call	8011454 <__submore>
 801160c:	103fed26 	beq	r2,zero,80115c4 <__alt_data_end+0xfc0115c4>
 8011610:	00bfffc4 	movi	r2,-1
 8011614:	003ff306 	br	80115e4 <__alt_data_end+0xfc0115e4>
 8011618:	80030280 	call	8003028 <__sinit>
 801161c:	003fd006 	br	8011560 <__alt_data_end+0xfc011560>
 8011620:	80c00417 	ldw	r3,16(r16)
 8011624:	80800017 	ldw	r2,0(r16)
 8011628:	18000326 	beq	r3,zero,8011638 <_ungetc_r+0x110>
 801162c:	1880022e 	bgeu	r3,r2,8011638 <_ungetc_r+0x110>
 8011630:	10ffffc3 	ldbu	r3,-1(r2)
 8011634:	90c01826 	beq	r18,r3,8011698 <_ungetc_r+0x170>
 8011638:	81400117 	ldw	r5,4(r16)
 801163c:	80800e15 	stw	r2,56(r16)
 8011640:	008000c4 	movi	r2,3
 8011644:	81001004 	addi	r4,r16,64
 8011648:	80c01084 	addi	r3,r16,66
 801164c:	80800d15 	stw	r2,52(r16)
 8011650:	00800044 	movi	r2,1
 8011654:	80800115 	stw	r2,4(r16)
 8011658:	81400f15 	stw	r5,60(r16)
 801165c:	81000c15 	stw	r4,48(r16)
 8011660:	84c01085 	stb	r19,66(r16)
 8011664:	80c00015 	stw	r3,0(r16)
 8011668:	9005883a 	mov	r2,r18
 801166c:	003fdd06 	br	80115e4 <__alt_data_end+0xfc0115e4>
 8011670:	800b883a 	mov	r5,r16
 8011674:	8809883a 	mov	r4,r17
 8011678:	8002c3c0 	call	8002c3c <_fflush_r>
 801167c:	103fe41e 	bne	r2,zero,8011610 <__alt_data_end+0xfc011610>
 8011680:	8080030b 	ldhu	r2,12(r16)
 8011684:	00fffdc4 	movi	r3,-9
 8011688:	80000215 	stw	zero,8(r16)
 801168c:	1884703a 	and	r2,r3,r2
 8011690:	80000615 	stw	zero,24(r16)
 8011694:	003fc306 	br	80115a4 <__alt_data_end+0xfc0115a4>
 8011698:	80c00117 	ldw	r3,4(r16)
 801169c:	10bfffc4 	addi	r2,r2,-1
 80116a0:	80800015 	stw	r2,0(r16)
 80116a4:	18800044 	addi	r2,r3,1
 80116a8:	80800115 	stw	r2,4(r16)
 80116ac:	9005883a 	mov	r2,r18
 80116b0:	003fcc06 	br	80115e4 <__alt_data_end+0xfc0115e4>
 80116b4:	00bfffc4 	movi	r2,-1
 80116b8:	f800283a 	ret

080116bc <ungetc>:
 80116bc:	008200b4 	movhi	r2,2050
 80116c0:	10b77404 	addi	r2,r2,-8752
 80116c4:	280d883a 	mov	r6,r5
 80116c8:	200b883a 	mov	r5,r4
 80116cc:	11000017 	ldw	r4,0(r2)
 80116d0:	80115281 	jmpi	8011528 <_ungetc_r>

080116d4 <__sprint_r.part.0>:
 80116d4:	28801917 	ldw	r2,100(r5)
 80116d8:	defff604 	addi	sp,sp,-40
 80116dc:	dd400515 	stw	r21,20(sp)
 80116e0:	dfc00915 	stw	ra,36(sp)
 80116e4:	df000815 	stw	fp,32(sp)
 80116e8:	ddc00715 	stw	r23,28(sp)
 80116ec:	dd800615 	stw	r22,24(sp)
 80116f0:	dd000415 	stw	r20,16(sp)
 80116f4:	dcc00315 	stw	r19,12(sp)
 80116f8:	dc800215 	stw	r18,8(sp)
 80116fc:	dc400115 	stw	r17,4(sp)
 8011700:	dc000015 	stw	r16,0(sp)
 8011704:	1088000c 	andi	r2,r2,8192
 8011708:	302b883a 	mov	r21,r6
 801170c:	10002e26 	beq	r2,zero,80117c8 <__sprint_r.part.0+0xf4>
 8011710:	30800217 	ldw	r2,8(r6)
 8011714:	35800017 	ldw	r22,0(r6)
 8011718:	10002926 	beq	r2,zero,80117c0 <__sprint_r.part.0+0xec>
 801171c:	2827883a 	mov	r19,r5
 8011720:	2029883a 	mov	r20,r4
 8011724:	b5c00104 	addi	r23,r22,4
 8011728:	04bfffc4 	movi	r18,-1
 801172c:	bc400017 	ldw	r17,0(r23)
 8011730:	b4000017 	ldw	r16,0(r22)
 8011734:	0039883a 	mov	fp,zero
 8011738:	8822d0ba 	srli	r17,r17,2
 801173c:	8800031e 	bne	r17,zero,801174c <__sprint_r.part.0+0x78>
 8011740:	00001806 	br	80117a4 <__sprint_r.part.0+0xd0>
 8011744:	84000104 	addi	r16,r16,4
 8011748:	8f001526 	beq	r17,fp,80117a0 <__sprint_r.part.0+0xcc>
 801174c:	81400017 	ldw	r5,0(r16)
 8011750:	980d883a 	mov	r6,r19
 8011754:	a009883a 	mov	r4,r20
 8011758:	801300c0 	call	801300c <_fputwc_r>
 801175c:	e7000044 	addi	fp,fp,1
 8011760:	14bff81e 	bne	r2,r18,8011744 <__alt_data_end+0xfc011744>
 8011764:	9005883a 	mov	r2,r18
 8011768:	a8000215 	stw	zero,8(r21)
 801176c:	a8000115 	stw	zero,4(r21)
 8011770:	dfc00917 	ldw	ra,36(sp)
 8011774:	df000817 	ldw	fp,32(sp)
 8011778:	ddc00717 	ldw	r23,28(sp)
 801177c:	dd800617 	ldw	r22,24(sp)
 8011780:	dd400517 	ldw	r21,20(sp)
 8011784:	dd000417 	ldw	r20,16(sp)
 8011788:	dcc00317 	ldw	r19,12(sp)
 801178c:	dc800217 	ldw	r18,8(sp)
 8011790:	dc400117 	ldw	r17,4(sp)
 8011794:	dc000017 	ldw	r16,0(sp)
 8011798:	dec00a04 	addi	sp,sp,40
 801179c:	f800283a 	ret
 80117a0:	a8800217 	ldw	r2,8(r21)
 80117a4:	8c63883a 	add	r17,r17,r17
 80117a8:	8c63883a 	add	r17,r17,r17
 80117ac:	1445c83a 	sub	r2,r2,r17
 80117b0:	a8800215 	stw	r2,8(r21)
 80117b4:	b5800204 	addi	r22,r22,8
 80117b8:	bdc00204 	addi	r23,r23,8
 80117bc:	103fdb1e 	bne	r2,zero,801172c <__alt_data_end+0xfc01172c>
 80117c0:	0005883a 	mov	r2,zero
 80117c4:	003fe806 	br	8011768 <__alt_data_end+0xfc011768>
 80117c8:	800a9700 	call	800a970 <__sfvwrite_r>
 80117cc:	003fe606 	br	8011768 <__alt_data_end+0xfc011768>

080117d0 <__sprint_r>:
 80117d0:	30c00217 	ldw	r3,8(r6)
 80117d4:	18000126 	beq	r3,zero,80117dc <__sprint_r+0xc>
 80117d8:	80116d41 	jmpi	80116d4 <__sprint_r.part.0>
 80117dc:	30000115 	stw	zero,4(r6)
 80117e0:	0005883a 	mov	r2,zero
 80117e4:	f800283a 	ret

080117e8 <___vfiprintf_internal_r>:
 80117e8:	deffca04 	addi	sp,sp,-216
 80117ec:	dd403115 	stw	r21,196(sp)
 80117f0:	dfc03515 	stw	ra,212(sp)
 80117f4:	df003415 	stw	fp,208(sp)
 80117f8:	ddc03315 	stw	r23,204(sp)
 80117fc:	dd803215 	stw	r22,200(sp)
 8011800:	dd003015 	stw	r20,192(sp)
 8011804:	dcc02f15 	stw	r19,188(sp)
 8011808:	dc802e15 	stw	r18,184(sp)
 801180c:	dc402d15 	stw	r17,180(sp)
 8011810:	dc002c15 	stw	r16,176(sp)
 8011814:	d9002115 	stw	r4,132(sp)
 8011818:	d9402015 	stw	r5,128(sp)
 801181c:	d9c02215 	stw	r7,136(sp)
 8011820:	302b883a 	mov	r21,r6
 8011824:	20000226 	beq	r4,zero,8011830 <___vfiprintf_internal_r+0x48>
 8011828:	20800e17 	ldw	r2,56(r4)
 801182c:	1000cf26 	beq	r2,zero,8011b6c <___vfiprintf_internal_r+0x384>
 8011830:	d8c02017 	ldw	r3,128(sp)
 8011834:	1880030b 	ldhu	r2,12(r3)
 8011838:	10c8000c 	andi	r3,r2,8192
 801183c:	1800071e 	bne	r3,zero,801185c <___vfiprintf_internal_r+0x74>
 8011840:	d9402017 	ldw	r5,128(sp)
 8011844:	00f7ffc4 	movi	r3,-8193
 8011848:	10880014 	ori	r2,r2,8192
 801184c:	29001917 	ldw	r4,100(r5)
 8011850:	2880030d 	sth	r2,12(r5)
 8011854:	20c6703a 	and	r3,r4,r3
 8011858:	28c01915 	stw	r3,100(r5)
 801185c:	10c0020c 	andi	r3,r2,8
 8011860:	1800a526 	beq	r3,zero,8011af8 <___vfiprintf_internal_r+0x310>
 8011864:	d9002017 	ldw	r4,128(sp)
 8011868:	20c00417 	ldw	r3,16(r4)
 801186c:	1800a226 	beq	r3,zero,8011af8 <___vfiprintf_internal_r+0x310>
 8011870:	1080068c 	andi	r2,r2,26
 8011874:	00c00284 	movi	r3,10
 8011878:	10c0a826 	beq	r2,r3,8011b1c <___vfiprintf_internal_r+0x334>
 801187c:	d9001a04 	addi	r4,sp,104
 8011880:	d94019c4 	addi	r5,sp,103
 8011884:	048200b4 	movhi	r18,2050
 8011888:	2145c83a 	sub	r2,r4,r5
 801188c:	94b01e04 	addi	r18,r18,-16264
 8011890:	d9001e15 	stw	r4,120(sp)
 8011894:	d9401f15 	stw	r5,124(sp)
 8011898:	dec01a15 	stw	sp,104(sp)
 801189c:	d8001c15 	stw	zero,112(sp)
 80118a0:	d8001b15 	stw	zero,108(sp)
 80118a4:	d811883a 	mov	r8,sp
 80118a8:	d8002615 	stw	zero,152(sp)
 80118ac:	d8002415 	stw	zero,144(sp)
 80118b0:	d8802815 	stw	r2,160(sp)
 80118b4:	a82d883a 	mov	r22,r21
 80118b8:	b0800007 	ldb	r2,0(r22)
 80118bc:	10040d26 	beq	r2,zero,80128f4 <___vfiprintf_internal_r+0x110c>
 80118c0:	00c00944 	movi	r3,37
 80118c4:	b029883a 	mov	r20,r22
 80118c8:	10c0021e 	bne	r2,r3,80118d4 <___vfiprintf_internal_r+0xec>
 80118cc:	00001606 	br	8011928 <___vfiprintf_internal_r+0x140>
 80118d0:	10c00326 	beq	r2,r3,80118e0 <___vfiprintf_internal_r+0xf8>
 80118d4:	a5000044 	addi	r20,r20,1
 80118d8:	a0800007 	ldb	r2,0(r20)
 80118dc:	103ffc1e 	bne	r2,zero,80118d0 <__alt_data_end+0xfc0118d0>
 80118e0:	a5a1c83a 	sub	r16,r20,r22
 80118e4:	80001026 	beq	r16,zero,8011928 <___vfiprintf_internal_r+0x140>
 80118e8:	d8c01c17 	ldw	r3,112(sp)
 80118ec:	d8801b17 	ldw	r2,108(sp)
 80118f0:	45800015 	stw	r22,0(r8)
 80118f4:	80c7883a 	add	r3,r16,r3
 80118f8:	10800044 	addi	r2,r2,1
 80118fc:	44000115 	stw	r16,4(r8)
 8011900:	d8c01c15 	stw	r3,112(sp)
 8011904:	d8801b15 	stw	r2,108(sp)
 8011908:	010001c4 	movi	r4,7
 801190c:	2080750e 	bge	r4,r2,8011ae4 <___vfiprintf_internal_r+0x2fc>
 8011910:	1803951e 	bne	r3,zero,8012768 <___vfiprintf_internal_r+0xf80>
 8011914:	d8c02417 	ldw	r3,144(sp)
 8011918:	d8001b15 	stw	zero,108(sp)
 801191c:	d811883a 	mov	r8,sp
 8011920:	1c07883a 	add	r3,r3,r16
 8011924:	d8c02415 	stw	r3,144(sp)
 8011928:	a0800007 	ldb	r2,0(r20)
 801192c:	1002e026 	beq	r2,zero,80124b0 <___vfiprintf_internal_r+0xcc8>
 8011930:	a5800044 	addi	r22,r20,1
 8011934:	a0c00047 	ldb	r3,1(r20)
 8011938:	d8001d85 	stb	zero,118(sp)
 801193c:	0027883a 	mov	r19,zero
 8011940:	d8002305 	stb	zero,140(sp)
 8011944:	043fffc4 	movi	r16,-1
 8011948:	d8002515 	stw	zero,148(sp)
 801194c:	0023883a 	mov	r17,zero
 8011950:	05001604 	movi	r20,88
 8011954:	05400244 	movi	r21,9
 8011958:	402f883a 	mov	r23,r8
 801195c:	b5800044 	addi	r22,r22,1
 8011960:	18bff804 	addi	r2,r3,-32
 8011964:	a0827736 	bltu	r20,r2,8012344 <___vfiprintf_internal_r+0xb5c>
 8011968:	100490ba 	slli	r2,r2,2
 801196c:	01020074 	movhi	r4,2049
 8011970:	21066004 	addi	r4,r4,6528
 8011974:	1105883a 	add	r2,r2,r4
 8011978:	10800017 	ldw	r2,0(r2)
 801197c:	1000683a 	jmp	r2
 8011980:	08012044 	addi	zero,at,1153
 8011984:	08012344 	addi	zero,at,1165
 8011988:	08012344 	addi	zero,at,1165
 801198c:	08012060 	cmpeqi	zero,at,1153
 8011990:	08012344 	addi	zero,at,1165
 8011994:	08012344 	addi	zero,at,1165
 8011998:	08012344 	addi	zero,at,1165
 801199c:	08012344 	addi	zero,at,1165
 80119a0:	08012344 	addi	zero,at,1165
 80119a4:	08012344 	addi	zero,at,1165
 80119a8:	08012268 	cmpgeui	zero,at,1161
 80119ac:	0801228c 	andi	zero,at,1162
 80119b0:	08012344 	addi	zero,at,1165
 80119b4:	08011b84 	addi	zero,at,1134
 80119b8:	080122a0 	cmpeqi	zero,at,1162
 80119bc:	08012344 	addi	zero,at,1165
 80119c0:	0801206c 	andhi	zero,at,1153
 80119c4:	08012078 	rdprs	zero,at,1153
 80119c8:	08012078 	rdprs	zero,at,1153
 80119cc:	08012078 	rdprs	zero,at,1153
 80119d0:	08012078 	rdprs	zero,at,1153
 80119d4:	08012078 	rdprs	zero,at,1153
 80119d8:	08012078 	rdprs	zero,at,1153
 80119dc:	08012078 	rdprs	zero,at,1153
 80119e0:	08012078 	rdprs	zero,at,1153
 80119e4:	08012078 	rdprs	zero,at,1153
 80119e8:	08012344 	addi	zero,at,1165
 80119ec:	08012344 	addi	zero,at,1165
 80119f0:	08012344 	addi	zero,at,1165
 80119f4:	08012344 	addi	zero,at,1165
 80119f8:	08012344 	addi	zero,at,1165
 80119fc:	08012344 	addi	zero,at,1165
 8011a00:	08012344 	addi	zero,at,1165
 8011a04:	08012344 	addi	zero,at,1165
 8011a08:	08012344 	addi	zero,at,1165
 8011a0c:	08012344 	addi	zero,at,1165
 8011a10:	080120b8 	rdprs	zero,at,1154
 8011a14:	08012344 	addi	zero,at,1165
 8011a18:	08012344 	addi	zero,at,1165
 8011a1c:	08012344 	addi	zero,at,1165
 8011a20:	08012344 	addi	zero,at,1165
 8011a24:	08012344 	addi	zero,at,1165
 8011a28:	08012344 	addi	zero,at,1165
 8011a2c:	08012344 	addi	zero,at,1165
 8011a30:	08012344 	addi	zero,at,1165
 8011a34:	08012344 	addi	zero,at,1165
 8011a38:	08012344 	addi	zero,at,1165
 8011a3c:	080120f4 	orhi	zero,at,1155
 8011a40:	08012344 	addi	zero,at,1165
 8011a44:	08012344 	addi	zero,at,1165
 8011a48:	08012344 	addi	zero,at,1165
 8011a4c:	08012344 	addi	zero,at,1165
 8011a50:	08012344 	addi	zero,at,1165
 8011a54:	08012150 	cmplti	zero,at,1157
 8011a58:	08012344 	addi	zero,at,1165
 8011a5c:	08012344 	addi	zero,at,1165
 8011a60:	080121c4 	addi	zero,at,1159
 8011a64:	08012344 	addi	zero,at,1165
 8011a68:	08012344 	addi	zero,at,1165
 8011a6c:	08012344 	addi	zero,at,1165
 8011a70:	08012344 	addi	zero,at,1165
 8011a74:	08012344 	addi	zero,at,1165
 8011a78:	08012344 	addi	zero,at,1165
 8011a7c:	08012344 	addi	zero,at,1165
 8011a80:	08012344 	addi	zero,at,1165
 8011a84:	08012344 	addi	zero,at,1165
 8011a88:	08012344 	addi	zero,at,1165
 8011a8c:	08011f6c 	andhi	zero,at,1149
 8011a90:	08011f9c 	xori	zero,at,1150
 8011a94:	08012344 	addi	zero,at,1165
 8011a98:	08012344 	addi	zero,at,1165
 8011a9c:	08012344 	addi	zero,at,1165
 8011aa0:	080122ec 	andhi	zero,at,1163
 8011aa4:	08011f9c 	xori	zero,at,1150
 8011aa8:	08012344 	addi	zero,at,1165
 8011aac:	08012344 	addi	zero,at,1165
 8011ab0:	08011e44 	addi	zero,at,1145
 8011ab4:	08012344 	addi	zero,at,1165
 8011ab8:	08011e58 	cmpnei	zero,at,1145
 8011abc:	08011e90 	cmplti	zero,at,1146
 8011ac0:	08011b90 	cmplti	zero,at,1134
 8011ac4:	08011e38 	rdprs	zero,at,1144
 8011ac8:	08012344 	addi	zero,at,1165
 8011acc:	08012204 	addi	zero,at,1160
 8011ad0:	08012344 	addi	zero,at,1165
 8011ad4:	08012250 	cmplti	zero,at,1161
 8011ad8:	08012344 	addi	zero,at,1165
 8011adc:	08012344 	addi	zero,at,1165
 8011ae0:	08011f14 	ori	zero,at,1148
 8011ae4:	42000204 	addi	r8,r8,8
 8011ae8:	d8c02417 	ldw	r3,144(sp)
 8011aec:	1c07883a 	add	r3,r3,r16
 8011af0:	d8c02415 	stw	r3,144(sp)
 8011af4:	003f8c06 	br	8011928 <__alt_data_end+0xfc011928>
 8011af8:	d9402017 	ldw	r5,128(sp)
 8011afc:	d9002117 	ldw	r4,132(sp)
 8011b00:	8008bfc0 	call	8008bfc <__swsetup_r>
 8011b04:	1003c11e 	bne	r2,zero,8012a0c <___vfiprintf_internal_r+0x1224>
 8011b08:	d9402017 	ldw	r5,128(sp)
 8011b0c:	00c00284 	movi	r3,10
 8011b10:	2880030b 	ldhu	r2,12(r5)
 8011b14:	1080068c 	andi	r2,r2,26
 8011b18:	10ff581e 	bne	r2,r3,801187c <__alt_data_end+0xfc01187c>
 8011b1c:	d8c02017 	ldw	r3,128(sp)
 8011b20:	1880038f 	ldh	r2,14(r3)
 8011b24:	103f5516 	blt	r2,zero,801187c <__alt_data_end+0xfc01187c>
 8011b28:	d9c02217 	ldw	r7,136(sp)
 8011b2c:	d9002117 	ldw	r4,132(sp)
 8011b30:	a80d883a 	mov	r6,r21
 8011b34:	180b883a 	mov	r5,r3
 8011b38:	8012d100 	call	8012d10 <__sbprintf>
 8011b3c:	dfc03517 	ldw	ra,212(sp)
 8011b40:	df003417 	ldw	fp,208(sp)
 8011b44:	ddc03317 	ldw	r23,204(sp)
 8011b48:	dd803217 	ldw	r22,200(sp)
 8011b4c:	dd403117 	ldw	r21,196(sp)
 8011b50:	dd003017 	ldw	r20,192(sp)
 8011b54:	dcc02f17 	ldw	r19,188(sp)
 8011b58:	dc802e17 	ldw	r18,184(sp)
 8011b5c:	dc402d17 	ldw	r17,180(sp)
 8011b60:	dc002c17 	ldw	r16,176(sp)
 8011b64:	dec03604 	addi	sp,sp,216
 8011b68:	f800283a 	ret
 8011b6c:	80030280 	call	8003028 <__sinit>
 8011b70:	003f2f06 	br	8011830 <__alt_data_end+0xfc011830>
 8011b74:	d8c02517 	ldw	r3,148(sp)
 8011b78:	d8802215 	stw	r2,136(sp)
 8011b7c:	00c7c83a 	sub	r3,zero,r3
 8011b80:	d8c02515 	stw	r3,148(sp)
 8011b84:	8c400114 	ori	r17,r17,4
 8011b88:	b0c00007 	ldb	r3,0(r22)
 8011b8c:	003f7306 	br	801195c <__alt_data_end+0xfc01195c>
 8011b90:	00800c04 	movi	r2,48
 8011b94:	d9402217 	ldw	r5,136(sp)
 8011b98:	d8801d05 	stb	r2,116(sp)
 8011b9c:	00801e04 	movi	r2,120
 8011ba0:	d8801d45 	stb	r2,117(sp)
 8011ba4:	d8001d85 	stb	zero,118(sp)
 8011ba8:	b811883a 	mov	r8,r23
 8011bac:	28c00104 	addi	r3,r5,4
 8011bb0:	2cc00017 	ldw	r19,0(r5)
 8011bb4:	0029883a 	mov	r20,zero
 8011bb8:	88800094 	ori	r2,r17,2
 8011bbc:	80032516 	blt	r16,zero,8012854 <___vfiprintf_internal_r+0x106c>
 8011bc0:	00bfdfc4 	movi	r2,-129
 8011bc4:	88a2703a 	and	r17,r17,r2
 8011bc8:	d8c02215 	stw	r3,136(sp)
 8011bcc:	8c400094 	ori	r17,r17,2
 8011bd0:	98032a1e 	bne	r19,zero,801287c <___vfiprintf_internal_r+0x1094>
 8011bd4:	008200b4 	movhi	r2,2050
 8011bd8:	10aef304 	addi	r2,r2,-17460
 8011bdc:	d8802615 	stw	r2,152(sp)
 8011be0:	002b883a 	mov	r21,zero
 8011be4:	8001741e 	bne	r16,zero,80121b8 <___vfiprintf_internal_r+0x9d0>
 8011be8:	0021883a 	mov	r16,zero
 8011bec:	0029883a 	mov	r20,zero
 8011bf0:	ddc01a04 	addi	r23,sp,104
 8011bf4:	8027883a 	mov	r19,r16
 8011bf8:	8500010e 	bge	r16,r20,8011c00 <___vfiprintf_internal_r+0x418>
 8011bfc:	a027883a 	mov	r19,r20
 8011c00:	ad403fcc 	andi	r21,r21,255
 8011c04:	ad40201c 	xori	r21,r21,128
 8011c08:	ad7fe004 	addi	r21,r21,-128
 8011c0c:	a8000126 	beq	r21,zero,8011c14 <___vfiprintf_internal_r+0x42c>
 8011c10:	9cc00044 	addi	r19,r19,1
 8011c14:	89c0008c 	andi	r7,r17,2
 8011c18:	38000126 	beq	r7,zero,8011c20 <___vfiprintf_internal_r+0x438>
 8011c1c:	9cc00084 	addi	r19,r19,2
 8011c20:	88c0210c 	andi	r3,r17,132
 8011c24:	1801dd1e 	bne	r3,zero,801239c <___vfiprintf_internal_r+0xbb4>
 8011c28:	d9402517 	ldw	r5,148(sp)
 8011c2c:	2cebc83a 	sub	r21,r5,r19
 8011c30:	0541da0e 	bge	zero,r21,801239c <___vfiprintf_internal_r+0xbb4>
 8011c34:	07000404 	movi	fp,16
 8011c38:	d8801c17 	ldw	r2,112(sp)
 8011c3c:	e543be0e 	bge	fp,r21,8012b38 <___vfiprintf_internal_r+0x1350>
 8011c40:	014200b4 	movhi	r5,2050
 8011c44:	29702204 	addi	r5,r5,-16248
 8011c48:	dc002715 	stw	r16,156(sp)
 8011c4c:	d9801b17 	ldw	r6,108(sp)
 8011c50:	a821883a 	mov	r16,r21
 8011c54:	d9402315 	stw	r5,140(sp)
 8011c58:	028001c4 	movi	r10,7
 8011c5c:	d9c02915 	stw	r7,164(sp)
 8011c60:	182b883a 	mov	r21,r3
 8011c64:	00000506 	br	8011c7c <___vfiprintf_internal_r+0x494>
 8011c68:	31000084 	addi	r4,r6,2
 8011c6c:	42000204 	addi	r8,r8,8
 8011c70:	180d883a 	mov	r6,r3
 8011c74:	843ffc04 	addi	r16,r16,-16
 8011c78:	e4000f0e 	bge	fp,r16,8011cb8 <___vfiprintf_internal_r+0x4d0>
 8011c7c:	010200b4 	movhi	r4,2050
 8011c80:	10800404 	addi	r2,r2,16
 8011c84:	30c00044 	addi	r3,r6,1
 8011c88:	21302204 	addi	r4,r4,-16248
 8011c8c:	41000015 	stw	r4,0(r8)
 8011c90:	47000115 	stw	fp,4(r8)
 8011c94:	d8801c15 	stw	r2,112(sp)
 8011c98:	d8c01b15 	stw	r3,108(sp)
 8011c9c:	50fff20e 	bge	r10,r3,8011c68 <__alt_data_end+0xfc011c68>
 8011ca0:	1001b21e 	bne	r2,zero,801236c <___vfiprintf_internal_r+0xb84>
 8011ca4:	843ffc04 	addi	r16,r16,-16
 8011ca8:	000d883a 	mov	r6,zero
 8011cac:	01000044 	movi	r4,1
 8011cb0:	d811883a 	mov	r8,sp
 8011cb4:	e43ff116 	blt	fp,r16,8011c7c <__alt_data_end+0xfc011c7c>
 8011cb8:	a807883a 	mov	r3,r21
 8011cbc:	d9c02917 	ldw	r7,164(sp)
 8011cc0:	802b883a 	mov	r21,r16
 8011cc4:	dc002717 	ldw	r16,156(sp)
 8011cc8:	d9402317 	ldw	r5,140(sp)
 8011ccc:	a885883a 	add	r2,r21,r2
 8011cd0:	45400115 	stw	r21,4(r8)
 8011cd4:	41400015 	stw	r5,0(r8)
 8011cd8:	d8801c15 	stw	r2,112(sp)
 8011cdc:	d9001b15 	stw	r4,108(sp)
 8011ce0:	014001c4 	movi	r5,7
 8011ce4:	29026216 	blt	r5,r4,8012670 <___vfiprintf_internal_r+0xe88>
 8011ce8:	d9801d87 	ldb	r6,118(sp)
 8011cec:	42000204 	addi	r8,r8,8
 8011cf0:	21400044 	addi	r5,r4,1
 8011cf4:	3001ae1e 	bne	r6,zero,80123b0 <___vfiprintf_internal_r+0xbc8>
 8011cf8:	3801bb26 	beq	r7,zero,80123e8 <___vfiprintf_internal_r+0xc00>
 8011cfc:	d9001d04 	addi	r4,sp,116
 8011d00:	10800084 	addi	r2,r2,2
 8011d04:	41000015 	stw	r4,0(r8)
 8011d08:	01000084 	movi	r4,2
 8011d0c:	41000115 	stw	r4,4(r8)
 8011d10:	d8801c15 	stw	r2,112(sp)
 8011d14:	d9401b15 	stw	r5,108(sp)
 8011d18:	010001c4 	movi	r4,7
 8011d1c:	2142680e 	bge	r4,r5,80126c0 <___vfiprintf_internal_r+0xed8>
 8011d20:	1002b11e 	bne	r2,zero,80127e8 <___vfiprintf_internal_r+0x1000>
 8011d24:	01802004 	movi	r6,128
 8011d28:	01400044 	movi	r5,1
 8011d2c:	0009883a 	mov	r4,zero
 8011d30:	d811883a 	mov	r8,sp
 8011d34:	1981ae1e 	bne	r3,r6,80123f0 <___vfiprintf_internal_r+0xc08>
 8011d38:	d8c02517 	ldw	r3,148(sp)
 8011d3c:	1cf9c83a 	sub	fp,r3,r19
 8011d40:	0701ab0e 	bge	zero,fp,80123f0 <___vfiprintf_internal_r+0xc08>
 8011d44:	05400404 	movi	r21,16
 8011d48:	af03a90e 	bge	r21,fp,8012bf0 <___vfiprintf_internal_r+0x1408>
 8011d4c:	014200b4 	movhi	r5,2050
 8011d50:	29701e04 	addi	r5,r5,-16264
 8011d54:	d9402315 	stw	r5,140(sp)
 8011d58:	01c001c4 	movi	r7,7
 8011d5c:	00000506 	br	8011d74 <___vfiprintf_internal_r+0x58c>
 8011d60:	21800084 	addi	r6,r4,2
 8011d64:	42000204 	addi	r8,r8,8
 8011d68:	1809883a 	mov	r4,r3
 8011d6c:	e73ffc04 	addi	fp,fp,-16
 8011d70:	af000d0e 	bge	r21,fp,8011da8 <___vfiprintf_internal_r+0x5c0>
 8011d74:	10800404 	addi	r2,r2,16
 8011d78:	20c00044 	addi	r3,r4,1
 8011d7c:	44800015 	stw	r18,0(r8)
 8011d80:	45400115 	stw	r21,4(r8)
 8011d84:	d8801c15 	stw	r2,112(sp)
 8011d88:	d8c01b15 	stw	r3,108(sp)
 8011d8c:	38fff40e 	bge	r7,r3,8011d60 <__alt_data_end+0xfc011d60>
 8011d90:	10022b1e 	bne	r2,zero,8012640 <___vfiprintf_internal_r+0xe58>
 8011d94:	e73ffc04 	addi	fp,fp,-16
 8011d98:	01800044 	movi	r6,1
 8011d9c:	0009883a 	mov	r4,zero
 8011da0:	d811883a 	mov	r8,sp
 8011da4:	af3ff316 	blt	r21,fp,8011d74 <__alt_data_end+0xfc011d74>
 8011da8:	d8c02317 	ldw	r3,140(sp)
 8011dac:	1705883a 	add	r2,r2,fp
 8011db0:	47000115 	stw	fp,4(r8)
 8011db4:	40c00015 	stw	r3,0(r8)
 8011db8:	d8801c15 	stw	r2,112(sp)
 8011dbc:	d9801b15 	stw	r6,108(sp)
 8011dc0:	00c001c4 	movi	r3,7
 8011dc4:	19829416 	blt	r3,r6,8012818 <___vfiprintf_internal_r+0x1030>
 8011dc8:	8521c83a 	sub	r16,r16,r20
 8011dcc:	42000204 	addi	r8,r8,8
 8011dd0:	31400044 	addi	r5,r6,1
 8011dd4:	3009883a 	mov	r4,r6
 8011dd8:	04018716 	blt	zero,r16,80123f8 <___vfiprintf_internal_r+0xc10>
 8011ddc:	a085883a 	add	r2,r20,r2
 8011de0:	45c00015 	stw	r23,0(r8)
 8011de4:	45000115 	stw	r20,4(r8)
 8011de8:	d8801c15 	stw	r2,112(sp)
 8011dec:	d9401b15 	stw	r5,108(sp)
 8011df0:	00c001c4 	movi	r3,7
 8011df4:	1941c20e 	bge	r3,r5,8012500 <___vfiprintf_internal_r+0xd18>
 8011df8:	1002531e 	bne	r2,zero,8012748 <___vfiprintf_internal_r+0xf60>
 8011dfc:	d8001b15 	stw	zero,108(sp)
 8011e00:	8c40010c 	andi	r17,r17,4
 8011e04:	88023226 	beq	r17,zero,80126d0 <___vfiprintf_internal_r+0xee8>
 8011e08:	d9002517 	ldw	r4,148(sp)
 8011e0c:	24e3c83a 	sub	r17,r4,r19
 8011e10:	04432916 	blt	zero,r17,8012ab8 <___vfiprintf_internal_r+0x12d0>
 8011e14:	d8802517 	ldw	r2,148(sp)
 8011e18:	14c0010e 	bge	r2,r19,8011e20 <___vfiprintf_internal_r+0x638>
 8011e1c:	9805883a 	mov	r2,r19
 8011e20:	d8c02417 	ldw	r3,144(sp)
 8011e24:	1887883a 	add	r3,r3,r2
 8011e28:	d8c02415 	stw	r3,144(sp)
 8011e2c:	d8001b15 	stw	zero,108(sp)
 8011e30:	d811883a 	mov	r8,sp
 8011e34:	003ea006 	br	80118b8 <__alt_data_end+0xfc0118b8>
 8011e38:	8c400814 	ori	r17,r17,32
 8011e3c:	b0c00007 	ldb	r3,0(r22)
 8011e40:	003ec606 	br	801195c <__alt_data_end+0xfc01195c>
 8011e44:	b0c00007 	ldb	r3,0(r22)
 8011e48:	00801b04 	movi	r2,108
 8011e4c:	18832026 	beq	r3,r2,8012ad0 <___vfiprintf_internal_r+0x12e8>
 8011e50:	8c400414 	ori	r17,r17,16
 8011e54:	003ec106 	br	801195c <__alt_data_end+0xfc01195c>
 8011e58:	9cc03fcc 	andi	r19,r19,255
 8011e5c:	b811883a 	mov	r8,r23
 8011e60:	9803981e 	bne	r19,zero,8012cc4 <___vfiprintf_internal_r+0x14dc>
 8011e64:	8880080c 	andi	r2,r17,32
 8011e68:	1002be26 	beq	r2,zero,8012964 <___vfiprintf_internal_r+0x117c>
 8011e6c:	d9002217 	ldw	r4,136(sp)
 8011e70:	d9402417 	ldw	r5,144(sp)
 8011e74:	20800017 	ldw	r2,0(r4)
 8011e78:	2807d7fa 	srai	r3,r5,31
 8011e7c:	21000104 	addi	r4,r4,4
 8011e80:	d9002215 	stw	r4,136(sp)
 8011e84:	11400015 	stw	r5,0(r2)
 8011e88:	10c00115 	stw	r3,4(r2)
 8011e8c:	003e8a06 	br	80118b8 <__alt_data_end+0xfc0118b8>
 8011e90:	9cc03fcc 	andi	r19,r19,255
 8011e94:	b811883a 	mov	r8,r23
 8011e98:	9803871e 	bne	r19,zero,8012cb8 <___vfiprintf_internal_r+0x14d0>
 8011e9c:	8880080c 	andi	r2,r17,32
 8011ea0:	10009a26 	beq	r2,zero,801210c <___vfiprintf_internal_r+0x924>
 8011ea4:	d9002217 	ldw	r4,136(sp)
 8011ea8:	d8001d85 	stb	zero,118(sp)
 8011eac:	20800204 	addi	r2,r4,8
 8011eb0:	24c00017 	ldw	r19,0(r4)
 8011eb4:	25000117 	ldw	r20,4(r4)
 8011eb8:	8002a416 	blt	r16,zero,801294c <___vfiprintf_internal_r+0x1164>
 8011ebc:	013fdfc4 	movi	r4,-129
 8011ec0:	9d06b03a 	or	r3,r19,r20
 8011ec4:	d8802215 	stw	r2,136(sp)
 8011ec8:	8922703a 	and	r17,r17,r4
 8011ecc:	18009b26 	beq	r3,zero,801213c <___vfiprintf_internal_r+0x954>
 8011ed0:	002b883a 	mov	r21,zero
 8011ed4:	ddc01a04 	addi	r23,sp,104
 8011ed8:	9806d0fa 	srli	r3,r19,3
 8011edc:	a008977a 	slli	r4,r20,29
 8011ee0:	a028d0fa 	srli	r20,r20,3
 8011ee4:	9cc001cc 	andi	r19,r19,7
 8011ee8:	98800c04 	addi	r2,r19,48
 8011eec:	bdffffc4 	addi	r23,r23,-1
 8011ef0:	20e6b03a 	or	r19,r4,r3
 8011ef4:	b8800005 	stb	r2,0(r23)
 8011ef8:	9d06b03a 	or	r3,r19,r20
 8011efc:	183ff61e 	bne	r3,zero,8011ed8 <__alt_data_end+0xfc011ed8>
 8011f00:	88c0004c 	andi	r3,r17,1
 8011f04:	18021f1e 	bne	r3,zero,8012784 <___vfiprintf_internal_r+0xf9c>
 8011f08:	d9401e17 	ldw	r5,120(sp)
 8011f0c:	2de9c83a 	sub	r20,r5,r23
 8011f10:	003f3806 	br	8011bf4 <__alt_data_end+0xfc011bf4>
 8011f14:	9cc03fcc 	andi	r19,r19,255
 8011f18:	b811883a 	mov	r8,r23
 8011f1c:	98034f1e 	bne	r19,zero,8012c5c <___vfiprintf_internal_r+0x1474>
 8011f20:	008200b4 	movhi	r2,2050
 8011f24:	10aef304 	addi	r2,r2,-17460
 8011f28:	d8802615 	stw	r2,152(sp)
 8011f2c:	8880080c 	andi	r2,r17,32
 8011f30:	1000ac26 	beq	r2,zero,80121e4 <___vfiprintf_internal_r+0x9fc>
 8011f34:	d9002217 	ldw	r4,136(sp)
 8011f38:	24c00017 	ldw	r19,0(r4)
 8011f3c:	25000117 	ldw	r20,4(r4)
 8011f40:	21000204 	addi	r4,r4,8
 8011f44:	d9002215 	stw	r4,136(sp)
 8011f48:	8880004c 	andi	r2,r17,1
 8011f4c:	1001e726 	beq	r2,zero,80126ec <___vfiprintf_internal_r+0xf04>
 8011f50:	9d04b03a 	or	r2,r19,r20
 8011f54:	10025c1e 	bne	r2,zero,80128c8 <___vfiprintf_internal_r+0x10e0>
 8011f58:	d8001d85 	stb	zero,118(sp)
 8011f5c:	80024416 	blt	r16,zero,8012870 <___vfiprintf_internal_r+0x1088>
 8011f60:	00bfdfc4 	movi	r2,-129
 8011f64:	88a2703a 	and	r17,r17,r2
 8011f68:	003f1d06 	br	8011be0 <__alt_data_end+0xfc011be0>
 8011f6c:	d8c02217 	ldw	r3,136(sp)
 8011f70:	04c00044 	movi	r19,1
 8011f74:	b811883a 	mov	r8,r23
 8011f78:	18800017 	ldw	r2,0(r3)
 8011f7c:	18c00104 	addi	r3,r3,4
 8011f80:	d8001d85 	stb	zero,118(sp)
 8011f84:	d8801005 	stb	r2,64(sp)
 8011f88:	d8c02215 	stw	r3,136(sp)
 8011f8c:	9829883a 	mov	r20,r19
 8011f90:	ddc01004 	addi	r23,sp,64
 8011f94:	0021883a 	mov	r16,zero
 8011f98:	003f1e06 	br	8011c14 <__alt_data_end+0xfc011c14>
 8011f9c:	9cc03fcc 	andi	r19,r19,255
 8011fa0:	b811883a 	mov	r8,r23
 8011fa4:	9803331e 	bne	r19,zero,8012c74 <___vfiprintf_internal_r+0x148c>
 8011fa8:	8880080c 	andi	r2,r17,32
 8011fac:	10004826 	beq	r2,zero,80120d0 <___vfiprintf_internal_r+0x8e8>
 8011fb0:	d9002217 	ldw	r4,136(sp)
 8011fb4:	20800117 	ldw	r2,4(r4)
 8011fb8:	24c00017 	ldw	r19,0(r4)
 8011fbc:	21000204 	addi	r4,r4,8
 8011fc0:	d9002215 	stw	r4,136(sp)
 8011fc4:	1029883a 	mov	r20,r2
 8011fc8:	10024c16 	blt	r2,zero,80128fc <___vfiprintf_internal_r+0x1114>
 8011fcc:	dd401d83 	ldbu	r21,118(sp)
 8011fd0:	80007116 	blt	r16,zero,8012198 <___vfiprintf_internal_r+0x9b0>
 8011fd4:	00ffdfc4 	movi	r3,-129
 8011fd8:	9d04b03a 	or	r2,r19,r20
 8011fdc:	88e2703a 	and	r17,r17,r3
 8011fe0:	1000d126 	beq	r2,zero,8012328 <___vfiprintf_internal_r+0xb40>
 8011fe4:	a0023526 	beq	r20,zero,80128bc <___vfiprintf_internal_r+0x10d4>
 8011fe8:	ddc01a04 	addi	r23,sp,104
 8011fec:	4039883a 	mov	fp,r8
 8011ff0:	9809883a 	mov	r4,r19
 8011ff4:	a00b883a 	mov	r5,r20
 8011ff8:	01800284 	movi	r6,10
 8011ffc:	000f883a 	mov	r7,zero
 8012000:	8015d580 	call	8015d58 <__umoddi3>
 8012004:	10800c04 	addi	r2,r2,48
 8012008:	bdffffc4 	addi	r23,r23,-1
 801200c:	9809883a 	mov	r4,r19
 8012010:	a00b883a 	mov	r5,r20
 8012014:	b8800005 	stb	r2,0(r23)
 8012018:	01800284 	movi	r6,10
 801201c:	000f883a 	mov	r7,zero
 8012020:	801575c0 	call	801575c <__udivdi3>
 8012024:	1027883a 	mov	r19,r2
 8012028:	10c4b03a 	or	r2,r2,r3
 801202c:	1829883a 	mov	r20,r3
 8012030:	103fef1e 	bne	r2,zero,8011ff0 <__alt_data_end+0xfc011ff0>
 8012034:	d9001e17 	ldw	r4,120(sp)
 8012038:	e011883a 	mov	r8,fp
 801203c:	25e9c83a 	sub	r20,r4,r23
 8012040:	003eec06 	br	8011bf4 <__alt_data_end+0xfc011bf4>
 8012044:	d8802307 	ldb	r2,140(sp)
 8012048:	1002361e 	bne	r2,zero,8012924 <___vfiprintf_internal_r+0x113c>
 801204c:	00c00804 	movi	r3,32
 8012050:	d8c02305 	stb	r3,140(sp)
 8012054:	04c00044 	movi	r19,1
 8012058:	b0c00007 	ldb	r3,0(r22)
 801205c:	003e3f06 	br	801195c <__alt_data_end+0xfc01195c>
 8012060:	8c400054 	ori	r17,r17,1
 8012064:	b0c00007 	ldb	r3,0(r22)
 8012068:	003e3c06 	br	801195c <__alt_data_end+0xfc01195c>
 801206c:	8c402014 	ori	r17,r17,128
 8012070:	b0c00007 	ldb	r3,0(r22)
 8012074:	003e3906 	br	801195c <__alt_data_end+0xfc01195c>
 8012078:	dc002715 	stw	r16,156(sp)
 801207c:	d8002515 	stw	zero,148(sp)
 8012080:	1f3ff404 	addi	fp,r3,-48
 8012084:	0009883a 	mov	r4,zero
 8012088:	b021883a 	mov	r16,r22
 801208c:	01400284 	movi	r5,10
 8012090:	80028f40 	call	80028f4 <__mulsi3>
 8012094:	80c00007 	ldb	r3,0(r16)
 8012098:	e089883a 	add	r4,fp,r2
 801209c:	b5800044 	addi	r22,r22,1
 80120a0:	1f3ff404 	addi	fp,r3,-48
 80120a4:	b021883a 	mov	r16,r22
 80120a8:	af3ff82e 	bgeu	r21,fp,801208c <__alt_data_end+0xfc01208c>
 80120ac:	d9002515 	stw	r4,148(sp)
 80120b0:	dc002717 	ldw	r16,156(sp)
 80120b4:	003e2a06 	br	8011960 <__alt_data_end+0xfc011960>
 80120b8:	9cc03fcc 	andi	r19,r19,255
 80120bc:	b811883a 	mov	r8,r23
 80120c0:	9802e91e 	bne	r19,zero,8012c68 <___vfiprintf_internal_r+0x1480>
 80120c4:	8c400414 	ori	r17,r17,16
 80120c8:	8880080c 	andi	r2,r17,32
 80120cc:	103fb81e 	bne	r2,zero,8011fb0 <__alt_data_end+0xfc011fb0>
 80120d0:	8880040c 	andi	r2,r17,16
 80120d4:	10022e26 	beq	r2,zero,8012990 <___vfiprintf_internal_r+0x11a8>
 80120d8:	d9402217 	ldw	r5,136(sp)
 80120dc:	2cc00017 	ldw	r19,0(r5)
 80120e0:	29400104 	addi	r5,r5,4
 80120e4:	d9402215 	stw	r5,136(sp)
 80120e8:	9829d7fa 	srai	r20,r19,31
 80120ec:	a005883a 	mov	r2,r20
 80120f0:	003fb506 	br	8011fc8 <__alt_data_end+0xfc011fc8>
 80120f4:	9cc03fcc 	andi	r19,r19,255
 80120f8:	b811883a 	mov	r8,r23
 80120fc:	9802fa1e 	bne	r19,zero,8012ce8 <___vfiprintf_internal_r+0x1500>
 8012100:	8c400414 	ori	r17,r17,16
 8012104:	8880080c 	andi	r2,r17,32
 8012108:	103f661e 	bne	r2,zero,8011ea4 <__alt_data_end+0xfc011ea4>
 801210c:	8880040c 	andi	r2,r17,16
 8012110:	10020626 	beq	r2,zero,801292c <___vfiprintf_internal_r+0x1144>
 8012114:	d9402217 	ldw	r5,136(sp)
 8012118:	d8001d85 	stb	zero,118(sp)
 801211c:	0029883a 	mov	r20,zero
 8012120:	28800104 	addi	r2,r5,4
 8012124:	2cc00017 	ldw	r19,0(r5)
 8012128:	80020816 	blt	r16,zero,801294c <___vfiprintf_internal_r+0x1164>
 801212c:	00ffdfc4 	movi	r3,-129
 8012130:	d8802215 	stw	r2,136(sp)
 8012134:	88e2703a 	and	r17,r17,r3
 8012138:	983f651e 	bne	r19,zero,8011ed0 <__alt_data_end+0xfc011ed0>
 801213c:	002b883a 	mov	r21,zero
 8012140:	8002cf26 	beq	r16,zero,8012c80 <___vfiprintf_internal_r+0x1498>
 8012144:	0027883a 	mov	r19,zero
 8012148:	0029883a 	mov	r20,zero
 801214c:	003f6106 	br	8011ed4 <__alt_data_end+0xfc011ed4>
 8012150:	9cc03fcc 	andi	r19,r19,255
 8012154:	b811883a 	mov	r8,r23
 8012158:	9802e01e 	bne	r19,zero,8012cdc <___vfiprintf_internal_r+0x14f4>
 801215c:	8c400414 	ori	r17,r17,16
 8012160:	8880080c 	andi	r2,r17,32
 8012164:	1000641e 	bne	r2,zero,80122f8 <___vfiprintf_internal_r+0xb10>
 8012168:	8880040c 	andi	r2,r17,16
 801216c:	1001c81e 	bne	r2,zero,8012890 <___vfiprintf_internal_r+0x10a8>
 8012170:	8880100c 	andi	r2,r17,64
 8012174:	d8001d85 	stb	zero,118(sp)
 8012178:	1002281e 	bne	r2,zero,8012a1c <___vfiprintf_internal_r+0x1234>
 801217c:	d9002217 	ldw	r4,136(sp)
 8012180:	0029883a 	mov	r20,zero
 8012184:	20800104 	addi	r2,r4,4
 8012188:	24c00017 	ldw	r19,0(r4)
 801218c:	8001c60e 	bge	r16,zero,80128a8 <___vfiprintf_internal_r+0x10c0>
 8012190:	d8802215 	stw	r2,136(sp)
 8012194:	002b883a 	mov	r21,zero
 8012198:	9d04b03a 	or	r2,r19,r20
 801219c:	103f911e 	bne	r2,zero,8011fe4 <__alt_data_end+0xfc011fe4>
 80121a0:	00800044 	movi	r2,1
 80121a4:	10803fcc 	andi	r2,r2,255
 80121a8:	00c00044 	movi	r3,1
 80121ac:	10c05f26 	beq	r2,r3,801232c <___vfiprintf_internal_r+0xb44>
 80121b0:	00c00084 	movi	r3,2
 80121b4:	10ffe31e 	bne	r2,r3,8012144 <__alt_data_end+0xfc012144>
 80121b8:	0027883a 	mov	r19,zero
 80121bc:	0029883a 	mov	r20,zero
 80121c0:	00015106 	br	8012708 <___vfiprintf_internal_r+0xf20>
 80121c4:	9cc03fcc 	andi	r19,r19,255
 80121c8:	b811883a 	mov	r8,r23
 80121cc:	9802c01e 	bne	r19,zero,8012cd0 <___vfiprintf_internal_r+0x14e8>
 80121d0:	014200b4 	movhi	r5,2050
 80121d4:	296eee04 	addi	r5,r5,-17480
 80121d8:	d9402615 	stw	r5,152(sp)
 80121dc:	8880080c 	andi	r2,r17,32
 80121e0:	103f541e 	bne	r2,zero,8011f34 <__alt_data_end+0xfc011f34>
 80121e4:	8880040c 	andi	r2,r17,16
 80121e8:	1001f226 	beq	r2,zero,80129b4 <___vfiprintf_internal_r+0x11cc>
 80121ec:	d9402217 	ldw	r5,136(sp)
 80121f0:	0029883a 	mov	r20,zero
 80121f4:	2cc00017 	ldw	r19,0(r5)
 80121f8:	29400104 	addi	r5,r5,4
 80121fc:	d9402215 	stw	r5,136(sp)
 8012200:	003f5106 	br	8011f48 <__alt_data_end+0xfc011f48>
 8012204:	d8c02217 	ldw	r3,136(sp)
 8012208:	b811883a 	mov	r8,r23
 801220c:	d8001d85 	stb	zero,118(sp)
 8012210:	1dc00017 	ldw	r23,0(r3)
 8012214:	1f000104 	addi	fp,r3,4
 8012218:	b8025926 	beq	r23,zero,8012b80 <___vfiprintf_internal_r+0x1398>
 801221c:	80023316 	blt	r16,zero,8012aec <___vfiprintf_internal_r+0x1304>
 8012220:	800d883a 	mov	r6,r16
 8012224:	000b883a 	mov	r5,zero
 8012228:	b809883a 	mov	r4,r23
 801222c:	da002a15 	stw	r8,168(sp)
 8012230:	800b21c0 	call	800b21c <memchr>
 8012234:	da002a17 	ldw	r8,168(sp)
 8012238:	10026826 	beq	r2,zero,8012bdc <___vfiprintf_internal_r+0x13f4>
 801223c:	15e9c83a 	sub	r20,r2,r23
 8012240:	dd401d83 	ldbu	r21,118(sp)
 8012244:	df002215 	stw	fp,136(sp)
 8012248:	0021883a 	mov	r16,zero
 801224c:	003e6906 	br	8011bf4 <__alt_data_end+0xfc011bf4>
 8012250:	9cc03fcc 	andi	r19,r19,255
 8012254:	b811883a 	mov	r8,r23
 8012258:	983fc126 	beq	r19,zero,8012160 <__alt_data_end+0xfc012160>
 801225c:	d8c02303 	ldbu	r3,140(sp)
 8012260:	d8c01d85 	stb	r3,118(sp)
 8012264:	003fbe06 	br	8012160 <__alt_data_end+0xfc012160>
 8012268:	d9002217 	ldw	r4,136(sp)
 801226c:	d9402217 	ldw	r5,136(sp)
 8012270:	21000017 	ldw	r4,0(r4)
 8012274:	28800104 	addi	r2,r5,4
 8012278:	d9002515 	stw	r4,148(sp)
 801227c:	203e3d16 	blt	r4,zero,8011b74 <__alt_data_end+0xfc011b74>
 8012280:	d8802215 	stw	r2,136(sp)
 8012284:	b0c00007 	ldb	r3,0(r22)
 8012288:	003db406 	br	801195c <__alt_data_end+0xfc01195c>
 801228c:	00c00ac4 	movi	r3,43
 8012290:	d8c02305 	stb	r3,140(sp)
 8012294:	04c00044 	movi	r19,1
 8012298:	b0c00007 	ldb	r3,0(r22)
 801229c:	003daf06 	br	801195c <__alt_data_end+0xfc01195c>
 80122a0:	b0c00007 	ldb	r3,0(r22)
 80122a4:	01000a84 	movi	r4,42
 80122a8:	b4000044 	addi	r16,r22,1
 80122ac:	19025e26 	beq	r3,r4,8012c28 <___vfiprintf_internal_r+0x1440>
 80122b0:	1f3ff404 	addi	fp,r3,-48
 80122b4:	0009883a 	mov	r4,zero
 80122b8:	af025236 	bltu	r21,fp,8012c04 <___vfiprintf_internal_r+0x141c>
 80122bc:	01400284 	movi	r5,10
 80122c0:	80028f40 	call	80028f4 <__mulsi3>
 80122c4:	80c00007 	ldb	r3,0(r16)
 80122c8:	1709883a 	add	r4,r2,fp
 80122cc:	85800044 	addi	r22,r16,1
 80122d0:	1f3ff404 	addi	fp,r3,-48
 80122d4:	b021883a 	mov	r16,r22
 80122d8:	af3ff82e 	bgeu	r21,fp,80122bc <__alt_data_end+0xfc0122bc>
 80122dc:	2021883a 	mov	r16,r4
 80122e0:	203d9f0e 	bge	r4,zero,8011960 <__alt_data_end+0xfc011960>
 80122e4:	043fffc4 	movi	r16,-1
 80122e8:	003d9d06 	br	8011960 <__alt_data_end+0xfc011960>
 80122ec:	8c401014 	ori	r17,r17,64
 80122f0:	b0c00007 	ldb	r3,0(r22)
 80122f4:	003d9906 	br	801195c <__alt_data_end+0xfc01195c>
 80122f8:	d9002217 	ldw	r4,136(sp)
 80122fc:	d8001d85 	stb	zero,118(sp)
 8012300:	20c00204 	addi	r3,r4,8
 8012304:	24c00017 	ldw	r19,0(r4)
 8012308:	25000117 	ldw	r20,4(r4)
 801230c:	8001e716 	blt	r16,zero,8012aac <___vfiprintf_internal_r+0x12c4>
 8012310:	013fdfc4 	movi	r4,-129
 8012314:	9d04b03a 	or	r2,r19,r20
 8012318:	d8c02215 	stw	r3,136(sp)
 801231c:	8922703a 	and	r17,r17,r4
 8012320:	002b883a 	mov	r21,zero
 8012324:	103f2f1e 	bne	r2,zero,8011fe4 <__alt_data_end+0xfc011fe4>
 8012328:	803e2f26 	beq	r16,zero,8011be8 <__alt_data_end+0xfc011be8>
 801232c:	0027883a 	mov	r19,zero
 8012330:	9cc00c04 	addi	r19,r19,48
 8012334:	dcc019c5 	stb	r19,103(sp)
 8012338:	dd002817 	ldw	r20,160(sp)
 801233c:	ddc019c4 	addi	r23,sp,103
 8012340:	003e2c06 	br	8011bf4 <__alt_data_end+0xfc011bf4>
 8012344:	9cc03fcc 	andi	r19,r19,255
 8012348:	b811883a 	mov	r8,r23
 801234c:	9802571e 	bne	r19,zero,8012cac <___vfiprintf_internal_r+0x14c4>
 8012350:	18005726 	beq	r3,zero,80124b0 <___vfiprintf_internal_r+0xcc8>
 8012354:	04c00044 	movi	r19,1
 8012358:	d8c01005 	stb	r3,64(sp)
 801235c:	d8001d85 	stb	zero,118(sp)
 8012360:	9829883a 	mov	r20,r19
 8012364:	ddc01004 	addi	r23,sp,64
 8012368:	003f0a06 	br	8011f94 <__alt_data_end+0xfc011f94>
 801236c:	d9402017 	ldw	r5,128(sp)
 8012370:	d9002117 	ldw	r4,132(sp)
 8012374:	d9801a04 	addi	r6,sp,104
 8012378:	da802a15 	stw	r10,168(sp)
 801237c:	80116d40 	call	80116d4 <__sprint_r.part.0>
 8012380:	da802a17 	ldw	r10,168(sp)
 8012384:	1000501e 	bne	r2,zero,80124c8 <___vfiprintf_internal_r+0xce0>
 8012388:	d9801b17 	ldw	r6,108(sp)
 801238c:	d8801c17 	ldw	r2,112(sp)
 8012390:	d811883a 	mov	r8,sp
 8012394:	31000044 	addi	r4,r6,1
 8012398:	003e3606 	br	8011c74 <__alt_data_end+0xfc011c74>
 801239c:	d9001b17 	ldw	r4,108(sp)
 80123a0:	d8801c17 	ldw	r2,112(sp)
 80123a4:	21400044 	addi	r5,r4,1
 80123a8:	d9801d87 	ldb	r6,118(sp)
 80123ac:	303e5226 	beq	r6,zero,8011cf8 <__alt_data_end+0xfc011cf8>
 80123b0:	01800044 	movi	r6,1
 80123b4:	d9001d84 	addi	r4,sp,118
 80123b8:	1185883a 	add	r2,r2,r6
 80123bc:	41000015 	stw	r4,0(r8)
 80123c0:	41800115 	stw	r6,4(r8)
 80123c4:	d8801c15 	stw	r2,112(sp)
 80123c8:	d9401b15 	stw	r5,108(sp)
 80123cc:	010001c4 	movi	r4,7
 80123d0:	2140b00e 	bge	r4,r5,8012694 <___vfiprintf_internal_r+0xeac>
 80123d4:	1000f61e 	bne	r2,zero,80127b0 <___vfiprintf_internal_r+0xfc8>
 80123d8:	3800b31e 	bne	r7,zero,80126a8 <___vfiprintf_internal_r+0xec0>
 80123dc:	0009883a 	mov	r4,zero
 80123e0:	300b883a 	mov	r5,r6
 80123e4:	d811883a 	mov	r8,sp
 80123e8:	01802004 	movi	r6,128
 80123ec:	19be5226 	beq	r3,r6,8011d38 <__alt_data_end+0xfc011d38>
 80123f0:	8521c83a 	sub	r16,r16,r20
 80123f4:	043e790e 	bge	zero,r16,8011ddc <__alt_data_end+0xfc011ddc>
 80123f8:	05400404 	movi	r21,16
 80123fc:	ac01b00e 	bge	r21,r16,8012ac0 <___vfiprintf_internal_r+0x12d8>
 8012400:	014200b4 	movhi	r5,2050
 8012404:	29701e04 	addi	r5,r5,-16264
 8012408:	d9402315 	stw	r5,140(sp)
 801240c:	070001c4 	movi	fp,7
 8012410:	00000506 	br	8012428 <___vfiprintf_internal_r+0xc40>
 8012414:	21400084 	addi	r5,r4,2
 8012418:	42000204 	addi	r8,r8,8
 801241c:	1809883a 	mov	r4,r3
 8012420:	843ffc04 	addi	r16,r16,-16
 8012424:	ac000d0e 	bge	r21,r16,801245c <___vfiprintf_internal_r+0xc74>
 8012428:	10800404 	addi	r2,r2,16
 801242c:	20c00044 	addi	r3,r4,1
 8012430:	44800015 	stw	r18,0(r8)
 8012434:	45400115 	stw	r21,4(r8)
 8012438:	d8801c15 	stw	r2,112(sp)
 801243c:	d8c01b15 	stw	r3,108(sp)
 8012440:	e0fff40e 	bge	fp,r3,8012414 <__alt_data_end+0xfc012414>
 8012444:	1000101e 	bne	r2,zero,8012488 <___vfiprintf_internal_r+0xca0>
 8012448:	843ffc04 	addi	r16,r16,-16
 801244c:	01400044 	movi	r5,1
 8012450:	0009883a 	mov	r4,zero
 8012454:	d811883a 	mov	r8,sp
 8012458:	ac3ff316 	blt	r21,r16,8012428 <__alt_data_end+0xfc012428>
 801245c:	d8c02317 	ldw	r3,140(sp)
 8012460:	1405883a 	add	r2,r2,r16
 8012464:	44000115 	stw	r16,4(r8)
 8012468:	40c00015 	stw	r3,0(r8)
 801246c:	d8801c15 	stw	r2,112(sp)
 8012470:	d9401b15 	stw	r5,108(sp)
 8012474:	00c001c4 	movi	r3,7
 8012478:	19401916 	blt	r3,r5,80124e0 <___vfiprintf_internal_r+0xcf8>
 801247c:	42000204 	addi	r8,r8,8
 8012480:	29400044 	addi	r5,r5,1
 8012484:	003e5506 	br	8011ddc <__alt_data_end+0xfc011ddc>
 8012488:	d9402017 	ldw	r5,128(sp)
 801248c:	d9002117 	ldw	r4,132(sp)
 8012490:	d9801a04 	addi	r6,sp,104
 8012494:	80116d40 	call	80116d4 <__sprint_r.part.0>
 8012498:	10000b1e 	bne	r2,zero,80124c8 <___vfiprintf_internal_r+0xce0>
 801249c:	d9001b17 	ldw	r4,108(sp)
 80124a0:	d8801c17 	ldw	r2,112(sp)
 80124a4:	d811883a 	mov	r8,sp
 80124a8:	21400044 	addi	r5,r4,1
 80124ac:	003fdc06 	br	8012420 <__alt_data_end+0xfc012420>
 80124b0:	d8801c17 	ldw	r2,112(sp)
 80124b4:	10000426 	beq	r2,zero,80124c8 <___vfiprintf_internal_r+0xce0>
 80124b8:	d9402017 	ldw	r5,128(sp)
 80124bc:	d9002117 	ldw	r4,132(sp)
 80124c0:	d9801a04 	addi	r6,sp,104
 80124c4:	80116d40 	call	80116d4 <__sprint_r.part.0>
 80124c8:	d9402017 	ldw	r5,128(sp)
 80124cc:	2880030b 	ldhu	r2,12(r5)
 80124d0:	1080100c 	andi	r2,r2,64
 80124d4:	10014d1e 	bne	r2,zero,8012a0c <___vfiprintf_internal_r+0x1224>
 80124d8:	d8802417 	ldw	r2,144(sp)
 80124dc:	003d9706 	br	8011b3c <__alt_data_end+0xfc011b3c>
 80124e0:	1000d21e 	bne	r2,zero,801282c <___vfiprintf_internal_r+0x1044>
 80124e4:	00c00044 	movi	r3,1
 80124e8:	a005883a 	mov	r2,r20
 80124ec:	ddc00015 	stw	r23,0(sp)
 80124f0:	dd000115 	stw	r20,4(sp)
 80124f4:	dd001c15 	stw	r20,112(sp)
 80124f8:	d8c01b15 	stw	r3,108(sp)
 80124fc:	d811883a 	mov	r8,sp
 8012500:	42000204 	addi	r8,r8,8
 8012504:	8c40010c 	andi	r17,r17,4
 8012508:	88004026 	beq	r17,zero,801260c <___vfiprintf_internal_r+0xe24>
 801250c:	d9002517 	ldw	r4,148(sp)
 8012510:	24e3c83a 	sub	r17,r4,r19
 8012514:	04403d0e 	bge	zero,r17,801260c <___vfiprintf_internal_r+0xe24>
 8012518:	04000404 	movi	r16,16
 801251c:	8441a90e 	bge	r16,r17,8012bc4 <___vfiprintf_internal_r+0x13dc>
 8012520:	00c200b4 	movhi	r3,2050
 8012524:	18f02204 	addi	r3,r3,-16248
 8012528:	d9001b17 	ldw	r4,108(sp)
 801252c:	d8c02315 	stw	r3,140(sp)
 8012530:	050001c4 	movi	r20,7
 8012534:	dd402117 	ldw	r21,132(sp)
 8012538:	ddc02017 	ldw	r23,128(sp)
 801253c:	00000506 	br	8012554 <___vfiprintf_internal_r+0xd6c>
 8012540:	21400084 	addi	r5,r4,2
 8012544:	42000204 	addi	r8,r8,8
 8012548:	1809883a 	mov	r4,r3
 801254c:	8c7ffc04 	addi	r17,r17,-16
 8012550:	84400f0e 	bge	r16,r17,8012590 <___vfiprintf_internal_r+0xda8>
 8012554:	014200b4 	movhi	r5,2050
 8012558:	10800404 	addi	r2,r2,16
 801255c:	20c00044 	addi	r3,r4,1
 8012560:	29702204 	addi	r5,r5,-16248
 8012564:	41400015 	stw	r5,0(r8)
 8012568:	44000115 	stw	r16,4(r8)
 801256c:	d8801c15 	stw	r2,112(sp)
 8012570:	d8c01b15 	stw	r3,108(sp)
 8012574:	a0fff20e 	bge	r20,r3,8012540 <__alt_data_end+0xfc012540>
 8012578:	1000141e 	bne	r2,zero,80125cc <___vfiprintf_internal_r+0xde4>
 801257c:	8c7ffc04 	addi	r17,r17,-16
 8012580:	01400044 	movi	r5,1
 8012584:	0009883a 	mov	r4,zero
 8012588:	d811883a 	mov	r8,sp
 801258c:	847ff116 	blt	r16,r17,8012554 <__alt_data_end+0xfc012554>
 8012590:	d8c02317 	ldw	r3,140(sp)
 8012594:	1445883a 	add	r2,r2,r17
 8012598:	44400115 	stw	r17,4(r8)
 801259c:	40c00015 	stw	r3,0(r8)
 80125a0:	d8801c15 	stw	r2,112(sp)
 80125a4:	d9401b15 	stw	r5,108(sp)
 80125a8:	00c001c4 	movi	r3,7
 80125ac:	1940170e 	bge	r3,r5,801260c <___vfiprintf_internal_r+0xe24>
 80125b0:	1000101e 	bne	r2,zero,80125f4 <___vfiprintf_internal_r+0xe0c>
 80125b4:	d8802517 	ldw	r2,148(sp)
 80125b8:	14c11616 	blt	r2,r19,8012a14 <___vfiprintf_internal_r+0x122c>
 80125bc:	d9002417 	ldw	r4,144(sp)
 80125c0:	2089883a 	add	r4,r4,r2
 80125c4:	d9002415 	stw	r4,144(sp)
 80125c8:	003e1806 	br	8011e2c <__alt_data_end+0xfc011e2c>
 80125cc:	d9801a04 	addi	r6,sp,104
 80125d0:	b80b883a 	mov	r5,r23
 80125d4:	a809883a 	mov	r4,r21
 80125d8:	80116d40 	call	80116d4 <__sprint_r.part.0>
 80125dc:	103fba1e 	bne	r2,zero,80124c8 <__alt_data_end+0xfc0124c8>
 80125e0:	d9001b17 	ldw	r4,108(sp)
 80125e4:	d8801c17 	ldw	r2,112(sp)
 80125e8:	d811883a 	mov	r8,sp
 80125ec:	21400044 	addi	r5,r4,1
 80125f0:	003fd606 	br	801254c <__alt_data_end+0xfc01254c>
 80125f4:	d9402017 	ldw	r5,128(sp)
 80125f8:	d9002117 	ldw	r4,132(sp)
 80125fc:	d9801a04 	addi	r6,sp,104
 8012600:	80116d40 	call	80116d4 <__sprint_r.part.0>
 8012604:	103fb01e 	bne	r2,zero,80124c8 <__alt_data_end+0xfc0124c8>
 8012608:	d8801c17 	ldw	r2,112(sp)
 801260c:	d8c02517 	ldw	r3,148(sp)
 8012610:	1cc0010e 	bge	r3,r19,8012618 <___vfiprintf_internal_r+0xe30>
 8012614:	9807883a 	mov	r3,r19
 8012618:	d9002417 	ldw	r4,144(sp)
 801261c:	20c9883a 	add	r4,r4,r3
 8012620:	d9002415 	stw	r4,144(sp)
 8012624:	103e0126 	beq	r2,zero,8011e2c <__alt_data_end+0xfc011e2c>
 8012628:	d9402017 	ldw	r5,128(sp)
 801262c:	d9002117 	ldw	r4,132(sp)
 8012630:	d9801a04 	addi	r6,sp,104
 8012634:	80116d40 	call	80116d4 <__sprint_r.part.0>
 8012638:	103dfc26 	beq	r2,zero,8011e2c <__alt_data_end+0xfc011e2c>
 801263c:	003fa206 	br	80124c8 <__alt_data_end+0xfc0124c8>
 8012640:	d9402017 	ldw	r5,128(sp)
 8012644:	d9002117 	ldw	r4,132(sp)
 8012648:	d9801a04 	addi	r6,sp,104
 801264c:	d9c02b15 	stw	r7,172(sp)
 8012650:	80116d40 	call	80116d4 <__sprint_r.part.0>
 8012654:	d9c02b17 	ldw	r7,172(sp)
 8012658:	103f9b1e 	bne	r2,zero,80124c8 <__alt_data_end+0xfc0124c8>
 801265c:	d9001b17 	ldw	r4,108(sp)
 8012660:	d8801c17 	ldw	r2,112(sp)
 8012664:	d811883a 	mov	r8,sp
 8012668:	21800044 	addi	r6,r4,1
 801266c:	003dbf06 	br	8011d6c <__alt_data_end+0xfc011d6c>
 8012670:	1000d81e 	bne	r2,zero,80129d4 <___vfiprintf_internal_r+0x11ec>
 8012674:	d9001d87 	ldb	r4,118(sp)
 8012678:	20000a26 	beq	r4,zero,80126a4 <___vfiprintf_internal_r+0xebc>
 801267c:	00800044 	movi	r2,1
 8012680:	d9001d84 	addi	r4,sp,118
 8012684:	100b883a 	mov	r5,r2
 8012688:	d9000015 	stw	r4,0(sp)
 801268c:	d8800115 	stw	r2,4(sp)
 8012690:	d811883a 	mov	r8,sp
 8012694:	2809883a 	mov	r4,r5
 8012698:	42000204 	addi	r8,r8,8
 801269c:	29400044 	addi	r5,r5,1
 80126a0:	003d9506 	br	8011cf8 <__alt_data_end+0xfc011cf8>
 80126a4:	3800fd26 	beq	r7,zero,8012a9c <___vfiprintf_internal_r+0x12b4>
 80126a8:	00800084 	movi	r2,2
 80126ac:	d9001d04 	addi	r4,sp,116
 80126b0:	d9000015 	stw	r4,0(sp)
 80126b4:	d8800115 	stw	r2,4(sp)
 80126b8:	01400044 	movi	r5,1
 80126bc:	d811883a 	mov	r8,sp
 80126c0:	2809883a 	mov	r4,r5
 80126c4:	42000204 	addi	r8,r8,8
 80126c8:	29400044 	addi	r5,r5,1
 80126cc:	003f4606 	br	80123e8 <__alt_data_end+0xfc0123e8>
 80126d0:	d8802517 	ldw	r2,148(sp)
 80126d4:	14c0010e 	bge	r2,r19,80126dc <___vfiprintf_internal_r+0xef4>
 80126d8:	9805883a 	mov	r2,r19
 80126dc:	d9402417 	ldw	r5,144(sp)
 80126e0:	288b883a 	add	r5,r5,r2
 80126e4:	d9402415 	stw	r5,144(sp)
 80126e8:	003dd006 	br	8011e2c <__alt_data_end+0xfc011e2c>
 80126ec:	d8001d85 	stb	zero,118(sp)
 80126f0:	80005d16 	blt	r16,zero,8012868 <___vfiprintf_internal_r+0x1080>
 80126f4:	00ffdfc4 	movi	r3,-129
 80126f8:	9d04b03a 	or	r2,r19,r20
 80126fc:	88e2703a 	and	r17,r17,r3
 8012700:	103d3726 	beq	r2,zero,8011be0 <__alt_data_end+0xfc011be0>
 8012704:	002b883a 	mov	r21,zero
 8012708:	d9002617 	ldw	r4,152(sp)
 801270c:	ddc01a04 	addi	r23,sp,104
 8012710:	988003cc 	andi	r2,r19,15
 8012714:	a006973a 	slli	r3,r20,28
 8012718:	2085883a 	add	r2,r4,r2
 801271c:	9826d13a 	srli	r19,r19,4
 8012720:	10800003 	ldbu	r2,0(r2)
 8012724:	a028d13a 	srli	r20,r20,4
 8012728:	bdffffc4 	addi	r23,r23,-1
 801272c:	1ce6b03a 	or	r19,r3,r19
 8012730:	b8800005 	stb	r2,0(r23)
 8012734:	9d04b03a 	or	r2,r19,r20
 8012738:	103ff51e 	bne	r2,zero,8012710 <__alt_data_end+0xfc012710>
 801273c:	d8801e17 	ldw	r2,120(sp)
 8012740:	15e9c83a 	sub	r20,r2,r23
 8012744:	003d2b06 	br	8011bf4 <__alt_data_end+0xfc011bf4>
 8012748:	d9402017 	ldw	r5,128(sp)
 801274c:	d9002117 	ldw	r4,132(sp)
 8012750:	d9801a04 	addi	r6,sp,104
 8012754:	80116d40 	call	80116d4 <__sprint_r.part.0>
 8012758:	103f5b1e 	bne	r2,zero,80124c8 <__alt_data_end+0xfc0124c8>
 801275c:	d8801c17 	ldw	r2,112(sp)
 8012760:	d811883a 	mov	r8,sp
 8012764:	003f6706 	br	8012504 <__alt_data_end+0xfc012504>
 8012768:	d9402017 	ldw	r5,128(sp)
 801276c:	d9002117 	ldw	r4,132(sp)
 8012770:	d9801a04 	addi	r6,sp,104
 8012774:	80116d40 	call	80116d4 <__sprint_r.part.0>
 8012778:	103f531e 	bne	r2,zero,80124c8 <__alt_data_end+0xfc0124c8>
 801277c:	d811883a 	mov	r8,sp
 8012780:	003cd906 	br	8011ae8 <__alt_data_end+0xfc011ae8>
 8012784:	10803fcc 	andi	r2,r2,255
 8012788:	1080201c 	xori	r2,r2,128
 801278c:	10bfe004 	addi	r2,r2,-128
 8012790:	00c00c04 	movi	r3,48
 8012794:	10ffe926 	beq	r2,r3,801273c <__alt_data_end+0xfc01273c>
 8012798:	b8ffffc5 	stb	r3,-1(r23)
 801279c:	d8c01e17 	ldw	r3,120(sp)
 80127a0:	b8bfffc4 	addi	r2,r23,-1
 80127a4:	102f883a 	mov	r23,r2
 80127a8:	18a9c83a 	sub	r20,r3,r2
 80127ac:	003d1106 	br	8011bf4 <__alt_data_end+0xfc011bf4>
 80127b0:	d9402017 	ldw	r5,128(sp)
 80127b4:	d9002117 	ldw	r4,132(sp)
 80127b8:	d9801a04 	addi	r6,sp,104
 80127bc:	d8c02a15 	stw	r3,168(sp)
 80127c0:	d9c02b15 	stw	r7,172(sp)
 80127c4:	80116d40 	call	80116d4 <__sprint_r.part.0>
 80127c8:	d8c02a17 	ldw	r3,168(sp)
 80127cc:	d9c02b17 	ldw	r7,172(sp)
 80127d0:	103f3d1e 	bne	r2,zero,80124c8 <__alt_data_end+0xfc0124c8>
 80127d4:	d9001b17 	ldw	r4,108(sp)
 80127d8:	d8801c17 	ldw	r2,112(sp)
 80127dc:	d811883a 	mov	r8,sp
 80127e0:	21400044 	addi	r5,r4,1
 80127e4:	003d4406 	br	8011cf8 <__alt_data_end+0xfc011cf8>
 80127e8:	d9402017 	ldw	r5,128(sp)
 80127ec:	d9002117 	ldw	r4,132(sp)
 80127f0:	d9801a04 	addi	r6,sp,104
 80127f4:	d8c02a15 	stw	r3,168(sp)
 80127f8:	80116d40 	call	80116d4 <__sprint_r.part.0>
 80127fc:	d8c02a17 	ldw	r3,168(sp)
 8012800:	103f311e 	bne	r2,zero,80124c8 <__alt_data_end+0xfc0124c8>
 8012804:	d9001b17 	ldw	r4,108(sp)
 8012808:	d8801c17 	ldw	r2,112(sp)
 801280c:	d811883a 	mov	r8,sp
 8012810:	21400044 	addi	r5,r4,1
 8012814:	003ef406 	br	80123e8 <__alt_data_end+0xfc0123e8>
 8012818:	1000bd1e 	bne	r2,zero,8012b10 <___vfiprintf_internal_r+0x1328>
 801281c:	01400044 	movi	r5,1
 8012820:	0009883a 	mov	r4,zero
 8012824:	d811883a 	mov	r8,sp
 8012828:	003ef106 	br	80123f0 <__alt_data_end+0xfc0123f0>
 801282c:	d9402017 	ldw	r5,128(sp)
 8012830:	d9002117 	ldw	r4,132(sp)
 8012834:	d9801a04 	addi	r6,sp,104
 8012838:	80116d40 	call	80116d4 <__sprint_r.part.0>
 801283c:	103f221e 	bne	r2,zero,80124c8 <__alt_data_end+0xfc0124c8>
 8012840:	d9401b17 	ldw	r5,108(sp)
 8012844:	d8801c17 	ldw	r2,112(sp)
 8012848:	d811883a 	mov	r8,sp
 801284c:	29400044 	addi	r5,r5,1
 8012850:	003d6206 	br	8011ddc <__alt_data_end+0xfc011ddc>
 8012854:	014200b4 	movhi	r5,2050
 8012858:	296ef304 	addi	r5,r5,-17460
 801285c:	d9402615 	stw	r5,152(sp)
 8012860:	d8c02215 	stw	r3,136(sp)
 8012864:	1023883a 	mov	r17,r2
 8012868:	9d04b03a 	or	r2,r19,r20
 801286c:	103fa51e 	bne	r2,zero,8012704 <__alt_data_end+0xfc012704>
 8012870:	002b883a 	mov	r21,zero
 8012874:	00800084 	movi	r2,2
 8012878:	003e4a06 	br	80121a4 <__alt_data_end+0xfc0121a4>
 801287c:	014200b4 	movhi	r5,2050
 8012880:	296ef304 	addi	r5,r5,-17460
 8012884:	002b883a 	mov	r21,zero
 8012888:	d9402615 	stw	r5,152(sp)
 801288c:	003f9e06 	br	8012708 <__alt_data_end+0xfc012708>
 8012890:	d9402217 	ldw	r5,136(sp)
 8012894:	d8001d85 	stb	zero,118(sp)
 8012898:	0029883a 	mov	r20,zero
 801289c:	28800104 	addi	r2,r5,4
 80128a0:	2cc00017 	ldw	r19,0(r5)
 80128a4:	803e3a16 	blt	r16,zero,8012190 <__alt_data_end+0xfc012190>
 80128a8:	00ffdfc4 	movi	r3,-129
 80128ac:	d8802215 	stw	r2,136(sp)
 80128b0:	88e2703a 	and	r17,r17,r3
 80128b4:	002b883a 	mov	r21,zero
 80128b8:	983e9b26 	beq	r19,zero,8012328 <__alt_data_end+0xfc012328>
 80128bc:	00800244 	movi	r2,9
 80128c0:	14fdc936 	bltu	r2,r19,8011fe8 <__alt_data_end+0xfc011fe8>
 80128c4:	003e9a06 	br	8012330 <__alt_data_end+0xfc012330>
 80128c8:	00800c04 	movi	r2,48
 80128cc:	d8c01d45 	stb	r3,117(sp)
 80128d0:	d8801d05 	stb	r2,116(sp)
 80128d4:	d8001d85 	stb	zero,118(sp)
 80128d8:	88c00094 	ori	r3,r17,2
 80128dc:	80009c16 	blt	r16,zero,8012b50 <___vfiprintf_internal_r+0x1368>
 80128e0:	00bfdfc4 	movi	r2,-129
 80128e4:	88a2703a 	and	r17,r17,r2
 80128e8:	8c400094 	ori	r17,r17,2
 80128ec:	002b883a 	mov	r21,zero
 80128f0:	003f8506 	br	8012708 <__alt_data_end+0xfc012708>
 80128f4:	b029883a 	mov	r20,r22
 80128f8:	003c0b06 	br	8011928 <__alt_data_end+0xfc011928>
 80128fc:	04e7c83a 	sub	r19,zero,r19
 8012900:	05400b44 	movi	r21,45
 8012904:	9804c03a 	cmpne	r2,r19,zero
 8012908:	0529c83a 	sub	r20,zero,r20
 801290c:	dd401d85 	stb	r21,118(sp)
 8012910:	a0a9c83a 	sub	r20,r20,r2
 8012914:	80009716 	blt	r16,zero,8012b74 <___vfiprintf_internal_r+0x138c>
 8012918:	00bfdfc4 	movi	r2,-129
 801291c:	88a2703a 	and	r17,r17,r2
 8012920:	003db006 	br	8011fe4 <__alt_data_end+0xfc011fe4>
 8012924:	b0c00007 	ldb	r3,0(r22)
 8012928:	003c0c06 	br	801195c <__alt_data_end+0xfc01195c>
 801292c:	8880100c 	andi	r2,r17,64
 8012930:	d8001d85 	stb	zero,118(sp)
 8012934:	1000461e 	bne	r2,zero,8012a50 <___vfiprintf_internal_r+0x1268>
 8012938:	d9002217 	ldw	r4,136(sp)
 801293c:	0029883a 	mov	r20,zero
 8012940:	20800104 	addi	r2,r4,4
 8012944:	24c00017 	ldw	r19,0(r4)
 8012948:	803df80e 	bge	r16,zero,801212c <__alt_data_end+0xfc01212c>
 801294c:	9d06b03a 	or	r3,r19,r20
 8012950:	d8802215 	stw	r2,136(sp)
 8012954:	183d5e1e 	bne	r3,zero,8011ed0 <__alt_data_end+0xfc011ed0>
 8012958:	002b883a 	mov	r21,zero
 801295c:	0005883a 	mov	r2,zero
 8012960:	003e1006 	br	80121a4 <__alt_data_end+0xfc0121a4>
 8012964:	8880040c 	andi	r2,r17,16
 8012968:	1000321e 	bne	r2,zero,8012a34 <___vfiprintf_internal_r+0x124c>
 801296c:	8c40100c 	andi	r17,r17,64
 8012970:	88008d26 	beq	r17,zero,8012ba8 <___vfiprintf_internal_r+0x13c0>
 8012974:	d9402217 	ldw	r5,136(sp)
 8012978:	d8c02417 	ldw	r3,144(sp)
 801297c:	28800017 	ldw	r2,0(r5)
 8012980:	29400104 	addi	r5,r5,4
 8012984:	d9402215 	stw	r5,136(sp)
 8012988:	10c0000d 	sth	r3,0(r2)
 801298c:	003bca06 	br	80118b8 <__alt_data_end+0xfc0118b8>
 8012990:	8880100c 	andi	r2,r17,64
 8012994:	10003a26 	beq	r2,zero,8012a80 <___vfiprintf_internal_r+0x1298>
 8012998:	d8802217 	ldw	r2,136(sp)
 801299c:	14c0000f 	ldh	r19,0(r2)
 80129a0:	10800104 	addi	r2,r2,4
 80129a4:	d8802215 	stw	r2,136(sp)
 80129a8:	9829d7fa 	srai	r20,r19,31
 80129ac:	a005883a 	mov	r2,r20
 80129b0:	003d8506 	br	8011fc8 <__alt_data_end+0xfc011fc8>
 80129b4:	8880100c 	andi	r2,r17,64
 80129b8:	10002b26 	beq	r2,zero,8012a68 <___vfiprintf_internal_r+0x1280>
 80129bc:	d8802217 	ldw	r2,136(sp)
 80129c0:	0029883a 	mov	r20,zero
 80129c4:	14c0000b 	ldhu	r19,0(r2)
 80129c8:	10800104 	addi	r2,r2,4
 80129cc:	d8802215 	stw	r2,136(sp)
 80129d0:	003d5d06 	br	8011f48 <__alt_data_end+0xfc011f48>
 80129d4:	d9402017 	ldw	r5,128(sp)
 80129d8:	d9002117 	ldw	r4,132(sp)
 80129dc:	d9801a04 	addi	r6,sp,104
 80129e0:	d8c02a15 	stw	r3,168(sp)
 80129e4:	d9c02b15 	stw	r7,172(sp)
 80129e8:	80116d40 	call	80116d4 <__sprint_r.part.0>
 80129ec:	d8c02a17 	ldw	r3,168(sp)
 80129f0:	d9c02b17 	ldw	r7,172(sp)
 80129f4:	103eb41e 	bne	r2,zero,80124c8 <__alt_data_end+0xfc0124c8>
 80129f8:	d9001b17 	ldw	r4,108(sp)
 80129fc:	d8801c17 	ldw	r2,112(sp)
 8012a00:	d811883a 	mov	r8,sp
 8012a04:	21400044 	addi	r5,r4,1
 8012a08:	003e6706 	br	80123a8 <__alt_data_end+0xfc0123a8>
 8012a0c:	00bfffc4 	movi	r2,-1
 8012a10:	003c4a06 	br	8011b3c <__alt_data_end+0xfc011b3c>
 8012a14:	9805883a 	mov	r2,r19
 8012a18:	003ee806 	br	80125bc <__alt_data_end+0xfc0125bc>
 8012a1c:	d8c02217 	ldw	r3,136(sp)
 8012a20:	0029883a 	mov	r20,zero
 8012a24:	18800104 	addi	r2,r3,4
 8012a28:	1cc0000b 	ldhu	r19,0(r3)
 8012a2c:	803f9e0e 	bge	r16,zero,80128a8 <__alt_data_end+0xfc0128a8>
 8012a30:	003dd706 	br	8012190 <__alt_data_end+0xfc012190>
 8012a34:	d8c02217 	ldw	r3,136(sp)
 8012a38:	d9002417 	ldw	r4,144(sp)
 8012a3c:	18800017 	ldw	r2,0(r3)
 8012a40:	18c00104 	addi	r3,r3,4
 8012a44:	d8c02215 	stw	r3,136(sp)
 8012a48:	11000015 	stw	r4,0(r2)
 8012a4c:	003b9a06 	br	80118b8 <__alt_data_end+0xfc0118b8>
 8012a50:	d8c02217 	ldw	r3,136(sp)
 8012a54:	0029883a 	mov	r20,zero
 8012a58:	18800104 	addi	r2,r3,4
 8012a5c:	1cc0000b 	ldhu	r19,0(r3)
 8012a60:	803db20e 	bge	r16,zero,801212c <__alt_data_end+0xfc01212c>
 8012a64:	003fb906 	br	801294c <__alt_data_end+0xfc01294c>
 8012a68:	d9002217 	ldw	r4,136(sp)
 8012a6c:	0029883a 	mov	r20,zero
 8012a70:	24c00017 	ldw	r19,0(r4)
 8012a74:	21000104 	addi	r4,r4,4
 8012a78:	d9002215 	stw	r4,136(sp)
 8012a7c:	003d3206 	br	8011f48 <__alt_data_end+0xfc011f48>
 8012a80:	d8c02217 	ldw	r3,136(sp)
 8012a84:	1cc00017 	ldw	r19,0(r3)
 8012a88:	18c00104 	addi	r3,r3,4
 8012a8c:	d8c02215 	stw	r3,136(sp)
 8012a90:	9829d7fa 	srai	r20,r19,31
 8012a94:	a005883a 	mov	r2,r20
 8012a98:	003d4b06 	br	8011fc8 <__alt_data_end+0xfc011fc8>
 8012a9c:	0009883a 	mov	r4,zero
 8012aa0:	01400044 	movi	r5,1
 8012aa4:	d811883a 	mov	r8,sp
 8012aa8:	003e4f06 	br	80123e8 <__alt_data_end+0xfc0123e8>
 8012aac:	d8c02215 	stw	r3,136(sp)
 8012ab0:	002b883a 	mov	r21,zero
 8012ab4:	003db806 	br	8012198 <__alt_data_end+0xfc012198>
 8012ab8:	d811883a 	mov	r8,sp
 8012abc:	003e9606 	br	8012518 <__alt_data_end+0xfc012518>
 8012ac0:	010200b4 	movhi	r4,2050
 8012ac4:	21301e04 	addi	r4,r4,-16264
 8012ac8:	d9002315 	stw	r4,140(sp)
 8012acc:	003e6306 	br	801245c <__alt_data_end+0xfc01245c>
 8012ad0:	b0c00043 	ldbu	r3,1(r22)
 8012ad4:	8c400814 	ori	r17,r17,32
 8012ad8:	b5800044 	addi	r22,r22,1
 8012adc:	18c03fcc 	andi	r3,r3,255
 8012ae0:	18c0201c 	xori	r3,r3,128
 8012ae4:	18ffe004 	addi	r3,r3,-128
 8012ae8:	003b9c06 	br	801195c <__alt_data_end+0xfc01195c>
 8012aec:	b809883a 	mov	r4,r23
 8012af0:	da002a15 	stw	r8,168(sp)
 8012af4:	8004cf40 	call	8004cf4 <strlen>
 8012af8:	1029883a 	mov	r20,r2
 8012afc:	dd401d83 	ldbu	r21,118(sp)
 8012b00:	df002215 	stw	fp,136(sp)
 8012b04:	0021883a 	mov	r16,zero
 8012b08:	da002a17 	ldw	r8,168(sp)
 8012b0c:	003c3906 	br	8011bf4 <__alt_data_end+0xfc011bf4>
 8012b10:	d9402017 	ldw	r5,128(sp)
 8012b14:	d9002117 	ldw	r4,132(sp)
 8012b18:	d9801a04 	addi	r6,sp,104
 8012b1c:	80116d40 	call	80116d4 <__sprint_r.part.0>
 8012b20:	103e691e 	bne	r2,zero,80124c8 <__alt_data_end+0xfc0124c8>
 8012b24:	d9001b17 	ldw	r4,108(sp)
 8012b28:	d8801c17 	ldw	r2,112(sp)
 8012b2c:	d811883a 	mov	r8,sp
 8012b30:	21400044 	addi	r5,r4,1
 8012b34:	003e2e06 	br	80123f0 <__alt_data_end+0xfc0123f0>
 8012b38:	010200b4 	movhi	r4,2050
 8012b3c:	21302204 	addi	r4,r4,-16248
 8012b40:	d9002315 	stw	r4,140(sp)
 8012b44:	d9001b17 	ldw	r4,108(sp)
 8012b48:	21000044 	addi	r4,r4,1
 8012b4c:	003c5e06 	br	8011cc8 <__alt_data_end+0xfc011cc8>
 8012b50:	002b883a 	mov	r21,zero
 8012b54:	00800084 	movi	r2,2
 8012b58:	10803fcc 	andi	r2,r2,255
 8012b5c:	01000044 	movi	r4,1
 8012b60:	11002b26 	beq	r2,r4,8012c10 <___vfiprintf_internal_r+0x1428>
 8012b64:	01000084 	movi	r4,2
 8012b68:	11002b1e 	bne	r2,r4,8012c18 <___vfiprintf_internal_r+0x1430>
 8012b6c:	1823883a 	mov	r17,r3
 8012b70:	003ee506 	br	8012708 <__alt_data_end+0xfc012708>
 8012b74:	8807883a 	mov	r3,r17
 8012b78:	00800044 	movi	r2,1
 8012b7c:	003ff606 	br	8012b58 <__alt_data_end+0xfc012b58>
 8012b80:	00800184 	movi	r2,6
 8012b84:	1400012e 	bgeu	r2,r16,8012b8c <___vfiprintf_internal_r+0x13a4>
 8012b88:	1021883a 	mov	r16,r2
 8012b8c:	8029883a 	mov	r20,r16
 8012b90:	8027883a 	mov	r19,r16
 8012b94:	80002216 	blt	r16,zero,8012c20 <___vfiprintf_internal_r+0x1438>
 8012b98:	05c200b4 	movhi	r23,2050
 8012b9c:	df002215 	stw	fp,136(sp)
 8012ba0:	bdeef804 	addi	r23,r23,-17440
 8012ba4:	003cfb06 	br	8011f94 <__alt_data_end+0xfc011f94>
 8012ba8:	d9002217 	ldw	r4,136(sp)
 8012bac:	d9402417 	ldw	r5,144(sp)
 8012bb0:	20800017 	ldw	r2,0(r4)
 8012bb4:	21000104 	addi	r4,r4,4
 8012bb8:	d9002215 	stw	r4,136(sp)
 8012bbc:	11400015 	stw	r5,0(r2)
 8012bc0:	003b3d06 	br	80118b8 <__alt_data_end+0xfc0118b8>
 8012bc4:	014200b4 	movhi	r5,2050
 8012bc8:	29702204 	addi	r5,r5,-16248
 8012bcc:	d9402315 	stw	r5,140(sp)
 8012bd0:	d9401b17 	ldw	r5,108(sp)
 8012bd4:	29400044 	addi	r5,r5,1
 8012bd8:	003e6d06 	br	8012590 <__alt_data_end+0xfc012590>
 8012bdc:	8029883a 	mov	r20,r16
 8012be0:	dd401d83 	ldbu	r21,118(sp)
 8012be4:	df002215 	stw	fp,136(sp)
 8012be8:	0021883a 	mov	r16,zero
 8012bec:	003c0106 	br	8011bf4 <__alt_data_end+0xfc011bf4>
 8012bf0:	00c200b4 	movhi	r3,2050
 8012bf4:	18f01e04 	addi	r3,r3,-16264
 8012bf8:	d8c02315 	stw	r3,140(sp)
 8012bfc:	280d883a 	mov	r6,r5
 8012c00:	003c6906 	br	8011da8 <__alt_data_end+0xfc011da8>
 8012c04:	802d883a 	mov	r22,r16
 8012c08:	0021883a 	mov	r16,zero
 8012c0c:	003b5406 	br	8011960 <__alt_data_end+0xfc011960>
 8012c10:	1823883a 	mov	r17,r3
 8012c14:	003cf306 	br	8011fe4 <__alt_data_end+0xfc011fe4>
 8012c18:	1823883a 	mov	r17,r3
 8012c1c:	003cad06 	br	8011ed4 <__alt_data_end+0xfc011ed4>
 8012c20:	0027883a 	mov	r19,zero
 8012c24:	003fdc06 	br	8012b98 <__alt_data_end+0xfc012b98>
 8012c28:	d9402217 	ldw	r5,136(sp)
 8012c2c:	8005883a 	mov	r2,r16
 8012c30:	b0c00043 	ldbu	r3,1(r22)
 8012c34:	2c000017 	ldw	r16,0(r5)
 8012c38:	29000104 	addi	r4,r5,4
 8012c3c:	d9002215 	stw	r4,136(sp)
 8012c40:	102d883a 	mov	r22,r2
 8012c44:	803fa50e 	bge	r16,zero,8012adc <__alt_data_end+0xfc012adc>
 8012c48:	18c03fcc 	andi	r3,r3,255
 8012c4c:	18c0201c 	xori	r3,r3,128
 8012c50:	043fffc4 	movi	r16,-1
 8012c54:	18ffe004 	addi	r3,r3,-128
 8012c58:	003b4006 	br	801195c <__alt_data_end+0xfc01195c>
 8012c5c:	d9402303 	ldbu	r5,140(sp)
 8012c60:	d9401d85 	stb	r5,118(sp)
 8012c64:	003cae06 	br	8011f20 <__alt_data_end+0xfc011f20>
 8012c68:	d8c02303 	ldbu	r3,140(sp)
 8012c6c:	d8c01d85 	stb	r3,118(sp)
 8012c70:	003d1406 	br	80120c4 <__alt_data_end+0xfc0120c4>
 8012c74:	d8c02303 	ldbu	r3,140(sp)
 8012c78:	d8c01d85 	stb	r3,118(sp)
 8012c7c:	003cca06 	br	8011fa8 <__alt_data_end+0xfc011fa8>
 8012c80:	8880004c 	andi	r2,r17,1
 8012c84:	002b883a 	mov	r21,zero
 8012c88:	10000526 	beq	r2,zero,8012ca0 <___vfiprintf_internal_r+0x14b8>
 8012c8c:	00800c04 	movi	r2,48
 8012c90:	d88019c5 	stb	r2,103(sp)
 8012c94:	dd002817 	ldw	r20,160(sp)
 8012c98:	ddc019c4 	addi	r23,sp,103
 8012c9c:	003bd506 	br	8011bf4 <__alt_data_end+0xfc011bf4>
 8012ca0:	0029883a 	mov	r20,zero
 8012ca4:	ddc01a04 	addi	r23,sp,104
 8012ca8:	003bd206 	br	8011bf4 <__alt_data_end+0xfc011bf4>
 8012cac:	d9002303 	ldbu	r4,140(sp)
 8012cb0:	d9001d85 	stb	r4,118(sp)
 8012cb4:	003da606 	br	8012350 <__alt_data_end+0xfc012350>
 8012cb8:	d8c02303 	ldbu	r3,140(sp)
 8012cbc:	d8c01d85 	stb	r3,118(sp)
 8012cc0:	003c7606 	br	8011e9c <__alt_data_end+0xfc011e9c>
 8012cc4:	d8c02303 	ldbu	r3,140(sp)
 8012cc8:	d8c01d85 	stb	r3,118(sp)
 8012ccc:	003c6506 	br	8011e64 <__alt_data_end+0xfc011e64>
 8012cd0:	d9002303 	ldbu	r4,140(sp)
 8012cd4:	d9001d85 	stb	r4,118(sp)
 8012cd8:	003d3d06 	br	80121d0 <__alt_data_end+0xfc0121d0>
 8012cdc:	d8c02303 	ldbu	r3,140(sp)
 8012ce0:	d8c01d85 	stb	r3,118(sp)
 8012ce4:	003d1d06 	br	801215c <__alt_data_end+0xfc01215c>
 8012ce8:	d8c02303 	ldbu	r3,140(sp)
 8012cec:	d8c01d85 	stb	r3,118(sp)
 8012cf0:	003d0306 	br	8012100 <__alt_data_end+0xfc012100>

08012cf4 <__vfiprintf_internal>:
 8012cf4:	008200b4 	movhi	r2,2050
 8012cf8:	10b77404 	addi	r2,r2,-8752
 8012cfc:	300f883a 	mov	r7,r6
 8012d00:	280d883a 	mov	r6,r5
 8012d04:	200b883a 	mov	r5,r4
 8012d08:	11000017 	ldw	r4,0(r2)
 8012d0c:	80117e81 	jmpi	80117e8 <___vfiprintf_internal_r>

08012d10 <__sbprintf>:
 8012d10:	2880030b 	ldhu	r2,12(r5)
 8012d14:	2ac01917 	ldw	r11,100(r5)
 8012d18:	2a80038b 	ldhu	r10,14(r5)
 8012d1c:	2a400717 	ldw	r9,28(r5)
 8012d20:	2a000917 	ldw	r8,36(r5)
 8012d24:	defee204 	addi	sp,sp,-1144
 8012d28:	00c10004 	movi	r3,1024
 8012d2c:	dc011a15 	stw	r16,1128(sp)
 8012d30:	10bfff4c 	andi	r2,r2,65533
 8012d34:	2821883a 	mov	r16,r5
 8012d38:	d8cb883a 	add	r5,sp,r3
 8012d3c:	dc811c15 	stw	r18,1136(sp)
 8012d40:	dc411b15 	stw	r17,1132(sp)
 8012d44:	dfc11d15 	stw	ra,1140(sp)
 8012d48:	2025883a 	mov	r18,r4
 8012d4c:	d881030d 	sth	r2,1036(sp)
 8012d50:	dac11915 	stw	r11,1124(sp)
 8012d54:	da81038d 	sth	r10,1038(sp)
 8012d58:	da410715 	stw	r9,1052(sp)
 8012d5c:	da010915 	stw	r8,1060(sp)
 8012d60:	dec10015 	stw	sp,1024(sp)
 8012d64:	dec10415 	stw	sp,1040(sp)
 8012d68:	d8c10215 	stw	r3,1032(sp)
 8012d6c:	d8c10515 	stw	r3,1044(sp)
 8012d70:	d8010615 	stw	zero,1048(sp)
 8012d74:	80117e80 	call	80117e8 <___vfiprintf_internal_r>
 8012d78:	1023883a 	mov	r17,r2
 8012d7c:	10000416 	blt	r2,zero,8012d90 <__sbprintf+0x80>
 8012d80:	d9410004 	addi	r5,sp,1024
 8012d84:	9009883a 	mov	r4,r18
 8012d88:	8002c3c0 	call	8002c3c <_fflush_r>
 8012d8c:	10000d1e 	bne	r2,zero,8012dc4 <__sbprintf+0xb4>
 8012d90:	d881030b 	ldhu	r2,1036(sp)
 8012d94:	1080100c 	andi	r2,r2,64
 8012d98:	10000326 	beq	r2,zero,8012da8 <__sbprintf+0x98>
 8012d9c:	8080030b 	ldhu	r2,12(r16)
 8012da0:	10801014 	ori	r2,r2,64
 8012da4:	8080030d 	sth	r2,12(r16)
 8012da8:	8805883a 	mov	r2,r17
 8012dac:	dfc11d17 	ldw	ra,1140(sp)
 8012db0:	dc811c17 	ldw	r18,1136(sp)
 8012db4:	dc411b17 	ldw	r17,1132(sp)
 8012db8:	dc011a17 	ldw	r16,1128(sp)
 8012dbc:	dec11e04 	addi	sp,sp,1144
 8012dc0:	f800283a 	ret
 8012dc4:	047fffc4 	movi	r17,-1
 8012dc8:	003ff106 	br	8012d90 <__alt_data_end+0xfc012d90>

08012dcc <_calloc_r>:
 8012dcc:	defffe04 	addi	sp,sp,-8
 8012dd0:	2805883a 	mov	r2,r5
 8012dd4:	dc000015 	stw	r16,0(sp)
 8012dd8:	300b883a 	mov	r5,r6
 8012ddc:	2021883a 	mov	r16,r4
 8012de0:	1009883a 	mov	r4,r2
 8012de4:	dfc00115 	stw	ra,4(sp)
 8012de8:	80028f40 	call	80028f4 <__mulsi3>
 8012dec:	100b883a 	mov	r5,r2
 8012df0:	8009883a 	mov	r4,r16
 8012df4:	8003e340 	call	8003e34 <_malloc_r>
 8012df8:	10002926 	beq	r2,zero,8012ea0 <_calloc_r+0xd4>
 8012dfc:	11bfff17 	ldw	r6,-4(r2)
 8012e00:	1021883a 	mov	r16,r2
 8012e04:	00bfff04 	movi	r2,-4
 8012e08:	308c703a 	and	r6,r6,r2
 8012e0c:	00c00904 	movi	r3,36
 8012e10:	308d883a 	add	r6,r6,r2
 8012e14:	19801636 	bltu	r3,r6,8012e70 <_calloc_r+0xa4>
 8012e18:	008004c4 	movi	r2,19
 8012e1c:	11800b2e 	bgeu	r2,r6,8012e4c <_calloc_r+0x80>
 8012e20:	80000015 	stw	zero,0(r16)
 8012e24:	80000115 	stw	zero,4(r16)
 8012e28:	008006c4 	movi	r2,27
 8012e2c:	11801a2e 	bgeu	r2,r6,8012e98 <_calloc_r+0xcc>
 8012e30:	80000215 	stw	zero,8(r16)
 8012e34:	80000315 	stw	zero,12(r16)
 8012e38:	30c0151e 	bne	r6,r3,8012e90 <_calloc_r+0xc4>
 8012e3c:	80000415 	stw	zero,16(r16)
 8012e40:	80800604 	addi	r2,r16,24
 8012e44:	80000515 	stw	zero,20(r16)
 8012e48:	00000106 	br	8012e50 <_calloc_r+0x84>
 8012e4c:	8005883a 	mov	r2,r16
 8012e50:	10000015 	stw	zero,0(r2)
 8012e54:	10000115 	stw	zero,4(r2)
 8012e58:	10000215 	stw	zero,8(r2)
 8012e5c:	8005883a 	mov	r2,r16
 8012e60:	dfc00117 	ldw	ra,4(sp)
 8012e64:	dc000017 	ldw	r16,0(sp)
 8012e68:	dec00204 	addi	sp,sp,8
 8012e6c:	f800283a 	ret
 8012e70:	000b883a 	mov	r5,zero
 8012e74:	8009883a 	mov	r4,r16
 8012e78:	80046400 	call	8004640 <memset>
 8012e7c:	8005883a 	mov	r2,r16
 8012e80:	dfc00117 	ldw	ra,4(sp)
 8012e84:	dc000017 	ldw	r16,0(sp)
 8012e88:	dec00204 	addi	sp,sp,8
 8012e8c:	f800283a 	ret
 8012e90:	80800404 	addi	r2,r16,16
 8012e94:	003fee06 	br	8012e50 <__alt_data_end+0xfc012e50>
 8012e98:	80800204 	addi	r2,r16,8
 8012e9c:	003fec06 	br	8012e50 <__alt_data_end+0xfc012e50>
 8012ea0:	0005883a 	mov	r2,zero
 8012ea4:	003fee06 	br	8012e60 <__alt_data_end+0xfc012e60>

08012ea8 <__fputwc>:
 8012ea8:	defff804 	addi	sp,sp,-32
 8012eac:	dcc00415 	stw	r19,16(sp)
 8012eb0:	dc800315 	stw	r18,12(sp)
 8012eb4:	dc000115 	stw	r16,4(sp)
 8012eb8:	dfc00715 	stw	ra,28(sp)
 8012ebc:	dd400615 	stw	r21,24(sp)
 8012ec0:	dd000515 	stw	r20,20(sp)
 8012ec4:	dc400215 	stw	r17,8(sp)
 8012ec8:	2027883a 	mov	r19,r4
 8012ecc:	2825883a 	mov	r18,r5
 8012ed0:	3021883a 	mov	r16,r6
 8012ed4:	800af440 	call	800af44 <__locale_mb_cur_max>
 8012ed8:	00c00044 	movi	r3,1
 8012edc:	10c03e26 	beq	r2,r3,8012fd8 <__fputwc+0x130>
 8012ee0:	81c01704 	addi	r7,r16,92
 8012ee4:	900d883a 	mov	r6,r18
 8012ee8:	d80b883a 	mov	r5,sp
 8012eec:	9809883a 	mov	r4,r19
 8012ef0:	80153f40 	call	80153f4 <_wcrtomb_r>
 8012ef4:	1029883a 	mov	r20,r2
 8012ef8:	00bfffc4 	movi	r2,-1
 8012efc:	a0802026 	beq	r20,r2,8012f80 <__fputwc+0xd8>
 8012f00:	d9400003 	ldbu	r5,0(sp)
 8012f04:	a0001c26 	beq	r20,zero,8012f78 <__fputwc+0xd0>
 8012f08:	0023883a 	mov	r17,zero
 8012f0c:	05400284 	movi	r21,10
 8012f10:	00000906 	br	8012f38 <__fputwc+0x90>
 8012f14:	80800017 	ldw	r2,0(r16)
 8012f18:	11400005 	stb	r5,0(r2)
 8012f1c:	80c00017 	ldw	r3,0(r16)
 8012f20:	18c00044 	addi	r3,r3,1
 8012f24:	80c00015 	stw	r3,0(r16)
 8012f28:	8c400044 	addi	r17,r17,1
 8012f2c:	dc45883a 	add	r2,sp,r17
 8012f30:	8d00112e 	bgeu	r17,r20,8012f78 <__fputwc+0xd0>
 8012f34:	11400003 	ldbu	r5,0(r2)
 8012f38:	80c00217 	ldw	r3,8(r16)
 8012f3c:	18ffffc4 	addi	r3,r3,-1
 8012f40:	80c00215 	stw	r3,8(r16)
 8012f44:	183ff30e 	bge	r3,zero,8012f14 <__alt_data_end+0xfc012f14>
 8012f48:	80800617 	ldw	r2,24(r16)
 8012f4c:	18801916 	blt	r3,r2,8012fb4 <__fputwc+0x10c>
 8012f50:	80800017 	ldw	r2,0(r16)
 8012f54:	11400005 	stb	r5,0(r2)
 8012f58:	80800017 	ldw	r2,0(r16)
 8012f5c:	10c00003 	ldbu	r3,0(r2)
 8012f60:	10800044 	addi	r2,r2,1
 8012f64:	1d402326 	beq	r3,r21,8012ff4 <__fputwc+0x14c>
 8012f68:	80800015 	stw	r2,0(r16)
 8012f6c:	8c400044 	addi	r17,r17,1
 8012f70:	dc45883a 	add	r2,sp,r17
 8012f74:	8d3fef36 	bltu	r17,r20,8012f34 <__alt_data_end+0xfc012f34>
 8012f78:	9005883a 	mov	r2,r18
 8012f7c:	00000406 	br	8012f90 <__fputwc+0xe8>
 8012f80:	80c0030b 	ldhu	r3,12(r16)
 8012f84:	a005883a 	mov	r2,r20
 8012f88:	18c01014 	ori	r3,r3,64
 8012f8c:	80c0030d 	sth	r3,12(r16)
 8012f90:	dfc00717 	ldw	ra,28(sp)
 8012f94:	dd400617 	ldw	r21,24(sp)
 8012f98:	dd000517 	ldw	r20,20(sp)
 8012f9c:	dcc00417 	ldw	r19,16(sp)
 8012fa0:	dc800317 	ldw	r18,12(sp)
 8012fa4:	dc400217 	ldw	r17,8(sp)
 8012fa8:	dc000117 	ldw	r16,4(sp)
 8012fac:	dec00804 	addi	sp,sp,32
 8012fb0:	f800283a 	ret
 8012fb4:	800d883a 	mov	r6,r16
 8012fb8:	29403fcc 	andi	r5,r5,255
 8012fbc:	9809883a 	mov	r4,r19
 8012fc0:	801529c0 	call	801529c <__swbuf_r>
 8012fc4:	10bfffe0 	cmpeqi	r2,r2,-1
 8012fc8:	10803fcc 	andi	r2,r2,255
 8012fcc:	103fd626 	beq	r2,zero,8012f28 <__alt_data_end+0xfc012f28>
 8012fd0:	00bfffc4 	movi	r2,-1
 8012fd4:	003fee06 	br	8012f90 <__alt_data_end+0xfc012f90>
 8012fd8:	90ffffc4 	addi	r3,r18,-1
 8012fdc:	01003f84 	movi	r4,254
 8012fe0:	20ffbf36 	bltu	r4,r3,8012ee0 <__alt_data_end+0xfc012ee0>
 8012fe4:	900b883a 	mov	r5,r18
 8012fe8:	dc800005 	stb	r18,0(sp)
 8012fec:	1029883a 	mov	r20,r2
 8012ff0:	003fc506 	br	8012f08 <__alt_data_end+0xfc012f08>
 8012ff4:	800d883a 	mov	r6,r16
 8012ff8:	a80b883a 	mov	r5,r21
 8012ffc:	9809883a 	mov	r4,r19
 8013000:	801529c0 	call	801529c <__swbuf_r>
 8013004:	10bfffe0 	cmpeqi	r2,r2,-1
 8013008:	003fef06 	br	8012fc8 <__alt_data_end+0xfc012fc8>

0801300c <_fputwc_r>:
 801300c:	3080030b 	ldhu	r2,12(r6)
 8013010:	10c8000c 	andi	r3,r2,8192
 8013014:	1800051e 	bne	r3,zero,801302c <_fputwc_r+0x20>
 8013018:	30c01917 	ldw	r3,100(r6)
 801301c:	10880014 	ori	r2,r2,8192
 8013020:	3080030d 	sth	r2,12(r6)
 8013024:	18880014 	ori	r2,r3,8192
 8013028:	30801915 	stw	r2,100(r6)
 801302c:	8012ea81 	jmpi	8012ea8 <__fputwc>

08013030 <fputwc>:
 8013030:	008200b4 	movhi	r2,2050
 8013034:	defffc04 	addi	sp,sp,-16
 8013038:	10b77404 	addi	r2,r2,-8752
 801303c:	dc000115 	stw	r16,4(sp)
 8013040:	14000017 	ldw	r16,0(r2)
 8013044:	dc400215 	stw	r17,8(sp)
 8013048:	dfc00315 	stw	ra,12(sp)
 801304c:	2023883a 	mov	r17,r4
 8013050:	80000226 	beq	r16,zero,801305c <fputwc+0x2c>
 8013054:	80800e17 	ldw	r2,56(r16)
 8013058:	10001026 	beq	r2,zero,801309c <fputwc+0x6c>
 801305c:	2880030b 	ldhu	r2,12(r5)
 8013060:	10c8000c 	andi	r3,r2,8192
 8013064:	1800051e 	bne	r3,zero,801307c <fputwc+0x4c>
 8013068:	28c01917 	ldw	r3,100(r5)
 801306c:	10880014 	ori	r2,r2,8192
 8013070:	2880030d 	sth	r2,12(r5)
 8013074:	18880014 	ori	r2,r3,8192
 8013078:	28801915 	stw	r2,100(r5)
 801307c:	280d883a 	mov	r6,r5
 8013080:	8009883a 	mov	r4,r16
 8013084:	880b883a 	mov	r5,r17
 8013088:	dfc00317 	ldw	ra,12(sp)
 801308c:	dc400217 	ldw	r17,8(sp)
 8013090:	dc000117 	ldw	r16,4(sp)
 8013094:	dec00404 	addi	sp,sp,16
 8013098:	8012ea81 	jmpi	8012ea8 <__fputwc>
 801309c:	8009883a 	mov	r4,r16
 80130a0:	d9400015 	stw	r5,0(sp)
 80130a4:	80030280 	call	8003028 <__sinit>
 80130a8:	d9400017 	ldw	r5,0(sp)
 80130ac:	003feb06 	br	801305c <__alt_data_end+0xfc01305c>

080130b0 <rshift>:
 80130b0:	2807d17a 	srai	r3,r5,5
 80130b4:	20800417 	ldw	r2,16(r4)
 80130b8:	22000504 	addi	r8,r4,20
 80130bc:	1880250e 	bge	r3,r2,8013154 <rshift+0xa4>
 80130c0:	1085883a 	add	r2,r2,r2
 80130c4:	18c7883a 	add	r3,r3,r3
 80130c8:	1085883a 	add	r2,r2,r2
 80130cc:	18c7883a 	add	r3,r3,r3
 80130d0:	294007cc 	andi	r5,r5,31
 80130d4:	4085883a 	add	r2,r8,r2
 80130d8:	40c7883a 	add	r3,r8,r3
 80130dc:	28002026 	beq	r5,zero,8013160 <rshift+0xb0>
 80130e0:	19800017 	ldw	r6,0(r3)
 80130e4:	02c00804 	movi	r11,32
 80130e8:	19c00104 	addi	r7,r3,4
 80130ec:	5957c83a 	sub	r11,r11,r5
 80130f0:	314cd83a 	srl	r6,r6,r5
 80130f4:	38802c2e 	bgeu	r7,r2,80131a8 <rshift+0xf8>
 80130f8:	4015883a 	mov	r10,r8
 80130fc:	3a400017 	ldw	r9,0(r7)
 8013100:	52800104 	addi	r10,r10,4
 8013104:	39c00104 	addi	r7,r7,4
 8013108:	4ad2983a 	sll	r9,r9,r11
 801310c:	498cb03a 	or	r6,r9,r6
 8013110:	51bfff15 	stw	r6,-4(r10)
 8013114:	39bfff17 	ldw	r6,-4(r7)
 8013118:	314cd83a 	srl	r6,r6,r5
 801311c:	38bff736 	bltu	r7,r2,80130fc <__alt_data_end+0xfc0130fc>
 8013120:	10c7c83a 	sub	r3,r2,r3
 8013124:	18fffec4 	addi	r3,r3,-5
 8013128:	1806d0ba 	srli	r3,r3,2
 801312c:	18c00044 	addi	r3,r3,1
 8013130:	18c7883a 	add	r3,r3,r3
 8013134:	18c7883a 	add	r3,r3,r3
 8013138:	40c7883a 	add	r3,r8,r3
 801313c:	19800015 	stw	r6,0(r3)
 8013140:	30000126 	beq	r6,zero,8013148 <rshift+0x98>
 8013144:	18c00104 	addi	r3,r3,4
 8013148:	1a05c83a 	sub	r2,r3,r8
 801314c:	1005d0ba 	srai	r2,r2,2
 8013150:	00001206 	br	801319c <rshift+0xec>
 8013154:	20000415 	stw	zero,16(r4)
 8013158:	20000515 	stw	zero,20(r4)
 801315c:	f800283a 	ret
 8013160:	18bffc2e 	bgeu	r3,r2,8013154 <__alt_data_end+0xfc013154>
 8013164:	180d883a 	mov	r6,r3
 8013168:	400b883a 	mov	r5,r8
 801316c:	31c00017 	ldw	r7,0(r6)
 8013170:	29400104 	addi	r5,r5,4
 8013174:	31800104 	addi	r6,r6,4
 8013178:	29ffff15 	stw	r7,-4(r5)
 801317c:	30bffb36 	bltu	r6,r2,801316c <__alt_data_end+0xfc01316c>
 8013180:	00c6303a 	nor	r3,zero,r3
 8013184:	1885883a 	add	r2,r3,r2
 8013188:	1004d0ba 	srli	r2,r2,2
 801318c:	10800044 	addi	r2,r2,1
 8013190:	1085883a 	add	r2,r2,r2
 8013194:	1085883a 	add	r2,r2,r2
 8013198:	1005d0ba 	srai	r2,r2,2
 801319c:	20800415 	stw	r2,16(r4)
 80131a0:	103fed26 	beq	r2,zero,8013158 <__alt_data_end+0xfc013158>
 80131a4:	f800283a 	ret
 80131a8:	4007883a 	mov	r3,r8
 80131ac:	003fe306 	br	801313c <__alt_data_end+0xfc01313c>

080131b0 <__gethex>:
 80131b0:	deffea04 	addi	sp,sp,-88
 80131b4:	d9c00415 	stw	r7,16(sp)
 80131b8:	dfc01515 	stw	ra,84(sp)
 80131bc:	dd001015 	stw	r20,64(sp)
 80131c0:	dcc00f15 	stw	r19,60(sp)
 80131c4:	2829883a 	mov	r20,r5
 80131c8:	dc800e15 	stw	r18,56(sp)
 80131cc:	d9000215 	stw	r4,8(sp)
 80131d0:	d9800115 	stw	r6,4(sp)
 80131d4:	df001415 	stw	fp,80(sp)
 80131d8:	ddc01315 	stw	r23,76(sp)
 80131dc:	dd801215 	stw	r22,72(sp)
 80131e0:	dd401115 	stw	r21,68(sp)
 80131e4:	dc400d15 	stw	r17,52(sp)
 80131e8:	dc000c15 	stw	r16,48(sp)
 80131ec:	800af680 	call	800af68 <_localeconv_r>
 80131f0:	14800017 	ldw	r18,0(r2)
 80131f4:	9009883a 	mov	r4,r18
 80131f8:	8004cf40 	call	8004cf4 <strlen>
 80131fc:	a1c00017 	ldw	r7,0(r20)
 8013200:	1027883a 	mov	r19,r2
 8013204:	9085883a 	add	r2,r18,r2
 8013208:	10bfffc3 	ldbu	r2,-1(r2)
 801320c:	38c00083 	ldbu	r3,2(r7)
 8013210:	d8800305 	stb	r2,12(sp)
 8013214:	00800c04 	movi	r2,48
 8013218:	18815a1e 	bne	r3,r2,8013784 <__gethex+0x5d4>
 801321c:	013fff84 	movi	r4,-2
 8013220:	388000c4 	addi	r2,r7,3
 8013224:	21c9c83a 	sub	r4,r4,r7
 8013228:	180b883a 	mov	r5,r3
 801322c:	20b9883a 	add	fp,r4,r2
 8013230:	102f883a 	mov	r23,r2
 8013234:	10800044 	addi	r2,r2,1
 8013238:	10ffffc3 	ldbu	r3,-1(r2)
 801323c:	197ffb26 	beq	r3,r5,801322c <__alt_data_end+0xfc01322c>
 8013240:	058200b4 	movhi	r22,2050
 8013244:	b5b02604 	addi	r22,r22,-16232
 8013248:	b0c7883a 	add	r3,r22,r3
 801324c:	18800003 	ldbu	r2,0(r3)
 8013250:	10008726 	beq	r2,zero,8013470 <__gethex+0x2c0>
 8013254:	b8800003 	ldbu	r2,0(r23)
 8013258:	d8000015 	stw	zero,0(sp)
 801325c:	0021883a 	mov	r16,zero
 8013260:	b085883a 	add	r2,r22,r2
 8013264:	10800003 	ldbu	r2,0(r2)
 8013268:	b823883a 	mov	r17,r23
 801326c:	10000526 	beq	r2,zero,8013284 <__gethex+0xd4>
 8013270:	8c400044 	addi	r17,r17,1
 8013274:	88800003 	ldbu	r2,0(r17)
 8013278:	b085883a 	add	r2,r22,r2
 801327c:	10800003 	ldbu	r2,0(r2)
 8013280:	103ffb1e 	bne	r2,zero,8013270 <__alt_data_end+0xfc013270>
 8013284:	980d883a 	mov	r6,r19
 8013288:	900b883a 	mov	r5,r18
 801328c:	8809883a 	mov	r4,r17
 8013290:	8013c5c0 	call	8013c5c <strncmp>
 8013294:	1000031e 	bne	r2,zero,80132a4 <__gethex+0xf4>
 8013298:	80015c26 	beq	r16,zero,801380c <__gethex+0x65c>
 801329c:	88800003 	ldbu	r2,0(r17)
 80132a0:	00000206 	br	80132ac <__gethex+0xfc>
 80132a4:	88800003 	ldbu	r2,0(r17)
 80132a8:	80012926 	beq	r16,zero,8013750 <__gethex+0x5a0>
 80132ac:	8c21c83a 	sub	r16,r17,r16
 80132b0:	8421883a 	add	r16,r16,r16
 80132b4:	8421883a 	add	r16,r16,r16
 80132b8:	0421c83a 	sub	r16,zero,r16
 80132bc:	10803fcc 	andi	r2,r2,255
 80132c0:	01001404 	movi	r4,80
 80132c4:	11008826 	beq	r2,r4,80134e8 <__gethex+0x338>
 80132c8:	01001c04 	movi	r4,112
 80132cc:	11008626 	beq	r2,r4,80134e8 <__gethex+0x338>
 80132d0:	882b883a 	mov	r21,r17
 80132d4:	d8c00017 	ldw	r3,0(sp)
 80132d8:	a4400015 	stw	r17,0(r20)
 80132dc:	1800711e 	bne	r3,zero,80134a4 <__gethex+0x2f4>
 80132e0:	adc5c83a 	sub	r2,r21,r23
 80132e4:	10bfffc4 	addi	r2,r2,-1
 80132e8:	00c001c4 	movi	r3,7
 80132ec:	000b883a 	mov	r5,zero
 80132f0:	1880030e 	bge	r3,r2,8013300 <__gethex+0x150>
 80132f4:	1005d07a 	srai	r2,r2,1
 80132f8:	29400044 	addi	r5,r5,1
 80132fc:	18bffd16 	blt	r3,r2,80132f4 <__alt_data_end+0xfc0132f4>
 8013300:	d9000217 	ldw	r4,8(sp)
 8013304:	800b5a40 	call	800b5a4 <_Balloc>
 8013308:	10c00504 	addi	r3,r2,20
 801330c:	d8c00015 	stw	r3,0(sp)
 8013310:	1029883a 	mov	r20,r2
 8013314:	bd417c2e 	bgeu	r23,r21,8013908 <__gethex+0x758>
 8013318:	dc400303 	ldbu	r17,12(sp)
 801331c:	03000044 	movi	r12,1
 8013320:	1813883a 	mov	r9,r3
 8013324:	0039883a 	mov	fp,zero
 8013328:	0007883a 	mov	r3,zero
 801332c:	64d9c83a 	sub	r12,r12,r19
 8013330:	02800804 	movi	r10,32
 8013334:	a8bfffc3 	ldbu	r2,-1(r21)
 8013338:	ab7fffc4 	addi	r13,r21,-1
 801333c:	88803026 	beq	r17,r2,8013400 <__gethex+0x250>
 8013340:	e2804526 	beq	fp,r10,8013458 <__gethex+0x2a8>
 8013344:	e00b883a 	mov	r5,fp
 8013348:	e7000104 	addi	fp,fp,4
 801334c:	a93fffc3 	ldbu	r4,-1(r21)
 8013350:	682b883a 	mov	r21,r13
 8013354:	b109883a 	add	r4,r22,r4
 8013358:	20800003 	ldbu	r2,0(r4)
 801335c:	108003cc 	andi	r2,r2,15
 8013360:	1144983a 	sll	r2,r2,r5
 8013364:	1886b03a 	or	r3,r3,r2
 8013368:	bd7ff236 	bltu	r23,r21,8013334 <__alt_data_end+0xfc013334>
 801336c:	d9000017 	ldw	r4,0(sp)
 8013370:	48800104 	addi	r2,r9,4
 8013374:	48c00015 	stw	r3,0(r9)
 8013378:	1105c83a 	sub	r2,r2,r4
 801337c:	1005d0ba 	srai	r2,r2,2
 8013380:	1809883a 	mov	r4,r3
 8013384:	a0800415 	stw	r2,16(r20)
 8013388:	1022917a 	slli	r17,r2,5
 801338c:	800b8c00 	call	800b8c0 <__hi0bits>
 8013390:	d8c00117 	ldw	r3,4(sp)
 8013394:	8885c83a 	sub	r2,r17,r2
 8013398:	1c800017 	ldw	r18,0(r3)
 801339c:	9080d016 	blt	r18,r2,80136e0 <__gethex+0x530>
 80133a0:	1480ed16 	blt	r2,r18,8013758 <__gethex+0x5a8>
 80133a4:	0027883a 	mov	r19,zero
 80133a8:	d8c00117 	ldw	r3,4(sp)
 80133ac:	18800217 	ldw	r2,8(r3)
 80133b0:	14009416 	blt	r2,r16,8013604 <__gethex+0x454>
 80133b4:	d8c00117 	ldw	r3,4(sp)
 80133b8:	18800117 	ldw	r2,4(r3)
 80133bc:	8080b30e 	bge	r16,r2,801368c <__gethex+0x4dc>
 80133c0:	1421c83a 	sub	r16,r2,r16
 80133c4:	8480f616 	blt	r16,r18,80137a0 <__gethex+0x5f0>
 80133c8:	18c00317 	ldw	r3,12(r3)
 80133cc:	01000084 	movi	r4,2
 80133d0:	19015226 	beq	r3,r4,801391c <__gethex+0x76c>
 80133d4:	010000c4 	movi	r4,3
 80133d8:	19013726 	beq	r3,r4,80138b8 <__gethex+0x708>
 80133dc:	01000044 	movi	r4,1
 80133e0:	19015126 	beq	r3,r4,8013928 <__gethex+0x778>
 80133e4:	d9000217 	ldw	r4,8(sp)
 80133e8:	a00b883a 	mov	r5,r20
 80133ec:	800b64c0 	call	800b64c <_Bfree>
 80133f0:	d8801617 	ldw	r2,88(sp)
 80133f4:	10000015 	stw	zero,0(r2)
 80133f8:	00801404 	movi	r2,80
 80133fc:	00002b06 	br	80134ac <__gethex+0x2fc>
 8013400:	6b1d883a 	add	r14,r13,r12
 8013404:	75ffce36 	bltu	r14,r23,8013340 <__alt_data_end+0xfc013340>
 8013408:	7009883a 	mov	r4,r14
 801340c:	980d883a 	mov	r6,r19
 8013410:	900b883a 	mov	r5,r18
 8013414:	d8c00715 	stw	r3,28(sp)
 8013418:	da400615 	stw	r9,24(sp)
 801341c:	da800b15 	stw	r10,44(sp)
 8013420:	db000a15 	stw	r12,40(sp)
 8013424:	db400815 	stw	r13,32(sp)
 8013428:	db800915 	stw	r14,36(sp)
 801342c:	8013c5c0 	call	8013c5c <strncmp>
 8013430:	d8c00717 	ldw	r3,28(sp)
 8013434:	da400617 	ldw	r9,24(sp)
 8013438:	da800b17 	ldw	r10,44(sp)
 801343c:	db000a17 	ldw	r12,40(sp)
 8013440:	db400817 	ldw	r13,32(sp)
 8013444:	db800917 	ldw	r14,36(sp)
 8013448:	103fbd1e 	bne	r2,zero,8013340 <__alt_data_end+0xfc013340>
 801344c:	702b883a 	mov	r21,r14
 8013450:	bd7fb836 	bltu	r23,r21,8013334 <__alt_data_end+0xfc013334>
 8013454:	003fc506 	br	801336c <__alt_data_end+0xfc01336c>
 8013458:	07000104 	movi	fp,4
 801345c:	48c00015 	stw	r3,0(r9)
 8013460:	000b883a 	mov	r5,zero
 8013464:	4f13883a 	add	r9,r9,fp
 8013468:	0007883a 	mov	r3,zero
 801346c:	003fb706 	br	801334c <__alt_data_end+0xfc01334c>
 8013470:	980d883a 	mov	r6,r19
 8013474:	900b883a 	mov	r5,r18
 8013478:	b809883a 	mov	r4,r23
 801347c:	8013c5c0 	call	8013c5c <strncmp>
 8013480:	10006c26 	beq	r2,zero,8013634 <__gethex+0x484>
 8013484:	b8800003 	ldbu	r2,0(r23)
 8013488:	b823883a 	mov	r17,r23
 801348c:	10803fcc 	andi	r2,r2,255
 8013490:	01001404 	movi	r4,80
 8013494:	11001126 	beq	r2,r4,80134dc <__gethex+0x32c>
 8013498:	01001c04 	movi	r4,112
 801349c:	11000f26 	beq	r2,r4,80134dc <__gethex+0x32c>
 80134a0:	a4400015 	stw	r17,0(r20)
 80134a4:	e0008c1e 	bne	fp,zero,80136d8 <__gethex+0x528>
 80134a8:	00800184 	movi	r2,6
 80134ac:	dfc01517 	ldw	ra,84(sp)
 80134b0:	df001417 	ldw	fp,80(sp)
 80134b4:	ddc01317 	ldw	r23,76(sp)
 80134b8:	dd801217 	ldw	r22,72(sp)
 80134bc:	dd401117 	ldw	r21,68(sp)
 80134c0:	dd001017 	ldw	r20,64(sp)
 80134c4:	dcc00f17 	ldw	r19,60(sp)
 80134c8:	dc800e17 	ldw	r18,56(sp)
 80134cc:	dc400d17 	ldw	r17,52(sp)
 80134d0:	dc000c17 	ldw	r16,48(sp)
 80134d4:	dec01604 	addi	sp,sp,88
 80134d8:	f800283a 	ret
 80134dc:	00c00044 	movi	r3,1
 80134e0:	0021883a 	mov	r16,zero
 80134e4:	d8c00015 	stw	r3,0(sp)
 80134e8:	88800043 	ldbu	r2,1(r17)
 80134ec:	01400ac4 	movi	r5,43
 80134f0:	11003fcc 	andi	r4,r2,255
 80134f4:	21407626 	beq	r4,r5,80136d0 <__gethex+0x520>
 80134f8:	01400b44 	movi	r5,45
 80134fc:	21404826 	beq	r4,r5,8013620 <__gethex+0x470>
 8013500:	8ac00044 	addi	r11,r17,1
 8013504:	d8000515 	stw	zero,20(sp)
 8013508:	10803fcc 	andi	r2,r2,255
 801350c:	b085883a 	add	r2,r22,r2
 8013510:	11000003 	ldbu	r4,0(r2)
 8013514:	05400604 	movi	r21,24
 8013518:	20bfffc4 	addi	r2,r4,-1
 801351c:	10803fcc 	andi	r2,r2,255
 8013520:	a8bf6b36 	bltu	r21,r2,80132d0 <__alt_data_end+0xfc0132d0>
 8013524:	58800043 	ldbu	r2,1(r11)
 8013528:	014200b4 	movhi	r5,2050
 801352c:	29702604 	addi	r5,r5,-16232
 8013530:	2885883a 	add	r2,r5,r2
 8013534:	12800003 	ldbu	r10,0(r2)
 8013538:	21003fcc 	andi	r4,r4,255
 801353c:	213ffc04 	addi	r4,r4,-16
 8013540:	50bfffc4 	addi	r2,r10,-1
 8013544:	10803fcc 	andi	r2,r2,255
 8013548:	5ac00044 	addi	r11,r11,1
 801354c:	51803fcc 	andi	r6,r10,255
 8013550:	a8801036 	bltu	r21,r2,8013594 <__gethex+0x3e4>
 8013554:	5ac00044 	addi	r11,r11,1
 8013558:	01400284 	movi	r5,10
 801355c:	d9800715 	stw	r6,28(sp)
 8013560:	dac00615 	stw	r11,24(sp)
 8013564:	80028f40 	call	80028f4 <__mulsi3>
 8013568:	dac00617 	ldw	r11,24(sp)
 801356c:	d9800717 	ldw	r6,28(sp)
 8013570:	5a800003 	ldbu	r10,0(r11)
 8013574:	1185883a 	add	r2,r2,r6
 8013578:	113ffc04 	addi	r4,r2,-16
 801357c:	b295883a 	add	r10,r22,r10
 8013580:	51400003 	ldbu	r5,0(r10)
 8013584:	2abfffc4 	addi	r10,r5,-1
 8013588:	52803fcc 	andi	r10,r10,255
 801358c:	29803fcc 	andi	r6,r5,255
 8013590:	aabff02e 	bgeu	r21,r10,8013554 <__alt_data_end+0xfc013554>
 8013594:	d8c00517 	ldw	r3,20(sp)
 8013598:	18000126 	beq	r3,zero,80135a0 <__gethex+0x3f0>
 801359c:	0109c83a 	sub	r4,zero,r4
 80135a0:	882b883a 	mov	r21,r17
 80135a4:	8121883a 	add	r16,r16,r4
 80135a8:	5823883a 	mov	r17,r11
 80135ac:	003f4906 	br	80132d4 <__alt_data_end+0xfc0132d4>
 80135b0:	a0800217 	ldw	r2,8(r20)
 80135b4:	a880f20e 	bge	r21,r2,8013980 <__gethex+0x7d0>
 80135b8:	a807883a 	mov	r3,r21
 80135bc:	18800144 	addi	r2,r3,5
 80135c0:	1085883a 	add	r2,r2,r2
 80135c4:	18c00044 	addi	r3,r3,1
 80135c8:	1085883a 	add	r2,r2,r2
 80135cc:	a085883a 	add	r2,r20,r2
 80135d0:	a0c00415 	stw	r3,16(r20)
 80135d4:	01000044 	movi	r4,1
 80135d8:	11000015 	stw	r4,0(r2)
 80135dc:	00800084 	movi	r2,2
 80135e0:	8880da26 	beq	r17,r2,801394c <__gethex+0x79c>
 80135e4:	a8c0ae0e 	bge	r21,r3,80138a0 <__gethex+0x6f0>
 80135e8:	01400044 	movi	r5,1
 80135ec:	a009883a 	mov	r4,r20
 80135f0:	80130b00 	call	80130b0 <rshift>
 80135f4:	d8c00117 	ldw	r3,4(sp)
 80135f8:	84000044 	addi	r16,r16,1
 80135fc:	18800217 	ldw	r2,8(r3)
 8013600:	1400a90e 	bge	r2,r16,80138a8 <__gethex+0x6f8>
 8013604:	d9000217 	ldw	r4,8(sp)
 8013608:	a00b883a 	mov	r5,r20
 801360c:	800b64c0 	call	800b64c <_Bfree>
 8013610:	d9001617 	ldw	r4,88(sp)
 8013614:	008028c4 	movi	r2,163
 8013618:	20000015 	stw	zero,0(r4)
 801361c:	003fa306 	br	80134ac <__alt_data_end+0xfc0134ac>
 8013620:	00c00044 	movi	r3,1
 8013624:	d8c00515 	stw	r3,20(sp)
 8013628:	88800083 	ldbu	r2,2(r17)
 801362c:	8ac00084 	addi	r11,r17,2
 8013630:	003fb506 	br	8013508 <__alt_data_end+0xfc013508>
 8013634:	bce3883a 	add	r17,r23,r19
 8013638:	89000003 	ldbu	r4,0(r17)
 801363c:	21403fcc 	andi	r5,r4,255
 8013640:	b145883a 	add	r2,r22,r5
 8013644:	10800003 	ldbu	r2,0(r2)
 8013648:	11803fcc 	andi	r6,r2,255
 801364c:	30005026 	beq	r6,zero,8013790 <__gethex+0x5e0>
 8013650:	01000c04 	movi	r4,48
 8013654:	882f883a 	mov	r23,r17
 8013658:	2900061e 	bne	r5,r4,8013674 <__gethex+0x4c4>
 801365c:	2809883a 	mov	r4,r5
 8013660:	bdc00044 	addi	r23,r23,1
 8013664:	b8800003 	ldbu	r2,0(r23)
 8013668:	113ffd26 	beq	r2,r4,8013660 <__alt_data_end+0xfc013660>
 801366c:	b085883a 	add	r2,r22,r2
 8013670:	10800003 	ldbu	r2,0(r2)
 8013674:	10803fcc 	andi	r2,r2,255
 8013678:	1007003a 	cmpeq	r3,r2,zero
 801367c:	d8c00015 	stw	r3,0(sp)
 8013680:	8821883a 	mov	r16,r17
 8013684:	07000044 	movi	fp,1
 8013688:	003ef706 	br	8013268 <__alt_data_end+0xfc013268>
 801368c:	04400044 	movi	r17,1
 8013690:	98000926 	beq	r19,zero,80136b8 <__gethex+0x508>
 8013694:	d8c00117 	ldw	r3,4(sp)
 8013698:	18800317 	ldw	r2,12(r3)
 801369c:	00c00084 	movi	r3,2
 80136a0:	10c06826 	beq	r2,r3,8013844 <__gethex+0x694>
 80136a4:	00c000c4 	movi	r3,3
 80136a8:	10c06a26 	beq	r2,r3,8013854 <__gethex+0x6a4>
 80136ac:	00c00044 	movi	r3,1
 80136b0:	10c08d26 	beq	r2,r3,80138e8 <__gethex+0x738>
 80136b4:	8c400414 	ori	r17,r17,16
 80136b8:	d9001617 	ldw	r4,88(sp)
 80136bc:	d8c00417 	ldw	r3,16(sp)
 80136c0:	8805883a 	mov	r2,r17
 80136c4:	25000015 	stw	r20,0(r4)
 80136c8:	1c000015 	stw	r16,0(r3)
 80136cc:	003f7706 	br	80134ac <__alt_data_end+0xfc0134ac>
 80136d0:	d8000515 	stw	zero,20(sp)
 80136d4:	003fd406 	br	8013628 <__alt_data_end+0xfc013628>
 80136d8:	0005883a 	mov	r2,zero
 80136dc:	003f7306 	br	80134ac <__alt_data_end+0xfc0134ac>
 80136e0:	14a3c83a 	sub	r17,r2,r18
 80136e4:	880b883a 	mov	r5,r17
 80136e8:	a009883a 	mov	r4,r20
 80136ec:	800c5d00 	call	800c5d0 <__any_on>
 80136f0:	10002926 	beq	r2,zero,8013798 <__gethex+0x5e8>
 80136f4:	897fffc4 	addi	r5,r17,-1
 80136f8:	2807d17a 	srai	r3,r5,5
 80136fc:	d8800017 	ldw	r2,0(sp)
 8013700:	290007cc 	andi	r4,r5,31
 8013704:	18c7883a 	add	r3,r3,r3
 8013708:	18c7883a 	add	r3,r3,r3
 801370c:	04c00044 	movi	r19,1
 8013710:	10c7883a 	add	r3,r2,r3
 8013714:	9908983a 	sll	r4,r19,r4
 8013718:	18c00017 	ldw	r3,0(r3)
 801371c:	20c6703a 	and	r3,r4,r3
 8013720:	18000626 	beq	r3,zero,801373c <__gethex+0x58c>
 8013724:	99407b0e 	bge	r19,r5,8013914 <__gethex+0x764>
 8013728:	897fff84 	addi	r5,r17,-2
 801372c:	a009883a 	mov	r4,r20
 8013730:	800c5d00 	call	800c5d0 <__any_on>
 8013734:	10007726 	beq	r2,zero,8013914 <__gethex+0x764>
 8013738:	04c000c4 	movi	r19,3
 801373c:	880b883a 	mov	r5,r17
 8013740:	a009883a 	mov	r4,r20
 8013744:	80130b00 	call	80130b0 <rshift>
 8013748:	8461883a 	add	r16,r16,r17
 801374c:	003f1606 	br	80133a8 <__alt_data_end+0xfc0133a8>
 8013750:	0021883a 	mov	r16,zero
 8013754:	003ed906 	br	80132bc <__alt_data_end+0xfc0132bc>
 8013758:	d9000217 	ldw	r4,8(sp)
 801375c:	90a3c83a 	sub	r17,r18,r2
 8013760:	a00b883a 	mov	r5,r20
 8013764:	880d883a 	mov	r6,r17
 8013768:	800bde00 	call	800bde0 <__lshift>
 801376c:	10c00504 	addi	r3,r2,20
 8013770:	1029883a 	mov	r20,r2
 8013774:	8461c83a 	sub	r16,r16,r17
 8013778:	d8c00015 	stw	r3,0(sp)
 801377c:	0027883a 	mov	r19,zero
 8013780:	003f0906 	br	80133a8 <__alt_data_end+0xfc0133a8>
 8013784:	3dc00084 	addi	r23,r7,2
 8013788:	0039883a 	mov	fp,zero
 801378c:	003eac06 	br	8013240 <__alt_data_end+0xfc013240>
 8013790:	2005883a 	mov	r2,r4
 8013794:	003f3d06 	br	801348c <__alt_data_end+0xfc01348c>
 8013798:	0027883a 	mov	r19,zero
 801379c:	003fe706 	br	801373c <__alt_data_end+0xfc01373c>
 80137a0:	847fffc4 	addi	r17,r16,-1
 80137a4:	9800421e 	bne	r19,zero,80138b0 <__gethex+0x700>
 80137a8:	88000426 	beq	r17,zero,80137bc <__gethex+0x60c>
 80137ac:	880b883a 	mov	r5,r17
 80137b0:	a009883a 	mov	r4,r20
 80137b4:	800c5d00 	call	800c5d0 <__any_on>
 80137b8:	1027883a 	mov	r19,r2
 80137bc:	8805d17a 	srai	r2,r17,5
 80137c0:	d8c00017 	ldw	r3,0(sp)
 80137c4:	8c4007cc 	andi	r17,r17,31
 80137c8:	1085883a 	add	r2,r2,r2
 80137cc:	1085883a 	add	r2,r2,r2
 80137d0:	1885883a 	add	r2,r3,r2
 80137d4:	00c00044 	movi	r3,1
 80137d8:	1c62983a 	sll	r17,r3,r17
 80137dc:	10800017 	ldw	r2,0(r2)
 80137e0:	8884703a 	and	r2,r17,r2
 80137e4:	10000126 	beq	r2,zero,80137ec <__gethex+0x63c>
 80137e8:	9cc00094 	ori	r19,r19,2
 80137ec:	800b883a 	mov	r5,r16
 80137f0:	a009883a 	mov	r4,r20
 80137f4:	80130b00 	call	80130b0 <rshift>
 80137f8:	d8c00117 	ldw	r3,4(sp)
 80137fc:	9425c83a 	sub	r18,r18,r16
 8013800:	04400084 	movi	r17,2
 8013804:	1c000117 	ldw	r16,4(r3)
 8013808:	003fa106 	br	8013690 <__alt_data_end+0xfc013690>
 801380c:	8ce1883a 	add	r16,r17,r19
 8013810:	80800003 	ldbu	r2,0(r16)
 8013814:	8023883a 	mov	r17,r16
 8013818:	10c03fcc 	andi	r3,r2,255
 801381c:	b0c7883a 	add	r3,r22,r3
 8013820:	18c00003 	ldbu	r3,0(r3)
 8013824:	183ea026 	beq	r3,zero,80132a8 <__alt_data_end+0xfc0132a8>
 8013828:	8c400044 	addi	r17,r17,1
 801382c:	88800003 	ldbu	r2,0(r17)
 8013830:	11003fcc 	andi	r4,r2,255
 8013834:	b109883a 	add	r4,r22,r4
 8013838:	21000003 	ldbu	r4,0(r4)
 801383c:	203ffa1e 	bne	r4,zero,8013828 <__alt_data_end+0xfc013828>
 8013840:	003e9906 	br	80132a8 <__alt_data_end+0xfc0132a8>
 8013844:	d9001717 	ldw	r4,92(sp)
 8013848:	00800044 	movi	r2,1
 801384c:	1109c83a 	sub	r4,r2,r4
 8013850:	d9001715 	stw	r4,92(sp)
 8013854:	d8801717 	ldw	r2,92(sp)
 8013858:	103f9626 	beq	r2,zero,80136b4 <__alt_data_end+0xfc0136b4>
 801385c:	a5400417 	ldw	r21,16(r20)
 8013860:	d9800017 	ldw	r6,0(sp)
 8013864:	013fffc4 	movi	r4,-1
 8013868:	ad67883a 	add	r19,r21,r21
 801386c:	9ce7883a 	add	r19,r19,r19
 8013870:	3005883a 	mov	r2,r6
 8013874:	34cb883a 	add	r5,r6,r19
 8013878:	00000306 	br	8013888 <__gethex+0x6d8>
 801387c:	10000015 	stw	zero,0(r2)
 8013880:	10800104 	addi	r2,r2,4
 8013884:	117f4a2e 	bgeu	r2,r5,80135b0 <__alt_data_end+0xfc0135b0>
 8013888:	10c00017 	ldw	r3,0(r2)
 801388c:	193ffb26 	beq	r3,r4,801387c <__alt_data_end+0xfc01387c>
 8013890:	18c00044 	addi	r3,r3,1
 8013894:	10c00015 	stw	r3,0(r2)
 8013898:	00800084 	movi	r2,2
 801389c:	88802b26 	beq	r17,r2,801394c <__gethex+0x79c>
 80138a0:	948007cc 	andi	r18,r18,31
 80138a4:	90002f1e 	bne	r18,zero,8013964 <__gethex+0x7b4>
 80138a8:	04400844 	movi	r17,33
 80138ac:	003f8206 	br	80136b8 <__alt_data_end+0xfc0136b8>
 80138b0:	04c00044 	movi	r19,1
 80138b4:	003fc106 	br	80137bc <__alt_data_end+0xfc0137bc>
 80138b8:	d8c01717 	ldw	r3,92(sp)
 80138bc:	183ec926 	beq	r3,zero,80133e4 <__alt_data_end+0xfc0133e4>
 80138c0:	d8c00417 	ldw	r3,16(sp)
 80138c4:	d9001617 	ldw	r4,88(sp)
 80138c8:	18800015 	stw	r2,0(r3)
 80138cc:	d8c00017 	ldw	r3,0(sp)
 80138d0:	00800044 	movi	r2,1
 80138d4:	a0800415 	stw	r2,16(r20)
 80138d8:	18800015 	stw	r2,0(r3)
 80138dc:	25000015 	stw	r20,0(r4)
 80138e0:	00801884 	movi	r2,98
 80138e4:	003ef106 	br	80134ac <__alt_data_end+0xfc0134ac>
 80138e8:	9880008c 	andi	r2,r19,2
 80138ec:	103f7126 	beq	r2,zero,80136b4 <__alt_data_end+0xfc0136b4>
 80138f0:	d8c00017 	ldw	r3,0(sp)
 80138f4:	18800017 	ldw	r2,0(r3)
 80138f8:	9884b03a 	or	r2,r19,r2
 80138fc:	1080004c 	andi	r2,r2,1
 8013900:	103fd61e 	bne	r2,zero,801385c <__alt_data_end+0xfc01385c>
 8013904:	003f6b06 	br	80136b4 <__alt_data_end+0xfc0136b4>
 8013908:	da400017 	ldw	r9,0(sp)
 801390c:	0007883a 	mov	r3,zero
 8013910:	003e9606 	br	801336c <__alt_data_end+0xfc01336c>
 8013914:	04c00084 	movi	r19,2
 8013918:	003f8806 	br	801373c <__alt_data_end+0xfc01373c>
 801391c:	d9001717 	ldw	r4,92(sp)
 8013920:	203fe726 	beq	r4,zero,80138c0 <__alt_data_end+0xfc0138c0>
 8013924:	003eaf06 	br	80133e4 <__alt_data_end+0xfc0133e4>
 8013928:	943eae1e 	bne	r18,r16,80133e4 <__alt_data_end+0xfc0133e4>
 801392c:	1cbfe40e 	bge	r3,r18,80138c0 <__alt_data_end+0xfc0138c0>
 8013930:	917fffc4 	addi	r5,r18,-1
 8013934:	a009883a 	mov	r4,r20
 8013938:	800c5d00 	call	800c5d0 <__any_on>
 801393c:	103ea926 	beq	r2,zero,80133e4 <__alt_data_end+0xfc0133e4>
 8013940:	d8c00117 	ldw	r3,4(sp)
 8013944:	18800117 	ldw	r2,4(r3)
 8013948:	003fdd06 	br	80138c0 <__alt_data_end+0xfc0138c0>
 801394c:	d8c00117 	ldw	r3,4(sp)
 8013950:	18800017 	ldw	r2,0(r3)
 8013954:	10bfffc4 	addi	r2,r2,-1
 8013958:	90801c26 	beq	r18,r2,80139cc <__gethex+0x81c>
 801395c:	04400884 	movi	r17,34
 8013960:	003f5506 	br	80136b8 <__alt_data_end+0xfc0136b8>
 8013964:	34c5883a 	add	r2,r6,r19
 8013968:	113fff17 	ldw	r4,-4(r2)
 801396c:	800b8c00 	call	800b8c0 <__hi0bits>
 8013970:	00c00804 	movi	r3,32
 8013974:	1ca5c83a 	sub	r18,r3,r18
 8013978:	14bfcb0e 	bge	r2,r18,80138a8 <__alt_data_end+0xfc0138a8>
 801397c:	003f1a06 	br	80135e8 <__alt_data_end+0xfc0135e8>
 8013980:	a1400117 	ldw	r5,4(r20)
 8013984:	d9000217 	ldw	r4,8(sp)
 8013988:	29400044 	addi	r5,r5,1
 801398c:	800b5a40 	call	800b5a4 <_Balloc>
 8013990:	a1800417 	ldw	r6,16(r20)
 8013994:	a1400304 	addi	r5,r20,12
 8013998:	11000304 	addi	r4,r2,12
 801399c:	31800084 	addi	r6,r6,2
 80139a0:	318d883a 	add	r6,r6,r6
 80139a4:	318d883a 	add	r6,r6,r6
 80139a8:	102d883a 	mov	r22,r2
 80139ac:	800b3000 	call	800b300 <memcpy>
 80139b0:	d9000217 	ldw	r4,8(sp)
 80139b4:	a00b883a 	mov	r5,r20
 80139b8:	b029883a 	mov	r20,r22
 80139bc:	800b64c0 	call	800b64c <_Bfree>
 80139c0:	b0c00417 	ldw	r3,16(r22)
 80139c4:	b1800504 	addi	r6,r22,20
 80139c8:	003efc06 	br	80135bc <__alt_data_end+0xfc0135bc>
 80139cc:	9005d17a 	srai	r2,r18,5
 80139d0:	944007cc 	andi	r17,r18,31
 80139d4:	1085883a 	add	r2,r2,r2
 80139d8:	1085883a 	add	r2,r2,r2
 80139dc:	3087883a 	add	r3,r6,r2
 80139e0:	00800044 	movi	r2,1
 80139e4:	1462983a 	sll	r17,r2,r17
 80139e8:	18800017 	ldw	r2,0(r3)
 80139ec:	8884703a 	and	r2,r17,r2
 80139f0:	1022c03a 	cmpne	r17,r2,zero
 80139f4:	00800884 	movi	r2,34
 80139f8:	1463c83a 	sub	r17,r2,r17
 80139fc:	003f2e06 	br	80136b8 <__alt_data_end+0xfc0136b8>

08013a00 <__hexnan>:
 8013a00:	defff904 	addi	sp,sp,-28
 8013a04:	dc800215 	stw	r18,8(sp)
 8013a08:	2c800017 	ldw	r18,0(r5)
 8013a0c:	dfc00615 	stw	ra,24(sp)
 8013a10:	dd400515 	stw	r21,20(sp)
 8013a14:	901fd17a 	srai	r15,r18,5
 8013a18:	dd000415 	stw	r20,16(sp)
 8013a1c:	dcc00315 	stw	r19,12(sp)
 8013a20:	7bdf883a 	add	r15,r15,r15
 8013a24:	7bdf883a 	add	r15,r15,r15
 8013a28:	dc400115 	stw	r17,4(sp)
 8013a2c:	dc000015 	stw	r16,0(sp)
 8013a30:	948007cc 	andi	r18,r18,31
 8013a34:	33df883a 	add	r15,r6,r15
 8013a38:	90000126 	beq	r18,zero,8013a40 <__hexnan+0x40>
 8013a3c:	7bc00104 	addi	r15,r15,4
 8013a40:	22000017 	ldw	r8,0(r4)
 8013a44:	7affff04 	addi	r11,r15,-4
 8013a48:	038200b4 	movhi	r14,2050
 8013a4c:	783fff15 	stw	zero,-4(r15)
 8013a50:	581b883a 	mov	r13,r11
 8013a54:	580b883a 	mov	r5,r11
 8013a58:	000f883a 	mov	r7,zero
 8013a5c:	003f883a 	mov	ra,zero
 8013a60:	0019883a 	mov	r12,zero
 8013a64:	73b02604 	addi	r14,r14,-16232
 8013a68:	04400204 	movi	r17,8
 8013a6c:	04000804 	movi	r16,32
 8013a70:	04c001c4 	movi	r19,7
 8013a74:	42000044 	addi	r8,r8,1
 8013a78:	40c00003 	ldbu	r3,0(r8)
 8013a7c:	18001d26 	beq	r3,zero,8013af4 <__hexnan+0xf4>
 8013a80:	70c5883a 	add	r2,r14,r3
 8013a84:	10800003 	ldbu	r2,0(r2)
 8013a88:	12403fcc 	andi	r9,r2,255
 8013a8c:	4800301e 	bne	r9,zero,8013b50 <__hexnan+0x150>
 8013a90:	80c04236 	bltu	r16,r3,8013b9c <__hexnan+0x19c>
 8013a94:	fb3ff70e 	bge	ra,r12,8013a74 <__alt_data_end+0xfc013a74>
 8013a98:	2b40112e 	bgeu	r5,r13,8013ae0 <__hexnan+0xe0>
 8013a9c:	99c01016 	blt	r19,r7,8013ae0 <__hexnan+0xe0>
 8013aa0:	89e9c83a 	sub	r20,r17,r7
 8013aa4:	a529883a 	add	r20,r20,r20
 8013aa8:	2a800017 	ldw	r10,0(r5)
 8013aac:	a529883a 	add	r20,r20,r20
 8013ab0:	852bc83a 	sub	r21,r16,r20
 8013ab4:	28c00104 	addi	r3,r5,4
 8013ab8:	2805883a 	mov	r2,r5
 8013abc:	19c00017 	ldw	r7,0(r3)
 8013ac0:	10800104 	addi	r2,r2,4
 8013ac4:	18c00104 	addi	r3,r3,4
 8013ac8:	3d52983a 	sll	r9,r7,r21
 8013acc:	4a92b03a 	or	r9,r9,r10
 8013ad0:	3d14d83a 	srl	r10,r7,r20
 8013ad4:	127fff15 	stw	r9,-4(r2)
 8013ad8:	1abfff15 	stw	r10,-4(r3)
 8013adc:	137ff736 	bltu	r2,r13,8013abc <__alt_data_end+0xfc013abc>
 8013ae0:	31402836 	bltu	r6,r5,8013b84 <__hexnan+0x184>
 8013ae4:	42000044 	addi	r8,r8,1
 8013ae8:	40c00003 	ldbu	r3,0(r8)
 8013aec:	01c00204 	movi	r7,8
 8013af0:	183fe31e 	bne	r3,zero,8013a80 <__alt_data_end+0xfc013a80>
 8013af4:	60002b26 	beq	r12,zero,8013ba4 <__hexnan+0x1a4>
 8013af8:	2b40022e 	bgeu	r5,r13,8013b04 <__hexnan+0x104>
 8013afc:	008001c4 	movi	r2,7
 8013b00:	11c0430e 	bge	r2,r7,8013c10 <__hexnan+0x210>
 8013b04:	3140312e 	bgeu	r6,r5,8013bcc <__hexnan+0x1cc>
 8013b08:	3007883a 	mov	r3,r6
 8013b0c:	29000017 	ldw	r4,0(r5)
 8013b10:	18800104 	addi	r2,r3,4
 8013b14:	29400104 	addi	r5,r5,4
 8013b18:	19000015 	stw	r4,0(r3)
 8013b1c:	1007883a 	mov	r3,r2
 8013b20:	597ffa2e 	bgeu	r11,r5,8013b0c <__alt_data_end+0xfc013b0c>
 8013b24:	10000015 	stw	zero,0(r2)
 8013b28:	10800104 	addi	r2,r2,4
 8013b2c:	58bffd2e 	bgeu	r11,r2,8013b24 <__alt_data_end+0xfc013b24>
 8013b30:	78bfff17 	ldw	r2,-4(r15)
 8013b34:	1000041e 	bne	r2,zero,8013b48 <__hexnan+0x148>
 8013b38:	32c02d26 	beq	r6,r11,8013bf0 <__hexnan+0x1f0>
 8013b3c:	5affff04 	addi	r11,r11,-4
 8013b40:	58800017 	ldw	r2,0(r11)
 8013b44:	103ffc26 	beq	r2,zero,8013b38 <__alt_data_end+0xfc013b38>
 8013b48:	00800144 	movi	r2,5
 8013b4c:	00001606 	br	8013ba8 <__hexnan+0x1a8>
 8013b50:	39c00044 	addi	r7,r7,1
 8013b54:	63000044 	addi	r12,r12,1
 8013b58:	89c0040e 	bge	r17,r7,8013b6c <__hexnan+0x16c>
 8013b5c:	317fc52e 	bgeu	r6,r5,8013a74 <__alt_data_end+0xfc013a74>
 8013b60:	283fff15 	stw	zero,-4(r5)
 8013b64:	01c00044 	movi	r7,1
 8013b68:	297fff04 	addi	r5,r5,-4
 8013b6c:	28c00017 	ldw	r3,0(r5)
 8013b70:	108003cc 	andi	r2,r2,15
 8013b74:	1806913a 	slli	r3,r3,4
 8013b78:	1884b03a 	or	r2,r3,r2
 8013b7c:	28800015 	stw	r2,0(r5)
 8013b80:	003fbc06 	br	8013a74 <__alt_data_end+0xfc013a74>
 8013b84:	2b7fff04 	addi	r13,r5,-4
 8013b88:	283fff15 	stw	zero,-4(r5)
 8013b8c:	603f883a 	mov	ra,r12
 8013b90:	680b883a 	mov	r5,r13
 8013b94:	000f883a 	mov	r7,zero
 8013b98:	003fb606 	br	8013a74 <__alt_data_end+0xfc013a74>
 8013b9c:	00800a44 	movi	r2,41
 8013ba0:	18801726 	beq	r3,r2,8013c00 <__hexnan+0x200>
 8013ba4:	00800104 	movi	r2,4
 8013ba8:	dfc00617 	ldw	ra,24(sp)
 8013bac:	dd400517 	ldw	r21,20(sp)
 8013bb0:	dd000417 	ldw	r20,16(sp)
 8013bb4:	dcc00317 	ldw	r19,12(sp)
 8013bb8:	dc800217 	ldw	r18,8(sp)
 8013bbc:	dc400117 	ldw	r17,4(sp)
 8013bc0:	dc000017 	ldw	r16,0(sp)
 8013bc4:	dec00704 	addi	sp,sp,28
 8013bc8:	f800283a 	ret
 8013bcc:	903fd826 	beq	r18,zero,8013b30 <__alt_data_end+0xfc013b30>
 8013bd0:	00c00804 	movi	r3,32
 8013bd4:	1ca5c83a 	sub	r18,r3,r18
 8013bd8:	00ffffc4 	movi	r3,-1
 8013bdc:	78bfff17 	ldw	r2,-4(r15)
 8013be0:	1c86d83a 	srl	r3,r3,r18
 8013be4:	1884703a 	and	r2,r3,r2
 8013be8:	78bfff15 	stw	r2,-4(r15)
 8013bec:	003fd106 	br	8013b34 <__alt_data_end+0xfc013b34>
 8013bf0:	00800044 	movi	r2,1
 8013bf4:	58800015 	stw	r2,0(r11)
 8013bf8:	00800144 	movi	r2,5
 8013bfc:	003fea06 	br	8013ba8 <__alt_data_end+0xfc013ba8>
 8013c00:	42000044 	addi	r8,r8,1
 8013c04:	22000015 	stw	r8,0(r4)
 8013c08:	603fbb1e 	bne	r12,zero,8013af8 <__alt_data_end+0xfc013af8>
 8013c0c:	003fe506 	br	8013ba4 <__alt_data_end+0xfc013ba4>
 8013c10:	02400204 	movi	r9,8
 8013c14:	49d3c83a 	sub	r9,r9,r7
 8013c18:	4a53883a 	add	r9,r9,r9
 8013c1c:	2a000017 	ldw	r8,0(r5)
 8013c20:	4a53883a 	add	r9,r9,r9
 8013c24:	02800804 	movi	r10,32
 8013c28:	5255c83a 	sub	r10,r10,r9
 8013c2c:	28c00104 	addi	r3,r5,4
 8013c30:	2805883a 	mov	r2,r5
 8013c34:	19c00017 	ldw	r7,0(r3)
 8013c38:	10800104 	addi	r2,r2,4
 8013c3c:	18c00104 	addi	r3,r3,4
 8013c40:	3a88983a 	sll	r4,r7,r10
 8013c44:	2208b03a 	or	r4,r4,r8
 8013c48:	3a50d83a 	srl	r8,r7,r9
 8013c4c:	113fff15 	stw	r4,-4(r2)
 8013c50:	1a3fff15 	stw	r8,-4(r3)
 8013c54:	137ff736 	bltu	r2,r13,8013c34 <__alt_data_end+0xfc013c34>
 8013c58:	003faa06 	br	8013b04 <__alt_data_end+0xfc013b04>

08013c5c <strncmp>:
 8013c5c:	30003126 	beq	r6,zero,8013d24 <strncmp+0xc8>
 8013c60:	2144b03a 	or	r2,r4,r5
 8013c64:	108000cc 	andi	r2,r2,3
 8013c68:	10001e1e 	bne	r2,zero,8013ce4 <strncmp+0x88>
 8013c6c:	024000c4 	movi	r9,3
 8013c70:	49801c2e 	bgeu	r9,r6,8013ce4 <strncmp+0x88>
 8013c74:	20800017 	ldw	r2,0(r4)
 8013c78:	28c00017 	ldw	r3,0(r5)
 8013c7c:	10c0191e 	bne	r2,r3,8013ce4 <strncmp+0x88>
 8013c80:	31bfff04 	addi	r6,r6,-4
 8013c84:	30002726 	beq	r6,zero,8013d24 <strncmp+0xc8>
 8013c88:	02ffbff4 	movhi	r11,65279
 8013c8c:	5affbfc4 	addi	r11,r11,-257
 8013c90:	0086303a 	nor	r3,zero,r2
 8013c94:	02a02074 	movhi	r10,32897
 8013c98:	12c5883a 	add	r2,r2,r11
 8013c9c:	52a02004 	addi	r10,r10,-32640
 8013ca0:	10c4703a 	and	r2,r2,r3
 8013ca4:	1284703a 	and	r2,r2,r10
 8013ca8:	10000b26 	beq	r2,zero,8013cd8 <strncmp+0x7c>
 8013cac:	00001d06 	br	8013d24 <strncmp+0xc8>
 8013cb0:	20c00017 	ldw	r3,0(r4)
 8013cb4:	29c00017 	ldw	r7,0(r5)
 8013cb8:	1ad1883a 	add	r8,r3,r11
 8013cbc:	00c4303a 	nor	r2,zero,r3
 8013cc0:	4084703a 	and	r2,r8,r2
 8013cc4:	1284703a 	and	r2,r2,r10
 8013cc8:	19c0061e 	bne	r3,r7,8013ce4 <strncmp+0x88>
 8013ccc:	31bfff04 	addi	r6,r6,-4
 8013cd0:	30001426 	beq	r6,zero,8013d24 <strncmp+0xc8>
 8013cd4:	1000131e 	bne	r2,zero,8013d24 <strncmp+0xc8>
 8013cd8:	21000104 	addi	r4,r4,4
 8013cdc:	29400104 	addi	r5,r5,4
 8013ce0:	49bff336 	bltu	r9,r6,8013cb0 <__alt_data_end+0xfc013cb0>
 8013ce4:	28800007 	ldb	r2,0(r5)
 8013ce8:	20c00007 	ldb	r3,0(r4)
 8013cec:	31bfffc4 	addi	r6,r6,-1
 8013cf0:	10c0081e 	bne	r2,r3,8013d14 <strncmp+0xb8>
 8013cf4:	30000b26 	beq	r6,zero,8013d24 <strncmp+0xc8>
 8013cf8:	10000a26 	beq	r2,zero,8013d24 <strncmp+0xc8>
 8013cfc:	21000044 	addi	r4,r4,1
 8013d00:	29400044 	addi	r5,r5,1
 8013d04:	20800007 	ldb	r2,0(r4)
 8013d08:	28c00007 	ldb	r3,0(r5)
 8013d0c:	31bfffc4 	addi	r6,r6,-1
 8013d10:	10fff826 	beq	r2,r3,8013cf4 <__alt_data_end+0xfc013cf4>
 8013d14:	20800003 	ldbu	r2,0(r4)
 8013d18:	28c00003 	ldbu	r3,0(r5)
 8013d1c:	10c5c83a 	sub	r2,r2,r3
 8013d20:	f800283a 	ret
 8013d24:	0005883a 	mov	r2,zero
 8013d28:	f800283a 	ret

08013d2c <__ssprint_r>:
 8013d2c:	30800217 	ldw	r2,8(r6)
 8013d30:	defff604 	addi	sp,sp,-40
 8013d34:	dc800215 	stw	r18,8(sp)
 8013d38:	dfc00915 	stw	ra,36(sp)
 8013d3c:	df000815 	stw	fp,32(sp)
 8013d40:	ddc00715 	stw	r23,28(sp)
 8013d44:	dd800615 	stw	r22,24(sp)
 8013d48:	dd400515 	stw	r21,20(sp)
 8013d4c:	dd000415 	stw	r20,16(sp)
 8013d50:	dcc00315 	stw	r19,12(sp)
 8013d54:	dc400115 	stw	r17,4(sp)
 8013d58:	dc000015 	stw	r16,0(sp)
 8013d5c:	3025883a 	mov	r18,r6
 8013d60:	10005826 	beq	r2,zero,8013ec4 <__ssprint_r+0x198>
 8013d64:	2027883a 	mov	r19,r4
 8013d68:	35c00017 	ldw	r23,0(r6)
 8013d6c:	29000017 	ldw	r4,0(r5)
 8013d70:	28800217 	ldw	r2,8(r5)
 8013d74:	2823883a 	mov	r17,r5
 8013d78:	0039883a 	mov	fp,zero
 8013d7c:	0021883a 	mov	r16,zero
 8013d80:	80003926 	beq	r16,zero,8013e68 <__ssprint_r+0x13c>
 8013d84:	102b883a 	mov	r21,r2
 8013d88:	102d883a 	mov	r22,r2
 8013d8c:	80803a36 	bltu	r16,r2,8013e78 <__ssprint_r+0x14c>
 8013d90:	88c0030b 	ldhu	r3,12(r17)
 8013d94:	1881200c 	andi	r2,r3,1152
 8013d98:	10002626 	beq	r2,zero,8013e34 <__ssprint_r+0x108>
 8013d9c:	88800517 	ldw	r2,20(r17)
 8013da0:	89400417 	ldw	r5,16(r17)
 8013da4:	81800044 	addi	r6,r16,1
 8013da8:	108f883a 	add	r7,r2,r2
 8013dac:	3885883a 	add	r2,r7,r2
 8013db0:	100ed7fa 	srli	r7,r2,31
 8013db4:	216dc83a 	sub	r22,r4,r5
 8013db8:	3589883a 	add	r4,r6,r22
 8013dbc:	3885883a 	add	r2,r7,r2
 8013dc0:	102bd07a 	srai	r21,r2,1
 8013dc4:	a80d883a 	mov	r6,r21
 8013dc8:	a900022e 	bgeu	r21,r4,8013dd4 <__ssprint_r+0xa8>
 8013dcc:	202b883a 	mov	r21,r4
 8013dd0:	200d883a 	mov	r6,r4
 8013dd4:	18c1000c 	andi	r3,r3,1024
 8013dd8:	18002a26 	beq	r3,zero,8013e84 <__ssprint_r+0x158>
 8013ddc:	300b883a 	mov	r5,r6
 8013de0:	9809883a 	mov	r4,r19
 8013de4:	8003e340 	call	8003e34 <_malloc_r>
 8013de8:	1029883a 	mov	r20,r2
 8013dec:	10002c26 	beq	r2,zero,8013ea0 <__ssprint_r+0x174>
 8013df0:	89400417 	ldw	r5,16(r17)
 8013df4:	b00d883a 	mov	r6,r22
 8013df8:	1009883a 	mov	r4,r2
 8013dfc:	800b3000 	call	800b300 <memcpy>
 8013e00:	8880030b 	ldhu	r2,12(r17)
 8013e04:	00fedfc4 	movi	r3,-1153
 8013e08:	10c4703a 	and	r2,r2,r3
 8013e0c:	10802014 	ori	r2,r2,128
 8013e10:	8880030d 	sth	r2,12(r17)
 8013e14:	a589883a 	add	r4,r20,r22
 8013e18:	adadc83a 	sub	r22,r21,r22
 8013e1c:	8d400515 	stw	r21,20(r17)
 8013e20:	8d800215 	stw	r22,8(r17)
 8013e24:	8d000415 	stw	r20,16(r17)
 8013e28:	89000015 	stw	r4,0(r17)
 8013e2c:	802b883a 	mov	r21,r16
 8013e30:	802d883a 	mov	r22,r16
 8013e34:	b00d883a 	mov	r6,r22
 8013e38:	e00b883a 	mov	r5,fp
 8013e3c:	800b4480 	call	800b448 <memmove>
 8013e40:	88800217 	ldw	r2,8(r17)
 8013e44:	89000017 	ldw	r4,0(r17)
 8013e48:	90c00217 	ldw	r3,8(r18)
 8013e4c:	1545c83a 	sub	r2,r2,r21
 8013e50:	2589883a 	add	r4,r4,r22
 8013e54:	88800215 	stw	r2,8(r17)
 8013e58:	89000015 	stw	r4,0(r17)
 8013e5c:	1c21c83a 	sub	r16,r3,r16
 8013e60:	94000215 	stw	r16,8(r18)
 8013e64:	80001726 	beq	r16,zero,8013ec4 <__ssprint_r+0x198>
 8013e68:	bf000017 	ldw	fp,0(r23)
 8013e6c:	bc000117 	ldw	r16,4(r23)
 8013e70:	bdc00204 	addi	r23,r23,8
 8013e74:	003fc206 	br	8013d80 <__alt_data_end+0xfc013d80>
 8013e78:	802b883a 	mov	r21,r16
 8013e7c:	802d883a 	mov	r22,r16
 8013e80:	003fec06 	br	8013e34 <__alt_data_end+0xfc013e34>
 8013e84:	9809883a 	mov	r4,r19
 8013e88:	800c6bc0 	call	800c6bc <_realloc_r>
 8013e8c:	1029883a 	mov	r20,r2
 8013e90:	103fe01e 	bne	r2,zero,8013e14 <__alt_data_end+0xfc013e14>
 8013e94:	89400417 	ldw	r5,16(r17)
 8013e98:	9809883a 	mov	r4,r19
 8013e9c:	80032a80 	call	80032a8 <_free_r>
 8013ea0:	88c0030b 	ldhu	r3,12(r17)
 8013ea4:	00800304 	movi	r2,12
 8013ea8:	98800015 	stw	r2,0(r19)
 8013eac:	18c01014 	ori	r3,r3,64
 8013eb0:	88c0030d 	sth	r3,12(r17)
 8013eb4:	00bfffc4 	movi	r2,-1
 8013eb8:	90000215 	stw	zero,8(r18)
 8013ebc:	90000115 	stw	zero,4(r18)
 8013ec0:	00000206 	br	8013ecc <__ssprint_r+0x1a0>
 8013ec4:	90000115 	stw	zero,4(r18)
 8013ec8:	0005883a 	mov	r2,zero
 8013ecc:	dfc00917 	ldw	ra,36(sp)
 8013ed0:	df000817 	ldw	fp,32(sp)
 8013ed4:	ddc00717 	ldw	r23,28(sp)
 8013ed8:	dd800617 	ldw	r22,24(sp)
 8013edc:	dd400517 	ldw	r21,20(sp)
 8013ee0:	dd000417 	ldw	r20,16(sp)
 8013ee4:	dcc00317 	ldw	r19,12(sp)
 8013ee8:	dc800217 	ldw	r18,8(sp)
 8013eec:	dc400117 	ldw	r17,4(sp)
 8013ef0:	dc000017 	ldw	r16,0(sp)
 8013ef4:	dec00a04 	addi	sp,sp,40
 8013ef8:	f800283a 	ret

08013efc <___svfiprintf_internal_r>:
 8013efc:	2880030b 	ldhu	r2,12(r5)
 8013f00:	deffc804 	addi	sp,sp,-224
 8013f04:	dcc03115 	stw	r19,196(sp)
 8013f08:	dfc03715 	stw	ra,220(sp)
 8013f0c:	df003615 	stw	fp,216(sp)
 8013f10:	ddc03515 	stw	r23,212(sp)
 8013f14:	dd803415 	stw	r22,208(sp)
 8013f18:	dd403315 	stw	r21,204(sp)
 8013f1c:	dd003215 	stw	r20,200(sp)
 8013f20:	dc803015 	stw	r18,192(sp)
 8013f24:	dc402f15 	stw	r17,188(sp)
 8013f28:	dc002e15 	stw	r16,184(sp)
 8013f2c:	d9402315 	stw	r5,140(sp)
 8013f30:	d9002715 	stw	r4,156(sp)
 8013f34:	1080200c 	andi	r2,r2,128
 8013f38:	d9c02415 	stw	r7,144(sp)
 8013f3c:	3027883a 	mov	r19,r6
 8013f40:	10000226 	beq	r2,zero,8013f4c <___svfiprintf_internal_r+0x50>
 8013f44:	28800417 	ldw	r2,16(r5)
 8013f48:	10046d26 	beq	r2,zero,8015100 <___svfiprintf_internal_r+0x1204>
 8013f4c:	d8801a04 	addi	r2,sp,104
 8013f50:	d8c019c4 	addi	r3,sp,103
 8013f54:	058200b4 	movhi	r22,2050
 8013f58:	10c9c83a 	sub	r4,r2,r3
 8013f5c:	b5b06604 	addi	r22,r22,-15976
 8013f60:	d8801e15 	stw	r2,120(sp)
 8013f64:	d8c01f15 	stw	r3,124(sp)
 8013f68:	dec01a15 	stw	sp,104(sp)
 8013f6c:	d8001c15 	stw	zero,112(sp)
 8013f70:	d8001b15 	stw	zero,108(sp)
 8013f74:	d811883a 	mov	r8,sp
 8013f78:	d8002915 	stw	zero,164(sp)
 8013f7c:	d8002615 	stw	zero,152(sp)
 8013f80:	d9002c15 	stw	r4,176(sp)
 8013f84:	98800007 	ldb	r2,0(r19)
 8013f88:	10031426 	beq	r2,zero,8014bdc <___svfiprintf_internal_r+0xce0>
 8013f8c:	00c00944 	movi	r3,37
 8013f90:	9825883a 	mov	r18,r19
 8013f94:	10c0021e 	bne	r2,r3,8013fa0 <___svfiprintf_internal_r+0xa4>
 8013f98:	00001406 	br	8013fec <___svfiprintf_internal_r+0xf0>
 8013f9c:	10c00326 	beq	r2,r3,8013fac <___svfiprintf_internal_r+0xb0>
 8013fa0:	94800044 	addi	r18,r18,1
 8013fa4:	90800007 	ldb	r2,0(r18)
 8013fa8:	103ffc1e 	bne	r2,zero,8013f9c <__alt_data_end+0xfc013f9c>
 8013fac:	94e1c83a 	sub	r16,r18,r19
 8013fb0:	80000e26 	beq	r16,zero,8013fec <___svfiprintf_internal_r+0xf0>
 8013fb4:	d8c01c17 	ldw	r3,112(sp)
 8013fb8:	d8801b17 	ldw	r2,108(sp)
 8013fbc:	44c00015 	stw	r19,0(r8)
 8013fc0:	1c07883a 	add	r3,r3,r16
 8013fc4:	10800044 	addi	r2,r2,1
 8013fc8:	d8c01c15 	stw	r3,112(sp)
 8013fcc:	44000115 	stw	r16,4(r8)
 8013fd0:	d8801b15 	stw	r2,108(sp)
 8013fd4:	00c001c4 	movi	r3,7
 8013fd8:	18835c16 	blt	r3,r2,8014d4c <___svfiprintf_internal_r+0xe50>
 8013fdc:	42000204 	addi	r8,r8,8
 8013fe0:	d9402617 	ldw	r5,152(sp)
 8013fe4:	2c0b883a 	add	r5,r5,r16
 8013fe8:	d9402615 	stw	r5,152(sp)
 8013fec:	90800007 	ldb	r2,0(r18)
 8013ff0:	1002fc26 	beq	r2,zero,8014be4 <___svfiprintf_internal_r+0xce8>
 8013ff4:	0023883a 	mov	r17,zero
 8013ff8:	00bfffc4 	movi	r2,-1
 8013ffc:	0021883a 	mov	r16,zero
 8014000:	94c00044 	addi	r19,r18,1
 8014004:	90c00047 	ldb	r3,1(r18)
 8014008:	dc402105 	stb	r17,132(sp)
 801400c:	d8001d85 	stb	zero,118(sp)
 8014010:	002b883a 	mov	r21,zero
 8014014:	d8802015 	stw	r2,128(sp)
 8014018:	d8002515 	stw	zero,148(sp)
 801401c:	04801604 	movi	r18,88
 8014020:	05000244 	movi	r20,9
 8014024:	402f883a 	mov	r23,r8
 8014028:	8023883a 	mov	r17,r16
 801402c:	9cc00044 	addi	r19,r19,1
 8014030:	18bff804 	addi	r2,r3,-32
 8014034:	9081fb36 	bltu	r18,r2,8014824 <___svfiprintf_internal_r+0x928>
 8014038:	100490ba 	slli	r2,r2,2
 801403c:	01020074 	movhi	r4,2049
 8014040:	21101404 	addi	r4,r4,16464
 8014044:	1105883a 	add	r2,r2,r4
 8014048:	10800017 	ldw	r2,0(r2)
 801404c:	1000683a 	jmp	r2
 8014050:	08014250 	cmplti	zero,at,1289
 8014054:	08014824 	muli	zero,at,1312
 8014058:	08014824 	muli	zero,at,1312
 801405c:	08014244 	addi	zero,at,1289
 8014060:	08014824 	muli	zero,at,1312
 8014064:	08014824 	muli	zero,at,1312
 8014068:	08014824 	muli	zero,at,1312
 801406c:	08014824 	muli	zero,at,1312
 8014070:	08014824 	muli	zero,at,1312
 8014074:	08014824 	muli	zero,at,1312
 8014078:	080141b4 	orhi	zero,at,1286
 801407c:	080143b0 	cmpltui	zero,at,1294
 8014080:	08014824 	muli	zero,at,1312
 8014084:	080141dc 	xori	zero,at,1287
 8014088:	08014860 	cmpeqi	zero,at,1313
 801408c:	08014824 	muli	zero,at,1312
 8014090:	08014854 	ori	zero,at,1313
 8014094:	080147e8 	cmpgeui	zero,at,1311
 8014098:	080147e8 	cmpgeui	zero,at,1311
 801409c:	080147e8 	cmpgeui	zero,at,1311
 80140a0:	080147e8 	cmpgeui	zero,at,1311
 80140a4:	080147e8 	cmpgeui	zero,at,1311
 80140a8:	080147e8 	cmpgeui	zero,at,1311
 80140ac:	080147e8 	cmpgeui	zero,at,1311
 80140b0:	080147e8 	cmpgeui	zero,at,1311
 80140b4:	080147e8 	cmpgeui	zero,at,1311
 80140b8:	08014824 	muli	zero,at,1312
 80140bc:	08014824 	muli	zero,at,1312
 80140c0:	08014824 	muli	zero,at,1312
 80140c4:	08014824 	muli	zero,at,1312
 80140c8:	08014824 	muli	zero,at,1312
 80140cc:	08014824 	muli	zero,at,1312
 80140d0:	08014824 	muli	zero,at,1312
 80140d4:	08014824 	muli	zero,at,1312
 80140d8:	08014824 	muli	zero,at,1312
 80140dc:	08014824 	muli	zero,at,1312
 80140e0:	0801476c 	andhi	zero,at,1309
 80140e4:	08014824 	muli	zero,at,1312
 80140e8:	08014824 	muli	zero,at,1312
 80140ec:	08014824 	muli	zero,at,1312
 80140f0:	08014824 	muli	zero,at,1312
 80140f4:	08014824 	muli	zero,at,1312
 80140f8:	08014824 	muli	zero,at,1312
 80140fc:	08014824 	muli	zero,at,1312
 8014100:	08014824 	muli	zero,at,1312
 8014104:	08014824 	muli	zero,at,1312
 8014108:	08014824 	muli	zero,at,1312
 801410c:	0801491c 	xori	zero,at,1316
 8014110:	08014824 	muli	zero,at,1312
 8014114:	08014824 	muli	zero,at,1312
 8014118:	08014824 	muli	zero,at,1312
 801411c:	08014824 	muli	zero,at,1312
 8014120:	08014824 	muli	zero,at,1312
 8014124:	080148a8 	cmpgeui	zero,at,1314
 8014128:	08014824 	muli	zero,at,1312
 801412c:	08014824 	muli	zero,at,1312
 8014130:	080145a8 	cmpgeui	zero,at,1302
 8014134:	08014824 	muli	zero,at,1312
 8014138:	08014824 	muli	zero,at,1312
 801413c:	08014824 	muli	zero,at,1312
 8014140:	08014824 	muli	zero,at,1312
 8014144:	08014824 	muli	zero,at,1312
 8014148:	08014824 	muli	zero,at,1312
 801414c:	08014824 	muli	zero,at,1312
 8014150:	08014824 	muli	zero,at,1312
 8014154:	08014824 	muli	zero,at,1312
 8014158:	08014824 	muli	zero,at,1312
 801415c:	08014474 	orhi	zero,at,1297
 8014160:	08014658 	cmpnei	zero,at,1305
 8014164:	08014824 	muli	zero,at,1312
 8014168:	08014824 	muli	zero,at,1312
 801416c:	08014824 	muli	zero,at,1312
 8014170:	0801464c 	andi	zero,at,1305
 8014174:	08014658 	cmpnei	zero,at,1305
 8014178:	08014824 	muli	zero,at,1312
 801417c:	08014824 	muli	zero,at,1312
 8014180:	08014638 	rdprs	zero,at,1304
 8014184:	08014824 	muli	zero,at,1312
 8014188:	080145f8 	rdprs	zero,at,1303
 801418c:	080143c4 	addi	zero,at,1295
 8014190:	080141e8 	cmpgeui	zero,at,1287
 8014194:	08014760 	cmpeqi	zero,at,1309
 8014198:	08014824 	muli	zero,at,1312
 801419c:	0801470c 	andi	zero,at,1308
 80141a0:	08014824 	muli	zero,at,1312
 80141a4:	08014328 	cmpgeui	zero,at,1292
 80141a8:	08014824 	muli	zero,at,1312
 80141ac:	08014824 	muli	zero,at,1312
 80141b0:	08014274 	orhi	zero,at,1289
 80141b4:	d9002417 	ldw	r4,144(sp)
 80141b8:	d9402417 	ldw	r5,144(sp)
 80141bc:	21000017 	ldw	r4,0(r4)
 80141c0:	28800104 	addi	r2,r5,4
 80141c4:	d9002515 	stw	r4,148(sp)
 80141c8:	20032b0e 	bge	r4,zero,8014e78 <___svfiprintf_internal_r+0xf7c>
 80141cc:	d8c02517 	ldw	r3,148(sp)
 80141d0:	d8802415 	stw	r2,144(sp)
 80141d4:	00c7c83a 	sub	r3,zero,r3
 80141d8:	d8c02515 	stw	r3,148(sp)
 80141dc:	8c400114 	ori	r17,r17,4
 80141e0:	98c00007 	ldb	r3,0(r19)
 80141e4:	003f9106 	br	801402c <__alt_data_end+0xfc01402c>
 80141e8:	00800c04 	movi	r2,48
 80141ec:	d9402417 	ldw	r5,144(sp)
 80141f0:	d9002017 	ldw	r4,128(sp)
 80141f4:	d8801d05 	stb	r2,116(sp)
 80141f8:	00801e04 	movi	r2,120
 80141fc:	d8801d45 	stb	r2,117(sp)
 8014200:	d8001d85 	stb	zero,118(sp)
 8014204:	b811883a 	mov	r8,r23
 8014208:	28c00104 	addi	r3,r5,4
 801420c:	2c800017 	ldw	r18,0(r5)
 8014210:	0029883a 	mov	r20,zero
 8014214:	88800094 	ori	r2,r17,2
 8014218:	20036316 	blt	r4,zero,8014fa8 <___svfiprintf_internal_r+0x10ac>
 801421c:	00bfdfc4 	movi	r2,-129
 8014220:	88a0703a 	and	r16,r17,r2
 8014224:	d8c02415 	stw	r3,144(sp)
 8014228:	84000094 	ori	r16,r16,2
 801422c:	90031c26 	beq	r18,zero,8014ea0 <___svfiprintf_internal_r+0xfa4>
 8014230:	014200b4 	movhi	r5,2050
 8014234:	296ef304 	addi	r5,r5,-17460
 8014238:	002b883a 	mov	r21,zero
 801423c:	d9402915 	stw	r5,164(sp)
 8014240:	00002906 	br	80142e8 <___svfiprintf_internal_r+0x3ec>
 8014244:	8c400054 	ori	r17,r17,1
 8014248:	98c00007 	ldb	r3,0(r19)
 801424c:	003f7706 	br	801402c <__alt_data_end+0xfc01402c>
 8014250:	a8803fcc 	andi	r2,r21,255
 8014254:	1080201c 	xori	r2,r2,128
 8014258:	10bfe004 	addi	r2,r2,-128
 801425c:	10032a1e 	bne	r2,zero,8014f08 <___svfiprintf_internal_r+0x100c>
 8014260:	00c00044 	movi	r3,1
 8014264:	d8c02105 	stb	r3,132(sp)
 8014268:	05400804 	movi	r21,32
 801426c:	98c00007 	ldb	r3,0(r19)
 8014270:	003f6e06 	br	801402c <__alt_data_end+0xfc01402c>
 8014274:	8821883a 	mov	r16,r17
 8014278:	dc402103 	ldbu	r17,132(sp)
 801427c:	b811883a 	mov	r8,r23
 8014280:	8c403fcc 	andi	r17,r17,255
 8014284:	8803f01e 	bne	r17,zero,8015248 <___svfiprintf_internal_r+0x134c>
 8014288:	008200b4 	movhi	r2,2050
 801428c:	10aef304 	addi	r2,r2,-17460
 8014290:	d8802915 	stw	r2,164(sp)
 8014294:	8080080c 	andi	r2,r16,32
 8014298:	1000cd26 	beq	r2,zero,80145d0 <___svfiprintf_internal_r+0x6d4>
 801429c:	d9002417 	ldw	r4,144(sp)
 80142a0:	24800017 	ldw	r18,0(r4)
 80142a4:	25000117 	ldw	r20,4(r4)
 80142a8:	21000204 	addi	r4,r4,8
 80142ac:	d9002415 	stw	r4,144(sp)
 80142b0:	8080004c 	andi	r2,r16,1
 80142b4:	1002c726 	beq	r2,zero,8014dd4 <___svfiprintf_internal_r+0xed8>
 80142b8:	9504b03a 	or	r2,r18,r20
 80142bc:	1003061e 	bne	r2,zero,8014ed8 <___svfiprintf_internal_r+0xfdc>
 80142c0:	d9002017 	ldw	r4,128(sp)
 80142c4:	d8001d85 	stb	zero,118(sp)
 80142c8:	20033e16 	blt	r4,zero,8014fc4 <___svfiprintf_internal_r+0x10c8>
 80142cc:	00bfdfc4 	movi	r2,-129
 80142d0:	80a0703a 	and	r16,r16,r2
 80142d4:	d9402017 	ldw	r5,128(sp)
 80142d8:	002b883a 	mov	r21,zero
 80142dc:	28002826 	beq	r5,zero,8014380 <___svfiprintf_internal_r+0x484>
 80142e0:	0025883a 	mov	r18,zero
 80142e4:	0029883a 	mov	r20,zero
 80142e8:	d9002917 	ldw	r4,164(sp)
 80142ec:	dc401a04 	addi	r17,sp,104
 80142f0:	908003cc 	andi	r2,r18,15
 80142f4:	a006973a 	slli	r3,r20,28
 80142f8:	2085883a 	add	r2,r4,r2
 80142fc:	9024d13a 	srli	r18,r18,4
 8014300:	10800003 	ldbu	r2,0(r2)
 8014304:	a028d13a 	srli	r20,r20,4
 8014308:	8c7fffc4 	addi	r17,r17,-1
 801430c:	1ca4b03a 	or	r18,r3,r18
 8014310:	88800005 	stb	r2,0(r17)
 8014314:	9504b03a 	or	r2,r18,r20
 8014318:	103ff51e 	bne	r2,zero,80142f0 <__alt_data_end+0xfc0142f0>
 801431c:	d8801e17 	ldw	r2,120(sp)
 8014320:	1469c83a 	sub	r20,r2,r17
 8014324:	00001906 	br	801438c <___svfiprintf_internal_r+0x490>
 8014328:	8821883a 	mov	r16,r17
 801432c:	dc402103 	ldbu	r17,132(sp)
 8014330:	b811883a 	mov	r8,r23
 8014334:	8c403fcc 	andi	r17,r17,255
 8014338:	8803d01e 	bne	r17,zero,801527c <___svfiprintf_internal_r+0x1380>
 801433c:	8080080c 	andi	r2,r16,32
 8014340:	10016126 	beq	r2,zero,80148c8 <___svfiprintf_internal_r+0x9cc>
 8014344:	d9002417 	ldw	r4,144(sp)
 8014348:	d9402017 	ldw	r5,128(sp)
 801434c:	d8001d85 	stb	zero,118(sp)
 8014350:	20c00204 	addi	r3,r4,8
 8014354:	24800017 	ldw	r18,0(r4)
 8014358:	25000117 	ldw	r20,4(r4)
 801435c:	28030f16 	blt	r5,zero,8014f9c <___svfiprintf_internal_r+0x10a0>
 8014360:	013fdfc4 	movi	r4,-129
 8014364:	9504b03a 	or	r2,r18,r20
 8014368:	d8c02415 	stw	r3,144(sp)
 801436c:	8120703a 	and	r16,r16,r4
 8014370:	002b883a 	mov	r21,zero
 8014374:	1000cd1e 	bne	r2,zero,80146ac <___svfiprintf_internal_r+0x7b0>
 8014378:	d8c02017 	ldw	r3,128(sp)
 801437c:	1803141e 	bne	r3,zero,8014fd0 <___svfiprintf_internal_r+0x10d4>
 8014380:	d8002015 	stw	zero,128(sp)
 8014384:	0029883a 	mov	r20,zero
 8014388:	dc401a04 	addi	r17,sp,104
 801438c:	dc802017 	ldw	r18,128(sp)
 8014390:	9500010e 	bge	r18,r20,8014398 <___svfiprintf_internal_r+0x49c>
 8014394:	a025883a 	mov	r18,r20
 8014398:	ad403fcc 	andi	r21,r21,255
 801439c:	ad40201c 	xori	r21,r21,128
 80143a0:	ad7fe004 	addi	r21,r21,-128
 80143a4:	a8003f26 	beq	r21,zero,80144a4 <___svfiprintf_internal_r+0x5a8>
 80143a8:	94800044 	addi	r18,r18,1
 80143ac:	00003d06 	br	80144a4 <___svfiprintf_internal_r+0x5a8>
 80143b0:	00c00044 	movi	r3,1
 80143b4:	d8c02105 	stb	r3,132(sp)
 80143b8:	05400ac4 	movi	r21,43
 80143bc:	98c00007 	ldb	r3,0(r19)
 80143c0:	003f1a06 	br	801402c <__alt_data_end+0xfc01402c>
 80143c4:	8821883a 	mov	r16,r17
 80143c8:	dc402103 	ldbu	r17,132(sp)
 80143cc:	b811883a 	mov	r8,r23
 80143d0:	8c403fcc 	andi	r17,r17,255
 80143d4:	8803a71e 	bne	r17,zero,8015274 <___svfiprintf_internal_r+0x1378>
 80143d8:	8080080c 	andi	r2,r16,32
 80143dc:	10015726 	beq	r2,zero,801493c <___svfiprintf_internal_r+0xa40>
 80143e0:	d8c02417 	ldw	r3,144(sp)
 80143e4:	d9002017 	ldw	r4,128(sp)
 80143e8:	d8001d85 	stb	zero,118(sp)
 80143ec:	18800204 	addi	r2,r3,8
 80143f0:	1c800017 	ldw	r18,0(r3)
 80143f4:	1d000117 	ldw	r20,4(r3)
 80143f8:	2002db16 	blt	r4,zero,8014f68 <___svfiprintf_internal_r+0x106c>
 80143fc:	013fdfc4 	movi	r4,-129
 8014400:	9506b03a 	or	r3,r18,r20
 8014404:	d8802415 	stw	r2,144(sp)
 8014408:	8120703a 	and	r16,r16,r4
 801440c:	18015826 	beq	r3,zero,8014970 <___svfiprintf_internal_r+0xa74>
 8014410:	002b883a 	mov	r21,zero
 8014414:	dc401a04 	addi	r17,sp,104
 8014418:	9006d0fa 	srli	r3,r18,3
 801441c:	a008977a 	slli	r4,r20,29
 8014420:	a028d0fa 	srli	r20,r20,3
 8014424:	948001cc 	andi	r18,r18,7
 8014428:	90800c04 	addi	r2,r18,48
 801442c:	8c7fffc4 	addi	r17,r17,-1
 8014430:	20e4b03a 	or	r18,r4,r3
 8014434:	88800005 	stb	r2,0(r17)
 8014438:	9506b03a 	or	r3,r18,r20
 801443c:	183ff61e 	bne	r3,zero,8014418 <__alt_data_end+0xfc014418>
 8014440:	80c0004c 	andi	r3,r16,1
 8014444:	18028926 	beq	r3,zero,8014e6c <___svfiprintf_internal_r+0xf70>
 8014448:	10803fcc 	andi	r2,r2,255
 801444c:	1080201c 	xori	r2,r2,128
 8014450:	10bfe004 	addi	r2,r2,-128
 8014454:	00c00c04 	movi	r3,48
 8014458:	10ffb026 	beq	r2,r3,801431c <__alt_data_end+0xfc01431c>
 801445c:	88ffffc5 	stb	r3,-1(r17)
 8014460:	d8c01e17 	ldw	r3,120(sp)
 8014464:	88bfffc4 	addi	r2,r17,-1
 8014468:	1023883a 	mov	r17,r2
 801446c:	18a9c83a 	sub	r20,r3,r2
 8014470:	003fc606 	br	801438c <__alt_data_end+0xfc01438c>
 8014474:	d8c02417 	ldw	r3,144(sp)
 8014478:	04800044 	movi	r18,1
 801447c:	8821883a 	mov	r16,r17
 8014480:	18800017 	ldw	r2,0(r3)
 8014484:	18c00104 	addi	r3,r3,4
 8014488:	b811883a 	mov	r8,r23
 801448c:	d8001d85 	stb	zero,118(sp)
 8014490:	d8801005 	stb	r2,64(sp)
 8014494:	d8c02415 	stw	r3,144(sp)
 8014498:	9029883a 	mov	r20,r18
 801449c:	dc401004 	addi	r17,sp,64
 80144a0:	d8002015 	stw	zero,128(sp)
 80144a4:	80c0008c 	andi	r3,r16,2
 80144a8:	d8c02115 	stw	r3,132(sp)
 80144ac:	18000126 	beq	r3,zero,80144b4 <___svfiprintf_internal_r+0x5b8>
 80144b0:	94800084 	addi	r18,r18,2
 80144b4:	80c0210c 	andi	r3,r16,132
 80144b8:	d8c02215 	stw	r3,136(sp)
 80144bc:	1801321e 	bne	r3,zero,8014988 <___svfiprintf_internal_r+0xa8c>
 80144c0:	d9002517 	ldw	r4,148(sp)
 80144c4:	24b9c83a 	sub	fp,r4,r18
 80144c8:	07012f0e 	bge	zero,fp,8014988 <___svfiprintf_internal_r+0xa8c>
 80144cc:	02400404 	movi	r9,16
 80144d0:	d8c01c17 	ldw	r3,112(sp)
 80144d4:	d8801b17 	ldw	r2,108(sp)
 80144d8:	4f03250e 	bge	r9,fp,8015170 <___svfiprintf_internal_r+0x1274>
 80144dc:	010200b4 	movhi	r4,2050
 80144e0:	21306a04 	addi	r4,r4,-15960
 80144e4:	dc002a15 	stw	r16,168(sp)
 80144e8:	dc402b15 	stw	r17,172(sp)
 80144ec:	d9002815 	stw	r4,160(sp)
 80144f0:	e023883a 	mov	r17,fp
 80144f4:	482f883a 	mov	r23,r9
 80144f8:	9839883a 	mov	fp,r19
 80144fc:	054001c4 	movi	r21,7
 8014500:	9027883a 	mov	r19,r18
 8014504:	dc002717 	ldw	r16,156(sp)
 8014508:	dc802317 	ldw	r18,140(sp)
 801450c:	00000306 	br	801451c <___svfiprintf_internal_r+0x620>
 8014510:	8c7ffc04 	addi	r17,r17,-16
 8014514:	42000204 	addi	r8,r8,8
 8014518:	bc40130e 	bge	r23,r17,8014568 <___svfiprintf_internal_r+0x66c>
 801451c:	014200b4 	movhi	r5,2050
 8014520:	18c00404 	addi	r3,r3,16
 8014524:	10800044 	addi	r2,r2,1
 8014528:	29706a04 	addi	r5,r5,-15960
 801452c:	41400015 	stw	r5,0(r8)
 8014530:	45c00115 	stw	r23,4(r8)
 8014534:	d8c01c15 	stw	r3,112(sp)
 8014538:	d8801b15 	stw	r2,108(sp)
 801453c:	a8bff40e 	bge	r21,r2,8014510 <__alt_data_end+0xfc014510>
 8014540:	d9801a04 	addi	r6,sp,104
 8014544:	900b883a 	mov	r5,r18
 8014548:	8009883a 	mov	r4,r16
 801454c:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014550:	1001aa1e 	bne	r2,zero,8014bfc <___svfiprintf_internal_r+0xd00>
 8014554:	8c7ffc04 	addi	r17,r17,-16
 8014558:	d8c01c17 	ldw	r3,112(sp)
 801455c:	d8801b17 	ldw	r2,108(sp)
 8014560:	d811883a 	mov	r8,sp
 8014564:	bc7fed16 	blt	r23,r17,801451c <__alt_data_end+0xfc01451c>
 8014568:	9825883a 	mov	r18,r19
 801456c:	dc002a17 	ldw	r16,168(sp)
 8014570:	e027883a 	mov	r19,fp
 8014574:	8839883a 	mov	fp,r17
 8014578:	dc402b17 	ldw	r17,172(sp)
 801457c:	d9002817 	ldw	r4,160(sp)
 8014580:	e0c7883a 	add	r3,fp,r3
 8014584:	10800044 	addi	r2,r2,1
 8014588:	41000015 	stw	r4,0(r8)
 801458c:	47000115 	stw	fp,4(r8)
 8014590:	d8c01c15 	stw	r3,112(sp)
 8014594:	d8801b15 	stw	r2,108(sp)
 8014598:	010001c4 	movi	r4,7
 801459c:	20821616 	blt	r4,r2,8014df8 <___svfiprintf_internal_r+0xefc>
 80145a0:	42000204 	addi	r8,r8,8
 80145a4:	0000fa06 	br	8014990 <___svfiprintf_internal_r+0xa94>
 80145a8:	8821883a 	mov	r16,r17
 80145ac:	dc402103 	ldbu	r17,132(sp)
 80145b0:	b811883a 	mov	r8,r23
 80145b4:	8c403fcc 	andi	r17,r17,255
 80145b8:	8803361e 	bne	r17,zero,8015294 <___svfiprintf_internal_r+0x1398>
 80145bc:	014200b4 	movhi	r5,2050
 80145c0:	296eee04 	addi	r5,r5,-17480
 80145c4:	d9402915 	stw	r5,164(sp)
 80145c8:	8080080c 	andi	r2,r16,32
 80145cc:	103f331e 	bne	r2,zero,801429c <__alt_data_end+0xfc01429c>
 80145d0:	8080040c 	andi	r2,r16,16
 80145d4:	1002551e 	bne	r2,zero,8014f2c <___svfiprintf_internal_r+0x1030>
 80145d8:	8080100c 	andi	r2,r16,64
 80145dc:	1002a626 	beq	r2,zero,8015078 <___svfiprintf_internal_r+0x117c>
 80145e0:	d8802417 	ldw	r2,144(sp)
 80145e4:	0029883a 	mov	r20,zero
 80145e8:	1480000b 	ldhu	r18,0(r2)
 80145ec:	10800104 	addi	r2,r2,4
 80145f0:	d8802415 	stw	r2,144(sp)
 80145f4:	003f2e06 	br	80142b0 <__alt_data_end+0xfc0142b0>
 80145f8:	8821883a 	mov	r16,r17
 80145fc:	dc402103 	ldbu	r17,132(sp)
 8014600:	b811883a 	mov	r8,r23
 8014604:	8c403fcc 	andi	r17,r17,255
 8014608:	88030b1e 	bne	r17,zero,8015238 <___svfiprintf_internal_r+0x133c>
 801460c:	8080080c 	andi	r2,r16,32
 8014610:	1002271e 	bne	r2,zero,8014eb0 <___svfiprintf_internal_r+0xfb4>
 8014614:	8080040c 	andi	r2,r16,16
 8014618:	10028e26 	beq	r2,zero,8015054 <___svfiprintf_internal_r+0x1158>
 801461c:	d8c02417 	ldw	r3,144(sp)
 8014620:	d9002617 	ldw	r4,152(sp)
 8014624:	18800017 	ldw	r2,0(r3)
 8014628:	18c00104 	addi	r3,r3,4
 801462c:	d8c02415 	stw	r3,144(sp)
 8014630:	11000015 	stw	r4,0(r2)
 8014634:	003e5306 	br	8013f84 <__alt_data_end+0xfc013f84>
 8014638:	98c00007 	ldb	r3,0(r19)
 801463c:	01401b04 	movi	r5,108
 8014640:	19424f26 	beq	r3,r5,8014f80 <___svfiprintf_internal_r+0x1084>
 8014644:	8c400414 	ori	r17,r17,16
 8014648:	003e7806 	br	801402c <__alt_data_end+0xfc01402c>
 801464c:	8c401014 	ori	r17,r17,64
 8014650:	98c00007 	ldb	r3,0(r19)
 8014654:	003e7506 	br	801402c <__alt_data_end+0xfc01402c>
 8014658:	8821883a 	mov	r16,r17
 801465c:	dc402103 	ldbu	r17,132(sp)
 8014660:	b811883a 	mov	r8,r23
 8014664:	8c403fcc 	andi	r17,r17,255
 8014668:	8802fe1e 	bne	r17,zero,8015264 <___svfiprintf_internal_r+0x1368>
 801466c:	8080080c 	andi	r2,r16,32
 8014670:	10004626 	beq	r2,zero,801478c <___svfiprintf_internal_r+0x890>
 8014674:	d9002417 	ldw	r4,144(sp)
 8014678:	20800117 	ldw	r2,4(r4)
 801467c:	24800017 	ldw	r18,0(r4)
 8014680:	21000204 	addi	r4,r4,8
 8014684:	d9002415 	stw	r4,144(sp)
 8014688:	1029883a 	mov	r20,r2
 801468c:	10004a16 	blt	r2,zero,80147b8 <___svfiprintf_internal_r+0x8bc>
 8014690:	d9002017 	ldw	r4,128(sp)
 8014694:	dd401d83 	ldbu	r21,118(sp)
 8014698:	2001eb16 	blt	r4,zero,8014e48 <___svfiprintf_internal_r+0xf4c>
 801469c:	00ffdfc4 	movi	r3,-129
 80146a0:	9504b03a 	or	r2,r18,r20
 80146a4:	80e0703a 	and	r16,r16,r3
 80146a8:	103f3326 	beq	r2,zero,8014378 <__alt_data_end+0xfc014378>
 80146ac:	a0009426 	beq	r20,zero,8014900 <___svfiprintf_internal_r+0xa04>
 80146b0:	dc401a04 	addi	r17,sp,104
 80146b4:	402f883a 	mov	r23,r8
 80146b8:	9009883a 	mov	r4,r18
 80146bc:	a00b883a 	mov	r5,r20
 80146c0:	01800284 	movi	r6,10
 80146c4:	000f883a 	mov	r7,zero
 80146c8:	8015d580 	call	8015d58 <__umoddi3>
 80146cc:	10800c04 	addi	r2,r2,48
 80146d0:	8c7fffc4 	addi	r17,r17,-1
 80146d4:	9009883a 	mov	r4,r18
 80146d8:	a00b883a 	mov	r5,r20
 80146dc:	88800005 	stb	r2,0(r17)
 80146e0:	01800284 	movi	r6,10
 80146e4:	000f883a 	mov	r7,zero
 80146e8:	801575c0 	call	801575c <__udivdi3>
 80146ec:	1025883a 	mov	r18,r2
 80146f0:	10c4b03a 	or	r2,r2,r3
 80146f4:	1829883a 	mov	r20,r3
 80146f8:	103fef1e 	bne	r2,zero,80146b8 <__alt_data_end+0xfc0146b8>
 80146fc:	d9001e17 	ldw	r4,120(sp)
 8014700:	b811883a 	mov	r8,r23
 8014704:	2469c83a 	sub	r20,r4,r17
 8014708:	003f2006 	br	801438c <__alt_data_end+0xfc01438c>
 801470c:	d8802417 	ldw	r2,144(sp)
 8014710:	8821883a 	mov	r16,r17
 8014714:	d8001d85 	stb	zero,118(sp)
 8014718:	14400017 	ldw	r17,0(r2)
 801471c:	b811883a 	mov	r8,r23
 8014720:	15c00104 	addi	r23,r2,4
 8014724:	88026c26 	beq	r17,zero,80150d8 <___svfiprintf_internal_r+0x11dc>
 8014728:	d8c02017 	ldw	r3,128(sp)
 801472c:	18025f16 	blt	r3,zero,80150ac <___svfiprintf_internal_r+0x11b0>
 8014730:	180d883a 	mov	r6,r3
 8014734:	000b883a 	mov	r5,zero
 8014738:	8809883a 	mov	r4,r17
 801473c:	da002d15 	stw	r8,180(sp)
 8014740:	800b21c0 	call	800b21c <memchr>
 8014744:	da002d17 	ldw	r8,180(sp)
 8014748:	1002a526 	beq	r2,zero,80151e0 <___svfiprintf_internal_r+0x12e4>
 801474c:	1469c83a 	sub	r20,r2,r17
 8014750:	dd401d83 	ldbu	r21,118(sp)
 8014754:	ddc02415 	stw	r23,144(sp)
 8014758:	d8002015 	stw	zero,128(sp)
 801475c:	003f0b06 	br	801438c <__alt_data_end+0xfc01438c>
 8014760:	8c400814 	ori	r17,r17,32
 8014764:	98c00007 	ldb	r3,0(r19)
 8014768:	003e3006 	br	801402c <__alt_data_end+0xfc01402c>
 801476c:	8821883a 	mov	r16,r17
 8014770:	dc402103 	ldbu	r17,132(sp)
 8014774:	b811883a 	mov	r8,r23
 8014778:	8c403fcc 	andi	r17,r17,255
 801477c:	8802b01e 	bne	r17,zero,8015240 <___svfiprintf_internal_r+0x1344>
 8014780:	84000414 	ori	r16,r16,16
 8014784:	8080080c 	andi	r2,r16,32
 8014788:	103fba1e 	bne	r2,zero,8014674 <__alt_data_end+0xfc014674>
 801478c:	8080040c 	andi	r2,r16,16
 8014790:	1001df1e 	bne	r2,zero,8014f10 <___svfiprintf_internal_r+0x1014>
 8014794:	8080100c 	andi	r2,r16,64
 8014798:	10023d26 	beq	r2,zero,8015090 <___svfiprintf_internal_r+0x1194>
 801479c:	d8802417 	ldw	r2,144(sp)
 80147a0:	1480000f 	ldh	r18,0(r2)
 80147a4:	10800104 	addi	r2,r2,4
 80147a8:	d8802415 	stw	r2,144(sp)
 80147ac:	9029d7fa 	srai	r20,r18,31
 80147b0:	a005883a 	mov	r2,r20
 80147b4:	103fb60e 	bge	r2,zero,8014690 <__alt_data_end+0xfc014690>
 80147b8:	d9402017 	ldw	r5,128(sp)
 80147bc:	04a5c83a 	sub	r18,zero,r18
 80147c0:	05400b44 	movi	r21,45
 80147c4:	9004c03a 	cmpne	r2,r18,zero
 80147c8:	0529c83a 	sub	r20,zero,r20
 80147cc:	dd401d85 	stb	r21,118(sp)
 80147d0:	a0a9c83a 	sub	r20,r20,r2
 80147d4:	28026c16 	blt	r5,zero,8015188 <___svfiprintf_internal_r+0x128c>
 80147d8:	00bfdfc4 	movi	r2,-129
 80147dc:	80a0703a 	and	r16,r16,r2
 80147e0:	a03fb31e 	bne	r20,zero,80146b0 <__alt_data_end+0xfc0146b0>
 80147e4:	00004606 	br	8014900 <___svfiprintf_internal_r+0xa04>
 80147e8:	9839883a 	mov	fp,r19
 80147ec:	d8002515 	stw	zero,148(sp)
 80147f0:	1c3ff404 	addi	r16,r3,-48
 80147f4:	0009883a 	mov	r4,zero
 80147f8:	01400284 	movi	r5,10
 80147fc:	80028f40 	call	80028f4 <__mulsi3>
 8014800:	e0c00007 	ldb	r3,0(fp)
 8014804:	8089883a 	add	r4,r16,r2
 8014808:	9cc00044 	addi	r19,r19,1
 801480c:	1c3ff404 	addi	r16,r3,-48
 8014810:	9839883a 	mov	fp,r19
 8014814:	a43ff82e 	bgeu	r20,r16,80147f8 <__alt_data_end+0xfc0147f8>
 8014818:	d9002515 	stw	r4,148(sp)
 801481c:	18bff804 	addi	r2,r3,-32
 8014820:	90be052e 	bgeu	r18,r2,8014038 <__alt_data_end+0xfc014038>
 8014824:	8821883a 	mov	r16,r17
 8014828:	dc402103 	ldbu	r17,132(sp)
 801482c:	b811883a 	mov	r8,r23
 8014830:	8c403fcc 	andi	r17,r17,255
 8014834:	88028d1e 	bne	r17,zero,801526c <___svfiprintf_internal_r+0x1370>
 8014838:	1800ea26 	beq	r3,zero,8014be4 <___svfiprintf_internal_r+0xce8>
 801483c:	04800044 	movi	r18,1
 8014840:	d8c01005 	stb	r3,64(sp)
 8014844:	d8001d85 	stb	zero,118(sp)
 8014848:	9029883a 	mov	r20,r18
 801484c:	dc401004 	addi	r17,sp,64
 8014850:	003f1306 	br	80144a0 <__alt_data_end+0xfc0144a0>
 8014854:	8c402014 	ori	r17,r17,128
 8014858:	98c00007 	ldb	r3,0(r19)
 801485c:	003df306 	br	801402c <__alt_data_end+0xfc01402c>
 8014860:	98c00007 	ldb	r3,0(r19)
 8014864:	01000a84 	movi	r4,42
 8014868:	9f000044 	addi	fp,r19,1
 801486c:	19026326 	beq	r3,r4,80151fc <___svfiprintf_internal_r+0x1300>
 8014870:	1c3ff404 	addi	r16,r3,-48
 8014874:	0009883a 	mov	r4,zero
 8014878:	a4025636 	bltu	r20,r16,80151d4 <___svfiprintf_internal_r+0x12d8>
 801487c:	01400284 	movi	r5,10
 8014880:	80028f40 	call	80028f4 <__mulsi3>
 8014884:	e0c00007 	ldb	r3,0(fp)
 8014888:	1409883a 	add	r4,r2,r16
 801488c:	e4c00044 	addi	r19,fp,1
 8014890:	1c3ff404 	addi	r16,r3,-48
 8014894:	9839883a 	mov	fp,r19
 8014898:	a43ff82e 	bgeu	r20,r16,801487c <__alt_data_end+0xfc01487c>
 801489c:	20020c16 	blt	r4,zero,80150d0 <___svfiprintf_internal_r+0x11d4>
 80148a0:	d9002015 	stw	r4,128(sp)
 80148a4:	003de206 	br	8014030 <__alt_data_end+0xfc014030>
 80148a8:	8821883a 	mov	r16,r17
 80148ac:	dc402103 	ldbu	r17,132(sp)
 80148b0:	b811883a 	mov	r8,r23
 80148b4:	8c403fcc 	andi	r17,r17,255
 80148b8:	8802721e 	bne	r17,zero,8015284 <___svfiprintf_internal_r+0x1388>
 80148bc:	84000414 	ori	r16,r16,16
 80148c0:	8080080c 	andi	r2,r16,32
 80148c4:	103e9f1e 	bne	r2,zero,8014344 <__alt_data_end+0xfc014344>
 80148c8:	8080040c 	andi	r2,r16,16
 80148cc:	10015326 	beq	r2,zero,8014e1c <___svfiprintf_internal_r+0xf20>
 80148d0:	d8c02417 	ldw	r3,144(sp)
 80148d4:	d9002017 	ldw	r4,128(sp)
 80148d8:	d8001d85 	stb	zero,118(sp)
 80148dc:	18800104 	addi	r2,r3,4
 80148e0:	1c800017 	ldw	r18,0(r3)
 80148e4:	0029883a 	mov	r20,zero
 80148e8:	20015516 	blt	r4,zero,8014e40 <___svfiprintf_internal_r+0xf44>
 80148ec:	00ffdfc4 	movi	r3,-129
 80148f0:	d8802415 	stw	r2,144(sp)
 80148f4:	80e0703a 	and	r16,r16,r3
 80148f8:	002b883a 	mov	r21,zero
 80148fc:	903e9e26 	beq	r18,zero,8014378 <__alt_data_end+0xfc014378>
 8014900:	00800244 	movi	r2,9
 8014904:	14bf6a36 	bltu	r2,r18,80146b0 <__alt_data_end+0xfc0146b0>
 8014908:	94800c04 	addi	r18,r18,48
 801490c:	dc8019c5 	stb	r18,103(sp)
 8014910:	dd002c17 	ldw	r20,176(sp)
 8014914:	dc4019c4 	addi	r17,sp,103
 8014918:	003e9c06 	br	801438c <__alt_data_end+0xfc01438c>
 801491c:	8821883a 	mov	r16,r17
 8014920:	dc402103 	ldbu	r17,132(sp)
 8014924:	b811883a 	mov	r8,r23
 8014928:	8c403fcc 	andi	r17,r17,255
 801492c:	8802571e 	bne	r17,zero,801528c <___svfiprintf_internal_r+0x1390>
 8014930:	84000414 	ori	r16,r16,16
 8014934:	8080080c 	andi	r2,r16,32
 8014938:	103ea91e 	bne	r2,zero,80143e0 <__alt_data_end+0xfc0143e0>
 801493c:	8080040c 	andi	r2,r16,16
 8014940:	10018026 	beq	r2,zero,8014f44 <___svfiprintf_internal_r+0x1048>
 8014944:	d9402417 	ldw	r5,144(sp)
 8014948:	d8c02017 	ldw	r3,128(sp)
 801494c:	d8001d85 	stb	zero,118(sp)
 8014950:	28800104 	addi	r2,r5,4
 8014954:	2c800017 	ldw	r18,0(r5)
 8014958:	0029883a 	mov	r20,zero
 801495c:	18018216 	blt	r3,zero,8014f68 <___svfiprintf_internal_r+0x106c>
 8014960:	00ffdfc4 	movi	r3,-129
 8014964:	d8802415 	stw	r2,144(sp)
 8014968:	80e0703a 	and	r16,r16,r3
 801496c:	903ea81e 	bne	r18,zero,8014410 <__alt_data_end+0xfc014410>
 8014970:	d8802017 	ldw	r2,128(sp)
 8014974:	002b883a 	mov	r21,zero
 8014978:	1001f226 	beq	r2,zero,8015144 <___svfiprintf_internal_r+0x1248>
 801497c:	0025883a 	mov	r18,zero
 8014980:	0029883a 	mov	r20,zero
 8014984:	003ea306 	br	8014414 <__alt_data_end+0xfc014414>
 8014988:	d8c01c17 	ldw	r3,112(sp)
 801498c:	d8801b17 	ldw	r2,108(sp)
 8014990:	d9001d87 	ldb	r4,118(sp)
 8014994:	20000b26 	beq	r4,zero,80149c4 <___svfiprintf_internal_r+0xac8>
 8014998:	d9001d84 	addi	r4,sp,118
 801499c:	18c00044 	addi	r3,r3,1
 80149a0:	10800044 	addi	r2,r2,1
 80149a4:	41000015 	stw	r4,0(r8)
 80149a8:	01000044 	movi	r4,1
 80149ac:	41000115 	stw	r4,4(r8)
 80149b0:	d8c01c15 	stw	r3,112(sp)
 80149b4:	d8801b15 	stw	r2,108(sp)
 80149b8:	010001c4 	movi	r4,7
 80149bc:	2080f316 	blt	r4,r2,8014d8c <___svfiprintf_internal_r+0xe90>
 80149c0:	42000204 	addi	r8,r8,8
 80149c4:	d9402117 	ldw	r5,132(sp)
 80149c8:	28000b26 	beq	r5,zero,80149f8 <___svfiprintf_internal_r+0xafc>
 80149cc:	d9001d04 	addi	r4,sp,116
 80149d0:	18c00084 	addi	r3,r3,2
 80149d4:	10800044 	addi	r2,r2,1
 80149d8:	41000015 	stw	r4,0(r8)
 80149dc:	01000084 	movi	r4,2
 80149e0:	41000115 	stw	r4,4(r8)
 80149e4:	d8c01c15 	stw	r3,112(sp)
 80149e8:	d8801b15 	stw	r2,108(sp)
 80149ec:	010001c4 	movi	r4,7
 80149f0:	2080ef16 	blt	r4,r2,8014db0 <___svfiprintf_internal_r+0xeb4>
 80149f4:	42000204 	addi	r8,r8,8
 80149f8:	d9402217 	ldw	r5,136(sp)
 80149fc:	01002004 	movi	r4,128
 8014a00:	29008f26 	beq	r5,r4,8014c40 <___svfiprintf_internal_r+0xd44>
 8014a04:	d9002017 	ldw	r4,128(sp)
 8014a08:	252fc83a 	sub	r23,r4,r20
 8014a0c:	05c0310e 	bge	zero,r23,8014ad4 <___svfiprintf_internal_r+0xbd8>
 8014a10:	07000404 	movi	fp,16
 8014a14:	e5c17d0e 	bge	fp,r23,801500c <___svfiprintf_internal_r+0x1110>
 8014a18:	010200b4 	movhi	r4,2050
 8014a1c:	21306604 	addi	r4,r4,-15976
 8014a20:	dc002015 	stw	r16,128(sp)
 8014a24:	dc402215 	stw	r17,136(sp)
 8014a28:	d9002115 	stw	r4,132(sp)
 8014a2c:	b823883a 	mov	r17,r23
 8014a30:	054001c4 	movi	r21,7
 8014a34:	982f883a 	mov	r23,r19
 8014a38:	dc002717 	ldw	r16,156(sp)
 8014a3c:	9027883a 	mov	r19,r18
 8014a40:	dc802317 	ldw	r18,140(sp)
 8014a44:	00000306 	br	8014a54 <___svfiprintf_internal_r+0xb58>
 8014a48:	8c7ffc04 	addi	r17,r17,-16
 8014a4c:	42000204 	addi	r8,r8,8
 8014a50:	e440110e 	bge	fp,r17,8014a98 <___svfiprintf_internal_r+0xb9c>
 8014a54:	18c00404 	addi	r3,r3,16
 8014a58:	10800044 	addi	r2,r2,1
 8014a5c:	45800015 	stw	r22,0(r8)
 8014a60:	47000115 	stw	fp,4(r8)
 8014a64:	d8c01c15 	stw	r3,112(sp)
 8014a68:	d8801b15 	stw	r2,108(sp)
 8014a6c:	a8bff60e 	bge	r21,r2,8014a48 <__alt_data_end+0xfc014a48>
 8014a70:	d9801a04 	addi	r6,sp,104
 8014a74:	900b883a 	mov	r5,r18
 8014a78:	8009883a 	mov	r4,r16
 8014a7c:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014a80:	10005e1e 	bne	r2,zero,8014bfc <___svfiprintf_internal_r+0xd00>
 8014a84:	8c7ffc04 	addi	r17,r17,-16
 8014a88:	d8c01c17 	ldw	r3,112(sp)
 8014a8c:	d8801b17 	ldw	r2,108(sp)
 8014a90:	d811883a 	mov	r8,sp
 8014a94:	e47fef16 	blt	fp,r17,8014a54 <__alt_data_end+0xfc014a54>
 8014a98:	9825883a 	mov	r18,r19
 8014a9c:	dc002017 	ldw	r16,128(sp)
 8014aa0:	b827883a 	mov	r19,r23
 8014aa4:	882f883a 	mov	r23,r17
 8014aa8:	dc402217 	ldw	r17,136(sp)
 8014aac:	d9402117 	ldw	r5,132(sp)
 8014ab0:	1dc7883a 	add	r3,r3,r23
 8014ab4:	10800044 	addi	r2,r2,1
 8014ab8:	41400015 	stw	r5,0(r8)
 8014abc:	45c00115 	stw	r23,4(r8)
 8014ac0:	d8c01c15 	stw	r3,112(sp)
 8014ac4:	d8801b15 	stw	r2,108(sp)
 8014ac8:	010001c4 	movi	r4,7
 8014acc:	2080a616 	blt	r4,r2,8014d68 <___svfiprintf_internal_r+0xe6c>
 8014ad0:	42000204 	addi	r8,r8,8
 8014ad4:	a0c7883a 	add	r3,r20,r3
 8014ad8:	10800044 	addi	r2,r2,1
 8014adc:	44400015 	stw	r17,0(r8)
 8014ae0:	45000115 	stw	r20,4(r8)
 8014ae4:	d8c01c15 	stw	r3,112(sp)
 8014ae8:	d8801b15 	stw	r2,108(sp)
 8014aec:	010001c4 	movi	r4,7
 8014af0:	20808816 	blt	r4,r2,8014d14 <___svfiprintf_internal_r+0xe18>
 8014af4:	42000204 	addi	r8,r8,8
 8014af8:	8400010c 	andi	r16,r16,4
 8014afc:	80002c26 	beq	r16,zero,8014bb0 <___svfiprintf_internal_r+0xcb4>
 8014b00:	d8802517 	ldw	r2,148(sp)
 8014b04:	14a1c83a 	sub	r16,r2,r18
 8014b08:	0400290e 	bge	zero,r16,8014bb0 <___svfiprintf_internal_r+0xcb4>
 8014b0c:	04400404 	movi	r17,16
 8014b10:	d8801b17 	ldw	r2,108(sp)
 8014b14:	8c01a70e 	bge	r17,r16,80151b4 <___svfiprintf_internal_r+0x12b8>
 8014b18:	014200b4 	movhi	r5,2050
 8014b1c:	29706a04 	addi	r5,r5,-15960
 8014b20:	d9402815 	stw	r5,160(sp)
 8014b24:	050001c4 	movi	r20,7
 8014b28:	dd402717 	ldw	r21,156(sp)
 8014b2c:	ddc02317 	ldw	r23,140(sp)
 8014b30:	00000306 	br	8014b40 <___svfiprintf_internal_r+0xc44>
 8014b34:	843ffc04 	addi	r16,r16,-16
 8014b38:	42000204 	addi	r8,r8,8
 8014b3c:	8c00130e 	bge	r17,r16,8014b8c <___svfiprintf_internal_r+0xc90>
 8014b40:	010200b4 	movhi	r4,2050
 8014b44:	18c00404 	addi	r3,r3,16
 8014b48:	10800044 	addi	r2,r2,1
 8014b4c:	21306a04 	addi	r4,r4,-15960
 8014b50:	41000015 	stw	r4,0(r8)
 8014b54:	44400115 	stw	r17,4(r8)
 8014b58:	d8c01c15 	stw	r3,112(sp)
 8014b5c:	d8801b15 	stw	r2,108(sp)
 8014b60:	a0bff40e 	bge	r20,r2,8014b34 <__alt_data_end+0xfc014b34>
 8014b64:	d9801a04 	addi	r6,sp,104
 8014b68:	b80b883a 	mov	r5,r23
 8014b6c:	a809883a 	mov	r4,r21
 8014b70:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014b74:	1000211e 	bne	r2,zero,8014bfc <___svfiprintf_internal_r+0xd00>
 8014b78:	843ffc04 	addi	r16,r16,-16
 8014b7c:	d8c01c17 	ldw	r3,112(sp)
 8014b80:	d8801b17 	ldw	r2,108(sp)
 8014b84:	d811883a 	mov	r8,sp
 8014b88:	8c3fed16 	blt	r17,r16,8014b40 <__alt_data_end+0xfc014b40>
 8014b8c:	d9402817 	ldw	r5,160(sp)
 8014b90:	1c07883a 	add	r3,r3,r16
 8014b94:	10800044 	addi	r2,r2,1
 8014b98:	41400015 	stw	r5,0(r8)
 8014b9c:	44000115 	stw	r16,4(r8)
 8014ba0:	d8c01c15 	stw	r3,112(sp)
 8014ba4:	d8801b15 	stw	r2,108(sp)
 8014ba8:	010001c4 	movi	r4,7
 8014bac:	2080b516 	blt	r4,r2,8014e84 <___svfiprintf_internal_r+0xf88>
 8014bb0:	d8802517 	ldw	r2,148(sp)
 8014bb4:	1480010e 	bge	r2,r18,8014bbc <___svfiprintf_internal_r+0xcc0>
 8014bb8:	9005883a 	mov	r2,r18
 8014bbc:	d9002617 	ldw	r4,152(sp)
 8014bc0:	2089883a 	add	r4,r4,r2
 8014bc4:	d9002615 	stw	r4,152(sp)
 8014bc8:	18005a1e 	bne	r3,zero,8014d34 <___svfiprintf_internal_r+0xe38>
 8014bcc:	98800007 	ldb	r2,0(r19)
 8014bd0:	d8001b15 	stw	zero,108(sp)
 8014bd4:	d811883a 	mov	r8,sp
 8014bd8:	103cec1e 	bne	r2,zero,8013f8c <__alt_data_end+0xfc013f8c>
 8014bdc:	9825883a 	mov	r18,r19
 8014be0:	003d0206 	br	8013fec <__alt_data_end+0xfc013fec>
 8014be4:	d8801c17 	ldw	r2,112(sp)
 8014be8:	10000426 	beq	r2,zero,8014bfc <___svfiprintf_internal_r+0xd00>
 8014bec:	d9402317 	ldw	r5,140(sp)
 8014bf0:	d9002717 	ldw	r4,156(sp)
 8014bf4:	d9801a04 	addi	r6,sp,104
 8014bf8:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014bfc:	d9402317 	ldw	r5,140(sp)
 8014c00:	d8802617 	ldw	r2,152(sp)
 8014c04:	28c0030b 	ldhu	r3,12(r5)
 8014c08:	18c0100c 	andi	r3,r3,64
 8014c0c:	18015c1e 	bne	r3,zero,8015180 <___svfiprintf_internal_r+0x1284>
 8014c10:	dfc03717 	ldw	ra,220(sp)
 8014c14:	df003617 	ldw	fp,216(sp)
 8014c18:	ddc03517 	ldw	r23,212(sp)
 8014c1c:	dd803417 	ldw	r22,208(sp)
 8014c20:	dd403317 	ldw	r21,204(sp)
 8014c24:	dd003217 	ldw	r20,200(sp)
 8014c28:	dcc03117 	ldw	r19,196(sp)
 8014c2c:	dc803017 	ldw	r18,192(sp)
 8014c30:	dc402f17 	ldw	r17,188(sp)
 8014c34:	dc002e17 	ldw	r16,184(sp)
 8014c38:	dec03804 	addi	sp,sp,224
 8014c3c:	f800283a 	ret
 8014c40:	d9002517 	ldw	r4,148(sp)
 8014c44:	24afc83a 	sub	r23,r4,r18
 8014c48:	05ff6e0e 	bge	zero,r23,8014a04 <__alt_data_end+0xfc014a04>
 8014c4c:	07000404 	movi	fp,16
 8014c50:	e5c15c0e 	bge	fp,r23,80151c4 <___svfiprintf_internal_r+0x12c8>
 8014c54:	010200b4 	movhi	r4,2050
 8014c58:	21306604 	addi	r4,r4,-15976
 8014c5c:	dc002215 	stw	r16,136(sp)
 8014c60:	dc402815 	stw	r17,160(sp)
 8014c64:	d9002115 	stw	r4,132(sp)
 8014c68:	b823883a 	mov	r17,r23
 8014c6c:	054001c4 	movi	r21,7
 8014c70:	982f883a 	mov	r23,r19
 8014c74:	dc002717 	ldw	r16,156(sp)
 8014c78:	9027883a 	mov	r19,r18
 8014c7c:	dc802317 	ldw	r18,140(sp)
 8014c80:	00000306 	br	8014c90 <___svfiprintf_internal_r+0xd94>
 8014c84:	8c7ffc04 	addi	r17,r17,-16
 8014c88:	42000204 	addi	r8,r8,8
 8014c8c:	e440110e 	bge	fp,r17,8014cd4 <___svfiprintf_internal_r+0xdd8>
 8014c90:	18c00404 	addi	r3,r3,16
 8014c94:	10800044 	addi	r2,r2,1
 8014c98:	45800015 	stw	r22,0(r8)
 8014c9c:	47000115 	stw	fp,4(r8)
 8014ca0:	d8c01c15 	stw	r3,112(sp)
 8014ca4:	d8801b15 	stw	r2,108(sp)
 8014ca8:	a8bff60e 	bge	r21,r2,8014c84 <__alt_data_end+0xfc014c84>
 8014cac:	d9801a04 	addi	r6,sp,104
 8014cb0:	900b883a 	mov	r5,r18
 8014cb4:	8009883a 	mov	r4,r16
 8014cb8:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014cbc:	103fcf1e 	bne	r2,zero,8014bfc <__alt_data_end+0xfc014bfc>
 8014cc0:	8c7ffc04 	addi	r17,r17,-16
 8014cc4:	d8c01c17 	ldw	r3,112(sp)
 8014cc8:	d8801b17 	ldw	r2,108(sp)
 8014ccc:	d811883a 	mov	r8,sp
 8014cd0:	e47fef16 	blt	fp,r17,8014c90 <__alt_data_end+0xfc014c90>
 8014cd4:	9825883a 	mov	r18,r19
 8014cd8:	dc002217 	ldw	r16,136(sp)
 8014cdc:	b827883a 	mov	r19,r23
 8014ce0:	882f883a 	mov	r23,r17
 8014ce4:	dc402817 	ldw	r17,160(sp)
 8014ce8:	d9402117 	ldw	r5,132(sp)
 8014cec:	1dc7883a 	add	r3,r3,r23
 8014cf0:	10800044 	addi	r2,r2,1
 8014cf4:	41400015 	stw	r5,0(r8)
 8014cf8:	45c00115 	stw	r23,4(r8)
 8014cfc:	d8c01c15 	stw	r3,112(sp)
 8014d00:	d8801b15 	stw	r2,108(sp)
 8014d04:	010001c4 	movi	r4,7
 8014d08:	2080b716 	blt	r4,r2,8014fe8 <___svfiprintf_internal_r+0x10ec>
 8014d0c:	42000204 	addi	r8,r8,8
 8014d10:	003f3c06 	br	8014a04 <__alt_data_end+0xfc014a04>
 8014d14:	d9402317 	ldw	r5,140(sp)
 8014d18:	d9002717 	ldw	r4,156(sp)
 8014d1c:	d9801a04 	addi	r6,sp,104
 8014d20:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014d24:	103fb51e 	bne	r2,zero,8014bfc <__alt_data_end+0xfc014bfc>
 8014d28:	d8c01c17 	ldw	r3,112(sp)
 8014d2c:	d811883a 	mov	r8,sp
 8014d30:	003f7106 	br	8014af8 <__alt_data_end+0xfc014af8>
 8014d34:	d9402317 	ldw	r5,140(sp)
 8014d38:	d9002717 	ldw	r4,156(sp)
 8014d3c:	d9801a04 	addi	r6,sp,104
 8014d40:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014d44:	103fa126 	beq	r2,zero,8014bcc <__alt_data_end+0xfc014bcc>
 8014d48:	003fac06 	br	8014bfc <__alt_data_end+0xfc014bfc>
 8014d4c:	d9402317 	ldw	r5,140(sp)
 8014d50:	d9002717 	ldw	r4,156(sp)
 8014d54:	d9801a04 	addi	r6,sp,104
 8014d58:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014d5c:	103fa71e 	bne	r2,zero,8014bfc <__alt_data_end+0xfc014bfc>
 8014d60:	d811883a 	mov	r8,sp
 8014d64:	003c9e06 	br	8013fe0 <__alt_data_end+0xfc013fe0>
 8014d68:	d9402317 	ldw	r5,140(sp)
 8014d6c:	d9002717 	ldw	r4,156(sp)
 8014d70:	d9801a04 	addi	r6,sp,104
 8014d74:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014d78:	103fa01e 	bne	r2,zero,8014bfc <__alt_data_end+0xfc014bfc>
 8014d7c:	d8c01c17 	ldw	r3,112(sp)
 8014d80:	d8801b17 	ldw	r2,108(sp)
 8014d84:	d811883a 	mov	r8,sp
 8014d88:	003f5206 	br	8014ad4 <__alt_data_end+0xfc014ad4>
 8014d8c:	d9402317 	ldw	r5,140(sp)
 8014d90:	d9002717 	ldw	r4,156(sp)
 8014d94:	d9801a04 	addi	r6,sp,104
 8014d98:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014d9c:	103f971e 	bne	r2,zero,8014bfc <__alt_data_end+0xfc014bfc>
 8014da0:	d8c01c17 	ldw	r3,112(sp)
 8014da4:	d8801b17 	ldw	r2,108(sp)
 8014da8:	d811883a 	mov	r8,sp
 8014dac:	003f0506 	br	80149c4 <__alt_data_end+0xfc0149c4>
 8014db0:	d9402317 	ldw	r5,140(sp)
 8014db4:	d9002717 	ldw	r4,156(sp)
 8014db8:	d9801a04 	addi	r6,sp,104
 8014dbc:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014dc0:	103f8e1e 	bne	r2,zero,8014bfc <__alt_data_end+0xfc014bfc>
 8014dc4:	d8c01c17 	ldw	r3,112(sp)
 8014dc8:	d8801b17 	ldw	r2,108(sp)
 8014dcc:	d811883a 	mov	r8,sp
 8014dd0:	003f0906 	br	80149f8 <__alt_data_end+0xfc0149f8>
 8014dd4:	d9402017 	ldw	r5,128(sp)
 8014dd8:	d8001d85 	stb	zero,118(sp)
 8014ddc:	28007716 	blt	r5,zero,8014fbc <___svfiprintf_internal_r+0x10c0>
 8014de0:	00ffdfc4 	movi	r3,-129
 8014de4:	9504b03a 	or	r2,r18,r20
 8014de8:	80e0703a 	and	r16,r16,r3
 8014dec:	103d3926 	beq	r2,zero,80142d4 <__alt_data_end+0xfc0142d4>
 8014df0:	002b883a 	mov	r21,zero
 8014df4:	003d3c06 	br	80142e8 <__alt_data_end+0xfc0142e8>
 8014df8:	d9402317 	ldw	r5,140(sp)
 8014dfc:	d9002717 	ldw	r4,156(sp)
 8014e00:	d9801a04 	addi	r6,sp,104
 8014e04:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014e08:	103f7c1e 	bne	r2,zero,8014bfc <__alt_data_end+0xfc014bfc>
 8014e0c:	d8c01c17 	ldw	r3,112(sp)
 8014e10:	d8801b17 	ldw	r2,108(sp)
 8014e14:	d811883a 	mov	r8,sp
 8014e18:	003edd06 	br	8014990 <__alt_data_end+0xfc014990>
 8014e1c:	8080100c 	andi	r2,r16,64
 8014e20:	d8001d85 	stb	zero,118(sp)
 8014e24:	10008426 	beq	r2,zero,8015038 <___svfiprintf_internal_r+0x113c>
 8014e28:	d9402417 	ldw	r5,144(sp)
 8014e2c:	d8c02017 	ldw	r3,128(sp)
 8014e30:	0029883a 	mov	r20,zero
 8014e34:	28800104 	addi	r2,r5,4
 8014e38:	2c80000b 	ldhu	r18,0(r5)
 8014e3c:	183eab0e 	bge	r3,zero,80148ec <__alt_data_end+0xfc0148ec>
 8014e40:	d8802415 	stw	r2,144(sp)
 8014e44:	002b883a 	mov	r21,zero
 8014e48:	9504b03a 	or	r2,r18,r20
 8014e4c:	103e171e 	bne	r2,zero,80146ac <__alt_data_end+0xfc0146ac>
 8014e50:	00800044 	movi	r2,1
 8014e54:	10803fcc 	andi	r2,r2,255
 8014e58:	00c00044 	movi	r3,1
 8014e5c:	10c05c26 	beq	r2,r3,8014fd0 <___svfiprintf_internal_r+0x10d4>
 8014e60:	00c00084 	movi	r3,2
 8014e64:	10fd1e26 	beq	r2,r3,80142e0 <__alt_data_end+0xfc0142e0>
 8014e68:	003ec406 	br	801497c <__alt_data_end+0xfc01497c>
 8014e6c:	d9401e17 	ldw	r5,120(sp)
 8014e70:	2c69c83a 	sub	r20,r5,r17
 8014e74:	003d4506 	br	801438c <__alt_data_end+0xfc01438c>
 8014e78:	d8802415 	stw	r2,144(sp)
 8014e7c:	98c00007 	ldb	r3,0(r19)
 8014e80:	003c6a06 	br	801402c <__alt_data_end+0xfc01402c>
 8014e84:	d9402317 	ldw	r5,140(sp)
 8014e88:	d9002717 	ldw	r4,156(sp)
 8014e8c:	d9801a04 	addi	r6,sp,104
 8014e90:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014e94:	103f591e 	bne	r2,zero,8014bfc <__alt_data_end+0xfc014bfc>
 8014e98:	d8c01c17 	ldw	r3,112(sp)
 8014e9c:	003f4406 	br	8014bb0 <__alt_data_end+0xfc014bb0>
 8014ea0:	014200b4 	movhi	r5,2050
 8014ea4:	296ef304 	addi	r5,r5,-17460
 8014ea8:	d9402915 	stw	r5,164(sp)
 8014eac:	003d0906 	br	80142d4 <__alt_data_end+0xfc0142d4>
 8014eb0:	d8c02417 	ldw	r3,144(sp)
 8014eb4:	d9002617 	ldw	r4,152(sp)
 8014eb8:	d9402417 	ldw	r5,144(sp)
 8014ebc:	18800017 	ldw	r2,0(r3)
 8014ec0:	2007d7fa 	srai	r3,r4,31
 8014ec4:	29400104 	addi	r5,r5,4
 8014ec8:	d9402415 	stw	r5,144(sp)
 8014ecc:	11000015 	stw	r4,0(r2)
 8014ed0:	10c00115 	stw	r3,4(r2)
 8014ed4:	003c2b06 	br	8013f84 <__alt_data_end+0xfc013f84>
 8014ed8:	d8c01d45 	stb	r3,117(sp)
 8014edc:	d8c02017 	ldw	r3,128(sp)
 8014ee0:	00800c04 	movi	r2,48
 8014ee4:	d8801d05 	stb	r2,116(sp)
 8014ee8:	d8001d85 	stb	zero,118(sp)
 8014eec:	80800094 	ori	r2,r16,2
 8014ef0:	1800ac16 	blt	r3,zero,80151a4 <___svfiprintf_internal_r+0x12a8>
 8014ef4:	00bfdfc4 	movi	r2,-129
 8014ef8:	80a0703a 	and	r16,r16,r2
 8014efc:	84000094 	ori	r16,r16,2
 8014f00:	002b883a 	mov	r21,zero
 8014f04:	003cf806 	br	80142e8 <__alt_data_end+0xfc0142e8>
 8014f08:	98c00007 	ldb	r3,0(r19)
 8014f0c:	003c4706 	br	801402c <__alt_data_end+0xfc01402c>
 8014f10:	d9402417 	ldw	r5,144(sp)
 8014f14:	2c800017 	ldw	r18,0(r5)
 8014f18:	29400104 	addi	r5,r5,4
 8014f1c:	d9402415 	stw	r5,144(sp)
 8014f20:	9029d7fa 	srai	r20,r18,31
 8014f24:	a005883a 	mov	r2,r20
 8014f28:	003dd806 	br	801468c <__alt_data_end+0xfc01468c>
 8014f2c:	d9402417 	ldw	r5,144(sp)
 8014f30:	0029883a 	mov	r20,zero
 8014f34:	2c800017 	ldw	r18,0(r5)
 8014f38:	29400104 	addi	r5,r5,4
 8014f3c:	d9402415 	stw	r5,144(sp)
 8014f40:	003cdb06 	br	80142b0 <__alt_data_end+0xfc0142b0>
 8014f44:	8080100c 	andi	r2,r16,64
 8014f48:	d8001d85 	stb	zero,118(sp)
 8014f4c:	10003326 	beq	r2,zero,801501c <___svfiprintf_internal_r+0x1120>
 8014f50:	d9002417 	ldw	r4,144(sp)
 8014f54:	d9402017 	ldw	r5,128(sp)
 8014f58:	0029883a 	mov	r20,zero
 8014f5c:	20800104 	addi	r2,r4,4
 8014f60:	2480000b 	ldhu	r18,0(r4)
 8014f64:	283e7e0e 	bge	r5,zero,8014960 <__alt_data_end+0xfc014960>
 8014f68:	9506b03a 	or	r3,r18,r20
 8014f6c:	d8802415 	stw	r2,144(sp)
 8014f70:	183d271e 	bne	r3,zero,8014410 <__alt_data_end+0xfc014410>
 8014f74:	002b883a 	mov	r21,zero
 8014f78:	0005883a 	mov	r2,zero
 8014f7c:	003fb506 	br	8014e54 <__alt_data_end+0xfc014e54>
 8014f80:	98c00043 	ldbu	r3,1(r19)
 8014f84:	8c400814 	ori	r17,r17,32
 8014f88:	9cc00044 	addi	r19,r19,1
 8014f8c:	18c03fcc 	andi	r3,r3,255
 8014f90:	18c0201c 	xori	r3,r3,128
 8014f94:	18ffe004 	addi	r3,r3,-128
 8014f98:	003c2406 	br	801402c <__alt_data_end+0xfc01402c>
 8014f9c:	d8c02415 	stw	r3,144(sp)
 8014fa0:	002b883a 	mov	r21,zero
 8014fa4:	003fa806 	br	8014e48 <__alt_data_end+0xfc014e48>
 8014fa8:	010200b4 	movhi	r4,2050
 8014fac:	212ef304 	addi	r4,r4,-17460
 8014fb0:	d9002915 	stw	r4,164(sp)
 8014fb4:	d8c02415 	stw	r3,144(sp)
 8014fb8:	1021883a 	mov	r16,r2
 8014fbc:	9504b03a 	or	r2,r18,r20
 8014fc0:	103f8b1e 	bne	r2,zero,8014df0 <__alt_data_end+0xfc014df0>
 8014fc4:	002b883a 	mov	r21,zero
 8014fc8:	00800084 	movi	r2,2
 8014fcc:	003fa106 	br	8014e54 <__alt_data_end+0xfc014e54>
 8014fd0:	0025883a 	mov	r18,zero
 8014fd4:	94800c04 	addi	r18,r18,48
 8014fd8:	dc8019c5 	stb	r18,103(sp)
 8014fdc:	dd002c17 	ldw	r20,176(sp)
 8014fe0:	dc4019c4 	addi	r17,sp,103
 8014fe4:	003ce906 	br	801438c <__alt_data_end+0xfc01438c>
 8014fe8:	d9402317 	ldw	r5,140(sp)
 8014fec:	d9002717 	ldw	r4,156(sp)
 8014ff0:	d9801a04 	addi	r6,sp,104
 8014ff4:	8013d2c0 	call	8013d2c <__ssprint_r>
 8014ff8:	103f001e 	bne	r2,zero,8014bfc <__alt_data_end+0xfc014bfc>
 8014ffc:	d8c01c17 	ldw	r3,112(sp)
 8015000:	d8801b17 	ldw	r2,108(sp)
 8015004:	d811883a 	mov	r8,sp
 8015008:	003e7e06 	br	8014a04 <__alt_data_end+0xfc014a04>
 801500c:	014200b4 	movhi	r5,2050
 8015010:	29706604 	addi	r5,r5,-15976
 8015014:	d9402115 	stw	r5,132(sp)
 8015018:	003ea406 	br	8014aac <__alt_data_end+0xfc014aac>
 801501c:	d8c02417 	ldw	r3,144(sp)
 8015020:	d9002017 	ldw	r4,128(sp)
 8015024:	0029883a 	mov	r20,zero
 8015028:	18800104 	addi	r2,r3,4
 801502c:	1c800017 	ldw	r18,0(r3)
 8015030:	203e4b0e 	bge	r4,zero,8014960 <__alt_data_end+0xfc014960>
 8015034:	003fcc06 	br	8014f68 <__alt_data_end+0xfc014f68>
 8015038:	d9002417 	ldw	r4,144(sp)
 801503c:	d9402017 	ldw	r5,128(sp)
 8015040:	0029883a 	mov	r20,zero
 8015044:	20800104 	addi	r2,r4,4
 8015048:	24800017 	ldw	r18,0(r4)
 801504c:	283e270e 	bge	r5,zero,80148ec <__alt_data_end+0xfc0148ec>
 8015050:	003f7b06 	br	8014e40 <__alt_data_end+0xfc014e40>
 8015054:	8400100c 	andi	r16,r16,64
 8015058:	80003326 	beq	r16,zero,8015128 <___svfiprintf_internal_r+0x122c>
 801505c:	d9402417 	ldw	r5,144(sp)
 8015060:	d8c02617 	ldw	r3,152(sp)
 8015064:	28800017 	ldw	r2,0(r5)
 8015068:	29400104 	addi	r5,r5,4
 801506c:	d9402415 	stw	r5,144(sp)
 8015070:	10c0000d 	sth	r3,0(r2)
 8015074:	003bc306 	br	8013f84 <__alt_data_end+0xfc013f84>
 8015078:	d9002417 	ldw	r4,144(sp)
 801507c:	0029883a 	mov	r20,zero
 8015080:	24800017 	ldw	r18,0(r4)
 8015084:	21000104 	addi	r4,r4,4
 8015088:	d9002415 	stw	r4,144(sp)
 801508c:	003c8806 	br	80142b0 <__alt_data_end+0xfc0142b0>
 8015090:	d8c02417 	ldw	r3,144(sp)
 8015094:	1c800017 	ldw	r18,0(r3)
 8015098:	18c00104 	addi	r3,r3,4
 801509c:	d8c02415 	stw	r3,144(sp)
 80150a0:	9029d7fa 	srai	r20,r18,31
 80150a4:	a005883a 	mov	r2,r20
 80150a8:	003d7806 	br	801468c <__alt_data_end+0xfc01468c>
 80150ac:	8809883a 	mov	r4,r17
 80150b0:	da002d15 	stw	r8,180(sp)
 80150b4:	8004cf40 	call	8004cf4 <strlen>
 80150b8:	1029883a 	mov	r20,r2
 80150bc:	dd401d83 	ldbu	r21,118(sp)
 80150c0:	ddc02415 	stw	r23,144(sp)
 80150c4:	d8002015 	stw	zero,128(sp)
 80150c8:	da002d17 	ldw	r8,180(sp)
 80150cc:	003caf06 	br	801438c <__alt_data_end+0xfc01438c>
 80150d0:	013fffc4 	movi	r4,-1
 80150d4:	003df206 	br	80148a0 <__alt_data_end+0xfc0148a0>
 80150d8:	dd002017 	ldw	r20,128(sp)
 80150dc:	00800184 	movi	r2,6
 80150e0:	1500012e 	bgeu	r2,r20,80150e8 <___svfiprintf_internal_r+0x11ec>
 80150e4:	1029883a 	mov	r20,r2
 80150e8:	a025883a 	mov	r18,r20
 80150ec:	a0004116 	blt	r20,zero,80151f4 <___svfiprintf_internal_r+0x12f8>
 80150f0:	044200b4 	movhi	r17,2050
 80150f4:	ddc02415 	stw	r23,144(sp)
 80150f8:	8c6ef804 	addi	r17,r17,-17440
 80150fc:	003ce806 	br	80144a0 <__alt_data_end+0xfc0144a0>
 8015100:	04001004 	movi	r16,64
 8015104:	800b883a 	mov	r5,r16
 8015108:	8003e340 	call	8003e34 <_malloc_r>
 801510c:	d8c02317 	ldw	r3,140(sp)
 8015110:	18800015 	stw	r2,0(r3)
 8015114:	18800415 	stw	r2,16(r3)
 8015118:	10004d26 	beq	r2,zero,8015250 <___svfiprintf_internal_r+0x1354>
 801511c:	d9402317 	ldw	r5,140(sp)
 8015120:	2c000515 	stw	r16,20(r5)
 8015124:	003b8906 	br	8013f4c <__alt_data_end+0xfc013f4c>
 8015128:	d9002417 	ldw	r4,144(sp)
 801512c:	d9402617 	ldw	r5,152(sp)
 8015130:	20800017 	ldw	r2,0(r4)
 8015134:	21000104 	addi	r4,r4,4
 8015138:	d9002415 	stw	r4,144(sp)
 801513c:	11400015 	stw	r5,0(r2)
 8015140:	003b9006 	br	8013f84 <__alt_data_end+0xfc013f84>
 8015144:	8080004c 	andi	r2,r16,1
 8015148:	002b883a 	mov	r21,zero
 801514c:	10000526 	beq	r2,zero,8015164 <___svfiprintf_internal_r+0x1268>
 8015150:	00800c04 	movi	r2,48
 8015154:	d88019c5 	stb	r2,103(sp)
 8015158:	dd002c17 	ldw	r20,176(sp)
 801515c:	dc4019c4 	addi	r17,sp,103
 8015160:	003c8a06 	br	801438c <__alt_data_end+0xfc01438c>
 8015164:	0029883a 	mov	r20,zero
 8015168:	dc401a04 	addi	r17,sp,104
 801516c:	003c8706 	br	801438c <__alt_data_end+0xfc01438c>
 8015170:	014200b4 	movhi	r5,2050
 8015174:	29706a04 	addi	r5,r5,-15960
 8015178:	d9402815 	stw	r5,160(sp)
 801517c:	003cff06 	br	801457c <__alt_data_end+0xfc01457c>
 8015180:	00bfffc4 	movi	r2,-1
 8015184:	003ea206 	br	8014c10 <__alt_data_end+0xfc014c10>
 8015188:	00800044 	movi	r2,1
 801518c:	10803fcc 	andi	r2,r2,255
 8015190:	00c00044 	movi	r3,1
 8015194:	10fd4526 	beq	r2,r3,80146ac <__alt_data_end+0xfc0146ac>
 8015198:	00c00084 	movi	r3,2
 801519c:	10fc5226 	beq	r2,r3,80142e8 <__alt_data_end+0xfc0142e8>
 80151a0:	003c9c06 	br	8014414 <__alt_data_end+0xfc014414>
 80151a4:	1021883a 	mov	r16,r2
 80151a8:	002b883a 	mov	r21,zero
 80151ac:	00800084 	movi	r2,2
 80151b0:	003ff606 	br	801518c <__alt_data_end+0xfc01518c>
 80151b4:	010200b4 	movhi	r4,2050
 80151b8:	21306a04 	addi	r4,r4,-15960
 80151bc:	d9002815 	stw	r4,160(sp)
 80151c0:	003e7206 	br	8014b8c <__alt_data_end+0xfc014b8c>
 80151c4:	014200b4 	movhi	r5,2050
 80151c8:	29706604 	addi	r5,r5,-15976
 80151cc:	d9402115 	stw	r5,132(sp)
 80151d0:	003ec506 	br	8014ce8 <__alt_data_end+0xfc014ce8>
 80151d4:	e027883a 	mov	r19,fp
 80151d8:	d8002015 	stw	zero,128(sp)
 80151dc:	003b9406 	br	8014030 <__alt_data_end+0xfc014030>
 80151e0:	dd002017 	ldw	r20,128(sp)
 80151e4:	dd401d83 	ldbu	r21,118(sp)
 80151e8:	ddc02415 	stw	r23,144(sp)
 80151ec:	d8002015 	stw	zero,128(sp)
 80151f0:	003c6606 	br	801438c <__alt_data_end+0xfc01438c>
 80151f4:	0025883a 	mov	r18,zero
 80151f8:	003fbd06 	br	80150f0 <__alt_data_end+0xfc0150f0>
 80151fc:	d9402417 	ldw	r5,144(sp)
 8015200:	d8c02417 	ldw	r3,144(sp)
 8015204:	29400017 	ldw	r5,0(r5)
 8015208:	19000104 	addi	r4,r3,4
 801520c:	d9002415 	stw	r4,144(sp)
 8015210:	d9402015 	stw	r5,128(sp)
 8015214:	98c00043 	ldbu	r3,1(r19)
 8015218:	e027883a 	mov	r19,fp
 801521c:	283f5b0e 	bge	r5,zero,8014f8c <__alt_data_end+0xfc014f8c>
 8015220:	18c03fcc 	andi	r3,r3,255
 8015224:	013fffc4 	movi	r4,-1
 8015228:	18c0201c 	xori	r3,r3,128
 801522c:	d9002015 	stw	r4,128(sp)
 8015230:	18ffe004 	addi	r3,r3,-128
 8015234:	003b7d06 	br	801402c <__alt_data_end+0xfc01402c>
 8015238:	dd401d85 	stb	r21,118(sp)
 801523c:	003cf306 	br	801460c <__alt_data_end+0xfc01460c>
 8015240:	dd401d85 	stb	r21,118(sp)
 8015244:	003d4e06 	br	8014780 <__alt_data_end+0xfc014780>
 8015248:	dd401d85 	stb	r21,118(sp)
 801524c:	003c0e06 	br	8014288 <__alt_data_end+0xfc014288>
 8015250:	d9002717 	ldw	r4,156(sp)
 8015254:	00800304 	movi	r2,12
 8015258:	20800015 	stw	r2,0(r4)
 801525c:	00bfffc4 	movi	r2,-1
 8015260:	003e6b06 	br	8014c10 <__alt_data_end+0xfc014c10>
 8015264:	dd401d85 	stb	r21,118(sp)
 8015268:	003d0006 	br	801466c <__alt_data_end+0xfc01466c>
 801526c:	dd401d85 	stb	r21,118(sp)
 8015270:	003d7106 	br	8014838 <__alt_data_end+0xfc014838>
 8015274:	dd401d85 	stb	r21,118(sp)
 8015278:	003c5706 	br	80143d8 <__alt_data_end+0xfc0143d8>
 801527c:	dd401d85 	stb	r21,118(sp)
 8015280:	003c2e06 	br	801433c <__alt_data_end+0xfc01433c>
 8015284:	dd401d85 	stb	r21,118(sp)
 8015288:	003d8c06 	br	80148bc <__alt_data_end+0xfc0148bc>
 801528c:	dd401d85 	stb	r21,118(sp)
 8015290:	003da706 	br	8014930 <__alt_data_end+0xfc014930>
 8015294:	dd401d85 	stb	r21,118(sp)
 8015298:	003cc806 	br	80145bc <__alt_data_end+0xfc0145bc>

0801529c <__swbuf_r>:
 801529c:	defffb04 	addi	sp,sp,-20
 80152a0:	dcc00315 	stw	r19,12(sp)
 80152a4:	dc800215 	stw	r18,8(sp)
 80152a8:	dc000015 	stw	r16,0(sp)
 80152ac:	dfc00415 	stw	ra,16(sp)
 80152b0:	dc400115 	stw	r17,4(sp)
 80152b4:	2025883a 	mov	r18,r4
 80152b8:	2827883a 	mov	r19,r5
 80152bc:	3021883a 	mov	r16,r6
 80152c0:	20000226 	beq	r4,zero,80152cc <__swbuf_r+0x30>
 80152c4:	20800e17 	ldw	r2,56(r4)
 80152c8:	10004226 	beq	r2,zero,80153d4 <__swbuf_r+0x138>
 80152cc:	80800617 	ldw	r2,24(r16)
 80152d0:	8100030b 	ldhu	r4,12(r16)
 80152d4:	80800215 	stw	r2,8(r16)
 80152d8:	2080020c 	andi	r2,r4,8
 80152dc:	10003626 	beq	r2,zero,80153b8 <__swbuf_r+0x11c>
 80152e0:	80c00417 	ldw	r3,16(r16)
 80152e4:	18003426 	beq	r3,zero,80153b8 <__swbuf_r+0x11c>
 80152e8:	2088000c 	andi	r2,r4,8192
 80152ec:	9c403fcc 	andi	r17,r19,255
 80152f0:	10001a26 	beq	r2,zero,801535c <__swbuf_r+0xc0>
 80152f4:	80800017 	ldw	r2,0(r16)
 80152f8:	81000517 	ldw	r4,20(r16)
 80152fc:	10c7c83a 	sub	r3,r2,r3
 8015300:	1900200e 	bge	r3,r4,8015384 <__swbuf_r+0xe8>
 8015304:	18c00044 	addi	r3,r3,1
 8015308:	81000217 	ldw	r4,8(r16)
 801530c:	11400044 	addi	r5,r2,1
 8015310:	81400015 	stw	r5,0(r16)
 8015314:	213fffc4 	addi	r4,r4,-1
 8015318:	81000215 	stw	r4,8(r16)
 801531c:	14c00005 	stb	r19,0(r2)
 8015320:	80800517 	ldw	r2,20(r16)
 8015324:	10c01e26 	beq	r2,r3,80153a0 <__swbuf_r+0x104>
 8015328:	8080030b 	ldhu	r2,12(r16)
 801532c:	1080004c 	andi	r2,r2,1
 8015330:	10000226 	beq	r2,zero,801533c <__swbuf_r+0xa0>
 8015334:	00800284 	movi	r2,10
 8015338:	88801926 	beq	r17,r2,80153a0 <__swbuf_r+0x104>
 801533c:	8805883a 	mov	r2,r17
 8015340:	dfc00417 	ldw	ra,16(sp)
 8015344:	dcc00317 	ldw	r19,12(sp)
 8015348:	dc800217 	ldw	r18,8(sp)
 801534c:	dc400117 	ldw	r17,4(sp)
 8015350:	dc000017 	ldw	r16,0(sp)
 8015354:	dec00504 	addi	sp,sp,20
 8015358:	f800283a 	ret
 801535c:	81401917 	ldw	r5,100(r16)
 8015360:	00b7ffc4 	movi	r2,-8193
 8015364:	21080014 	ori	r4,r4,8192
 8015368:	2884703a 	and	r2,r5,r2
 801536c:	80801915 	stw	r2,100(r16)
 8015370:	80800017 	ldw	r2,0(r16)
 8015374:	8100030d 	sth	r4,12(r16)
 8015378:	81000517 	ldw	r4,20(r16)
 801537c:	10c7c83a 	sub	r3,r2,r3
 8015380:	193fe016 	blt	r3,r4,8015304 <__alt_data_end+0xfc015304>
 8015384:	800b883a 	mov	r5,r16
 8015388:	9009883a 	mov	r4,r18
 801538c:	8002c3c0 	call	8002c3c <_fflush_r>
 8015390:	1000071e 	bne	r2,zero,80153b0 <__swbuf_r+0x114>
 8015394:	80800017 	ldw	r2,0(r16)
 8015398:	00c00044 	movi	r3,1
 801539c:	003fda06 	br	8015308 <__alt_data_end+0xfc015308>
 80153a0:	800b883a 	mov	r5,r16
 80153a4:	9009883a 	mov	r4,r18
 80153a8:	8002c3c0 	call	8002c3c <_fflush_r>
 80153ac:	103fe326 	beq	r2,zero,801533c <__alt_data_end+0xfc01533c>
 80153b0:	00bfffc4 	movi	r2,-1
 80153b4:	003fe206 	br	8015340 <__alt_data_end+0xfc015340>
 80153b8:	800b883a 	mov	r5,r16
 80153bc:	9009883a 	mov	r4,r18
 80153c0:	8008bfc0 	call	8008bfc <__swsetup_r>
 80153c4:	103ffa1e 	bne	r2,zero,80153b0 <__alt_data_end+0xfc0153b0>
 80153c8:	8100030b 	ldhu	r4,12(r16)
 80153cc:	80c00417 	ldw	r3,16(r16)
 80153d0:	003fc506 	br	80152e8 <__alt_data_end+0xfc0152e8>
 80153d4:	80030280 	call	8003028 <__sinit>
 80153d8:	003fbc06 	br	80152cc <__alt_data_end+0xfc0152cc>

080153dc <__swbuf>:
 80153dc:	008200b4 	movhi	r2,2050
 80153e0:	10b77404 	addi	r2,r2,-8752
 80153e4:	280d883a 	mov	r6,r5
 80153e8:	200b883a 	mov	r5,r4
 80153ec:	11000017 	ldw	r4,0(r2)
 80153f0:	801529c1 	jmpi	801529c <__swbuf_r>

080153f4 <_wcrtomb_r>:
 80153f4:	defff604 	addi	sp,sp,-40
 80153f8:	008200b4 	movhi	r2,2050
 80153fc:	dc800815 	stw	r18,32(sp)
 8015400:	dc400715 	stw	r17,28(sp)
 8015404:	dc000615 	stw	r16,24(sp)
 8015408:	10b77a04 	addi	r2,r2,-8728
 801540c:	dfc00915 	stw	ra,36(sp)
 8015410:	2021883a 	mov	r16,r4
 8015414:	3823883a 	mov	r17,r7
 8015418:	14800017 	ldw	r18,0(r2)
 801541c:	28001426 	beq	r5,zero,8015470 <_wcrtomb_r+0x7c>
 8015420:	d9400415 	stw	r5,16(sp)
 8015424:	d9800515 	stw	r6,20(sp)
 8015428:	800af380 	call	800af38 <__locale_charset>
 801542c:	d9800517 	ldw	r6,20(sp)
 8015430:	d9400417 	ldw	r5,16(sp)
 8015434:	100f883a 	mov	r7,r2
 8015438:	dc400015 	stw	r17,0(sp)
 801543c:	8009883a 	mov	r4,r16
 8015440:	903ee83a 	callr	r18
 8015444:	00ffffc4 	movi	r3,-1
 8015448:	10c0031e 	bne	r2,r3,8015458 <_wcrtomb_r+0x64>
 801544c:	88000015 	stw	zero,0(r17)
 8015450:	00c02284 	movi	r3,138
 8015454:	80c00015 	stw	r3,0(r16)
 8015458:	dfc00917 	ldw	ra,36(sp)
 801545c:	dc800817 	ldw	r18,32(sp)
 8015460:	dc400717 	ldw	r17,28(sp)
 8015464:	dc000617 	ldw	r16,24(sp)
 8015468:	dec00a04 	addi	sp,sp,40
 801546c:	f800283a 	ret
 8015470:	800af380 	call	800af38 <__locale_charset>
 8015474:	100f883a 	mov	r7,r2
 8015478:	dc400015 	stw	r17,0(sp)
 801547c:	000d883a 	mov	r6,zero
 8015480:	d9400104 	addi	r5,sp,4
 8015484:	8009883a 	mov	r4,r16
 8015488:	903ee83a 	callr	r18
 801548c:	003fed06 	br	8015444 <__alt_data_end+0xfc015444>

08015490 <wcrtomb>:
 8015490:	defff604 	addi	sp,sp,-40
 8015494:	008200b4 	movhi	r2,2050
 8015498:	dc800615 	stw	r18,24(sp)
 801549c:	dc400515 	stw	r17,20(sp)
 80154a0:	10b77404 	addi	r2,r2,-8752
 80154a4:	dfc00915 	stw	ra,36(sp)
 80154a8:	dd000815 	stw	r20,32(sp)
 80154ac:	dcc00715 	stw	r19,28(sp)
 80154b0:	dc000415 	stw	r16,16(sp)
 80154b4:	3025883a 	mov	r18,r6
 80154b8:	14400017 	ldw	r17,0(r2)
 80154bc:	20001926 	beq	r4,zero,8015524 <wcrtomb+0x94>
 80154c0:	008200b4 	movhi	r2,2050
 80154c4:	10b77a04 	addi	r2,r2,-8728
 80154c8:	15000017 	ldw	r20,0(r2)
 80154cc:	2021883a 	mov	r16,r4
 80154d0:	2827883a 	mov	r19,r5
 80154d4:	800af380 	call	800af38 <__locale_charset>
 80154d8:	100f883a 	mov	r7,r2
 80154dc:	dc800015 	stw	r18,0(sp)
 80154e0:	980d883a 	mov	r6,r19
 80154e4:	800b883a 	mov	r5,r16
 80154e8:	8809883a 	mov	r4,r17
 80154ec:	a03ee83a 	callr	r20
 80154f0:	00ffffc4 	movi	r3,-1
 80154f4:	10c0031e 	bne	r2,r3,8015504 <wcrtomb+0x74>
 80154f8:	90000015 	stw	zero,0(r18)
 80154fc:	00c02284 	movi	r3,138
 8015500:	88c00015 	stw	r3,0(r17)
 8015504:	dfc00917 	ldw	ra,36(sp)
 8015508:	dd000817 	ldw	r20,32(sp)
 801550c:	dcc00717 	ldw	r19,28(sp)
 8015510:	dc800617 	ldw	r18,24(sp)
 8015514:	dc400517 	ldw	r17,20(sp)
 8015518:	dc000417 	ldw	r16,16(sp)
 801551c:	dec00a04 	addi	sp,sp,40
 8015520:	f800283a 	ret
 8015524:	008200b4 	movhi	r2,2050
 8015528:	10b77a04 	addi	r2,r2,-8728
 801552c:	14000017 	ldw	r16,0(r2)
 8015530:	800af380 	call	800af38 <__locale_charset>
 8015534:	100f883a 	mov	r7,r2
 8015538:	dc800015 	stw	r18,0(sp)
 801553c:	000d883a 	mov	r6,zero
 8015540:	d9400104 	addi	r5,sp,4
 8015544:	8809883a 	mov	r4,r17
 8015548:	803ee83a 	callr	r16
 801554c:	003fe806 	br	80154f0 <__alt_data_end+0xfc0154f0>

08015550 <__ascii_wctomb>:
 8015550:	28000526 	beq	r5,zero,8015568 <__ascii_wctomb+0x18>
 8015554:	00803fc4 	movi	r2,255
 8015558:	11800536 	bltu	r2,r6,8015570 <__ascii_wctomb+0x20>
 801555c:	29800005 	stb	r6,0(r5)
 8015560:	00800044 	movi	r2,1
 8015564:	f800283a 	ret
 8015568:	0005883a 	mov	r2,zero
 801556c:	f800283a 	ret
 8015570:	00802284 	movi	r2,138
 8015574:	20800015 	stw	r2,0(r4)
 8015578:	00bfffc4 	movi	r2,-1
 801557c:	f800283a 	ret

08015580 <_wctomb_r>:
 8015580:	008200b4 	movhi	r2,2050
 8015584:	defff904 	addi	sp,sp,-28
 8015588:	10b77a04 	addi	r2,r2,-8728
 801558c:	dfc00615 	stw	ra,24(sp)
 8015590:	dc400515 	stw	r17,20(sp)
 8015594:	dc000415 	stw	r16,16(sp)
 8015598:	3823883a 	mov	r17,r7
 801559c:	14000017 	ldw	r16,0(r2)
 80155a0:	d9000115 	stw	r4,4(sp)
 80155a4:	d9400215 	stw	r5,8(sp)
 80155a8:	d9800315 	stw	r6,12(sp)
 80155ac:	800af380 	call	800af38 <__locale_charset>
 80155b0:	d9800317 	ldw	r6,12(sp)
 80155b4:	d9400217 	ldw	r5,8(sp)
 80155b8:	d9000117 	ldw	r4,4(sp)
 80155bc:	100f883a 	mov	r7,r2
 80155c0:	dc400015 	stw	r17,0(sp)
 80155c4:	803ee83a 	callr	r16
 80155c8:	dfc00617 	ldw	ra,24(sp)
 80155cc:	dc400517 	ldw	r17,20(sp)
 80155d0:	dc000417 	ldw	r16,16(sp)
 80155d4:	dec00704 	addi	sp,sp,28
 80155d8:	f800283a 	ret

080155dc <__muldi3>:
 80155dc:	defff604 	addi	sp,sp,-40
 80155e0:	dd800615 	stw	r22,24(sp)
 80155e4:	dd400515 	stw	r21,20(sp)
 80155e8:	dc400115 	stw	r17,4(sp)
 80155ec:	357fffcc 	andi	r21,r6,65535
 80155f0:	2022d43a 	srli	r17,r4,16
 80155f4:	25bfffcc 	andi	r22,r4,65535
 80155f8:	dcc00315 	stw	r19,12(sp)
 80155fc:	dc800215 	stw	r18,8(sp)
 8015600:	2027883a 	mov	r19,r4
 8015604:	2825883a 	mov	r18,r5
 8015608:	b009883a 	mov	r4,r22
 801560c:	a80b883a 	mov	r5,r21
 8015610:	dfc00915 	stw	ra,36(sp)
 8015614:	df000815 	stw	fp,32(sp)
 8015618:	ddc00715 	stw	r23,28(sp)
 801561c:	3839883a 	mov	fp,r7
 8015620:	302ed43a 	srli	r23,r6,16
 8015624:	dd000415 	stw	r20,16(sp)
 8015628:	dc000015 	stw	r16,0(sp)
 801562c:	3029883a 	mov	r20,r6
 8015630:	80028f40 	call	80028f4 <__mulsi3>
 8015634:	a80b883a 	mov	r5,r21
 8015638:	8809883a 	mov	r4,r17
 801563c:	1021883a 	mov	r16,r2
 8015640:	80028f40 	call	80028f4 <__mulsi3>
 8015644:	8809883a 	mov	r4,r17
 8015648:	b80b883a 	mov	r5,r23
 801564c:	102b883a 	mov	r21,r2
 8015650:	80028f40 	call	80028f4 <__mulsi3>
 8015654:	b80b883a 	mov	r5,r23
 8015658:	b009883a 	mov	r4,r22
 801565c:	1023883a 	mov	r17,r2
 8015660:	80028f40 	call	80028f4 <__mulsi3>
 8015664:	8006d43a 	srli	r3,r16,16
 8015668:	1545883a 	add	r2,r2,r21
 801566c:	1885883a 	add	r2,r3,r2
 8015670:	1540022e 	bgeu	r2,r21,801567c <__muldi3+0xa0>
 8015674:	00c00074 	movhi	r3,1
 8015678:	88e3883a 	add	r17,r17,r3
 801567c:	1006d43a 	srli	r3,r2,16
 8015680:	1004943a 	slli	r2,r2,16
 8015684:	e00b883a 	mov	r5,fp
 8015688:	9809883a 	mov	r4,r19
 801568c:	843fffcc 	andi	r16,r16,65535
 8015690:	1c63883a 	add	r17,r3,r17
 8015694:	1421883a 	add	r16,r2,r16
 8015698:	80028f40 	call	80028f4 <__mulsi3>
 801569c:	900b883a 	mov	r5,r18
 80156a0:	a009883a 	mov	r4,r20
 80156a4:	1027883a 	mov	r19,r2
 80156a8:	80028f40 	call	80028f4 <__mulsi3>
 80156ac:	9885883a 	add	r2,r19,r2
 80156b0:	1447883a 	add	r3,r2,r17
 80156b4:	8005883a 	mov	r2,r16
 80156b8:	dfc00917 	ldw	ra,36(sp)
 80156bc:	df000817 	ldw	fp,32(sp)
 80156c0:	ddc00717 	ldw	r23,28(sp)
 80156c4:	dd800617 	ldw	r22,24(sp)
 80156c8:	dd400517 	ldw	r21,20(sp)
 80156cc:	dd000417 	ldw	r20,16(sp)
 80156d0:	dcc00317 	ldw	r19,12(sp)
 80156d4:	dc800217 	ldw	r18,8(sp)
 80156d8:	dc400117 	ldw	r17,4(sp)
 80156dc:	dc000017 	ldw	r16,0(sp)
 80156e0:	dec00a04 	addi	sp,sp,40
 80156e4:	f800283a 	ret

080156e8 <__fixunsdfsi>:
 80156e8:	defffd04 	addi	sp,sp,-12
 80156ec:	000d883a 	mov	r6,zero
 80156f0:	01d07834 	movhi	r7,16864
 80156f4:	dc400115 	stw	r17,4(sp)
 80156f8:	dc000015 	stw	r16,0(sp)
 80156fc:	dfc00215 	stw	ra,8(sp)
 8015700:	2023883a 	mov	r17,r4
 8015704:	2821883a 	mov	r16,r5
 8015708:	801781c0 	call	801781c <__gedf2>
 801570c:	1000080e 	bge	r2,zero,8015730 <__fixunsdfsi+0x48>
 8015710:	8809883a 	mov	r4,r17
 8015714:	800b883a 	mov	r5,r16
 8015718:	8018b540 	call	8018b54 <__fixdfsi>
 801571c:	dfc00217 	ldw	ra,8(sp)
 8015720:	dc400117 	ldw	r17,4(sp)
 8015724:	dc000017 	ldw	r16,0(sp)
 8015728:	dec00304 	addi	sp,sp,12
 801572c:	f800283a 	ret
 8015730:	000d883a 	mov	r6,zero
 8015734:	01d07834 	movhi	r7,16864
 8015738:	8809883a 	mov	r4,r17
 801573c:	800b883a 	mov	r5,r16
 8015740:	80182580 	call	8018258 <__subdf3>
 8015744:	180b883a 	mov	r5,r3
 8015748:	1009883a 	mov	r4,r2
 801574c:	8018b540 	call	8018b54 <__fixdfsi>
 8015750:	00e00034 	movhi	r3,32768
 8015754:	10c5883a 	add	r2,r2,r3
 8015758:	003ff006 	br	801571c <__alt_data_end+0xfc01571c>

0801575c <__udivdi3>:
 801575c:	defff404 	addi	sp,sp,-48
 8015760:	dcc00515 	stw	r19,20(sp)
 8015764:	dc000215 	stw	r16,8(sp)
 8015768:	dfc00b15 	stw	ra,44(sp)
 801576c:	df000a15 	stw	fp,40(sp)
 8015770:	ddc00915 	stw	r23,36(sp)
 8015774:	dd800815 	stw	r22,32(sp)
 8015778:	dd400715 	stw	r21,28(sp)
 801577c:	dd000615 	stw	r20,24(sp)
 8015780:	dc800415 	stw	r18,16(sp)
 8015784:	dc400315 	stw	r17,12(sp)
 8015788:	2027883a 	mov	r19,r4
 801578c:	2821883a 	mov	r16,r5
 8015790:	3800461e 	bne	r7,zero,80158ac <__udivdi3+0x150>
 8015794:	3023883a 	mov	r17,r6
 8015798:	2025883a 	mov	r18,r4
 801579c:	2980572e 	bgeu	r5,r6,80158fc <__udivdi3+0x1a0>
 80157a0:	00bfffd4 	movui	r2,65535
 80157a4:	282d883a 	mov	r22,r5
 80157a8:	1180b236 	bltu	r2,r6,8015a74 <__udivdi3+0x318>
 80157ac:	00803fc4 	movi	r2,255
 80157b0:	1185803a 	cmpltu	r2,r2,r6
 80157b4:	100490fa 	slli	r2,r2,3
 80157b8:	3086d83a 	srl	r3,r6,r2
 80157bc:	010200b4 	movhi	r4,2050
 80157c0:	21306e04 	addi	r4,r4,-15944
 80157c4:	20c7883a 	add	r3,r4,r3
 80157c8:	18c00003 	ldbu	r3,0(r3)
 80157cc:	1885883a 	add	r2,r3,r2
 80157d0:	00c00804 	movi	r3,32
 80157d4:	1887c83a 	sub	r3,r3,r2
 80157d8:	18000526 	beq	r3,zero,80157f0 <__udivdi3+0x94>
 80157dc:	80e0983a 	sll	r16,r16,r3
 80157e0:	9884d83a 	srl	r2,r19,r2
 80157e4:	30e2983a 	sll	r17,r6,r3
 80157e8:	98e4983a 	sll	r18,r19,r3
 80157ec:	142cb03a 	or	r22,r2,r16
 80157f0:	882ad43a 	srli	r21,r17,16
 80157f4:	b009883a 	mov	r4,r22
 80157f8:	8d3fffcc 	andi	r20,r17,65535
 80157fc:	a80b883a 	mov	r5,r21
 8015800:	800289c0 	call	800289c <__umodsi3>
 8015804:	b009883a 	mov	r4,r22
 8015808:	a80b883a 	mov	r5,r21
 801580c:	1027883a 	mov	r19,r2
 8015810:	80028380 	call	8002838 <__udivsi3>
 8015814:	100b883a 	mov	r5,r2
 8015818:	a009883a 	mov	r4,r20
 801581c:	102d883a 	mov	r22,r2
 8015820:	80028f40 	call	80028f4 <__mulsi3>
 8015824:	9826943a 	slli	r19,r19,16
 8015828:	9006d43a 	srli	r3,r18,16
 801582c:	1cc6b03a 	or	r3,r3,r19
 8015830:	1880052e 	bgeu	r3,r2,8015848 <__udivdi3+0xec>
 8015834:	1c47883a 	add	r3,r3,r17
 8015838:	b13fffc4 	addi	r4,r22,-1
 801583c:	1c400136 	bltu	r3,r17,8015844 <__udivdi3+0xe8>
 8015840:	18814236 	bltu	r3,r2,8015d4c <__udivdi3+0x5f0>
 8015844:	202d883a 	mov	r22,r4
 8015848:	18a1c83a 	sub	r16,r3,r2
 801584c:	8009883a 	mov	r4,r16
 8015850:	a80b883a 	mov	r5,r21
 8015854:	800289c0 	call	800289c <__umodsi3>
 8015858:	1027883a 	mov	r19,r2
 801585c:	8009883a 	mov	r4,r16
 8015860:	a80b883a 	mov	r5,r21
 8015864:	9826943a 	slli	r19,r19,16
 8015868:	80028380 	call	8002838 <__udivsi3>
 801586c:	100b883a 	mov	r5,r2
 8015870:	a009883a 	mov	r4,r20
 8015874:	94bfffcc 	andi	r18,r18,65535
 8015878:	1021883a 	mov	r16,r2
 801587c:	94e4b03a 	or	r18,r18,r19
 8015880:	80028f40 	call	80028f4 <__mulsi3>
 8015884:	9080052e 	bgeu	r18,r2,801589c <__udivdi3+0x140>
 8015888:	8ca5883a 	add	r18,r17,r18
 801588c:	80ffffc4 	addi	r3,r16,-1
 8015890:	94410c36 	bltu	r18,r17,8015cc4 <__udivdi3+0x568>
 8015894:	90810b2e 	bgeu	r18,r2,8015cc4 <__udivdi3+0x568>
 8015898:	843fff84 	addi	r16,r16,-2
 801589c:	b004943a 	slli	r2,r22,16
 80158a0:	0007883a 	mov	r3,zero
 80158a4:	1404b03a 	or	r2,r2,r16
 80158a8:	00005e06 	br	8015a24 <__udivdi3+0x2c8>
 80158ac:	29c05b36 	bltu	r5,r7,8015a1c <__udivdi3+0x2c0>
 80158b0:	00bfffd4 	movui	r2,65535
 80158b4:	11c0672e 	bgeu	r2,r7,8015a54 <__udivdi3+0x2f8>
 80158b8:	00804034 	movhi	r2,256
 80158bc:	10bfffc4 	addi	r2,r2,-1
 80158c0:	11c10a36 	bltu	r2,r7,8015cec <__udivdi3+0x590>
 80158c4:	00800404 	movi	r2,16
 80158c8:	3886d83a 	srl	r3,r7,r2
 80158cc:	010200b4 	movhi	r4,2050
 80158d0:	21306e04 	addi	r4,r4,-15944
 80158d4:	20c7883a 	add	r3,r4,r3
 80158d8:	18c00003 	ldbu	r3,0(r3)
 80158dc:	05c00804 	movi	r23,32
 80158e0:	1885883a 	add	r2,r3,r2
 80158e4:	b8afc83a 	sub	r23,r23,r2
 80158e8:	b800671e 	bne	r23,zero,8015a88 <__udivdi3+0x32c>
 80158ec:	3c010536 	bltu	r7,r16,8015d04 <__udivdi3+0x5a8>
 80158f0:	9985403a 	cmpgeu	r2,r19,r6
 80158f4:	0007883a 	mov	r3,zero
 80158f8:	00004a06 	br	8015a24 <__udivdi3+0x2c8>
 80158fc:	3000041e 	bne	r6,zero,8015910 <__udivdi3+0x1b4>
 8015900:	000b883a 	mov	r5,zero
 8015904:	01000044 	movi	r4,1
 8015908:	80028380 	call	8002838 <__udivsi3>
 801590c:	1023883a 	mov	r17,r2
 8015910:	00bfffd4 	movui	r2,65535
 8015914:	1440532e 	bgeu	r2,r17,8015a64 <__udivdi3+0x308>
 8015918:	00804034 	movhi	r2,256
 801591c:	10bfffc4 	addi	r2,r2,-1
 8015920:	1440f436 	bltu	r2,r17,8015cf4 <__udivdi3+0x598>
 8015924:	00800404 	movi	r2,16
 8015928:	8886d83a 	srl	r3,r17,r2
 801592c:	010200b4 	movhi	r4,2050
 8015930:	21306e04 	addi	r4,r4,-15944
 8015934:	20c7883a 	add	r3,r4,r3
 8015938:	18c00003 	ldbu	r3,0(r3)
 801593c:	1885883a 	add	r2,r3,r2
 8015940:	00c00804 	movi	r3,32
 8015944:	1887c83a 	sub	r3,r3,r2
 8015948:	1800a51e 	bne	r3,zero,8015be0 <__udivdi3+0x484>
 801594c:	882ad43a 	srli	r21,r17,16
 8015950:	8461c83a 	sub	r16,r16,r17
 8015954:	8d3fffcc 	andi	r20,r17,65535
 8015958:	00c00044 	movi	r3,1
 801595c:	a80b883a 	mov	r5,r21
 8015960:	8009883a 	mov	r4,r16
 8015964:	d8c00115 	stw	r3,4(sp)
 8015968:	800289c0 	call	800289c <__umodsi3>
 801596c:	a80b883a 	mov	r5,r21
 8015970:	8009883a 	mov	r4,r16
 8015974:	1027883a 	mov	r19,r2
 8015978:	80028380 	call	8002838 <__udivsi3>
 801597c:	a00b883a 	mov	r5,r20
 8015980:	1009883a 	mov	r4,r2
 8015984:	102d883a 	mov	r22,r2
 8015988:	80028f40 	call	80028f4 <__mulsi3>
 801598c:	9826943a 	slli	r19,r19,16
 8015990:	900ed43a 	srli	r7,r18,16
 8015994:	d8c00117 	ldw	r3,4(sp)
 8015998:	3cceb03a 	or	r7,r7,r19
 801599c:	3880052e 	bgeu	r7,r2,80159b4 <__udivdi3+0x258>
 80159a0:	3c4f883a 	add	r7,r7,r17
 80159a4:	b13fffc4 	addi	r4,r22,-1
 80159a8:	3c400136 	bltu	r7,r17,80159b0 <__udivdi3+0x254>
 80159ac:	3880e436 	bltu	r7,r2,8015d40 <__udivdi3+0x5e4>
 80159b0:	202d883a 	mov	r22,r4
 80159b4:	38a1c83a 	sub	r16,r7,r2
 80159b8:	8009883a 	mov	r4,r16
 80159bc:	a80b883a 	mov	r5,r21
 80159c0:	d8c00115 	stw	r3,4(sp)
 80159c4:	800289c0 	call	800289c <__umodsi3>
 80159c8:	1027883a 	mov	r19,r2
 80159cc:	8009883a 	mov	r4,r16
 80159d0:	a80b883a 	mov	r5,r21
 80159d4:	9826943a 	slli	r19,r19,16
 80159d8:	80028380 	call	8002838 <__udivsi3>
 80159dc:	a00b883a 	mov	r5,r20
 80159e0:	1009883a 	mov	r4,r2
 80159e4:	94bfffcc 	andi	r18,r18,65535
 80159e8:	1021883a 	mov	r16,r2
 80159ec:	94e4b03a 	or	r18,r18,r19
 80159f0:	80028f40 	call	80028f4 <__mulsi3>
 80159f4:	d8c00117 	ldw	r3,4(sp)
 80159f8:	9080052e 	bgeu	r18,r2,8015a10 <__udivdi3+0x2b4>
 80159fc:	8ca5883a 	add	r18,r17,r18
 8015a00:	813fffc4 	addi	r4,r16,-1
 8015a04:	9440ad36 	bltu	r18,r17,8015cbc <__udivdi3+0x560>
 8015a08:	9080ac2e 	bgeu	r18,r2,8015cbc <__udivdi3+0x560>
 8015a0c:	843fff84 	addi	r16,r16,-2
 8015a10:	b004943a 	slli	r2,r22,16
 8015a14:	1404b03a 	or	r2,r2,r16
 8015a18:	00000206 	br	8015a24 <__udivdi3+0x2c8>
 8015a1c:	0007883a 	mov	r3,zero
 8015a20:	0005883a 	mov	r2,zero
 8015a24:	dfc00b17 	ldw	ra,44(sp)
 8015a28:	df000a17 	ldw	fp,40(sp)
 8015a2c:	ddc00917 	ldw	r23,36(sp)
 8015a30:	dd800817 	ldw	r22,32(sp)
 8015a34:	dd400717 	ldw	r21,28(sp)
 8015a38:	dd000617 	ldw	r20,24(sp)
 8015a3c:	dcc00517 	ldw	r19,20(sp)
 8015a40:	dc800417 	ldw	r18,16(sp)
 8015a44:	dc400317 	ldw	r17,12(sp)
 8015a48:	dc000217 	ldw	r16,8(sp)
 8015a4c:	dec00c04 	addi	sp,sp,48
 8015a50:	f800283a 	ret
 8015a54:	00803fc4 	movi	r2,255
 8015a58:	11c5803a 	cmpltu	r2,r2,r7
 8015a5c:	100490fa 	slli	r2,r2,3
 8015a60:	003f9906 	br	80158c8 <__alt_data_end+0xfc0158c8>
 8015a64:	00803fc4 	movi	r2,255
 8015a68:	1445803a 	cmpltu	r2,r2,r17
 8015a6c:	100490fa 	slli	r2,r2,3
 8015a70:	003fad06 	br	8015928 <__alt_data_end+0xfc015928>
 8015a74:	00804034 	movhi	r2,256
 8015a78:	10bfffc4 	addi	r2,r2,-1
 8015a7c:	11809f36 	bltu	r2,r6,8015cfc <__udivdi3+0x5a0>
 8015a80:	00800404 	movi	r2,16
 8015a84:	003f4c06 	br	80157b8 <__alt_data_end+0xfc0157b8>
 8015a88:	3dce983a 	sll	r7,r7,r23
 8015a8c:	30b8d83a 	srl	fp,r6,r2
 8015a90:	80a2d83a 	srl	r17,r16,r2
 8015a94:	35cc983a 	sll	r6,r6,r23
 8015a98:	3f38b03a 	or	fp,r7,fp
 8015a9c:	e024d43a 	srli	r18,fp,16
 8015aa0:	9884d83a 	srl	r2,r19,r2
 8015aa4:	85e0983a 	sll	r16,r16,r23
 8015aa8:	8809883a 	mov	r4,r17
 8015aac:	900b883a 	mov	r5,r18
 8015ab0:	d9800015 	stw	r6,0(sp)
 8015ab4:	1420b03a 	or	r16,r2,r16
 8015ab8:	800289c0 	call	800289c <__umodsi3>
 8015abc:	900b883a 	mov	r5,r18
 8015ac0:	8809883a 	mov	r4,r17
 8015ac4:	1029883a 	mov	r20,r2
 8015ac8:	e5bfffcc 	andi	r22,fp,65535
 8015acc:	80028380 	call	8002838 <__udivsi3>
 8015ad0:	100b883a 	mov	r5,r2
 8015ad4:	b009883a 	mov	r4,r22
 8015ad8:	102b883a 	mov	r21,r2
 8015adc:	80028f40 	call	80028f4 <__mulsi3>
 8015ae0:	a028943a 	slli	r20,r20,16
 8015ae4:	8006d43a 	srli	r3,r16,16
 8015ae8:	1d06b03a 	or	r3,r3,r20
 8015aec:	1880042e 	bgeu	r3,r2,8015b00 <__udivdi3+0x3a4>
 8015af0:	1f07883a 	add	r3,r3,fp
 8015af4:	a93fffc4 	addi	r4,r21,-1
 8015af8:	1f00892e 	bgeu	r3,fp,8015d20 <__udivdi3+0x5c4>
 8015afc:	202b883a 	mov	r21,r4
 8015b00:	18a3c83a 	sub	r17,r3,r2
 8015b04:	8809883a 	mov	r4,r17
 8015b08:	900b883a 	mov	r5,r18
 8015b0c:	800289c0 	call	800289c <__umodsi3>
 8015b10:	1029883a 	mov	r20,r2
 8015b14:	8809883a 	mov	r4,r17
 8015b18:	900b883a 	mov	r5,r18
 8015b1c:	a028943a 	slli	r20,r20,16
 8015b20:	80028380 	call	8002838 <__udivsi3>
 8015b24:	100b883a 	mov	r5,r2
 8015b28:	b009883a 	mov	r4,r22
 8015b2c:	843fffcc 	andi	r16,r16,65535
 8015b30:	1023883a 	mov	r17,r2
 8015b34:	8520b03a 	or	r16,r16,r20
 8015b38:	80028f40 	call	80028f4 <__mulsi3>
 8015b3c:	8080042e 	bgeu	r16,r2,8015b50 <__udivdi3+0x3f4>
 8015b40:	8721883a 	add	r16,r16,fp
 8015b44:	88ffffc4 	addi	r3,r17,-1
 8015b48:	8700712e 	bgeu	r16,fp,8015d10 <__udivdi3+0x5b4>
 8015b4c:	1823883a 	mov	r17,r3
 8015b50:	a80e943a 	slli	r7,r21,16
 8015b54:	d8c00017 	ldw	r3,0(sp)
 8015b58:	80a1c83a 	sub	r16,r16,r2
 8015b5c:	3c64b03a 	or	r18,r7,r17
 8015b60:	1d3fffcc 	andi	r20,r3,65535
 8015b64:	9022d43a 	srli	r17,r18,16
 8015b68:	95bfffcc 	andi	r22,r18,65535
 8015b6c:	a00b883a 	mov	r5,r20
 8015b70:	b009883a 	mov	r4,r22
 8015b74:	182ad43a 	srli	r21,r3,16
 8015b78:	80028f40 	call	80028f4 <__mulsi3>
 8015b7c:	a00b883a 	mov	r5,r20
 8015b80:	8809883a 	mov	r4,r17
 8015b84:	1039883a 	mov	fp,r2
 8015b88:	80028f40 	call	80028f4 <__mulsi3>
 8015b8c:	8809883a 	mov	r4,r17
 8015b90:	a80b883a 	mov	r5,r21
 8015b94:	1029883a 	mov	r20,r2
 8015b98:	80028f40 	call	80028f4 <__mulsi3>
 8015b9c:	a80b883a 	mov	r5,r21
 8015ba0:	b009883a 	mov	r4,r22
 8015ba4:	1023883a 	mov	r17,r2
 8015ba8:	80028f40 	call	80028f4 <__mulsi3>
 8015bac:	e006d43a 	srli	r3,fp,16
 8015bb0:	1505883a 	add	r2,r2,r20
 8015bb4:	1887883a 	add	r3,r3,r2
 8015bb8:	1d00022e 	bgeu	r3,r20,8015bc4 <__udivdi3+0x468>
 8015bbc:	00800074 	movhi	r2,1
 8015bc0:	88a3883a 	add	r17,r17,r2
 8015bc4:	1804d43a 	srli	r2,r3,16
 8015bc8:	1463883a 	add	r17,r2,r17
 8015bcc:	84404436 	bltu	r16,r17,8015ce0 <__udivdi3+0x584>
 8015bd0:	84403e26 	beq	r16,r17,8015ccc <__udivdi3+0x570>
 8015bd4:	9005883a 	mov	r2,r18
 8015bd8:	0007883a 	mov	r3,zero
 8015bdc:	003f9106 	br	8015a24 <__alt_data_end+0xfc015a24>
 8015be0:	88e2983a 	sll	r17,r17,r3
 8015be4:	80aed83a 	srl	r23,r16,r2
 8015be8:	80e0983a 	sll	r16,r16,r3
 8015bec:	882ad43a 	srli	r21,r17,16
 8015bf0:	9884d83a 	srl	r2,r19,r2
 8015bf4:	b809883a 	mov	r4,r23
 8015bf8:	a80b883a 	mov	r5,r21
 8015bfc:	98e4983a 	sll	r18,r19,r3
 8015c00:	142cb03a 	or	r22,r2,r16
 8015c04:	800289c0 	call	800289c <__umodsi3>
 8015c08:	b809883a 	mov	r4,r23
 8015c0c:	a80b883a 	mov	r5,r21
 8015c10:	1027883a 	mov	r19,r2
 8015c14:	8d3fffcc 	andi	r20,r17,65535
 8015c18:	80028380 	call	8002838 <__udivsi3>
 8015c1c:	a009883a 	mov	r4,r20
 8015c20:	100b883a 	mov	r5,r2
 8015c24:	102f883a 	mov	r23,r2
 8015c28:	80028f40 	call	80028f4 <__mulsi3>
 8015c2c:	9826943a 	slli	r19,r19,16
 8015c30:	b008d43a 	srli	r4,r22,16
 8015c34:	24c8b03a 	or	r4,r4,r19
 8015c38:	2080062e 	bgeu	r4,r2,8015c54 <__udivdi3+0x4f8>
 8015c3c:	2449883a 	add	r4,r4,r17
 8015c40:	b8ffffc4 	addi	r3,r23,-1
 8015c44:	24403c36 	bltu	r4,r17,8015d38 <__udivdi3+0x5dc>
 8015c48:	20803b2e 	bgeu	r4,r2,8015d38 <__udivdi3+0x5dc>
 8015c4c:	bdffff84 	addi	r23,r23,-2
 8015c50:	2449883a 	add	r4,r4,r17
 8015c54:	20a1c83a 	sub	r16,r4,r2
 8015c58:	a80b883a 	mov	r5,r21
 8015c5c:	8009883a 	mov	r4,r16
 8015c60:	800289c0 	call	800289c <__umodsi3>
 8015c64:	a80b883a 	mov	r5,r21
 8015c68:	8009883a 	mov	r4,r16
 8015c6c:	1027883a 	mov	r19,r2
 8015c70:	80028380 	call	8002838 <__udivsi3>
 8015c74:	a009883a 	mov	r4,r20
 8015c78:	100b883a 	mov	r5,r2
 8015c7c:	9826943a 	slli	r19,r19,16
 8015c80:	1039883a 	mov	fp,r2
 8015c84:	80028f40 	call	80028f4 <__mulsi3>
 8015c88:	b13fffcc 	andi	r4,r22,65535
 8015c8c:	24c8b03a 	or	r4,r4,r19
 8015c90:	2080062e 	bgeu	r4,r2,8015cac <__udivdi3+0x550>
 8015c94:	2449883a 	add	r4,r4,r17
 8015c98:	e0ffffc4 	addi	r3,fp,-1
 8015c9c:	24402436 	bltu	r4,r17,8015d30 <__udivdi3+0x5d4>
 8015ca0:	2080232e 	bgeu	r4,r2,8015d30 <__udivdi3+0x5d4>
 8015ca4:	e73fff84 	addi	fp,fp,-2
 8015ca8:	2449883a 	add	r4,r4,r17
 8015cac:	b82e943a 	slli	r23,r23,16
 8015cb0:	20a1c83a 	sub	r16,r4,r2
 8015cb4:	bf06b03a 	or	r3,r23,fp
 8015cb8:	003f2806 	br	801595c <__alt_data_end+0xfc01595c>
 8015cbc:	2021883a 	mov	r16,r4
 8015cc0:	003f5306 	br	8015a10 <__alt_data_end+0xfc015a10>
 8015cc4:	1821883a 	mov	r16,r3
 8015cc8:	003ef406 	br	801589c <__alt_data_end+0xfc01589c>
 8015ccc:	1806943a 	slli	r3,r3,16
 8015cd0:	9de6983a 	sll	r19,r19,r23
 8015cd4:	e73fffcc 	andi	fp,fp,65535
 8015cd8:	1f07883a 	add	r3,r3,fp
 8015cdc:	98ffbd2e 	bgeu	r19,r3,8015bd4 <__alt_data_end+0xfc015bd4>
 8015ce0:	90bfffc4 	addi	r2,r18,-1
 8015ce4:	0007883a 	mov	r3,zero
 8015ce8:	003f4e06 	br	8015a24 <__alt_data_end+0xfc015a24>
 8015cec:	00800604 	movi	r2,24
 8015cf0:	003ef506 	br	80158c8 <__alt_data_end+0xfc0158c8>
 8015cf4:	00800604 	movi	r2,24
 8015cf8:	003f0b06 	br	8015928 <__alt_data_end+0xfc015928>
 8015cfc:	00800604 	movi	r2,24
 8015d00:	003ead06 	br	80157b8 <__alt_data_end+0xfc0157b8>
 8015d04:	0007883a 	mov	r3,zero
 8015d08:	00800044 	movi	r2,1
 8015d0c:	003f4506 	br	8015a24 <__alt_data_end+0xfc015a24>
 8015d10:	80bf8e2e 	bgeu	r16,r2,8015b4c <__alt_data_end+0xfc015b4c>
 8015d14:	8c7fff84 	addi	r17,r17,-2
 8015d18:	8721883a 	add	r16,r16,fp
 8015d1c:	003f8c06 	br	8015b50 <__alt_data_end+0xfc015b50>
 8015d20:	18bf762e 	bgeu	r3,r2,8015afc <__alt_data_end+0xfc015afc>
 8015d24:	ad7fff84 	addi	r21,r21,-2
 8015d28:	1f07883a 	add	r3,r3,fp
 8015d2c:	003f7406 	br	8015b00 <__alt_data_end+0xfc015b00>
 8015d30:	1839883a 	mov	fp,r3
 8015d34:	003fdd06 	br	8015cac <__alt_data_end+0xfc015cac>
 8015d38:	182f883a 	mov	r23,r3
 8015d3c:	003fc506 	br	8015c54 <__alt_data_end+0xfc015c54>
 8015d40:	b5bfff84 	addi	r22,r22,-2
 8015d44:	3c4f883a 	add	r7,r7,r17
 8015d48:	003f1a06 	br	80159b4 <__alt_data_end+0xfc0159b4>
 8015d4c:	b5bfff84 	addi	r22,r22,-2
 8015d50:	1c47883a 	add	r3,r3,r17
 8015d54:	003ebc06 	br	8015848 <__alt_data_end+0xfc015848>

08015d58 <__umoddi3>:
 8015d58:	defff304 	addi	sp,sp,-52
 8015d5c:	df000b15 	stw	fp,44(sp)
 8015d60:	dc400415 	stw	r17,16(sp)
 8015d64:	dc000315 	stw	r16,12(sp)
 8015d68:	dfc00c15 	stw	ra,48(sp)
 8015d6c:	ddc00a15 	stw	r23,40(sp)
 8015d70:	dd800915 	stw	r22,36(sp)
 8015d74:	dd400815 	stw	r21,32(sp)
 8015d78:	dd000715 	stw	r20,28(sp)
 8015d7c:	dcc00615 	stw	r19,24(sp)
 8015d80:	dc800515 	stw	r18,20(sp)
 8015d84:	2021883a 	mov	r16,r4
 8015d88:	2823883a 	mov	r17,r5
 8015d8c:	2839883a 	mov	fp,r5
 8015d90:	3800401e 	bne	r7,zero,8015e94 <__umoddi3+0x13c>
 8015d94:	3027883a 	mov	r19,r6
 8015d98:	2029883a 	mov	r20,r4
 8015d9c:	2980552e 	bgeu	r5,r6,8015ef4 <__umoddi3+0x19c>
 8015da0:	00bfffd4 	movui	r2,65535
 8015da4:	1180a236 	bltu	r2,r6,8016030 <__umoddi3+0x2d8>
 8015da8:	01003fc4 	movi	r4,255
 8015dac:	2189803a 	cmpltu	r4,r4,r6
 8015db0:	200890fa 	slli	r4,r4,3
 8015db4:	3104d83a 	srl	r2,r6,r4
 8015db8:	00c200b4 	movhi	r3,2050
 8015dbc:	18f06e04 	addi	r3,r3,-15944
 8015dc0:	1885883a 	add	r2,r3,r2
 8015dc4:	10c00003 	ldbu	r3,0(r2)
 8015dc8:	00800804 	movi	r2,32
 8015dcc:	1909883a 	add	r4,r3,r4
 8015dd0:	1125c83a 	sub	r18,r2,r4
 8015dd4:	90000526 	beq	r18,zero,8015dec <__umoddi3+0x94>
 8015dd8:	8ca2983a 	sll	r17,r17,r18
 8015ddc:	8108d83a 	srl	r4,r16,r4
 8015de0:	34a6983a 	sll	r19,r6,r18
 8015de4:	84a8983a 	sll	r20,r16,r18
 8015de8:	2478b03a 	or	fp,r4,r17
 8015dec:	982cd43a 	srli	r22,r19,16
 8015df0:	e009883a 	mov	r4,fp
 8015df4:	9dffffcc 	andi	r23,r19,65535
 8015df8:	b00b883a 	mov	r5,r22
 8015dfc:	800289c0 	call	800289c <__umodsi3>
 8015e00:	b00b883a 	mov	r5,r22
 8015e04:	e009883a 	mov	r4,fp
 8015e08:	102b883a 	mov	r21,r2
 8015e0c:	80028380 	call	8002838 <__udivsi3>
 8015e10:	100b883a 	mov	r5,r2
 8015e14:	b809883a 	mov	r4,r23
 8015e18:	80028f40 	call	80028f4 <__mulsi3>
 8015e1c:	a82a943a 	slli	r21,r21,16
 8015e20:	a006d43a 	srli	r3,r20,16
 8015e24:	1d46b03a 	or	r3,r3,r21
 8015e28:	1880032e 	bgeu	r3,r2,8015e38 <__umoddi3+0xe0>
 8015e2c:	1cc7883a 	add	r3,r3,r19
 8015e30:	1cc00136 	bltu	r3,r19,8015e38 <__umoddi3+0xe0>
 8015e34:	18813136 	bltu	r3,r2,80162fc <__umoddi3+0x5a4>
 8015e38:	18a1c83a 	sub	r16,r3,r2
 8015e3c:	b00b883a 	mov	r5,r22
 8015e40:	8009883a 	mov	r4,r16
 8015e44:	800289c0 	call	800289c <__umodsi3>
 8015e48:	b00b883a 	mov	r5,r22
 8015e4c:	8009883a 	mov	r4,r16
 8015e50:	1023883a 	mov	r17,r2
 8015e54:	80028380 	call	8002838 <__udivsi3>
 8015e58:	100b883a 	mov	r5,r2
 8015e5c:	b809883a 	mov	r4,r23
 8015e60:	8822943a 	slli	r17,r17,16
 8015e64:	80028f40 	call	80028f4 <__mulsi3>
 8015e68:	a0ffffcc 	andi	r3,r20,65535
 8015e6c:	1c46b03a 	or	r3,r3,r17
 8015e70:	1880042e 	bgeu	r3,r2,8015e84 <__umoddi3+0x12c>
 8015e74:	1cc7883a 	add	r3,r3,r19
 8015e78:	1cc00236 	bltu	r3,r19,8015e84 <__umoddi3+0x12c>
 8015e7c:	1880012e 	bgeu	r3,r2,8015e84 <__umoddi3+0x12c>
 8015e80:	1cc7883a 	add	r3,r3,r19
 8015e84:	1885c83a 	sub	r2,r3,r2
 8015e88:	1484d83a 	srl	r2,r2,r18
 8015e8c:	0007883a 	mov	r3,zero
 8015e90:	00005306 	br	8015fe0 <__umoddi3+0x288>
 8015e94:	29c05036 	bltu	r5,r7,8015fd8 <__umoddi3+0x280>
 8015e98:	00bfffd4 	movui	r2,65535
 8015e9c:	11c05c2e 	bgeu	r2,r7,8016010 <__umoddi3+0x2b8>
 8015ea0:	00804034 	movhi	r2,256
 8015ea4:	10bfffc4 	addi	r2,r2,-1
 8015ea8:	11c10636 	bltu	r2,r7,80162c4 <__umoddi3+0x56c>
 8015eac:	01000404 	movi	r4,16
 8015eb0:	3904d83a 	srl	r2,r7,r4
 8015eb4:	00c200b4 	movhi	r3,2050
 8015eb8:	18f06e04 	addi	r3,r3,-15944
 8015ebc:	1885883a 	add	r2,r3,r2
 8015ec0:	14c00003 	ldbu	r19,0(r2)
 8015ec4:	00c00804 	movi	r3,32
 8015ec8:	9927883a 	add	r19,r19,r4
 8015ecc:	1ce9c83a 	sub	r20,r3,r19
 8015ed0:	a0005c1e 	bne	r20,zero,8016044 <__umoddi3+0x2ec>
 8015ed4:	3c400136 	bltu	r7,r17,8015edc <__umoddi3+0x184>
 8015ed8:	81810a36 	bltu	r16,r6,8016304 <__umoddi3+0x5ac>
 8015edc:	8185c83a 	sub	r2,r16,r6
 8015ee0:	89e3c83a 	sub	r17,r17,r7
 8015ee4:	8089803a 	cmpltu	r4,r16,r2
 8015ee8:	8939c83a 	sub	fp,r17,r4
 8015eec:	e007883a 	mov	r3,fp
 8015ef0:	00003b06 	br	8015fe0 <__umoddi3+0x288>
 8015ef4:	3000041e 	bne	r6,zero,8015f08 <__umoddi3+0x1b0>
 8015ef8:	000b883a 	mov	r5,zero
 8015efc:	01000044 	movi	r4,1
 8015f00:	80028380 	call	8002838 <__udivsi3>
 8015f04:	1027883a 	mov	r19,r2
 8015f08:	00bfffd4 	movui	r2,65535
 8015f0c:	14c0442e 	bgeu	r2,r19,8016020 <__umoddi3+0x2c8>
 8015f10:	00804034 	movhi	r2,256
 8015f14:	10bfffc4 	addi	r2,r2,-1
 8015f18:	14c0ec36 	bltu	r2,r19,80162cc <__umoddi3+0x574>
 8015f1c:	00800404 	movi	r2,16
 8015f20:	9886d83a 	srl	r3,r19,r2
 8015f24:	010200b4 	movhi	r4,2050
 8015f28:	21306e04 	addi	r4,r4,-15944
 8015f2c:	20c7883a 	add	r3,r4,r3
 8015f30:	18c00003 	ldbu	r3,0(r3)
 8015f34:	1887883a 	add	r3,r3,r2
 8015f38:	00800804 	movi	r2,32
 8015f3c:	10e5c83a 	sub	r18,r2,r3
 8015f40:	9000ab1e 	bne	r18,zero,80161f0 <__umoddi3+0x498>
 8015f44:	982cd43a 	srli	r22,r19,16
 8015f48:	8ce3c83a 	sub	r17,r17,r19
 8015f4c:	9dffffcc 	andi	r23,r19,65535
 8015f50:	b00b883a 	mov	r5,r22
 8015f54:	8809883a 	mov	r4,r17
 8015f58:	800289c0 	call	800289c <__umodsi3>
 8015f5c:	b00b883a 	mov	r5,r22
 8015f60:	8809883a 	mov	r4,r17
 8015f64:	102b883a 	mov	r21,r2
 8015f68:	80028380 	call	8002838 <__udivsi3>
 8015f6c:	b80b883a 	mov	r5,r23
 8015f70:	1009883a 	mov	r4,r2
 8015f74:	80028f40 	call	80028f4 <__mulsi3>
 8015f78:	a82a943a 	slli	r21,r21,16
 8015f7c:	a006d43a 	srli	r3,r20,16
 8015f80:	1d46b03a 	or	r3,r3,r21
 8015f84:	1880042e 	bgeu	r3,r2,8015f98 <__umoddi3+0x240>
 8015f88:	1cc7883a 	add	r3,r3,r19
 8015f8c:	1cc00236 	bltu	r3,r19,8015f98 <__umoddi3+0x240>
 8015f90:	1880012e 	bgeu	r3,r2,8015f98 <__umoddi3+0x240>
 8015f94:	1cc7883a 	add	r3,r3,r19
 8015f98:	18a1c83a 	sub	r16,r3,r2
 8015f9c:	b00b883a 	mov	r5,r22
 8015fa0:	8009883a 	mov	r4,r16
 8015fa4:	800289c0 	call	800289c <__umodsi3>
 8015fa8:	1023883a 	mov	r17,r2
 8015fac:	b00b883a 	mov	r5,r22
 8015fb0:	8009883a 	mov	r4,r16
 8015fb4:	80028380 	call	8002838 <__udivsi3>
 8015fb8:	8822943a 	slli	r17,r17,16
 8015fbc:	b80b883a 	mov	r5,r23
 8015fc0:	1009883a 	mov	r4,r2
 8015fc4:	80028f40 	call	80028f4 <__mulsi3>
 8015fc8:	a53fffcc 	andi	r20,r20,65535
 8015fcc:	a446b03a 	or	r3,r20,r17
 8015fd0:	18bfac2e 	bgeu	r3,r2,8015e84 <__alt_data_end+0xfc015e84>
 8015fd4:	003fa706 	br	8015e74 <__alt_data_end+0xfc015e74>
 8015fd8:	2005883a 	mov	r2,r4
 8015fdc:	2807883a 	mov	r3,r5
 8015fe0:	dfc00c17 	ldw	ra,48(sp)
 8015fe4:	df000b17 	ldw	fp,44(sp)
 8015fe8:	ddc00a17 	ldw	r23,40(sp)
 8015fec:	dd800917 	ldw	r22,36(sp)
 8015ff0:	dd400817 	ldw	r21,32(sp)
 8015ff4:	dd000717 	ldw	r20,28(sp)
 8015ff8:	dcc00617 	ldw	r19,24(sp)
 8015ffc:	dc800517 	ldw	r18,20(sp)
 8016000:	dc400417 	ldw	r17,16(sp)
 8016004:	dc000317 	ldw	r16,12(sp)
 8016008:	dec00d04 	addi	sp,sp,52
 801600c:	f800283a 	ret
 8016010:	04c03fc4 	movi	r19,255
 8016014:	99c9803a 	cmpltu	r4,r19,r7
 8016018:	200890fa 	slli	r4,r4,3
 801601c:	003fa406 	br	8015eb0 <__alt_data_end+0xfc015eb0>
 8016020:	00803fc4 	movi	r2,255
 8016024:	14c5803a 	cmpltu	r2,r2,r19
 8016028:	100490fa 	slli	r2,r2,3
 801602c:	003fbc06 	br	8015f20 <__alt_data_end+0xfc015f20>
 8016030:	00804034 	movhi	r2,256
 8016034:	10bfffc4 	addi	r2,r2,-1
 8016038:	1180a636 	bltu	r2,r6,80162d4 <__umoddi3+0x57c>
 801603c:	01000404 	movi	r4,16
 8016040:	003f5c06 	br	8015db4 <__alt_data_end+0xfc015db4>
 8016044:	3d0e983a 	sll	r7,r7,r20
 8016048:	34ead83a 	srl	r21,r6,r19
 801604c:	8cc6d83a 	srl	r3,r17,r19
 8016050:	8d10983a 	sll	r8,r17,r20
 8016054:	3d6ab03a 	or	r21,r7,r21
 8016058:	a82cd43a 	srli	r22,r21,16
 801605c:	84e2d83a 	srl	r17,r16,r19
 8016060:	1809883a 	mov	r4,r3
 8016064:	b00b883a 	mov	r5,r22
 8016068:	8a22b03a 	or	r17,r17,r8
 801606c:	3524983a 	sll	r18,r6,r20
 8016070:	dc400015 	stw	r17,0(sp)
 8016074:	d8c00115 	stw	r3,4(sp)
 8016078:	800289c0 	call	800289c <__umodsi3>
 801607c:	d8c00117 	ldw	r3,4(sp)
 8016080:	b00b883a 	mov	r5,r22
 8016084:	1039883a 	mov	fp,r2
 8016088:	1809883a 	mov	r4,r3
 801608c:	80028380 	call	8002838 <__udivsi3>
 8016090:	adffffcc 	andi	r23,r21,65535
 8016094:	100b883a 	mov	r5,r2
 8016098:	b809883a 	mov	r4,r23
 801609c:	1023883a 	mov	r17,r2
 80160a0:	80028f40 	call	80028f4 <__mulsi3>
 80160a4:	d9400017 	ldw	r5,0(sp)
 80160a8:	e008943a 	slli	r4,fp,16
 80160ac:	8520983a 	sll	r16,r16,r20
 80160b0:	2806d43a 	srli	r3,r5,16
 80160b4:	1906b03a 	or	r3,r3,r4
 80160b8:	1880042e 	bgeu	r3,r2,80160cc <__umoddi3+0x374>
 80160bc:	1d47883a 	add	r3,r3,r21
 80160c0:	893fffc4 	addi	r4,r17,-1
 80160c4:	1d40892e 	bgeu	r3,r21,80162ec <__umoddi3+0x594>
 80160c8:	2023883a 	mov	r17,r4
 80160cc:	18b9c83a 	sub	fp,r3,r2
 80160d0:	b00b883a 	mov	r5,r22
 80160d4:	e009883a 	mov	r4,fp
 80160d8:	800289c0 	call	800289c <__umodsi3>
 80160dc:	b00b883a 	mov	r5,r22
 80160e0:	e009883a 	mov	r4,fp
 80160e4:	d8800215 	stw	r2,8(sp)
 80160e8:	80028380 	call	8002838 <__udivsi3>
 80160ec:	100b883a 	mov	r5,r2
 80160f0:	b809883a 	mov	r4,r23
 80160f4:	102d883a 	mov	r22,r2
 80160f8:	80028f40 	call	80028f4 <__mulsi3>
 80160fc:	d9800217 	ldw	r6,8(sp)
 8016100:	d8c00017 	ldw	r3,0(sp)
 8016104:	300c943a 	slli	r6,r6,16
 8016108:	1a3fffcc 	andi	r8,r3,65535
 801610c:	4190b03a 	or	r8,r8,r6
 8016110:	4080042e 	bgeu	r8,r2,8016124 <__umoddi3+0x3cc>
 8016114:	4551883a 	add	r8,r8,r21
 8016118:	b0ffffc4 	addi	r3,r22,-1
 801611c:	45406f2e 	bgeu	r8,r21,80162dc <__umoddi3+0x584>
 8016120:	182d883a 	mov	r22,r3
 8016124:	880e943a 	slli	r7,r17,16
 8016128:	9006d43a 	srli	r3,r18,16
 801612c:	91bfffcc 	andi	r6,r18,65535
 8016130:	3dacb03a 	or	r22,r7,r22
 8016134:	b02ed43a 	srli	r23,r22,16
 8016138:	b5bfffcc 	andi	r22,r22,65535
 801613c:	300b883a 	mov	r5,r6
 8016140:	b009883a 	mov	r4,r22
 8016144:	40a3c83a 	sub	r17,r8,r2
 8016148:	d8c00115 	stw	r3,4(sp)
 801614c:	d9800215 	stw	r6,8(sp)
 8016150:	80028f40 	call	80028f4 <__mulsi3>
 8016154:	d9800217 	ldw	r6,8(sp)
 8016158:	b809883a 	mov	r4,r23
 801615c:	1039883a 	mov	fp,r2
 8016160:	300b883a 	mov	r5,r6
 8016164:	80028f40 	call	80028f4 <__mulsi3>
 8016168:	d8c00117 	ldw	r3,4(sp)
 801616c:	b809883a 	mov	r4,r23
 8016170:	d8800215 	stw	r2,8(sp)
 8016174:	180b883a 	mov	r5,r3
 8016178:	80028f40 	call	80028f4 <__mulsi3>
 801617c:	d8c00117 	ldw	r3,4(sp)
 8016180:	b009883a 	mov	r4,r22
 8016184:	102f883a 	mov	r23,r2
 8016188:	180b883a 	mov	r5,r3
 801618c:	80028f40 	call	80028f4 <__mulsi3>
 8016190:	d9800217 	ldw	r6,8(sp)
 8016194:	e006d43a 	srli	r3,fp,16
 8016198:	1185883a 	add	r2,r2,r6
 801619c:	1885883a 	add	r2,r3,r2
 80161a0:	1180022e 	bgeu	r2,r6,80161ac <__umoddi3+0x454>
 80161a4:	00c00074 	movhi	r3,1
 80161a8:	b8ef883a 	add	r23,r23,r3
 80161ac:	1006d43a 	srli	r3,r2,16
 80161b0:	1004943a 	slli	r2,r2,16
 80161b4:	e73fffcc 	andi	fp,fp,65535
 80161b8:	1dc7883a 	add	r3,r3,r23
 80161bc:	1739883a 	add	fp,r2,fp
 80161c0:	88c03a36 	bltu	r17,r3,80162ac <__umoddi3+0x554>
 80161c4:	88c05126 	beq	r17,r3,801630c <__umoddi3+0x5b4>
 80161c8:	88c9c83a 	sub	r4,r17,r3
 80161cc:	e00f883a 	mov	r7,fp
 80161d0:	81cfc83a 	sub	r7,r16,r7
 80161d4:	81c7803a 	cmpltu	r3,r16,r7
 80161d8:	20c7c83a 	sub	r3,r4,r3
 80161dc:	1cc4983a 	sll	r2,r3,r19
 80161e0:	3d0ed83a 	srl	r7,r7,r20
 80161e4:	1d06d83a 	srl	r3,r3,r20
 80161e8:	11c4b03a 	or	r2,r2,r7
 80161ec:	003f7c06 	br	8015fe0 <__alt_data_end+0xfc015fe0>
 80161f0:	9ca6983a 	sll	r19,r19,r18
 80161f4:	88f8d83a 	srl	fp,r17,r3
 80161f8:	80c4d83a 	srl	r2,r16,r3
 80161fc:	982cd43a 	srli	r22,r19,16
 8016200:	8ca2983a 	sll	r17,r17,r18
 8016204:	e009883a 	mov	r4,fp
 8016208:	b00b883a 	mov	r5,r22
 801620c:	146ab03a 	or	r21,r2,r17
 8016210:	800289c0 	call	800289c <__umodsi3>
 8016214:	b00b883a 	mov	r5,r22
 8016218:	e009883a 	mov	r4,fp
 801621c:	1029883a 	mov	r20,r2
 8016220:	9dffffcc 	andi	r23,r19,65535
 8016224:	80028380 	call	8002838 <__udivsi3>
 8016228:	b809883a 	mov	r4,r23
 801622c:	100b883a 	mov	r5,r2
 8016230:	80028f40 	call	80028f4 <__mulsi3>
 8016234:	a008943a 	slli	r4,r20,16
 8016238:	a806d43a 	srli	r3,r21,16
 801623c:	84a8983a 	sll	r20,r16,r18
 8016240:	1906b03a 	or	r3,r3,r4
 8016244:	1880042e 	bgeu	r3,r2,8016258 <__umoddi3+0x500>
 8016248:	1cc7883a 	add	r3,r3,r19
 801624c:	1cc00236 	bltu	r3,r19,8016258 <__umoddi3+0x500>
 8016250:	1880012e 	bgeu	r3,r2,8016258 <__umoddi3+0x500>
 8016254:	1cc7883a 	add	r3,r3,r19
 8016258:	18a3c83a 	sub	r17,r3,r2
 801625c:	b00b883a 	mov	r5,r22
 8016260:	8809883a 	mov	r4,r17
 8016264:	800289c0 	call	800289c <__umodsi3>
 8016268:	b00b883a 	mov	r5,r22
 801626c:	8809883a 	mov	r4,r17
 8016270:	1021883a 	mov	r16,r2
 8016274:	80028380 	call	8002838 <__udivsi3>
 8016278:	100b883a 	mov	r5,r2
 801627c:	b809883a 	mov	r4,r23
 8016280:	8020943a 	slli	r16,r16,16
 8016284:	80028f40 	call	80028f4 <__mulsi3>
 8016288:	a8ffffcc 	andi	r3,r21,65535
 801628c:	1c06b03a 	or	r3,r3,r16
 8016290:	1880042e 	bgeu	r3,r2,80162a4 <__umoddi3+0x54c>
 8016294:	1cc7883a 	add	r3,r3,r19
 8016298:	1cc00236 	bltu	r3,r19,80162a4 <__umoddi3+0x54c>
 801629c:	1880012e 	bgeu	r3,r2,80162a4 <__umoddi3+0x54c>
 80162a0:	1cc7883a 	add	r3,r3,r19
 80162a4:	18a3c83a 	sub	r17,r3,r2
 80162a8:	003f2906 	br	8015f50 <__alt_data_end+0xfc015f50>
 80162ac:	e48fc83a 	sub	r7,fp,r18
 80162b0:	1d49c83a 	sub	r4,r3,r21
 80162b4:	e1f9803a 	cmpltu	fp,fp,r7
 80162b8:	2739c83a 	sub	fp,r4,fp
 80162bc:	8f09c83a 	sub	r4,r17,fp
 80162c0:	003fc306 	br	80161d0 <__alt_data_end+0xfc0161d0>
 80162c4:	01000604 	movi	r4,24
 80162c8:	003ef906 	br	8015eb0 <__alt_data_end+0xfc015eb0>
 80162cc:	00800604 	movi	r2,24
 80162d0:	003f1306 	br	8015f20 <__alt_data_end+0xfc015f20>
 80162d4:	01000604 	movi	r4,24
 80162d8:	003eb606 	br	8015db4 <__alt_data_end+0xfc015db4>
 80162dc:	40bf902e 	bgeu	r8,r2,8016120 <__alt_data_end+0xfc016120>
 80162e0:	b5bfff84 	addi	r22,r22,-2
 80162e4:	4551883a 	add	r8,r8,r21
 80162e8:	003f8e06 	br	8016124 <__alt_data_end+0xfc016124>
 80162ec:	18bf762e 	bgeu	r3,r2,80160c8 <__alt_data_end+0xfc0160c8>
 80162f0:	8c7fff84 	addi	r17,r17,-2
 80162f4:	1d47883a 	add	r3,r3,r21
 80162f8:	003f7406 	br	80160cc <__alt_data_end+0xfc0160cc>
 80162fc:	1cc7883a 	add	r3,r3,r19
 8016300:	003ecd06 	br	8015e38 <__alt_data_end+0xfc015e38>
 8016304:	8005883a 	mov	r2,r16
 8016308:	003ef806 	br	8015eec <__alt_data_end+0xfc015eec>
 801630c:	873fe736 	bltu	r16,fp,80162ac <__alt_data_end+0xfc0162ac>
 8016310:	e00f883a 	mov	r7,fp
 8016314:	0009883a 	mov	r4,zero
 8016318:	003fad06 	br	80161d0 <__alt_data_end+0xfc0161d0>

0801631c <__eqsf2>:
 801631c:	2006d5fa 	srli	r3,r4,23
 8016320:	280cd5fa 	srli	r6,r5,23
 8016324:	01c02034 	movhi	r7,128
 8016328:	39ffffc4 	addi	r7,r7,-1
 801632c:	18c03fcc 	andi	r3,r3,255
 8016330:	02003fc4 	movi	r8,255
 8016334:	3904703a 	and	r2,r7,r4
 8016338:	31803fcc 	andi	r6,r6,255
 801633c:	394e703a 	and	r7,r7,r5
 8016340:	2008d7fa 	srli	r4,r4,31
 8016344:	280ad7fa 	srli	r5,r5,31
 8016348:	1a000d26 	beq	r3,r8,8016380 <__eqsf2+0x64>
 801634c:	02003fc4 	movi	r8,255
 8016350:	32000826 	beq	r6,r8,8016374 <__eqsf2+0x58>
 8016354:	19800226 	beq	r3,r6,8016360 <__eqsf2+0x44>
 8016358:	00800044 	movi	r2,1
 801635c:	f800283a 	ret
 8016360:	11fffd1e 	bne	r2,r7,8016358 <__alt_data_end+0xfc016358>
 8016364:	21400926 	beq	r4,r5,801638c <__eqsf2+0x70>
 8016368:	183ffb1e 	bne	r3,zero,8016358 <__alt_data_end+0xfc016358>
 801636c:	1004c03a 	cmpne	r2,r2,zero
 8016370:	f800283a 	ret
 8016374:	383ff726 	beq	r7,zero,8016354 <__alt_data_end+0xfc016354>
 8016378:	00800044 	movi	r2,1
 801637c:	f800283a 	ret
 8016380:	103ff226 	beq	r2,zero,801634c <__alt_data_end+0xfc01634c>
 8016384:	00800044 	movi	r2,1
 8016388:	f800283a 	ret
 801638c:	0005883a 	mov	r2,zero
 8016390:	f800283a 	ret

08016394 <__gesf2>:
 8016394:	2004d5fa 	srli	r2,r4,23
 8016398:	2806d5fa 	srli	r3,r5,23
 801639c:	01802034 	movhi	r6,128
 80163a0:	31bfffc4 	addi	r6,r6,-1
 80163a4:	10803fcc 	andi	r2,r2,255
 80163a8:	01c03fc4 	movi	r7,255
 80163ac:	3110703a 	and	r8,r6,r4
 80163b0:	18c03fcc 	andi	r3,r3,255
 80163b4:	314c703a 	and	r6,r6,r5
 80163b8:	2008d7fa 	srli	r4,r4,31
 80163bc:	280ad7fa 	srli	r5,r5,31
 80163c0:	11c01926 	beq	r2,r7,8016428 <__gesf2+0x94>
 80163c4:	01c03fc4 	movi	r7,255
 80163c8:	19c00f26 	beq	r3,r7,8016408 <__gesf2+0x74>
 80163cc:	1000061e 	bne	r2,zero,80163e8 <__gesf2+0x54>
 80163d0:	400f003a 	cmpeq	r7,r8,zero
 80163d4:	1800071e 	bne	r3,zero,80163f4 <__gesf2+0x60>
 80163d8:	3000061e 	bne	r6,zero,80163f4 <__gesf2+0x60>
 80163dc:	0005883a 	mov	r2,zero
 80163e0:	40000e1e 	bne	r8,zero,801641c <__gesf2+0x88>
 80163e4:	f800283a 	ret
 80163e8:	18000a1e 	bne	r3,zero,8016414 <__gesf2+0x80>
 80163ec:	30000b26 	beq	r6,zero,801641c <__gesf2+0x88>
 80163f0:	000f883a 	mov	r7,zero
 80163f4:	29403fcc 	andi	r5,r5,255
 80163f8:	38000726 	beq	r7,zero,8016418 <__gesf2+0x84>
 80163fc:	28000826 	beq	r5,zero,8016420 <__gesf2+0x8c>
 8016400:	00800044 	movi	r2,1
 8016404:	f800283a 	ret
 8016408:	303ff026 	beq	r6,zero,80163cc <__alt_data_end+0xfc0163cc>
 801640c:	00bfff84 	movi	r2,-2
 8016410:	f800283a 	ret
 8016414:	29403fcc 	andi	r5,r5,255
 8016418:	21400526 	beq	r4,r5,8016430 <__gesf2+0x9c>
 801641c:	203ff826 	beq	r4,zero,8016400 <__alt_data_end+0xfc016400>
 8016420:	00bfffc4 	movi	r2,-1
 8016424:	f800283a 	ret
 8016428:	403fe626 	beq	r8,zero,80163c4 <__alt_data_end+0xfc0163c4>
 801642c:	003ff706 	br	801640c <__alt_data_end+0xfc01640c>
 8016430:	18bffa16 	blt	r3,r2,801641c <__alt_data_end+0xfc01641c>
 8016434:	10c00216 	blt	r2,r3,8016440 <__gesf2+0xac>
 8016438:	323ff836 	bltu	r6,r8,801641c <__alt_data_end+0xfc01641c>
 801643c:	4180022e 	bgeu	r8,r6,8016448 <__gesf2+0xb4>
 8016440:	203fef1e 	bne	r4,zero,8016400 <__alt_data_end+0xfc016400>
 8016444:	003ff606 	br	8016420 <__alt_data_end+0xfc016420>
 8016448:	0005883a 	mov	r2,zero
 801644c:	f800283a 	ret

08016450 <__lesf2>:
 8016450:	2004d5fa 	srli	r2,r4,23
 8016454:	280cd5fa 	srli	r6,r5,23
 8016458:	00c02034 	movhi	r3,128
 801645c:	18ffffc4 	addi	r3,r3,-1
 8016460:	10803fcc 	andi	r2,r2,255
 8016464:	01c03fc4 	movi	r7,255
 8016468:	1910703a 	and	r8,r3,r4
 801646c:	31803fcc 	andi	r6,r6,255
 8016470:	1946703a 	and	r3,r3,r5
 8016474:	2008d7fa 	srli	r4,r4,31
 8016478:	280ad7fa 	srli	r5,r5,31
 801647c:	11c01b26 	beq	r2,r7,80164ec <__lesf2+0x9c>
 8016480:	01c03fc4 	movi	r7,255
 8016484:	31c01126 	beq	r6,r7,80164cc <__lesf2+0x7c>
 8016488:	1000071e 	bne	r2,zero,80164a8 <__lesf2+0x58>
 801648c:	400f003a 	cmpeq	r7,r8,zero
 8016490:	21003fcc 	andi	r4,r4,255
 8016494:	3000081e 	bne	r6,zero,80164b8 <__lesf2+0x68>
 8016498:	1800071e 	bne	r3,zero,80164b8 <__lesf2+0x68>
 801649c:	0005883a 	mov	r2,zero
 80164a0:	40000f1e 	bne	r8,zero,80164e0 <__lesf2+0x90>
 80164a4:	f800283a 	ret
 80164a8:	21003fcc 	andi	r4,r4,255
 80164ac:	30000a1e 	bne	r6,zero,80164d8 <__lesf2+0x88>
 80164b0:	18000b26 	beq	r3,zero,80164e0 <__lesf2+0x90>
 80164b4:	000f883a 	mov	r7,zero
 80164b8:	29403fcc 	andi	r5,r5,255
 80164bc:	38000726 	beq	r7,zero,80164dc <__lesf2+0x8c>
 80164c0:	28000826 	beq	r5,zero,80164e4 <__lesf2+0x94>
 80164c4:	00800044 	movi	r2,1
 80164c8:	f800283a 	ret
 80164cc:	183fee26 	beq	r3,zero,8016488 <__alt_data_end+0xfc016488>
 80164d0:	00800084 	movi	r2,2
 80164d4:	f800283a 	ret
 80164d8:	29403fcc 	andi	r5,r5,255
 80164dc:	21400626 	beq	r4,r5,80164f8 <__lesf2+0xa8>
 80164e0:	203ff826 	beq	r4,zero,80164c4 <__alt_data_end+0xfc0164c4>
 80164e4:	00bfffc4 	movi	r2,-1
 80164e8:	f800283a 	ret
 80164ec:	403fe426 	beq	r8,zero,8016480 <__alt_data_end+0xfc016480>
 80164f0:	00800084 	movi	r2,2
 80164f4:	f800283a 	ret
 80164f8:	30bff916 	blt	r6,r2,80164e0 <__alt_data_end+0xfc0164e0>
 80164fc:	11800216 	blt	r2,r6,8016508 <__lesf2+0xb8>
 8016500:	1a3ff736 	bltu	r3,r8,80164e0 <__alt_data_end+0xfc0164e0>
 8016504:	40c0022e 	bgeu	r8,r3,8016510 <__lesf2+0xc0>
 8016508:	203fee1e 	bne	r4,zero,80164c4 <__alt_data_end+0xfc0164c4>
 801650c:	003ff506 	br	80164e4 <__alt_data_end+0xfc0164e4>
 8016510:	0005883a 	mov	r2,zero
 8016514:	f800283a 	ret

08016518 <__adddf3>:
 8016518:	02c00434 	movhi	r11,16
 801651c:	5affffc4 	addi	r11,r11,-1
 8016520:	2806d7fa 	srli	r3,r5,31
 8016524:	2ad4703a 	and	r10,r5,r11
 8016528:	3ad2703a 	and	r9,r7,r11
 801652c:	3804d53a 	srli	r2,r7,20
 8016530:	3018d77a 	srli	r12,r6,29
 8016534:	280ad53a 	srli	r5,r5,20
 8016538:	501490fa 	slli	r10,r10,3
 801653c:	2010d77a 	srli	r8,r4,29
 8016540:	481290fa 	slli	r9,r9,3
 8016544:	380ed7fa 	srli	r7,r7,31
 8016548:	defffb04 	addi	sp,sp,-20
 801654c:	dc800215 	stw	r18,8(sp)
 8016550:	dc400115 	stw	r17,4(sp)
 8016554:	dc000015 	stw	r16,0(sp)
 8016558:	dfc00415 	stw	ra,16(sp)
 801655c:	dcc00315 	stw	r19,12(sp)
 8016560:	1c803fcc 	andi	r18,r3,255
 8016564:	2c01ffcc 	andi	r16,r5,2047
 8016568:	5210b03a 	or	r8,r10,r8
 801656c:	202290fa 	slli	r17,r4,3
 8016570:	1081ffcc 	andi	r2,r2,2047
 8016574:	4b12b03a 	or	r9,r9,r12
 8016578:	300c90fa 	slli	r6,r6,3
 801657c:	91c07526 	beq	r18,r7,8016754 <__adddf3+0x23c>
 8016580:	8087c83a 	sub	r3,r16,r2
 8016584:	00c0ab0e 	bge	zero,r3,8016834 <__adddf3+0x31c>
 8016588:	10002a1e 	bne	r2,zero,8016634 <__adddf3+0x11c>
 801658c:	4984b03a 	or	r2,r9,r6
 8016590:	1000961e 	bne	r2,zero,80167ec <__adddf3+0x2d4>
 8016594:	888001cc 	andi	r2,r17,7
 8016598:	10000726 	beq	r2,zero,80165b8 <__adddf3+0xa0>
 801659c:	888003cc 	andi	r2,r17,15
 80165a0:	00c00104 	movi	r3,4
 80165a4:	10c00426 	beq	r2,r3,80165b8 <__adddf3+0xa0>
 80165a8:	88c7883a 	add	r3,r17,r3
 80165ac:	1c63803a 	cmpltu	r17,r3,r17
 80165b0:	4451883a 	add	r8,r8,r17
 80165b4:	1823883a 	mov	r17,r3
 80165b8:	4080202c 	andhi	r2,r8,128
 80165bc:	10005926 	beq	r2,zero,8016724 <__adddf3+0x20c>
 80165c0:	84000044 	addi	r16,r16,1
 80165c4:	0081ffc4 	movi	r2,2047
 80165c8:	8080ba26 	beq	r16,r2,80168b4 <__adddf3+0x39c>
 80165cc:	00bfe034 	movhi	r2,65408
 80165d0:	10bfffc4 	addi	r2,r2,-1
 80165d4:	4090703a 	and	r8,r8,r2
 80165d8:	4004977a 	slli	r2,r8,29
 80165dc:	4010927a 	slli	r8,r8,9
 80165e0:	8822d0fa 	srli	r17,r17,3
 80165e4:	8401ffcc 	andi	r16,r16,2047
 80165e8:	4010d33a 	srli	r8,r8,12
 80165ec:	9007883a 	mov	r3,r18
 80165f0:	1444b03a 	or	r2,r2,r17
 80165f4:	8401ffcc 	andi	r16,r16,2047
 80165f8:	8020953a 	slli	r16,r16,20
 80165fc:	18c03fcc 	andi	r3,r3,255
 8016600:	01000434 	movhi	r4,16
 8016604:	213fffc4 	addi	r4,r4,-1
 8016608:	180697fa 	slli	r3,r3,31
 801660c:	4110703a 	and	r8,r8,r4
 8016610:	4410b03a 	or	r8,r8,r16
 8016614:	40c6b03a 	or	r3,r8,r3
 8016618:	dfc00417 	ldw	ra,16(sp)
 801661c:	dcc00317 	ldw	r19,12(sp)
 8016620:	dc800217 	ldw	r18,8(sp)
 8016624:	dc400117 	ldw	r17,4(sp)
 8016628:	dc000017 	ldw	r16,0(sp)
 801662c:	dec00504 	addi	sp,sp,20
 8016630:	f800283a 	ret
 8016634:	0081ffc4 	movi	r2,2047
 8016638:	80bfd626 	beq	r16,r2,8016594 <__alt_data_end+0xfc016594>
 801663c:	4a402034 	orhi	r9,r9,128
 8016640:	00800e04 	movi	r2,56
 8016644:	10c09f16 	blt	r2,r3,80168c4 <__adddf3+0x3ac>
 8016648:	008007c4 	movi	r2,31
 801664c:	10c0c216 	blt	r2,r3,8016958 <__adddf3+0x440>
 8016650:	00800804 	movi	r2,32
 8016654:	10c5c83a 	sub	r2,r2,r3
 8016658:	488a983a 	sll	r5,r9,r2
 801665c:	30c8d83a 	srl	r4,r6,r3
 8016660:	3084983a 	sll	r2,r6,r2
 8016664:	48c6d83a 	srl	r3,r9,r3
 8016668:	290cb03a 	or	r6,r5,r4
 801666c:	1004c03a 	cmpne	r2,r2,zero
 8016670:	308cb03a 	or	r6,r6,r2
 8016674:	898dc83a 	sub	r6,r17,r6
 8016678:	89a3803a 	cmpltu	r17,r17,r6
 801667c:	40d1c83a 	sub	r8,r8,r3
 8016680:	4451c83a 	sub	r8,r8,r17
 8016684:	3023883a 	mov	r17,r6
 8016688:	4080202c 	andhi	r2,r8,128
 801668c:	10002326 	beq	r2,zero,801671c <__adddf3+0x204>
 8016690:	04c02034 	movhi	r19,128
 8016694:	9cffffc4 	addi	r19,r19,-1
 8016698:	44e6703a 	and	r19,r8,r19
 801669c:	98007626 	beq	r19,zero,8016878 <__adddf3+0x360>
 80166a0:	9809883a 	mov	r4,r19
 80166a4:	8018f000 	call	8018f00 <__clzsi2>
 80166a8:	10fffe04 	addi	r3,r2,-8
 80166ac:	010007c4 	movi	r4,31
 80166b0:	20c07716 	blt	r4,r3,8016890 <__adddf3+0x378>
 80166b4:	00800804 	movi	r2,32
 80166b8:	10c5c83a 	sub	r2,r2,r3
 80166bc:	8884d83a 	srl	r2,r17,r2
 80166c0:	98d0983a 	sll	r8,r19,r3
 80166c4:	88e2983a 	sll	r17,r17,r3
 80166c8:	1204b03a 	or	r2,r2,r8
 80166cc:	1c007416 	blt	r3,r16,80168a0 <__adddf3+0x388>
 80166d0:	1c21c83a 	sub	r16,r3,r16
 80166d4:	82000044 	addi	r8,r16,1
 80166d8:	00c007c4 	movi	r3,31
 80166dc:	1a009116 	blt	r3,r8,8016924 <__adddf3+0x40c>
 80166e0:	00c00804 	movi	r3,32
 80166e4:	1a07c83a 	sub	r3,r3,r8
 80166e8:	8a08d83a 	srl	r4,r17,r8
 80166ec:	88e2983a 	sll	r17,r17,r3
 80166f0:	10c6983a 	sll	r3,r2,r3
 80166f4:	1210d83a 	srl	r8,r2,r8
 80166f8:	8804c03a 	cmpne	r2,r17,zero
 80166fc:	1906b03a 	or	r3,r3,r4
 8016700:	18a2b03a 	or	r17,r3,r2
 8016704:	0021883a 	mov	r16,zero
 8016708:	003fa206 	br	8016594 <__alt_data_end+0xfc016594>
 801670c:	1890b03a 	or	r8,r3,r2
 8016710:	40017d26 	beq	r8,zero,8016d08 <__adddf3+0x7f0>
 8016714:	1011883a 	mov	r8,r2
 8016718:	1823883a 	mov	r17,r3
 801671c:	888001cc 	andi	r2,r17,7
 8016720:	103f9e1e 	bne	r2,zero,801659c <__alt_data_end+0xfc01659c>
 8016724:	4004977a 	slli	r2,r8,29
 8016728:	8822d0fa 	srli	r17,r17,3
 801672c:	4010d0fa 	srli	r8,r8,3
 8016730:	9007883a 	mov	r3,r18
 8016734:	1444b03a 	or	r2,r2,r17
 8016738:	0101ffc4 	movi	r4,2047
 801673c:	81002426 	beq	r16,r4,80167d0 <__adddf3+0x2b8>
 8016740:	8120703a 	and	r16,r16,r4
 8016744:	01000434 	movhi	r4,16
 8016748:	213fffc4 	addi	r4,r4,-1
 801674c:	4110703a 	and	r8,r8,r4
 8016750:	003fa806 	br	80165f4 <__alt_data_end+0xfc0165f4>
 8016754:	8089c83a 	sub	r4,r16,r2
 8016758:	01005e0e 	bge	zero,r4,80168d4 <__adddf3+0x3bc>
 801675c:	10002b26 	beq	r2,zero,801680c <__adddf3+0x2f4>
 8016760:	0081ffc4 	movi	r2,2047
 8016764:	80bf8b26 	beq	r16,r2,8016594 <__alt_data_end+0xfc016594>
 8016768:	4a402034 	orhi	r9,r9,128
 801676c:	00800e04 	movi	r2,56
 8016770:	1100a40e 	bge	r2,r4,8016a04 <__adddf3+0x4ec>
 8016774:	498cb03a 	or	r6,r9,r6
 8016778:	300ac03a 	cmpne	r5,r6,zero
 801677c:	0013883a 	mov	r9,zero
 8016780:	2c4b883a 	add	r5,r5,r17
 8016784:	2c63803a 	cmpltu	r17,r5,r17
 8016788:	4a11883a 	add	r8,r9,r8
 801678c:	8a11883a 	add	r8,r17,r8
 8016790:	2823883a 	mov	r17,r5
 8016794:	4080202c 	andhi	r2,r8,128
 8016798:	103fe026 	beq	r2,zero,801671c <__alt_data_end+0xfc01671c>
 801679c:	84000044 	addi	r16,r16,1
 80167a0:	0081ffc4 	movi	r2,2047
 80167a4:	8080d226 	beq	r16,r2,8016af0 <__adddf3+0x5d8>
 80167a8:	00bfe034 	movhi	r2,65408
 80167ac:	10bfffc4 	addi	r2,r2,-1
 80167b0:	4090703a 	and	r8,r8,r2
 80167b4:	880ad07a 	srli	r5,r17,1
 80167b8:	400897fa 	slli	r4,r8,31
 80167bc:	88c0004c 	andi	r3,r17,1
 80167c0:	28e2b03a 	or	r17,r5,r3
 80167c4:	4010d07a 	srli	r8,r8,1
 80167c8:	2462b03a 	or	r17,r4,r17
 80167cc:	003f7106 	br	8016594 <__alt_data_end+0xfc016594>
 80167d0:	4088b03a 	or	r4,r8,r2
 80167d4:	20014526 	beq	r4,zero,8016cec <__adddf3+0x7d4>
 80167d8:	01000434 	movhi	r4,16
 80167dc:	42000234 	orhi	r8,r8,8
 80167e0:	213fffc4 	addi	r4,r4,-1
 80167e4:	4110703a 	and	r8,r8,r4
 80167e8:	003f8206 	br	80165f4 <__alt_data_end+0xfc0165f4>
 80167ec:	18ffffc4 	addi	r3,r3,-1
 80167f0:	1800491e 	bne	r3,zero,8016918 <__adddf3+0x400>
 80167f4:	898bc83a 	sub	r5,r17,r6
 80167f8:	8963803a 	cmpltu	r17,r17,r5
 80167fc:	4251c83a 	sub	r8,r8,r9
 8016800:	4451c83a 	sub	r8,r8,r17
 8016804:	2823883a 	mov	r17,r5
 8016808:	003f9f06 	br	8016688 <__alt_data_end+0xfc016688>
 801680c:	4984b03a 	or	r2,r9,r6
 8016810:	103f6026 	beq	r2,zero,8016594 <__alt_data_end+0xfc016594>
 8016814:	213fffc4 	addi	r4,r4,-1
 8016818:	2000931e 	bne	r4,zero,8016a68 <__adddf3+0x550>
 801681c:	898d883a 	add	r6,r17,r6
 8016820:	3463803a 	cmpltu	r17,r6,r17
 8016824:	4251883a 	add	r8,r8,r9
 8016828:	8a11883a 	add	r8,r17,r8
 801682c:	3023883a 	mov	r17,r6
 8016830:	003fd806 	br	8016794 <__alt_data_end+0xfc016794>
 8016834:	1800541e 	bne	r3,zero,8016988 <__adddf3+0x470>
 8016838:	80800044 	addi	r2,r16,1
 801683c:	1081ffcc 	andi	r2,r2,2047
 8016840:	00c00044 	movi	r3,1
 8016844:	1880a00e 	bge	r3,r2,8016ac8 <__adddf3+0x5b0>
 8016848:	8989c83a 	sub	r4,r17,r6
 801684c:	8905803a 	cmpltu	r2,r17,r4
 8016850:	4267c83a 	sub	r19,r8,r9
 8016854:	98a7c83a 	sub	r19,r19,r2
 8016858:	9880202c 	andhi	r2,r19,128
 801685c:	10006326 	beq	r2,zero,80169ec <__adddf3+0x4d4>
 8016860:	3463c83a 	sub	r17,r6,r17
 8016864:	4a07c83a 	sub	r3,r9,r8
 8016868:	344d803a 	cmpltu	r6,r6,r17
 801686c:	19a7c83a 	sub	r19,r3,r6
 8016870:	3825883a 	mov	r18,r7
 8016874:	983f8a1e 	bne	r19,zero,80166a0 <__alt_data_end+0xfc0166a0>
 8016878:	8809883a 	mov	r4,r17
 801687c:	8018f000 	call	8018f00 <__clzsi2>
 8016880:	10800804 	addi	r2,r2,32
 8016884:	10fffe04 	addi	r3,r2,-8
 8016888:	010007c4 	movi	r4,31
 801688c:	20ff890e 	bge	r4,r3,80166b4 <__alt_data_end+0xfc0166b4>
 8016890:	10bff604 	addi	r2,r2,-40
 8016894:	8884983a 	sll	r2,r17,r2
 8016898:	0023883a 	mov	r17,zero
 801689c:	1c3f8c0e 	bge	r3,r16,80166d0 <__alt_data_end+0xfc0166d0>
 80168a0:	023fe034 	movhi	r8,65408
 80168a4:	423fffc4 	addi	r8,r8,-1
 80168a8:	80e1c83a 	sub	r16,r16,r3
 80168ac:	1210703a 	and	r8,r2,r8
 80168b0:	003f3806 	br	8016594 <__alt_data_end+0xfc016594>
 80168b4:	9007883a 	mov	r3,r18
 80168b8:	0011883a 	mov	r8,zero
 80168bc:	0005883a 	mov	r2,zero
 80168c0:	003f4c06 	br	80165f4 <__alt_data_end+0xfc0165f4>
 80168c4:	498cb03a 	or	r6,r9,r6
 80168c8:	300cc03a 	cmpne	r6,r6,zero
 80168cc:	0007883a 	mov	r3,zero
 80168d0:	003f6806 	br	8016674 <__alt_data_end+0xfc016674>
 80168d4:	20009c1e 	bne	r4,zero,8016b48 <__adddf3+0x630>
 80168d8:	80800044 	addi	r2,r16,1
 80168dc:	1141ffcc 	andi	r5,r2,2047
 80168e0:	01000044 	movi	r4,1
 80168e4:	2140670e 	bge	r4,r5,8016a84 <__adddf3+0x56c>
 80168e8:	0101ffc4 	movi	r4,2047
 80168ec:	11007f26 	beq	r2,r4,8016aec <__adddf3+0x5d4>
 80168f0:	898d883a 	add	r6,r17,r6
 80168f4:	4247883a 	add	r3,r8,r9
 80168f8:	3451803a 	cmpltu	r8,r6,r17
 80168fc:	40d1883a 	add	r8,r8,r3
 8016900:	402297fa 	slli	r17,r8,31
 8016904:	300cd07a 	srli	r6,r6,1
 8016908:	4010d07a 	srli	r8,r8,1
 801690c:	1021883a 	mov	r16,r2
 8016910:	89a2b03a 	or	r17,r17,r6
 8016914:	003f1f06 	br	8016594 <__alt_data_end+0xfc016594>
 8016918:	0081ffc4 	movi	r2,2047
 801691c:	80bf481e 	bne	r16,r2,8016640 <__alt_data_end+0xfc016640>
 8016920:	003f1c06 	br	8016594 <__alt_data_end+0xfc016594>
 8016924:	843ff844 	addi	r16,r16,-31
 8016928:	01000804 	movi	r4,32
 801692c:	1406d83a 	srl	r3,r2,r16
 8016930:	41005026 	beq	r8,r4,8016a74 <__adddf3+0x55c>
 8016934:	01001004 	movi	r4,64
 8016938:	2211c83a 	sub	r8,r4,r8
 801693c:	1204983a 	sll	r2,r2,r8
 8016940:	88a2b03a 	or	r17,r17,r2
 8016944:	8822c03a 	cmpne	r17,r17,zero
 8016948:	1c62b03a 	or	r17,r3,r17
 801694c:	0011883a 	mov	r8,zero
 8016950:	0021883a 	mov	r16,zero
 8016954:	003f7106 	br	801671c <__alt_data_end+0xfc01671c>
 8016958:	193ff804 	addi	r4,r3,-32
 801695c:	00800804 	movi	r2,32
 8016960:	4908d83a 	srl	r4,r9,r4
 8016964:	18804526 	beq	r3,r2,8016a7c <__adddf3+0x564>
 8016968:	00801004 	movi	r2,64
 801696c:	10c5c83a 	sub	r2,r2,r3
 8016970:	4886983a 	sll	r3,r9,r2
 8016974:	198cb03a 	or	r6,r3,r6
 8016978:	300cc03a 	cmpne	r6,r6,zero
 801697c:	218cb03a 	or	r6,r4,r6
 8016980:	0007883a 	mov	r3,zero
 8016984:	003f3b06 	br	8016674 <__alt_data_end+0xfc016674>
 8016988:	80002a26 	beq	r16,zero,8016a34 <__adddf3+0x51c>
 801698c:	0101ffc4 	movi	r4,2047
 8016990:	11006826 	beq	r2,r4,8016b34 <__adddf3+0x61c>
 8016994:	00c7c83a 	sub	r3,zero,r3
 8016998:	42002034 	orhi	r8,r8,128
 801699c:	01000e04 	movi	r4,56
 80169a0:	20c07c16 	blt	r4,r3,8016b94 <__adddf3+0x67c>
 80169a4:	010007c4 	movi	r4,31
 80169a8:	20c0da16 	blt	r4,r3,8016d14 <__adddf3+0x7fc>
 80169ac:	01000804 	movi	r4,32
 80169b0:	20c9c83a 	sub	r4,r4,r3
 80169b4:	4114983a 	sll	r10,r8,r4
 80169b8:	88cad83a 	srl	r5,r17,r3
 80169bc:	8908983a 	sll	r4,r17,r4
 80169c0:	40c6d83a 	srl	r3,r8,r3
 80169c4:	5162b03a 	or	r17,r10,r5
 80169c8:	2008c03a 	cmpne	r4,r4,zero
 80169cc:	8922b03a 	or	r17,r17,r4
 80169d0:	3463c83a 	sub	r17,r6,r17
 80169d4:	48c7c83a 	sub	r3,r9,r3
 80169d8:	344d803a 	cmpltu	r6,r6,r17
 80169dc:	1991c83a 	sub	r8,r3,r6
 80169e0:	1021883a 	mov	r16,r2
 80169e4:	3825883a 	mov	r18,r7
 80169e8:	003f2706 	br	8016688 <__alt_data_end+0xfc016688>
 80169ec:	24d0b03a 	or	r8,r4,r19
 80169f0:	40001b1e 	bne	r8,zero,8016a60 <__adddf3+0x548>
 80169f4:	0005883a 	mov	r2,zero
 80169f8:	0007883a 	mov	r3,zero
 80169fc:	0021883a 	mov	r16,zero
 8016a00:	003f4d06 	br	8016738 <__alt_data_end+0xfc016738>
 8016a04:	008007c4 	movi	r2,31
 8016a08:	11003c16 	blt	r2,r4,8016afc <__adddf3+0x5e4>
 8016a0c:	00800804 	movi	r2,32
 8016a10:	1105c83a 	sub	r2,r2,r4
 8016a14:	488e983a 	sll	r7,r9,r2
 8016a18:	310ad83a 	srl	r5,r6,r4
 8016a1c:	3084983a 	sll	r2,r6,r2
 8016a20:	4912d83a 	srl	r9,r9,r4
 8016a24:	394ab03a 	or	r5,r7,r5
 8016a28:	1004c03a 	cmpne	r2,r2,zero
 8016a2c:	288ab03a 	or	r5,r5,r2
 8016a30:	003f5306 	br	8016780 <__alt_data_end+0xfc016780>
 8016a34:	4448b03a 	or	r4,r8,r17
 8016a38:	20003e26 	beq	r4,zero,8016b34 <__adddf3+0x61c>
 8016a3c:	00c6303a 	nor	r3,zero,r3
 8016a40:	18003a1e 	bne	r3,zero,8016b2c <__adddf3+0x614>
 8016a44:	3463c83a 	sub	r17,r6,r17
 8016a48:	4a07c83a 	sub	r3,r9,r8
 8016a4c:	344d803a 	cmpltu	r6,r6,r17
 8016a50:	1991c83a 	sub	r8,r3,r6
 8016a54:	1021883a 	mov	r16,r2
 8016a58:	3825883a 	mov	r18,r7
 8016a5c:	003f0a06 	br	8016688 <__alt_data_end+0xfc016688>
 8016a60:	2023883a 	mov	r17,r4
 8016a64:	003f0d06 	br	801669c <__alt_data_end+0xfc01669c>
 8016a68:	0081ffc4 	movi	r2,2047
 8016a6c:	80bf3f1e 	bne	r16,r2,801676c <__alt_data_end+0xfc01676c>
 8016a70:	003ec806 	br	8016594 <__alt_data_end+0xfc016594>
 8016a74:	0005883a 	mov	r2,zero
 8016a78:	003fb106 	br	8016940 <__alt_data_end+0xfc016940>
 8016a7c:	0007883a 	mov	r3,zero
 8016a80:	003fbc06 	br	8016974 <__alt_data_end+0xfc016974>
 8016a84:	4444b03a 	or	r2,r8,r17
 8016a88:	8000871e 	bne	r16,zero,8016ca8 <__adddf3+0x790>
 8016a8c:	1000ba26 	beq	r2,zero,8016d78 <__adddf3+0x860>
 8016a90:	4984b03a 	or	r2,r9,r6
 8016a94:	103ebf26 	beq	r2,zero,8016594 <__alt_data_end+0xfc016594>
 8016a98:	8985883a 	add	r2,r17,r6
 8016a9c:	4247883a 	add	r3,r8,r9
 8016aa0:	1451803a 	cmpltu	r8,r2,r17
 8016aa4:	40d1883a 	add	r8,r8,r3
 8016aa8:	40c0202c 	andhi	r3,r8,128
 8016aac:	1023883a 	mov	r17,r2
 8016ab0:	183f1a26 	beq	r3,zero,801671c <__alt_data_end+0xfc01671c>
 8016ab4:	00bfe034 	movhi	r2,65408
 8016ab8:	10bfffc4 	addi	r2,r2,-1
 8016abc:	2021883a 	mov	r16,r4
 8016ac0:	4090703a 	and	r8,r8,r2
 8016ac4:	003eb306 	br	8016594 <__alt_data_end+0xfc016594>
 8016ac8:	4444b03a 	or	r2,r8,r17
 8016acc:	8000291e 	bne	r16,zero,8016b74 <__adddf3+0x65c>
 8016ad0:	10004b1e 	bne	r2,zero,8016c00 <__adddf3+0x6e8>
 8016ad4:	4990b03a 	or	r8,r9,r6
 8016ad8:	40008b26 	beq	r8,zero,8016d08 <__adddf3+0x7f0>
 8016adc:	4811883a 	mov	r8,r9
 8016ae0:	3023883a 	mov	r17,r6
 8016ae4:	3825883a 	mov	r18,r7
 8016ae8:	003eaa06 	br	8016594 <__alt_data_end+0xfc016594>
 8016aec:	1021883a 	mov	r16,r2
 8016af0:	0011883a 	mov	r8,zero
 8016af4:	0005883a 	mov	r2,zero
 8016af8:	003f0f06 	br	8016738 <__alt_data_end+0xfc016738>
 8016afc:	217ff804 	addi	r5,r4,-32
 8016b00:	00800804 	movi	r2,32
 8016b04:	494ad83a 	srl	r5,r9,r5
 8016b08:	20807d26 	beq	r4,r2,8016d00 <__adddf3+0x7e8>
 8016b0c:	00801004 	movi	r2,64
 8016b10:	1109c83a 	sub	r4,r2,r4
 8016b14:	4912983a 	sll	r9,r9,r4
 8016b18:	498cb03a 	or	r6,r9,r6
 8016b1c:	300cc03a 	cmpne	r6,r6,zero
 8016b20:	298ab03a 	or	r5,r5,r6
 8016b24:	0013883a 	mov	r9,zero
 8016b28:	003f1506 	br	8016780 <__alt_data_end+0xfc016780>
 8016b2c:	0101ffc4 	movi	r4,2047
 8016b30:	113f9a1e 	bne	r2,r4,801699c <__alt_data_end+0xfc01699c>
 8016b34:	4811883a 	mov	r8,r9
 8016b38:	3023883a 	mov	r17,r6
 8016b3c:	1021883a 	mov	r16,r2
 8016b40:	3825883a 	mov	r18,r7
 8016b44:	003e9306 	br	8016594 <__alt_data_end+0xfc016594>
 8016b48:	8000161e 	bne	r16,zero,8016ba4 <__adddf3+0x68c>
 8016b4c:	444ab03a 	or	r5,r8,r17
 8016b50:	28005126 	beq	r5,zero,8016c98 <__adddf3+0x780>
 8016b54:	0108303a 	nor	r4,zero,r4
 8016b58:	20004d1e 	bne	r4,zero,8016c90 <__adddf3+0x778>
 8016b5c:	89a3883a 	add	r17,r17,r6
 8016b60:	4253883a 	add	r9,r8,r9
 8016b64:	898d803a 	cmpltu	r6,r17,r6
 8016b68:	3251883a 	add	r8,r6,r9
 8016b6c:	1021883a 	mov	r16,r2
 8016b70:	003f0806 	br	8016794 <__alt_data_end+0xfc016794>
 8016b74:	1000301e 	bne	r2,zero,8016c38 <__adddf3+0x720>
 8016b78:	4984b03a 	or	r2,r9,r6
 8016b7c:	10007126 	beq	r2,zero,8016d44 <__adddf3+0x82c>
 8016b80:	4811883a 	mov	r8,r9
 8016b84:	3023883a 	mov	r17,r6
 8016b88:	3825883a 	mov	r18,r7
 8016b8c:	0401ffc4 	movi	r16,2047
 8016b90:	003e8006 	br	8016594 <__alt_data_end+0xfc016594>
 8016b94:	4462b03a 	or	r17,r8,r17
 8016b98:	8822c03a 	cmpne	r17,r17,zero
 8016b9c:	0007883a 	mov	r3,zero
 8016ba0:	003f8b06 	br	80169d0 <__alt_data_end+0xfc0169d0>
 8016ba4:	0141ffc4 	movi	r5,2047
 8016ba8:	11403b26 	beq	r2,r5,8016c98 <__adddf3+0x780>
 8016bac:	0109c83a 	sub	r4,zero,r4
 8016bb0:	42002034 	orhi	r8,r8,128
 8016bb4:	01400e04 	movi	r5,56
 8016bb8:	29006716 	blt	r5,r4,8016d58 <__adddf3+0x840>
 8016bbc:	014007c4 	movi	r5,31
 8016bc0:	29007016 	blt	r5,r4,8016d84 <__adddf3+0x86c>
 8016bc4:	01400804 	movi	r5,32
 8016bc8:	290bc83a 	sub	r5,r5,r4
 8016bcc:	4154983a 	sll	r10,r8,r5
 8016bd0:	890ed83a 	srl	r7,r17,r4
 8016bd4:	894a983a 	sll	r5,r17,r5
 8016bd8:	4108d83a 	srl	r4,r8,r4
 8016bdc:	51e2b03a 	or	r17,r10,r7
 8016be0:	280ac03a 	cmpne	r5,r5,zero
 8016be4:	8962b03a 	or	r17,r17,r5
 8016be8:	89a3883a 	add	r17,r17,r6
 8016bec:	2253883a 	add	r9,r4,r9
 8016bf0:	898d803a 	cmpltu	r6,r17,r6
 8016bf4:	3251883a 	add	r8,r6,r9
 8016bf8:	1021883a 	mov	r16,r2
 8016bfc:	003ee506 	br	8016794 <__alt_data_end+0xfc016794>
 8016c00:	4984b03a 	or	r2,r9,r6
 8016c04:	103e6326 	beq	r2,zero,8016594 <__alt_data_end+0xfc016594>
 8016c08:	8987c83a 	sub	r3,r17,r6
 8016c0c:	88c9803a 	cmpltu	r4,r17,r3
 8016c10:	4245c83a 	sub	r2,r8,r9
 8016c14:	1105c83a 	sub	r2,r2,r4
 8016c18:	1100202c 	andhi	r4,r2,128
 8016c1c:	203ebb26 	beq	r4,zero,801670c <__alt_data_end+0xfc01670c>
 8016c20:	3463c83a 	sub	r17,r6,r17
 8016c24:	4a07c83a 	sub	r3,r9,r8
 8016c28:	344d803a 	cmpltu	r6,r6,r17
 8016c2c:	1991c83a 	sub	r8,r3,r6
 8016c30:	3825883a 	mov	r18,r7
 8016c34:	003e5706 	br	8016594 <__alt_data_end+0xfc016594>
 8016c38:	4984b03a 	or	r2,r9,r6
 8016c3c:	10002e26 	beq	r2,zero,8016cf8 <__adddf3+0x7e0>
 8016c40:	4004d0fa 	srli	r2,r8,3
 8016c44:	8822d0fa 	srli	r17,r17,3
 8016c48:	4010977a 	slli	r8,r8,29
 8016c4c:	10c0022c 	andhi	r3,r2,8
 8016c50:	4462b03a 	or	r17,r8,r17
 8016c54:	18000826 	beq	r3,zero,8016c78 <__adddf3+0x760>
 8016c58:	4808d0fa 	srli	r4,r9,3
 8016c5c:	20c0022c 	andhi	r3,r4,8
 8016c60:	1800051e 	bne	r3,zero,8016c78 <__adddf3+0x760>
 8016c64:	300cd0fa 	srli	r6,r6,3
 8016c68:	4806977a 	slli	r3,r9,29
 8016c6c:	2005883a 	mov	r2,r4
 8016c70:	3825883a 	mov	r18,r7
 8016c74:	19a2b03a 	or	r17,r3,r6
 8016c78:	8810d77a 	srli	r8,r17,29
 8016c7c:	100490fa 	slli	r2,r2,3
 8016c80:	882290fa 	slli	r17,r17,3
 8016c84:	0401ffc4 	movi	r16,2047
 8016c88:	4090b03a 	or	r8,r8,r2
 8016c8c:	003e4106 	br	8016594 <__alt_data_end+0xfc016594>
 8016c90:	0141ffc4 	movi	r5,2047
 8016c94:	117fc71e 	bne	r2,r5,8016bb4 <__alt_data_end+0xfc016bb4>
 8016c98:	4811883a 	mov	r8,r9
 8016c9c:	3023883a 	mov	r17,r6
 8016ca0:	1021883a 	mov	r16,r2
 8016ca4:	003e3b06 	br	8016594 <__alt_data_end+0xfc016594>
 8016ca8:	10002f26 	beq	r2,zero,8016d68 <__adddf3+0x850>
 8016cac:	4984b03a 	or	r2,r9,r6
 8016cb0:	10001126 	beq	r2,zero,8016cf8 <__adddf3+0x7e0>
 8016cb4:	4004d0fa 	srli	r2,r8,3
 8016cb8:	8822d0fa 	srli	r17,r17,3
 8016cbc:	4010977a 	slli	r8,r8,29
 8016cc0:	10c0022c 	andhi	r3,r2,8
 8016cc4:	4462b03a 	or	r17,r8,r17
 8016cc8:	183feb26 	beq	r3,zero,8016c78 <__alt_data_end+0xfc016c78>
 8016ccc:	4808d0fa 	srli	r4,r9,3
 8016cd0:	20c0022c 	andhi	r3,r4,8
 8016cd4:	183fe81e 	bne	r3,zero,8016c78 <__alt_data_end+0xfc016c78>
 8016cd8:	300cd0fa 	srli	r6,r6,3
 8016cdc:	4806977a 	slli	r3,r9,29
 8016ce0:	2005883a 	mov	r2,r4
 8016ce4:	19a2b03a 	or	r17,r3,r6
 8016ce8:	003fe306 	br	8016c78 <__alt_data_end+0xfc016c78>
 8016cec:	0011883a 	mov	r8,zero
 8016cf0:	0005883a 	mov	r2,zero
 8016cf4:	003e3f06 	br	80165f4 <__alt_data_end+0xfc0165f4>
 8016cf8:	0401ffc4 	movi	r16,2047
 8016cfc:	003e2506 	br	8016594 <__alt_data_end+0xfc016594>
 8016d00:	0013883a 	mov	r9,zero
 8016d04:	003f8406 	br	8016b18 <__alt_data_end+0xfc016b18>
 8016d08:	0005883a 	mov	r2,zero
 8016d0c:	0007883a 	mov	r3,zero
 8016d10:	003e8906 	br	8016738 <__alt_data_end+0xfc016738>
 8016d14:	197ff804 	addi	r5,r3,-32
 8016d18:	01000804 	movi	r4,32
 8016d1c:	414ad83a 	srl	r5,r8,r5
 8016d20:	19002426 	beq	r3,r4,8016db4 <__adddf3+0x89c>
 8016d24:	01001004 	movi	r4,64
 8016d28:	20c7c83a 	sub	r3,r4,r3
 8016d2c:	40c6983a 	sll	r3,r8,r3
 8016d30:	1c46b03a 	or	r3,r3,r17
 8016d34:	1806c03a 	cmpne	r3,r3,zero
 8016d38:	28e2b03a 	or	r17,r5,r3
 8016d3c:	0007883a 	mov	r3,zero
 8016d40:	003f2306 	br	80169d0 <__alt_data_end+0xfc0169d0>
 8016d44:	0007883a 	mov	r3,zero
 8016d48:	5811883a 	mov	r8,r11
 8016d4c:	00bfffc4 	movi	r2,-1
 8016d50:	0401ffc4 	movi	r16,2047
 8016d54:	003e7806 	br	8016738 <__alt_data_end+0xfc016738>
 8016d58:	4462b03a 	or	r17,r8,r17
 8016d5c:	8822c03a 	cmpne	r17,r17,zero
 8016d60:	0009883a 	mov	r4,zero
 8016d64:	003fa006 	br	8016be8 <__alt_data_end+0xfc016be8>
 8016d68:	4811883a 	mov	r8,r9
 8016d6c:	3023883a 	mov	r17,r6
 8016d70:	0401ffc4 	movi	r16,2047
 8016d74:	003e0706 	br	8016594 <__alt_data_end+0xfc016594>
 8016d78:	4811883a 	mov	r8,r9
 8016d7c:	3023883a 	mov	r17,r6
 8016d80:	003e0406 	br	8016594 <__alt_data_end+0xfc016594>
 8016d84:	21fff804 	addi	r7,r4,-32
 8016d88:	01400804 	movi	r5,32
 8016d8c:	41ced83a 	srl	r7,r8,r7
 8016d90:	21400a26 	beq	r4,r5,8016dbc <__adddf3+0x8a4>
 8016d94:	01401004 	movi	r5,64
 8016d98:	2909c83a 	sub	r4,r5,r4
 8016d9c:	4108983a 	sll	r4,r8,r4
 8016da0:	2448b03a 	or	r4,r4,r17
 8016da4:	2008c03a 	cmpne	r4,r4,zero
 8016da8:	3922b03a 	or	r17,r7,r4
 8016dac:	0009883a 	mov	r4,zero
 8016db0:	003f8d06 	br	8016be8 <__alt_data_end+0xfc016be8>
 8016db4:	0007883a 	mov	r3,zero
 8016db8:	003fdd06 	br	8016d30 <__alt_data_end+0xfc016d30>
 8016dbc:	0009883a 	mov	r4,zero
 8016dc0:	003ff706 	br	8016da0 <__alt_data_end+0xfc016da0>

08016dc4 <__divdf3>:
 8016dc4:	defff004 	addi	sp,sp,-64
 8016dc8:	dc800815 	stw	r18,32(sp)
 8016dcc:	2824d53a 	srli	r18,r5,20
 8016dd0:	dd800c15 	stw	r22,48(sp)
 8016dd4:	282cd7fa 	srli	r22,r5,31
 8016dd8:	dc000615 	stw	r16,24(sp)
 8016ddc:	04000434 	movhi	r16,16
 8016de0:	843fffc4 	addi	r16,r16,-1
 8016de4:	dfc00f15 	stw	ra,60(sp)
 8016de8:	df000e15 	stw	fp,56(sp)
 8016dec:	ddc00d15 	stw	r23,52(sp)
 8016df0:	dd400b15 	stw	r21,44(sp)
 8016df4:	dd000a15 	stw	r20,40(sp)
 8016df8:	dcc00915 	stw	r19,36(sp)
 8016dfc:	dc400715 	stw	r17,28(sp)
 8016e00:	9481ffcc 	andi	r18,r18,2047
 8016e04:	2c20703a 	and	r16,r5,r16
 8016e08:	b2003fcc 	andi	r8,r22,255
 8016e0c:	90006126 	beq	r18,zero,8016f94 <__divdf3+0x1d0>
 8016e10:	0081ffc4 	movi	r2,2047
 8016e14:	202b883a 	mov	r21,r4
 8016e18:	90803726 	beq	r18,r2,8016ef8 <__divdf3+0x134>
 8016e1c:	80800434 	orhi	r2,r16,16
 8016e20:	100490fa 	slli	r2,r2,3
 8016e24:	2020d77a 	srli	r16,r4,29
 8016e28:	202a90fa 	slli	r21,r4,3
 8016e2c:	94bf0044 	addi	r18,r18,-1023
 8016e30:	80a0b03a 	or	r16,r16,r2
 8016e34:	0013883a 	mov	r9,zero
 8016e38:	000b883a 	mov	r5,zero
 8016e3c:	3806d53a 	srli	r3,r7,20
 8016e40:	382ed7fa 	srli	r23,r7,31
 8016e44:	04400434 	movhi	r17,16
 8016e48:	8c7fffc4 	addi	r17,r17,-1
 8016e4c:	18c1ffcc 	andi	r3,r3,2047
 8016e50:	3029883a 	mov	r20,r6
 8016e54:	3c62703a 	and	r17,r7,r17
 8016e58:	bf003fcc 	andi	fp,r23,255
 8016e5c:	18006e26 	beq	r3,zero,8017018 <__divdf3+0x254>
 8016e60:	0081ffc4 	movi	r2,2047
 8016e64:	18806626 	beq	r3,r2,8017000 <__divdf3+0x23c>
 8016e68:	88800434 	orhi	r2,r17,16
 8016e6c:	100490fa 	slli	r2,r2,3
 8016e70:	3022d77a 	srli	r17,r6,29
 8016e74:	302890fa 	slli	r20,r6,3
 8016e78:	18ff0044 	addi	r3,r3,-1023
 8016e7c:	88a2b03a 	or	r17,r17,r2
 8016e80:	000f883a 	mov	r7,zero
 8016e84:	b5e6f03a 	xor	r19,r22,r23
 8016e88:	3a4cb03a 	or	r6,r7,r9
 8016e8c:	008003c4 	movi	r2,15
 8016e90:	9809883a 	mov	r4,r19
 8016e94:	90c7c83a 	sub	r3,r18,r3
 8016e98:	9cc03fcc 	andi	r19,r19,255
 8016e9c:	11809636 	bltu	r2,r6,80170f8 <__divdf3+0x334>
 8016ea0:	300c90ba 	slli	r6,r6,2
 8016ea4:	00820074 	movhi	r2,2049
 8016ea8:	109bae04 	addi	r2,r2,28344
 8016eac:	308d883a 	add	r6,r6,r2
 8016eb0:	30800017 	ldw	r2,0(r6)
 8016eb4:	1000683a 	jmp	r2
 8016eb8:	080170f8 	rdprs	zero,at,1475
 8016ebc:	08016f30 	cmpltui	zero,at,1468
 8016ec0:	080170e8 	cmpgeui	zero,at,1475
 8016ec4:	08016f24 	muli	zero,at,1468
 8016ec8:	080170e8 	cmpgeui	zero,at,1475
 8016ecc:	080170bc 	xorhi	zero,at,1474
 8016ed0:	080170e8 	cmpgeui	zero,at,1475
 8016ed4:	08016f24 	muli	zero,at,1468
 8016ed8:	08016f30 	cmpltui	zero,at,1468
 8016edc:	08016f30 	cmpltui	zero,at,1468
 8016ee0:	080170bc 	xorhi	zero,at,1474
 8016ee4:	08016f24 	muli	zero,at,1468
 8016ee8:	08016f14 	ori	zero,at,1468
 8016eec:	08016f14 	ori	zero,at,1468
 8016ef0:	08016f14 	ori	zero,at,1468
 8016ef4:	08017480 	call	801748 <__alt_mem_onchip_memory+0x801748>
 8016ef8:	2404b03a 	or	r2,r4,r16
 8016efc:	10006c1e 	bne	r2,zero,80170b0 <__divdf3+0x2ec>
 8016f00:	02400204 	movi	r9,8
 8016f04:	0021883a 	mov	r16,zero
 8016f08:	002b883a 	mov	r21,zero
 8016f0c:	01400084 	movi	r5,2
 8016f10:	003fca06 	br	8016e3c <__alt_data_end+0xfc016e3c>
 8016f14:	8023883a 	mov	r17,r16
 8016f18:	a829883a 	mov	r20,r21
 8016f1c:	4039883a 	mov	fp,r8
 8016f20:	280f883a 	mov	r7,r5
 8016f24:	00800084 	movi	r2,2
 8016f28:	3881601e 	bne	r7,r2,80174ac <__divdf3+0x6e8>
 8016f2c:	e027883a 	mov	r19,fp
 8016f30:	9900004c 	andi	r4,r19,1
 8016f34:	0081ffc4 	movi	r2,2047
 8016f38:	0021883a 	mov	r16,zero
 8016f3c:	002b883a 	mov	r21,zero
 8016f40:	1004953a 	slli	r2,r2,20
 8016f44:	20c03fcc 	andi	r3,r4,255
 8016f48:	01400434 	movhi	r5,16
 8016f4c:	297fffc4 	addi	r5,r5,-1
 8016f50:	180697fa 	slli	r3,r3,31
 8016f54:	8160703a 	and	r16,r16,r5
 8016f58:	80a0b03a 	or	r16,r16,r2
 8016f5c:	80c6b03a 	or	r3,r16,r3
 8016f60:	a805883a 	mov	r2,r21
 8016f64:	dfc00f17 	ldw	ra,60(sp)
 8016f68:	df000e17 	ldw	fp,56(sp)
 8016f6c:	ddc00d17 	ldw	r23,52(sp)
 8016f70:	dd800c17 	ldw	r22,48(sp)
 8016f74:	dd400b17 	ldw	r21,44(sp)
 8016f78:	dd000a17 	ldw	r20,40(sp)
 8016f7c:	dcc00917 	ldw	r19,36(sp)
 8016f80:	dc800817 	ldw	r18,32(sp)
 8016f84:	dc400717 	ldw	r17,28(sp)
 8016f88:	dc000617 	ldw	r16,24(sp)
 8016f8c:	dec01004 	addi	sp,sp,64
 8016f90:	f800283a 	ret
 8016f94:	2404b03a 	or	r2,r4,r16
 8016f98:	2023883a 	mov	r17,r4
 8016f9c:	10003f26 	beq	r2,zero,801709c <__divdf3+0x2d8>
 8016fa0:	80015e26 	beq	r16,zero,801751c <__divdf3+0x758>
 8016fa4:	8009883a 	mov	r4,r16
 8016fa8:	d9800215 	stw	r6,8(sp)
 8016fac:	d9c00515 	stw	r7,20(sp)
 8016fb0:	da000415 	stw	r8,16(sp)
 8016fb4:	8018f000 	call	8018f00 <__clzsi2>
 8016fb8:	d9800217 	ldw	r6,8(sp)
 8016fbc:	d9c00517 	ldw	r7,20(sp)
 8016fc0:	da000417 	ldw	r8,16(sp)
 8016fc4:	113ffd44 	addi	r4,r2,-11
 8016fc8:	00c00704 	movi	r3,28
 8016fcc:	19014f16 	blt	r3,r4,801750c <__divdf3+0x748>
 8016fd0:	00c00744 	movi	r3,29
 8016fd4:	157ffe04 	addi	r21,r2,-8
 8016fd8:	1907c83a 	sub	r3,r3,r4
 8016fdc:	8560983a 	sll	r16,r16,r21
 8016fe0:	88c6d83a 	srl	r3,r17,r3
 8016fe4:	8d6a983a 	sll	r21,r17,r21
 8016fe8:	1c20b03a 	or	r16,r3,r16
 8016fec:	1080fcc4 	addi	r2,r2,1011
 8016ff0:	00a5c83a 	sub	r18,zero,r2
 8016ff4:	0013883a 	mov	r9,zero
 8016ff8:	000b883a 	mov	r5,zero
 8016ffc:	003f8f06 	br	8016e3c <__alt_data_end+0xfc016e3c>
 8017000:	3444b03a 	or	r2,r6,r17
 8017004:	1000231e 	bne	r2,zero,8017094 <__divdf3+0x2d0>
 8017008:	0023883a 	mov	r17,zero
 801700c:	0029883a 	mov	r20,zero
 8017010:	01c00084 	movi	r7,2
 8017014:	003f9b06 	br	8016e84 <__alt_data_end+0xfc016e84>
 8017018:	3444b03a 	or	r2,r6,r17
 801701c:	10001926 	beq	r2,zero,8017084 <__divdf3+0x2c0>
 8017020:	88014b26 	beq	r17,zero,8017550 <__divdf3+0x78c>
 8017024:	8809883a 	mov	r4,r17
 8017028:	d9400115 	stw	r5,4(sp)
 801702c:	d9800215 	stw	r6,8(sp)
 8017030:	da000415 	stw	r8,16(sp)
 8017034:	da400315 	stw	r9,12(sp)
 8017038:	8018f000 	call	8018f00 <__clzsi2>
 801703c:	d9400117 	ldw	r5,4(sp)
 8017040:	d9800217 	ldw	r6,8(sp)
 8017044:	da000417 	ldw	r8,16(sp)
 8017048:	da400317 	ldw	r9,12(sp)
 801704c:	113ffd44 	addi	r4,r2,-11
 8017050:	00c00704 	movi	r3,28
 8017054:	19013a16 	blt	r3,r4,8017540 <__divdf3+0x77c>
 8017058:	00c00744 	movi	r3,29
 801705c:	153ffe04 	addi	r20,r2,-8
 8017060:	1907c83a 	sub	r3,r3,r4
 8017064:	8d22983a 	sll	r17,r17,r20
 8017068:	30c6d83a 	srl	r3,r6,r3
 801706c:	3528983a 	sll	r20,r6,r20
 8017070:	1c62b03a 	or	r17,r3,r17
 8017074:	1080fcc4 	addi	r2,r2,1011
 8017078:	0087c83a 	sub	r3,zero,r2
 801707c:	000f883a 	mov	r7,zero
 8017080:	003f8006 	br	8016e84 <__alt_data_end+0xfc016e84>
 8017084:	0023883a 	mov	r17,zero
 8017088:	0029883a 	mov	r20,zero
 801708c:	01c00044 	movi	r7,1
 8017090:	003f7c06 	br	8016e84 <__alt_data_end+0xfc016e84>
 8017094:	01c000c4 	movi	r7,3
 8017098:	003f7a06 	br	8016e84 <__alt_data_end+0xfc016e84>
 801709c:	02400104 	movi	r9,4
 80170a0:	0021883a 	mov	r16,zero
 80170a4:	002b883a 	mov	r21,zero
 80170a8:	01400044 	movi	r5,1
 80170ac:	003f6306 	br	8016e3c <__alt_data_end+0xfc016e3c>
 80170b0:	02400304 	movi	r9,12
 80170b4:	014000c4 	movi	r5,3
 80170b8:	003f6006 	br	8016e3c <__alt_data_end+0xfc016e3c>
 80170bc:	04000434 	movhi	r16,16
 80170c0:	0009883a 	mov	r4,zero
 80170c4:	843fffc4 	addi	r16,r16,-1
 80170c8:	057fffc4 	movi	r21,-1
 80170cc:	0081ffc4 	movi	r2,2047
 80170d0:	003f9b06 	br	8016f40 <__alt_data_end+0xfc016f40>
 80170d4:	00c00044 	movi	r3,1
 80170d8:	1887c83a 	sub	r3,r3,r2
 80170dc:	01000e04 	movi	r4,56
 80170e0:	20c1530e 	bge	r4,r3,8017630 <__divdf3+0x86c>
 80170e4:	9900004c 	andi	r4,r19,1
 80170e8:	0005883a 	mov	r2,zero
 80170ec:	0021883a 	mov	r16,zero
 80170f0:	002b883a 	mov	r21,zero
 80170f4:	003f9206 	br	8016f40 <__alt_data_end+0xfc016f40>
 80170f8:	8c012e36 	bltu	r17,r16,80175b4 <__divdf3+0x7f0>
 80170fc:	84412c26 	beq	r16,r17,80175b0 <__divdf3+0x7ec>
 8017100:	a82f883a 	mov	r23,r21
 8017104:	18ffffc4 	addi	r3,r3,-1
 8017108:	002b883a 	mov	r21,zero
 801710c:	a004d63a 	srli	r2,r20,24
 8017110:	8822923a 	slli	r17,r17,8
 8017114:	a028923a 	slli	r20,r20,8
 8017118:	8009883a 	mov	r4,r16
 801711c:	88acb03a 	or	r22,r17,r2
 8017120:	dd000015 	stw	r20,0(sp)
 8017124:	b028d43a 	srli	r20,r22,16
 8017128:	d8c00215 	stw	r3,8(sp)
 801712c:	b4bfffcc 	andi	r18,r22,65535
 8017130:	a00b883a 	mov	r5,r20
 8017134:	80028380 	call	8002838 <__udivsi3>
 8017138:	100b883a 	mov	r5,r2
 801713c:	9009883a 	mov	r4,r18
 8017140:	1023883a 	mov	r17,r2
 8017144:	80028f40 	call	80028f4 <__mulsi3>
 8017148:	8009883a 	mov	r4,r16
 801714c:	a00b883a 	mov	r5,r20
 8017150:	1039883a 	mov	fp,r2
 8017154:	800289c0 	call	800289c <__umodsi3>
 8017158:	1004943a 	slli	r2,r2,16
 801715c:	b808d43a 	srli	r4,r23,16
 8017160:	d8c00217 	ldw	r3,8(sp)
 8017164:	2084b03a 	or	r2,r4,r2
 8017168:	1700062e 	bgeu	r2,fp,8017184 <__divdf3+0x3c0>
 801716c:	1585883a 	add	r2,r2,r22
 8017170:	893fffc4 	addi	r4,r17,-1
 8017174:	15811d36 	bltu	r2,r22,80175ec <__divdf3+0x828>
 8017178:	17011c2e 	bgeu	r2,fp,80175ec <__divdf3+0x828>
 801717c:	8c7fff84 	addi	r17,r17,-2
 8017180:	1585883a 	add	r2,r2,r22
 8017184:	1739c83a 	sub	fp,r2,fp
 8017188:	a00b883a 	mov	r5,r20
 801718c:	e009883a 	mov	r4,fp
 8017190:	d8c00215 	stw	r3,8(sp)
 8017194:	80028380 	call	8002838 <__udivsi3>
 8017198:	100b883a 	mov	r5,r2
 801719c:	9009883a 	mov	r4,r18
 80171a0:	1021883a 	mov	r16,r2
 80171a4:	80028f40 	call	80028f4 <__mulsi3>
 80171a8:	a00b883a 	mov	r5,r20
 80171ac:	e009883a 	mov	r4,fp
 80171b0:	d8800415 	stw	r2,16(sp)
 80171b4:	800289c0 	call	800289c <__umodsi3>
 80171b8:	1004943a 	slli	r2,r2,16
 80171bc:	da000417 	ldw	r8,16(sp)
 80171c0:	bdffffcc 	andi	r23,r23,65535
 80171c4:	b884b03a 	or	r2,r23,r2
 80171c8:	d8c00217 	ldw	r3,8(sp)
 80171cc:	1200062e 	bgeu	r2,r8,80171e8 <__divdf3+0x424>
 80171d0:	1585883a 	add	r2,r2,r22
 80171d4:	813fffc4 	addi	r4,r16,-1
 80171d8:	15810236 	bltu	r2,r22,80175e4 <__divdf3+0x820>
 80171dc:	1201012e 	bgeu	r2,r8,80175e4 <__divdf3+0x820>
 80171e0:	843fff84 	addi	r16,r16,-2
 80171e4:	1585883a 	add	r2,r2,r22
 80171e8:	8822943a 	slli	r17,r17,16
 80171ec:	d9800017 	ldw	r6,0(sp)
 80171f0:	1211c83a 	sub	r8,r2,r8
 80171f4:	8c22b03a 	or	r17,r17,r16
 80171f8:	373fffcc 	andi	fp,r6,65535
 80171fc:	8abfffcc 	andi	r10,r17,65535
 8017200:	8820d43a 	srli	r16,r17,16
 8017204:	5009883a 	mov	r4,r10
 8017208:	e00b883a 	mov	r5,fp
 801720c:	302ed43a 	srli	r23,r6,16
 8017210:	d8c00215 	stw	r3,8(sp)
 8017214:	da000415 	stw	r8,16(sp)
 8017218:	da800115 	stw	r10,4(sp)
 801721c:	80028f40 	call	80028f4 <__mulsi3>
 8017220:	800b883a 	mov	r5,r16
 8017224:	e009883a 	mov	r4,fp
 8017228:	d8800515 	stw	r2,20(sp)
 801722c:	80028f40 	call	80028f4 <__mulsi3>
 8017230:	8009883a 	mov	r4,r16
 8017234:	b80b883a 	mov	r5,r23
 8017238:	d8800315 	stw	r2,12(sp)
 801723c:	80028f40 	call	80028f4 <__mulsi3>
 8017240:	da800117 	ldw	r10,4(sp)
 8017244:	b80b883a 	mov	r5,r23
 8017248:	1021883a 	mov	r16,r2
 801724c:	5009883a 	mov	r4,r10
 8017250:	80028f40 	call	80028f4 <__mulsi3>
 8017254:	d9c00517 	ldw	r7,20(sp)
 8017258:	da400317 	ldw	r9,12(sp)
 801725c:	d8c00217 	ldw	r3,8(sp)
 8017260:	3808d43a 	srli	r4,r7,16
 8017264:	1245883a 	add	r2,r2,r9
 8017268:	da000417 	ldw	r8,16(sp)
 801726c:	2085883a 	add	r2,r4,r2
 8017270:	1240022e 	bgeu	r2,r9,801727c <__divdf3+0x4b8>
 8017274:	01000074 	movhi	r4,1
 8017278:	8121883a 	add	r16,r16,r4
 801727c:	1008d43a 	srli	r4,r2,16
 8017280:	1004943a 	slli	r2,r2,16
 8017284:	39ffffcc 	andi	r7,r7,65535
 8017288:	2409883a 	add	r4,r4,r16
 801728c:	11c5883a 	add	r2,r2,r7
 8017290:	4100bb36 	bltu	r8,r4,8017580 <__divdf3+0x7bc>
 8017294:	4100d726 	beq	r8,r4,80175f4 <__divdf3+0x830>
 8017298:	4109c83a 	sub	r4,r8,r4
 801729c:	a8a1c83a 	sub	r16,r21,r2
 80172a0:	ac2b803a 	cmpltu	r21,r21,r16
 80172a4:	256bc83a 	sub	r21,r4,r21
 80172a8:	b540d926 	beq	r22,r21,8017610 <__divdf3+0x84c>
 80172ac:	a00b883a 	mov	r5,r20
 80172b0:	a809883a 	mov	r4,r21
 80172b4:	d8c00215 	stw	r3,8(sp)
 80172b8:	80028380 	call	8002838 <__udivsi3>
 80172bc:	100b883a 	mov	r5,r2
 80172c0:	9009883a 	mov	r4,r18
 80172c4:	d8800515 	stw	r2,20(sp)
 80172c8:	80028f40 	call	80028f4 <__mulsi3>
 80172cc:	a809883a 	mov	r4,r21
 80172d0:	a00b883a 	mov	r5,r20
 80172d4:	d8800415 	stw	r2,16(sp)
 80172d8:	800289c0 	call	800289c <__umodsi3>
 80172dc:	1004943a 	slli	r2,r2,16
 80172e0:	8008d43a 	srli	r4,r16,16
 80172e4:	da000417 	ldw	r8,16(sp)
 80172e8:	d8c00217 	ldw	r3,8(sp)
 80172ec:	2084b03a 	or	r2,r4,r2
 80172f0:	d9c00517 	ldw	r7,20(sp)
 80172f4:	1200062e 	bgeu	r2,r8,8017310 <__divdf3+0x54c>
 80172f8:	1585883a 	add	r2,r2,r22
 80172fc:	393fffc4 	addi	r4,r7,-1
 8017300:	1580c536 	bltu	r2,r22,8017618 <__divdf3+0x854>
 8017304:	1200c42e 	bgeu	r2,r8,8017618 <__divdf3+0x854>
 8017308:	39ffff84 	addi	r7,r7,-2
 801730c:	1585883a 	add	r2,r2,r22
 8017310:	122bc83a 	sub	r21,r2,r8
 8017314:	a00b883a 	mov	r5,r20
 8017318:	a809883a 	mov	r4,r21
 801731c:	d8c00215 	stw	r3,8(sp)
 8017320:	d9c00515 	stw	r7,20(sp)
 8017324:	80028380 	call	8002838 <__udivsi3>
 8017328:	9009883a 	mov	r4,r18
 801732c:	100b883a 	mov	r5,r2
 8017330:	d8800415 	stw	r2,16(sp)
 8017334:	80028f40 	call	80028f4 <__mulsi3>
 8017338:	a809883a 	mov	r4,r21
 801733c:	a00b883a 	mov	r5,r20
 8017340:	1025883a 	mov	r18,r2
 8017344:	800289c0 	call	800289c <__umodsi3>
 8017348:	1004943a 	slli	r2,r2,16
 801734c:	813fffcc 	andi	r4,r16,65535
 8017350:	d8c00217 	ldw	r3,8(sp)
 8017354:	20a0b03a 	or	r16,r4,r2
 8017358:	d9c00517 	ldw	r7,20(sp)
 801735c:	da000417 	ldw	r8,16(sp)
 8017360:	8480062e 	bgeu	r16,r18,801737c <__divdf3+0x5b8>
 8017364:	85a1883a 	add	r16,r16,r22
 8017368:	40bfffc4 	addi	r2,r8,-1
 801736c:	8580ac36 	bltu	r16,r22,8017620 <__divdf3+0x85c>
 8017370:	8480ab2e 	bgeu	r16,r18,8017620 <__divdf3+0x85c>
 8017374:	423fff84 	addi	r8,r8,-2
 8017378:	85a1883a 	add	r16,r16,r22
 801737c:	3804943a 	slli	r2,r7,16
 8017380:	84a1c83a 	sub	r16,r16,r18
 8017384:	e009883a 	mov	r4,fp
 8017388:	1228b03a 	or	r20,r2,r8
 801738c:	a1ffffcc 	andi	r7,r20,65535
 8017390:	a024d43a 	srli	r18,r20,16
 8017394:	380b883a 	mov	r5,r7
 8017398:	d8c00215 	stw	r3,8(sp)
 801739c:	d9c00515 	stw	r7,20(sp)
 80173a0:	80028f40 	call	80028f4 <__mulsi3>
 80173a4:	900b883a 	mov	r5,r18
 80173a8:	e009883a 	mov	r4,fp
 80173ac:	102b883a 	mov	r21,r2
 80173b0:	80028f40 	call	80028f4 <__mulsi3>
 80173b4:	900b883a 	mov	r5,r18
 80173b8:	b809883a 	mov	r4,r23
 80173bc:	1039883a 	mov	fp,r2
 80173c0:	80028f40 	call	80028f4 <__mulsi3>
 80173c4:	d9c00517 	ldw	r7,20(sp)
 80173c8:	b80b883a 	mov	r5,r23
 80173cc:	1025883a 	mov	r18,r2
 80173d0:	3809883a 	mov	r4,r7
 80173d4:	80028f40 	call	80028f4 <__mulsi3>
 80173d8:	a808d43a 	srli	r4,r21,16
 80173dc:	1705883a 	add	r2,r2,fp
 80173e0:	d8c00217 	ldw	r3,8(sp)
 80173e4:	2085883a 	add	r2,r4,r2
 80173e8:	1700022e 	bgeu	r2,fp,80173f4 <__divdf3+0x630>
 80173ec:	01000074 	movhi	r4,1
 80173f0:	9125883a 	add	r18,r18,r4
 80173f4:	1008d43a 	srli	r4,r2,16
 80173f8:	1004943a 	slli	r2,r2,16
 80173fc:	ad7fffcc 	andi	r21,r21,65535
 8017400:	2489883a 	add	r4,r4,r18
 8017404:	1545883a 	add	r2,r2,r21
 8017408:	81003836 	bltu	r16,r4,80174ec <__divdf3+0x728>
 801740c:	81003626 	beq	r16,r4,80174e8 <__divdf3+0x724>
 8017410:	a5000054 	ori	r20,r20,1
 8017414:	1880ffc4 	addi	r2,r3,1023
 8017418:	00bf2e0e 	bge	zero,r2,80170d4 <__alt_data_end+0xfc0170d4>
 801741c:	a10001cc 	andi	r4,r20,7
 8017420:	20000726 	beq	r4,zero,8017440 <__divdf3+0x67c>
 8017424:	a10003cc 	andi	r4,r20,15
 8017428:	01400104 	movi	r5,4
 801742c:	21400426 	beq	r4,r5,8017440 <__divdf3+0x67c>
 8017430:	a149883a 	add	r4,r20,r5
 8017434:	2529803a 	cmpltu	r20,r4,r20
 8017438:	8d23883a 	add	r17,r17,r20
 801743c:	2029883a 	mov	r20,r4
 8017440:	8900402c 	andhi	r4,r17,256
 8017444:	20000426 	beq	r4,zero,8017458 <__divdf3+0x694>
 8017448:	18810004 	addi	r2,r3,1024
 801744c:	00ffc034 	movhi	r3,65280
 8017450:	18ffffc4 	addi	r3,r3,-1
 8017454:	88e2703a 	and	r17,r17,r3
 8017458:	00c1ff84 	movi	r3,2046
 801745c:	18beb416 	blt	r3,r2,8016f30 <__alt_data_end+0xfc016f30>
 8017460:	a028d0fa 	srli	r20,r20,3
 8017464:	882a977a 	slli	r21,r17,29
 8017468:	8820927a 	slli	r16,r17,9
 801746c:	1081ffcc 	andi	r2,r2,2047
 8017470:	ad2ab03a 	or	r21,r21,r20
 8017474:	8020d33a 	srli	r16,r16,12
 8017478:	9900004c 	andi	r4,r19,1
 801747c:	003eb006 	br	8016f40 <__alt_data_end+0xfc016f40>
 8017480:	8080022c 	andhi	r2,r16,8
 8017484:	10001226 	beq	r2,zero,80174d0 <__divdf3+0x70c>
 8017488:	8880022c 	andhi	r2,r17,8
 801748c:	1000101e 	bne	r2,zero,80174d0 <__divdf3+0x70c>
 8017490:	00800434 	movhi	r2,16
 8017494:	8c000234 	orhi	r16,r17,8
 8017498:	10bfffc4 	addi	r2,r2,-1
 801749c:	b809883a 	mov	r4,r23
 80174a0:	80a0703a 	and	r16,r16,r2
 80174a4:	a02b883a 	mov	r21,r20
 80174a8:	003f0806 	br	80170cc <__alt_data_end+0xfc0170cc>
 80174ac:	008000c4 	movi	r2,3
 80174b0:	3880b126 	beq	r7,r2,8017778 <__divdf3+0x9b4>
 80174b4:	00800044 	movi	r2,1
 80174b8:	38805b1e 	bne	r7,r2,8017628 <__divdf3+0x864>
 80174bc:	e009883a 	mov	r4,fp
 80174c0:	0005883a 	mov	r2,zero
 80174c4:	0021883a 	mov	r16,zero
 80174c8:	002b883a 	mov	r21,zero
 80174cc:	003e9c06 	br	8016f40 <__alt_data_end+0xfc016f40>
 80174d0:	00800434 	movhi	r2,16
 80174d4:	84000234 	orhi	r16,r16,8
 80174d8:	10bfffc4 	addi	r2,r2,-1
 80174dc:	b009883a 	mov	r4,r22
 80174e0:	80a0703a 	and	r16,r16,r2
 80174e4:	003ef906 	br	80170cc <__alt_data_end+0xfc0170cc>
 80174e8:	103fca26 	beq	r2,zero,8017414 <__alt_data_end+0xfc017414>
 80174ec:	b421883a 	add	r16,r22,r16
 80174f0:	a17fffc4 	addi	r5,r20,-1
 80174f4:	8580422e 	bgeu	r16,r22,8017600 <__divdf3+0x83c>
 80174f8:	2829883a 	mov	r20,r5
 80174fc:	813fc41e 	bne	r16,r4,8017410 <__alt_data_end+0xfc017410>
 8017500:	d9800017 	ldw	r6,0(sp)
 8017504:	30bfc21e 	bne	r6,r2,8017410 <__alt_data_end+0xfc017410>
 8017508:	003fc206 	br	8017414 <__alt_data_end+0xfc017414>
 801750c:	143ff604 	addi	r16,r2,-40
 8017510:	8c20983a 	sll	r16,r17,r16
 8017514:	002b883a 	mov	r21,zero
 8017518:	003eb406 	br	8016fec <__alt_data_end+0xfc016fec>
 801751c:	d9800215 	stw	r6,8(sp)
 8017520:	d9c00515 	stw	r7,20(sp)
 8017524:	da000415 	stw	r8,16(sp)
 8017528:	8018f000 	call	8018f00 <__clzsi2>
 801752c:	10800804 	addi	r2,r2,32
 8017530:	da000417 	ldw	r8,16(sp)
 8017534:	d9c00517 	ldw	r7,20(sp)
 8017538:	d9800217 	ldw	r6,8(sp)
 801753c:	003ea106 	br	8016fc4 <__alt_data_end+0xfc016fc4>
 8017540:	147ff604 	addi	r17,r2,-40
 8017544:	3462983a 	sll	r17,r6,r17
 8017548:	0029883a 	mov	r20,zero
 801754c:	003ec906 	br	8017074 <__alt_data_end+0xfc017074>
 8017550:	3009883a 	mov	r4,r6
 8017554:	d9400115 	stw	r5,4(sp)
 8017558:	d9800215 	stw	r6,8(sp)
 801755c:	da000415 	stw	r8,16(sp)
 8017560:	da400315 	stw	r9,12(sp)
 8017564:	8018f000 	call	8018f00 <__clzsi2>
 8017568:	10800804 	addi	r2,r2,32
 801756c:	da400317 	ldw	r9,12(sp)
 8017570:	da000417 	ldw	r8,16(sp)
 8017574:	d9800217 	ldw	r6,8(sp)
 8017578:	d9400117 	ldw	r5,4(sp)
 801757c:	003eb306 	br	801704c <__alt_data_end+0xfc01704c>
 8017580:	d9800017 	ldw	r6,0(sp)
 8017584:	a9ab883a 	add	r21,r21,r6
 8017588:	a98b803a 	cmpltu	r5,r21,r6
 801758c:	2d8b883a 	add	r5,r5,r22
 8017590:	2a11883a 	add	r8,r5,r8
 8017594:	897fffc4 	addi	r5,r17,-1
 8017598:	b2000c2e 	bgeu	r22,r8,80175cc <__divdf3+0x808>
 801759c:	41003f36 	bltu	r8,r4,801769c <__divdf3+0x8d8>
 80175a0:	22006c26 	beq	r4,r8,8017754 <__divdf3+0x990>
 80175a4:	4109c83a 	sub	r4,r8,r4
 80175a8:	2823883a 	mov	r17,r5
 80175ac:	003f3b06 	br	801729c <__alt_data_end+0xfc01729c>
 80175b0:	ad3ed336 	bltu	r21,r20,8017100 <__alt_data_end+0xfc017100>
 80175b4:	a804d07a 	srli	r2,r21,1
 80175b8:	802e97fa 	slli	r23,r16,31
 80175bc:	a82a97fa 	slli	r21,r21,31
 80175c0:	8020d07a 	srli	r16,r16,1
 80175c4:	b8aeb03a 	or	r23,r23,r2
 80175c8:	003ed006 	br	801710c <__alt_data_end+0xfc01710c>
 80175cc:	b23ff51e 	bne	r22,r8,80175a4 <__alt_data_end+0xfc0175a4>
 80175d0:	d9800017 	ldw	r6,0(sp)
 80175d4:	a9bff12e 	bgeu	r21,r6,801759c <__alt_data_end+0xfc01759c>
 80175d8:	b109c83a 	sub	r4,r22,r4
 80175dc:	2823883a 	mov	r17,r5
 80175e0:	003f2e06 	br	801729c <__alt_data_end+0xfc01729c>
 80175e4:	2021883a 	mov	r16,r4
 80175e8:	003eff06 	br	80171e8 <__alt_data_end+0xfc0171e8>
 80175ec:	2023883a 	mov	r17,r4
 80175f0:	003ee406 	br	8017184 <__alt_data_end+0xfc017184>
 80175f4:	a8bfe236 	bltu	r21,r2,8017580 <__alt_data_end+0xfc017580>
 80175f8:	0009883a 	mov	r4,zero
 80175fc:	003f2706 	br	801729c <__alt_data_end+0xfc01729c>
 8017600:	81002d36 	bltu	r16,r4,80176b8 <__divdf3+0x8f4>
 8017604:	24005626 	beq	r4,r16,8017760 <__divdf3+0x99c>
 8017608:	2829883a 	mov	r20,r5
 801760c:	003f8006 	br	8017410 <__alt_data_end+0xfc017410>
 8017610:	053fffc4 	movi	r20,-1
 8017614:	003f7f06 	br	8017414 <__alt_data_end+0xfc017414>
 8017618:	200f883a 	mov	r7,r4
 801761c:	003f3c06 	br	8017310 <__alt_data_end+0xfc017310>
 8017620:	1011883a 	mov	r8,r2
 8017624:	003f5506 	br	801737c <__alt_data_end+0xfc01737c>
 8017628:	e027883a 	mov	r19,fp
 801762c:	003f7906 	br	8017414 <__alt_data_end+0xfc017414>
 8017630:	010007c4 	movi	r4,31
 8017634:	20c02816 	blt	r4,r3,80176d8 <__divdf3+0x914>
 8017638:	00800804 	movi	r2,32
 801763c:	10c5c83a 	sub	r2,r2,r3
 8017640:	888a983a 	sll	r5,r17,r2
 8017644:	a0c8d83a 	srl	r4,r20,r3
 8017648:	a084983a 	sll	r2,r20,r2
 801764c:	88e2d83a 	srl	r17,r17,r3
 8017650:	2906b03a 	or	r3,r5,r4
 8017654:	1004c03a 	cmpne	r2,r2,zero
 8017658:	1886b03a 	or	r3,r3,r2
 801765c:	188001cc 	andi	r2,r3,7
 8017660:	10000726 	beq	r2,zero,8017680 <__divdf3+0x8bc>
 8017664:	188003cc 	andi	r2,r3,15
 8017668:	01000104 	movi	r4,4
 801766c:	11000426 	beq	r2,r4,8017680 <__divdf3+0x8bc>
 8017670:	1805883a 	mov	r2,r3
 8017674:	10c00104 	addi	r3,r2,4
 8017678:	1885803a 	cmpltu	r2,r3,r2
 801767c:	88a3883a 	add	r17,r17,r2
 8017680:	8880202c 	andhi	r2,r17,128
 8017684:	10002926 	beq	r2,zero,801772c <__divdf3+0x968>
 8017688:	9900004c 	andi	r4,r19,1
 801768c:	00800044 	movi	r2,1
 8017690:	0021883a 	mov	r16,zero
 8017694:	002b883a 	mov	r21,zero
 8017698:	003e2906 	br	8016f40 <__alt_data_end+0xfc016f40>
 801769c:	d9800017 	ldw	r6,0(sp)
 80176a0:	8c7fff84 	addi	r17,r17,-2
 80176a4:	a9ab883a 	add	r21,r21,r6
 80176a8:	a98b803a 	cmpltu	r5,r21,r6
 80176ac:	2d8b883a 	add	r5,r5,r22
 80176b0:	2a11883a 	add	r8,r5,r8
 80176b4:	003ef806 	br	8017298 <__alt_data_end+0xfc017298>
 80176b8:	d9800017 	ldw	r6,0(sp)
 80176bc:	318f883a 	add	r7,r6,r6
 80176c0:	398b803a 	cmpltu	r5,r7,r6
 80176c4:	2d8d883a 	add	r6,r5,r22
 80176c8:	81a1883a 	add	r16,r16,r6
 80176cc:	a17fff84 	addi	r5,r20,-2
 80176d0:	d9c00015 	stw	r7,0(sp)
 80176d4:	003f8806 	br	80174f8 <__alt_data_end+0xfc0174f8>
 80176d8:	013ff844 	movi	r4,-31
 80176dc:	2085c83a 	sub	r2,r4,r2
 80176e0:	8888d83a 	srl	r4,r17,r2
 80176e4:	00800804 	movi	r2,32
 80176e8:	18802126 	beq	r3,r2,8017770 <__divdf3+0x9ac>
 80176ec:	04001004 	movi	r16,64
 80176f0:	80c7c83a 	sub	r3,r16,r3
 80176f4:	88e0983a 	sll	r16,r17,r3
 80176f8:	8504b03a 	or	r2,r16,r20
 80176fc:	1004c03a 	cmpne	r2,r2,zero
 8017700:	2084b03a 	or	r2,r4,r2
 8017704:	144001cc 	andi	r17,r2,7
 8017708:	88000d1e 	bne	r17,zero,8017740 <__divdf3+0x97c>
 801770c:	0021883a 	mov	r16,zero
 8017710:	102ad0fa 	srli	r21,r2,3
 8017714:	9900004c 	andi	r4,r19,1
 8017718:	0005883a 	mov	r2,zero
 801771c:	ac6ab03a 	or	r21,r21,r17
 8017720:	003e0706 	br	8016f40 <__alt_data_end+0xfc016f40>
 8017724:	1007883a 	mov	r3,r2
 8017728:	0023883a 	mov	r17,zero
 801772c:	8820927a 	slli	r16,r17,9
 8017730:	1805883a 	mov	r2,r3
 8017734:	8822977a 	slli	r17,r17,29
 8017738:	8020d33a 	srli	r16,r16,12
 801773c:	003ff406 	br	8017710 <__alt_data_end+0xfc017710>
 8017740:	10c003cc 	andi	r3,r2,15
 8017744:	01000104 	movi	r4,4
 8017748:	193ff626 	beq	r3,r4,8017724 <__alt_data_end+0xfc017724>
 801774c:	0023883a 	mov	r17,zero
 8017750:	003fc806 	br	8017674 <__alt_data_end+0xfc017674>
 8017754:	a8bfd136 	bltu	r21,r2,801769c <__alt_data_end+0xfc01769c>
 8017758:	2823883a 	mov	r17,r5
 801775c:	003fa606 	br	80175f8 <__alt_data_end+0xfc0175f8>
 8017760:	d9800017 	ldw	r6,0(sp)
 8017764:	30bfd436 	bltu	r6,r2,80176b8 <__alt_data_end+0xfc0176b8>
 8017768:	2829883a 	mov	r20,r5
 801776c:	003f6406 	br	8017500 <__alt_data_end+0xfc017500>
 8017770:	0021883a 	mov	r16,zero
 8017774:	003fe006 	br	80176f8 <__alt_data_end+0xfc0176f8>
 8017778:	00800434 	movhi	r2,16
 801777c:	8c000234 	orhi	r16,r17,8
 8017780:	10bfffc4 	addi	r2,r2,-1
 8017784:	e009883a 	mov	r4,fp
 8017788:	80a0703a 	and	r16,r16,r2
 801778c:	a02b883a 	mov	r21,r20
 8017790:	003e4e06 	br	80170cc <__alt_data_end+0xfc0170cc>

08017794 <__eqdf2>:
 8017794:	2804d53a 	srli	r2,r5,20
 8017798:	3806d53a 	srli	r3,r7,20
 801779c:	02000434 	movhi	r8,16
 80177a0:	423fffc4 	addi	r8,r8,-1
 80177a4:	1081ffcc 	andi	r2,r2,2047
 80177a8:	0281ffc4 	movi	r10,2047
 80177ac:	2a12703a 	and	r9,r5,r8
 80177b0:	18c1ffcc 	andi	r3,r3,2047
 80177b4:	3a10703a 	and	r8,r7,r8
 80177b8:	280ad7fa 	srli	r5,r5,31
 80177bc:	380ed7fa 	srli	r7,r7,31
 80177c0:	12801026 	beq	r2,r10,8017804 <__eqdf2+0x70>
 80177c4:	0281ffc4 	movi	r10,2047
 80177c8:	1a800a26 	beq	r3,r10,80177f4 <__eqdf2+0x60>
 80177cc:	10c00226 	beq	r2,r3,80177d8 <__eqdf2+0x44>
 80177d0:	00800044 	movi	r2,1
 80177d4:	f800283a 	ret
 80177d8:	4a3ffd1e 	bne	r9,r8,80177d0 <__alt_data_end+0xfc0177d0>
 80177dc:	21bffc1e 	bne	r4,r6,80177d0 <__alt_data_end+0xfc0177d0>
 80177e0:	29c00c26 	beq	r5,r7,8017814 <__eqdf2+0x80>
 80177e4:	103ffa1e 	bne	r2,zero,80177d0 <__alt_data_end+0xfc0177d0>
 80177e8:	2244b03a 	or	r2,r4,r9
 80177ec:	1004c03a 	cmpne	r2,r2,zero
 80177f0:	f800283a 	ret
 80177f4:	3214b03a 	or	r10,r6,r8
 80177f8:	503ff426 	beq	r10,zero,80177cc <__alt_data_end+0xfc0177cc>
 80177fc:	00800044 	movi	r2,1
 8017800:	f800283a 	ret
 8017804:	2254b03a 	or	r10,r4,r9
 8017808:	503fee26 	beq	r10,zero,80177c4 <__alt_data_end+0xfc0177c4>
 801780c:	00800044 	movi	r2,1
 8017810:	f800283a 	ret
 8017814:	0005883a 	mov	r2,zero
 8017818:	f800283a 	ret

0801781c <__gedf2>:
 801781c:	2804d53a 	srli	r2,r5,20
 8017820:	3806d53a 	srli	r3,r7,20
 8017824:	02000434 	movhi	r8,16
 8017828:	423fffc4 	addi	r8,r8,-1
 801782c:	1081ffcc 	andi	r2,r2,2047
 8017830:	0241ffc4 	movi	r9,2047
 8017834:	2a14703a 	and	r10,r5,r8
 8017838:	18c1ffcc 	andi	r3,r3,2047
 801783c:	3a10703a 	and	r8,r7,r8
 8017840:	280ad7fa 	srli	r5,r5,31
 8017844:	380ed7fa 	srli	r7,r7,31
 8017848:	12401d26 	beq	r2,r9,80178c0 <__gedf2+0xa4>
 801784c:	0241ffc4 	movi	r9,2047
 8017850:	1a401226 	beq	r3,r9,801789c <__gedf2+0x80>
 8017854:	1000081e 	bne	r2,zero,8017878 <__gedf2+0x5c>
 8017858:	2296b03a 	or	r11,r4,r10
 801785c:	5813003a 	cmpeq	r9,r11,zero
 8017860:	1800091e 	bne	r3,zero,8017888 <__gedf2+0x6c>
 8017864:	3218b03a 	or	r12,r6,r8
 8017868:	6000071e 	bne	r12,zero,8017888 <__gedf2+0x6c>
 801786c:	0005883a 	mov	r2,zero
 8017870:	5800101e 	bne	r11,zero,80178b4 <__gedf2+0x98>
 8017874:	f800283a 	ret
 8017878:	18000c1e 	bne	r3,zero,80178ac <__gedf2+0x90>
 801787c:	3212b03a 	or	r9,r6,r8
 8017880:	48000c26 	beq	r9,zero,80178b4 <__gedf2+0x98>
 8017884:	0013883a 	mov	r9,zero
 8017888:	39c03fcc 	andi	r7,r7,255
 801788c:	48000826 	beq	r9,zero,80178b0 <__gedf2+0x94>
 8017890:	38000926 	beq	r7,zero,80178b8 <__gedf2+0x9c>
 8017894:	00800044 	movi	r2,1
 8017898:	f800283a 	ret
 801789c:	3212b03a 	or	r9,r6,r8
 80178a0:	483fec26 	beq	r9,zero,8017854 <__alt_data_end+0xfc017854>
 80178a4:	00bfff84 	movi	r2,-2
 80178a8:	f800283a 	ret
 80178ac:	39c03fcc 	andi	r7,r7,255
 80178b0:	29c00626 	beq	r5,r7,80178cc <__gedf2+0xb0>
 80178b4:	283ff726 	beq	r5,zero,8017894 <__alt_data_end+0xfc017894>
 80178b8:	00bfffc4 	movi	r2,-1
 80178bc:	f800283a 	ret
 80178c0:	2292b03a 	or	r9,r4,r10
 80178c4:	483fe126 	beq	r9,zero,801784c <__alt_data_end+0xfc01784c>
 80178c8:	003ff606 	br	80178a4 <__alt_data_end+0xfc0178a4>
 80178cc:	18bff916 	blt	r3,r2,80178b4 <__alt_data_end+0xfc0178b4>
 80178d0:	10c00316 	blt	r2,r3,80178e0 <__gedf2+0xc4>
 80178d4:	42bff736 	bltu	r8,r10,80178b4 <__alt_data_end+0xfc0178b4>
 80178d8:	52000326 	beq	r10,r8,80178e8 <__gedf2+0xcc>
 80178dc:	5200042e 	bgeu	r10,r8,80178f0 <__gedf2+0xd4>
 80178e0:	283fec1e 	bne	r5,zero,8017894 <__alt_data_end+0xfc017894>
 80178e4:	003ff406 	br	80178b8 <__alt_data_end+0xfc0178b8>
 80178e8:	313ff236 	bltu	r6,r4,80178b4 <__alt_data_end+0xfc0178b4>
 80178ec:	21bffc36 	bltu	r4,r6,80178e0 <__alt_data_end+0xfc0178e0>
 80178f0:	0005883a 	mov	r2,zero
 80178f4:	f800283a 	ret

080178f8 <__ledf2>:
 80178f8:	2804d53a 	srli	r2,r5,20
 80178fc:	3810d53a 	srli	r8,r7,20
 8017900:	00c00434 	movhi	r3,16
 8017904:	18ffffc4 	addi	r3,r3,-1
 8017908:	1081ffcc 	andi	r2,r2,2047
 801790c:	0241ffc4 	movi	r9,2047
 8017910:	28d4703a 	and	r10,r5,r3
 8017914:	4201ffcc 	andi	r8,r8,2047
 8017918:	38c6703a 	and	r3,r7,r3
 801791c:	280ad7fa 	srli	r5,r5,31
 8017920:	380ed7fa 	srli	r7,r7,31
 8017924:	12401f26 	beq	r2,r9,80179a4 <__ledf2+0xac>
 8017928:	0241ffc4 	movi	r9,2047
 801792c:	42401426 	beq	r8,r9,8017980 <__ledf2+0x88>
 8017930:	1000091e 	bne	r2,zero,8017958 <__ledf2+0x60>
 8017934:	2296b03a 	or	r11,r4,r10
 8017938:	5813003a 	cmpeq	r9,r11,zero
 801793c:	29403fcc 	andi	r5,r5,255
 8017940:	40000a1e 	bne	r8,zero,801796c <__ledf2+0x74>
 8017944:	30d8b03a 	or	r12,r6,r3
 8017948:	6000081e 	bne	r12,zero,801796c <__ledf2+0x74>
 801794c:	0005883a 	mov	r2,zero
 8017950:	5800111e 	bne	r11,zero,8017998 <__ledf2+0xa0>
 8017954:	f800283a 	ret
 8017958:	29403fcc 	andi	r5,r5,255
 801795c:	40000c1e 	bne	r8,zero,8017990 <__ledf2+0x98>
 8017960:	30d2b03a 	or	r9,r6,r3
 8017964:	48000c26 	beq	r9,zero,8017998 <__ledf2+0xa0>
 8017968:	0013883a 	mov	r9,zero
 801796c:	39c03fcc 	andi	r7,r7,255
 8017970:	48000826 	beq	r9,zero,8017994 <__ledf2+0x9c>
 8017974:	38001126 	beq	r7,zero,80179bc <__ledf2+0xc4>
 8017978:	00800044 	movi	r2,1
 801797c:	f800283a 	ret
 8017980:	30d2b03a 	or	r9,r6,r3
 8017984:	483fea26 	beq	r9,zero,8017930 <__alt_data_end+0xfc017930>
 8017988:	00800084 	movi	r2,2
 801798c:	f800283a 	ret
 8017990:	39c03fcc 	andi	r7,r7,255
 8017994:	39400726 	beq	r7,r5,80179b4 <__ledf2+0xbc>
 8017998:	2800081e 	bne	r5,zero,80179bc <__ledf2+0xc4>
 801799c:	00800044 	movi	r2,1
 80179a0:	f800283a 	ret
 80179a4:	2292b03a 	or	r9,r4,r10
 80179a8:	483fdf26 	beq	r9,zero,8017928 <__alt_data_end+0xfc017928>
 80179ac:	00800084 	movi	r2,2
 80179b0:	f800283a 	ret
 80179b4:	4080030e 	bge	r8,r2,80179c4 <__ledf2+0xcc>
 80179b8:	383fef26 	beq	r7,zero,8017978 <__alt_data_end+0xfc017978>
 80179bc:	00bfffc4 	movi	r2,-1
 80179c0:	f800283a 	ret
 80179c4:	123feb16 	blt	r2,r8,8017974 <__alt_data_end+0xfc017974>
 80179c8:	1abff336 	bltu	r3,r10,8017998 <__alt_data_end+0xfc017998>
 80179cc:	50c00326 	beq	r10,r3,80179dc <__ledf2+0xe4>
 80179d0:	50c0042e 	bgeu	r10,r3,80179e4 <__ledf2+0xec>
 80179d4:	283fe81e 	bne	r5,zero,8017978 <__alt_data_end+0xfc017978>
 80179d8:	003ff806 	br	80179bc <__alt_data_end+0xfc0179bc>
 80179dc:	313fee36 	bltu	r6,r4,8017998 <__alt_data_end+0xfc017998>
 80179e0:	21bffc36 	bltu	r4,r6,80179d4 <__alt_data_end+0xfc0179d4>
 80179e4:	0005883a 	mov	r2,zero
 80179e8:	f800283a 	ret

080179ec <__muldf3>:
 80179ec:	deffee04 	addi	sp,sp,-72
 80179f0:	dd000c15 	stw	r20,48(sp)
 80179f4:	2828d53a 	srli	r20,r5,20
 80179f8:	ddc00f15 	stw	r23,60(sp)
 80179fc:	282ed7fa 	srli	r23,r5,31
 8017a00:	dc000815 	stw	r16,32(sp)
 8017a04:	04000434 	movhi	r16,16
 8017a08:	dcc00b15 	stw	r19,44(sp)
 8017a0c:	843fffc4 	addi	r16,r16,-1
 8017a10:	dfc01115 	stw	ra,68(sp)
 8017a14:	df001015 	stw	fp,64(sp)
 8017a18:	dd800e15 	stw	r22,56(sp)
 8017a1c:	dd400d15 	stw	r21,52(sp)
 8017a20:	dc800a15 	stw	r18,40(sp)
 8017a24:	dc400915 	stw	r17,36(sp)
 8017a28:	a501ffcc 	andi	r20,r20,2047
 8017a2c:	2c20703a 	and	r16,r5,r16
 8017a30:	b827883a 	mov	r19,r23
 8017a34:	ba403fcc 	andi	r9,r23,255
 8017a38:	a0006026 	beq	r20,zero,8017bbc <__muldf3+0x1d0>
 8017a3c:	0081ffc4 	movi	r2,2047
 8017a40:	202d883a 	mov	r22,r4
 8017a44:	a0803626 	beq	r20,r2,8017b20 <__muldf3+0x134>
 8017a48:	84000434 	orhi	r16,r16,16
 8017a4c:	200ad77a 	srli	r5,r4,29
 8017a50:	800490fa 	slli	r2,r16,3
 8017a54:	202c90fa 	slli	r22,r4,3
 8017a58:	a53f0044 	addi	r20,r20,-1023
 8017a5c:	28a0b03a 	or	r16,r5,r2
 8017a60:	002b883a 	mov	r21,zero
 8017a64:	000b883a 	mov	r5,zero
 8017a68:	3804d53a 	srli	r2,r7,20
 8017a6c:	3838d7fa 	srli	fp,r7,31
 8017a70:	04400434 	movhi	r17,16
 8017a74:	8c7fffc4 	addi	r17,r17,-1
 8017a78:	1081ffcc 	andi	r2,r2,2047
 8017a7c:	3025883a 	mov	r18,r6
 8017a80:	3c62703a 	and	r17,r7,r17
 8017a84:	e2803fcc 	andi	r10,fp,255
 8017a88:	10006d26 	beq	r2,zero,8017c40 <__muldf3+0x254>
 8017a8c:	00c1ffc4 	movi	r3,2047
 8017a90:	10c06526 	beq	r2,r3,8017c28 <__muldf3+0x23c>
 8017a94:	8c400434 	orhi	r17,r17,16
 8017a98:	300ed77a 	srli	r7,r6,29
 8017a9c:	880690fa 	slli	r3,r17,3
 8017aa0:	302490fa 	slli	r18,r6,3
 8017aa4:	10bf0044 	addi	r2,r2,-1023
 8017aa8:	38e2b03a 	or	r17,r7,r3
 8017aac:	000f883a 	mov	r7,zero
 8017ab0:	a087883a 	add	r3,r20,r2
 8017ab4:	010003c4 	movi	r4,15
 8017ab8:	3d44b03a 	or	r2,r7,r21
 8017abc:	e5ccf03a 	xor	r6,fp,r23
 8017ac0:	1a000044 	addi	r8,r3,1
 8017ac4:	20809b36 	bltu	r4,r2,8017d34 <__muldf3+0x348>
 8017ac8:	100490ba 	slli	r2,r2,2
 8017acc:	01020074 	movhi	r4,2049
 8017ad0:	211eb804 	addi	r4,r4,31456
 8017ad4:	1105883a 	add	r2,r2,r4
 8017ad8:	10800017 	ldw	r2,0(r2)
 8017adc:	1000683a 	jmp	r2
 8017ae0:	08017d34 	orhi	zero,at,1524
 8017ae4:	08017b40 	call	8017b4 <__alt_mem_onchip_memory+0x8017b4>
 8017ae8:	08017b40 	call	8017b4 <__alt_mem_onchip_memory+0x8017b4>
 8017aec:	08017b3c 	xorhi	zero,at,1516
 8017af0:	08017d10 	cmplti	zero,at,1524
 8017af4:	08017d10 	cmplti	zero,at,1524
 8017af8:	08017cf8 	rdprs	zero,at,1523
 8017afc:	08017b3c 	xorhi	zero,at,1516
 8017b00:	08017d10 	cmplti	zero,at,1524
 8017b04:	08017cf8 	rdprs	zero,at,1523
 8017b08:	08017d10 	cmplti	zero,at,1524
 8017b0c:	08017b3c 	xorhi	zero,at,1516
 8017b10:	08017d20 	cmpeqi	zero,at,1524
 8017b14:	08017d20 	cmpeqi	zero,at,1524
 8017b18:	08017d20 	cmpeqi	zero,at,1524
 8017b1c:	08018080 	call	801808 <__alt_mem_onchip_memory+0x801808>
 8017b20:	2404b03a 	or	r2,r4,r16
 8017b24:	1000711e 	bne	r2,zero,8017cec <__muldf3+0x300>
 8017b28:	05400204 	movi	r21,8
 8017b2c:	0021883a 	mov	r16,zero
 8017b30:	002d883a 	mov	r22,zero
 8017b34:	01400084 	movi	r5,2
 8017b38:	003fcb06 	br	8017a68 <__alt_data_end+0xfc017a68>
 8017b3c:	500d883a 	mov	r6,r10
 8017b40:	00800084 	movi	r2,2
 8017b44:	38805926 	beq	r7,r2,8017cac <__muldf3+0x2c0>
 8017b48:	008000c4 	movi	r2,3
 8017b4c:	3881bb26 	beq	r7,r2,801823c <__muldf3+0x850>
 8017b50:	00800044 	movi	r2,1
 8017b54:	3881961e 	bne	r7,r2,80181b0 <__muldf3+0x7c4>
 8017b58:	3027883a 	mov	r19,r6
 8017b5c:	0005883a 	mov	r2,zero
 8017b60:	0021883a 	mov	r16,zero
 8017b64:	002d883a 	mov	r22,zero
 8017b68:	1004953a 	slli	r2,r2,20
 8017b6c:	98c03fcc 	andi	r3,r19,255
 8017b70:	04400434 	movhi	r17,16
 8017b74:	8c7fffc4 	addi	r17,r17,-1
 8017b78:	180697fa 	slli	r3,r3,31
 8017b7c:	8460703a 	and	r16,r16,r17
 8017b80:	80a0b03a 	or	r16,r16,r2
 8017b84:	80c6b03a 	or	r3,r16,r3
 8017b88:	b005883a 	mov	r2,r22
 8017b8c:	dfc01117 	ldw	ra,68(sp)
 8017b90:	df001017 	ldw	fp,64(sp)
 8017b94:	ddc00f17 	ldw	r23,60(sp)
 8017b98:	dd800e17 	ldw	r22,56(sp)
 8017b9c:	dd400d17 	ldw	r21,52(sp)
 8017ba0:	dd000c17 	ldw	r20,48(sp)
 8017ba4:	dcc00b17 	ldw	r19,44(sp)
 8017ba8:	dc800a17 	ldw	r18,40(sp)
 8017bac:	dc400917 	ldw	r17,36(sp)
 8017bb0:	dc000817 	ldw	r16,32(sp)
 8017bb4:	dec01204 	addi	sp,sp,72
 8017bb8:	f800283a 	ret
 8017bbc:	2404b03a 	or	r2,r4,r16
 8017bc0:	202b883a 	mov	r21,r4
 8017bc4:	10004426 	beq	r2,zero,8017cd8 <__muldf3+0x2ec>
 8017bc8:	80015126 	beq	r16,zero,8018110 <__muldf3+0x724>
 8017bcc:	8009883a 	mov	r4,r16
 8017bd0:	d9800715 	stw	r6,28(sp)
 8017bd4:	d9c00215 	stw	r7,8(sp)
 8017bd8:	da400415 	stw	r9,16(sp)
 8017bdc:	8018f000 	call	8018f00 <__clzsi2>
 8017be0:	d9800717 	ldw	r6,28(sp)
 8017be4:	d9c00217 	ldw	r7,8(sp)
 8017be8:	da400417 	ldw	r9,16(sp)
 8017bec:	113ffd44 	addi	r4,r2,-11
 8017bf0:	00c00704 	movi	r3,28
 8017bf4:	19014216 	blt	r3,r4,8018100 <__muldf3+0x714>
 8017bf8:	00c00744 	movi	r3,29
 8017bfc:	15bffe04 	addi	r22,r2,-8
 8017c00:	1907c83a 	sub	r3,r3,r4
 8017c04:	85a0983a 	sll	r16,r16,r22
 8017c08:	a8c6d83a 	srl	r3,r21,r3
 8017c0c:	adac983a 	sll	r22,r21,r22
 8017c10:	1c20b03a 	or	r16,r3,r16
 8017c14:	1080fcc4 	addi	r2,r2,1011
 8017c18:	00a9c83a 	sub	r20,zero,r2
 8017c1c:	002b883a 	mov	r21,zero
 8017c20:	000b883a 	mov	r5,zero
 8017c24:	003f9006 	br	8017a68 <__alt_data_end+0xfc017a68>
 8017c28:	3446b03a 	or	r3,r6,r17
 8017c2c:	1800281e 	bne	r3,zero,8017cd0 <__muldf3+0x2e4>
 8017c30:	0023883a 	mov	r17,zero
 8017c34:	0025883a 	mov	r18,zero
 8017c38:	01c00084 	movi	r7,2
 8017c3c:	003f9c06 	br	8017ab0 <__alt_data_end+0xfc017ab0>
 8017c40:	3446b03a 	or	r3,r6,r17
 8017c44:	18001e26 	beq	r3,zero,8017cc0 <__muldf3+0x2d4>
 8017c48:	88012126 	beq	r17,zero,80180d0 <__muldf3+0x6e4>
 8017c4c:	8809883a 	mov	r4,r17
 8017c50:	d9400215 	stw	r5,8(sp)
 8017c54:	d9800715 	stw	r6,28(sp)
 8017c58:	da400415 	stw	r9,16(sp)
 8017c5c:	da800315 	stw	r10,12(sp)
 8017c60:	8018f000 	call	8018f00 <__clzsi2>
 8017c64:	d9400217 	ldw	r5,8(sp)
 8017c68:	d9800717 	ldw	r6,28(sp)
 8017c6c:	da400417 	ldw	r9,16(sp)
 8017c70:	da800317 	ldw	r10,12(sp)
 8017c74:	113ffd44 	addi	r4,r2,-11
 8017c78:	00c00704 	movi	r3,28
 8017c7c:	19011016 	blt	r3,r4,80180c0 <__muldf3+0x6d4>
 8017c80:	00c00744 	movi	r3,29
 8017c84:	14bffe04 	addi	r18,r2,-8
 8017c88:	1907c83a 	sub	r3,r3,r4
 8017c8c:	8ca2983a 	sll	r17,r17,r18
 8017c90:	30c6d83a 	srl	r3,r6,r3
 8017c94:	34a4983a 	sll	r18,r6,r18
 8017c98:	1c62b03a 	or	r17,r3,r17
 8017c9c:	1080fcc4 	addi	r2,r2,1011
 8017ca0:	0085c83a 	sub	r2,zero,r2
 8017ca4:	000f883a 	mov	r7,zero
 8017ca8:	003f8106 	br	8017ab0 <__alt_data_end+0xfc017ab0>
 8017cac:	3027883a 	mov	r19,r6
 8017cb0:	0081ffc4 	movi	r2,2047
 8017cb4:	0021883a 	mov	r16,zero
 8017cb8:	002d883a 	mov	r22,zero
 8017cbc:	003faa06 	br	8017b68 <__alt_data_end+0xfc017b68>
 8017cc0:	0023883a 	mov	r17,zero
 8017cc4:	0025883a 	mov	r18,zero
 8017cc8:	01c00044 	movi	r7,1
 8017ccc:	003f7806 	br	8017ab0 <__alt_data_end+0xfc017ab0>
 8017cd0:	01c000c4 	movi	r7,3
 8017cd4:	003f7606 	br	8017ab0 <__alt_data_end+0xfc017ab0>
 8017cd8:	05400104 	movi	r21,4
 8017cdc:	0021883a 	mov	r16,zero
 8017ce0:	002d883a 	mov	r22,zero
 8017ce4:	01400044 	movi	r5,1
 8017ce8:	003f5f06 	br	8017a68 <__alt_data_end+0xfc017a68>
 8017cec:	05400304 	movi	r21,12
 8017cf0:	014000c4 	movi	r5,3
 8017cf4:	003f5c06 	br	8017a68 <__alt_data_end+0xfc017a68>
 8017cf8:	04000434 	movhi	r16,16
 8017cfc:	0027883a 	mov	r19,zero
 8017d00:	843fffc4 	addi	r16,r16,-1
 8017d04:	05bfffc4 	movi	r22,-1
 8017d08:	0081ffc4 	movi	r2,2047
 8017d0c:	003f9606 	br	8017b68 <__alt_data_end+0xfc017b68>
 8017d10:	8023883a 	mov	r17,r16
 8017d14:	b025883a 	mov	r18,r22
 8017d18:	280f883a 	mov	r7,r5
 8017d1c:	003f8806 	br	8017b40 <__alt_data_end+0xfc017b40>
 8017d20:	8023883a 	mov	r17,r16
 8017d24:	b025883a 	mov	r18,r22
 8017d28:	480d883a 	mov	r6,r9
 8017d2c:	280f883a 	mov	r7,r5
 8017d30:	003f8306 	br	8017b40 <__alt_data_end+0xfc017b40>
 8017d34:	b026d43a 	srli	r19,r22,16
 8017d38:	902ed43a 	srli	r23,r18,16
 8017d3c:	b5bfffcc 	andi	r22,r22,65535
 8017d40:	94bfffcc 	andi	r18,r18,65535
 8017d44:	b00b883a 	mov	r5,r22
 8017d48:	9009883a 	mov	r4,r18
 8017d4c:	d8c00515 	stw	r3,20(sp)
 8017d50:	d9800715 	stw	r6,28(sp)
 8017d54:	da000615 	stw	r8,24(sp)
 8017d58:	80028f40 	call	80028f4 <__mulsi3>
 8017d5c:	980b883a 	mov	r5,r19
 8017d60:	9009883a 	mov	r4,r18
 8017d64:	1029883a 	mov	r20,r2
 8017d68:	80028f40 	call	80028f4 <__mulsi3>
 8017d6c:	b80b883a 	mov	r5,r23
 8017d70:	9809883a 	mov	r4,r19
 8017d74:	102b883a 	mov	r21,r2
 8017d78:	80028f40 	call	80028f4 <__mulsi3>
 8017d7c:	b809883a 	mov	r4,r23
 8017d80:	b00b883a 	mov	r5,r22
 8017d84:	1039883a 	mov	fp,r2
 8017d88:	80028f40 	call	80028f4 <__mulsi3>
 8017d8c:	a008d43a 	srli	r4,r20,16
 8017d90:	1545883a 	add	r2,r2,r21
 8017d94:	d8c00517 	ldw	r3,20(sp)
 8017d98:	2085883a 	add	r2,r4,r2
 8017d9c:	d9800717 	ldw	r6,28(sp)
 8017da0:	da000617 	ldw	r8,24(sp)
 8017da4:	1540022e 	bgeu	r2,r21,8017db0 <__muldf3+0x3c4>
 8017da8:	01000074 	movhi	r4,1
 8017dac:	e139883a 	add	fp,fp,r4
 8017db0:	100e943a 	slli	r7,r2,16
 8017db4:	1004d43a 	srli	r2,r2,16
 8017db8:	882ad43a 	srli	r21,r17,16
 8017dbc:	a53fffcc 	andi	r20,r20,65535
 8017dc0:	8c7fffcc 	andi	r17,r17,65535
 8017dc4:	3d29883a 	add	r20,r7,r20
 8017dc8:	b00b883a 	mov	r5,r22
 8017dcc:	8809883a 	mov	r4,r17
 8017dd0:	d8c00515 	stw	r3,20(sp)
 8017dd4:	d9800715 	stw	r6,28(sp)
 8017dd8:	da000615 	stw	r8,24(sp)
 8017ddc:	dd000115 	stw	r20,4(sp)
 8017de0:	d8800015 	stw	r2,0(sp)
 8017de4:	80028f40 	call	80028f4 <__mulsi3>
 8017de8:	980b883a 	mov	r5,r19
 8017dec:	8809883a 	mov	r4,r17
 8017df0:	d8800215 	stw	r2,8(sp)
 8017df4:	80028f40 	call	80028f4 <__mulsi3>
 8017df8:	9809883a 	mov	r4,r19
 8017dfc:	a80b883a 	mov	r5,r21
 8017e00:	1029883a 	mov	r20,r2
 8017e04:	80028f40 	call	80028f4 <__mulsi3>
 8017e08:	b00b883a 	mov	r5,r22
 8017e0c:	a809883a 	mov	r4,r21
 8017e10:	d8800415 	stw	r2,16(sp)
 8017e14:	80028f40 	call	80028f4 <__mulsi3>
 8017e18:	d9c00217 	ldw	r7,8(sp)
 8017e1c:	1505883a 	add	r2,r2,r20
 8017e20:	d8c00517 	ldw	r3,20(sp)
 8017e24:	3826d43a 	srli	r19,r7,16
 8017e28:	d9800717 	ldw	r6,28(sp)
 8017e2c:	da000617 	ldw	r8,24(sp)
 8017e30:	9885883a 	add	r2,r19,r2
 8017e34:	da400417 	ldw	r9,16(sp)
 8017e38:	1500022e 	bgeu	r2,r20,8017e44 <__muldf3+0x458>
 8017e3c:	01000074 	movhi	r4,1
 8017e40:	4913883a 	add	r9,r9,r4
 8017e44:	1028d43a 	srli	r20,r2,16
 8017e48:	1004943a 	slli	r2,r2,16
 8017e4c:	802cd43a 	srli	r22,r16,16
 8017e50:	843fffcc 	andi	r16,r16,65535
 8017e54:	3cffffcc 	andi	r19,r7,65535
 8017e58:	9009883a 	mov	r4,r18
 8017e5c:	800b883a 	mov	r5,r16
 8017e60:	a269883a 	add	r20,r20,r9
 8017e64:	d8c00515 	stw	r3,20(sp)
 8017e68:	d9800715 	stw	r6,28(sp)
 8017e6c:	da000615 	stw	r8,24(sp)
 8017e70:	14e7883a 	add	r19,r2,r19
 8017e74:	80028f40 	call	80028f4 <__mulsi3>
 8017e78:	9009883a 	mov	r4,r18
 8017e7c:	b00b883a 	mov	r5,r22
 8017e80:	d8800315 	stw	r2,12(sp)
 8017e84:	80028f40 	call	80028f4 <__mulsi3>
 8017e88:	b809883a 	mov	r4,r23
 8017e8c:	b00b883a 	mov	r5,r22
 8017e90:	d8800215 	stw	r2,8(sp)
 8017e94:	80028f40 	call	80028f4 <__mulsi3>
 8017e98:	b80b883a 	mov	r5,r23
 8017e9c:	8009883a 	mov	r4,r16
 8017ea0:	d8800415 	stw	r2,16(sp)
 8017ea4:	80028f40 	call	80028f4 <__mulsi3>
 8017ea8:	da800317 	ldw	r10,12(sp)
 8017eac:	d9c00217 	ldw	r7,8(sp)
 8017eb0:	d9000017 	ldw	r4,0(sp)
 8017eb4:	502ed43a 	srli	r23,r10,16
 8017eb8:	11c5883a 	add	r2,r2,r7
 8017ebc:	24e5883a 	add	r18,r4,r19
 8017ec0:	b885883a 	add	r2,r23,r2
 8017ec4:	d8c00517 	ldw	r3,20(sp)
 8017ec8:	d9800717 	ldw	r6,28(sp)
 8017ecc:	da000617 	ldw	r8,24(sp)
 8017ed0:	da400417 	ldw	r9,16(sp)
 8017ed4:	11c0022e 	bgeu	r2,r7,8017ee0 <__muldf3+0x4f4>
 8017ed8:	01000074 	movhi	r4,1
 8017edc:	4913883a 	add	r9,r9,r4
 8017ee0:	100ed43a 	srli	r7,r2,16
 8017ee4:	1004943a 	slli	r2,r2,16
 8017ee8:	55ffffcc 	andi	r23,r10,65535
 8017eec:	3a53883a 	add	r9,r7,r9
 8017ef0:	8809883a 	mov	r4,r17
 8017ef4:	800b883a 	mov	r5,r16
 8017ef8:	d8c00515 	stw	r3,20(sp)
 8017efc:	d9800715 	stw	r6,28(sp)
 8017f00:	da000615 	stw	r8,24(sp)
 8017f04:	da400415 	stw	r9,16(sp)
 8017f08:	15ef883a 	add	r23,r2,r23
 8017f0c:	80028f40 	call	80028f4 <__mulsi3>
 8017f10:	8809883a 	mov	r4,r17
 8017f14:	b00b883a 	mov	r5,r22
 8017f18:	d8800215 	stw	r2,8(sp)
 8017f1c:	80028f40 	call	80028f4 <__mulsi3>
 8017f20:	b00b883a 	mov	r5,r22
 8017f24:	a809883a 	mov	r4,r21
 8017f28:	d8800315 	stw	r2,12(sp)
 8017f2c:	80028f40 	call	80028f4 <__mulsi3>
 8017f30:	8009883a 	mov	r4,r16
 8017f34:	a80b883a 	mov	r5,r21
 8017f38:	1023883a 	mov	r17,r2
 8017f3c:	80028f40 	call	80028f4 <__mulsi3>
 8017f40:	d9c00217 	ldw	r7,8(sp)
 8017f44:	da800317 	ldw	r10,12(sp)
 8017f48:	d8c00517 	ldw	r3,20(sp)
 8017f4c:	3808d43a 	srli	r4,r7,16
 8017f50:	1285883a 	add	r2,r2,r10
 8017f54:	d9800717 	ldw	r6,28(sp)
 8017f58:	2085883a 	add	r2,r4,r2
 8017f5c:	da000617 	ldw	r8,24(sp)
 8017f60:	da400417 	ldw	r9,16(sp)
 8017f64:	1280022e 	bgeu	r2,r10,8017f70 <__muldf3+0x584>
 8017f68:	01000074 	movhi	r4,1
 8017f6c:	8923883a 	add	r17,r17,r4
 8017f70:	1008943a 	slli	r4,r2,16
 8017f74:	39ffffcc 	andi	r7,r7,65535
 8017f78:	e4b9883a 	add	fp,fp,r18
 8017f7c:	21cf883a 	add	r7,r4,r7
 8017f80:	e4e7803a 	cmpltu	r19,fp,r19
 8017f84:	3d0f883a 	add	r7,r7,r20
 8017f88:	bf39883a 	add	fp,r23,fp
 8017f8c:	99c9883a 	add	r4,r19,r7
 8017f90:	e5ef803a 	cmpltu	r23,fp,r23
 8017f94:	490b883a 	add	r5,r9,r4
 8017f98:	1004d43a 	srli	r2,r2,16
 8017f9c:	b965883a 	add	r18,r23,r5
 8017fa0:	24c9803a 	cmpltu	r4,r4,r19
 8017fa4:	3d29803a 	cmpltu	r20,r7,r20
 8017fa8:	a128b03a 	or	r20,r20,r4
 8017fac:	95ef803a 	cmpltu	r23,r18,r23
 8017fb0:	2a53803a 	cmpltu	r9,r5,r9
 8017fb4:	a0a9883a 	add	r20,r20,r2
 8017fb8:	4deeb03a 	or	r23,r9,r23
 8017fbc:	a5ef883a 	add	r23,r20,r23
 8017fc0:	bc63883a 	add	r17,r23,r17
 8017fc4:	e004927a 	slli	r2,fp,9
 8017fc8:	d9000117 	ldw	r4,4(sp)
 8017fcc:	882e927a 	slli	r23,r17,9
 8017fd0:	9022d5fa 	srli	r17,r18,23
 8017fd4:	e038d5fa 	srli	fp,fp,23
 8017fd8:	1104b03a 	or	r2,r2,r4
 8017fdc:	9024927a 	slli	r18,r18,9
 8017fe0:	1004c03a 	cmpne	r2,r2,zero
 8017fe4:	bc62b03a 	or	r17,r23,r17
 8017fe8:	1738b03a 	or	fp,r2,fp
 8017fec:	8880402c 	andhi	r2,r17,256
 8017ff0:	e4a4b03a 	or	r18,fp,r18
 8017ff4:	10000726 	beq	r2,zero,8018014 <__muldf3+0x628>
 8017ff8:	9006d07a 	srli	r3,r18,1
 8017ffc:	880497fa 	slli	r2,r17,31
 8018000:	9480004c 	andi	r18,r18,1
 8018004:	8822d07a 	srli	r17,r17,1
 8018008:	1ca4b03a 	or	r18,r3,r18
 801800c:	14a4b03a 	or	r18,r2,r18
 8018010:	4007883a 	mov	r3,r8
 8018014:	1880ffc4 	addi	r2,r3,1023
 8018018:	0080460e 	bge	zero,r2,8018134 <__muldf3+0x748>
 801801c:	910001cc 	andi	r4,r18,7
 8018020:	20000726 	beq	r4,zero,8018040 <__muldf3+0x654>
 8018024:	910003cc 	andi	r4,r18,15
 8018028:	01400104 	movi	r5,4
 801802c:	21400426 	beq	r4,r5,8018040 <__muldf3+0x654>
 8018030:	9149883a 	add	r4,r18,r5
 8018034:	24a5803a 	cmpltu	r18,r4,r18
 8018038:	8ca3883a 	add	r17,r17,r18
 801803c:	2025883a 	mov	r18,r4
 8018040:	8900402c 	andhi	r4,r17,256
 8018044:	20000426 	beq	r4,zero,8018058 <__muldf3+0x66c>
 8018048:	18810004 	addi	r2,r3,1024
 801804c:	00ffc034 	movhi	r3,65280
 8018050:	18ffffc4 	addi	r3,r3,-1
 8018054:	88e2703a 	and	r17,r17,r3
 8018058:	00c1ff84 	movi	r3,2046
 801805c:	18bf1316 	blt	r3,r2,8017cac <__alt_data_end+0xfc017cac>
 8018060:	882c977a 	slli	r22,r17,29
 8018064:	9024d0fa 	srli	r18,r18,3
 8018068:	8822927a 	slli	r17,r17,9
 801806c:	1081ffcc 	andi	r2,r2,2047
 8018070:	b4acb03a 	or	r22,r22,r18
 8018074:	8820d33a 	srli	r16,r17,12
 8018078:	3027883a 	mov	r19,r6
 801807c:	003eba06 	br	8017b68 <__alt_data_end+0xfc017b68>
 8018080:	8080022c 	andhi	r2,r16,8
 8018084:	10000926 	beq	r2,zero,80180ac <__muldf3+0x6c0>
 8018088:	8880022c 	andhi	r2,r17,8
 801808c:	1000071e 	bne	r2,zero,80180ac <__muldf3+0x6c0>
 8018090:	00800434 	movhi	r2,16
 8018094:	8c000234 	orhi	r16,r17,8
 8018098:	10bfffc4 	addi	r2,r2,-1
 801809c:	e027883a 	mov	r19,fp
 80180a0:	80a0703a 	and	r16,r16,r2
 80180a4:	902d883a 	mov	r22,r18
 80180a8:	003f1706 	br	8017d08 <__alt_data_end+0xfc017d08>
 80180ac:	00800434 	movhi	r2,16
 80180b0:	84000234 	orhi	r16,r16,8
 80180b4:	10bfffc4 	addi	r2,r2,-1
 80180b8:	80a0703a 	and	r16,r16,r2
 80180bc:	003f1206 	br	8017d08 <__alt_data_end+0xfc017d08>
 80180c0:	147ff604 	addi	r17,r2,-40
 80180c4:	3462983a 	sll	r17,r6,r17
 80180c8:	0025883a 	mov	r18,zero
 80180cc:	003ef306 	br	8017c9c <__alt_data_end+0xfc017c9c>
 80180d0:	3009883a 	mov	r4,r6
 80180d4:	d9400215 	stw	r5,8(sp)
 80180d8:	d9800715 	stw	r6,28(sp)
 80180dc:	da400415 	stw	r9,16(sp)
 80180e0:	da800315 	stw	r10,12(sp)
 80180e4:	8018f000 	call	8018f00 <__clzsi2>
 80180e8:	10800804 	addi	r2,r2,32
 80180ec:	da800317 	ldw	r10,12(sp)
 80180f0:	da400417 	ldw	r9,16(sp)
 80180f4:	d9800717 	ldw	r6,28(sp)
 80180f8:	d9400217 	ldw	r5,8(sp)
 80180fc:	003edd06 	br	8017c74 <__alt_data_end+0xfc017c74>
 8018100:	143ff604 	addi	r16,r2,-40
 8018104:	ac20983a 	sll	r16,r21,r16
 8018108:	002d883a 	mov	r22,zero
 801810c:	003ec106 	br	8017c14 <__alt_data_end+0xfc017c14>
 8018110:	d9800715 	stw	r6,28(sp)
 8018114:	d9c00215 	stw	r7,8(sp)
 8018118:	da400415 	stw	r9,16(sp)
 801811c:	8018f000 	call	8018f00 <__clzsi2>
 8018120:	10800804 	addi	r2,r2,32
 8018124:	da400417 	ldw	r9,16(sp)
 8018128:	d9c00217 	ldw	r7,8(sp)
 801812c:	d9800717 	ldw	r6,28(sp)
 8018130:	003eae06 	br	8017bec <__alt_data_end+0xfc017bec>
 8018134:	00c00044 	movi	r3,1
 8018138:	1887c83a 	sub	r3,r3,r2
 801813c:	01000e04 	movi	r4,56
 8018140:	20fe8516 	blt	r4,r3,8017b58 <__alt_data_end+0xfc017b58>
 8018144:	010007c4 	movi	r4,31
 8018148:	20c01b16 	blt	r4,r3,80181b8 <__muldf3+0x7cc>
 801814c:	00800804 	movi	r2,32
 8018150:	10c5c83a 	sub	r2,r2,r3
 8018154:	888a983a 	sll	r5,r17,r2
 8018158:	90c8d83a 	srl	r4,r18,r3
 801815c:	9084983a 	sll	r2,r18,r2
 8018160:	88e2d83a 	srl	r17,r17,r3
 8018164:	2906b03a 	or	r3,r5,r4
 8018168:	1004c03a 	cmpne	r2,r2,zero
 801816c:	1886b03a 	or	r3,r3,r2
 8018170:	188001cc 	andi	r2,r3,7
 8018174:	10000726 	beq	r2,zero,8018194 <__muldf3+0x7a8>
 8018178:	188003cc 	andi	r2,r3,15
 801817c:	01000104 	movi	r4,4
 8018180:	11000426 	beq	r2,r4,8018194 <__muldf3+0x7a8>
 8018184:	1805883a 	mov	r2,r3
 8018188:	10c00104 	addi	r3,r2,4
 801818c:	1885803a 	cmpltu	r2,r3,r2
 8018190:	88a3883a 	add	r17,r17,r2
 8018194:	8880202c 	andhi	r2,r17,128
 8018198:	10001c26 	beq	r2,zero,801820c <__muldf3+0x820>
 801819c:	3027883a 	mov	r19,r6
 80181a0:	00800044 	movi	r2,1
 80181a4:	0021883a 	mov	r16,zero
 80181a8:	002d883a 	mov	r22,zero
 80181ac:	003e6e06 	br	8017b68 <__alt_data_end+0xfc017b68>
 80181b0:	4007883a 	mov	r3,r8
 80181b4:	003f9706 	br	8018014 <__alt_data_end+0xfc018014>
 80181b8:	017ff844 	movi	r5,-31
 80181bc:	2885c83a 	sub	r2,r5,r2
 80181c0:	888ad83a 	srl	r5,r17,r2
 80181c4:	00800804 	movi	r2,32
 80181c8:	18801a26 	beq	r3,r2,8018234 <__muldf3+0x848>
 80181cc:	01001004 	movi	r4,64
 80181d0:	20c7c83a 	sub	r3,r4,r3
 80181d4:	88e2983a 	sll	r17,r17,r3
 80181d8:	8ca4b03a 	or	r18,r17,r18
 80181dc:	9004c03a 	cmpne	r2,r18,zero
 80181e0:	2884b03a 	or	r2,r5,r2
 80181e4:	144001cc 	andi	r17,r2,7
 80181e8:	88000d1e 	bne	r17,zero,8018220 <__muldf3+0x834>
 80181ec:	0021883a 	mov	r16,zero
 80181f0:	102cd0fa 	srli	r22,r2,3
 80181f4:	3027883a 	mov	r19,r6
 80181f8:	0005883a 	mov	r2,zero
 80181fc:	b46cb03a 	or	r22,r22,r17
 8018200:	003e5906 	br	8017b68 <__alt_data_end+0xfc017b68>
 8018204:	1007883a 	mov	r3,r2
 8018208:	0023883a 	mov	r17,zero
 801820c:	8820927a 	slli	r16,r17,9
 8018210:	1805883a 	mov	r2,r3
 8018214:	8822977a 	slli	r17,r17,29
 8018218:	8020d33a 	srli	r16,r16,12
 801821c:	003ff406 	br	80181f0 <__alt_data_end+0xfc0181f0>
 8018220:	10c003cc 	andi	r3,r2,15
 8018224:	01000104 	movi	r4,4
 8018228:	193ff626 	beq	r3,r4,8018204 <__alt_data_end+0xfc018204>
 801822c:	0023883a 	mov	r17,zero
 8018230:	003fd506 	br	8018188 <__alt_data_end+0xfc018188>
 8018234:	0023883a 	mov	r17,zero
 8018238:	003fe706 	br	80181d8 <__alt_data_end+0xfc0181d8>
 801823c:	00800434 	movhi	r2,16
 8018240:	8c000234 	orhi	r16,r17,8
 8018244:	10bfffc4 	addi	r2,r2,-1
 8018248:	3027883a 	mov	r19,r6
 801824c:	80a0703a 	and	r16,r16,r2
 8018250:	902d883a 	mov	r22,r18
 8018254:	003eac06 	br	8017d08 <__alt_data_end+0xfc017d08>

08018258 <__subdf3>:
 8018258:	02000434 	movhi	r8,16
 801825c:	423fffc4 	addi	r8,r8,-1
 8018260:	defffb04 	addi	sp,sp,-20
 8018264:	2a14703a 	and	r10,r5,r8
 8018268:	3812d53a 	srli	r9,r7,20
 801826c:	3a10703a 	and	r8,r7,r8
 8018270:	2006d77a 	srli	r3,r4,29
 8018274:	3004d77a 	srli	r2,r6,29
 8018278:	dc000015 	stw	r16,0(sp)
 801827c:	501490fa 	slli	r10,r10,3
 8018280:	2820d53a 	srli	r16,r5,20
 8018284:	401090fa 	slli	r8,r8,3
 8018288:	dc800215 	stw	r18,8(sp)
 801828c:	dc400115 	stw	r17,4(sp)
 8018290:	dfc00415 	stw	ra,16(sp)
 8018294:	202290fa 	slli	r17,r4,3
 8018298:	dcc00315 	stw	r19,12(sp)
 801829c:	4a41ffcc 	andi	r9,r9,2047
 80182a0:	0101ffc4 	movi	r4,2047
 80182a4:	2824d7fa 	srli	r18,r5,31
 80182a8:	8401ffcc 	andi	r16,r16,2047
 80182ac:	50c6b03a 	or	r3,r10,r3
 80182b0:	380ed7fa 	srli	r7,r7,31
 80182b4:	408ab03a 	or	r5,r8,r2
 80182b8:	300c90fa 	slli	r6,r6,3
 80182bc:	49009626 	beq	r9,r4,8018518 <__subdf3+0x2c0>
 80182c0:	39c0005c 	xori	r7,r7,1
 80182c4:	8245c83a 	sub	r2,r16,r9
 80182c8:	3c807426 	beq	r7,r18,801849c <__subdf3+0x244>
 80182cc:	0080af0e 	bge	zero,r2,801858c <__subdf3+0x334>
 80182d0:	48002a1e 	bne	r9,zero,801837c <__subdf3+0x124>
 80182d4:	2988b03a 	or	r4,r5,r6
 80182d8:	20009a1e 	bne	r4,zero,8018544 <__subdf3+0x2ec>
 80182dc:	888001cc 	andi	r2,r17,7
 80182e0:	10000726 	beq	r2,zero,8018300 <__subdf3+0xa8>
 80182e4:	888003cc 	andi	r2,r17,15
 80182e8:	01000104 	movi	r4,4
 80182ec:	11000426 	beq	r2,r4,8018300 <__subdf3+0xa8>
 80182f0:	890b883a 	add	r5,r17,r4
 80182f4:	2c63803a 	cmpltu	r17,r5,r17
 80182f8:	1c47883a 	add	r3,r3,r17
 80182fc:	2823883a 	mov	r17,r5
 8018300:	1880202c 	andhi	r2,r3,128
 8018304:	10005926 	beq	r2,zero,801846c <__subdf3+0x214>
 8018308:	84000044 	addi	r16,r16,1
 801830c:	0081ffc4 	movi	r2,2047
 8018310:	8080be26 	beq	r16,r2,801860c <__subdf3+0x3b4>
 8018314:	017fe034 	movhi	r5,65408
 8018318:	297fffc4 	addi	r5,r5,-1
 801831c:	1946703a 	and	r3,r3,r5
 8018320:	1804977a 	slli	r2,r3,29
 8018324:	1806927a 	slli	r3,r3,9
 8018328:	8822d0fa 	srli	r17,r17,3
 801832c:	8401ffcc 	andi	r16,r16,2047
 8018330:	180ad33a 	srli	r5,r3,12
 8018334:	9100004c 	andi	r4,r18,1
 8018338:	1444b03a 	or	r2,r2,r17
 801833c:	80c1ffcc 	andi	r3,r16,2047
 8018340:	1820953a 	slli	r16,r3,20
 8018344:	20c03fcc 	andi	r3,r4,255
 8018348:	180897fa 	slli	r4,r3,31
 801834c:	00c00434 	movhi	r3,16
 8018350:	18ffffc4 	addi	r3,r3,-1
 8018354:	28c6703a 	and	r3,r5,r3
 8018358:	1c06b03a 	or	r3,r3,r16
 801835c:	1906b03a 	or	r3,r3,r4
 8018360:	dfc00417 	ldw	ra,16(sp)
 8018364:	dcc00317 	ldw	r19,12(sp)
 8018368:	dc800217 	ldw	r18,8(sp)
 801836c:	dc400117 	ldw	r17,4(sp)
 8018370:	dc000017 	ldw	r16,0(sp)
 8018374:	dec00504 	addi	sp,sp,20
 8018378:	f800283a 	ret
 801837c:	0101ffc4 	movi	r4,2047
 8018380:	813fd626 	beq	r16,r4,80182dc <__alt_data_end+0xfc0182dc>
 8018384:	29402034 	orhi	r5,r5,128
 8018388:	01000e04 	movi	r4,56
 801838c:	2080a316 	blt	r4,r2,801861c <__subdf3+0x3c4>
 8018390:	010007c4 	movi	r4,31
 8018394:	2080c616 	blt	r4,r2,80186b0 <__subdf3+0x458>
 8018398:	01000804 	movi	r4,32
 801839c:	2089c83a 	sub	r4,r4,r2
 80183a0:	2910983a 	sll	r8,r5,r4
 80183a4:	308ed83a 	srl	r7,r6,r2
 80183a8:	3108983a 	sll	r4,r6,r4
 80183ac:	2884d83a 	srl	r2,r5,r2
 80183b0:	41ccb03a 	or	r6,r8,r7
 80183b4:	2008c03a 	cmpne	r4,r4,zero
 80183b8:	310cb03a 	or	r6,r6,r4
 80183bc:	898dc83a 	sub	r6,r17,r6
 80183c0:	89a3803a 	cmpltu	r17,r17,r6
 80183c4:	1887c83a 	sub	r3,r3,r2
 80183c8:	1c47c83a 	sub	r3,r3,r17
 80183cc:	3023883a 	mov	r17,r6
 80183d0:	1880202c 	andhi	r2,r3,128
 80183d4:	10002326 	beq	r2,zero,8018464 <__subdf3+0x20c>
 80183d8:	04c02034 	movhi	r19,128
 80183dc:	9cffffc4 	addi	r19,r19,-1
 80183e0:	1ce6703a 	and	r19,r3,r19
 80183e4:	98007a26 	beq	r19,zero,80185d0 <__subdf3+0x378>
 80183e8:	9809883a 	mov	r4,r19
 80183ec:	8018f000 	call	8018f00 <__clzsi2>
 80183f0:	113ffe04 	addi	r4,r2,-8
 80183f4:	00c007c4 	movi	r3,31
 80183f8:	19007b16 	blt	r3,r4,80185e8 <__subdf3+0x390>
 80183fc:	00800804 	movi	r2,32
 8018400:	1105c83a 	sub	r2,r2,r4
 8018404:	8884d83a 	srl	r2,r17,r2
 8018408:	9906983a 	sll	r3,r19,r4
 801840c:	8922983a 	sll	r17,r17,r4
 8018410:	10c4b03a 	or	r2,r2,r3
 8018414:	24007816 	blt	r4,r16,80185f8 <__subdf3+0x3a0>
 8018418:	2421c83a 	sub	r16,r4,r16
 801841c:	80c00044 	addi	r3,r16,1
 8018420:	010007c4 	movi	r4,31
 8018424:	20c09516 	blt	r4,r3,801867c <__subdf3+0x424>
 8018428:	01400804 	movi	r5,32
 801842c:	28cbc83a 	sub	r5,r5,r3
 8018430:	88c8d83a 	srl	r4,r17,r3
 8018434:	8962983a 	sll	r17,r17,r5
 8018438:	114a983a 	sll	r5,r2,r5
 801843c:	10c6d83a 	srl	r3,r2,r3
 8018440:	8804c03a 	cmpne	r2,r17,zero
 8018444:	290ab03a 	or	r5,r5,r4
 8018448:	28a2b03a 	or	r17,r5,r2
 801844c:	0021883a 	mov	r16,zero
 8018450:	003fa206 	br	80182dc <__alt_data_end+0xfc0182dc>
 8018454:	2090b03a 	or	r8,r4,r2
 8018458:	40018e26 	beq	r8,zero,8018a94 <__subdf3+0x83c>
 801845c:	1007883a 	mov	r3,r2
 8018460:	2023883a 	mov	r17,r4
 8018464:	888001cc 	andi	r2,r17,7
 8018468:	103f9e1e 	bne	r2,zero,80182e4 <__alt_data_end+0xfc0182e4>
 801846c:	1804977a 	slli	r2,r3,29
 8018470:	8822d0fa 	srli	r17,r17,3
 8018474:	1810d0fa 	srli	r8,r3,3
 8018478:	9100004c 	andi	r4,r18,1
 801847c:	1444b03a 	or	r2,r2,r17
 8018480:	00c1ffc4 	movi	r3,2047
 8018484:	80c02826 	beq	r16,r3,8018528 <__subdf3+0x2d0>
 8018488:	01400434 	movhi	r5,16
 801848c:	297fffc4 	addi	r5,r5,-1
 8018490:	80e0703a 	and	r16,r16,r3
 8018494:	414a703a 	and	r5,r8,r5
 8018498:	003fa806 	br	801833c <__alt_data_end+0xfc01833c>
 801849c:	0080630e 	bge	zero,r2,801862c <__subdf3+0x3d4>
 80184a0:	48003026 	beq	r9,zero,8018564 <__subdf3+0x30c>
 80184a4:	0101ffc4 	movi	r4,2047
 80184a8:	813f8c26 	beq	r16,r4,80182dc <__alt_data_end+0xfc0182dc>
 80184ac:	29402034 	orhi	r5,r5,128
 80184b0:	01000e04 	movi	r4,56
 80184b4:	2080a90e 	bge	r4,r2,801875c <__subdf3+0x504>
 80184b8:	298cb03a 	or	r6,r5,r6
 80184bc:	3012c03a 	cmpne	r9,r6,zero
 80184c0:	0005883a 	mov	r2,zero
 80184c4:	4c53883a 	add	r9,r9,r17
 80184c8:	4c63803a 	cmpltu	r17,r9,r17
 80184cc:	10c7883a 	add	r3,r2,r3
 80184d0:	88c7883a 	add	r3,r17,r3
 80184d4:	4823883a 	mov	r17,r9
 80184d8:	1880202c 	andhi	r2,r3,128
 80184dc:	1000d026 	beq	r2,zero,8018820 <__subdf3+0x5c8>
 80184e0:	84000044 	addi	r16,r16,1
 80184e4:	0081ffc4 	movi	r2,2047
 80184e8:	8080fe26 	beq	r16,r2,80188e4 <__subdf3+0x68c>
 80184ec:	00bfe034 	movhi	r2,65408
 80184f0:	10bfffc4 	addi	r2,r2,-1
 80184f4:	1886703a 	and	r3,r3,r2
 80184f8:	880ad07a 	srli	r5,r17,1
 80184fc:	180497fa 	slli	r2,r3,31
 8018500:	8900004c 	andi	r4,r17,1
 8018504:	2922b03a 	or	r17,r5,r4
 8018508:	1806d07a 	srli	r3,r3,1
 801850c:	1462b03a 	or	r17,r2,r17
 8018510:	3825883a 	mov	r18,r7
 8018514:	003f7106 	br	80182dc <__alt_data_end+0xfc0182dc>
 8018518:	2984b03a 	or	r2,r5,r6
 801851c:	103f6826 	beq	r2,zero,80182c0 <__alt_data_end+0xfc0182c0>
 8018520:	39c03fcc 	andi	r7,r7,255
 8018524:	003f6706 	br	80182c4 <__alt_data_end+0xfc0182c4>
 8018528:	4086b03a 	or	r3,r8,r2
 801852c:	18015226 	beq	r3,zero,8018a78 <__subdf3+0x820>
 8018530:	00c00434 	movhi	r3,16
 8018534:	41400234 	orhi	r5,r8,8
 8018538:	18ffffc4 	addi	r3,r3,-1
 801853c:	28ca703a 	and	r5,r5,r3
 8018540:	003f7e06 	br	801833c <__alt_data_end+0xfc01833c>
 8018544:	10bfffc4 	addi	r2,r2,-1
 8018548:	1000491e 	bne	r2,zero,8018670 <__subdf3+0x418>
 801854c:	898fc83a 	sub	r7,r17,r6
 8018550:	89e3803a 	cmpltu	r17,r17,r7
 8018554:	1947c83a 	sub	r3,r3,r5
 8018558:	1c47c83a 	sub	r3,r3,r17
 801855c:	3823883a 	mov	r17,r7
 8018560:	003f9b06 	br	80183d0 <__alt_data_end+0xfc0183d0>
 8018564:	2988b03a 	or	r4,r5,r6
 8018568:	203f5c26 	beq	r4,zero,80182dc <__alt_data_end+0xfc0182dc>
 801856c:	10bfffc4 	addi	r2,r2,-1
 8018570:	1000931e 	bne	r2,zero,80187c0 <__subdf3+0x568>
 8018574:	898d883a 	add	r6,r17,r6
 8018578:	3463803a 	cmpltu	r17,r6,r17
 801857c:	1947883a 	add	r3,r3,r5
 8018580:	88c7883a 	add	r3,r17,r3
 8018584:	3023883a 	mov	r17,r6
 8018588:	003fd306 	br	80184d8 <__alt_data_end+0xfc0184d8>
 801858c:	1000541e 	bne	r2,zero,80186e0 <__subdf3+0x488>
 8018590:	80800044 	addi	r2,r16,1
 8018594:	1081ffcc 	andi	r2,r2,2047
 8018598:	01000044 	movi	r4,1
 801859c:	2080a20e 	bge	r4,r2,8018828 <__subdf3+0x5d0>
 80185a0:	8989c83a 	sub	r4,r17,r6
 80185a4:	8905803a 	cmpltu	r2,r17,r4
 80185a8:	1967c83a 	sub	r19,r3,r5
 80185ac:	98a7c83a 	sub	r19,r19,r2
 80185b0:	9880202c 	andhi	r2,r19,128
 80185b4:	10006326 	beq	r2,zero,8018744 <__subdf3+0x4ec>
 80185b8:	3463c83a 	sub	r17,r6,r17
 80185bc:	28c7c83a 	sub	r3,r5,r3
 80185c0:	344d803a 	cmpltu	r6,r6,r17
 80185c4:	19a7c83a 	sub	r19,r3,r6
 80185c8:	3825883a 	mov	r18,r7
 80185cc:	983f861e 	bne	r19,zero,80183e8 <__alt_data_end+0xfc0183e8>
 80185d0:	8809883a 	mov	r4,r17
 80185d4:	8018f000 	call	8018f00 <__clzsi2>
 80185d8:	10800804 	addi	r2,r2,32
 80185dc:	113ffe04 	addi	r4,r2,-8
 80185e0:	00c007c4 	movi	r3,31
 80185e4:	193f850e 	bge	r3,r4,80183fc <__alt_data_end+0xfc0183fc>
 80185e8:	10bff604 	addi	r2,r2,-40
 80185ec:	8884983a 	sll	r2,r17,r2
 80185f0:	0023883a 	mov	r17,zero
 80185f4:	243f880e 	bge	r4,r16,8018418 <__alt_data_end+0xfc018418>
 80185f8:	00ffe034 	movhi	r3,65408
 80185fc:	18ffffc4 	addi	r3,r3,-1
 8018600:	8121c83a 	sub	r16,r16,r4
 8018604:	10c6703a 	and	r3,r2,r3
 8018608:	003f3406 	br	80182dc <__alt_data_end+0xfc0182dc>
 801860c:	9100004c 	andi	r4,r18,1
 8018610:	000b883a 	mov	r5,zero
 8018614:	0005883a 	mov	r2,zero
 8018618:	003f4806 	br	801833c <__alt_data_end+0xfc01833c>
 801861c:	298cb03a 	or	r6,r5,r6
 8018620:	300cc03a 	cmpne	r6,r6,zero
 8018624:	0005883a 	mov	r2,zero
 8018628:	003f6406 	br	80183bc <__alt_data_end+0xfc0183bc>
 801862c:	10009a1e 	bne	r2,zero,8018898 <__subdf3+0x640>
 8018630:	82400044 	addi	r9,r16,1
 8018634:	4881ffcc 	andi	r2,r9,2047
 8018638:	02800044 	movi	r10,1
 801863c:	5080670e 	bge	r10,r2,80187dc <__subdf3+0x584>
 8018640:	0081ffc4 	movi	r2,2047
 8018644:	4880af26 	beq	r9,r2,8018904 <__subdf3+0x6ac>
 8018648:	898d883a 	add	r6,r17,r6
 801864c:	1945883a 	add	r2,r3,r5
 8018650:	3447803a 	cmpltu	r3,r6,r17
 8018654:	1887883a 	add	r3,r3,r2
 8018658:	182297fa 	slli	r17,r3,31
 801865c:	300cd07a 	srli	r6,r6,1
 8018660:	1806d07a 	srli	r3,r3,1
 8018664:	4821883a 	mov	r16,r9
 8018668:	89a2b03a 	or	r17,r17,r6
 801866c:	003f1b06 	br	80182dc <__alt_data_end+0xfc0182dc>
 8018670:	0101ffc4 	movi	r4,2047
 8018674:	813f441e 	bne	r16,r4,8018388 <__alt_data_end+0xfc018388>
 8018678:	003f1806 	br	80182dc <__alt_data_end+0xfc0182dc>
 801867c:	843ff844 	addi	r16,r16,-31
 8018680:	01400804 	movi	r5,32
 8018684:	1408d83a 	srl	r4,r2,r16
 8018688:	19405026 	beq	r3,r5,80187cc <__subdf3+0x574>
 801868c:	01401004 	movi	r5,64
 8018690:	28c7c83a 	sub	r3,r5,r3
 8018694:	10c4983a 	sll	r2,r2,r3
 8018698:	88a2b03a 	or	r17,r17,r2
 801869c:	8822c03a 	cmpne	r17,r17,zero
 80186a0:	2462b03a 	or	r17,r4,r17
 80186a4:	0007883a 	mov	r3,zero
 80186a8:	0021883a 	mov	r16,zero
 80186ac:	003f6d06 	br	8018464 <__alt_data_end+0xfc018464>
 80186b0:	11fff804 	addi	r7,r2,-32
 80186b4:	01000804 	movi	r4,32
 80186b8:	29ced83a 	srl	r7,r5,r7
 80186bc:	11004526 	beq	r2,r4,80187d4 <__subdf3+0x57c>
 80186c0:	01001004 	movi	r4,64
 80186c4:	2089c83a 	sub	r4,r4,r2
 80186c8:	2904983a 	sll	r2,r5,r4
 80186cc:	118cb03a 	or	r6,r2,r6
 80186d0:	300cc03a 	cmpne	r6,r6,zero
 80186d4:	398cb03a 	or	r6,r7,r6
 80186d8:	0005883a 	mov	r2,zero
 80186dc:	003f3706 	br	80183bc <__alt_data_end+0xfc0183bc>
 80186e0:	80002a26 	beq	r16,zero,801878c <__subdf3+0x534>
 80186e4:	0101ffc4 	movi	r4,2047
 80186e8:	49006626 	beq	r9,r4,8018884 <__subdf3+0x62c>
 80186ec:	0085c83a 	sub	r2,zero,r2
 80186f0:	18c02034 	orhi	r3,r3,128
 80186f4:	01000e04 	movi	r4,56
 80186f8:	20807e16 	blt	r4,r2,80188f4 <__subdf3+0x69c>
 80186fc:	010007c4 	movi	r4,31
 8018700:	2080e716 	blt	r4,r2,8018aa0 <__subdf3+0x848>
 8018704:	01000804 	movi	r4,32
 8018708:	2089c83a 	sub	r4,r4,r2
 801870c:	1914983a 	sll	r10,r3,r4
 8018710:	8890d83a 	srl	r8,r17,r2
 8018714:	8908983a 	sll	r4,r17,r4
 8018718:	1884d83a 	srl	r2,r3,r2
 801871c:	5222b03a 	or	r17,r10,r8
 8018720:	2006c03a 	cmpne	r3,r4,zero
 8018724:	88e2b03a 	or	r17,r17,r3
 8018728:	3463c83a 	sub	r17,r6,r17
 801872c:	2885c83a 	sub	r2,r5,r2
 8018730:	344d803a 	cmpltu	r6,r6,r17
 8018734:	1187c83a 	sub	r3,r2,r6
 8018738:	4821883a 	mov	r16,r9
 801873c:	3825883a 	mov	r18,r7
 8018740:	003f2306 	br	80183d0 <__alt_data_end+0xfc0183d0>
 8018744:	24d0b03a 	or	r8,r4,r19
 8018748:	40001b1e 	bne	r8,zero,80187b8 <__subdf3+0x560>
 801874c:	0005883a 	mov	r2,zero
 8018750:	0009883a 	mov	r4,zero
 8018754:	0021883a 	mov	r16,zero
 8018758:	003f4906 	br	8018480 <__alt_data_end+0xfc018480>
 801875c:	010007c4 	movi	r4,31
 8018760:	20803a16 	blt	r4,r2,801884c <__subdf3+0x5f4>
 8018764:	01000804 	movi	r4,32
 8018768:	2089c83a 	sub	r4,r4,r2
 801876c:	2912983a 	sll	r9,r5,r4
 8018770:	3090d83a 	srl	r8,r6,r2
 8018774:	3108983a 	sll	r4,r6,r4
 8018778:	2884d83a 	srl	r2,r5,r2
 801877c:	4a12b03a 	or	r9,r9,r8
 8018780:	2008c03a 	cmpne	r4,r4,zero
 8018784:	4912b03a 	or	r9,r9,r4
 8018788:	003f4e06 	br	80184c4 <__alt_data_end+0xfc0184c4>
 801878c:	1c48b03a 	or	r4,r3,r17
 8018790:	20003c26 	beq	r4,zero,8018884 <__subdf3+0x62c>
 8018794:	0084303a 	nor	r2,zero,r2
 8018798:	1000381e 	bne	r2,zero,801887c <__subdf3+0x624>
 801879c:	3463c83a 	sub	r17,r6,r17
 80187a0:	28c5c83a 	sub	r2,r5,r3
 80187a4:	344d803a 	cmpltu	r6,r6,r17
 80187a8:	1187c83a 	sub	r3,r2,r6
 80187ac:	4821883a 	mov	r16,r9
 80187b0:	3825883a 	mov	r18,r7
 80187b4:	003f0606 	br	80183d0 <__alt_data_end+0xfc0183d0>
 80187b8:	2023883a 	mov	r17,r4
 80187bc:	003f0906 	br	80183e4 <__alt_data_end+0xfc0183e4>
 80187c0:	0101ffc4 	movi	r4,2047
 80187c4:	813f3a1e 	bne	r16,r4,80184b0 <__alt_data_end+0xfc0184b0>
 80187c8:	003ec406 	br	80182dc <__alt_data_end+0xfc0182dc>
 80187cc:	0005883a 	mov	r2,zero
 80187d0:	003fb106 	br	8018698 <__alt_data_end+0xfc018698>
 80187d4:	0005883a 	mov	r2,zero
 80187d8:	003fbc06 	br	80186cc <__alt_data_end+0xfc0186cc>
 80187dc:	1c44b03a 	or	r2,r3,r17
 80187e0:	80008e1e 	bne	r16,zero,8018a1c <__subdf3+0x7c4>
 80187e4:	1000c826 	beq	r2,zero,8018b08 <__subdf3+0x8b0>
 80187e8:	2984b03a 	or	r2,r5,r6
 80187ec:	103ebb26 	beq	r2,zero,80182dc <__alt_data_end+0xfc0182dc>
 80187f0:	8989883a 	add	r4,r17,r6
 80187f4:	1945883a 	add	r2,r3,r5
 80187f8:	2447803a 	cmpltu	r3,r4,r17
 80187fc:	1887883a 	add	r3,r3,r2
 8018800:	1880202c 	andhi	r2,r3,128
 8018804:	2023883a 	mov	r17,r4
 8018808:	103f1626 	beq	r2,zero,8018464 <__alt_data_end+0xfc018464>
 801880c:	00bfe034 	movhi	r2,65408
 8018810:	10bfffc4 	addi	r2,r2,-1
 8018814:	5021883a 	mov	r16,r10
 8018818:	1886703a 	and	r3,r3,r2
 801881c:	003eaf06 	br	80182dc <__alt_data_end+0xfc0182dc>
 8018820:	3825883a 	mov	r18,r7
 8018824:	003f0f06 	br	8018464 <__alt_data_end+0xfc018464>
 8018828:	1c44b03a 	or	r2,r3,r17
 801882c:	8000251e 	bne	r16,zero,80188c4 <__subdf3+0x66c>
 8018830:	1000661e 	bne	r2,zero,80189cc <__subdf3+0x774>
 8018834:	2990b03a 	or	r8,r5,r6
 8018838:	40009626 	beq	r8,zero,8018a94 <__subdf3+0x83c>
 801883c:	2807883a 	mov	r3,r5
 8018840:	3023883a 	mov	r17,r6
 8018844:	3825883a 	mov	r18,r7
 8018848:	003ea406 	br	80182dc <__alt_data_end+0xfc0182dc>
 801884c:	127ff804 	addi	r9,r2,-32
 8018850:	01000804 	movi	r4,32
 8018854:	2a52d83a 	srl	r9,r5,r9
 8018858:	11008c26 	beq	r2,r4,8018a8c <__subdf3+0x834>
 801885c:	01001004 	movi	r4,64
 8018860:	2085c83a 	sub	r2,r4,r2
 8018864:	2884983a 	sll	r2,r5,r2
 8018868:	118cb03a 	or	r6,r2,r6
 801886c:	300cc03a 	cmpne	r6,r6,zero
 8018870:	4992b03a 	or	r9,r9,r6
 8018874:	0005883a 	mov	r2,zero
 8018878:	003f1206 	br	80184c4 <__alt_data_end+0xfc0184c4>
 801887c:	0101ffc4 	movi	r4,2047
 8018880:	493f9c1e 	bne	r9,r4,80186f4 <__alt_data_end+0xfc0186f4>
 8018884:	2807883a 	mov	r3,r5
 8018888:	3023883a 	mov	r17,r6
 801888c:	4821883a 	mov	r16,r9
 8018890:	3825883a 	mov	r18,r7
 8018894:	003e9106 	br	80182dc <__alt_data_end+0xfc0182dc>
 8018898:	80001f1e 	bne	r16,zero,8018918 <__subdf3+0x6c0>
 801889c:	1c48b03a 	or	r4,r3,r17
 80188a0:	20005a26 	beq	r4,zero,8018a0c <__subdf3+0x7b4>
 80188a4:	0084303a 	nor	r2,zero,r2
 80188a8:	1000561e 	bne	r2,zero,8018a04 <__subdf3+0x7ac>
 80188ac:	89a3883a 	add	r17,r17,r6
 80188b0:	1945883a 	add	r2,r3,r5
 80188b4:	898d803a 	cmpltu	r6,r17,r6
 80188b8:	3087883a 	add	r3,r6,r2
 80188bc:	4821883a 	mov	r16,r9
 80188c0:	003f0506 	br	80184d8 <__alt_data_end+0xfc0184d8>
 80188c4:	10002b1e 	bne	r2,zero,8018974 <__subdf3+0x71c>
 80188c8:	2984b03a 	or	r2,r5,r6
 80188cc:	10008026 	beq	r2,zero,8018ad0 <__subdf3+0x878>
 80188d0:	2807883a 	mov	r3,r5
 80188d4:	3023883a 	mov	r17,r6
 80188d8:	3825883a 	mov	r18,r7
 80188dc:	0401ffc4 	movi	r16,2047
 80188e0:	003e7e06 	br	80182dc <__alt_data_end+0xfc0182dc>
 80188e4:	3809883a 	mov	r4,r7
 80188e8:	0011883a 	mov	r8,zero
 80188ec:	0005883a 	mov	r2,zero
 80188f0:	003ee306 	br	8018480 <__alt_data_end+0xfc018480>
 80188f4:	1c62b03a 	or	r17,r3,r17
 80188f8:	8822c03a 	cmpne	r17,r17,zero
 80188fc:	0005883a 	mov	r2,zero
 8018900:	003f8906 	br	8018728 <__alt_data_end+0xfc018728>
 8018904:	3809883a 	mov	r4,r7
 8018908:	4821883a 	mov	r16,r9
 801890c:	0011883a 	mov	r8,zero
 8018910:	0005883a 	mov	r2,zero
 8018914:	003eda06 	br	8018480 <__alt_data_end+0xfc018480>
 8018918:	0101ffc4 	movi	r4,2047
 801891c:	49003b26 	beq	r9,r4,8018a0c <__subdf3+0x7b4>
 8018920:	0085c83a 	sub	r2,zero,r2
 8018924:	18c02034 	orhi	r3,r3,128
 8018928:	01000e04 	movi	r4,56
 801892c:	20806e16 	blt	r4,r2,8018ae8 <__subdf3+0x890>
 8018930:	010007c4 	movi	r4,31
 8018934:	20807716 	blt	r4,r2,8018b14 <__subdf3+0x8bc>
 8018938:	01000804 	movi	r4,32
 801893c:	2089c83a 	sub	r4,r4,r2
 8018940:	1914983a 	sll	r10,r3,r4
 8018944:	8890d83a 	srl	r8,r17,r2
 8018948:	8908983a 	sll	r4,r17,r4
 801894c:	1884d83a 	srl	r2,r3,r2
 8018950:	5222b03a 	or	r17,r10,r8
 8018954:	2006c03a 	cmpne	r3,r4,zero
 8018958:	88e2b03a 	or	r17,r17,r3
 801895c:	89a3883a 	add	r17,r17,r6
 8018960:	1145883a 	add	r2,r2,r5
 8018964:	898d803a 	cmpltu	r6,r17,r6
 8018968:	3087883a 	add	r3,r6,r2
 801896c:	4821883a 	mov	r16,r9
 8018970:	003ed906 	br	80184d8 <__alt_data_end+0xfc0184d8>
 8018974:	2984b03a 	or	r2,r5,r6
 8018978:	10004226 	beq	r2,zero,8018a84 <__subdf3+0x82c>
 801897c:	1808d0fa 	srli	r4,r3,3
 8018980:	8822d0fa 	srli	r17,r17,3
 8018984:	1806977a 	slli	r3,r3,29
 8018988:	2080022c 	andhi	r2,r4,8
 801898c:	1c62b03a 	or	r17,r3,r17
 8018990:	10000826 	beq	r2,zero,80189b4 <__subdf3+0x75c>
 8018994:	2812d0fa 	srli	r9,r5,3
 8018998:	4880022c 	andhi	r2,r9,8
 801899c:	1000051e 	bne	r2,zero,80189b4 <__subdf3+0x75c>
 80189a0:	300cd0fa 	srli	r6,r6,3
 80189a4:	2804977a 	slli	r2,r5,29
 80189a8:	4809883a 	mov	r4,r9
 80189ac:	3825883a 	mov	r18,r7
 80189b0:	11a2b03a 	or	r17,r2,r6
 80189b4:	8806d77a 	srli	r3,r17,29
 80189b8:	200890fa 	slli	r4,r4,3
 80189bc:	882290fa 	slli	r17,r17,3
 80189c0:	0401ffc4 	movi	r16,2047
 80189c4:	1906b03a 	or	r3,r3,r4
 80189c8:	003e4406 	br	80182dc <__alt_data_end+0xfc0182dc>
 80189cc:	2984b03a 	or	r2,r5,r6
 80189d0:	103e4226 	beq	r2,zero,80182dc <__alt_data_end+0xfc0182dc>
 80189d4:	8989c83a 	sub	r4,r17,r6
 80189d8:	8911803a 	cmpltu	r8,r17,r4
 80189dc:	1945c83a 	sub	r2,r3,r5
 80189e0:	1205c83a 	sub	r2,r2,r8
 80189e4:	1200202c 	andhi	r8,r2,128
 80189e8:	403e9a26 	beq	r8,zero,8018454 <__alt_data_end+0xfc018454>
 80189ec:	3463c83a 	sub	r17,r6,r17
 80189f0:	28c5c83a 	sub	r2,r5,r3
 80189f4:	344d803a 	cmpltu	r6,r6,r17
 80189f8:	1187c83a 	sub	r3,r2,r6
 80189fc:	3825883a 	mov	r18,r7
 8018a00:	003e3606 	br	80182dc <__alt_data_end+0xfc0182dc>
 8018a04:	0101ffc4 	movi	r4,2047
 8018a08:	493fc71e 	bne	r9,r4,8018928 <__alt_data_end+0xfc018928>
 8018a0c:	2807883a 	mov	r3,r5
 8018a10:	3023883a 	mov	r17,r6
 8018a14:	4821883a 	mov	r16,r9
 8018a18:	003e3006 	br	80182dc <__alt_data_end+0xfc0182dc>
 8018a1c:	10003626 	beq	r2,zero,8018af8 <__subdf3+0x8a0>
 8018a20:	2984b03a 	or	r2,r5,r6
 8018a24:	10001726 	beq	r2,zero,8018a84 <__subdf3+0x82c>
 8018a28:	1808d0fa 	srli	r4,r3,3
 8018a2c:	8822d0fa 	srli	r17,r17,3
 8018a30:	1806977a 	slli	r3,r3,29
 8018a34:	2080022c 	andhi	r2,r4,8
 8018a38:	1c62b03a 	or	r17,r3,r17
 8018a3c:	10000726 	beq	r2,zero,8018a5c <__subdf3+0x804>
 8018a40:	2812d0fa 	srli	r9,r5,3
 8018a44:	4880022c 	andhi	r2,r9,8
 8018a48:	1000041e 	bne	r2,zero,8018a5c <__subdf3+0x804>
 8018a4c:	300cd0fa 	srli	r6,r6,3
 8018a50:	2804977a 	slli	r2,r5,29
 8018a54:	4809883a 	mov	r4,r9
 8018a58:	11a2b03a 	or	r17,r2,r6
 8018a5c:	8806d77a 	srli	r3,r17,29
 8018a60:	200890fa 	slli	r4,r4,3
 8018a64:	882290fa 	slli	r17,r17,3
 8018a68:	3825883a 	mov	r18,r7
 8018a6c:	1906b03a 	or	r3,r3,r4
 8018a70:	0401ffc4 	movi	r16,2047
 8018a74:	003e1906 	br	80182dc <__alt_data_end+0xfc0182dc>
 8018a78:	000b883a 	mov	r5,zero
 8018a7c:	0005883a 	mov	r2,zero
 8018a80:	003e2e06 	br	801833c <__alt_data_end+0xfc01833c>
 8018a84:	0401ffc4 	movi	r16,2047
 8018a88:	003e1406 	br	80182dc <__alt_data_end+0xfc0182dc>
 8018a8c:	0005883a 	mov	r2,zero
 8018a90:	003f7506 	br	8018868 <__alt_data_end+0xfc018868>
 8018a94:	0005883a 	mov	r2,zero
 8018a98:	0009883a 	mov	r4,zero
 8018a9c:	003e7806 	br	8018480 <__alt_data_end+0xfc018480>
 8018aa0:	123ff804 	addi	r8,r2,-32
 8018aa4:	01000804 	movi	r4,32
 8018aa8:	1a10d83a 	srl	r8,r3,r8
 8018aac:	11002526 	beq	r2,r4,8018b44 <__subdf3+0x8ec>
 8018ab0:	01001004 	movi	r4,64
 8018ab4:	2085c83a 	sub	r2,r4,r2
 8018ab8:	1884983a 	sll	r2,r3,r2
 8018abc:	1444b03a 	or	r2,r2,r17
 8018ac0:	1004c03a 	cmpne	r2,r2,zero
 8018ac4:	40a2b03a 	or	r17,r8,r2
 8018ac8:	0005883a 	mov	r2,zero
 8018acc:	003f1606 	br	8018728 <__alt_data_end+0xfc018728>
 8018ad0:	02000434 	movhi	r8,16
 8018ad4:	0009883a 	mov	r4,zero
 8018ad8:	423fffc4 	addi	r8,r8,-1
 8018adc:	00bfffc4 	movi	r2,-1
 8018ae0:	0401ffc4 	movi	r16,2047
 8018ae4:	003e6606 	br	8018480 <__alt_data_end+0xfc018480>
 8018ae8:	1c62b03a 	or	r17,r3,r17
 8018aec:	8822c03a 	cmpne	r17,r17,zero
 8018af0:	0005883a 	mov	r2,zero
 8018af4:	003f9906 	br	801895c <__alt_data_end+0xfc01895c>
 8018af8:	2807883a 	mov	r3,r5
 8018afc:	3023883a 	mov	r17,r6
 8018b00:	0401ffc4 	movi	r16,2047
 8018b04:	003df506 	br	80182dc <__alt_data_end+0xfc0182dc>
 8018b08:	2807883a 	mov	r3,r5
 8018b0c:	3023883a 	mov	r17,r6
 8018b10:	003df206 	br	80182dc <__alt_data_end+0xfc0182dc>
 8018b14:	123ff804 	addi	r8,r2,-32
 8018b18:	01000804 	movi	r4,32
 8018b1c:	1a10d83a 	srl	r8,r3,r8
 8018b20:	11000a26 	beq	r2,r4,8018b4c <__subdf3+0x8f4>
 8018b24:	01001004 	movi	r4,64
 8018b28:	2085c83a 	sub	r2,r4,r2
 8018b2c:	1884983a 	sll	r2,r3,r2
 8018b30:	1444b03a 	or	r2,r2,r17
 8018b34:	1004c03a 	cmpne	r2,r2,zero
 8018b38:	40a2b03a 	or	r17,r8,r2
 8018b3c:	0005883a 	mov	r2,zero
 8018b40:	003f8606 	br	801895c <__alt_data_end+0xfc01895c>
 8018b44:	0005883a 	mov	r2,zero
 8018b48:	003fdc06 	br	8018abc <__alt_data_end+0xfc018abc>
 8018b4c:	0005883a 	mov	r2,zero
 8018b50:	003ff706 	br	8018b30 <__alt_data_end+0xfc018b30>

08018b54 <__fixdfsi>:
 8018b54:	280cd53a 	srli	r6,r5,20
 8018b58:	00c00434 	movhi	r3,16
 8018b5c:	18ffffc4 	addi	r3,r3,-1
 8018b60:	3181ffcc 	andi	r6,r6,2047
 8018b64:	01c0ff84 	movi	r7,1022
 8018b68:	28c6703a 	and	r3,r5,r3
 8018b6c:	280ad7fa 	srli	r5,r5,31
 8018b70:	3980120e 	bge	r7,r6,8018bbc <__fixdfsi+0x68>
 8018b74:	00810744 	movi	r2,1053
 8018b78:	11800c16 	blt	r2,r6,8018bac <__fixdfsi+0x58>
 8018b7c:	00810cc4 	movi	r2,1075
 8018b80:	1185c83a 	sub	r2,r2,r6
 8018b84:	01c007c4 	movi	r7,31
 8018b88:	18c00434 	orhi	r3,r3,16
 8018b8c:	38800d16 	blt	r7,r2,8018bc4 <__fixdfsi+0x70>
 8018b90:	31befb44 	addi	r6,r6,-1043
 8018b94:	2084d83a 	srl	r2,r4,r2
 8018b98:	1986983a 	sll	r3,r3,r6
 8018b9c:	1884b03a 	or	r2,r3,r2
 8018ba0:	28000726 	beq	r5,zero,8018bc0 <__fixdfsi+0x6c>
 8018ba4:	0085c83a 	sub	r2,zero,r2
 8018ba8:	f800283a 	ret
 8018bac:	00a00034 	movhi	r2,32768
 8018bb0:	10bfffc4 	addi	r2,r2,-1
 8018bb4:	2885883a 	add	r2,r5,r2
 8018bb8:	f800283a 	ret
 8018bbc:	0005883a 	mov	r2,zero
 8018bc0:	f800283a 	ret
 8018bc4:	008104c4 	movi	r2,1043
 8018bc8:	1185c83a 	sub	r2,r2,r6
 8018bcc:	1884d83a 	srl	r2,r3,r2
 8018bd0:	003ff306 	br	8018ba0 <__alt_data_end+0xfc018ba0>

08018bd4 <__floatsidf>:
 8018bd4:	defffd04 	addi	sp,sp,-12
 8018bd8:	dfc00215 	stw	ra,8(sp)
 8018bdc:	dc400115 	stw	r17,4(sp)
 8018be0:	dc000015 	stw	r16,0(sp)
 8018be4:	20002b26 	beq	r4,zero,8018c94 <__floatsidf+0xc0>
 8018be8:	2023883a 	mov	r17,r4
 8018bec:	2020d7fa 	srli	r16,r4,31
 8018bf0:	20002d16 	blt	r4,zero,8018ca8 <__floatsidf+0xd4>
 8018bf4:	8809883a 	mov	r4,r17
 8018bf8:	8018f000 	call	8018f00 <__clzsi2>
 8018bfc:	01410784 	movi	r5,1054
 8018c00:	288bc83a 	sub	r5,r5,r2
 8018c04:	01010cc4 	movi	r4,1075
 8018c08:	2149c83a 	sub	r4,r4,r5
 8018c0c:	00c007c4 	movi	r3,31
 8018c10:	1900160e 	bge	r3,r4,8018c6c <__floatsidf+0x98>
 8018c14:	00c104c4 	movi	r3,1043
 8018c18:	1947c83a 	sub	r3,r3,r5
 8018c1c:	88c6983a 	sll	r3,r17,r3
 8018c20:	00800434 	movhi	r2,16
 8018c24:	10bfffc4 	addi	r2,r2,-1
 8018c28:	1886703a 	and	r3,r3,r2
 8018c2c:	2941ffcc 	andi	r5,r5,2047
 8018c30:	800d883a 	mov	r6,r16
 8018c34:	0005883a 	mov	r2,zero
 8018c38:	280a953a 	slli	r5,r5,20
 8018c3c:	31803fcc 	andi	r6,r6,255
 8018c40:	01000434 	movhi	r4,16
 8018c44:	300c97fa 	slli	r6,r6,31
 8018c48:	213fffc4 	addi	r4,r4,-1
 8018c4c:	1906703a 	and	r3,r3,r4
 8018c50:	1946b03a 	or	r3,r3,r5
 8018c54:	1986b03a 	or	r3,r3,r6
 8018c58:	dfc00217 	ldw	ra,8(sp)
 8018c5c:	dc400117 	ldw	r17,4(sp)
 8018c60:	dc000017 	ldw	r16,0(sp)
 8018c64:	dec00304 	addi	sp,sp,12
 8018c68:	f800283a 	ret
 8018c6c:	00c002c4 	movi	r3,11
 8018c70:	1887c83a 	sub	r3,r3,r2
 8018c74:	88c6d83a 	srl	r3,r17,r3
 8018c78:	8904983a 	sll	r2,r17,r4
 8018c7c:	01000434 	movhi	r4,16
 8018c80:	213fffc4 	addi	r4,r4,-1
 8018c84:	2941ffcc 	andi	r5,r5,2047
 8018c88:	1906703a 	and	r3,r3,r4
 8018c8c:	800d883a 	mov	r6,r16
 8018c90:	003fe906 	br	8018c38 <__alt_data_end+0xfc018c38>
 8018c94:	000d883a 	mov	r6,zero
 8018c98:	000b883a 	mov	r5,zero
 8018c9c:	0007883a 	mov	r3,zero
 8018ca0:	0005883a 	mov	r2,zero
 8018ca4:	003fe406 	br	8018c38 <__alt_data_end+0xfc018c38>
 8018ca8:	0123c83a 	sub	r17,zero,r4
 8018cac:	003fd106 	br	8018bf4 <__alt_data_end+0xfc018bf4>

08018cb0 <__floatunsidf>:
 8018cb0:	defffe04 	addi	sp,sp,-8
 8018cb4:	dc000015 	stw	r16,0(sp)
 8018cb8:	dfc00115 	stw	ra,4(sp)
 8018cbc:	2021883a 	mov	r16,r4
 8018cc0:	20002226 	beq	r4,zero,8018d4c <__floatunsidf+0x9c>
 8018cc4:	8018f000 	call	8018f00 <__clzsi2>
 8018cc8:	01010784 	movi	r4,1054
 8018ccc:	2089c83a 	sub	r4,r4,r2
 8018cd0:	01810cc4 	movi	r6,1075
 8018cd4:	310dc83a 	sub	r6,r6,r4
 8018cd8:	00c007c4 	movi	r3,31
 8018cdc:	1980120e 	bge	r3,r6,8018d28 <__floatunsidf+0x78>
 8018ce0:	00c104c4 	movi	r3,1043
 8018ce4:	1907c83a 	sub	r3,r3,r4
 8018ce8:	80ca983a 	sll	r5,r16,r3
 8018cec:	00800434 	movhi	r2,16
 8018cf0:	10bfffc4 	addi	r2,r2,-1
 8018cf4:	2101ffcc 	andi	r4,r4,2047
 8018cf8:	0021883a 	mov	r16,zero
 8018cfc:	288a703a 	and	r5,r5,r2
 8018d00:	2008953a 	slli	r4,r4,20
 8018d04:	00c00434 	movhi	r3,16
 8018d08:	18ffffc4 	addi	r3,r3,-1
 8018d0c:	28c6703a 	and	r3,r5,r3
 8018d10:	8005883a 	mov	r2,r16
 8018d14:	1906b03a 	or	r3,r3,r4
 8018d18:	dfc00117 	ldw	ra,4(sp)
 8018d1c:	dc000017 	ldw	r16,0(sp)
 8018d20:	dec00204 	addi	sp,sp,8
 8018d24:	f800283a 	ret
 8018d28:	00c002c4 	movi	r3,11
 8018d2c:	188bc83a 	sub	r5,r3,r2
 8018d30:	814ad83a 	srl	r5,r16,r5
 8018d34:	00c00434 	movhi	r3,16
 8018d38:	18ffffc4 	addi	r3,r3,-1
 8018d3c:	81a0983a 	sll	r16,r16,r6
 8018d40:	2101ffcc 	andi	r4,r4,2047
 8018d44:	28ca703a 	and	r5,r5,r3
 8018d48:	003fed06 	br	8018d00 <__alt_data_end+0xfc018d00>
 8018d4c:	0009883a 	mov	r4,zero
 8018d50:	000b883a 	mov	r5,zero
 8018d54:	003fea06 	br	8018d00 <__alt_data_end+0xfc018d00>

08018d58 <__truncdfsf2>:
 8018d58:	2810d53a 	srli	r8,r5,20
 8018d5c:	01c00434 	movhi	r7,16
 8018d60:	39ffffc4 	addi	r7,r7,-1
 8018d64:	29ce703a 	and	r7,r5,r7
 8018d68:	4201ffcc 	andi	r8,r8,2047
 8018d6c:	380e90fa 	slli	r7,r7,3
 8018d70:	200cd77a 	srli	r6,r4,29
 8018d74:	42400044 	addi	r9,r8,1
 8018d78:	4a41ffcc 	andi	r9,r9,2047
 8018d7c:	00c00044 	movi	r3,1
 8018d80:	280ad7fa 	srli	r5,r5,31
 8018d84:	31ceb03a 	or	r7,r6,r7
 8018d88:	200490fa 	slli	r2,r4,3
 8018d8c:	1a40230e 	bge	r3,r9,8018e1c <__truncdfsf2+0xc4>
 8018d90:	40ff2004 	addi	r3,r8,-896
 8018d94:	01803f84 	movi	r6,254
 8018d98:	30c01516 	blt	r6,r3,8018df0 <__truncdfsf2+0x98>
 8018d9c:	00c0380e 	bge	zero,r3,8018e80 <__truncdfsf2+0x128>
 8018da0:	200c91ba 	slli	r6,r4,6
 8018da4:	380e90fa 	slli	r7,r7,3
 8018da8:	1004d77a 	srli	r2,r2,29
 8018dac:	300cc03a 	cmpne	r6,r6,zero
 8018db0:	31ccb03a 	or	r6,r6,r7
 8018db4:	308cb03a 	or	r6,r6,r2
 8018db8:	308001cc 	andi	r2,r6,7
 8018dbc:	10000426 	beq	r2,zero,8018dd0 <__truncdfsf2+0x78>
 8018dc0:	308003cc 	andi	r2,r6,15
 8018dc4:	01000104 	movi	r4,4
 8018dc8:	11000126 	beq	r2,r4,8018dd0 <__truncdfsf2+0x78>
 8018dcc:	31800104 	addi	r6,r6,4
 8018dd0:	3081002c 	andhi	r2,r6,1024
 8018dd4:	10001626 	beq	r2,zero,8018e30 <__truncdfsf2+0xd8>
 8018dd8:	18c00044 	addi	r3,r3,1
 8018ddc:	00803fc4 	movi	r2,255
 8018de0:	18800326 	beq	r3,r2,8018df0 <__truncdfsf2+0x98>
 8018de4:	300c91ba 	slli	r6,r6,6
 8018de8:	300cd27a 	srli	r6,r6,9
 8018dec:	00000206 	br	8018df8 <__truncdfsf2+0xa0>
 8018df0:	00ffffc4 	movi	r3,-1
 8018df4:	000d883a 	mov	r6,zero
 8018df8:	18c03fcc 	andi	r3,r3,255
 8018dfc:	180895fa 	slli	r4,r3,23
 8018e00:	00c02034 	movhi	r3,128
 8018e04:	280a97fa 	slli	r5,r5,31
 8018e08:	18ffffc4 	addi	r3,r3,-1
 8018e0c:	30c6703a 	and	r3,r6,r3
 8018e10:	1906b03a 	or	r3,r3,r4
 8018e14:	1944b03a 	or	r2,r3,r5
 8018e18:	f800283a 	ret
 8018e1c:	40000b1e 	bne	r8,zero,8018e4c <__truncdfsf2+0xf4>
 8018e20:	388cb03a 	or	r6,r7,r2
 8018e24:	0007883a 	mov	r3,zero
 8018e28:	30000426 	beq	r6,zero,8018e3c <__truncdfsf2+0xe4>
 8018e2c:	01800144 	movi	r6,5
 8018e30:	00803fc4 	movi	r2,255
 8018e34:	300cd0fa 	srli	r6,r6,3
 8018e38:	18800a26 	beq	r3,r2,8018e64 <__truncdfsf2+0x10c>
 8018e3c:	00802034 	movhi	r2,128
 8018e40:	10bfffc4 	addi	r2,r2,-1
 8018e44:	308c703a 	and	r6,r6,r2
 8018e48:	003feb06 	br	8018df8 <__alt_data_end+0xfc018df8>
 8018e4c:	3888b03a 	or	r4,r7,r2
 8018e50:	203fe726 	beq	r4,zero,8018df0 <__alt_data_end+0xfc018df0>
 8018e54:	380c90fa 	slli	r6,r7,3
 8018e58:	00c03fc4 	movi	r3,255
 8018e5c:	31808034 	orhi	r6,r6,512
 8018e60:	003fd506 	br	8018db8 <__alt_data_end+0xfc018db8>
 8018e64:	303fe226 	beq	r6,zero,8018df0 <__alt_data_end+0xfc018df0>
 8018e68:	00802034 	movhi	r2,128
 8018e6c:	31801034 	orhi	r6,r6,64
 8018e70:	10bfffc4 	addi	r2,r2,-1
 8018e74:	00ffffc4 	movi	r3,-1
 8018e78:	308c703a 	and	r6,r6,r2
 8018e7c:	003fde06 	br	8018df8 <__alt_data_end+0xfc018df8>
 8018e80:	013ffa44 	movi	r4,-23
 8018e84:	19000e16 	blt	r3,r4,8018ec0 <__truncdfsf2+0x168>
 8018e88:	01000784 	movi	r4,30
 8018e8c:	20c9c83a 	sub	r4,r4,r3
 8018e90:	018007c4 	movi	r6,31
 8018e94:	39c02034 	orhi	r7,r7,128
 8018e98:	31000b16 	blt	r6,r4,8018ec8 <__truncdfsf2+0x170>
 8018e9c:	423f2084 	addi	r8,r8,-894
 8018ea0:	120c983a 	sll	r6,r2,r8
 8018ea4:	3a0e983a 	sll	r7,r7,r8
 8018ea8:	1104d83a 	srl	r2,r2,r4
 8018eac:	300cc03a 	cmpne	r6,r6,zero
 8018eb0:	31ceb03a 	or	r7,r6,r7
 8018eb4:	388cb03a 	or	r6,r7,r2
 8018eb8:	0007883a 	mov	r3,zero
 8018ebc:	003fbe06 	br	8018db8 <__alt_data_end+0xfc018db8>
 8018ec0:	0007883a 	mov	r3,zero
 8018ec4:	003fd906 	br	8018e2c <__alt_data_end+0xfc018e2c>
 8018ec8:	01bfff84 	movi	r6,-2
 8018ecc:	30cdc83a 	sub	r6,r6,r3
 8018ed0:	00c00804 	movi	r3,32
 8018ed4:	398cd83a 	srl	r6,r7,r6
 8018ed8:	20c00726 	beq	r4,r3,8018ef8 <__truncdfsf2+0x1a0>
 8018edc:	423f2884 	addi	r8,r8,-862
 8018ee0:	3a0e983a 	sll	r7,r7,r8
 8018ee4:	3884b03a 	or	r2,r7,r2
 8018ee8:	1004c03a 	cmpne	r2,r2,zero
 8018eec:	118cb03a 	or	r6,r2,r6
 8018ef0:	0007883a 	mov	r3,zero
 8018ef4:	003fb006 	br	8018db8 <__alt_data_end+0xfc018db8>
 8018ef8:	000f883a 	mov	r7,zero
 8018efc:	003ff906 	br	8018ee4 <__alt_data_end+0xfc018ee4>

08018f00 <__clzsi2>:
 8018f00:	00bfffd4 	movui	r2,65535
 8018f04:	11000536 	bltu	r2,r4,8018f1c <__clzsi2+0x1c>
 8018f08:	00803fc4 	movi	r2,255
 8018f0c:	11000f36 	bltu	r2,r4,8018f4c <__clzsi2+0x4c>
 8018f10:	00800804 	movi	r2,32
 8018f14:	0007883a 	mov	r3,zero
 8018f18:	00000506 	br	8018f30 <__clzsi2+0x30>
 8018f1c:	00804034 	movhi	r2,256
 8018f20:	10bfffc4 	addi	r2,r2,-1
 8018f24:	11000c2e 	bgeu	r2,r4,8018f58 <__clzsi2+0x58>
 8018f28:	00800204 	movi	r2,8
 8018f2c:	00c00604 	movi	r3,24
 8018f30:	20c8d83a 	srl	r4,r4,r3
 8018f34:	00c200b4 	movhi	r3,2050
 8018f38:	18f06e04 	addi	r3,r3,-15944
 8018f3c:	1909883a 	add	r4,r3,r4
 8018f40:	20c00003 	ldbu	r3,0(r4)
 8018f44:	10c5c83a 	sub	r2,r2,r3
 8018f48:	f800283a 	ret
 8018f4c:	00800604 	movi	r2,24
 8018f50:	00c00204 	movi	r3,8
 8018f54:	003ff606 	br	8018f30 <__alt_data_end+0xfc018f30>
 8018f58:	00800404 	movi	r2,16
 8018f5c:	1007883a 	mov	r3,r2
 8018f60:	003ff306 	br	8018f30 <__alt_data_end+0xfc018f30>

08018f64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018f64:	defffe04 	addi	sp,sp,-8
 8018f68:	dfc00115 	stw	ra,4(sp)
 8018f6c:	df000015 	stw	fp,0(sp)
 8018f70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018f74:	d0a01017 	ldw	r2,-32704(gp)
 8018f78:	10000326 	beq	r2,zero,8018f88 <alt_get_errno+0x24>
 8018f7c:	d0a01017 	ldw	r2,-32704(gp)
 8018f80:	103ee83a 	callr	r2
 8018f84:	00000106 	br	8018f8c <alt_get_errno+0x28>
 8018f88:	d0a6e904 	addi	r2,gp,-25692
}
 8018f8c:	e037883a 	mov	sp,fp
 8018f90:	dfc00117 	ldw	ra,4(sp)
 8018f94:	df000017 	ldw	fp,0(sp)
 8018f98:	dec00204 	addi	sp,sp,8
 8018f9c:	f800283a 	ret

08018fa0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8018fa0:	defffb04 	addi	sp,sp,-20
 8018fa4:	dfc00415 	stw	ra,16(sp)
 8018fa8:	df000315 	stw	fp,12(sp)
 8018fac:	df000304 	addi	fp,sp,12
 8018fb0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8018fb4:	e0bfff17 	ldw	r2,-4(fp)
 8018fb8:	10000816 	blt	r2,zero,8018fdc <close+0x3c>
 8018fbc:	01400304 	movi	r5,12
 8018fc0:	e13fff17 	ldw	r4,-4(fp)
 8018fc4:	80028f40 	call	80028f4 <__mulsi3>
 8018fc8:	1007883a 	mov	r3,r2
 8018fcc:	008200b4 	movhi	r2,2050
 8018fd0:	10b2f804 	addi	r2,r2,-13344
 8018fd4:	1885883a 	add	r2,r3,r2
 8018fd8:	00000106 	br	8018fe0 <close+0x40>
 8018fdc:	0005883a 	mov	r2,zero
 8018fe0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8018fe4:	e0bffd17 	ldw	r2,-12(fp)
 8018fe8:	10001926 	beq	r2,zero,8019050 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8018fec:	e0bffd17 	ldw	r2,-12(fp)
 8018ff0:	10800017 	ldw	r2,0(r2)
 8018ff4:	10800417 	ldw	r2,16(r2)
 8018ff8:	10000626 	beq	r2,zero,8019014 <close+0x74>
 8018ffc:	e0bffd17 	ldw	r2,-12(fp)
 8019000:	10800017 	ldw	r2,0(r2)
 8019004:	10800417 	ldw	r2,16(r2)
 8019008:	e13ffd17 	ldw	r4,-12(fp)
 801900c:	103ee83a 	callr	r2
 8019010:	00000106 	br	8019018 <close+0x78>
 8019014:	0005883a 	mov	r2,zero
 8019018:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 801901c:	e13fff17 	ldw	r4,-4(fp)
 8019020:	801990c0 	call	801990c <alt_release_fd>
    if (rval < 0)
 8019024:	e0bffe17 	ldw	r2,-8(fp)
 8019028:	1000070e 	bge	r2,zero,8019048 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 801902c:	8018f640 	call	8018f64 <alt_get_errno>
 8019030:	1007883a 	mov	r3,r2
 8019034:	e0bffe17 	ldw	r2,-8(fp)
 8019038:	0085c83a 	sub	r2,zero,r2
 801903c:	18800015 	stw	r2,0(r3)
      return -1;
 8019040:	00bfffc4 	movi	r2,-1
 8019044:	00000706 	br	8019064 <close+0xc4>
    }
    return 0;
 8019048:	0005883a 	mov	r2,zero
 801904c:	00000506 	br	8019064 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8019050:	8018f640 	call	8018f64 <alt_get_errno>
 8019054:	1007883a 	mov	r3,r2
 8019058:	00801444 	movi	r2,81
 801905c:	18800015 	stw	r2,0(r3)
    return -1;
 8019060:	00bfffc4 	movi	r2,-1
  }
}
 8019064:	e037883a 	mov	sp,fp
 8019068:	dfc00117 	ldw	ra,4(sp)
 801906c:	df000017 	ldw	fp,0(sp)
 8019070:	dec00204 	addi	sp,sp,8
 8019074:	f800283a 	ret

08019078 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8019078:	defffc04 	addi	sp,sp,-16
 801907c:	df000315 	stw	fp,12(sp)
 8019080:	df000304 	addi	fp,sp,12
 8019084:	e13ffd15 	stw	r4,-12(fp)
 8019088:	e17ffe15 	stw	r5,-8(fp)
 801908c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8019090:	e0bfff17 	ldw	r2,-4(fp)
}
 8019094:	e037883a 	mov	sp,fp
 8019098:	df000017 	ldw	fp,0(sp)
 801909c:	dec00104 	addi	sp,sp,4
 80190a0:	f800283a 	ret

080190a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80190a4:	defffe04 	addi	sp,sp,-8
 80190a8:	dfc00115 	stw	ra,4(sp)
 80190ac:	df000015 	stw	fp,0(sp)
 80190b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80190b4:	d0a01017 	ldw	r2,-32704(gp)
 80190b8:	10000326 	beq	r2,zero,80190c8 <alt_get_errno+0x24>
 80190bc:	d0a01017 	ldw	r2,-32704(gp)
 80190c0:	103ee83a 	callr	r2
 80190c4:	00000106 	br	80190cc <alt_get_errno+0x28>
 80190c8:	d0a6e904 	addi	r2,gp,-25692
}
 80190cc:	e037883a 	mov	sp,fp
 80190d0:	dfc00117 	ldw	ra,4(sp)
 80190d4:	df000017 	ldw	fp,0(sp)
 80190d8:	dec00204 	addi	sp,sp,8
 80190dc:	f800283a 	ret

080190e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 80190e0:	defffb04 	addi	sp,sp,-20
 80190e4:	dfc00415 	stw	ra,16(sp)
 80190e8:	df000315 	stw	fp,12(sp)
 80190ec:	df000304 	addi	fp,sp,12
 80190f0:	e13ffe15 	stw	r4,-8(fp)
 80190f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80190f8:	e0bffe17 	ldw	r2,-8(fp)
 80190fc:	10000816 	blt	r2,zero,8019120 <fstat+0x40>
 8019100:	01400304 	movi	r5,12
 8019104:	e13ffe17 	ldw	r4,-8(fp)
 8019108:	80028f40 	call	80028f4 <__mulsi3>
 801910c:	1007883a 	mov	r3,r2
 8019110:	008200b4 	movhi	r2,2050
 8019114:	10b2f804 	addi	r2,r2,-13344
 8019118:	1885883a 	add	r2,r3,r2
 801911c:	00000106 	br	8019124 <fstat+0x44>
 8019120:	0005883a 	mov	r2,zero
 8019124:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8019128:	e0bffd17 	ldw	r2,-12(fp)
 801912c:	10001026 	beq	r2,zero,8019170 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8019130:	e0bffd17 	ldw	r2,-12(fp)
 8019134:	10800017 	ldw	r2,0(r2)
 8019138:	10800817 	ldw	r2,32(r2)
 801913c:	10000726 	beq	r2,zero,801915c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8019140:	e0bffd17 	ldw	r2,-12(fp)
 8019144:	10800017 	ldw	r2,0(r2)
 8019148:	10800817 	ldw	r2,32(r2)
 801914c:	e17fff17 	ldw	r5,-4(fp)
 8019150:	e13ffd17 	ldw	r4,-12(fp)
 8019154:	103ee83a 	callr	r2
 8019158:	00000a06 	br	8019184 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 801915c:	e0bfff17 	ldw	r2,-4(fp)
 8019160:	00c80004 	movi	r3,8192
 8019164:	10c00115 	stw	r3,4(r2)
      return 0;
 8019168:	0005883a 	mov	r2,zero
 801916c:	00000506 	br	8019184 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8019170:	80190a40 	call	80190a4 <alt_get_errno>
 8019174:	1007883a 	mov	r3,r2
 8019178:	00801444 	movi	r2,81
 801917c:	18800015 	stw	r2,0(r3)
    return -1;
 8019180:	00bfffc4 	movi	r2,-1
  }
}
 8019184:	e037883a 	mov	sp,fp
 8019188:	dfc00117 	ldw	ra,4(sp)
 801918c:	df000017 	ldw	fp,0(sp)
 8019190:	dec00204 	addi	sp,sp,8
 8019194:	f800283a 	ret

08019198 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019198:	defffe04 	addi	sp,sp,-8
 801919c:	dfc00115 	stw	ra,4(sp)
 80191a0:	df000015 	stw	fp,0(sp)
 80191a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80191a8:	d0a01017 	ldw	r2,-32704(gp)
 80191ac:	10000326 	beq	r2,zero,80191bc <alt_get_errno+0x24>
 80191b0:	d0a01017 	ldw	r2,-32704(gp)
 80191b4:	103ee83a 	callr	r2
 80191b8:	00000106 	br	80191c0 <alt_get_errno+0x28>
 80191bc:	d0a6e904 	addi	r2,gp,-25692
}
 80191c0:	e037883a 	mov	sp,fp
 80191c4:	dfc00117 	ldw	ra,4(sp)
 80191c8:	df000017 	ldw	fp,0(sp)
 80191cc:	dec00204 	addi	sp,sp,8
 80191d0:	f800283a 	ret

080191d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80191d4:	deffed04 	addi	sp,sp,-76
 80191d8:	dfc01215 	stw	ra,72(sp)
 80191dc:	df001115 	stw	fp,68(sp)
 80191e0:	df001104 	addi	fp,sp,68
 80191e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80191e8:	e0bfff17 	ldw	r2,-4(fp)
 80191ec:	10000816 	blt	r2,zero,8019210 <isatty+0x3c>
 80191f0:	01400304 	movi	r5,12
 80191f4:	e13fff17 	ldw	r4,-4(fp)
 80191f8:	80028f40 	call	80028f4 <__mulsi3>
 80191fc:	1007883a 	mov	r3,r2
 8019200:	008200b4 	movhi	r2,2050
 8019204:	10b2f804 	addi	r2,r2,-13344
 8019208:	1885883a 	add	r2,r3,r2
 801920c:	00000106 	br	8019214 <isatty+0x40>
 8019210:	0005883a 	mov	r2,zero
 8019214:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8019218:	e0bfef17 	ldw	r2,-68(fp)
 801921c:	10000e26 	beq	r2,zero,8019258 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8019220:	e0bfef17 	ldw	r2,-68(fp)
 8019224:	10800017 	ldw	r2,0(r2)
 8019228:	10800817 	ldw	r2,32(r2)
 801922c:	1000021e 	bne	r2,zero,8019238 <isatty+0x64>
    {
      return 1;
 8019230:	00800044 	movi	r2,1
 8019234:	00000d06 	br	801926c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8019238:	e0bff004 	addi	r2,fp,-64
 801923c:	100b883a 	mov	r5,r2
 8019240:	e13fff17 	ldw	r4,-4(fp)
 8019244:	80190e00 	call	80190e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8019248:	e0bff117 	ldw	r2,-60(fp)
 801924c:	10880020 	cmpeqi	r2,r2,8192
 8019250:	10803fcc 	andi	r2,r2,255
 8019254:	00000506 	br	801926c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8019258:	80191980 	call	8019198 <alt_get_errno>
 801925c:	1007883a 	mov	r3,r2
 8019260:	00801444 	movi	r2,81
 8019264:	18800015 	stw	r2,0(r3)
    return 0;
 8019268:	0005883a 	mov	r2,zero
  }
}
 801926c:	e037883a 	mov	sp,fp
 8019270:	dfc00117 	ldw	ra,4(sp)
 8019274:	df000017 	ldw	fp,0(sp)
 8019278:	dec00204 	addi	sp,sp,8
 801927c:	f800283a 	ret

08019280 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8019280:	defffc04 	addi	sp,sp,-16
 8019284:	df000315 	stw	fp,12(sp)
 8019288:	df000304 	addi	fp,sp,12
 801928c:	e13ffd15 	stw	r4,-12(fp)
 8019290:	e17ffe15 	stw	r5,-8(fp)
 8019294:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8019298:	e0fffe17 	ldw	r3,-8(fp)
 801929c:	e0bffd17 	ldw	r2,-12(fp)
 80192a0:	18800c26 	beq	r3,r2,80192d4 <alt_load_section+0x54>
  {
    while( to != end )
 80192a4:	00000806 	br	80192c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80192a8:	e0bffe17 	ldw	r2,-8(fp)
 80192ac:	10c00104 	addi	r3,r2,4
 80192b0:	e0fffe15 	stw	r3,-8(fp)
 80192b4:	e0fffd17 	ldw	r3,-12(fp)
 80192b8:	19000104 	addi	r4,r3,4
 80192bc:	e13ffd15 	stw	r4,-12(fp)
 80192c0:	18c00017 	ldw	r3,0(r3)
 80192c4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80192c8:	e0fffe17 	ldw	r3,-8(fp)
 80192cc:	e0bfff17 	ldw	r2,-4(fp)
 80192d0:	18bff51e 	bne	r3,r2,80192a8 <__alt_data_end+0xfc0192a8>
    {
      *to++ = *from++;
    }
  }
}
 80192d4:	0001883a 	nop
 80192d8:	e037883a 	mov	sp,fp
 80192dc:	df000017 	ldw	fp,0(sp)
 80192e0:	dec00104 	addi	sp,sp,4
 80192e4:	f800283a 	ret

080192e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80192e8:	defffe04 	addi	sp,sp,-8
 80192ec:	dfc00115 	stw	ra,4(sp)
 80192f0:	df000015 	stw	fp,0(sp)
 80192f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80192f8:	018200b4 	movhi	r6,2050
 80192fc:	31b78504 	addi	r6,r6,-8684
 8019300:	014200b4 	movhi	r5,2050
 8019304:	2970b904 	addi	r5,r5,-15644
 8019308:	010200b4 	movhi	r4,2050
 801930c:	21378504 	addi	r4,r4,-8684
 8019310:	80192800 	call	8019280 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8019314:	01820034 	movhi	r6,2048
 8019318:	31808c04 	addi	r6,r6,560
 801931c:	01420034 	movhi	r5,2048
 8019320:	29400804 	addi	r5,r5,32
 8019324:	01020034 	movhi	r4,2048
 8019328:	21000804 	addi	r4,r4,32
 801932c:	80192800 	call	8019280 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8019330:	018200b4 	movhi	r6,2050
 8019334:	31b0b904 	addi	r6,r6,-15644
 8019338:	014200b4 	movhi	r5,2050
 801933c:	296ea304 	addi	r5,r5,-17780
 8019340:	010200b4 	movhi	r4,2050
 8019344:	212ea304 	addi	r4,r4,-17780
 8019348:	80192800 	call	8019280 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 801934c:	801adfc0 	call	801adfc <alt_dcache_flush_all>
  alt_icache_flush_all();
 8019350:	801b2180 	call	801b218 <alt_icache_flush_all>
}
 8019354:	0001883a 	nop
 8019358:	e037883a 	mov	sp,fp
 801935c:	dfc00117 	ldw	ra,4(sp)
 8019360:	df000017 	ldw	fp,0(sp)
 8019364:	dec00204 	addi	sp,sp,8
 8019368:	f800283a 	ret

0801936c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801936c:	defffe04 	addi	sp,sp,-8
 8019370:	dfc00115 	stw	ra,4(sp)
 8019374:	df000015 	stw	fp,0(sp)
 8019378:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801937c:	d0a01017 	ldw	r2,-32704(gp)
 8019380:	10000326 	beq	r2,zero,8019390 <alt_get_errno+0x24>
 8019384:	d0a01017 	ldw	r2,-32704(gp)
 8019388:	103ee83a 	callr	r2
 801938c:	00000106 	br	8019394 <alt_get_errno+0x28>
 8019390:	d0a6e904 	addi	r2,gp,-25692
}
 8019394:	e037883a 	mov	sp,fp
 8019398:	dfc00117 	ldw	ra,4(sp)
 801939c:	df000017 	ldw	fp,0(sp)
 80193a0:	dec00204 	addi	sp,sp,8
 80193a4:	f800283a 	ret

080193a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80193a8:	defff904 	addi	sp,sp,-28
 80193ac:	dfc00615 	stw	ra,24(sp)
 80193b0:	df000515 	stw	fp,20(sp)
 80193b4:	df000504 	addi	fp,sp,20
 80193b8:	e13ffd15 	stw	r4,-12(fp)
 80193bc:	e17ffe15 	stw	r5,-8(fp)
 80193c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80193c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80193c8:	e0bffd17 	ldw	r2,-12(fp)
 80193cc:	10000816 	blt	r2,zero,80193f0 <lseek+0x48>
 80193d0:	01400304 	movi	r5,12
 80193d4:	e13ffd17 	ldw	r4,-12(fp)
 80193d8:	80028f40 	call	80028f4 <__mulsi3>
 80193dc:	1007883a 	mov	r3,r2
 80193e0:	008200b4 	movhi	r2,2050
 80193e4:	10b2f804 	addi	r2,r2,-13344
 80193e8:	1885883a 	add	r2,r3,r2
 80193ec:	00000106 	br	80193f4 <lseek+0x4c>
 80193f0:	0005883a 	mov	r2,zero
 80193f4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 80193f8:	e0bffc17 	ldw	r2,-16(fp)
 80193fc:	10001026 	beq	r2,zero,8019440 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8019400:	e0bffc17 	ldw	r2,-16(fp)
 8019404:	10800017 	ldw	r2,0(r2)
 8019408:	10800717 	ldw	r2,28(r2)
 801940c:	10000926 	beq	r2,zero,8019434 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8019410:	e0bffc17 	ldw	r2,-16(fp)
 8019414:	10800017 	ldw	r2,0(r2)
 8019418:	10800717 	ldw	r2,28(r2)
 801941c:	e1bfff17 	ldw	r6,-4(fp)
 8019420:	e17ffe17 	ldw	r5,-8(fp)
 8019424:	e13ffc17 	ldw	r4,-16(fp)
 8019428:	103ee83a 	callr	r2
 801942c:	e0bffb15 	stw	r2,-20(fp)
 8019430:	00000506 	br	8019448 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8019434:	00bfde84 	movi	r2,-134
 8019438:	e0bffb15 	stw	r2,-20(fp)
 801943c:	00000206 	br	8019448 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8019440:	00bfebc4 	movi	r2,-81
 8019444:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8019448:	e0bffb17 	ldw	r2,-20(fp)
 801944c:	1000070e 	bge	r2,zero,801946c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8019450:	801936c0 	call	801936c <alt_get_errno>
 8019454:	1007883a 	mov	r3,r2
 8019458:	e0bffb17 	ldw	r2,-20(fp)
 801945c:	0085c83a 	sub	r2,zero,r2
 8019460:	18800015 	stw	r2,0(r3)
    rc = -1;
 8019464:	00bfffc4 	movi	r2,-1
 8019468:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 801946c:	e0bffb17 	ldw	r2,-20(fp)
}
 8019470:	e037883a 	mov	sp,fp
 8019474:	dfc00117 	ldw	ra,4(sp)
 8019478:	df000017 	ldw	fp,0(sp)
 801947c:	dec00204 	addi	sp,sp,8
 8019480:	f800283a 	ret

08019484 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8019484:	defffd04 	addi	sp,sp,-12
 8019488:	dfc00215 	stw	ra,8(sp)
 801948c:	df000115 	stw	fp,4(sp)
 8019490:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8019494:	0009883a 	mov	r4,zero
 8019498:	8019d840 	call	8019d84 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 801949c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80194a0:	8019dbc0 	call	8019dbc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80194a4:	018200b4 	movhi	r6,2050
 80194a8:	31b0b104 	addi	r6,r6,-15676
 80194ac:	014200b4 	movhi	r5,2050
 80194b0:	2970b104 	addi	r5,r5,-15676
 80194b4:	010200b4 	movhi	r4,2050
 80194b8:	2130b104 	addi	r4,r4,-15676
 80194bc:	801b5bc0 	call	801b5bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80194c0:	801aefc0 	call	801aefc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80194c4:	010200b4 	movhi	r4,2050
 80194c8:	212bd704 	addi	r4,r4,-20644
 80194cc:	801b6f80 	call	801b6f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80194d0:	d0a6f017 	ldw	r2,-25664(gp)
 80194d4:	d0e6f117 	ldw	r3,-25660(gp)
 80194d8:	d126f217 	ldw	r4,-25656(gp)
 80194dc:	200d883a 	mov	r6,r4
 80194e0:	180b883a 	mov	r5,r3
 80194e4:	1009883a 	mov	r4,r2
 80194e8:	80004240 	call	8000424 <main>
 80194ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80194f0:	01000044 	movi	r4,1
 80194f4:	8018fa00 	call	8018fa0 <close>
  exit (result);
 80194f8:	e13fff17 	ldw	r4,-4(fp)
 80194fc:	801b70c0 	call	801b70c <exit>

08019500 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8019500:	defffe04 	addi	sp,sp,-8
 8019504:	df000115 	stw	fp,4(sp)
 8019508:	df000104 	addi	fp,sp,4
 801950c:	e13fff15 	stw	r4,-4(fp)
}
 8019510:	0001883a 	nop
 8019514:	e037883a 	mov	sp,fp
 8019518:	df000017 	ldw	fp,0(sp)
 801951c:	dec00104 	addi	sp,sp,4
 8019520:	f800283a 	ret

08019524 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8019524:	defffe04 	addi	sp,sp,-8
 8019528:	df000115 	stw	fp,4(sp)
 801952c:	df000104 	addi	fp,sp,4
 8019530:	e13fff15 	stw	r4,-4(fp)
}
 8019534:	0001883a 	nop
 8019538:	e037883a 	mov	sp,fp
 801953c:	df000017 	ldw	fp,0(sp)
 8019540:	dec00104 	addi	sp,sp,4
 8019544:	f800283a 	ret

08019548 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019548:	defffe04 	addi	sp,sp,-8
 801954c:	dfc00115 	stw	ra,4(sp)
 8019550:	df000015 	stw	fp,0(sp)
 8019554:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8019558:	d0a01017 	ldw	r2,-32704(gp)
 801955c:	10000326 	beq	r2,zero,801956c <alt_get_errno+0x24>
 8019560:	d0a01017 	ldw	r2,-32704(gp)
 8019564:	103ee83a 	callr	r2
 8019568:	00000106 	br	8019570 <alt_get_errno+0x28>
 801956c:	d0a6e904 	addi	r2,gp,-25692
}
 8019570:	e037883a 	mov	sp,fp
 8019574:	dfc00117 	ldw	ra,4(sp)
 8019578:	df000017 	ldw	fp,0(sp)
 801957c:	dec00204 	addi	sp,sp,8
 8019580:	f800283a 	ret

08019584 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8019584:	defffb04 	addi	sp,sp,-20
 8019588:	dfc00415 	stw	ra,16(sp)
 801958c:	df000315 	stw	fp,12(sp)
 8019590:	dc000215 	stw	r16,8(sp)
 8019594:	df000304 	addi	fp,sp,12
 8019598:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 801959c:	e0bffe17 	ldw	r2,-8(fp)
 80195a0:	10800217 	ldw	r2,8(r2)
 80195a4:	10d00034 	orhi	r3,r2,16384
 80195a8:	e0bffe17 	ldw	r2,-8(fp)
 80195ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80195b0:	e03ffd15 	stw	zero,-12(fp)
 80195b4:	00002306 	br	8019644 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80195b8:	040200b4 	movhi	r16,2050
 80195bc:	8432f804 	addi	r16,r16,-13344
 80195c0:	e0bffd17 	ldw	r2,-12(fp)
 80195c4:	01400304 	movi	r5,12
 80195c8:	1009883a 	mov	r4,r2
 80195cc:	80028f40 	call	80028f4 <__mulsi3>
 80195d0:	8085883a 	add	r2,r16,r2
 80195d4:	10c00017 	ldw	r3,0(r2)
 80195d8:	e0bffe17 	ldw	r2,-8(fp)
 80195dc:	10800017 	ldw	r2,0(r2)
 80195e0:	1880151e 	bne	r3,r2,8019638 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80195e4:	040200b4 	movhi	r16,2050
 80195e8:	8432f804 	addi	r16,r16,-13344
 80195ec:	e0bffd17 	ldw	r2,-12(fp)
 80195f0:	01400304 	movi	r5,12
 80195f4:	1009883a 	mov	r4,r2
 80195f8:	80028f40 	call	80028f4 <__mulsi3>
 80195fc:	8085883a 	add	r2,r16,r2
 8019600:	10800204 	addi	r2,r2,8
 8019604:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8019608:	10000b0e 	bge	r2,zero,8019638 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 801960c:	01400304 	movi	r5,12
 8019610:	e13ffd17 	ldw	r4,-12(fp)
 8019614:	80028f40 	call	80028f4 <__mulsi3>
 8019618:	1007883a 	mov	r3,r2
 801961c:	008200b4 	movhi	r2,2050
 8019620:	10b2f804 	addi	r2,r2,-13344
 8019624:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8019628:	e0bffe17 	ldw	r2,-8(fp)
 801962c:	18800226 	beq	r3,r2,8019638 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8019630:	00bffcc4 	movi	r2,-13
 8019634:	00000806 	br	8019658 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8019638:	e0bffd17 	ldw	r2,-12(fp)
 801963c:	10800044 	addi	r2,r2,1
 8019640:	e0bffd15 	stw	r2,-12(fp)
 8019644:	d0a00f17 	ldw	r2,-32708(gp)
 8019648:	1007883a 	mov	r3,r2
 801964c:	e0bffd17 	ldw	r2,-12(fp)
 8019650:	18bfd92e 	bgeu	r3,r2,80195b8 <__alt_data_end+0xfc0195b8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8019654:	0005883a 	mov	r2,zero
}
 8019658:	e6ffff04 	addi	sp,fp,-4
 801965c:	dfc00217 	ldw	ra,8(sp)
 8019660:	df000117 	ldw	fp,4(sp)
 8019664:	dc000017 	ldw	r16,0(sp)
 8019668:	dec00304 	addi	sp,sp,12
 801966c:	f800283a 	ret

08019670 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8019670:	defff604 	addi	sp,sp,-40
 8019674:	dfc00915 	stw	ra,36(sp)
 8019678:	df000815 	stw	fp,32(sp)
 801967c:	df000804 	addi	fp,sp,32
 8019680:	e13ffd15 	stw	r4,-12(fp)
 8019684:	e17ffe15 	stw	r5,-8(fp)
 8019688:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801968c:	00bfffc4 	movi	r2,-1
 8019690:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8019694:	00bffb44 	movi	r2,-19
 8019698:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 801969c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80196a0:	d1600d04 	addi	r5,gp,-32716
 80196a4:	e13ffd17 	ldw	r4,-12(fp)
 80196a8:	801afbc0 	call	801afbc <alt_find_dev>
 80196ac:	e0bff815 	stw	r2,-32(fp)
 80196b0:	e0bff817 	ldw	r2,-32(fp)
 80196b4:	1000051e 	bne	r2,zero,80196cc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80196b8:	e13ffd17 	ldw	r4,-12(fp)
 80196bc:	801b04c0 	call	801b04c <alt_find_file>
 80196c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80196c4:	00800044 	movi	r2,1
 80196c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80196cc:	e0bff817 	ldw	r2,-32(fp)
 80196d0:	10002b26 	beq	r2,zero,8019780 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80196d4:	e13ff817 	ldw	r4,-32(fp)
 80196d8:	801b1540 	call	801b154 <alt_get_fd>
 80196dc:	e0bff915 	stw	r2,-28(fp)
 80196e0:	e0bff917 	ldw	r2,-28(fp)
 80196e4:	1000030e 	bge	r2,zero,80196f4 <open+0x84>
    {
      status = index;
 80196e8:	e0bff917 	ldw	r2,-28(fp)
 80196ec:	e0bffa15 	stw	r2,-24(fp)
 80196f0:	00002506 	br	8019788 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 80196f4:	01400304 	movi	r5,12
 80196f8:	e13ff917 	ldw	r4,-28(fp)
 80196fc:	80028f40 	call	80028f4 <__mulsi3>
 8019700:	1007883a 	mov	r3,r2
 8019704:	008200b4 	movhi	r2,2050
 8019708:	10b2f804 	addi	r2,r2,-13344
 801970c:	1885883a 	add	r2,r3,r2
 8019710:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8019714:	e0fffe17 	ldw	r3,-8(fp)
 8019718:	00900034 	movhi	r2,16384
 801971c:	10bfffc4 	addi	r2,r2,-1
 8019720:	1886703a 	and	r3,r3,r2
 8019724:	e0bffc17 	ldw	r2,-16(fp)
 8019728:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 801972c:	e0bffb17 	ldw	r2,-20(fp)
 8019730:	1000051e 	bne	r2,zero,8019748 <open+0xd8>
 8019734:	e13ffc17 	ldw	r4,-16(fp)
 8019738:	80195840 	call	8019584 <alt_file_locked>
 801973c:	e0bffa15 	stw	r2,-24(fp)
 8019740:	e0bffa17 	ldw	r2,-24(fp)
 8019744:	10001016 	blt	r2,zero,8019788 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8019748:	e0bff817 	ldw	r2,-32(fp)
 801974c:	10800317 	ldw	r2,12(r2)
 8019750:	10000826 	beq	r2,zero,8019774 <open+0x104>
 8019754:	e0bff817 	ldw	r2,-32(fp)
 8019758:	10800317 	ldw	r2,12(r2)
 801975c:	e1ffff17 	ldw	r7,-4(fp)
 8019760:	e1bffe17 	ldw	r6,-8(fp)
 8019764:	e17ffd17 	ldw	r5,-12(fp)
 8019768:	e13ffc17 	ldw	r4,-16(fp)
 801976c:	103ee83a 	callr	r2
 8019770:	00000106 	br	8019778 <open+0x108>
 8019774:	0005883a 	mov	r2,zero
 8019778:	e0bffa15 	stw	r2,-24(fp)
 801977c:	00000206 	br	8019788 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8019780:	00bffb44 	movi	r2,-19
 8019784:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8019788:	e0bffa17 	ldw	r2,-24(fp)
 801978c:	1000090e 	bge	r2,zero,80197b4 <open+0x144>
  {
    alt_release_fd (index);  
 8019790:	e13ff917 	ldw	r4,-28(fp)
 8019794:	801990c0 	call	801990c <alt_release_fd>
    ALT_ERRNO = -status;
 8019798:	80195480 	call	8019548 <alt_get_errno>
 801979c:	1007883a 	mov	r3,r2
 80197a0:	e0bffa17 	ldw	r2,-24(fp)
 80197a4:	0085c83a 	sub	r2,zero,r2
 80197a8:	18800015 	stw	r2,0(r3)
    return -1;
 80197ac:	00bfffc4 	movi	r2,-1
 80197b0:	00000106 	br	80197b8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 80197b4:	e0bff917 	ldw	r2,-28(fp)
}
 80197b8:	e037883a 	mov	sp,fp
 80197bc:	dfc00117 	ldw	ra,4(sp)
 80197c0:	df000017 	ldw	fp,0(sp)
 80197c4:	dec00204 	addi	sp,sp,8
 80197c8:	f800283a 	ret

080197cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80197cc:	defffe04 	addi	sp,sp,-8
 80197d0:	dfc00115 	stw	ra,4(sp)
 80197d4:	df000015 	stw	fp,0(sp)
 80197d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80197dc:	d0a01017 	ldw	r2,-32704(gp)
 80197e0:	10000326 	beq	r2,zero,80197f0 <alt_get_errno+0x24>
 80197e4:	d0a01017 	ldw	r2,-32704(gp)
 80197e8:	103ee83a 	callr	r2
 80197ec:	00000106 	br	80197f4 <alt_get_errno+0x28>
 80197f0:	d0a6e904 	addi	r2,gp,-25692
}
 80197f4:	e037883a 	mov	sp,fp
 80197f8:	dfc00117 	ldw	ra,4(sp)
 80197fc:	df000017 	ldw	fp,0(sp)
 8019800:	dec00204 	addi	sp,sp,8
 8019804:	f800283a 	ret

08019808 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8019808:	defff904 	addi	sp,sp,-28
 801980c:	dfc00615 	stw	ra,24(sp)
 8019810:	df000515 	stw	fp,20(sp)
 8019814:	df000504 	addi	fp,sp,20
 8019818:	e13ffd15 	stw	r4,-12(fp)
 801981c:	e17ffe15 	stw	r5,-8(fp)
 8019820:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8019824:	e0bffd17 	ldw	r2,-12(fp)
 8019828:	10000816 	blt	r2,zero,801984c <read+0x44>
 801982c:	01400304 	movi	r5,12
 8019830:	e13ffd17 	ldw	r4,-12(fp)
 8019834:	80028f40 	call	80028f4 <__mulsi3>
 8019838:	1007883a 	mov	r3,r2
 801983c:	008200b4 	movhi	r2,2050
 8019840:	10b2f804 	addi	r2,r2,-13344
 8019844:	1885883a 	add	r2,r3,r2
 8019848:	00000106 	br	8019850 <read+0x48>
 801984c:	0005883a 	mov	r2,zero
 8019850:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8019854:	e0bffb17 	ldw	r2,-20(fp)
 8019858:	10002226 	beq	r2,zero,80198e4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 801985c:	e0bffb17 	ldw	r2,-20(fp)
 8019860:	10800217 	ldw	r2,8(r2)
 8019864:	108000cc 	andi	r2,r2,3
 8019868:	10800060 	cmpeqi	r2,r2,1
 801986c:	1000181e 	bne	r2,zero,80198d0 <read+0xc8>
        (fd->dev->read))
 8019870:	e0bffb17 	ldw	r2,-20(fp)
 8019874:	10800017 	ldw	r2,0(r2)
 8019878:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 801987c:	10001426 	beq	r2,zero,80198d0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8019880:	e0bffb17 	ldw	r2,-20(fp)
 8019884:	10800017 	ldw	r2,0(r2)
 8019888:	10800517 	ldw	r2,20(r2)
 801988c:	e0ffff17 	ldw	r3,-4(fp)
 8019890:	180d883a 	mov	r6,r3
 8019894:	e17ffe17 	ldw	r5,-8(fp)
 8019898:	e13ffb17 	ldw	r4,-20(fp)
 801989c:	103ee83a 	callr	r2
 80198a0:	e0bffc15 	stw	r2,-16(fp)
 80198a4:	e0bffc17 	ldw	r2,-16(fp)
 80198a8:	1000070e 	bge	r2,zero,80198c8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 80198ac:	80197cc0 	call	80197cc <alt_get_errno>
 80198b0:	1007883a 	mov	r3,r2
 80198b4:	e0bffc17 	ldw	r2,-16(fp)
 80198b8:	0085c83a 	sub	r2,zero,r2
 80198bc:	18800015 	stw	r2,0(r3)
          return -1;
 80198c0:	00bfffc4 	movi	r2,-1
 80198c4:	00000c06 	br	80198f8 <read+0xf0>
        }
        return rval;
 80198c8:	e0bffc17 	ldw	r2,-16(fp)
 80198cc:	00000a06 	br	80198f8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 80198d0:	80197cc0 	call	80197cc <alt_get_errno>
 80198d4:	1007883a 	mov	r3,r2
 80198d8:	00800344 	movi	r2,13
 80198dc:	18800015 	stw	r2,0(r3)
 80198e0:	00000406 	br	80198f4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 80198e4:	80197cc0 	call	80197cc <alt_get_errno>
 80198e8:	1007883a 	mov	r3,r2
 80198ec:	00801444 	movi	r2,81
 80198f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80198f4:	00bfffc4 	movi	r2,-1
}
 80198f8:	e037883a 	mov	sp,fp
 80198fc:	dfc00117 	ldw	ra,4(sp)
 8019900:	df000017 	ldw	fp,0(sp)
 8019904:	dec00204 	addi	sp,sp,8
 8019908:	f800283a 	ret

0801990c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 801990c:	defffc04 	addi	sp,sp,-16
 8019910:	dfc00315 	stw	ra,12(sp)
 8019914:	df000215 	stw	fp,8(sp)
 8019918:	dc000115 	stw	r16,4(sp)
 801991c:	df000204 	addi	fp,sp,8
 8019920:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8019924:	e0bffe17 	ldw	r2,-8(fp)
 8019928:	108000d0 	cmplti	r2,r2,3
 801992c:	1000111e 	bne	r2,zero,8019974 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8019930:	040200b4 	movhi	r16,2050
 8019934:	8432f804 	addi	r16,r16,-13344
 8019938:	e0bffe17 	ldw	r2,-8(fp)
 801993c:	01400304 	movi	r5,12
 8019940:	1009883a 	mov	r4,r2
 8019944:	80028f40 	call	80028f4 <__mulsi3>
 8019948:	8085883a 	add	r2,r16,r2
 801994c:	10800204 	addi	r2,r2,8
 8019950:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8019954:	040200b4 	movhi	r16,2050
 8019958:	8432f804 	addi	r16,r16,-13344
 801995c:	e0bffe17 	ldw	r2,-8(fp)
 8019960:	01400304 	movi	r5,12
 8019964:	1009883a 	mov	r4,r2
 8019968:	80028f40 	call	80028f4 <__mulsi3>
 801996c:	8085883a 	add	r2,r16,r2
 8019970:	10000015 	stw	zero,0(r2)
  }
}
 8019974:	0001883a 	nop
 8019978:	e6ffff04 	addi	sp,fp,-4
 801997c:	dfc00217 	ldw	ra,8(sp)
 8019980:	df000117 	ldw	fp,4(sp)
 8019984:	dc000017 	ldw	r16,0(sp)
 8019988:	dec00304 	addi	sp,sp,12
 801998c:	f800283a 	ret

08019990 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8019990:	defff904 	addi	sp,sp,-28
 8019994:	df000615 	stw	fp,24(sp)
 8019998:	df000604 	addi	fp,sp,24
 801999c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80199a0:	0005303a 	rdctl	r2,status
 80199a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80199a8:	e0fffe17 	ldw	r3,-8(fp)
 80199ac:	00bfff84 	movi	r2,-2
 80199b0:	1884703a 	and	r2,r3,r2
 80199b4:	1001703a 	wrctl	status,r2
  
  return context;
 80199b8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 80199bc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 80199c0:	d0a01117 	ldw	r2,-32700(gp)
 80199c4:	10c000c4 	addi	r3,r2,3
 80199c8:	00bfff04 	movi	r2,-4
 80199cc:	1884703a 	and	r2,r3,r2
 80199d0:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 80199d4:	d0e01117 	ldw	r3,-32700(gp)
 80199d8:	e0bfff17 	ldw	r2,-4(fp)
 80199dc:	1887883a 	add	r3,r3,r2
 80199e0:	00830034 	movhi	r2,3072
 80199e4:	10800004 	addi	r2,r2,0
 80199e8:	10c0062e 	bgeu	r2,r3,8019a04 <sbrk+0x74>
 80199ec:	e0bffb17 	ldw	r2,-20(fp)
 80199f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80199f4:	e0bffa17 	ldw	r2,-24(fp)
 80199f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80199fc:	00bfffc4 	movi	r2,-1
 8019a00:	00000b06 	br	8019a30 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8019a04:	d0a01117 	ldw	r2,-32700(gp)
 8019a08:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8019a0c:	d0e01117 	ldw	r3,-32700(gp)
 8019a10:	e0bfff17 	ldw	r2,-4(fp)
 8019a14:	1885883a 	add	r2,r3,r2
 8019a18:	d0a01115 	stw	r2,-32700(gp)
 8019a1c:	e0bffb17 	ldw	r2,-20(fp)
 8019a20:	e0bffc15 	stw	r2,-16(fp)
 8019a24:	e0bffc17 	ldw	r2,-16(fp)
 8019a28:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8019a2c:	e0bffd17 	ldw	r2,-12(fp)
} 
 8019a30:	e037883a 	mov	sp,fp
 8019a34:	df000017 	ldw	fp,0(sp)
 8019a38:	dec00104 	addi	sp,sp,4
 8019a3c:	f800283a 	ret

08019a40 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8019a40:	defffa04 	addi	sp,sp,-24
 8019a44:	df000515 	stw	fp,20(sp)
 8019a48:	df000504 	addi	fp,sp,20
 8019a4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8019a50:	0005303a 	rdctl	r2,status
 8019a54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019a58:	e0fffc17 	ldw	r3,-16(fp)
 8019a5c:	00bfff84 	movi	r2,-2
 8019a60:	1884703a 	and	r2,r3,r2
 8019a64:	1001703a 	wrctl	status,r2
  
  return context;
 8019a68:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8019a6c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8019a70:	e0bfff17 	ldw	r2,-4(fp)
 8019a74:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8019a78:	e0bffd17 	ldw	r2,-12(fp)
 8019a7c:	10800017 	ldw	r2,0(r2)
 8019a80:	e0fffd17 	ldw	r3,-12(fp)
 8019a84:	18c00117 	ldw	r3,4(r3)
 8019a88:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8019a8c:	e0bffd17 	ldw	r2,-12(fp)
 8019a90:	10800117 	ldw	r2,4(r2)
 8019a94:	e0fffd17 	ldw	r3,-12(fp)
 8019a98:	18c00017 	ldw	r3,0(r3)
 8019a9c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8019aa0:	e0bffd17 	ldw	r2,-12(fp)
 8019aa4:	e0fffd17 	ldw	r3,-12(fp)
 8019aa8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8019aac:	e0bffd17 	ldw	r2,-12(fp)
 8019ab0:	e0fffd17 	ldw	r3,-12(fp)
 8019ab4:	10c00015 	stw	r3,0(r2)
 8019ab8:	e0bffb17 	ldw	r2,-20(fp)
 8019abc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019ac0:	e0bffe17 	ldw	r2,-8(fp)
 8019ac4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8019ac8:	0001883a 	nop
 8019acc:	e037883a 	mov	sp,fp
 8019ad0:	df000017 	ldw	fp,0(sp)
 8019ad4:	dec00104 	addi	sp,sp,4
 8019ad8:	f800283a 	ret

08019adc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8019adc:	defffb04 	addi	sp,sp,-20
 8019ae0:	dfc00415 	stw	ra,16(sp)
 8019ae4:	df000315 	stw	fp,12(sp)
 8019ae8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8019aec:	d0a01217 	ldw	r2,-32696(gp)
 8019af0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8019af4:	d0a6f417 	ldw	r2,-25648(gp)
 8019af8:	10800044 	addi	r2,r2,1
 8019afc:	d0a6f415 	stw	r2,-25648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8019b00:	00002e06 	br	8019bbc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8019b04:	e0bffd17 	ldw	r2,-12(fp)
 8019b08:	10800017 	ldw	r2,0(r2)
 8019b0c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8019b10:	e0bffd17 	ldw	r2,-12(fp)
 8019b14:	10800403 	ldbu	r2,16(r2)
 8019b18:	10803fcc 	andi	r2,r2,255
 8019b1c:	10000426 	beq	r2,zero,8019b30 <alt_tick+0x54>
 8019b20:	d0a6f417 	ldw	r2,-25648(gp)
 8019b24:	1000021e 	bne	r2,zero,8019b30 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8019b28:	e0bffd17 	ldw	r2,-12(fp)
 8019b2c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8019b30:	e0bffd17 	ldw	r2,-12(fp)
 8019b34:	10800217 	ldw	r2,8(r2)
 8019b38:	d0e6f417 	ldw	r3,-25648(gp)
 8019b3c:	18801d36 	bltu	r3,r2,8019bb4 <alt_tick+0xd8>
 8019b40:	e0bffd17 	ldw	r2,-12(fp)
 8019b44:	10800403 	ldbu	r2,16(r2)
 8019b48:	10803fcc 	andi	r2,r2,255
 8019b4c:	1000191e 	bne	r2,zero,8019bb4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8019b50:	e0bffd17 	ldw	r2,-12(fp)
 8019b54:	10800317 	ldw	r2,12(r2)
 8019b58:	e0fffd17 	ldw	r3,-12(fp)
 8019b5c:	18c00517 	ldw	r3,20(r3)
 8019b60:	1809883a 	mov	r4,r3
 8019b64:	103ee83a 	callr	r2
 8019b68:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8019b6c:	e0bfff17 	ldw	r2,-4(fp)
 8019b70:	1000031e 	bne	r2,zero,8019b80 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8019b74:	e13ffd17 	ldw	r4,-12(fp)
 8019b78:	8019a400 	call	8019a40 <alt_alarm_stop>
 8019b7c:	00000d06 	br	8019bb4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8019b80:	e0bffd17 	ldw	r2,-12(fp)
 8019b84:	10c00217 	ldw	r3,8(r2)
 8019b88:	e0bfff17 	ldw	r2,-4(fp)
 8019b8c:	1887883a 	add	r3,r3,r2
 8019b90:	e0bffd17 	ldw	r2,-12(fp)
 8019b94:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8019b98:	e0bffd17 	ldw	r2,-12(fp)
 8019b9c:	10c00217 	ldw	r3,8(r2)
 8019ba0:	d0a6f417 	ldw	r2,-25648(gp)
 8019ba4:	1880032e 	bgeu	r3,r2,8019bb4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8019ba8:	e0bffd17 	ldw	r2,-12(fp)
 8019bac:	00c00044 	movi	r3,1
 8019bb0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8019bb4:	e0bffe17 	ldw	r2,-8(fp)
 8019bb8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8019bbc:	e0fffd17 	ldw	r3,-12(fp)
 8019bc0:	d0a01204 	addi	r2,gp,-32696
 8019bc4:	18bfcf1e 	bne	r3,r2,8019b04 <__alt_data_end+0xfc019b04>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8019bc8:	0001883a 	nop
}
 8019bcc:	0001883a 	nop
 8019bd0:	e037883a 	mov	sp,fp
 8019bd4:	dfc00117 	ldw	ra,4(sp)
 8019bd8:	df000017 	ldw	fp,0(sp)
 8019bdc:	dec00204 	addi	sp,sp,8
 8019be0:	f800283a 	ret

08019be4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8019be4:	defffd04 	addi	sp,sp,-12
 8019be8:	dfc00215 	stw	ra,8(sp)
 8019bec:	df000115 	stw	fp,4(sp)
 8019bf0:	df000104 	addi	fp,sp,4
 8019bf4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8019bf8:	e13fff17 	ldw	r4,-4(fp)
 8019bfc:	801aca40 	call	801aca4 <alt_busy_sleep>
}
 8019c00:	e037883a 	mov	sp,fp
 8019c04:	dfc00117 	ldw	ra,4(sp)
 8019c08:	df000017 	ldw	fp,0(sp)
 8019c0c:	dec00204 	addi	sp,sp,8
 8019c10:	f800283a 	ret

08019c14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019c14:	defffe04 	addi	sp,sp,-8
 8019c18:	dfc00115 	stw	ra,4(sp)
 8019c1c:	df000015 	stw	fp,0(sp)
 8019c20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8019c24:	d0a01017 	ldw	r2,-32704(gp)
 8019c28:	10000326 	beq	r2,zero,8019c38 <alt_get_errno+0x24>
 8019c2c:	d0a01017 	ldw	r2,-32704(gp)
 8019c30:	103ee83a 	callr	r2
 8019c34:	00000106 	br	8019c3c <alt_get_errno+0x28>
 8019c38:	d0a6e904 	addi	r2,gp,-25692
}
 8019c3c:	e037883a 	mov	sp,fp
 8019c40:	dfc00117 	ldw	ra,4(sp)
 8019c44:	df000017 	ldw	fp,0(sp)
 8019c48:	dec00204 	addi	sp,sp,8
 8019c4c:	f800283a 	ret

08019c50 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8019c50:	defff904 	addi	sp,sp,-28
 8019c54:	dfc00615 	stw	ra,24(sp)
 8019c58:	df000515 	stw	fp,20(sp)
 8019c5c:	df000504 	addi	fp,sp,20
 8019c60:	e13ffd15 	stw	r4,-12(fp)
 8019c64:	e17ffe15 	stw	r5,-8(fp)
 8019c68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8019c6c:	e0bffd17 	ldw	r2,-12(fp)
 8019c70:	10000816 	blt	r2,zero,8019c94 <write+0x44>
 8019c74:	01400304 	movi	r5,12
 8019c78:	e13ffd17 	ldw	r4,-12(fp)
 8019c7c:	80028f40 	call	80028f4 <__mulsi3>
 8019c80:	1007883a 	mov	r3,r2
 8019c84:	008200b4 	movhi	r2,2050
 8019c88:	10b2f804 	addi	r2,r2,-13344
 8019c8c:	1885883a 	add	r2,r3,r2
 8019c90:	00000106 	br	8019c98 <write+0x48>
 8019c94:	0005883a 	mov	r2,zero
 8019c98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8019c9c:	e0bffb17 	ldw	r2,-20(fp)
 8019ca0:	10002126 	beq	r2,zero,8019d28 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8019ca4:	e0bffb17 	ldw	r2,-20(fp)
 8019ca8:	10800217 	ldw	r2,8(r2)
 8019cac:	108000cc 	andi	r2,r2,3
 8019cb0:	10001826 	beq	r2,zero,8019d14 <write+0xc4>
 8019cb4:	e0bffb17 	ldw	r2,-20(fp)
 8019cb8:	10800017 	ldw	r2,0(r2)
 8019cbc:	10800617 	ldw	r2,24(r2)
 8019cc0:	10001426 	beq	r2,zero,8019d14 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8019cc4:	e0bffb17 	ldw	r2,-20(fp)
 8019cc8:	10800017 	ldw	r2,0(r2)
 8019ccc:	10800617 	ldw	r2,24(r2)
 8019cd0:	e0ffff17 	ldw	r3,-4(fp)
 8019cd4:	180d883a 	mov	r6,r3
 8019cd8:	e17ffe17 	ldw	r5,-8(fp)
 8019cdc:	e13ffb17 	ldw	r4,-20(fp)
 8019ce0:	103ee83a 	callr	r2
 8019ce4:	e0bffc15 	stw	r2,-16(fp)
 8019ce8:	e0bffc17 	ldw	r2,-16(fp)
 8019cec:	1000070e 	bge	r2,zero,8019d0c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8019cf0:	8019c140 	call	8019c14 <alt_get_errno>
 8019cf4:	1007883a 	mov	r3,r2
 8019cf8:	e0bffc17 	ldw	r2,-16(fp)
 8019cfc:	0085c83a 	sub	r2,zero,r2
 8019d00:	18800015 	stw	r2,0(r3)
        return -1;
 8019d04:	00bfffc4 	movi	r2,-1
 8019d08:	00000c06 	br	8019d3c <write+0xec>
      }
      return rval;
 8019d0c:	e0bffc17 	ldw	r2,-16(fp)
 8019d10:	00000a06 	br	8019d3c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8019d14:	8019c140 	call	8019c14 <alt_get_errno>
 8019d18:	1007883a 	mov	r3,r2
 8019d1c:	00800344 	movi	r2,13
 8019d20:	18800015 	stw	r2,0(r3)
 8019d24:	00000406 	br	8019d38 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8019d28:	8019c140 	call	8019c14 <alt_get_errno>
 8019d2c:	1007883a 	mov	r3,r2
 8019d30:	00801444 	movi	r2,81
 8019d34:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8019d38:	00bfffc4 	movi	r2,-1
}
 8019d3c:	e037883a 	mov	sp,fp
 8019d40:	dfc00117 	ldw	ra,4(sp)
 8019d44:	df000017 	ldw	fp,0(sp)
 8019d48:	dec00204 	addi	sp,sp,8
 8019d4c:	f800283a 	ret

08019d50 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8019d50:	defffd04 	addi	sp,sp,-12
 8019d54:	dfc00215 	stw	ra,8(sp)
 8019d58:	df000115 	stw	fp,4(sp)
 8019d5c:	df000104 	addi	fp,sp,4
 8019d60:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8019d64:	d1600d04 	addi	r5,gp,-32716
 8019d68:	e13fff17 	ldw	r4,-4(fp)
 8019d6c:	801ae580 	call	801ae58 <alt_dev_llist_insert>
}
 8019d70:	e037883a 	mov	sp,fp
 8019d74:	dfc00117 	ldw	ra,4(sp)
 8019d78:	df000017 	ldw	fp,0(sp)
 8019d7c:	dec00204 	addi	sp,sp,8
 8019d80:	f800283a 	ret

08019d84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8019d84:	defffd04 	addi	sp,sp,-12
 8019d88:	dfc00215 	stw	ra,8(sp)
 8019d8c:	df000115 	stw	fp,4(sp)
 8019d90:	df000104 	addi	fp,sp,4
 8019d94:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 8019d98:	801b6380 	call	801b638 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8019d9c:	00800044 	movi	r2,1
 8019da0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8019da4:	0001883a 	nop
 8019da8:	e037883a 	mov	sp,fp
 8019dac:	dfc00117 	ldw	ra,4(sp)
 8019db0:	df000017 	ldw	fp,0(sp)
 8019db4:	dec00204 	addi	sp,sp,8
 8019db8:	f800283a 	ret

08019dbc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8019dbc:	defffe04 	addi	sp,sp,-8
 8019dc0:	dfc00115 	stw	ra,4(sp)
 8019dc4:	df000015 	stw	fp,0(sp)
 8019dc8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 8019dcc:	01c0fa04 	movi	r7,1000
 8019dd0:	01800084 	movi	r6,2
 8019dd4:	000b883a 	mov	r5,zero
 8019dd8:	01081004 	movi	r4,8256
 8019ddc:	801aafc0 	call	801aafc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 8019de0:	01800044 	movi	r6,1
 8019de4:	000b883a 	mov	r5,zero
 8019de8:	010200b4 	movhi	r4,2050
 8019dec:	21336204 	addi	r4,r4,-12920
 8019df0:	8019f840 	call	8019f84 <altera_avalon_jtag_uart_init>
 8019df4:	010200b4 	movhi	r4,2050
 8019df8:	21335804 	addi	r4,r4,-12960
 8019dfc:	8019d500 	call	8019d50 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
 8019e00:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 8019e04:	0001883a 	nop
}
 8019e08:	0001883a 	nop
 8019e0c:	e037883a 	mov	sp,fp
 8019e10:	dfc00117 	ldw	ra,4(sp)
 8019e14:	df000017 	ldw	fp,0(sp)
 8019e18:	dec00204 	addi	sp,sp,8
 8019e1c:	f800283a 	ret

08019e20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8019e20:	defffa04 	addi	sp,sp,-24
 8019e24:	dfc00515 	stw	ra,20(sp)
 8019e28:	df000415 	stw	fp,16(sp)
 8019e2c:	df000404 	addi	fp,sp,16
 8019e30:	e13ffd15 	stw	r4,-12(fp)
 8019e34:	e17ffe15 	stw	r5,-8(fp)
 8019e38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8019e3c:	e0bffd17 	ldw	r2,-12(fp)
 8019e40:	10800017 	ldw	r2,0(r2)
 8019e44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8019e48:	e0bffc17 	ldw	r2,-16(fp)
 8019e4c:	10c00a04 	addi	r3,r2,40
 8019e50:	e0bffd17 	ldw	r2,-12(fp)
 8019e54:	10800217 	ldw	r2,8(r2)
 8019e58:	100f883a 	mov	r7,r2
 8019e5c:	e1bfff17 	ldw	r6,-4(fp)
 8019e60:	e17ffe17 	ldw	r5,-8(fp)
 8019e64:	1809883a 	mov	r4,r3
 8019e68:	801a4480 	call	801a448 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8019e6c:	e037883a 	mov	sp,fp
 8019e70:	dfc00117 	ldw	ra,4(sp)
 8019e74:	df000017 	ldw	fp,0(sp)
 8019e78:	dec00204 	addi	sp,sp,8
 8019e7c:	f800283a 	ret

08019e80 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8019e80:	defffa04 	addi	sp,sp,-24
 8019e84:	dfc00515 	stw	ra,20(sp)
 8019e88:	df000415 	stw	fp,16(sp)
 8019e8c:	df000404 	addi	fp,sp,16
 8019e90:	e13ffd15 	stw	r4,-12(fp)
 8019e94:	e17ffe15 	stw	r5,-8(fp)
 8019e98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8019e9c:	e0bffd17 	ldw	r2,-12(fp)
 8019ea0:	10800017 	ldw	r2,0(r2)
 8019ea4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8019ea8:	e0bffc17 	ldw	r2,-16(fp)
 8019eac:	10c00a04 	addi	r3,r2,40
 8019eb0:	e0bffd17 	ldw	r2,-12(fp)
 8019eb4:	10800217 	ldw	r2,8(r2)
 8019eb8:	100f883a 	mov	r7,r2
 8019ebc:	e1bfff17 	ldw	r6,-4(fp)
 8019ec0:	e17ffe17 	ldw	r5,-8(fp)
 8019ec4:	1809883a 	mov	r4,r3
 8019ec8:	801a6640 	call	801a664 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8019ecc:	e037883a 	mov	sp,fp
 8019ed0:	dfc00117 	ldw	ra,4(sp)
 8019ed4:	df000017 	ldw	fp,0(sp)
 8019ed8:	dec00204 	addi	sp,sp,8
 8019edc:	f800283a 	ret

08019ee0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8019ee0:	defffc04 	addi	sp,sp,-16
 8019ee4:	dfc00315 	stw	ra,12(sp)
 8019ee8:	df000215 	stw	fp,8(sp)
 8019eec:	df000204 	addi	fp,sp,8
 8019ef0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8019ef4:	e0bfff17 	ldw	r2,-4(fp)
 8019ef8:	10800017 	ldw	r2,0(r2)
 8019efc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8019f00:	e0bffe17 	ldw	r2,-8(fp)
 8019f04:	10c00a04 	addi	r3,r2,40
 8019f08:	e0bfff17 	ldw	r2,-4(fp)
 8019f0c:	10800217 	ldw	r2,8(r2)
 8019f10:	100b883a 	mov	r5,r2
 8019f14:	1809883a 	mov	r4,r3
 8019f18:	801a2f00 	call	801a2f0 <altera_avalon_jtag_uart_close>
}
 8019f1c:	e037883a 	mov	sp,fp
 8019f20:	dfc00117 	ldw	ra,4(sp)
 8019f24:	df000017 	ldw	fp,0(sp)
 8019f28:	dec00204 	addi	sp,sp,8
 8019f2c:	f800283a 	ret

08019f30 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8019f30:	defffa04 	addi	sp,sp,-24
 8019f34:	dfc00515 	stw	ra,20(sp)
 8019f38:	df000415 	stw	fp,16(sp)
 8019f3c:	df000404 	addi	fp,sp,16
 8019f40:	e13ffd15 	stw	r4,-12(fp)
 8019f44:	e17ffe15 	stw	r5,-8(fp)
 8019f48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8019f4c:	e0bffd17 	ldw	r2,-12(fp)
 8019f50:	10800017 	ldw	r2,0(r2)
 8019f54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8019f58:	e0bffc17 	ldw	r2,-16(fp)
 8019f5c:	10800a04 	addi	r2,r2,40
 8019f60:	e1bfff17 	ldw	r6,-4(fp)
 8019f64:	e17ffe17 	ldw	r5,-8(fp)
 8019f68:	1009883a 	mov	r4,r2
 8019f6c:	801a3580 	call	801a358 <altera_avalon_jtag_uart_ioctl>
}
 8019f70:	e037883a 	mov	sp,fp
 8019f74:	dfc00117 	ldw	ra,4(sp)
 8019f78:	df000017 	ldw	fp,0(sp)
 8019f7c:	dec00204 	addi	sp,sp,8
 8019f80:	f800283a 	ret

08019f84 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8019f84:	defffa04 	addi	sp,sp,-24
 8019f88:	dfc00515 	stw	ra,20(sp)
 8019f8c:	df000415 	stw	fp,16(sp)
 8019f90:	df000404 	addi	fp,sp,16
 8019f94:	e13ffd15 	stw	r4,-12(fp)
 8019f98:	e17ffe15 	stw	r5,-8(fp)
 8019f9c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8019fa0:	e0bffd17 	ldw	r2,-12(fp)
 8019fa4:	00c00044 	movi	r3,1
 8019fa8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8019fac:	e0bffd17 	ldw	r2,-12(fp)
 8019fb0:	10800017 	ldw	r2,0(r2)
 8019fb4:	10800104 	addi	r2,r2,4
 8019fb8:	1007883a 	mov	r3,r2
 8019fbc:	e0bffd17 	ldw	r2,-12(fp)
 8019fc0:	10800817 	ldw	r2,32(r2)
 8019fc4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8019fc8:	e0bffe17 	ldw	r2,-8(fp)
 8019fcc:	e0ffff17 	ldw	r3,-4(fp)
 8019fd0:	d8000015 	stw	zero,0(sp)
 8019fd4:	e1fffd17 	ldw	r7,-12(fp)
 8019fd8:	018200b4 	movhi	r6,2050
 8019fdc:	31a81104 	addi	r6,r6,-24508
 8019fe0:	180b883a 	mov	r5,r3
 8019fe4:	1009883a 	mov	r4,r2
 8019fe8:	801b2380 	call	801b238 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8019fec:	e0bffd17 	ldw	r2,-12(fp)
 8019ff0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8019ff4:	e0bffd17 	ldw	r2,-12(fp)
 8019ff8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8019ffc:	d0e6f317 	ldw	r3,-25652(gp)
 801a000:	e1fffd17 	ldw	r7,-12(fp)
 801a004:	018200b4 	movhi	r6,2050
 801a008:	31a89404 	addi	r6,r6,-23984
 801a00c:	180b883a 	mov	r5,r3
 801a010:	1009883a 	mov	r4,r2
 801a014:	801ab780 	call	801ab78 <alt_alarm_start>
 801a018:	1000040e 	bge	r2,zero,801a02c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 801a01c:	e0fffd17 	ldw	r3,-12(fp)
 801a020:	00a00034 	movhi	r2,32768
 801a024:	10bfffc4 	addi	r2,r2,-1
 801a028:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 801a02c:	0001883a 	nop
 801a030:	e037883a 	mov	sp,fp
 801a034:	dfc00117 	ldw	ra,4(sp)
 801a038:	df000017 	ldw	fp,0(sp)
 801a03c:	dec00204 	addi	sp,sp,8
 801a040:	f800283a 	ret

0801a044 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 801a044:	defff804 	addi	sp,sp,-32
 801a048:	df000715 	stw	fp,28(sp)
 801a04c:	df000704 	addi	fp,sp,28
 801a050:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 801a054:	e0bfff17 	ldw	r2,-4(fp)
 801a058:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 801a05c:	e0bffb17 	ldw	r2,-20(fp)
 801a060:	10800017 	ldw	r2,0(r2)
 801a064:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801a068:	e0bffc17 	ldw	r2,-16(fp)
 801a06c:	10800104 	addi	r2,r2,4
 801a070:	10800037 	ldwio	r2,0(r2)
 801a074:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 801a078:	e0bffd17 	ldw	r2,-12(fp)
 801a07c:	1080c00c 	andi	r2,r2,768
 801a080:	10006d26 	beq	r2,zero,801a238 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 801a084:	e0bffd17 	ldw	r2,-12(fp)
 801a088:	1080400c 	andi	r2,r2,256
 801a08c:	10003526 	beq	r2,zero,801a164 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 801a090:	00800074 	movhi	r2,1
 801a094:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801a098:	e0bffb17 	ldw	r2,-20(fp)
 801a09c:	10800a17 	ldw	r2,40(r2)
 801a0a0:	10800044 	addi	r2,r2,1
 801a0a4:	1081ffcc 	andi	r2,r2,2047
 801a0a8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 801a0ac:	e0bffb17 	ldw	r2,-20(fp)
 801a0b0:	10c00b17 	ldw	r3,44(r2)
 801a0b4:	e0bffe17 	ldw	r2,-8(fp)
 801a0b8:	18801526 	beq	r3,r2,801a110 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 801a0bc:	e0bffc17 	ldw	r2,-16(fp)
 801a0c0:	10800037 	ldwio	r2,0(r2)
 801a0c4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 801a0c8:	e0bff917 	ldw	r2,-28(fp)
 801a0cc:	10a0000c 	andi	r2,r2,32768
 801a0d0:	10001126 	beq	r2,zero,801a118 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 801a0d4:	e0bffb17 	ldw	r2,-20(fp)
 801a0d8:	10800a17 	ldw	r2,40(r2)
 801a0dc:	e0fff917 	ldw	r3,-28(fp)
 801a0e0:	1809883a 	mov	r4,r3
 801a0e4:	e0fffb17 	ldw	r3,-20(fp)
 801a0e8:	1885883a 	add	r2,r3,r2
 801a0ec:	10800e04 	addi	r2,r2,56
 801a0f0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801a0f4:	e0bffb17 	ldw	r2,-20(fp)
 801a0f8:	10800a17 	ldw	r2,40(r2)
 801a0fc:	10800044 	addi	r2,r2,1
 801a100:	10c1ffcc 	andi	r3,r2,2047
 801a104:	e0bffb17 	ldw	r2,-20(fp)
 801a108:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 801a10c:	003fe206 	br	801a098 <__alt_data_end+0xfc01a098>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 801a110:	0001883a 	nop
 801a114:	00000106 	br	801a11c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 801a118:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 801a11c:	e0bff917 	ldw	r2,-28(fp)
 801a120:	10bfffec 	andhi	r2,r2,65535
 801a124:	10000f26 	beq	r2,zero,801a164 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801a128:	e0bffb17 	ldw	r2,-20(fp)
 801a12c:	10c00817 	ldw	r3,32(r2)
 801a130:	00bfff84 	movi	r2,-2
 801a134:	1886703a 	and	r3,r3,r2
 801a138:	e0bffb17 	ldw	r2,-20(fp)
 801a13c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 801a140:	e0bffc17 	ldw	r2,-16(fp)
 801a144:	10800104 	addi	r2,r2,4
 801a148:	1007883a 	mov	r3,r2
 801a14c:	e0bffb17 	ldw	r2,-20(fp)
 801a150:	10800817 	ldw	r2,32(r2)
 801a154:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801a158:	e0bffc17 	ldw	r2,-16(fp)
 801a15c:	10800104 	addi	r2,r2,4
 801a160:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 801a164:	e0bffd17 	ldw	r2,-12(fp)
 801a168:	1080800c 	andi	r2,r2,512
 801a16c:	103fbe26 	beq	r2,zero,801a068 <__alt_data_end+0xfc01a068>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 801a170:	e0bffd17 	ldw	r2,-12(fp)
 801a174:	1004d43a 	srli	r2,r2,16
 801a178:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 801a17c:	00001406 	br	801a1d0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 801a180:	e0bffc17 	ldw	r2,-16(fp)
 801a184:	e0fffb17 	ldw	r3,-20(fp)
 801a188:	18c00d17 	ldw	r3,52(r3)
 801a18c:	e13ffb17 	ldw	r4,-20(fp)
 801a190:	20c7883a 	add	r3,r4,r3
 801a194:	18c20e04 	addi	r3,r3,2104
 801a198:	18c00003 	ldbu	r3,0(r3)
 801a19c:	18c03fcc 	andi	r3,r3,255
 801a1a0:	18c0201c 	xori	r3,r3,128
 801a1a4:	18ffe004 	addi	r3,r3,-128
 801a1a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801a1ac:	e0bffb17 	ldw	r2,-20(fp)
 801a1b0:	10800d17 	ldw	r2,52(r2)
 801a1b4:	10800044 	addi	r2,r2,1
 801a1b8:	10c1ffcc 	andi	r3,r2,2047
 801a1bc:	e0bffb17 	ldw	r2,-20(fp)
 801a1c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 801a1c4:	e0bffa17 	ldw	r2,-24(fp)
 801a1c8:	10bfffc4 	addi	r2,r2,-1
 801a1cc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 801a1d0:	e0bffa17 	ldw	r2,-24(fp)
 801a1d4:	10000526 	beq	r2,zero,801a1ec <altera_avalon_jtag_uart_irq+0x1a8>
 801a1d8:	e0bffb17 	ldw	r2,-20(fp)
 801a1dc:	10c00d17 	ldw	r3,52(r2)
 801a1e0:	e0bffb17 	ldw	r2,-20(fp)
 801a1e4:	10800c17 	ldw	r2,48(r2)
 801a1e8:	18bfe51e 	bne	r3,r2,801a180 <__alt_data_end+0xfc01a180>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 801a1ec:	e0bffa17 	ldw	r2,-24(fp)
 801a1f0:	103f9d26 	beq	r2,zero,801a068 <__alt_data_end+0xfc01a068>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801a1f4:	e0bffb17 	ldw	r2,-20(fp)
 801a1f8:	10c00817 	ldw	r3,32(r2)
 801a1fc:	00bfff44 	movi	r2,-3
 801a200:	1886703a 	and	r3,r3,r2
 801a204:	e0bffb17 	ldw	r2,-20(fp)
 801a208:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801a20c:	e0bffb17 	ldw	r2,-20(fp)
 801a210:	10800017 	ldw	r2,0(r2)
 801a214:	10800104 	addi	r2,r2,4
 801a218:	1007883a 	mov	r3,r2
 801a21c:	e0bffb17 	ldw	r2,-20(fp)
 801a220:	10800817 	ldw	r2,32(r2)
 801a224:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801a228:	e0bffc17 	ldw	r2,-16(fp)
 801a22c:	10800104 	addi	r2,r2,4
 801a230:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 801a234:	003f8c06 	br	801a068 <__alt_data_end+0xfc01a068>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 801a238:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 801a23c:	0001883a 	nop
 801a240:	e037883a 	mov	sp,fp
 801a244:	df000017 	ldw	fp,0(sp)
 801a248:	dec00104 	addi	sp,sp,4
 801a24c:	f800283a 	ret

0801a250 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 801a250:	defff804 	addi	sp,sp,-32
 801a254:	df000715 	stw	fp,28(sp)
 801a258:	df000704 	addi	fp,sp,28
 801a25c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 801a260:	e0bffb17 	ldw	r2,-20(fp)
 801a264:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 801a268:	e0bff917 	ldw	r2,-28(fp)
 801a26c:	10800017 	ldw	r2,0(r2)
 801a270:	10800104 	addi	r2,r2,4
 801a274:	10800037 	ldwio	r2,0(r2)
 801a278:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 801a27c:	e0bffa17 	ldw	r2,-24(fp)
 801a280:	1081000c 	andi	r2,r2,1024
 801a284:	10000b26 	beq	r2,zero,801a2b4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 801a288:	e0bff917 	ldw	r2,-28(fp)
 801a28c:	10800017 	ldw	r2,0(r2)
 801a290:	10800104 	addi	r2,r2,4
 801a294:	1007883a 	mov	r3,r2
 801a298:	e0bff917 	ldw	r2,-28(fp)
 801a29c:	10800817 	ldw	r2,32(r2)
 801a2a0:	10810014 	ori	r2,r2,1024
 801a2a4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 801a2a8:	e0bff917 	ldw	r2,-28(fp)
 801a2ac:	10000915 	stw	zero,36(r2)
 801a2b0:	00000a06 	br	801a2dc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 801a2b4:	e0bff917 	ldw	r2,-28(fp)
 801a2b8:	10c00917 	ldw	r3,36(r2)
 801a2bc:	00a00034 	movhi	r2,32768
 801a2c0:	10bfff04 	addi	r2,r2,-4
 801a2c4:	10c00536 	bltu	r2,r3,801a2dc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 801a2c8:	e0bff917 	ldw	r2,-28(fp)
 801a2cc:	10800917 	ldw	r2,36(r2)
 801a2d0:	10c00044 	addi	r3,r2,1
 801a2d4:	e0bff917 	ldw	r2,-28(fp)
 801a2d8:	10c00915 	stw	r3,36(r2)
 801a2dc:	d0a6f317 	ldw	r2,-25652(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 801a2e0:	e037883a 	mov	sp,fp
 801a2e4:	df000017 	ldw	fp,0(sp)
 801a2e8:	dec00104 	addi	sp,sp,4
 801a2ec:	f800283a 	ret

0801a2f0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 801a2f0:	defffd04 	addi	sp,sp,-12
 801a2f4:	df000215 	stw	fp,8(sp)
 801a2f8:	df000204 	addi	fp,sp,8
 801a2fc:	e13ffe15 	stw	r4,-8(fp)
 801a300:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801a304:	00000506 	br	801a31c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 801a308:	e0bfff17 	ldw	r2,-4(fp)
 801a30c:	1090000c 	andi	r2,r2,16384
 801a310:	10000226 	beq	r2,zero,801a31c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 801a314:	00bffd44 	movi	r2,-11
 801a318:	00000b06 	br	801a348 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801a31c:	e0bffe17 	ldw	r2,-8(fp)
 801a320:	10c00d17 	ldw	r3,52(r2)
 801a324:	e0bffe17 	ldw	r2,-8(fp)
 801a328:	10800c17 	ldw	r2,48(r2)
 801a32c:	18800526 	beq	r3,r2,801a344 <altera_avalon_jtag_uart_close+0x54>
 801a330:	e0bffe17 	ldw	r2,-8(fp)
 801a334:	10c00917 	ldw	r3,36(r2)
 801a338:	e0bffe17 	ldw	r2,-8(fp)
 801a33c:	10800117 	ldw	r2,4(r2)
 801a340:	18bff136 	bltu	r3,r2,801a308 <__alt_data_end+0xfc01a308>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 801a344:	0005883a 	mov	r2,zero
}
 801a348:	e037883a 	mov	sp,fp
 801a34c:	df000017 	ldw	fp,0(sp)
 801a350:	dec00104 	addi	sp,sp,4
 801a354:	f800283a 	ret

0801a358 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 801a358:	defffa04 	addi	sp,sp,-24
 801a35c:	df000515 	stw	fp,20(sp)
 801a360:	df000504 	addi	fp,sp,20
 801a364:	e13ffd15 	stw	r4,-12(fp)
 801a368:	e17ffe15 	stw	r5,-8(fp)
 801a36c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 801a370:	00bff9c4 	movi	r2,-25
 801a374:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 801a378:	e0bffe17 	ldw	r2,-8(fp)
 801a37c:	10da8060 	cmpeqi	r3,r2,27137
 801a380:	1800031e 	bne	r3,zero,801a390 <altera_avalon_jtag_uart_ioctl+0x38>
 801a384:	109a80a0 	cmpeqi	r2,r2,27138
 801a388:	1000181e 	bne	r2,zero,801a3ec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 801a38c:	00002906 	br	801a434 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 801a390:	e0bffd17 	ldw	r2,-12(fp)
 801a394:	10c00117 	ldw	r3,4(r2)
 801a398:	00a00034 	movhi	r2,32768
 801a39c:	10bfffc4 	addi	r2,r2,-1
 801a3a0:	18802126 	beq	r3,r2,801a428 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 801a3a4:	e0bfff17 	ldw	r2,-4(fp)
 801a3a8:	10800017 	ldw	r2,0(r2)
 801a3ac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801a3b0:	e0bffc17 	ldw	r2,-16(fp)
 801a3b4:	10800090 	cmplti	r2,r2,2
 801a3b8:	1000061e 	bne	r2,zero,801a3d4 <altera_avalon_jtag_uart_ioctl+0x7c>
 801a3bc:	e0fffc17 	ldw	r3,-16(fp)
 801a3c0:	00a00034 	movhi	r2,32768
 801a3c4:	10bfffc4 	addi	r2,r2,-1
 801a3c8:	18800226 	beq	r3,r2,801a3d4 <altera_avalon_jtag_uart_ioctl+0x7c>
 801a3cc:	e0bffc17 	ldw	r2,-16(fp)
 801a3d0:	00000206 	br	801a3dc <altera_avalon_jtag_uart_ioctl+0x84>
 801a3d4:	00a00034 	movhi	r2,32768
 801a3d8:	10bfff84 	addi	r2,r2,-2
 801a3dc:	e0fffd17 	ldw	r3,-12(fp)
 801a3e0:	18800115 	stw	r2,4(r3)
      rc = 0;
 801a3e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801a3e8:	00000f06 	br	801a428 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 801a3ec:	e0bffd17 	ldw	r2,-12(fp)
 801a3f0:	10c00117 	ldw	r3,4(r2)
 801a3f4:	00a00034 	movhi	r2,32768
 801a3f8:	10bfffc4 	addi	r2,r2,-1
 801a3fc:	18800c26 	beq	r3,r2,801a430 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801a400:	e0bffd17 	ldw	r2,-12(fp)
 801a404:	10c00917 	ldw	r3,36(r2)
 801a408:	e0bffd17 	ldw	r2,-12(fp)
 801a40c:	10800117 	ldw	r2,4(r2)
 801a410:	1885803a 	cmpltu	r2,r3,r2
 801a414:	10c03fcc 	andi	r3,r2,255
 801a418:	e0bfff17 	ldw	r2,-4(fp)
 801a41c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 801a420:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801a424:	00000206 	br	801a430 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 801a428:	0001883a 	nop
 801a42c:	00000106 	br	801a434 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 801a430:	0001883a 	nop

  default:
    break;
  }

  return rc;
 801a434:	e0bffb17 	ldw	r2,-20(fp)
}
 801a438:	e037883a 	mov	sp,fp
 801a43c:	df000017 	ldw	fp,0(sp)
 801a440:	dec00104 	addi	sp,sp,4
 801a444:	f800283a 	ret

0801a448 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 801a448:	defff304 	addi	sp,sp,-52
 801a44c:	dfc00c15 	stw	ra,48(sp)
 801a450:	df000b15 	stw	fp,44(sp)
 801a454:	df000b04 	addi	fp,sp,44
 801a458:	e13ffc15 	stw	r4,-16(fp)
 801a45c:	e17ffd15 	stw	r5,-12(fp)
 801a460:	e1bffe15 	stw	r6,-8(fp)
 801a464:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 801a468:	e0bffd17 	ldw	r2,-12(fp)
 801a46c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801a470:	00004706 	br	801a590 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 801a474:	e0bffc17 	ldw	r2,-16(fp)
 801a478:	10800a17 	ldw	r2,40(r2)
 801a47c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 801a480:	e0bffc17 	ldw	r2,-16(fp)
 801a484:	10800b17 	ldw	r2,44(r2)
 801a488:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 801a48c:	e0fff717 	ldw	r3,-36(fp)
 801a490:	e0bff817 	ldw	r2,-32(fp)
 801a494:	18800536 	bltu	r3,r2,801a4ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 801a498:	e0fff717 	ldw	r3,-36(fp)
 801a49c:	e0bff817 	ldw	r2,-32(fp)
 801a4a0:	1885c83a 	sub	r2,r3,r2
 801a4a4:	e0bff615 	stw	r2,-40(fp)
 801a4a8:	00000406 	br	801a4bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801a4ac:	00c20004 	movi	r3,2048
 801a4b0:	e0bff817 	ldw	r2,-32(fp)
 801a4b4:	1885c83a 	sub	r2,r3,r2
 801a4b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801a4bc:	e0bff617 	ldw	r2,-40(fp)
 801a4c0:	10001e26 	beq	r2,zero,801a53c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 801a4c4:	e0fffe17 	ldw	r3,-8(fp)
 801a4c8:	e0bff617 	ldw	r2,-40(fp)
 801a4cc:	1880022e 	bgeu	r3,r2,801a4d8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 801a4d0:	e0bffe17 	ldw	r2,-8(fp)
 801a4d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 801a4d8:	e0bffc17 	ldw	r2,-16(fp)
 801a4dc:	10c00e04 	addi	r3,r2,56
 801a4e0:	e0bff817 	ldw	r2,-32(fp)
 801a4e4:	1885883a 	add	r2,r3,r2
 801a4e8:	e1bff617 	ldw	r6,-40(fp)
 801a4ec:	100b883a 	mov	r5,r2
 801a4f0:	e13ff517 	ldw	r4,-44(fp)
 801a4f4:	800b3000 	call	800b300 <memcpy>
      ptr   += n;
 801a4f8:	e0fff517 	ldw	r3,-44(fp)
 801a4fc:	e0bff617 	ldw	r2,-40(fp)
 801a500:	1885883a 	add	r2,r3,r2
 801a504:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 801a508:	e0fffe17 	ldw	r3,-8(fp)
 801a50c:	e0bff617 	ldw	r2,-40(fp)
 801a510:	1885c83a 	sub	r2,r3,r2
 801a514:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801a518:	e0fff817 	ldw	r3,-32(fp)
 801a51c:	e0bff617 	ldw	r2,-40(fp)
 801a520:	1885883a 	add	r2,r3,r2
 801a524:	10c1ffcc 	andi	r3,r2,2047
 801a528:	e0bffc17 	ldw	r2,-16(fp)
 801a52c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 801a530:	e0bffe17 	ldw	r2,-8(fp)
 801a534:	00bfcf16 	blt	zero,r2,801a474 <__alt_data_end+0xfc01a474>
 801a538:	00000106 	br	801a540 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 801a53c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 801a540:	e0fff517 	ldw	r3,-44(fp)
 801a544:	e0bffd17 	ldw	r2,-12(fp)
 801a548:	1880141e 	bne	r3,r2,801a59c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 801a54c:	e0bfff17 	ldw	r2,-4(fp)
 801a550:	1090000c 	andi	r2,r2,16384
 801a554:	1000131e 	bne	r2,zero,801a5a4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 801a558:	0001883a 	nop
 801a55c:	e0bffc17 	ldw	r2,-16(fp)
 801a560:	10c00a17 	ldw	r3,40(r2)
 801a564:	e0bff717 	ldw	r2,-36(fp)
 801a568:	1880051e 	bne	r3,r2,801a580 <altera_avalon_jtag_uart_read+0x138>
 801a56c:	e0bffc17 	ldw	r2,-16(fp)
 801a570:	10c00917 	ldw	r3,36(r2)
 801a574:	e0bffc17 	ldw	r2,-16(fp)
 801a578:	10800117 	ldw	r2,4(r2)
 801a57c:	18bff736 	bltu	r3,r2,801a55c <__alt_data_end+0xfc01a55c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 801a580:	e0bffc17 	ldw	r2,-16(fp)
 801a584:	10c00a17 	ldw	r3,40(r2)
 801a588:	e0bff717 	ldw	r2,-36(fp)
 801a58c:	18800726 	beq	r3,r2,801a5ac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801a590:	e0bffe17 	ldw	r2,-8(fp)
 801a594:	00bfb716 	blt	zero,r2,801a474 <__alt_data_end+0xfc01a474>
 801a598:	00000506 	br	801a5b0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 801a59c:	0001883a 	nop
 801a5a0:	00000306 	br	801a5b0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 801a5a4:	0001883a 	nop
 801a5a8:	00000106 	br	801a5b0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 801a5ac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801a5b0:	e0fff517 	ldw	r3,-44(fp)
 801a5b4:	e0bffd17 	ldw	r2,-12(fp)
 801a5b8:	18801826 	beq	r3,r2,801a61c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801a5bc:	0005303a 	rdctl	r2,status
 801a5c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a5c4:	e0fffb17 	ldw	r3,-20(fp)
 801a5c8:	00bfff84 	movi	r2,-2
 801a5cc:	1884703a 	and	r2,r3,r2
 801a5d0:	1001703a 	wrctl	status,r2
  
  return context;
 801a5d4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801a5d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801a5dc:	e0bffc17 	ldw	r2,-16(fp)
 801a5e0:	10800817 	ldw	r2,32(r2)
 801a5e4:	10c00054 	ori	r3,r2,1
 801a5e8:	e0bffc17 	ldw	r2,-16(fp)
 801a5ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801a5f0:	e0bffc17 	ldw	r2,-16(fp)
 801a5f4:	10800017 	ldw	r2,0(r2)
 801a5f8:	10800104 	addi	r2,r2,4
 801a5fc:	1007883a 	mov	r3,r2
 801a600:	e0bffc17 	ldw	r2,-16(fp)
 801a604:	10800817 	ldw	r2,32(r2)
 801a608:	18800035 	stwio	r2,0(r3)
 801a60c:	e0bffa17 	ldw	r2,-24(fp)
 801a610:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801a614:	e0bff917 	ldw	r2,-28(fp)
 801a618:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801a61c:	e0fff517 	ldw	r3,-44(fp)
 801a620:	e0bffd17 	ldw	r2,-12(fp)
 801a624:	18800426 	beq	r3,r2,801a638 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 801a628:	e0fff517 	ldw	r3,-44(fp)
 801a62c:	e0bffd17 	ldw	r2,-12(fp)
 801a630:	1885c83a 	sub	r2,r3,r2
 801a634:	00000606 	br	801a650 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 801a638:	e0bfff17 	ldw	r2,-4(fp)
 801a63c:	1090000c 	andi	r2,r2,16384
 801a640:	10000226 	beq	r2,zero,801a64c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 801a644:	00bffd44 	movi	r2,-11
 801a648:	00000106 	br	801a650 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 801a64c:	00bffec4 	movi	r2,-5
}
 801a650:	e037883a 	mov	sp,fp
 801a654:	dfc00117 	ldw	ra,4(sp)
 801a658:	df000017 	ldw	fp,0(sp)
 801a65c:	dec00204 	addi	sp,sp,8
 801a660:	f800283a 	ret

0801a664 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 801a664:	defff304 	addi	sp,sp,-52
 801a668:	dfc00c15 	stw	ra,48(sp)
 801a66c:	df000b15 	stw	fp,44(sp)
 801a670:	df000b04 	addi	fp,sp,44
 801a674:	e13ffc15 	stw	r4,-16(fp)
 801a678:	e17ffd15 	stw	r5,-12(fp)
 801a67c:	e1bffe15 	stw	r6,-8(fp)
 801a680:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 801a684:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801a688:	e0bffd17 	ldw	r2,-12(fp)
 801a68c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801a690:	00003706 	br	801a770 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 801a694:	e0bffc17 	ldw	r2,-16(fp)
 801a698:	10800c17 	ldw	r2,48(r2)
 801a69c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 801a6a0:	e0bffc17 	ldw	r2,-16(fp)
 801a6a4:	10800d17 	ldw	r2,52(r2)
 801a6a8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 801a6ac:	e0fff917 	ldw	r3,-28(fp)
 801a6b0:	e0bff517 	ldw	r2,-44(fp)
 801a6b4:	1880062e 	bgeu	r3,r2,801a6d0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801a6b8:	e0fff517 	ldw	r3,-44(fp)
 801a6bc:	e0bff917 	ldw	r2,-28(fp)
 801a6c0:	1885c83a 	sub	r2,r3,r2
 801a6c4:	10bfffc4 	addi	r2,r2,-1
 801a6c8:	e0bff615 	stw	r2,-40(fp)
 801a6cc:	00000b06 	br	801a6fc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801a6d0:	e0bff517 	ldw	r2,-44(fp)
 801a6d4:	10000526 	beq	r2,zero,801a6ec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801a6d8:	00c20004 	movi	r3,2048
 801a6dc:	e0bff917 	ldw	r2,-28(fp)
 801a6e0:	1885c83a 	sub	r2,r3,r2
 801a6e4:	e0bff615 	stw	r2,-40(fp)
 801a6e8:	00000406 	br	801a6fc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 801a6ec:	00c1ffc4 	movi	r3,2047
 801a6f0:	e0bff917 	ldw	r2,-28(fp)
 801a6f4:	1885c83a 	sub	r2,r3,r2
 801a6f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801a6fc:	e0bff617 	ldw	r2,-40(fp)
 801a700:	10001e26 	beq	r2,zero,801a77c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 801a704:	e0fffe17 	ldw	r3,-8(fp)
 801a708:	e0bff617 	ldw	r2,-40(fp)
 801a70c:	1880022e 	bgeu	r3,r2,801a718 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 801a710:	e0bffe17 	ldw	r2,-8(fp)
 801a714:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 801a718:	e0bffc17 	ldw	r2,-16(fp)
 801a71c:	10c20e04 	addi	r3,r2,2104
 801a720:	e0bff917 	ldw	r2,-28(fp)
 801a724:	1885883a 	add	r2,r3,r2
 801a728:	e1bff617 	ldw	r6,-40(fp)
 801a72c:	e17ffd17 	ldw	r5,-12(fp)
 801a730:	1009883a 	mov	r4,r2
 801a734:	800b3000 	call	800b300 <memcpy>
      ptr   += n;
 801a738:	e0fffd17 	ldw	r3,-12(fp)
 801a73c:	e0bff617 	ldw	r2,-40(fp)
 801a740:	1885883a 	add	r2,r3,r2
 801a744:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 801a748:	e0fffe17 	ldw	r3,-8(fp)
 801a74c:	e0bff617 	ldw	r2,-40(fp)
 801a750:	1885c83a 	sub	r2,r3,r2
 801a754:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801a758:	e0fff917 	ldw	r3,-28(fp)
 801a75c:	e0bff617 	ldw	r2,-40(fp)
 801a760:	1885883a 	add	r2,r3,r2
 801a764:	10c1ffcc 	andi	r3,r2,2047
 801a768:	e0bffc17 	ldw	r2,-16(fp)
 801a76c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801a770:	e0bffe17 	ldw	r2,-8(fp)
 801a774:	00bfc716 	blt	zero,r2,801a694 <__alt_data_end+0xfc01a694>
 801a778:	00000106 	br	801a780 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 801a77c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801a780:	0005303a 	rdctl	r2,status
 801a784:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a788:	e0fffb17 	ldw	r3,-20(fp)
 801a78c:	00bfff84 	movi	r2,-2
 801a790:	1884703a 	and	r2,r3,r2
 801a794:	1001703a 	wrctl	status,r2
  
  return context;
 801a798:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 801a79c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801a7a0:	e0bffc17 	ldw	r2,-16(fp)
 801a7a4:	10800817 	ldw	r2,32(r2)
 801a7a8:	10c00094 	ori	r3,r2,2
 801a7ac:	e0bffc17 	ldw	r2,-16(fp)
 801a7b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801a7b4:	e0bffc17 	ldw	r2,-16(fp)
 801a7b8:	10800017 	ldw	r2,0(r2)
 801a7bc:	10800104 	addi	r2,r2,4
 801a7c0:	1007883a 	mov	r3,r2
 801a7c4:	e0bffc17 	ldw	r2,-16(fp)
 801a7c8:	10800817 	ldw	r2,32(r2)
 801a7cc:	18800035 	stwio	r2,0(r3)
 801a7d0:	e0bffa17 	ldw	r2,-24(fp)
 801a7d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801a7d8:	e0bff817 	ldw	r2,-32(fp)
 801a7dc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 801a7e0:	e0bffe17 	ldw	r2,-8(fp)
 801a7e4:	0080100e 	bge	zero,r2,801a828 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 801a7e8:	e0bfff17 	ldw	r2,-4(fp)
 801a7ec:	1090000c 	andi	r2,r2,16384
 801a7f0:	1000101e 	bne	r2,zero,801a834 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 801a7f4:	0001883a 	nop
 801a7f8:	e0bffc17 	ldw	r2,-16(fp)
 801a7fc:	10c00d17 	ldw	r3,52(r2)
 801a800:	e0bff517 	ldw	r2,-44(fp)
 801a804:	1880051e 	bne	r3,r2,801a81c <altera_avalon_jtag_uart_write+0x1b8>
 801a808:	e0bffc17 	ldw	r2,-16(fp)
 801a80c:	10c00917 	ldw	r3,36(r2)
 801a810:	e0bffc17 	ldw	r2,-16(fp)
 801a814:	10800117 	ldw	r2,4(r2)
 801a818:	18bff736 	bltu	r3,r2,801a7f8 <__alt_data_end+0xfc01a7f8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 801a81c:	e0bffc17 	ldw	r2,-16(fp)
 801a820:	10800917 	ldw	r2,36(r2)
 801a824:	1000051e 	bne	r2,zero,801a83c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 801a828:	e0bffe17 	ldw	r2,-8(fp)
 801a82c:	00bfd016 	blt	zero,r2,801a770 <__alt_data_end+0xfc01a770>
 801a830:	00000306 	br	801a840 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 801a834:	0001883a 	nop
 801a838:	00000106 	br	801a840 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 801a83c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 801a840:	e0fffd17 	ldw	r3,-12(fp)
 801a844:	e0bff717 	ldw	r2,-36(fp)
 801a848:	18800426 	beq	r3,r2,801a85c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 801a84c:	e0fffd17 	ldw	r3,-12(fp)
 801a850:	e0bff717 	ldw	r2,-36(fp)
 801a854:	1885c83a 	sub	r2,r3,r2
 801a858:	00000606 	br	801a874 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 801a85c:	e0bfff17 	ldw	r2,-4(fp)
 801a860:	1090000c 	andi	r2,r2,16384
 801a864:	10000226 	beq	r2,zero,801a870 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 801a868:	00bffd44 	movi	r2,-11
 801a86c:	00000106 	br	801a874 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 801a870:	00bffec4 	movi	r2,-5
}
 801a874:	e037883a 	mov	sp,fp
 801a878:	dfc00117 	ldw	ra,4(sp)
 801a87c:	df000017 	ldw	fp,0(sp)
 801a880:	dec00204 	addi	sp,sp,8
 801a884:	f800283a 	ret

0801a888 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 801a888:	defff404 	addi	sp,sp,-48
 801a88c:	df000b15 	stw	fp,44(sp)
 801a890:	df000b04 	addi	fp,sp,44
 801a894:	e13ffc15 	stw	r4,-16(fp)
 801a898:	e17ffd15 	stw	r5,-12(fp)
 801a89c:	e1bffe15 	stw	r6,-8(fp)
 801a8a0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 801a8a4:	e0ffff17 	ldw	r3,-4(fp)
 801a8a8:	e0bffe17 	ldw	r2,-8(fp)
 801a8ac:	1885883a 	add	r2,r3,r2
 801a8b0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 801a8b4:	e0c00217 	ldw	r3,8(fp)
 801a8b8:	e0800117 	ldw	r2,4(fp)
 801a8bc:	1885883a 	add	r2,r3,r2
 801a8c0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 801a8c4:	e0800117 	ldw	r2,4(fp)
 801a8c8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 801a8cc:	e0bffe17 	ldw	r2,-8(fp)
 801a8d0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 801a8d4:	00800044 	movi	r2,1
 801a8d8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 801a8dc:	e0bffc17 	ldw	r2,-16(fp)
 801a8e0:	10800504 	addi	r2,r2,20
 801a8e4:	1009883a 	mov	r4,r2
 801a8e8:	00c00044 	movi	r3,1
 801a8ec:	e0bffd17 	ldw	r2,-12(fp)
 801a8f0:	1884983a 	sll	r2,r3,r2
 801a8f4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 801a8f8:	e0800317 	ldw	r2,12(fp)
 801a8fc:	1080008c 	andi	r2,r2,2
 801a900:	1000051e 	bne	r2,zero,801a918 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 801a904:	e0bffc17 	ldw	r2,-16(fp)
 801a908:	10800304 	addi	r2,r2,12
 801a90c:	1007883a 	mov	r3,r2
 801a910:	00810004 	movi	r2,1024
 801a914:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 801a918:	e0bffc17 	ldw	r2,-16(fp)
 801a91c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 801a920:	e0bffc17 	ldw	r2,-16(fp)
 801a924:	10800204 	addi	r2,r2,8
 801a928:	10800037 	ldwio	r2,0(r2)
 801a92c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 801a930:	e0bffa17 	ldw	r2,-24(fp)
 801a934:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 801a938:	10000226 	beq	r2,zero,801a944 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 801a93c:	e0bff717 	ldw	r2,-36(fp)
 801a940:	1000031e 	bne	r2,zero,801a950 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 801a944:	e0bffa17 	ldw	r2,-24(fp)
 801a948:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 801a94c:	103ff426 	beq	r2,zero,801a920 <__alt_data_end+0xfc01a920>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 801a950:	e0bffa17 	ldw	r2,-24(fp)
 801a954:	1080100c 	andi	r2,r2,64
 801a958:	10001e26 	beq	r2,zero,801a9d4 <alt_avalon_spi_command+0x14c>
 801a95c:	e0bff717 	ldw	r2,-36(fp)
 801a960:	00801c0e 	bge	zero,r2,801a9d4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 801a964:	e0bff717 	ldw	r2,-36(fp)
 801a968:	10bfffc4 	addi	r2,r2,-1
 801a96c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 801a970:	e0ffff17 	ldw	r3,-4(fp)
 801a974:	e0bff817 	ldw	r2,-32(fp)
 801a978:	18800a2e 	bgeu	r3,r2,801a9a4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 801a97c:	e0bffc17 	ldw	r2,-16(fp)
 801a980:	10800104 	addi	r2,r2,4
 801a984:	1009883a 	mov	r4,r2
 801a988:	e0bfff17 	ldw	r2,-4(fp)
 801a98c:	10c00044 	addi	r3,r2,1
 801a990:	e0ffff15 	stw	r3,-4(fp)
 801a994:	10800003 	ldbu	r2,0(r2)
 801a998:	10803fcc 	andi	r2,r2,255
 801a99c:	20800035 	stwio	r2,0(r4)
 801a9a0:	00000c06 	br	801a9d4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 801a9a4:	e0bff517 	ldw	r2,-44(fp)
 801a9a8:	10000826 	beq	r2,zero,801a9cc <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 801a9ac:	e0bff517 	ldw	r2,-44(fp)
 801a9b0:	10bfffc4 	addi	r2,r2,-1
 801a9b4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 801a9b8:	e0bffc17 	ldw	r2,-16(fp)
 801a9bc:	10800104 	addi	r2,r2,4
 801a9c0:	0007883a 	mov	r3,zero
 801a9c4:	10c00035 	stwio	r3,0(r2)
 801a9c8:	00000206 	br	801a9d4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 801a9cc:	00bf0004 	movi	r2,-1024
 801a9d0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 801a9d4:	e0bffa17 	ldw	r2,-24(fp)
 801a9d8:	1080200c 	andi	r2,r2,128
 801a9dc:	103fd026 	beq	r2,zero,801a920 <__alt_data_end+0xfc01a920>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 801a9e0:	e0bffc17 	ldw	r2,-16(fp)
 801a9e4:	10800037 	ldwio	r2,0(r2)
 801a9e8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 801a9ec:	e0bff617 	ldw	r2,-40(fp)
 801a9f0:	10000426 	beq	r2,zero,801aa04 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 801a9f4:	e0bff617 	ldw	r2,-40(fp)
 801a9f8:	10bfffc4 	addi	r2,r2,-1
 801a9fc:	e0bff615 	stw	r2,-40(fp)
 801aa00:	00000506 	br	801aa18 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 801aa04:	e0800217 	ldw	r2,8(fp)
 801aa08:	10c00044 	addi	r3,r2,1
 801aa0c:	e0c00215 	stw	r3,8(fp)
 801aa10:	e0fffb17 	ldw	r3,-20(fp)
 801aa14:	10c00005 	stb	r3,0(r2)
      credits++;
 801aa18:	e0bff717 	ldw	r2,-36(fp)
 801aa1c:	10800044 	addi	r2,r2,1
 801aa20:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 801aa24:	e0bff617 	ldw	r2,-40(fp)
 801aa28:	103fbd1e 	bne	r2,zero,801a920 <__alt_data_end+0xfc01a920>
 801aa2c:	e0c00217 	ldw	r3,8(fp)
 801aa30:	e0bff917 	ldw	r2,-28(fp)
 801aa34:	18bfba1e 	bne	r3,r2,801a920 <__alt_data_end+0xfc01a920>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 801aa38:	e0bffc17 	ldw	r2,-16(fp)
 801aa3c:	10800204 	addi	r2,r2,8
 801aa40:	10800037 	ldwio	r2,0(r2)
 801aa44:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 801aa48:	e0bffa17 	ldw	r2,-24(fp)
 801aa4c:	1080080c 	andi	r2,r2,32
 801aa50:	103ff926 	beq	r2,zero,801aa38 <__alt_data_end+0xfc01aa38>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 801aa54:	e0800317 	ldw	r2,12(fp)
 801aa58:	1080004c 	andi	r2,r2,1
 801aa5c:	1000041e 	bne	r2,zero,801aa70 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 801aa60:	e0bffc17 	ldw	r2,-16(fp)
 801aa64:	10800304 	addi	r2,r2,12
 801aa68:	0007883a 	mov	r3,zero
 801aa6c:	10c00035 	stwio	r3,0(r2)

  return read_length;
 801aa70:	e0800117 	ldw	r2,4(fp)
}
 801aa74:	e037883a 	mov	sp,fp
 801aa78:	df000017 	ldw	fp,0(sp)
 801aa7c:	dec00104 	addi	sp,sp,4
 801aa80:	f800283a 	ret

0801aa84 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 801aa84:	defffa04 	addi	sp,sp,-24
 801aa88:	dfc00515 	stw	ra,20(sp)
 801aa8c:	df000415 	stw	fp,16(sp)
 801aa90:	df000404 	addi	fp,sp,16
 801aa94:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 801aa98:	0007883a 	mov	r3,zero
 801aa9c:	e0bfff17 	ldw	r2,-4(fp)
 801aaa0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 801aaa4:	e0bfff17 	ldw	r2,-4(fp)
 801aaa8:	10800104 	addi	r2,r2,4
 801aaac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801aab0:	0005303a 	rdctl	r2,status
 801aab4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801aab8:	e0fffd17 	ldw	r3,-12(fp)
 801aabc:	00bfff84 	movi	r2,-2
 801aac0:	1884703a 	and	r2,r3,r2
 801aac4:	1001703a 	wrctl	status,r2
  
  return context;
 801aac8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 801aacc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 801aad0:	8019adc0 	call	8019adc <alt_tick>
 801aad4:	e0bffc17 	ldw	r2,-16(fp)
 801aad8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801aadc:	e0bffe17 	ldw	r2,-8(fp)
 801aae0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 801aae4:	0001883a 	nop
 801aae8:	e037883a 	mov	sp,fp
 801aaec:	dfc00117 	ldw	ra,4(sp)
 801aaf0:	df000017 	ldw	fp,0(sp)
 801aaf4:	dec00204 	addi	sp,sp,8
 801aaf8:	f800283a 	ret

0801aafc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 801aafc:	defff804 	addi	sp,sp,-32
 801ab00:	dfc00715 	stw	ra,28(sp)
 801ab04:	df000615 	stw	fp,24(sp)
 801ab08:	df000604 	addi	fp,sp,24
 801ab0c:	e13ffc15 	stw	r4,-16(fp)
 801ab10:	e17ffd15 	stw	r5,-12(fp)
 801ab14:	e1bffe15 	stw	r6,-8(fp)
 801ab18:	e1ffff15 	stw	r7,-4(fp)
 801ab1c:	e0bfff17 	ldw	r2,-4(fp)
 801ab20:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801ab24:	d0a6f317 	ldw	r2,-25652(gp)
 801ab28:	1000021e 	bne	r2,zero,801ab34 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 801ab2c:	e0bffb17 	ldw	r2,-20(fp)
 801ab30:	d0a6f315 	stw	r2,-25652(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801ab34:	e0bffc17 	ldw	r2,-16(fp)
 801ab38:	10800104 	addi	r2,r2,4
 801ab3c:	00c001c4 	movi	r3,7
 801ab40:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801ab44:	d8000015 	stw	zero,0(sp)
 801ab48:	e1fffc17 	ldw	r7,-16(fp)
 801ab4c:	018200b4 	movhi	r6,2050
 801ab50:	31aaa104 	addi	r6,r6,-21884
 801ab54:	e17ffe17 	ldw	r5,-8(fp)
 801ab58:	e13ffd17 	ldw	r4,-12(fp)
 801ab5c:	801b2380 	call	801b238 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 801ab60:	0001883a 	nop
 801ab64:	e037883a 	mov	sp,fp
 801ab68:	dfc00117 	ldw	ra,4(sp)
 801ab6c:	df000017 	ldw	fp,0(sp)
 801ab70:	dec00204 	addi	sp,sp,8
 801ab74:	f800283a 	ret

0801ab78 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 801ab78:	defff504 	addi	sp,sp,-44
 801ab7c:	df000a15 	stw	fp,40(sp)
 801ab80:	df000a04 	addi	fp,sp,40
 801ab84:	e13ffc15 	stw	r4,-16(fp)
 801ab88:	e17ffd15 	stw	r5,-12(fp)
 801ab8c:	e1bffe15 	stw	r6,-8(fp)
 801ab90:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801ab94:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801ab98:	d0a6f317 	ldw	r2,-25652(gp)
  
  if (alt_ticks_per_second ())
 801ab9c:	10003c26 	beq	r2,zero,801ac90 <alt_alarm_start+0x118>
  {
    if (alarm)
 801aba0:	e0bffc17 	ldw	r2,-16(fp)
 801aba4:	10003826 	beq	r2,zero,801ac88 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 801aba8:	e0bffc17 	ldw	r2,-16(fp)
 801abac:	e0fffe17 	ldw	r3,-8(fp)
 801abb0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 801abb4:	e0bffc17 	ldw	r2,-16(fp)
 801abb8:	e0ffff17 	ldw	r3,-4(fp)
 801abbc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801abc0:	0005303a 	rdctl	r2,status
 801abc4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801abc8:	e0fff917 	ldw	r3,-28(fp)
 801abcc:	00bfff84 	movi	r2,-2
 801abd0:	1884703a 	and	r2,r3,r2
 801abd4:	1001703a 	wrctl	status,r2
  
  return context;
 801abd8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 801abdc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801abe0:	d0a6f417 	ldw	r2,-25648(gp)
      
      current_nticks = alt_nticks();
 801abe4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 801abe8:	e0fffd17 	ldw	r3,-12(fp)
 801abec:	e0bff617 	ldw	r2,-40(fp)
 801abf0:	1885883a 	add	r2,r3,r2
 801abf4:	10c00044 	addi	r3,r2,1
 801abf8:	e0bffc17 	ldw	r2,-16(fp)
 801abfc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 801ac00:	e0bffc17 	ldw	r2,-16(fp)
 801ac04:	10c00217 	ldw	r3,8(r2)
 801ac08:	e0bff617 	ldw	r2,-40(fp)
 801ac0c:	1880042e 	bgeu	r3,r2,801ac20 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 801ac10:	e0bffc17 	ldw	r2,-16(fp)
 801ac14:	00c00044 	movi	r3,1
 801ac18:	10c00405 	stb	r3,16(r2)
 801ac1c:	00000206 	br	801ac28 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 801ac20:	e0bffc17 	ldw	r2,-16(fp)
 801ac24:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 801ac28:	e0bffc17 	ldw	r2,-16(fp)
 801ac2c:	d0e01204 	addi	r3,gp,-32696
 801ac30:	e0fffa15 	stw	r3,-24(fp)
 801ac34:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801ac38:	e0bffb17 	ldw	r2,-20(fp)
 801ac3c:	e0fffa17 	ldw	r3,-24(fp)
 801ac40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801ac44:	e0bffa17 	ldw	r2,-24(fp)
 801ac48:	10c00017 	ldw	r3,0(r2)
 801ac4c:	e0bffb17 	ldw	r2,-20(fp)
 801ac50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801ac54:	e0bffa17 	ldw	r2,-24(fp)
 801ac58:	10800017 	ldw	r2,0(r2)
 801ac5c:	e0fffb17 	ldw	r3,-20(fp)
 801ac60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801ac64:	e0bffa17 	ldw	r2,-24(fp)
 801ac68:	e0fffb17 	ldw	r3,-20(fp)
 801ac6c:	10c00015 	stw	r3,0(r2)
 801ac70:	e0bff817 	ldw	r2,-32(fp)
 801ac74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801ac78:	e0bff717 	ldw	r2,-36(fp)
 801ac7c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801ac80:	0005883a 	mov	r2,zero
 801ac84:	00000306 	br	801ac94 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 801ac88:	00bffa84 	movi	r2,-22
 801ac8c:	00000106 	br	801ac94 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 801ac90:	00bfde84 	movi	r2,-134
  }
}
 801ac94:	e037883a 	mov	sp,fp
 801ac98:	df000017 	ldw	fp,0(sp)
 801ac9c:	dec00104 	addi	sp,sp,4
 801aca0:	f800283a 	ret

0801aca4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 801aca4:	defffa04 	addi	sp,sp,-24
 801aca8:	dfc00515 	stw	ra,20(sp)
 801acac:	df000415 	stw	fp,16(sp)
 801acb0:	df000404 	addi	fp,sp,16
 801acb4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 801acb8:	00800244 	movi	r2,9
 801acbc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 801acc0:	014003f4 	movhi	r5,15
 801acc4:	29509004 	addi	r5,r5,16960
 801acc8:	e13ffd17 	ldw	r4,-12(fp)
 801accc:	80028f40 	call	80028f4 <__mulsi3>
 801acd0:	100b883a 	mov	r5,r2
 801acd4:	0100bef4 	movhi	r4,763
 801acd8:	213c2004 	addi	r4,r4,-3968
 801acdc:	80028380 	call	8002838 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 801ace0:	100b883a 	mov	r5,r2
 801ace4:	01200034 	movhi	r4,32768
 801ace8:	213fffc4 	addi	r4,r4,-1
 801acec:	80028380 	call	8002838 <__udivsi3>
 801acf0:	100b883a 	mov	r5,r2
 801acf4:	e13fff17 	ldw	r4,-4(fp)
 801acf8:	80028380 	call	8002838 <__udivsi3>
 801acfc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 801ad00:	e0bffe17 	ldw	r2,-8(fp)
 801ad04:	10002a26 	beq	r2,zero,801adb0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 801ad08:	e03ffc15 	stw	zero,-16(fp)
 801ad0c:	00001706 	br	801ad6c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 801ad10:	00a00034 	movhi	r2,32768
 801ad14:	10bfffc4 	addi	r2,r2,-1
 801ad18:	10bfffc4 	addi	r2,r2,-1
 801ad1c:	103ffe1e 	bne	r2,zero,801ad18 <__alt_data_end+0xfc01ad18>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 801ad20:	014003f4 	movhi	r5,15
 801ad24:	29509004 	addi	r5,r5,16960
 801ad28:	e13ffd17 	ldw	r4,-12(fp)
 801ad2c:	80028f40 	call	80028f4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 801ad30:	100b883a 	mov	r5,r2
 801ad34:	0100bef4 	movhi	r4,763
 801ad38:	213c2004 	addi	r4,r4,-3968
 801ad3c:	80028380 	call	8002838 <__udivsi3>
 801ad40:	100b883a 	mov	r5,r2
 801ad44:	01200034 	movhi	r4,32768
 801ad48:	213fffc4 	addi	r4,r4,-1
 801ad4c:	80028380 	call	8002838 <__udivsi3>
 801ad50:	1007883a 	mov	r3,r2
 801ad54:	e0bfff17 	ldw	r2,-4(fp)
 801ad58:	10c5c83a 	sub	r2,r2,r3
 801ad5c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 801ad60:	e0bffc17 	ldw	r2,-16(fp)
 801ad64:	10800044 	addi	r2,r2,1
 801ad68:	e0bffc15 	stw	r2,-16(fp)
 801ad6c:	e0fffc17 	ldw	r3,-16(fp)
 801ad70:	e0bffe17 	ldw	r2,-8(fp)
 801ad74:	18bfe616 	blt	r3,r2,801ad10 <__alt_data_end+0xfc01ad10>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 801ad78:	014003f4 	movhi	r5,15
 801ad7c:	29509004 	addi	r5,r5,16960
 801ad80:	e13ffd17 	ldw	r4,-12(fp)
 801ad84:	80028f40 	call	80028f4 <__mulsi3>
 801ad88:	100b883a 	mov	r5,r2
 801ad8c:	0100bef4 	movhi	r4,763
 801ad90:	213c2004 	addi	r4,r4,-3968
 801ad94:	80028380 	call	8002838 <__udivsi3>
 801ad98:	e17fff17 	ldw	r5,-4(fp)
 801ad9c:	1009883a 	mov	r4,r2
 801ada0:	80028f40 	call	80028f4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 801ada4:	10bfffc4 	addi	r2,r2,-1
 801ada8:	103ffe1e 	bne	r2,zero,801ada4 <__alt_data_end+0xfc01ada4>
 801adac:	00000d06 	br	801ade4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 801adb0:	014003f4 	movhi	r5,15
 801adb4:	29509004 	addi	r5,r5,16960
 801adb8:	e13ffd17 	ldw	r4,-12(fp)
 801adbc:	80028f40 	call	80028f4 <__mulsi3>
 801adc0:	100b883a 	mov	r5,r2
 801adc4:	0100bef4 	movhi	r4,763
 801adc8:	213c2004 	addi	r4,r4,-3968
 801adcc:	80028380 	call	8002838 <__udivsi3>
 801add0:	e17fff17 	ldw	r5,-4(fp)
 801add4:	1009883a 	mov	r4,r2
 801add8:	80028f40 	call	80028f4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 801addc:	10bfffc4 	addi	r2,r2,-1
 801ade0:	00bffe16 	blt	zero,r2,801addc <__alt_data_end+0xfc01addc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 801ade4:	0005883a 	mov	r2,zero
}
 801ade8:	e037883a 	mov	sp,fp
 801adec:	dfc00117 	ldw	ra,4(sp)
 801adf0:	df000017 	ldw	fp,0(sp)
 801adf4:	dec00204 	addi	sp,sp,8
 801adf8:	f800283a 	ret

0801adfc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 801adfc:	deffff04 	addi	sp,sp,-4
 801ae00:	df000015 	stw	fp,0(sp)
 801ae04:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 801ae08:	0001883a 	nop
 801ae0c:	e037883a 	mov	sp,fp
 801ae10:	df000017 	ldw	fp,0(sp)
 801ae14:	dec00104 	addi	sp,sp,4
 801ae18:	f800283a 	ret

0801ae1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801ae1c:	defffe04 	addi	sp,sp,-8
 801ae20:	dfc00115 	stw	ra,4(sp)
 801ae24:	df000015 	stw	fp,0(sp)
 801ae28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801ae2c:	d0a01017 	ldw	r2,-32704(gp)
 801ae30:	10000326 	beq	r2,zero,801ae40 <alt_get_errno+0x24>
 801ae34:	d0a01017 	ldw	r2,-32704(gp)
 801ae38:	103ee83a 	callr	r2
 801ae3c:	00000106 	br	801ae44 <alt_get_errno+0x28>
 801ae40:	d0a6e904 	addi	r2,gp,-25692
}
 801ae44:	e037883a 	mov	sp,fp
 801ae48:	dfc00117 	ldw	ra,4(sp)
 801ae4c:	df000017 	ldw	fp,0(sp)
 801ae50:	dec00204 	addi	sp,sp,8
 801ae54:	f800283a 	ret

0801ae58 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 801ae58:	defffa04 	addi	sp,sp,-24
 801ae5c:	dfc00515 	stw	ra,20(sp)
 801ae60:	df000415 	stw	fp,16(sp)
 801ae64:	df000404 	addi	fp,sp,16
 801ae68:	e13ffe15 	stw	r4,-8(fp)
 801ae6c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801ae70:	e0bffe17 	ldw	r2,-8(fp)
 801ae74:	10000326 	beq	r2,zero,801ae84 <alt_dev_llist_insert+0x2c>
 801ae78:	e0bffe17 	ldw	r2,-8(fp)
 801ae7c:	10800217 	ldw	r2,8(r2)
 801ae80:	1000061e 	bne	r2,zero,801ae9c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 801ae84:	801ae1c0 	call	801ae1c <alt_get_errno>
 801ae88:	1007883a 	mov	r3,r2
 801ae8c:	00800584 	movi	r2,22
 801ae90:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 801ae94:	00bffa84 	movi	r2,-22
 801ae98:	00001306 	br	801aee8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 801ae9c:	e0bffe17 	ldw	r2,-8(fp)
 801aea0:	e0ffff17 	ldw	r3,-4(fp)
 801aea4:	e0fffc15 	stw	r3,-16(fp)
 801aea8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801aeac:	e0bffd17 	ldw	r2,-12(fp)
 801aeb0:	e0fffc17 	ldw	r3,-16(fp)
 801aeb4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801aeb8:	e0bffc17 	ldw	r2,-16(fp)
 801aebc:	10c00017 	ldw	r3,0(r2)
 801aec0:	e0bffd17 	ldw	r2,-12(fp)
 801aec4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801aec8:	e0bffc17 	ldw	r2,-16(fp)
 801aecc:	10800017 	ldw	r2,0(r2)
 801aed0:	e0fffd17 	ldw	r3,-12(fp)
 801aed4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801aed8:	e0bffc17 	ldw	r2,-16(fp)
 801aedc:	e0fffd17 	ldw	r3,-12(fp)
 801aee0:	10c00015 	stw	r3,0(r2)

  return 0;  
 801aee4:	0005883a 	mov	r2,zero
}
 801aee8:	e037883a 	mov	sp,fp
 801aeec:	dfc00117 	ldw	ra,4(sp)
 801aef0:	df000017 	ldw	fp,0(sp)
 801aef4:	dec00204 	addi	sp,sp,8
 801aef8:	f800283a 	ret

0801aefc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 801aefc:	defffd04 	addi	sp,sp,-12
 801af00:	dfc00215 	stw	ra,8(sp)
 801af04:	df000115 	stw	fp,4(sp)
 801af08:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801af0c:	008200b4 	movhi	r2,2050
 801af10:	10aea204 	addi	r2,r2,-17784
 801af14:	e0bfff15 	stw	r2,-4(fp)
 801af18:	00000606 	br	801af34 <_do_ctors+0x38>
        (*ctor) (); 
 801af1c:	e0bfff17 	ldw	r2,-4(fp)
 801af20:	10800017 	ldw	r2,0(r2)
 801af24:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801af28:	e0bfff17 	ldw	r2,-4(fp)
 801af2c:	10bfff04 	addi	r2,r2,-4
 801af30:	e0bfff15 	stw	r2,-4(fp)
 801af34:	e0ffff17 	ldw	r3,-4(fp)
 801af38:	008200b4 	movhi	r2,2050
 801af3c:	10aea304 	addi	r2,r2,-17780
 801af40:	18bff62e 	bgeu	r3,r2,801af1c <__alt_data_end+0xfc01af1c>
        (*ctor) (); 
}
 801af44:	0001883a 	nop
 801af48:	e037883a 	mov	sp,fp
 801af4c:	dfc00117 	ldw	ra,4(sp)
 801af50:	df000017 	ldw	fp,0(sp)
 801af54:	dec00204 	addi	sp,sp,8
 801af58:	f800283a 	ret

0801af5c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 801af5c:	defffd04 	addi	sp,sp,-12
 801af60:	dfc00215 	stw	ra,8(sp)
 801af64:	df000115 	stw	fp,4(sp)
 801af68:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801af6c:	008200b4 	movhi	r2,2050
 801af70:	10aea204 	addi	r2,r2,-17784
 801af74:	e0bfff15 	stw	r2,-4(fp)
 801af78:	00000606 	br	801af94 <_do_dtors+0x38>
        (*dtor) (); 
 801af7c:	e0bfff17 	ldw	r2,-4(fp)
 801af80:	10800017 	ldw	r2,0(r2)
 801af84:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801af88:	e0bfff17 	ldw	r2,-4(fp)
 801af8c:	10bfff04 	addi	r2,r2,-4
 801af90:	e0bfff15 	stw	r2,-4(fp)
 801af94:	e0ffff17 	ldw	r3,-4(fp)
 801af98:	008200b4 	movhi	r2,2050
 801af9c:	10aea304 	addi	r2,r2,-17780
 801afa0:	18bff62e 	bgeu	r3,r2,801af7c <__alt_data_end+0xfc01af7c>
        (*dtor) (); 
}
 801afa4:	0001883a 	nop
 801afa8:	e037883a 	mov	sp,fp
 801afac:	dfc00117 	ldw	ra,4(sp)
 801afb0:	df000017 	ldw	fp,0(sp)
 801afb4:	dec00204 	addi	sp,sp,8
 801afb8:	f800283a 	ret

0801afbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 801afbc:	defffa04 	addi	sp,sp,-24
 801afc0:	dfc00515 	stw	ra,20(sp)
 801afc4:	df000415 	stw	fp,16(sp)
 801afc8:	df000404 	addi	fp,sp,16
 801afcc:	e13ffe15 	stw	r4,-8(fp)
 801afd0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801afd4:	e0bfff17 	ldw	r2,-4(fp)
 801afd8:	10800017 	ldw	r2,0(r2)
 801afdc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 801afe0:	e13ffe17 	ldw	r4,-8(fp)
 801afe4:	8004cf40 	call	8004cf4 <strlen>
 801afe8:	10800044 	addi	r2,r2,1
 801afec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801aff0:	00000d06 	br	801b028 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801aff4:	e0bffc17 	ldw	r2,-16(fp)
 801aff8:	10800217 	ldw	r2,8(r2)
 801affc:	e0fffd17 	ldw	r3,-12(fp)
 801b000:	180d883a 	mov	r6,r3
 801b004:	e17ffe17 	ldw	r5,-8(fp)
 801b008:	1009883a 	mov	r4,r2
 801b00c:	801b7440 	call	801b744 <memcmp>
 801b010:	1000021e 	bne	r2,zero,801b01c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801b014:	e0bffc17 	ldw	r2,-16(fp)
 801b018:	00000706 	br	801b038 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 801b01c:	e0bffc17 	ldw	r2,-16(fp)
 801b020:	10800017 	ldw	r2,0(r2)
 801b024:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801b028:	e0fffc17 	ldw	r3,-16(fp)
 801b02c:	e0bfff17 	ldw	r2,-4(fp)
 801b030:	18bff01e 	bne	r3,r2,801aff4 <__alt_data_end+0xfc01aff4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 801b034:	0005883a 	mov	r2,zero
}
 801b038:	e037883a 	mov	sp,fp
 801b03c:	dfc00117 	ldw	ra,4(sp)
 801b040:	df000017 	ldw	fp,0(sp)
 801b044:	dec00204 	addi	sp,sp,8
 801b048:	f800283a 	ret

0801b04c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 801b04c:	defffb04 	addi	sp,sp,-20
 801b050:	dfc00415 	stw	ra,16(sp)
 801b054:	df000315 	stw	fp,12(sp)
 801b058:	df000304 	addi	fp,sp,12
 801b05c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 801b060:	d0a00b17 	ldw	r2,-32724(gp)
 801b064:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801b068:	00003106 	br	801b130 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 801b06c:	e0bffd17 	ldw	r2,-12(fp)
 801b070:	10800217 	ldw	r2,8(r2)
 801b074:	1009883a 	mov	r4,r2
 801b078:	8004cf40 	call	8004cf4 <strlen>
 801b07c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 801b080:	e0bffd17 	ldw	r2,-12(fp)
 801b084:	10c00217 	ldw	r3,8(r2)
 801b088:	e0bffe17 	ldw	r2,-8(fp)
 801b08c:	10bfffc4 	addi	r2,r2,-1
 801b090:	1885883a 	add	r2,r3,r2
 801b094:	10800003 	ldbu	r2,0(r2)
 801b098:	10803fcc 	andi	r2,r2,255
 801b09c:	1080201c 	xori	r2,r2,128
 801b0a0:	10bfe004 	addi	r2,r2,-128
 801b0a4:	10800bd8 	cmpnei	r2,r2,47
 801b0a8:	1000031e 	bne	r2,zero,801b0b8 <alt_find_file+0x6c>
    {
      len -= 1;
 801b0ac:	e0bffe17 	ldw	r2,-8(fp)
 801b0b0:	10bfffc4 	addi	r2,r2,-1
 801b0b4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801b0b8:	e0bffe17 	ldw	r2,-8(fp)
 801b0bc:	e0ffff17 	ldw	r3,-4(fp)
 801b0c0:	1885883a 	add	r2,r3,r2
 801b0c4:	10800003 	ldbu	r2,0(r2)
 801b0c8:	10803fcc 	andi	r2,r2,255
 801b0cc:	1080201c 	xori	r2,r2,128
 801b0d0:	10bfe004 	addi	r2,r2,-128
 801b0d4:	10800be0 	cmpeqi	r2,r2,47
 801b0d8:	1000081e 	bne	r2,zero,801b0fc <alt_find_file+0xb0>
 801b0dc:	e0bffe17 	ldw	r2,-8(fp)
 801b0e0:	e0ffff17 	ldw	r3,-4(fp)
 801b0e4:	1885883a 	add	r2,r3,r2
 801b0e8:	10800003 	ldbu	r2,0(r2)
 801b0ec:	10803fcc 	andi	r2,r2,255
 801b0f0:	1080201c 	xori	r2,r2,128
 801b0f4:	10bfe004 	addi	r2,r2,-128
 801b0f8:	10000a1e 	bne	r2,zero,801b124 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 801b0fc:	e0bffd17 	ldw	r2,-12(fp)
 801b100:	10800217 	ldw	r2,8(r2)
 801b104:	e0fffe17 	ldw	r3,-8(fp)
 801b108:	180d883a 	mov	r6,r3
 801b10c:	e17fff17 	ldw	r5,-4(fp)
 801b110:	1009883a 	mov	r4,r2
 801b114:	801b7440 	call	801b744 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801b118:	1000021e 	bne	r2,zero,801b124 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 801b11c:	e0bffd17 	ldw	r2,-12(fp)
 801b120:	00000706 	br	801b140 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 801b124:	e0bffd17 	ldw	r2,-12(fp)
 801b128:	10800017 	ldw	r2,0(r2)
 801b12c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801b130:	e0fffd17 	ldw	r3,-12(fp)
 801b134:	d0a00b04 	addi	r2,gp,-32724
 801b138:	18bfcc1e 	bne	r3,r2,801b06c <__alt_data_end+0xfc01b06c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 801b13c:	0005883a 	mov	r2,zero
}
 801b140:	e037883a 	mov	sp,fp
 801b144:	dfc00117 	ldw	ra,4(sp)
 801b148:	df000017 	ldw	fp,0(sp)
 801b14c:	dec00204 	addi	sp,sp,8
 801b150:	f800283a 	ret

0801b154 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801b154:	defffa04 	addi	sp,sp,-24
 801b158:	dfc00515 	stw	ra,20(sp)
 801b15c:	df000415 	stw	fp,16(sp)
 801b160:	dc000315 	stw	r16,12(sp)
 801b164:	df000404 	addi	fp,sp,16
 801b168:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 801b16c:	00bffa04 	movi	r2,-24
 801b170:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801b174:	e03ffc15 	stw	zero,-16(fp)
 801b178:	00001d06 	br	801b1f0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 801b17c:	040200b4 	movhi	r16,2050
 801b180:	8432f804 	addi	r16,r16,-13344
 801b184:	e0bffc17 	ldw	r2,-16(fp)
 801b188:	01400304 	movi	r5,12
 801b18c:	1009883a 	mov	r4,r2
 801b190:	80028f40 	call	80028f4 <__mulsi3>
 801b194:	8085883a 	add	r2,r16,r2
 801b198:	10800017 	ldw	r2,0(r2)
 801b19c:	1000111e 	bne	r2,zero,801b1e4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 801b1a0:	040200b4 	movhi	r16,2050
 801b1a4:	8432f804 	addi	r16,r16,-13344
 801b1a8:	e0bffc17 	ldw	r2,-16(fp)
 801b1ac:	01400304 	movi	r5,12
 801b1b0:	1009883a 	mov	r4,r2
 801b1b4:	80028f40 	call	80028f4 <__mulsi3>
 801b1b8:	8085883a 	add	r2,r16,r2
 801b1bc:	e0fffe17 	ldw	r3,-8(fp)
 801b1c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 801b1c4:	d0e00f17 	ldw	r3,-32708(gp)
 801b1c8:	e0bffc17 	ldw	r2,-16(fp)
 801b1cc:	1880020e 	bge	r3,r2,801b1d8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 801b1d0:	e0bffc17 	ldw	r2,-16(fp)
 801b1d4:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
 801b1d8:	e0bffc17 	ldw	r2,-16(fp)
 801b1dc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 801b1e0:	00000606 	br	801b1fc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801b1e4:	e0bffc17 	ldw	r2,-16(fp)
 801b1e8:	10800044 	addi	r2,r2,1
 801b1ec:	e0bffc15 	stw	r2,-16(fp)
 801b1f0:	e0bffc17 	ldw	r2,-16(fp)
 801b1f4:	10800810 	cmplti	r2,r2,32
 801b1f8:	103fe01e 	bne	r2,zero,801b17c <__alt_data_end+0xfc01b17c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 801b1fc:	e0bffd17 	ldw	r2,-12(fp)
}
 801b200:	e6ffff04 	addi	sp,fp,-4
 801b204:	dfc00217 	ldw	ra,8(sp)
 801b208:	df000117 	ldw	fp,4(sp)
 801b20c:	dc000017 	ldw	r16,0(sp)
 801b210:	dec00304 	addi	sp,sp,12
 801b214:	f800283a 	ret

0801b218 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 801b218:	deffff04 	addi	sp,sp,-4
 801b21c:	df000015 	stw	fp,0(sp)
 801b220:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 801b224:	0001883a 	nop
 801b228:	e037883a 	mov	sp,fp
 801b22c:	df000017 	ldw	fp,0(sp)
 801b230:	dec00104 	addi	sp,sp,4
 801b234:	f800283a 	ret

0801b238 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801b238:	defff904 	addi	sp,sp,-28
 801b23c:	dfc00615 	stw	ra,24(sp)
 801b240:	df000515 	stw	fp,20(sp)
 801b244:	df000504 	addi	fp,sp,20
 801b248:	e13ffc15 	stw	r4,-16(fp)
 801b24c:	e17ffd15 	stw	r5,-12(fp)
 801b250:	e1bffe15 	stw	r6,-8(fp)
 801b254:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 801b258:	e0800217 	ldw	r2,8(fp)
 801b25c:	d8800015 	stw	r2,0(sp)
 801b260:	e1ffff17 	ldw	r7,-4(fp)
 801b264:	e1bffe17 	ldw	r6,-8(fp)
 801b268:	e17ffd17 	ldw	r5,-12(fp)
 801b26c:	e13ffc17 	ldw	r4,-16(fp)
 801b270:	801b3e80 	call	801b3e8 <alt_iic_isr_register>
}  
 801b274:	e037883a 	mov	sp,fp
 801b278:	dfc00117 	ldw	ra,4(sp)
 801b27c:	df000017 	ldw	fp,0(sp)
 801b280:	dec00204 	addi	sp,sp,8
 801b284:	f800283a 	ret

0801b288 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 801b288:	defff904 	addi	sp,sp,-28
 801b28c:	df000615 	stw	fp,24(sp)
 801b290:	df000604 	addi	fp,sp,24
 801b294:	e13ffe15 	stw	r4,-8(fp)
 801b298:	e17fff15 	stw	r5,-4(fp)
 801b29c:	e0bfff17 	ldw	r2,-4(fp)
 801b2a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801b2a4:	0005303a 	rdctl	r2,status
 801b2a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b2ac:	e0fffb17 	ldw	r3,-20(fp)
 801b2b0:	00bfff84 	movi	r2,-2
 801b2b4:	1884703a 	and	r2,r3,r2
 801b2b8:	1001703a 	wrctl	status,r2
  
  return context;
 801b2bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801b2c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 801b2c4:	00c00044 	movi	r3,1
 801b2c8:	e0bffa17 	ldw	r2,-24(fp)
 801b2cc:	1884983a 	sll	r2,r3,r2
 801b2d0:	1007883a 	mov	r3,r2
 801b2d4:	d0a6f517 	ldw	r2,-25644(gp)
 801b2d8:	1884b03a 	or	r2,r3,r2
 801b2dc:	d0a6f515 	stw	r2,-25644(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801b2e0:	d0a6f517 	ldw	r2,-25644(gp)
 801b2e4:	100170fa 	wrctl	ienable,r2
 801b2e8:	e0bffc17 	ldw	r2,-16(fp)
 801b2ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801b2f0:	e0bffd17 	ldw	r2,-12(fp)
 801b2f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801b2f8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 801b2fc:	0001883a 	nop
}
 801b300:	e037883a 	mov	sp,fp
 801b304:	df000017 	ldw	fp,0(sp)
 801b308:	dec00104 	addi	sp,sp,4
 801b30c:	f800283a 	ret

0801b310 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801b310:	defff904 	addi	sp,sp,-28
 801b314:	df000615 	stw	fp,24(sp)
 801b318:	df000604 	addi	fp,sp,24
 801b31c:	e13ffe15 	stw	r4,-8(fp)
 801b320:	e17fff15 	stw	r5,-4(fp)
 801b324:	e0bfff17 	ldw	r2,-4(fp)
 801b328:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801b32c:	0005303a 	rdctl	r2,status
 801b330:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b334:	e0fffb17 	ldw	r3,-20(fp)
 801b338:	00bfff84 	movi	r2,-2
 801b33c:	1884703a 	and	r2,r3,r2
 801b340:	1001703a 	wrctl	status,r2
  
  return context;
 801b344:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801b348:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 801b34c:	00c00044 	movi	r3,1
 801b350:	e0bffa17 	ldw	r2,-24(fp)
 801b354:	1884983a 	sll	r2,r3,r2
 801b358:	0084303a 	nor	r2,zero,r2
 801b35c:	1007883a 	mov	r3,r2
 801b360:	d0a6f517 	ldw	r2,-25644(gp)
 801b364:	1884703a 	and	r2,r3,r2
 801b368:	d0a6f515 	stw	r2,-25644(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801b36c:	d0a6f517 	ldw	r2,-25644(gp)
 801b370:	100170fa 	wrctl	ienable,r2
 801b374:	e0bffc17 	ldw	r2,-16(fp)
 801b378:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801b37c:	e0bffd17 	ldw	r2,-12(fp)
 801b380:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801b384:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 801b388:	0001883a 	nop
}
 801b38c:	e037883a 	mov	sp,fp
 801b390:	df000017 	ldw	fp,0(sp)
 801b394:	dec00104 	addi	sp,sp,4
 801b398:	f800283a 	ret

0801b39c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 801b39c:	defffc04 	addi	sp,sp,-16
 801b3a0:	df000315 	stw	fp,12(sp)
 801b3a4:	df000304 	addi	fp,sp,12
 801b3a8:	e13ffe15 	stw	r4,-8(fp)
 801b3ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 801b3b0:	000530fa 	rdctl	r2,ienable
 801b3b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 801b3b8:	00c00044 	movi	r3,1
 801b3bc:	e0bfff17 	ldw	r2,-4(fp)
 801b3c0:	1884983a 	sll	r2,r3,r2
 801b3c4:	1007883a 	mov	r3,r2
 801b3c8:	e0bffd17 	ldw	r2,-12(fp)
 801b3cc:	1884703a 	and	r2,r3,r2
 801b3d0:	1004c03a 	cmpne	r2,r2,zero
 801b3d4:	10803fcc 	andi	r2,r2,255
}
 801b3d8:	e037883a 	mov	sp,fp
 801b3dc:	df000017 	ldw	fp,0(sp)
 801b3e0:	dec00104 	addi	sp,sp,4
 801b3e4:	f800283a 	ret

0801b3e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801b3e8:	defff504 	addi	sp,sp,-44
 801b3ec:	dfc00a15 	stw	ra,40(sp)
 801b3f0:	df000915 	stw	fp,36(sp)
 801b3f4:	df000904 	addi	fp,sp,36
 801b3f8:	e13ffc15 	stw	r4,-16(fp)
 801b3fc:	e17ffd15 	stw	r5,-12(fp)
 801b400:	e1bffe15 	stw	r6,-8(fp)
 801b404:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 801b408:	00bffa84 	movi	r2,-22
 801b40c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801b410:	e0bffd17 	ldw	r2,-12(fp)
 801b414:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 801b418:	e0bff817 	ldw	r2,-32(fp)
 801b41c:	10800808 	cmpgei	r2,r2,32
 801b420:	1000271e 	bne	r2,zero,801b4c0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801b424:	0005303a 	rdctl	r2,status
 801b428:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b42c:	e0fffb17 	ldw	r3,-20(fp)
 801b430:	00bfff84 	movi	r2,-2
 801b434:	1884703a 	and	r2,r3,r2
 801b438:	1001703a 	wrctl	status,r2
  
  return context;
 801b43c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801b440:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 801b444:	00820574 	movhi	r2,2069
 801b448:	10aecd04 	addi	r2,r2,-17612
 801b44c:	e0fff817 	ldw	r3,-32(fp)
 801b450:	180690fa 	slli	r3,r3,3
 801b454:	10c5883a 	add	r2,r2,r3
 801b458:	e0fffe17 	ldw	r3,-8(fp)
 801b45c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 801b460:	00820574 	movhi	r2,2069
 801b464:	10aecd04 	addi	r2,r2,-17612
 801b468:	e0fff817 	ldw	r3,-32(fp)
 801b46c:	180690fa 	slli	r3,r3,3
 801b470:	10c5883a 	add	r2,r2,r3
 801b474:	10800104 	addi	r2,r2,4
 801b478:	e0ffff17 	ldw	r3,-4(fp)
 801b47c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 801b480:	e0bffe17 	ldw	r2,-8(fp)
 801b484:	10000526 	beq	r2,zero,801b49c <alt_iic_isr_register+0xb4>
 801b488:	e0bff817 	ldw	r2,-32(fp)
 801b48c:	100b883a 	mov	r5,r2
 801b490:	e13ffc17 	ldw	r4,-16(fp)
 801b494:	801b2880 	call	801b288 <alt_ic_irq_enable>
 801b498:	00000406 	br	801b4ac <alt_iic_isr_register+0xc4>
 801b49c:	e0bff817 	ldw	r2,-32(fp)
 801b4a0:	100b883a 	mov	r5,r2
 801b4a4:	e13ffc17 	ldw	r4,-16(fp)
 801b4a8:	801b3100 	call	801b310 <alt_ic_irq_disable>
 801b4ac:	e0bff715 	stw	r2,-36(fp)
 801b4b0:	e0bffa17 	ldw	r2,-24(fp)
 801b4b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801b4b8:	e0bff917 	ldw	r2,-28(fp)
 801b4bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 801b4c0:	e0bff717 	ldw	r2,-36(fp)
}
 801b4c4:	e037883a 	mov	sp,fp
 801b4c8:	dfc00117 	ldw	ra,4(sp)
 801b4cc:	df000017 	ldw	fp,0(sp)
 801b4d0:	dec00204 	addi	sp,sp,8
 801b4d4:	f800283a 	ret

0801b4d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801b4d8:	defff804 	addi	sp,sp,-32
 801b4dc:	dfc00715 	stw	ra,28(sp)
 801b4e0:	df000615 	stw	fp,24(sp)
 801b4e4:	dc000515 	stw	r16,20(sp)
 801b4e8:	df000604 	addi	fp,sp,24
 801b4ec:	e13ffb15 	stw	r4,-20(fp)
 801b4f0:	e17ffc15 	stw	r5,-16(fp)
 801b4f4:	e1bffd15 	stw	r6,-12(fp)
 801b4f8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 801b4fc:	e1bffe17 	ldw	r6,-8(fp)
 801b500:	e17ffd17 	ldw	r5,-12(fp)
 801b504:	e13ffc17 	ldw	r4,-16(fp)
 801b508:	80196700 	call	8019670 <open>
 801b50c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 801b510:	e0bffa17 	ldw	r2,-24(fp)
 801b514:	10002216 	blt	r2,zero,801b5a0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 801b518:	040200b4 	movhi	r16,2050
 801b51c:	8432f804 	addi	r16,r16,-13344
 801b520:	e0bffa17 	ldw	r2,-24(fp)
 801b524:	01400304 	movi	r5,12
 801b528:	1009883a 	mov	r4,r2
 801b52c:	80028f40 	call	80028f4 <__mulsi3>
 801b530:	8085883a 	add	r2,r16,r2
 801b534:	10c00017 	ldw	r3,0(r2)
 801b538:	e0bffb17 	ldw	r2,-20(fp)
 801b53c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801b540:	040200b4 	movhi	r16,2050
 801b544:	8432f804 	addi	r16,r16,-13344
 801b548:	e0bffa17 	ldw	r2,-24(fp)
 801b54c:	01400304 	movi	r5,12
 801b550:	1009883a 	mov	r4,r2
 801b554:	80028f40 	call	80028f4 <__mulsi3>
 801b558:	8085883a 	add	r2,r16,r2
 801b55c:	10800104 	addi	r2,r2,4
 801b560:	10c00017 	ldw	r3,0(r2)
 801b564:	e0bffb17 	ldw	r2,-20(fp)
 801b568:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 801b56c:	040200b4 	movhi	r16,2050
 801b570:	8432f804 	addi	r16,r16,-13344
 801b574:	e0bffa17 	ldw	r2,-24(fp)
 801b578:	01400304 	movi	r5,12
 801b57c:	1009883a 	mov	r4,r2
 801b580:	80028f40 	call	80028f4 <__mulsi3>
 801b584:	8085883a 	add	r2,r16,r2
 801b588:	10800204 	addi	r2,r2,8
 801b58c:	10c00017 	ldw	r3,0(r2)
 801b590:	e0bffb17 	ldw	r2,-20(fp)
 801b594:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 801b598:	e13ffa17 	ldw	r4,-24(fp)
 801b59c:	801990c0 	call	801990c <alt_release_fd>
  }
} 
 801b5a0:	0001883a 	nop
 801b5a4:	e6ffff04 	addi	sp,fp,-4
 801b5a8:	dfc00217 	ldw	ra,8(sp)
 801b5ac:	df000117 	ldw	fp,4(sp)
 801b5b0:	dc000017 	ldw	r16,0(sp)
 801b5b4:	dec00304 	addi	sp,sp,12
 801b5b8:	f800283a 	ret

0801b5bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 801b5bc:	defffb04 	addi	sp,sp,-20
 801b5c0:	dfc00415 	stw	ra,16(sp)
 801b5c4:	df000315 	stw	fp,12(sp)
 801b5c8:	df000304 	addi	fp,sp,12
 801b5cc:	e13ffd15 	stw	r4,-12(fp)
 801b5d0:	e17ffe15 	stw	r5,-8(fp)
 801b5d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801b5d8:	01c07fc4 	movi	r7,511
 801b5dc:	01800044 	movi	r6,1
 801b5e0:	e17ffd17 	ldw	r5,-12(fp)
 801b5e4:	010200b4 	movhi	r4,2050
 801b5e8:	2132fb04 	addi	r4,r4,-13332
 801b5ec:	801b4d80 	call	801b4d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 801b5f0:	01c07fc4 	movi	r7,511
 801b5f4:	000d883a 	mov	r6,zero
 801b5f8:	e17ffe17 	ldw	r5,-8(fp)
 801b5fc:	010200b4 	movhi	r4,2050
 801b600:	2132f804 	addi	r4,r4,-13344
 801b604:	801b4d80 	call	801b4d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801b608:	01c07fc4 	movi	r7,511
 801b60c:	01800044 	movi	r6,1
 801b610:	e17fff17 	ldw	r5,-4(fp)
 801b614:	010200b4 	movhi	r4,2050
 801b618:	2132fe04 	addi	r4,r4,-13320
 801b61c:	801b4d80 	call	801b4d8 <alt_open_fd>
}  
 801b620:	0001883a 	nop
 801b624:	e037883a 	mov	sp,fp
 801b628:	dfc00117 	ldw	ra,4(sp)
 801b62c:	df000017 	ldw	fp,0(sp)
 801b630:	dec00204 	addi	sp,sp,8
 801b634:	f800283a 	ret

0801b638 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 801b638:	deffff04 	addi	sp,sp,-4
 801b63c:	df000015 	stw	fp,0(sp)
 801b640:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801b644:	000170fa 	wrctl	ienable,zero
}
 801b648:	0001883a 	nop
 801b64c:	e037883a 	mov	sp,fp
 801b650:	df000017 	ldw	fp,0(sp)
 801b654:	dec00104 	addi	sp,sp,4
 801b658:	f800283a 	ret

0801b65c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 801b65c:	defffe04 	addi	sp,sp,-8
 801b660:	df000115 	stw	fp,4(sp)
 801b664:	df000104 	addi	fp,sp,4
 801b668:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 801b66c:	e0bfff17 	ldw	r2,-4(fp)
 801b670:	10bffe84 	addi	r2,r2,-6
 801b674:	10c00428 	cmpgeui	r3,r2,16
 801b678:	18001a1e 	bne	r3,zero,801b6e4 <alt_exception_cause_generated_bad_addr+0x88>
 801b67c:	100690ba 	slli	r3,r2,2
 801b680:	008200b4 	movhi	r2,2050
 801b684:	10ada504 	addi	r2,r2,-18796
 801b688:	1885883a 	add	r2,r3,r2
 801b68c:	10800017 	ldw	r2,0(r2)
 801b690:	1000683a 	jmp	r2
 801b694:	0801b6d4 	ori	zero,at,1755
 801b698:	0801b6d4 	ori	zero,at,1755
 801b69c:	0801b6e4 	muli	zero,at,1755
 801b6a0:	0801b6e4 	muli	zero,at,1755
 801b6a4:	0801b6e4 	muli	zero,at,1755
 801b6a8:	0801b6d4 	ori	zero,at,1755
 801b6ac:	0801b6dc 	xori	zero,at,1755
 801b6b0:	0801b6e4 	muli	zero,at,1755
 801b6b4:	0801b6d4 	ori	zero,at,1755
 801b6b8:	0801b6d4 	ori	zero,at,1755
 801b6bc:	0801b6e4 	muli	zero,at,1755
 801b6c0:	0801b6d4 	ori	zero,at,1755
 801b6c4:	0801b6dc 	xori	zero,at,1755
 801b6c8:	0801b6e4 	muli	zero,at,1755
 801b6cc:	0801b6e4 	muli	zero,at,1755
 801b6d0:	0801b6d4 	ori	zero,at,1755
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 801b6d4:	00800044 	movi	r2,1
 801b6d8:	00000306 	br	801b6e8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 801b6dc:	0005883a 	mov	r2,zero
 801b6e0:	00000106 	br	801b6e8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 801b6e4:	0005883a 	mov	r2,zero
  }
}
 801b6e8:	e037883a 	mov	sp,fp
 801b6ec:	df000017 	ldw	fp,0(sp)
 801b6f0:	dec00104 	addi	sp,sp,4
 801b6f4:	f800283a 	ret

0801b6f8 <atexit>:
 801b6f8:	200b883a 	mov	r5,r4
 801b6fc:	000f883a 	mov	r7,zero
 801b700:	000d883a 	mov	r6,zero
 801b704:	0009883a 	mov	r4,zero
 801b708:	801b7c01 	jmpi	801b7c0 <__register_exitproc>

0801b70c <exit>:
 801b70c:	defffe04 	addi	sp,sp,-8
 801b710:	000b883a 	mov	r5,zero
 801b714:	dc000015 	stw	r16,0(sp)
 801b718:	dfc00115 	stw	ra,4(sp)
 801b71c:	2021883a 	mov	r16,r4
 801b720:	801b8d80 	call	801b8d8 <__call_exitprocs>
 801b724:	008200b4 	movhi	r2,2050
 801b728:	10b77304 	addi	r2,r2,-8756
 801b72c:	11000017 	ldw	r4,0(r2)
 801b730:	20800f17 	ldw	r2,60(r4)
 801b734:	10000126 	beq	r2,zero,801b73c <exit+0x30>
 801b738:	103ee83a 	callr	r2
 801b73c:	8009883a 	mov	r4,r16
 801b740:	801ba580 	call	801ba58 <_exit>

0801b744 <memcmp>:
 801b744:	01c000c4 	movi	r7,3
 801b748:	3980192e 	bgeu	r7,r6,801b7b0 <memcmp+0x6c>
 801b74c:	2144b03a 	or	r2,r4,r5
 801b750:	11c4703a 	and	r2,r2,r7
 801b754:	10000f26 	beq	r2,zero,801b794 <memcmp+0x50>
 801b758:	20800003 	ldbu	r2,0(r4)
 801b75c:	28c00003 	ldbu	r3,0(r5)
 801b760:	10c0151e 	bne	r2,r3,801b7b8 <memcmp+0x74>
 801b764:	31bfff84 	addi	r6,r6,-2
 801b768:	01ffffc4 	movi	r7,-1
 801b76c:	00000406 	br	801b780 <memcmp+0x3c>
 801b770:	20800003 	ldbu	r2,0(r4)
 801b774:	28c00003 	ldbu	r3,0(r5)
 801b778:	31bfffc4 	addi	r6,r6,-1
 801b77c:	10c00e1e 	bne	r2,r3,801b7b8 <memcmp+0x74>
 801b780:	21000044 	addi	r4,r4,1
 801b784:	29400044 	addi	r5,r5,1
 801b788:	31fff91e 	bne	r6,r7,801b770 <__alt_data_end+0xfc01b770>
 801b78c:	0005883a 	mov	r2,zero
 801b790:	f800283a 	ret
 801b794:	20c00017 	ldw	r3,0(r4)
 801b798:	28800017 	ldw	r2,0(r5)
 801b79c:	18bfee1e 	bne	r3,r2,801b758 <__alt_data_end+0xfc01b758>
 801b7a0:	31bfff04 	addi	r6,r6,-4
 801b7a4:	21000104 	addi	r4,r4,4
 801b7a8:	29400104 	addi	r5,r5,4
 801b7ac:	39bff936 	bltu	r7,r6,801b794 <__alt_data_end+0xfc01b794>
 801b7b0:	303fe91e 	bne	r6,zero,801b758 <__alt_data_end+0xfc01b758>
 801b7b4:	003ff506 	br	801b78c <__alt_data_end+0xfc01b78c>
 801b7b8:	10c5c83a 	sub	r2,r2,r3
 801b7bc:	f800283a 	ret

0801b7c0 <__register_exitproc>:
 801b7c0:	defffa04 	addi	sp,sp,-24
 801b7c4:	dc000315 	stw	r16,12(sp)
 801b7c8:	040200b4 	movhi	r16,2050
 801b7cc:	84377304 	addi	r16,r16,-8756
 801b7d0:	80c00017 	ldw	r3,0(r16)
 801b7d4:	dc400415 	stw	r17,16(sp)
 801b7d8:	dfc00515 	stw	ra,20(sp)
 801b7dc:	18805217 	ldw	r2,328(r3)
 801b7e0:	2023883a 	mov	r17,r4
 801b7e4:	10003726 	beq	r2,zero,801b8c4 <__register_exitproc+0x104>
 801b7e8:	10c00117 	ldw	r3,4(r2)
 801b7ec:	010007c4 	movi	r4,31
 801b7f0:	20c00e16 	blt	r4,r3,801b82c <__register_exitproc+0x6c>
 801b7f4:	1a000044 	addi	r8,r3,1
 801b7f8:	8800221e 	bne	r17,zero,801b884 <__register_exitproc+0xc4>
 801b7fc:	18c00084 	addi	r3,r3,2
 801b800:	18c7883a 	add	r3,r3,r3
 801b804:	18c7883a 	add	r3,r3,r3
 801b808:	12000115 	stw	r8,4(r2)
 801b80c:	10c7883a 	add	r3,r2,r3
 801b810:	19400015 	stw	r5,0(r3)
 801b814:	0005883a 	mov	r2,zero
 801b818:	dfc00517 	ldw	ra,20(sp)
 801b81c:	dc400417 	ldw	r17,16(sp)
 801b820:	dc000317 	ldw	r16,12(sp)
 801b824:	dec00604 	addi	sp,sp,24
 801b828:	f800283a 	ret
 801b82c:	00800034 	movhi	r2,0
 801b830:	10800004 	addi	r2,r2,0
 801b834:	10002626 	beq	r2,zero,801b8d0 <__register_exitproc+0x110>
 801b838:	01006404 	movi	r4,400
 801b83c:	d9400015 	stw	r5,0(sp)
 801b840:	d9800115 	stw	r6,4(sp)
 801b844:	d9c00215 	stw	r7,8(sp)
 801b848:	00000000 	call	0 <__alt_mem_onchip_memory>
 801b84c:	d9400017 	ldw	r5,0(sp)
 801b850:	d9800117 	ldw	r6,4(sp)
 801b854:	d9c00217 	ldw	r7,8(sp)
 801b858:	10001d26 	beq	r2,zero,801b8d0 <__register_exitproc+0x110>
 801b85c:	81000017 	ldw	r4,0(r16)
 801b860:	10000115 	stw	zero,4(r2)
 801b864:	02000044 	movi	r8,1
 801b868:	22405217 	ldw	r9,328(r4)
 801b86c:	0007883a 	mov	r3,zero
 801b870:	12400015 	stw	r9,0(r2)
 801b874:	20805215 	stw	r2,328(r4)
 801b878:	10006215 	stw	zero,392(r2)
 801b87c:	10006315 	stw	zero,396(r2)
 801b880:	883fde26 	beq	r17,zero,801b7fc <__alt_data_end+0xfc01b7fc>
 801b884:	18c9883a 	add	r4,r3,r3
 801b888:	2109883a 	add	r4,r4,r4
 801b88c:	1109883a 	add	r4,r2,r4
 801b890:	21802215 	stw	r6,136(r4)
 801b894:	01800044 	movi	r6,1
 801b898:	12406217 	ldw	r9,392(r2)
 801b89c:	30cc983a 	sll	r6,r6,r3
 801b8a0:	4992b03a 	or	r9,r9,r6
 801b8a4:	12406215 	stw	r9,392(r2)
 801b8a8:	21c04215 	stw	r7,264(r4)
 801b8ac:	01000084 	movi	r4,2
 801b8b0:	893fd21e 	bne	r17,r4,801b7fc <__alt_data_end+0xfc01b7fc>
 801b8b4:	11006317 	ldw	r4,396(r2)
 801b8b8:	218cb03a 	or	r6,r4,r6
 801b8bc:	11806315 	stw	r6,396(r2)
 801b8c0:	003fce06 	br	801b7fc <__alt_data_end+0xfc01b7fc>
 801b8c4:	18805304 	addi	r2,r3,332
 801b8c8:	18805215 	stw	r2,328(r3)
 801b8cc:	003fc606 	br	801b7e8 <__alt_data_end+0xfc01b7e8>
 801b8d0:	00bfffc4 	movi	r2,-1
 801b8d4:	003fd006 	br	801b818 <__alt_data_end+0xfc01b818>

0801b8d8 <__call_exitprocs>:
 801b8d8:	defff504 	addi	sp,sp,-44
 801b8dc:	df000915 	stw	fp,36(sp)
 801b8e0:	dd400615 	stw	r21,24(sp)
 801b8e4:	dc800315 	stw	r18,12(sp)
 801b8e8:	dfc00a15 	stw	ra,40(sp)
 801b8ec:	ddc00815 	stw	r23,32(sp)
 801b8f0:	dd800715 	stw	r22,28(sp)
 801b8f4:	dd000515 	stw	r20,20(sp)
 801b8f8:	dcc00415 	stw	r19,16(sp)
 801b8fc:	dc400215 	stw	r17,8(sp)
 801b900:	dc000115 	stw	r16,4(sp)
 801b904:	d9000015 	stw	r4,0(sp)
 801b908:	2839883a 	mov	fp,r5
 801b90c:	04800044 	movi	r18,1
 801b910:	057fffc4 	movi	r21,-1
 801b914:	008200b4 	movhi	r2,2050
 801b918:	10b77304 	addi	r2,r2,-8756
 801b91c:	12000017 	ldw	r8,0(r2)
 801b920:	45005217 	ldw	r20,328(r8)
 801b924:	44c05204 	addi	r19,r8,328
 801b928:	a0001c26 	beq	r20,zero,801b99c <__call_exitprocs+0xc4>
 801b92c:	a0800117 	ldw	r2,4(r20)
 801b930:	15ffffc4 	addi	r23,r2,-1
 801b934:	b8000d16 	blt	r23,zero,801b96c <__call_exitprocs+0x94>
 801b938:	14000044 	addi	r16,r2,1
 801b93c:	8421883a 	add	r16,r16,r16
 801b940:	8421883a 	add	r16,r16,r16
 801b944:	84402004 	addi	r17,r16,128
 801b948:	a463883a 	add	r17,r20,r17
 801b94c:	a421883a 	add	r16,r20,r16
 801b950:	e0001e26 	beq	fp,zero,801b9cc <__call_exitprocs+0xf4>
 801b954:	80804017 	ldw	r2,256(r16)
 801b958:	e0801c26 	beq	fp,r2,801b9cc <__call_exitprocs+0xf4>
 801b95c:	bdffffc4 	addi	r23,r23,-1
 801b960:	843fff04 	addi	r16,r16,-4
 801b964:	8c7fff04 	addi	r17,r17,-4
 801b968:	bd7ff91e 	bne	r23,r21,801b950 <__alt_data_end+0xfc01b950>
 801b96c:	00800034 	movhi	r2,0
 801b970:	10800004 	addi	r2,r2,0
 801b974:	10000926 	beq	r2,zero,801b99c <__call_exitprocs+0xc4>
 801b978:	a0800117 	ldw	r2,4(r20)
 801b97c:	1000301e 	bne	r2,zero,801ba40 <__call_exitprocs+0x168>
 801b980:	a0800017 	ldw	r2,0(r20)
 801b984:	10003226 	beq	r2,zero,801ba50 <__call_exitprocs+0x178>
 801b988:	a009883a 	mov	r4,r20
 801b98c:	98800015 	stw	r2,0(r19)
 801b990:	00000000 	call	0 <__alt_mem_onchip_memory>
 801b994:	9d000017 	ldw	r20,0(r19)
 801b998:	a03fe41e 	bne	r20,zero,801b92c <__alt_data_end+0xfc01b92c>
 801b99c:	dfc00a17 	ldw	ra,40(sp)
 801b9a0:	df000917 	ldw	fp,36(sp)
 801b9a4:	ddc00817 	ldw	r23,32(sp)
 801b9a8:	dd800717 	ldw	r22,28(sp)
 801b9ac:	dd400617 	ldw	r21,24(sp)
 801b9b0:	dd000517 	ldw	r20,20(sp)
 801b9b4:	dcc00417 	ldw	r19,16(sp)
 801b9b8:	dc800317 	ldw	r18,12(sp)
 801b9bc:	dc400217 	ldw	r17,8(sp)
 801b9c0:	dc000117 	ldw	r16,4(sp)
 801b9c4:	dec00b04 	addi	sp,sp,44
 801b9c8:	f800283a 	ret
 801b9cc:	a0800117 	ldw	r2,4(r20)
 801b9d0:	80c00017 	ldw	r3,0(r16)
 801b9d4:	10bfffc4 	addi	r2,r2,-1
 801b9d8:	15c01426 	beq	r2,r23,801ba2c <__call_exitprocs+0x154>
 801b9dc:	80000015 	stw	zero,0(r16)
 801b9e0:	183fde26 	beq	r3,zero,801b95c <__alt_data_end+0xfc01b95c>
 801b9e4:	95c8983a 	sll	r4,r18,r23
 801b9e8:	a0806217 	ldw	r2,392(r20)
 801b9ec:	a5800117 	ldw	r22,4(r20)
 801b9f0:	2084703a 	and	r2,r4,r2
 801b9f4:	10000b26 	beq	r2,zero,801ba24 <__call_exitprocs+0x14c>
 801b9f8:	a0806317 	ldw	r2,396(r20)
 801b9fc:	2088703a 	and	r4,r4,r2
 801ba00:	20000c1e 	bne	r4,zero,801ba34 <__call_exitprocs+0x15c>
 801ba04:	89400017 	ldw	r5,0(r17)
 801ba08:	d9000017 	ldw	r4,0(sp)
 801ba0c:	183ee83a 	callr	r3
 801ba10:	a0800117 	ldw	r2,4(r20)
 801ba14:	15bfbf1e 	bne	r2,r22,801b914 <__alt_data_end+0xfc01b914>
 801ba18:	98800017 	ldw	r2,0(r19)
 801ba1c:	153fcf26 	beq	r2,r20,801b95c <__alt_data_end+0xfc01b95c>
 801ba20:	003fbc06 	br	801b914 <__alt_data_end+0xfc01b914>
 801ba24:	183ee83a 	callr	r3
 801ba28:	003ff906 	br	801ba10 <__alt_data_end+0xfc01ba10>
 801ba2c:	a5c00115 	stw	r23,4(r20)
 801ba30:	003feb06 	br	801b9e0 <__alt_data_end+0xfc01b9e0>
 801ba34:	89000017 	ldw	r4,0(r17)
 801ba38:	183ee83a 	callr	r3
 801ba3c:	003ff406 	br	801ba10 <__alt_data_end+0xfc01ba10>
 801ba40:	a0800017 	ldw	r2,0(r20)
 801ba44:	a027883a 	mov	r19,r20
 801ba48:	1029883a 	mov	r20,r2
 801ba4c:	003fb606 	br	801b928 <__alt_data_end+0xfc01b928>
 801ba50:	0005883a 	mov	r2,zero
 801ba54:	003ffb06 	br	801ba44 <__alt_data_end+0xfc01ba44>

0801ba58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 801ba58:	defffd04 	addi	sp,sp,-12
 801ba5c:	df000215 	stw	fp,8(sp)
 801ba60:	df000204 	addi	fp,sp,8
 801ba64:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 801ba68:	0001883a 	nop
 801ba6c:	e0bfff17 	ldw	r2,-4(fp)
 801ba70:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 801ba74:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801ba78:	10000226 	beq	r2,zero,801ba84 <_exit+0x2c>
    ALT_SIM_FAIL();
 801ba7c:	002af070 	cmpltui	zero,zero,43969
 801ba80:	00000106 	br	801ba88 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 801ba84:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 801ba88:	003fff06 	br	801ba88 <__alt_data_end+0xfc01ba88>
