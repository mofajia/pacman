
pacman.elf:     file format elf32-littlenios2
pacman.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0001707c memsz 0x0001707c flags r-x
    LOAD off    0x0001809c vaddr 0x0401709c paddr 0x04018c00 align 2**12
         filesz 0x00001b64 memsz 0x00001b64 flags rw-
    LOAD off    0x0001a764 vaddr 0x0401a764 paddr 0x0401a764 align 2**12
         filesz 0x00000000 memsz 0x000015c0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016908  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000564  04016b38  04016b38  00017b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b64  0401709c  04018c00  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000015c0  0401a764  0401a764  0001a764  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00000000  00000000  00019c00  2**0
                  CONTENTS
  7 .sdram        00000000  0401bd24  0401bd24  00019c00  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00019c00  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010b0  00000000  00000000  00019c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00029403  00000000  00000000  0001acd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a56d  00000000  00000000  000440db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d3a5  00000000  00000000  0004e648  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002e58  00000000  00000000  0005b9f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000462e  00000000  00000000  0005e848  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017d3c  00000000  00000000  00062e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0007abb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019b0  00000000  00000000  0007abf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000803d2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000f  00000000  00000000  000803d5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000803e4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000803e5  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000803e6  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000803ea  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000803ee  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000803f2  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000803fb  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00080404  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0008040d  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000010  00000000  00000000  00080417  2**0
                  CONTENTS, READONLY
 30 .jdi          0000560b  00000000  00000000  00080427  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008c4a8  00000000  00000000  00085a32  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
04016b38 l    d  .rodata	00000000 .rodata
0401709c l    d  .rwdata	00000000 .rwdata
0401a764 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory	00000000 .onchip_memory
0401bd24 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pacman_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
04018ba8 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 pacman.c
00000000 l    df *ABS*	00000000 spu.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0401a77c l     O .bss	00000004 usb_delay.2608
0401a780 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
04016dea l     O .rodata	00000010 zeroes.4404
040093dc l     F .text	000000bc __sbprintf
04016dfa l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
040095ec l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0400b144 l     F .text	00000008 __fp_unlock
0400b158 l     F .text	0000019c __sinit.part.1
0400b2f4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
040170fc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04017540 l     O .rwdata	00000020 lc_ctype_charset
04017520 l     O .rwdata	00000020 lc_message_charset
04017560 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04016e2c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400e864 l     F .text	000000fc __sprint_r.part.0
04016f50 l     O .rodata	00000010 zeroes.4349
0400fea0 l     F .text	000000bc __sbprintf
04016f60 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04013e18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04013f2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04013f58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
04014240 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04014328 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04014414 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
040145f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04018bf0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04014a38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04014b74 l     F .text	00000034 alt_dev_reg
04017b48 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04014e6c l     F .text	0000020c altera_avalon_jtag_uart_irq
04015078 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
040158ac l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04015c44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040160a4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04016204 l     F .text	0000003c alt_get_errno
04016240 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0401a7c8 g     O .bss	00000004 alt_instruction_exception_handler
04006e94 g     F .text	00000018 putchar
0400dd40 g     F .text	00000074 _mprec_log10
0400de2c g     F .text	0000008c __any_on
040105ac g     F .text	00000054 _isatty_r
04016e38 g     O .rodata	00000028 __mprec_tinytens
0401452c g     F .text	0000007c alt_main
04018bb4 g     O .rwdata	00000008 ctrl_xfers
04006eac g     F .text	000000c0 _puts_r
0401bc24 g     O .bss	00000100 alt_irq
04010600 g     F .text	00000060 _lseek_r
040062d0 g     F .text	00000644 USB_Task
04018c00 g       *ABS*	00000000 __flash_rwdata_start
040127f0 g     F .text	00000088 .hidden __eqdf2
0401a81c g     O .bss	000012c0 map
0400bf78 g     F .text	0000005c _gettimeofday_r
0401bd24 g       *ABS*	00000000 __alt_heap_start
04006e50 g     F .text	0000003c printf
040106c0 g     F .text	0000009c _wcrtomb_r
040053d4 g     F .text	00000088 kbdPoll
0400e724 g     F .text	0000005c __sseek
0400b4a4 g     F .text	00000010 __sinit
040019e8 g     F .text	00000444 pacman_task
0400ff5c g     F .text	00000140 __swbuf_r
0400026c g     F .text	00000034 spu_control
0400bfd4 g     F .text	0000007c _setlocale_r
0400b2fc g     F .text	00000078 __sfmoreglue
040145cc g     F .text	00000024 __malloc_unlock
040002a0 g     F .text	000001f0 GetDriverandReport
0400cca4 g     F .text	0000015c memmove
0400b48c g     F .text	00000018 _cleanup
0400ce00 g     F .text	000000a8 _Balloc
04005528 g     F .text	0000008c MAXreg_wr
040007c4 g     F .text	000000a8 randomly_change_direction
040170cc g     O .rwdata	00000030 ClientDriverTable
040049f4 g     F .text	0000005c spu_set_sprite
04012878 g     F .text	000000dc .hidden __gtdf2
04016488 g     F .text	00000024 altera_nios2_gen2_irq_init
04006914 g     F .text	0000002c MSDProbe
04000000 g     F .entry	0000000c __reset
04005dd0 g     F .text	000000e8 XferCtrlData
04000020 g       *ABS*	00000000 __flash_exceptions_start
0401a7cc g     O .bss	00000010 hid_ep
04010550 g     F .text	0000005c _fstat_r
0401a784 g     O .bss	00000004 errno
0400e6a0 g     F .text	00000008 __seofread
0401a7b4 g     O .bss	00000004 alt_argv
04020ba8 g       *ABS*	00000000 _gp
04014a08 g     F .text	00000030 usleep
0400571c g     F .text	00000080 MAXreg_rd
04002ee8 g     F .text	000000b0 random_map
04002538 g     F .text	00000058 get_food
040179c8 g     O .rwdata	00000180 alt_fd_list
0400530c g     F .text	00000040 HID_init
04006e8c g     F .text	00000008 _putchar_r
040164ac g     F .text	00000090 alt_find_dev
0400cb5c g     F .text	00000148 memcpy
0400b14c g     F .text	0000000c _cleanup_r
04013c30 g     F .text	000000dc .hidden __floatsidf
04016188 g     F .text	0000007c alt_io_redirect
04012954 g     F .text	000000f4 .hidden __ltdf2
04016b38 g       *ABS*	00000000 __DTOR_END__
04006f6c g     F .text	00000014 puts
04016708 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400e584 g     F .text	00000074 __fpclassifyd
0400dc9c g     F .text	000000a4 __ratio
0400fe84 g     F .text	0000001c __vfiprintf_internal
040023c8 g     F .text	00000028 sprite_type
04015270 g     F .text	0000021c altera_avalon_jtag_uart_read
04006e20 g     F .text	00000030 _printf_r
04006c14 g     F .text	00000064 .hidden __udivsi3
0401427c g     F .text	000000ac isatty
04002590 g     F .text	000000d0 get_sprite
04016e88 g     O .rodata	000000c8 __mprec_tens
0400c050 g     F .text	0000000c __locale_charset
0401a7a0 g     O .bss	00000008 alt_timezone
0401a79c g     O .bss	00000004 __malloc_top_pad
04018bbc g     O .rwdata	00000001 usb_task_state
04018bc8 g     O .rwdata	00000004 __mb_cur_max
0400c080 g     F .text	0000000c _localeconv_r
0400d234 g     F .text	0000003c __i2b
0400b928 g     F .text	000004c8 __sfvwrite_r
0400e5f8 g     F .text	00000054 _sbrk_r
04010660 g     F .text	00000060 _read_r
04005a84 g     F .text	00000094 MAX3421E_init
0400078c g     F .text	00000038 setKeycode
04018be8 g     O .rwdata	00000004 alt_max_fd
04010244 g     F .text	000000f0 _fclose_r
0400b114 g     F .text	00000030 fflush
0401a798 g     O .bss	00000004 __malloc_max_sbrked_mem
04011574 g     F .text	000008ac .hidden __adddf3
0400da44 g     F .text	0000010c __b2d
04010fb0 g     F .text	000005c4 .hidden __umoddi3
04014450 g     F .text	000000dc lseek
04018bc0 g     O .rwdata	00000004 _global_impure_ptr
0400e020 g     F .text	00000564 _realloc_r
0401bd24 g       *ABS*	00000000 __bss_end
04015fb4 g     F .text	000000f0 alt_iic_isr_register
04014900 g     F .text	00000108 alt_tick
040170bc g     O .rwdata	00000010 ghost_ys
040109b4 g     F .text	000005fc .hidden __udivdi3
040104ac g     F .text	00000024 _fputwc_r
04016e60 g     O .rodata	00000028 __mprec_bigtens
0400d018 g     F .text	00000104 __s2b
04013d0c g     F .text	000000a8 .hidden __floatunsidf
0400d784 g     F .text	00000060 __mcmp
0400b4c4 g     F .text	00000018 __fp_lock_all
04015f68 g     F .text	0000004c alt_ic_irq_enabled
04014864 g     F .text	0000009c alt_alarm_stop
0401a7c4 g     O .bss	00000004 alt_irq_active
040069dc g     F .text	0000002c DummyProbe
040000fc g     F .exceptions	000000d4 alt_irq_handler
040179a0 g     O .rwdata	00000028 alt_dev_null
0400534c g     F .text	00000088 mousePoll
04002f98 g     F .text	00000e88 test_map
040058d8 g     F .text	00000024 Vbus_power
04015c24 g     F .text	00000020 alt_dcache_flush_all
0400d11c g     F .text	00000068 __hi0bits
04013bb0 g     F .text	00000080 .hidden __fixdfsi
0400086c g     F .text	0000117c ghost_go
04018c00 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
04018be0 g     O .rwdata	00000008 alt_dev_list
04014a74 g     F .text	00000100 write
0400deb8 g     F .text	000000a0 _putc_r
0401709c g       *ABS*	00000000 __ram_rodata_end
0401a781 g     O .bss	00000001 usb_error
04013f94 g     F .text	000000b8 fstat
04012954 g     F .text	000000f4 .hidden __ledf2
0400d4fc g     F .text	00000140 __pow5mult
0400e978 g     F .text	0000150c ___vfiprintf_internal_r
0401a790 g     O .bss	00000004 __nlocale_changed
04006c78 g     F .text	00000058 .hidden __umodsi3
0401bd24 g       *ABS*	00000000 end
04003e20 g     F .text	00000b24 game_over
04002af4 g     F .text	000003f4 random_walls
04014dac g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04005f2c g     F .text	0000017c XferDispatchPkt
04016b38 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04015924 g     F .text	0000007c alt_avalon_timer_sc_init
04013db4 g     F .text	00000064 .hidden __clzsi2
0401548c g     F .text	00000224 altera_avalon_jtag_uart_write
0400b4b4 g     F .text	00000004 __sfp_lock_acquire
0400ca78 g     F .text	000000e4 memchr
040070e4 g     F .text	000022dc ___vfprintf_internal_r
04005c50 g     F .text	00000034 MaxGpxHandler
0400b618 g     F .text	00000310 _free_r
0400c05c g     F .text	00000010 __locale_mb_cur_max
04016984 g     F .text	00000180 __call_exitprocs
0401a78c g     O .bss	00000004 __mlocale_changed
04018bcc g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
0401a7bc g     O .bss	00000004 _alt_tick_rate
0400579c g     F .text	00000094 MAXbytes_rd
04006f98 g     F .text	00000064 rand
0400d63c g     F .text	00000148 __lshift
040156b0 g     F .text	000001fc alt_avalon_spi_command
0401a7c0 g     O .bss	00000004 _alt_nticks
0401462c g     F .text	00000104 read
04014be0 g     F .text	00000068 alt_sys_init
04018bac g     O .rwdata	00000004 pacman_x
0401bbdc g     O .bss	00000048 devtable
0401686c g     F .text	00000118 __register_exitproc
04004f04 g     F .text	00000408 HIDKProbe
0401a7dc g     O .bss	00000018 msd_ep
0400d270 g     F .text	0000028c __multiply
040022e0 g     F .text	000000c0 spawn_all_sprites
04015118 g     F .text	00000068 altera_avalon_jtag_uart_close
04006238 g     F .text	00000098 USB_init
0401badc g     O .bss	00000100 bigbuf
04006cd0 g     F .text	00000028 .hidden __mulsi3
0401709c g       *ABS*	00000000 __ram_rwdata_start
04016b38 g       *ABS*	00000000 __ram_rodata_start
0401a7f4 g     O .bss	00000028 __malloc_current_mallinfo
04002440 g     F .text	00000050 get_pacman
0401a778 g     O .bss	00000001 last_usb_task_state
0400db50 g     F .text	0000014c __d2b
0401a770 g     O .bss	00000008 dev0ep
040004dc g     F .text	00000050 clearLED
0400296c g     F .text	000000a8 random_sprite
040170ac g     O .rwdata	00000010 ghost_xs
04014c48 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04016644 g     F .text	000000c4 alt_get_fd
04015acc g     F .text	00000158 alt_busy_sleep
04006940 g     F .text	00000038 MSDEventHandler
04010114 g     F .text	00000054 _close_r
040167f0 g     F .text	0000007c memcmp
04014d08 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0401bd24 g       *ABS*	00000000 __alt_stack_base
04014d58 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04009498 g     F .text	00000154 __swsetup_r
04011e20 g     F .text	000009d0 .hidden __divdf3
0400b374 g     F .text	00000118 __sfp
0400ddb4 g     F .text	00000078 __copybits
04017598 g     O .rwdata	00000408 __malloc_av_
0400b4c0 g     F .text	00000004 __sinit_lock_release
040069a4 g     F .text	00000038 CDCEventHandler
04012a48 g     F .text	0000086c .hidden __muldf3
04006a08 g     F .text	00000038 DummyEventHandler
0400e64c g     F .text	00000054 __sread
0401653c g     F .text	00000108 alt_find_file
04002a14 g     F .text	000000e0 connect_walls
04015c80 g     F .text	000000a4 alt_dev_llist_insert
040145a8 g     F .text	00000024 __malloc_lock
040147b4 g     F .text	000000b0 sbrk
040023f0 g     F .text	00000028 sprite_direction
0400b0b8 g     F .text	0000005c _fflush_r
04010168 g     F .text	000000dc _calloc_r
0401404c g     F .text	000001f4 gettimeofday
0401a764 g       *ABS*	00000000 __bss_start
040058fc g     F .text	00000188 MAX_busprobe
0401a76d g     O .bss	00000002 hid_device
04006cf8 g     F .text	00000128 memset
04001e2c g     F .text	000004b4 main
04005b18 g     F .text	0000006c MAX3421E_Task
0401a7b8 g     O .bss	00000004 alt_envp
0401a794 g     O .bss	00000004 __malloc_max_total_mem
04014ca8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0401009c g     F .text	00000018 __swbuf
04006f80 g     F .text	00000018 srand
04006a98 g     F .text	00000084 ConvUTF8ToStr
0400e780 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04010334 g     F .text	00000014 fclose
04009814 g     F .text	00001688 _dtoa_r
0400c26c g     F .text	0000080c _malloc_r
0401081c g     F .text	00000030 __ascii_wctomb
04007094 g     F .text	00000050 time
04018bec g     O .rwdata	00000004 alt_errno
0401a764 g     O .bss	00000001 key
0400bdf0 g     F .text	000000c4 _fwalk
0400df58 g     F .text	000000c8 putc
04006b1c g     F .text	00000084 .hidden __divsi3
040060a8 g     F .text	00000190 XferInTransfer
0400064c g     F .text	00000140 printSignedHex1
0400b4f4 g     F .text	00000124 _malloc_trim_r
04016b38 g       *ABS*	00000000 __CTOR_END__
04006a60 g     F .text	00000038 GetDevtable
0400e788 g     F .text	000000dc strcmp
04002810 g     F .text	00000080 next_sprite
04016b38 g       *ABS*	00000000 __flash_rodata_start
04016b38 g       *ABS*	00000000 __DTOR_LIST__
04005eb8 g     F .text	00000074 XferCtrlND
0400272c g     F .text	00000084 next_pacman
040127f0 g     F .text	00000088 .hidden __nedf2
04005830 g     F .text	000000a8 MAX3421E_reset
04014ba8 g     F .text	00000038 alt_irq_init
04014730 g     F .text	00000084 alt_release_fd
04016f70 g     O .rodata	00000100 .hidden __clz_tab
0401a788 g     O .bss	00000004 _PathLocale
040167a4 g     F .text	00000014 atexit
0401a765 g     O .bss	00000008 kbdbuf
04004944 g     F .text	000000b0 can_walk
040100b4 g     F .text	00000060 _write_r
0400c08c g     F .text	00000018 setlocale
04018bc4 g     O .rwdata	00000004 _impure_ptr
0401a7b0 g     O .bss	00000004 alt_argc
04002890 g     F .text	000000dc animate_map
0400ae9c g     F .text	0000021c __sflush_r
04015d84 g     F .text	00000060 _do_dtors
0400c078 g     F .text	00000008 __locale_cjk_lang
040055b4 g     F .text	00000168 MAXbytes_wr
04000020 g       .exceptions	00000000 alt_irq_entry
0400d9e0 g     F .text	00000064 __ulp
0400b4dc g     F .text	00000018 __fp_unlock_all
04002490 g     F .text	000000a8 get_ghost
04018bd8 g     O .rwdata	00000008 alt_fs_list
040027b0 g     F .text	00000060 next_ghost
04006978 g     F .text	0000002c CDCProbe
0401a7a8 g     O .bss	00000008 alt_resettime
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400c0a4 g     F .text	0000000c localeconv
04000490 g     F .text	0000004c setLED
04006a40 g     F .text	00000020 GetUsbTaskState
04015e04 g     F .text	00000050 alt_ic_isr_register
04016b74 g     O .rodata	00000010 devclasses
04018c00 g       *ABS*	00000000 _edata
04005494 g     F .text	00000038 HIDKEventHandler
0401bd24 g       *ABS*	00000000 _end
04005b84 g     F .text	000000cc MaxIntHandler
04010348 g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
04015180 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040054cc g     F .text	00000034 SPI_init
04015edc g     F .text	0000008c alt_ic_irq_disable
04018bb0 g     O .rwdata	00000004 pacman_y
0400e6a8 g     F .text	0000007c __swrite
04018bd0 g     O .rwdata	00000004 __malloc_trim_threshold
0400c06c g     F .text	0000000c __locale_msgcharset
040167b8 g     F .text	00000038 exit
0400beb4 g     F .text	000000c4 _fwalk_reent
04002660 g     F .text	00000060 map_get_sprite
0400d7e4 g     F .text	000001fc __mdiff
040026c0 g     F .text	0000006c map_set_sprite
04006ba0 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400b4b8 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
04004a50 g     F .text	000000ac spu_set_map
0400545c g     F .text	00000038 HIDMEventHandler
04016b04 g     F .text	00000034 _exit
040159a0 g     F .text	0000012c alt_alarm_start
0400052c g     F .text	00000120 printSignedHex0
040108a8 g     F .text	0000010c .hidden __muldi3
0400c0b0 g     F .text	000001bc __smakebuf_r
04006ffc g     F .text	00000098 strlen
0401632c g     F .text	0000015c open
04012878 g     F .text	000000dc .hidden __gedf2
04002418 g     F .text	00000028 sprite_property
04018bd4 g     O .rwdata	00000004 __wctomb
0400e960 g     F .text	00000018 __sprint_r
04015de4 g     F .text	00000020 alt_icache_flush_all
04018bfc g     O .rwdata	00000004 alt_priority_mask
04015e54 g     F .text	00000088 alt_ic_irq_enable
040093c0 g     F .text	0000001c __vfprintf_internal
04004afc g     F .text	00000408 HIDMProbe
0401084c g     F .text	0000005c _wctomb_r
04005500 g     F .text	00000028 SPI_wr
040132b4 g     F .text	000008fc .hidden __subdf3
0400d184 g     F .text	000000b0 __lo0bits
040023a0 g     F .text	00000028 sprite_index
04018bf4 g     O .rwdata	00000008 alt_alarm_list
04015d24 g     F .text	00000060 _do_ctors
0401075c g     F .text	000000c0 wcrtomb
04013e54 g     F .text	000000d8 close
04014390 g     F .text	00000084 alt_load
040104d0 g     F .text	00000080 fputwc
0400b4bc g     F .text	00000004 __sinit_lock_acquire
04005c84 g     F .text	0000014c XferCtrlReq
0400ced0 g     F .text	00000148 __multadd
0400cea8 g     F .text	00000028 _Bfree
0401709c g     O .rwdata	00000010 under_ghost



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100b4 	movhi	r2,1026
 4000140:	10af0904 	addi	r2,r2,-17372
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100b4 	movhi	r2,1026
 4000158:	10af0904 	addi	r2,r2,-17372
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a70817 	ldw	r2,-25568(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a70817 	ldw	r2,-25568(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 400023c:	d682ea14 	ori	gp,gp,2984
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000244:	10a9d914 	ori	r2,r2,42852

    movhi r3, %hi(__bss_end)
 4000248:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 400024c:	18ef4914 	ori	r3,r3,48420

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	40143900 	call	4014390 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	401452c0 	call	401452c <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <spu_control>:
#define KEY_A 0x04
#define KEY_S 0x16
#define KEY_D 0x07

void spu_control(int instruction)
{
 400026c:	defffe04 	addi	sp,sp,-8
 4000270:	df000115 	stw	fp,4(sp)
 4000274:	df000104 	addi	fp,sp,4
 4000278:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(CONTROL_BASE, instruction);
 400027c:	00820034 	movhi	r2,2048
 4000280:	10845404 	addi	r2,r2,4432
 4000284:	e0ffff17 	ldw	r3,-4(fp)
 4000288:	10c00035 	stwio	r3,0(r2)
}
 400028c:	0001883a 	nop
 4000290:	e037883a 	mov	sp,fp
 4000294:	df000017 	ldw	fp,0(sp)
 4000298:	dec00104 	addi	sp,sp,4
 400029c:	f800283a 	ret

040002a0 <GetDriverandReport>:
int under_ghost[4] = {-1, -1, -1, -1};
int ghost_xs[4] = {19, 20, 18, 21};
int ghost_ys[4] = {10, 10, 11, 11};

BYTE GetDriverandReport()
{
 40002a0:	defff604 	addi	sp,sp,-40
 40002a4:	dfc00915 	stw	ra,36(sp)
 40002a8:	df000815 	stw	fp,32(sp)
 40002ac:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 40002b0:	00bfffc4 	movi	r2,-1
 40002b4:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 40002b8:	01010074 	movhi	r4,1025
 40002bc:	211ae104 	addi	r4,r4,27524
 40002c0:	4006f6c0 	call	4006f6c <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 40002c4:	00800044 	movi	r2,1
 40002c8:	e0bffd05 	stb	r2,-12(fp)
 40002cc:	00001f06 	br	400034c <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 40002d0:	e0bffd03 	ldbu	r2,-12(fp)
 40002d4:	1009883a 	mov	r4,r2
 40002d8:	4006a600 	call	4006a60 <GetDevtable>
 40002dc:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 40002e0:	e0bffe17 	ldw	r2,-8(fp)
 40002e4:	10800017 	ldw	r2,0(r2)
 40002e8:	10001526 	beq	r2,zero,4000340 <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 40002ec:	e0bffd03 	ldbu	r2,-12(fp)
 40002f0:	100b883a 	mov	r5,r2
 40002f4:	01010074 	movhi	r4,1025
 40002f8:	211aea04 	addi	r4,r4,27560
 40002fc:	4006e500 	call	4006e50 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 4000300:	e0bffe17 	ldw	r2,-8(fp)
 4000304:	10800103 	ldbu	r2,4(r2)
 4000308:	10c03fcc 	andi	r3,r2,255
 400030c:	00810074 	movhi	r2,1025
 4000310:	109add04 	addi	r2,r2,27508
 4000314:	18c7883a 	add	r3,r3,r3
 4000318:	18c7883a 	add	r3,r3,r3
 400031c:	10c5883a 	add	r2,r2,r3
 4000320:	10800017 	ldw	r2,0(r2)
 4000324:	100b883a 	mov	r5,r2
 4000328:	01010074 	movhi	r4,1025
 400032c:	211aed04 	addi	r4,r4,27572
 4000330:	4006e500 	call	4006e50 <printf>
			device = tpl_ptr->devclass;
 4000334:	e0bffe17 	ldw	r2,-8(fp)
 4000338:	10800103 	ldbu	r2,4(r2)
 400033c:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 4000340:	e0bffd03 	ldbu	r2,-12(fp)
 4000344:	10800044 	addi	r2,r2,1
 4000348:	e0bffd05 	stb	r2,-12(fp)
 400034c:	e0bffd03 	ldbu	r2,-12(fp)
 4000350:	10800230 	cmpltui	r2,r2,8
 4000354:	103fde1e 	bne	r2,zero,40002d0 <__alt_data_end+0xfc0002d0>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 4000358:	d0a00003 	ldbu	r2,-32768(gp)
 400035c:	11003fcc 	andi	r4,r2,255
 4000360:	d0a6f183 	ldbu	r2,-25658(gp)
 4000364:	10803fcc 	andi	r2,r2,255
 4000368:	e0ffff44 	addi	r3,fp,-3
 400036c:	d8c00415 	stw	r3,16(sp)
 4000370:	00c00044 	movi	r3,1
 4000374:	d8c00315 	stw	r3,12(sp)
 4000378:	d8800215 	stw	r2,8(sp)
 400037c:	d8000115 	stw	zero,4(sp)
 4000380:	d8000015 	stw	zero,0(sp)
 4000384:	01c00084 	movi	r7,2
 4000388:	01802844 	movi	r6,161
 400038c:	000b883a 	mov	r5,zero
 4000390:	4005c840 	call	4005c84 <XferCtrlReq>
 4000394:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 4000398:	e0bfff03 	ldbu	r2,-4(fp)
 400039c:	10000926 	beq	r2,zero,40003c4 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
 40003a0:	01010074 	movhi	r4,1025
 40003a4:	211aef04 	addi	r4,r4,27580
 40003a8:	4006e500 	call	4006e50 <printf>
		printf("%x \n", rcode);
 40003ac:	e0bfff03 	ldbu	r2,-4(fp)
 40003b0:	100b883a 	mov	r5,r2
 40003b4:	01010074 	movhi	r4,1025
 40003b8:	211af604 	addi	r4,r4,27608
 40003bc:	4006e500 	call	4006e50 <printf>
 40003c0:	00000906 	br	40003e8 <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
 40003c4:	01010074 	movhi	r4,1025
 40003c8:	211af804 	addi	r4,r4,27616
 40003cc:	4006e500 	call	4006e50 <printf>
		printf("%x \n", tmpbyte);
 40003d0:	e0bfff43 	ldbu	r2,-3(fp)
 40003d4:	10803fcc 	andi	r2,r2,255
 40003d8:	100b883a 	mov	r5,r2
 40003dc:	01010074 	movhi	r4,1025
 40003e0:	211af604 	addi	r4,r4,27608
 40003e4:	4006e500 	call	4006e50 <printf>
	}
	printf("Protocol: ");
 40003e8:	01010074 	movhi	r4,1025
 40003ec:	211afc04 	addi	r4,r4,27632
 40003f0:	4006e500 	call	4006e50 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 40003f4:	d0a00003 	ldbu	r2,-32768(gp)
 40003f8:	11003fcc 	andi	r4,r2,255
 40003fc:	d0a6f183 	ldbu	r2,-25658(gp)
 4000400:	10803fcc 	andi	r2,r2,255
 4000404:	e0ffff44 	addi	r3,fp,-3
 4000408:	d8c00415 	stw	r3,16(sp)
 400040c:	00c00044 	movi	r3,1
 4000410:	d8c00315 	stw	r3,12(sp)
 4000414:	d8800215 	stw	r2,8(sp)
 4000418:	d8000115 	stw	zero,4(sp)
 400041c:	d8000015 	stw	zero,0(sp)
 4000420:	01c000c4 	movi	r7,3
 4000424:	01802844 	movi	r6,161
 4000428:	000b883a 	mov	r5,zero
 400042c:	4005c840 	call	4005c84 <XferCtrlReq>
 4000430:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 4000434:	e0bfff03 	ldbu	r2,-4(fp)
 4000438:	10000926 	beq	r2,zero,4000460 <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
 400043c:	01010074 	movhi	r4,1025
 4000440:	211aff04 	addi	r4,r4,27644
 4000444:	4006e500 	call	4006e50 <printf>
		printf("%x \n", rcode);
 4000448:	e0bfff03 	ldbu	r2,-4(fp)
 400044c:	100b883a 	mov	r5,r2
 4000450:	01010074 	movhi	r4,1025
 4000454:	211af604 	addi	r4,r4,27608
 4000458:	4006e500 	call	4006e50 <printf>
 400045c:	00000606 	br	4000478 <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
 4000460:	e0bfff43 	ldbu	r2,-3(fp)
 4000464:	10803fcc 	andi	r2,r2,255
 4000468:	100b883a 	mov	r5,r2
 400046c:	01010074 	movhi	r4,1025
 4000470:	211b0604 	addi	r4,r4,27672
 4000474:	4006e500 	call	4006e50 <printf>
	}
	return device;
 4000478:	e0bffd43 	ldbu	r2,-11(fp)
}
 400047c:	e037883a 	mov	sp,fp
 4000480:	dfc00117 	ldw	ra,4(sp)
 4000484:	df000017 	ldw	fp,0(sp)
 4000488:	dec00204 	addi	sp,sp,8
 400048c:	f800283a 	ret

04000490 <setLED>:

void setLED(int LED)
{
 4000490:	defffe04 	addi	sp,sp,-8
 4000494:	df000115 	stw	fp,4(sp)
 4000498:	df000104 	addi	fp,sp,4
 400049c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 40004a0:	00820034 	movhi	r2,2048
 40004a4:	10845804 	addi	r2,r2,4448
 40004a8:	10c00037 	ldwio	r3,0(r2)
 40004ac:	01000044 	movi	r4,1
 40004b0:	e0bfff17 	ldw	r2,-4(fp)
 40004b4:	2084983a 	sll	r2,r4,r2
 40004b8:	1886b03a 	or	r3,r3,r2
 40004bc:	00820034 	movhi	r2,2048
 40004c0:	10845804 	addi	r2,r2,4448
 40004c4:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 40004c8:	0001883a 	nop
 40004cc:	e037883a 	mov	sp,fp
 40004d0:	df000017 	ldw	fp,0(sp)
 40004d4:	dec00104 	addi	sp,sp,4
 40004d8:	f800283a 	ret

040004dc <clearLED>:

void clearLED(int LED)
{
 40004dc:	defffe04 	addi	sp,sp,-8
 40004e0:	df000115 	stw	fp,4(sp)
 40004e4:	df000104 	addi	fp,sp,4
 40004e8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 40004ec:	00820034 	movhi	r2,2048
 40004f0:	10845804 	addi	r2,r2,4448
 40004f4:	10c00037 	ldwio	r3,0(r2)
 40004f8:	01000044 	movi	r4,1
 40004fc:	e0bfff17 	ldw	r2,-4(fp)
 4000500:	2084983a 	sll	r2,r4,r2
 4000504:	0084303a 	nor	r2,zero,r2
 4000508:	1886703a 	and	r3,r3,r2
 400050c:	00820034 	movhi	r2,2048
 4000510:	10845804 	addi	r2,r2,4448
 4000514:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 4000518:	0001883a 	nop
 400051c:	e037883a 	mov	sp,fp
 4000520:	df000017 	ldw	fp,0(sp)
 4000524:	dec00104 	addi	sp,sp,4
 4000528:	f800283a 	ret

0400052c <printSignedHex0>:

void printSignedHex0(signed char value)
{
 400052c:	defffc04 	addi	sp,sp,-16
 4000530:	dfc00315 	stw	ra,12(sp)
 4000534:	df000215 	stw	fp,8(sp)
 4000538:	df000204 	addi	fp,sp,8
 400053c:	2005883a 	mov	r2,r4
 4000540:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000544:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 4000548:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400054c:	00820034 	movhi	r2,2048
 4000550:	10845c04 	addi	r2,r2,4464
 4000554:	10800037 	ldwio	r2,0(r2)
 4000558:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
 400055c:	e0bfff07 	ldb	r2,-4(fp)
 4000560:	1000060e 	bge	r2,zero,400057c <printSignedHex0+0x50>
		setLED(11);
 4000564:	010002c4 	movi	r4,11
 4000568:	40004900 	call	4000490 <setLED>
		value = -value;
 400056c:	e0bfff03 	ldbu	r2,-4(fp)
 4000570:	0085c83a 	sub	r2,zero,r2
 4000574:	e0bfff05 	stb	r2,-4(fp)
 4000578:	00000206 	br	4000584 <printSignedHex0+0x58>
	} else {
		clearLED(11);
 400057c:	010002c4 	movi	r4,11
 4000580:	40004dc0 	call	40004dc <clearLED>
	}
	//handled hundreds
	if (value / 100)
 4000584:	e0bfff03 	ldbu	r2,-4(fp)
 4000588:	108018c4 	addi	r2,r2,99
 400058c:	10803fcc 	andi	r2,r2,255
 4000590:	108031f0 	cmpltui	r2,r2,199
 4000594:	1000031e 	bne	r2,zero,40005a4 <printSignedHex0+0x78>
		setLED(13);
 4000598:	01000344 	movi	r4,13
 400059c:	40004900 	call	4000490 <setLED>
 40005a0:	00000206 	br	40005ac <printSignedHex0+0x80>
	else
		clearLED(13);
 40005a4:	01000344 	movi	r4,13
 40005a8:	40004dc0 	call	40004dc <clearLED>

	value = value % 100;
 40005ac:	e0bfff07 	ldb	r2,-4(fp)
 40005b0:	01401904 	movi	r5,100
 40005b4:	1009883a 	mov	r4,r2
 40005b8:	4006ba00 	call	4006ba0 <__modsi3>
 40005bc:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40005c0:	e0bfff07 	ldb	r2,-4(fp)
 40005c4:	01400284 	movi	r5,10
 40005c8:	1009883a 	mov	r4,r2
 40005cc:	4006b1c0 	call	4006b1c <__divsi3>
 40005d0:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 40005d4:	e0bfff07 	ldb	r2,-4(fp)
 40005d8:	01400284 	movi	r5,10
 40005dc:	1009883a 	mov	r4,r2
 40005e0:	4006ba00 	call	4006ba0 <__modsi3>
 40005e4:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 40005e8:	e0bffe8b 	ldhu	r2,-6(fp)
 40005ec:	10803fcc 	andi	r2,r2,255
 40005f0:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 40005f4:	e0bffe03 	ldbu	r2,-8(fp)
 40005f8:	1004933a 	slli	r2,r2,12
 40005fc:	1007883a 	mov	r3,r2
 4000600:	e0bffe8b 	ldhu	r2,-6(fp)
 4000604:	1884b03a 	or	r2,r3,r2
 4000608:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 400060c:	e0bffe43 	ldbu	r2,-7(fp)
 4000610:	1004923a 	slli	r2,r2,8
 4000614:	1007883a 	mov	r3,r2
 4000618:	e0bffe8b 	ldhu	r2,-6(fp)
 400061c:	1884b03a 	or	r2,r3,r2
 4000620:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000624:	e0fffe8b 	ldhu	r3,-6(fp)
 4000628:	00820034 	movhi	r2,2048
 400062c:	10845c04 	addi	r2,r2,4464
 4000630:	10c00035 	stwio	r3,0(r2)
}
 4000634:	0001883a 	nop
 4000638:	e037883a 	mov	sp,fp
 400063c:	dfc00117 	ldw	ra,4(sp)
 4000640:	df000017 	ldw	fp,0(sp)
 4000644:	dec00204 	addi	sp,sp,8
 4000648:	f800283a 	ret

0400064c <printSignedHex1>:

void printSignedHex1(signed char value)
{
 400064c:	defffb04 	addi	sp,sp,-20
 4000650:	dfc00415 	stw	ra,16(sp)
 4000654:	df000315 	stw	fp,12(sp)
 4000658:	df000304 	addi	fp,sp,12
 400065c:	2005883a 	mov	r2,r4
 4000660:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000664:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 4000668:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400066c:	00820034 	movhi	r2,2048
 4000670:	10845c04 	addi	r2,r2,4464
 4000674:	10800037 	ldwio	r2,0(r2)
 4000678:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 400067c:	e0bfff07 	ldb	r2,-4(fp)
 4000680:	1000060e 	bge	r2,zero,400069c <printSignedHex1+0x50>
		setLED(10);
 4000684:	01000284 	movi	r4,10
 4000688:	40004900 	call	4000490 <setLED>
		value = -value;
 400068c:	e0bfff03 	ldbu	r2,-4(fp)
 4000690:	0085c83a 	sub	r2,zero,r2
 4000694:	e0bfff05 	stb	r2,-4(fp)
 4000698:	00000206 	br	40006a4 <printSignedHex1+0x58>
	} else {
		clearLED(10);
 400069c:	01000284 	movi	r4,10
 40006a0:	40004dc0 	call	40004dc <clearLED>
	}
	//handled hundreds
	if (value / 100)
 40006a4:	e0bfff03 	ldbu	r2,-4(fp)
 40006a8:	108018c4 	addi	r2,r2,99
 40006ac:	10803fcc 	andi	r2,r2,255
 40006b0:	108031f0 	cmpltui	r2,r2,199
 40006b4:	1000031e 	bne	r2,zero,40006c4 <printSignedHex1+0x78>
		setLED(12);
 40006b8:	01000304 	movi	r4,12
 40006bc:	40004900 	call	4000490 <setLED>
 40006c0:	00000206 	br	40006cc <printSignedHex1+0x80>
	else
		clearLED(12);
 40006c4:	01000304 	movi	r4,12
 40006c8:	40004dc0 	call	40004dc <clearLED>

	value = value % 100;
 40006cc:	e0bfff07 	ldb	r2,-4(fp)
 40006d0:	01401904 	movi	r5,100
 40006d4:	1009883a 	mov	r4,r2
 40006d8:	4006ba00 	call	4006ba0 <__modsi3>
 40006dc:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40006e0:	e0bfff07 	ldb	r2,-4(fp)
 40006e4:	01400284 	movi	r5,10
 40006e8:	1009883a 	mov	r4,r2
 40006ec:	4006b1c0 	call	4006b1c <__divsi3>
 40006f0:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 40006f4:	e0bfff07 	ldb	r2,-4(fp)
 40006f8:	01400284 	movi	r5,10
 40006fc:	1009883a 	mov	r4,r2
 4000700:	4006ba00 	call	4006ba0 <__modsi3>
 4000704:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 4000708:	e0bfff07 	ldb	r2,-4(fp)
 400070c:	01400284 	movi	r5,10
 4000710:	1009883a 	mov	r4,r2
 4000714:	4006b1c0 	call	4006b1c <__divsi3>
 4000718:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 400071c:	e0bfff07 	ldb	r2,-4(fp)
 4000720:	01400284 	movi	r5,10
 4000724:	1009883a 	mov	r4,r2
 4000728:	4006ba00 	call	4006ba0 <__modsi3>
 400072c:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 4000730:	e0bffe17 	ldw	r2,-8(fp)
 4000734:	10bfc00c 	andi	r2,r2,65280
 4000738:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 400073c:	e0bffd03 	ldbu	r2,-12(fp)
 4000740:	1004913a 	slli	r2,r2,4
 4000744:	1007883a 	mov	r3,r2
 4000748:	e0bffe17 	ldw	r2,-8(fp)
 400074c:	10c4b03a 	or	r2,r2,r3
 4000750:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 4000754:	e0bffd43 	ldbu	r2,-11(fp)
 4000758:	e0fffe17 	ldw	r3,-8(fp)
 400075c:	1884b03a 	or	r2,r3,r2
 4000760:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000764:	e0fffe17 	ldw	r3,-8(fp)
 4000768:	00820034 	movhi	r2,2048
 400076c:	10845c04 	addi	r2,r2,4464
 4000770:	10c00035 	stwio	r3,0(r2)
}
 4000774:	0001883a 	nop
 4000778:	e037883a 	mov	sp,fp
 400077c:	dfc00117 	ldw	ra,4(sp)
 4000780:	df000017 	ldw	fp,0(sp)
 4000784:	dec00204 	addi	sp,sp,8
 4000788:	f800283a 	ret

0400078c <setKeycode>:

void setKeycode(WORD keycode)
{
 400078c:	defffe04 	addi	sp,sp,-8
 4000790:	df000115 	stw	fp,4(sp)
 4000794:	df000104 	addi	fp,sp,4
 4000798:	2005883a 	mov	r2,r4
 400079c:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
 40007a0:	e0ffff0b 	ldhu	r3,-4(fp)
 40007a4:	00820034 	movhi	r2,2048
 40007a8:	10846c04 	addi	r2,r2,4528
 40007ac:	10c00035 	stwio	r3,0(r2)
}
 40007b0:	0001883a 	nop
 40007b4:	e037883a 	mov	sp,fp
 40007b8:	df000017 	ldw	fp,0(sp)
 40007bc:	dec00104 	addi	sp,sp,4
 40007c0:	f800283a 	ret

040007c4 <randomly_change_direction>:

void randomly_change_direction(int *map, int x, int y) {
 40007c4:	defff904 	addi	sp,sp,-28
 40007c8:	dfc00615 	stw	ra,24(sp)
 40007cc:	df000515 	stw	fp,20(sp)
 40007d0:	dc000415 	stw	r16,16(sp)
 40007d4:	df000504 	addi	fp,sp,20
 40007d8:	e13ffc15 	stw	r4,-16(fp)
 40007dc:	e17ffd15 	stw	r5,-12(fp)
 40007e0:	e1bffe15 	stw	r6,-8(fp)
	int sprite = map_get_sprite(map, x, y);
 40007e4:	e1bffe17 	ldw	r6,-8(fp)
 40007e8:	e17ffd17 	ldw	r5,-12(fp)
 40007ec:	e13ffc17 	ldw	r4,-16(fp)
 40007f0:	40026600 	call	4002660 <map_get_sprite>
 40007f4:	e0bffb15 	stw	r2,-20(fp)
	map_set_sprite(map, x, y, (sprite & ~SPRITE_DIRECTION_MASK) | ((rand() % 4 + 1) << SPRITE_DIRECTION_SHIFT));
 40007f8:	e0fffb17 	ldw	r3,-20(fp)
 40007fc:	00bffc74 	movhi	r2,65521
 4000800:	10bfffc4 	addi	r2,r2,-1
 4000804:	18a0703a 	and	r16,r3,r2
 4000808:	4006f980 	call	4006f98 <rand>
 400080c:	1007883a 	mov	r3,r2
 4000810:	00a00034 	movhi	r2,32768
 4000814:	108000c4 	addi	r2,r2,3
 4000818:	1884703a 	and	r2,r3,r2
 400081c:	1000040e 	bge	r2,zero,4000830 <randomly_change_direction+0x6c>
 4000820:	10bfffc4 	addi	r2,r2,-1
 4000824:	00ffff04 	movi	r3,-4
 4000828:	10c4b03a 	or	r2,r2,r3
 400082c:	10800044 	addi	r2,r2,1
 4000830:	10800044 	addi	r2,r2,1
 4000834:	1004943a 	slli	r2,r2,16
 4000838:	8084b03a 	or	r2,r16,r2
 400083c:	100f883a 	mov	r7,r2
 4000840:	e1bffe17 	ldw	r6,-8(fp)
 4000844:	e17ffd17 	ldw	r5,-12(fp)
 4000848:	e13ffc17 	ldw	r4,-16(fp)
 400084c:	40026c00 	call	40026c0 <map_set_sprite>
}
 4000850:	0001883a 	nop
 4000854:	e6ffff04 	addi	sp,fp,-4
 4000858:	dfc00217 	ldw	ra,8(sp)
 400085c:	df000117 	ldw	fp,4(sp)
 4000860:	dc000017 	ldw	r16,0(sp)
 4000864:	dec00304 	addi	sp,sp,12
 4000868:	f800283a 	ret

0400086c <ghost_go>:

void ghost_go(int *map, int index)
{
 400086c:	defff904 	addi	sp,sp,-28
 4000870:	dfc00615 	stw	ra,24(sp)
 4000874:	df000515 	stw	fp,20(sp)
 4000878:	df000504 	addi	fp,sp,20
 400087c:	e13ffe15 	stw	r4,-8(fp)
 4000880:	e17fff15 	stw	r5,-4(fp)
	int ghost = map_get_sprite(map, *(ghost_xs + index), *(ghost_ys + index));
 4000884:	e0bfff17 	ldw	r2,-4(fp)
 4000888:	1085883a 	add	r2,r2,r2
 400088c:	1085883a 	add	r2,r2,r2
 4000890:	1007883a 	mov	r3,r2
 4000894:	00810074 	movhi	r2,1025
 4000898:	109c2b04 	addi	r2,r2,28844
 400089c:	1885883a 	add	r2,r3,r2
 40008a0:	10c00017 	ldw	r3,0(r2)
 40008a4:	e0bfff17 	ldw	r2,-4(fp)
 40008a8:	1085883a 	add	r2,r2,r2
 40008ac:	1085883a 	add	r2,r2,r2
 40008b0:	1009883a 	mov	r4,r2
 40008b4:	00810074 	movhi	r2,1025
 40008b8:	109c2f04 	addi	r2,r2,28860
 40008bc:	2085883a 	add	r2,r4,r2
 40008c0:	10800017 	ldw	r2,0(r2)
 40008c4:	100d883a 	mov	r6,r2
 40008c8:	180b883a 	mov	r5,r3
 40008cc:	e13ffe17 	ldw	r4,-8(fp)
 40008d0:	40026600 	call	4002660 <map_get_sprite>
 40008d4:	e0bffb15 	stw	r2,-20(fp)
	int direction = sprite_direction(ghost);
 40008d8:	e13ffb17 	ldw	r4,-20(fp)
 40008dc:	40023f00 	call	40023f0 <sprite_direction>
 40008e0:	e0bffc15 	stw	r2,-16(fp)
	int dice = rand() % 3;
 40008e4:	4006f980 	call	4006f98 <rand>
 40008e8:	014000c4 	movi	r5,3
 40008ec:	1009883a 	mov	r4,r2
 40008f0:	4006ba00 	call	4006ba0 <__modsi3>
 40008f4:	e0bffd15 	stw	r2,-12(fp)
	if (dice == 0) {
 40008f8:	e0bffd17 	ldw	r2,-12(fp)
 40008fc:	1000291e 	bne	r2,zero,40009a4 <ghost_go+0x138>
		randomly_change_direction(map, *(ghost_xs + index), *(ghost_ys + index));
 4000900:	e0bfff17 	ldw	r2,-4(fp)
 4000904:	1085883a 	add	r2,r2,r2
 4000908:	1085883a 	add	r2,r2,r2
 400090c:	1007883a 	mov	r3,r2
 4000910:	00810074 	movhi	r2,1025
 4000914:	109c2b04 	addi	r2,r2,28844
 4000918:	1885883a 	add	r2,r3,r2
 400091c:	10c00017 	ldw	r3,0(r2)
 4000920:	e0bfff17 	ldw	r2,-4(fp)
 4000924:	1085883a 	add	r2,r2,r2
 4000928:	1085883a 	add	r2,r2,r2
 400092c:	1009883a 	mov	r4,r2
 4000930:	00810074 	movhi	r2,1025
 4000934:	109c2f04 	addi	r2,r2,28860
 4000938:	2085883a 	add	r2,r4,r2
 400093c:	10800017 	ldw	r2,0(r2)
 4000940:	100d883a 	mov	r6,r2
 4000944:	180b883a 	mov	r5,r3
 4000948:	e13ffe17 	ldw	r4,-8(fp)
 400094c:	40007c40 	call	40007c4 <randomly_change_direction>
		ghost = map_get_sprite(map, *(ghost_xs + index), *(ghost_ys + index));
 4000950:	e0bfff17 	ldw	r2,-4(fp)
 4000954:	1085883a 	add	r2,r2,r2
 4000958:	1085883a 	add	r2,r2,r2
 400095c:	1007883a 	mov	r3,r2
 4000960:	00810074 	movhi	r2,1025
 4000964:	109c2b04 	addi	r2,r2,28844
 4000968:	1885883a 	add	r2,r3,r2
 400096c:	10c00017 	ldw	r3,0(r2)
 4000970:	e0bfff17 	ldw	r2,-4(fp)
 4000974:	1085883a 	add	r2,r2,r2
 4000978:	1085883a 	add	r2,r2,r2
 400097c:	1009883a 	mov	r4,r2
 4000980:	00810074 	movhi	r2,1025
 4000984:	109c2f04 	addi	r2,r2,28860
 4000988:	2085883a 	add	r2,r4,r2
 400098c:	10800017 	ldw	r2,0(r2)
 4000990:	100d883a 	mov	r6,r2
 4000994:	180b883a 	mov	r5,r3
 4000998:	e13ffe17 	ldw	r4,-8(fp)
 400099c:	40026600 	call	4002660 <map_get_sprite>
 40009a0:	e0bffb15 	stw	r2,-20(fp)
	}

	switch (direction) {
 40009a4:	e0bffc17 	ldw	r2,-16(fp)
 40009a8:	00c000b4 	movhi	r3,2
 40009ac:	10c08426 	beq	r2,r3,4000bc0 <ghost_go+0x354>
 40009b0:	00c000b4 	movhi	r3,2
 40009b4:	18800316 	blt	r3,r2,40009c4 <ghost_go+0x158>
 40009b8:	00c00074 	movhi	r3,1
 40009bc:	10c00626 	beq	r2,r3,40009d8 <ghost_go+0x16c>
 40009c0:	0001f406 	br	4001194 <ghost_go+0x928>
 40009c4:	00c000f4 	movhi	r3,3
 40009c8:	10c0f726 	beq	r2,r3,4000da8 <ghost_go+0x53c>
 40009cc:	00c00134 	movhi	r3,4
 40009d0:	10c16f26 	beq	r2,r3,4000f90 <ghost_go+0x724>
 40009d4:	0001ef06 	br	4001194 <ghost_go+0x928>
	case UP:
		if (can_walk(map, *(ghost_xs + index), *(ghost_ys + index) - 1)) {
 40009d8:	e0bfff17 	ldw	r2,-4(fp)
 40009dc:	1085883a 	add	r2,r2,r2
 40009e0:	1085883a 	add	r2,r2,r2
 40009e4:	1007883a 	mov	r3,r2
 40009e8:	00810074 	movhi	r2,1025
 40009ec:	109c2b04 	addi	r2,r2,28844
 40009f0:	1885883a 	add	r2,r3,r2
 40009f4:	10c00017 	ldw	r3,0(r2)
 40009f8:	e0bfff17 	ldw	r2,-4(fp)
 40009fc:	1085883a 	add	r2,r2,r2
 4000a00:	1085883a 	add	r2,r2,r2
 4000a04:	1009883a 	mov	r4,r2
 4000a08:	00810074 	movhi	r2,1025
 4000a0c:	109c2f04 	addi	r2,r2,28860
 4000a10:	2085883a 	add	r2,r4,r2
 4000a14:	10800017 	ldw	r2,0(r2)
 4000a18:	10bfffc4 	addi	r2,r2,-1
 4000a1c:	100d883a 	mov	r6,r2
 4000a20:	180b883a 	mov	r5,r3
 4000a24:	e13ffe17 	ldw	r4,-8(fp)
 4000a28:	40049440 	call	4004944 <can_walk>
 4000a2c:	1001d226 	beq	r2,zero,4001178 <ghost_go+0x90c>
			map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), under_ghost[index]);
 4000a30:	e0bfff17 	ldw	r2,-4(fp)
 4000a34:	1085883a 	add	r2,r2,r2
 4000a38:	1085883a 	add	r2,r2,r2
 4000a3c:	1007883a 	mov	r3,r2
 4000a40:	00810074 	movhi	r2,1025
 4000a44:	109c2b04 	addi	r2,r2,28844
 4000a48:	1885883a 	add	r2,r3,r2
 4000a4c:	11000017 	ldw	r4,0(r2)
 4000a50:	e0bfff17 	ldw	r2,-4(fp)
 4000a54:	1085883a 	add	r2,r2,r2
 4000a58:	1085883a 	add	r2,r2,r2
 4000a5c:	1007883a 	mov	r3,r2
 4000a60:	00810074 	movhi	r2,1025
 4000a64:	109c2f04 	addi	r2,r2,28860
 4000a68:	1885883a 	add	r2,r3,r2
 4000a6c:	11400017 	ldw	r5,0(r2)
 4000a70:	00810074 	movhi	r2,1025
 4000a74:	109c2704 	addi	r2,r2,28828
 4000a78:	e0ffff17 	ldw	r3,-4(fp)
 4000a7c:	18c7883a 	add	r3,r3,r3
 4000a80:	18c7883a 	add	r3,r3,r3
 4000a84:	10c5883a 	add	r2,r2,r3
 4000a88:	10800017 	ldw	r2,0(r2)
 4000a8c:	100f883a 	mov	r7,r2
 4000a90:	280d883a 	mov	r6,r5
 4000a94:	200b883a 	mov	r5,r4
 4000a98:	e13ffe17 	ldw	r4,-8(fp)
 4000a9c:	40026c00 	call	40026c0 <map_set_sprite>
			--(*(ghost_ys + index));
 4000aa0:	e0bfff17 	ldw	r2,-4(fp)
 4000aa4:	1085883a 	add	r2,r2,r2
 4000aa8:	1085883a 	add	r2,r2,r2
 4000aac:	1007883a 	mov	r3,r2
 4000ab0:	00810074 	movhi	r2,1025
 4000ab4:	109c2f04 	addi	r2,r2,28860
 4000ab8:	1885883a 	add	r2,r3,r2
 4000abc:	10c00017 	ldw	r3,0(r2)
 4000ac0:	18ffffc4 	addi	r3,r3,-1
 4000ac4:	10c00015 	stw	r3,0(r2)
			under_ghost[index] = map_get_sprite(map, *(ghost_xs + index), *(ghost_ys + index));
 4000ac8:	e0bfff17 	ldw	r2,-4(fp)
 4000acc:	1085883a 	add	r2,r2,r2
 4000ad0:	1085883a 	add	r2,r2,r2
 4000ad4:	1007883a 	mov	r3,r2
 4000ad8:	00810074 	movhi	r2,1025
 4000adc:	109c2b04 	addi	r2,r2,28844
 4000ae0:	1885883a 	add	r2,r3,r2
 4000ae4:	10c00017 	ldw	r3,0(r2)
 4000ae8:	e0bfff17 	ldw	r2,-4(fp)
 4000aec:	1085883a 	add	r2,r2,r2
 4000af0:	1085883a 	add	r2,r2,r2
 4000af4:	1009883a 	mov	r4,r2
 4000af8:	00810074 	movhi	r2,1025
 4000afc:	109c2f04 	addi	r2,r2,28860
 4000b00:	2085883a 	add	r2,r4,r2
 4000b04:	10800017 	ldw	r2,0(r2)
 4000b08:	100d883a 	mov	r6,r2
 4000b0c:	180b883a 	mov	r5,r3
 4000b10:	e13ffe17 	ldw	r4,-8(fp)
 4000b14:	40026600 	call	4002660 <map_get_sprite>
 4000b18:	1009883a 	mov	r4,r2
 4000b1c:	00810074 	movhi	r2,1025
 4000b20:	109c2704 	addi	r2,r2,28828
 4000b24:	e0ffff17 	ldw	r3,-4(fp)
 4000b28:	18c7883a 	add	r3,r3,r3
 4000b2c:	18c7883a 	add	r3,r3,r3
 4000b30:	10c5883a 	add	r2,r2,r3
 4000b34:	11000015 	stw	r4,0(r2)
			if (sprite_type(under_ghost[index]) == PACMAN) {
 4000b38:	00810074 	movhi	r2,1025
 4000b3c:	109c2704 	addi	r2,r2,28828
 4000b40:	e0ffff17 	ldw	r3,-4(fp)
 4000b44:	18c7883a 	add	r3,r3,r3
 4000b48:	18c7883a 	add	r3,r3,r3
 4000b4c:	10c5883a 	add	r2,r2,r3
 4000b50:	10800017 	ldw	r2,0(r2)
 4000b54:	1009883a 	mov	r4,r2
 4000b58:	40023c80 	call	40023c8 <sprite_type>
 4000b5c:	1000021e 	bne	r2,zero,4000b68 <ghost_go+0x2fc>
				game_over(map);
 4000b60:	e13ffe17 	ldw	r4,-8(fp)
 4000b64:	4003e200 	call	4003e20 <game_over>
			}
			map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), ghost);
 4000b68:	e0bfff17 	ldw	r2,-4(fp)
 4000b6c:	1085883a 	add	r2,r2,r2
 4000b70:	1085883a 	add	r2,r2,r2
 4000b74:	1007883a 	mov	r3,r2
 4000b78:	00810074 	movhi	r2,1025
 4000b7c:	109c2b04 	addi	r2,r2,28844
 4000b80:	1885883a 	add	r2,r3,r2
 4000b84:	10c00017 	ldw	r3,0(r2)
 4000b88:	e0bfff17 	ldw	r2,-4(fp)
 4000b8c:	1085883a 	add	r2,r2,r2
 4000b90:	1085883a 	add	r2,r2,r2
 4000b94:	1009883a 	mov	r4,r2
 4000b98:	00810074 	movhi	r2,1025
 4000b9c:	109c2f04 	addi	r2,r2,28860
 4000ba0:	2085883a 	add	r2,r4,r2
 4000ba4:	10800017 	ldw	r2,0(r2)
 4000ba8:	e1fffb17 	ldw	r7,-20(fp)
 4000bac:	100d883a 	mov	r6,r2
 4000bb0:	180b883a 	mov	r5,r3
 4000bb4:	e13ffe17 	ldw	r4,-8(fp)
 4000bb8:	40026c00 	call	40026c0 <map_set_sprite>
			return;
 4000bbc:	00038506 	br	40019d4 <ghost_go+0x1168>
		}
		break;
	case DOWN:
		if (can_walk(map, *(ghost_xs + index), *(ghost_ys + index) + 1)) {
 4000bc0:	e0bfff17 	ldw	r2,-4(fp)
 4000bc4:	1085883a 	add	r2,r2,r2
 4000bc8:	1085883a 	add	r2,r2,r2
 4000bcc:	1007883a 	mov	r3,r2
 4000bd0:	00810074 	movhi	r2,1025
 4000bd4:	109c2b04 	addi	r2,r2,28844
 4000bd8:	1885883a 	add	r2,r3,r2
 4000bdc:	10c00017 	ldw	r3,0(r2)
 4000be0:	e0bfff17 	ldw	r2,-4(fp)
 4000be4:	1085883a 	add	r2,r2,r2
 4000be8:	1085883a 	add	r2,r2,r2
 4000bec:	1009883a 	mov	r4,r2
 4000bf0:	00810074 	movhi	r2,1025
 4000bf4:	109c2f04 	addi	r2,r2,28860
 4000bf8:	2085883a 	add	r2,r4,r2
 4000bfc:	10800017 	ldw	r2,0(r2)
 4000c00:	10800044 	addi	r2,r2,1
 4000c04:	100d883a 	mov	r6,r2
 4000c08:	180b883a 	mov	r5,r3
 4000c0c:	e13ffe17 	ldw	r4,-8(fp)
 4000c10:	40049440 	call	4004944 <can_walk>
 4000c14:	10015a26 	beq	r2,zero,4001180 <ghost_go+0x914>
			map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), under_ghost[index]);
 4000c18:	e0bfff17 	ldw	r2,-4(fp)
 4000c1c:	1085883a 	add	r2,r2,r2
 4000c20:	1085883a 	add	r2,r2,r2
 4000c24:	1007883a 	mov	r3,r2
 4000c28:	00810074 	movhi	r2,1025
 4000c2c:	109c2b04 	addi	r2,r2,28844
 4000c30:	1885883a 	add	r2,r3,r2
 4000c34:	11000017 	ldw	r4,0(r2)
 4000c38:	e0bfff17 	ldw	r2,-4(fp)
 4000c3c:	1085883a 	add	r2,r2,r2
 4000c40:	1085883a 	add	r2,r2,r2
 4000c44:	1007883a 	mov	r3,r2
 4000c48:	00810074 	movhi	r2,1025
 4000c4c:	109c2f04 	addi	r2,r2,28860
 4000c50:	1885883a 	add	r2,r3,r2
 4000c54:	11400017 	ldw	r5,0(r2)
 4000c58:	00810074 	movhi	r2,1025
 4000c5c:	109c2704 	addi	r2,r2,28828
 4000c60:	e0ffff17 	ldw	r3,-4(fp)
 4000c64:	18c7883a 	add	r3,r3,r3
 4000c68:	18c7883a 	add	r3,r3,r3
 4000c6c:	10c5883a 	add	r2,r2,r3
 4000c70:	10800017 	ldw	r2,0(r2)
 4000c74:	100f883a 	mov	r7,r2
 4000c78:	280d883a 	mov	r6,r5
 4000c7c:	200b883a 	mov	r5,r4
 4000c80:	e13ffe17 	ldw	r4,-8(fp)
 4000c84:	40026c00 	call	40026c0 <map_set_sprite>
			++(*(ghost_ys + index));
 4000c88:	e0bfff17 	ldw	r2,-4(fp)
 4000c8c:	1085883a 	add	r2,r2,r2
 4000c90:	1085883a 	add	r2,r2,r2
 4000c94:	1007883a 	mov	r3,r2
 4000c98:	00810074 	movhi	r2,1025
 4000c9c:	109c2f04 	addi	r2,r2,28860
 4000ca0:	1885883a 	add	r2,r3,r2
 4000ca4:	10c00017 	ldw	r3,0(r2)
 4000ca8:	18c00044 	addi	r3,r3,1
 4000cac:	10c00015 	stw	r3,0(r2)
			under_ghost[index] = map_get_sprite(map, *(ghost_xs + index), *(ghost_ys + index));
 4000cb0:	e0bfff17 	ldw	r2,-4(fp)
 4000cb4:	1085883a 	add	r2,r2,r2
 4000cb8:	1085883a 	add	r2,r2,r2
 4000cbc:	1007883a 	mov	r3,r2
 4000cc0:	00810074 	movhi	r2,1025
 4000cc4:	109c2b04 	addi	r2,r2,28844
 4000cc8:	1885883a 	add	r2,r3,r2
 4000ccc:	10c00017 	ldw	r3,0(r2)
 4000cd0:	e0bfff17 	ldw	r2,-4(fp)
 4000cd4:	1085883a 	add	r2,r2,r2
 4000cd8:	1085883a 	add	r2,r2,r2
 4000cdc:	1009883a 	mov	r4,r2
 4000ce0:	00810074 	movhi	r2,1025
 4000ce4:	109c2f04 	addi	r2,r2,28860
 4000ce8:	2085883a 	add	r2,r4,r2
 4000cec:	10800017 	ldw	r2,0(r2)
 4000cf0:	100d883a 	mov	r6,r2
 4000cf4:	180b883a 	mov	r5,r3
 4000cf8:	e13ffe17 	ldw	r4,-8(fp)
 4000cfc:	40026600 	call	4002660 <map_get_sprite>
 4000d00:	1009883a 	mov	r4,r2
 4000d04:	00810074 	movhi	r2,1025
 4000d08:	109c2704 	addi	r2,r2,28828
 4000d0c:	e0ffff17 	ldw	r3,-4(fp)
 4000d10:	18c7883a 	add	r3,r3,r3
 4000d14:	18c7883a 	add	r3,r3,r3
 4000d18:	10c5883a 	add	r2,r2,r3
 4000d1c:	11000015 	stw	r4,0(r2)
			if (sprite_type(under_ghost[index]) == PACMAN) {
 4000d20:	00810074 	movhi	r2,1025
 4000d24:	109c2704 	addi	r2,r2,28828
 4000d28:	e0ffff17 	ldw	r3,-4(fp)
 4000d2c:	18c7883a 	add	r3,r3,r3
 4000d30:	18c7883a 	add	r3,r3,r3
 4000d34:	10c5883a 	add	r2,r2,r3
 4000d38:	10800017 	ldw	r2,0(r2)
 4000d3c:	1009883a 	mov	r4,r2
 4000d40:	40023c80 	call	40023c8 <sprite_type>
 4000d44:	1000021e 	bne	r2,zero,4000d50 <ghost_go+0x4e4>
				game_over(map);
 4000d48:	e13ffe17 	ldw	r4,-8(fp)
 4000d4c:	4003e200 	call	4003e20 <game_over>
			}
			map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), ghost);
 4000d50:	e0bfff17 	ldw	r2,-4(fp)
 4000d54:	1085883a 	add	r2,r2,r2
 4000d58:	1085883a 	add	r2,r2,r2
 4000d5c:	1007883a 	mov	r3,r2
 4000d60:	00810074 	movhi	r2,1025
 4000d64:	109c2b04 	addi	r2,r2,28844
 4000d68:	1885883a 	add	r2,r3,r2
 4000d6c:	10c00017 	ldw	r3,0(r2)
 4000d70:	e0bfff17 	ldw	r2,-4(fp)
 4000d74:	1085883a 	add	r2,r2,r2
 4000d78:	1085883a 	add	r2,r2,r2
 4000d7c:	1009883a 	mov	r4,r2
 4000d80:	00810074 	movhi	r2,1025
 4000d84:	109c2f04 	addi	r2,r2,28860
 4000d88:	2085883a 	add	r2,r4,r2
 4000d8c:	10800017 	ldw	r2,0(r2)
 4000d90:	e1fffb17 	ldw	r7,-20(fp)
 4000d94:	100d883a 	mov	r6,r2
 4000d98:	180b883a 	mov	r5,r3
 4000d9c:	e13ffe17 	ldw	r4,-8(fp)
 4000da0:	40026c00 	call	40026c0 <map_set_sprite>
			return;
 4000da4:	00030b06 	br	40019d4 <ghost_go+0x1168>
		}
		break;
	case LEFT:
		if (can_walk(map, *(ghost_xs + index) - 1, *(ghost_ys + index))) {
 4000da8:	e0bfff17 	ldw	r2,-4(fp)
 4000dac:	1085883a 	add	r2,r2,r2
 4000db0:	1085883a 	add	r2,r2,r2
 4000db4:	1007883a 	mov	r3,r2
 4000db8:	00810074 	movhi	r2,1025
 4000dbc:	109c2b04 	addi	r2,r2,28844
 4000dc0:	1885883a 	add	r2,r3,r2
 4000dc4:	10800017 	ldw	r2,0(r2)
 4000dc8:	10ffffc4 	addi	r3,r2,-1
 4000dcc:	e0bfff17 	ldw	r2,-4(fp)
 4000dd0:	1085883a 	add	r2,r2,r2
 4000dd4:	1085883a 	add	r2,r2,r2
 4000dd8:	1009883a 	mov	r4,r2
 4000ddc:	00810074 	movhi	r2,1025
 4000de0:	109c2f04 	addi	r2,r2,28860
 4000de4:	2085883a 	add	r2,r4,r2
 4000de8:	10800017 	ldw	r2,0(r2)
 4000dec:	100d883a 	mov	r6,r2
 4000df0:	180b883a 	mov	r5,r3
 4000df4:	e13ffe17 	ldw	r4,-8(fp)
 4000df8:	40049440 	call	4004944 <can_walk>
 4000dfc:	1000e226 	beq	r2,zero,4001188 <ghost_go+0x91c>
			map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), under_ghost[index]);
 4000e00:	e0bfff17 	ldw	r2,-4(fp)
 4000e04:	1085883a 	add	r2,r2,r2
 4000e08:	1085883a 	add	r2,r2,r2
 4000e0c:	1007883a 	mov	r3,r2
 4000e10:	00810074 	movhi	r2,1025
 4000e14:	109c2b04 	addi	r2,r2,28844
 4000e18:	1885883a 	add	r2,r3,r2
 4000e1c:	11000017 	ldw	r4,0(r2)
 4000e20:	e0bfff17 	ldw	r2,-4(fp)
 4000e24:	1085883a 	add	r2,r2,r2
 4000e28:	1085883a 	add	r2,r2,r2
 4000e2c:	1007883a 	mov	r3,r2
 4000e30:	00810074 	movhi	r2,1025
 4000e34:	109c2f04 	addi	r2,r2,28860
 4000e38:	1885883a 	add	r2,r3,r2
 4000e3c:	11400017 	ldw	r5,0(r2)
 4000e40:	00810074 	movhi	r2,1025
 4000e44:	109c2704 	addi	r2,r2,28828
 4000e48:	e0ffff17 	ldw	r3,-4(fp)
 4000e4c:	18c7883a 	add	r3,r3,r3
 4000e50:	18c7883a 	add	r3,r3,r3
 4000e54:	10c5883a 	add	r2,r2,r3
 4000e58:	10800017 	ldw	r2,0(r2)
 4000e5c:	100f883a 	mov	r7,r2
 4000e60:	280d883a 	mov	r6,r5
 4000e64:	200b883a 	mov	r5,r4
 4000e68:	e13ffe17 	ldw	r4,-8(fp)
 4000e6c:	40026c00 	call	40026c0 <map_set_sprite>
			--(*(ghost_xs + index));
 4000e70:	e0bfff17 	ldw	r2,-4(fp)
 4000e74:	1085883a 	add	r2,r2,r2
 4000e78:	1085883a 	add	r2,r2,r2
 4000e7c:	1007883a 	mov	r3,r2
 4000e80:	00810074 	movhi	r2,1025
 4000e84:	109c2b04 	addi	r2,r2,28844
 4000e88:	1885883a 	add	r2,r3,r2
 4000e8c:	10c00017 	ldw	r3,0(r2)
 4000e90:	18ffffc4 	addi	r3,r3,-1
 4000e94:	10c00015 	stw	r3,0(r2)
			under_ghost[index] = map_get_sprite(map, *(ghost_xs + index), *(ghost_ys + index));
 4000e98:	e0bfff17 	ldw	r2,-4(fp)
 4000e9c:	1085883a 	add	r2,r2,r2
 4000ea0:	1085883a 	add	r2,r2,r2
 4000ea4:	1007883a 	mov	r3,r2
 4000ea8:	00810074 	movhi	r2,1025
 4000eac:	109c2b04 	addi	r2,r2,28844
 4000eb0:	1885883a 	add	r2,r3,r2
 4000eb4:	10c00017 	ldw	r3,0(r2)
 4000eb8:	e0bfff17 	ldw	r2,-4(fp)
 4000ebc:	1085883a 	add	r2,r2,r2
 4000ec0:	1085883a 	add	r2,r2,r2
 4000ec4:	1009883a 	mov	r4,r2
 4000ec8:	00810074 	movhi	r2,1025
 4000ecc:	109c2f04 	addi	r2,r2,28860
 4000ed0:	2085883a 	add	r2,r4,r2
 4000ed4:	10800017 	ldw	r2,0(r2)
 4000ed8:	100d883a 	mov	r6,r2
 4000edc:	180b883a 	mov	r5,r3
 4000ee0:	e13ffe17 	ldw	r4,-8(fp)
 4000ee4:	40026600 	call	4002660 <map_get_sprite>
 4000ee8:	1009883a 	mov	r4,r2
 4000eec:	00810074 	movhi	r2,1025
 4000ef0:	109c2704 	addi	r2,r2,28828
 4000ef4:	e0ffff17 	ldw	r3,-4(fp)
 4000ef8:	18c7883a 	add	r3,r3,r3
 4000efc:	18c7883a 	add	r3,r3,r3
 4000f00:	10c5883a 	add	r2,r2,r3
 4000f04:	11000015 	stw	r4,0(r2)
			if (sprite_type(under_ghost[index]) == PACMAN) {
 4000f08:	00810074 	movhi	r2,1025
 4000f0c:	109c2704 	addi	r2,r2,28828
 4000f10:	e0ffff17 	ldw	r3,-4(fp)
 4000f14:	18c7883a 	add	r3,r3,r3
 4000f18:	18c7883a 	add	r3,r3,r3
 4000f1c:	10c5883a 	add	r2,r2,r3
 4000f20:	10800017 	ldw	r2,0(r2)
 4000f24:	1009883a 	mov	r4,r2
 4000f28:	40023c80 	call	40023c8 <sprite_type>
 4000f2c:	1000021e 	bne	r2,zero,4000f38 <ghost_go+0x6cc>
				game_over(map);
 4000f30:	e13ffe17 	ldw	r4,-8(fp)
 4000f34:	4003e200 	call	4003e20 <game_over>
			}
			map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), ghost);
 4000f38:	e0bfff17 	ldw	r2,-4(fp)
 4000f3c:	1085883a 	add	r2,r2,r2
 4000f40:	1085883a 	add	r2,r2,r2
 4000f44:	1007883a 	mov	r3,r2
 4000f48:	00810074 	movhi	r2,1025
 4000f4c:	109c2b04 	addi	r2,r2,28844
 4000f50:	1885883a 	add	r2,r3,r2
 4000f54:	10c00017 	ldw	r3,0(r2)
 4000f58:	e0bfff17 	ldw	r2,-4(fp)
 4000f5c:	1085883a 	add	r2,r2,r2
 4000f60:	1085883a 	add	r2,r2,r2
 4000f64:	1009883a 	mov	r4,r2
 4000f68:	00810074 	movhi	r2,1025
 4000f6c:	109c2f04 	addi	r2,r2,28860
 4000f70:	2085883a 	add	r2,r4,r2
 4000f74:	10800017 	ldw	r2,0(r2)
 4000f78:	e1fffb17 	ldw	r7,-20(fp)
 4000f7c:	100d883a 	mov	r6,r2
 4000f80:	180b883a 	mov	r5,r3
 4000f84:	e13ffe17 	ldw	r4,-8(fp)
 4000f88:	40026c00 	call	40026c0 <map_set_sprite>
			return;
 4000f8c:	00029106 	br	40019d4 <ghost_go+0x1168>
		}
		break;
	case RIGHT:
		if (can_walk(map, *(ghost_xs + index) + 1, *(ghost_ys + index))) {
 4000f90:	e0bfff17 	ldw	r2,-4(fp)
 4000f94:	1085883a 	add	r2,r2,r2
 4000f98:	1085883a 	add	r2,r2,r2
 4000f9c:	1007883a 	mov	r3,r2
 4000fa0:	00810074 	movhi	r2,1025
 4000fa4:	109c2b04 	addi	r2,r2,28844
 4000fa8:	1885883a 	add	r2,r3,r2
 4000fac:	10800017 	ldw	r2,0(r2)
 4000fb0:	10c00044 	addi	r3,r2,1
 4000fb4:	e0bfff17 	ldw	r2,-4(fp)
 4000fb8:	1085883a 	add	r2,r2,r2
 4000fbc:	1085883a 	add	r2,r2,r2
 4000fc0:	1009883a 	mov	r4,r2
 4000fc4:	00810074 	movhi	r2,1025
 4000fc8:	109c2f04 	addi	r2,r2,28860
 4000fcc:	2085883a 	add	r2,r4,r2
 4000fd0:	10800017 	ldw	r2,0(r2)
 4000fd4:	100d883a 	mov	r6,r2
 4000fd8:	180b883a 	mov	r5,r3
 4000fdc:	e13ffe17 	ldw	r4,-8(fp)
 4000fe0:	40049440 	call	4004944 <can_walk>
 4000fe4:	10006a26 	beq	r2,zero,4001190 <ghost_go+0x924>
			map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), under_ghost[index]);
 4000fe8:	e0bfff17 	ldw	r2,-4(fp)
 4000fec:	1085883a 	add	r2,r2,r2
 4000ff0:	1085883a 	add	r2,r2,r2
 4000ff4:	1007883a 	mov	r3,r2
 4000ff8:	00810074 	movhi	r2,1025
 4000ffc:	109c2b04 	addi	r2,r2,28844
 4001000:	1885883a 	add	r2,r3,r2
 4001004:	11000017 	ldw	r4,0(r2)
 4001008:	e0bfff17 	ldw	r2,-4(fp)
 400100c:	1085883a 	add	r2,r2,r2
 4001010:	1085883a 	add	r2,r2,r2
 4001014:	1007883a 	mov	r3,r2
 4001018:	00810074 	movhi	r2,1025
 400101c:	109c2f04 	addi	r2,r2,28860
 4001020:	1885883a 	add	r2,r3,r2
 4001024:	11400017 	ldw	r5,0(r2)
 4001028:	00810074 	movhi	r2,1025
 400102c:	109c2704 	addi	r2,r2,28828
 4001030:	e0ffff17 	ldw	r3,-4(fp)
 4001034:	18c7883a 	add	r3,r3,r3
 4001038:	18c7883a 	add	r3,r3,r3
 400103c:	10c5883a 	add	r2,r2,r3
 4001040:	10800017 	ldw	r2,0(r2)
 4001044:	100f883a 	mov	r7,r2
 4001048:	280d883a 	mov	r6,r5
 400104c:	200b883a 	mov	r5,r4
 4001050:	e13ffe17 	ldw	r4,-8(fp)
 4001054:	40026c00 	call	40026c0 <map_set_sprite>
			++(*(ghost_xs + index));
 4001058:	e0bfff17 	ldw	r2,-4(fp)
 400105c:	1085883a 	add	r2,r2,r2
 4001060:	1085883a 	add	r2,r2,r2
 4001064:	1007883a 	mov	r3,r2
 4001068:	00810074 	movhi	r2,1025
 400106c:	109c2b04 	addi	r2,r2,28844
 4001070:	1885883a 	add	r2,r3,r2
 4001074:	10c00017 	ldw	r3,0(r2)
 4001078:	18c00044 	addi	r3,r3,1
 400107c:	10c00015 	stw	r3,0(r2)
			under_ghost[index] = map_get_sprite(map, *(ghost_xs + index), *(ghost_ys + index));
 4001080:	e0bfff17 	ldw	r2,-4(fp)
 4001084:	1085883a 	add	r2,r2,r2
 4001088:	1085883a 	add	r2,r2,r2
 400108c:	1007883a 	mov	r3,r2
 4001090:	00810074 	movhi	r2,1025
 4001094:	109c2b04 	addi	r2,r2,28844
 4001098:	1885883a 	add	r2,r3,r2
 400109c:	10c00017 	ldw	r3,0(r2)
 40010a0:	e0bfff17 	ldw	r2,-4(fp)
 40010a4:	1085883a 	add	r2,r2,r2
 40010a8:	1085883a 	add	r2,r2,r2
 40010ac:	1009883a 	mov	r4,r2
 40010b0:	00810074 	movhi	r2,1025
 40010b4:	109c2f04 	addi	r2,r2,28860
 40010b8:	2085883a 	add	r2,r4,r2
 40010bc:	10800017 	ldw	r2,0(r2)
 40010c0:	100d883a 	mov	r6,r2
 40010c4:	180b883a 	mov	r5,r3
 40010c8:	e13ffe17 	ldw	r4,-8(fp)
 40010cc:	40026600 	call	4002660 <map_get_sprite>
 40010d0:	1009883a 	mov	r4,r2
 40010d4:	00810074 	movhi	r2,1025
 40010d8:	109c2704 	addi	r2,r2,28828
 40010dc:	e0ffff17 	ldw	r3,-4(fp)
 40010e0:	18c7883a 	add	r3,r3,r3
 40010e4:	18c7883a 	add	r3,r3,r3
 40010e8:	10c5883a 	add	r2,r2,r3
 40010ec:	11000015 	stw	r4,0(r2)
			if (sprite_type(under_ghost[index]) == PACMAN) {
 40010f0:	00810074 	movhi	r2,1025
 40010f4:	109c2704 	addi	r2,r2,28828
 40010f8:	e0ffff17 	ldw	r3,-4(fp)
 40010fc:	18c7883a 	add	r3,r3,r3
 4001100:	18c7883a 	add	r3,r3,r3
 4001104:	10c5883a 	add	r2,r2,r3
 4001108:	10800017 	ldw	r2,0(r2)
 400110c:	1009883a 	mov	r4,r2
 4001110:	40023c80 	call	40023c8 <sprite_type>
 4001114:	1000021e 	bne	r2,zero,4001120 <ghost_go+0x8b4>
				game_over(map);
 4001118:	e13ffe17 	ldw	r4,-8(fp)
 400111c:	4003e200 	call	4003e20 <game_over>
			}
			map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), ghost);
 4001120:	e0bfff17 	ldw	r2,-4(fp)
 4001124:	1085883a 	add	r2,r2,r2
 4001128:	1085883a 	add	r2,r2,r2
 400112c:	1007883a 	mov	r3,r2
 4001130:	00810074 	movhi	r2,1025
 4001134:	109c2b04 	addi	r2,r2,28844
 4001138:	1885883a 	add	r2,r3,r2
 400113c:	10c00017 	ldw	r3,0(r2)
 4001140:	e0bfff17 	ldw	r2,-4(fp)
 4001144:	1085883a 	add	r2,r2,r2
 4001148:	1085883a 	add	r2,r2,r2
 400114c:	1009883a 	mov	r4,r2
 4001150:	00810074 	movhi	r2,1025
 4001154:	109c2f04 	addi	r2,r2,28860
 4001158:	2085883a 	add	r2,r4,r2
 400115c:	10800017 	ldw	r2,0(r2)
 4001160:	e1fffb17 	ldw	r7,-20(fp)
 4001164:	100d883a 	mov	r6,r2
 4001168:	180b883a 	mov	r5,r3
 400116c:	e13ffe17 	ldw	r4,-8(fp)
 4001170:	40026c00 	call	40026c0 <map_set_sprite>
			return;
 4001174:	00021706 	br	40019d4 <ghost_go+0x1168>
				game_over(map);
			}
			map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), ghost);
			return;
		}
		break;
 4001178:	0001883a 	nop
 400117c:	00000506 	br	4001194 <ghost_go+0x928>
				game_over(map);
			}
			map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), ghost);
			return;
		}
		break;
 4001180:	0001883a 	nop
 4001184:	00000306 	br	4001194 <ghost_go+0x928>
				game_over(map);
			}
			map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), ghost);
			return;
		}
		break;
 4001188:	0001883a 	nop
 400118c:	00000106 	br	4001194 <ghost_go+0x928>
				game_over(map);
			}
			map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), ghost);
			return;
		}
		break;
 4001190:	0001883a 	nop
	}

	randomly_change_direction(map, *(ghost_xs + index), *(ghost_ys + index));
 4001194:	e0bfff17 	ldw	r2,-4(fp)
 4001198:	1085883a 	add	r2,r2,r2
 400119c:	1085883a 	add	r2,r2,r2
 40011a0:	1007883a 	mov	r3,r2
 40011a4:	00810074 	movhi	r2,1025
 40011a8:	109c2b04 	addi	r2,r2,28844
 40011ac:	1885883a 	add	r2,r3,r2
 40011b0:	10c00017 	ldw	r3,0(r2)
 40011b4:	e0bfff17 	ldw	r2,-4(fp)
 40011b8:	1085883a 	add	r2,r2,r2
 40011bc:	1085883a 	add	r2,r2,r2
 40011c0:	1009883a 	mov	r4,r2
 40011c4:	00810074 	movhi	r2,1025
 40011c8:	109c2f04 	addi	r2,r2,28860
 40011cc:	2085883a 	add	r2,r4,r2
 40011d0:	10800017 	ldw	r2,0(r2)
 40011d4:	100d883a 	mov	r6,r2
 40011d8:	180b883a 	mov	r5,r3
 40011dc:	e13ffe17 	ldw	r4,-8(fp)
 40011e0:	40007c40 	call	40007c4 <randomly_change_direction>
	ghost = map_get_sprite(map, *(ghost_xs + index), *(ghost_ys + index));
 40011e4:	e0bfff17 	ldw	r2,-4(fp)
 40011e8:	1085883a 	add	r2,r2,r2
 40011ec:	1085883a 	add	r2,r2,r2
 40011f0:	1007883a 	mov	r3,r2
 40011f4:	00810074 	movhi	r2,1025
 40011f8:	109c2b04 	addi	r2,r2,28844
 40011fc:	1885883a 	add	r2,r3,r2
 4001200:	10c00017 	ldw	r3,0(r2)
 4001204:	e0bfff17 	ldw	r2,-4(fp)
 4001208:	1085883a 	add	r2,r2,r2
 400120c:	1085883a 	add	r2,r2,r2
 4001210:	1009883a 	mov	r4,r2
 4001214:	00810074 	movhi	r2,1025
 4001218:	109c2f04 	addi	r2,r2,28860
 400121c:	2085883a 	add	r2,r4,r2
 4001220:	10800017 	ldw	r2,0(r2)
 4001224:	100d883a 	mov	r6,r2
 4001228:	180b883a 	mov	r5,r3
 400122c:	e13ffe17 	ldw	r4,-8(fp)
 4001230:	40026600 	call	4002660 <map_get_sprite>
 4001234:	e0bffb15 	stw	r2,-20(fp)

	if (can_walk(map, *(ghost_xs + index), *(ghost_ys + index) - 1)) {
 4001238:	e0bfff17 	ldw	r2,-4(fp)
 400123c:	1085883a 	add	r2,r2,r2
 4001240:	1085883a 	add	r2,r2,r2
 4001244:	1007883a 	mov	r3,r2
 4001248:	00810074 	movhi	r2,1025
 400124c:	109c2b04 	addi	r2,r2,28844
 4001250:	1885883a 	add	r2,r3,r2
 4001254:	10c00017 	ldw	r3,0(r2)
 4001258:	e0bfff17 	ldw	r2,-4(fp)
 400125c:	1085883a 	add	r2,r2,r2
 4001260:	1085883a 	add	r2,r2,r2
 4001264:	1009883a 	mov	r4,r2
 4001268:	00810074 	movhi	r2,1025
 400126c:	109c2f04 	addi	r2,r2,28860
 4001270:	2085883a 	add	r2,r4,r2
 4001274:	10800017 	ldw	r2,0(r2)
 4001278:	10bfffc4 	addi	r2,r2,-1
 400127c:	100d883a 	mov	r6,r2
 4001280:	180b883a 	mov	r5,r3
 4001284:	e13ffe17 	ldw	r4,-8(fp)
 4001288:	40049440 	call	4004944 <can_walk>
 400128c:	10006426 	beq	r2,zero,4001420 <ghost_go+0xbb4>
		map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), under_ghost[index]);
 4001290:	e0bfff17 	ldw	r2,-4(fp)
 4001294:	1085883a 	add	r2,r2,r2
 4001298:	1085883a 	add	r2,r2,r2
 400129c:	1007883a 	mov	r3,r2
 40012a0:	00810074 	movhi	r2,1025
 40012a4:	109c2b04 	addi	r2,r2,28844
 40012a8:	1885883a 	add	r2,r3,r2
 40012ac:	11000017 	ldw	r4,0(r2)
 40012b0:	e0bfff17 	ldw	r2,-4(fp)
 40012b4:	1085883a 	add	r2,r2,r2
 40012b8:	1085883a 	add	r2,r2,r2
 40012bc:	1007883a 	mov	r3,r2
 40012c0:	00810074 	movhi	r2,1025
 40012c4:	109c2f04 	addi	r2,r2,28860
 40012c8:	1885883a 	add	r2,r3,r2
 40012cc:	11400017 	ldw	r5,0(r2)
 40012d0:	00810074 	movhi	r2,1025
 40012d4:	109c2704 	addi	r2,r2,28828
 40012d8:	e0ffff17 	ldw	r3,-4(fp)
 40012dc:	18c7883a 	add	r3,r3,r3
 40012e0:	18c7883a 	add	r3,r3,r3
 40012e4:	10c5883a 	add	r2,r2,r3
 40012e8:	10800017 	ldw	r2,0(r2)
 40012ec:	100f883a 	mov	r7,r2
 40012f0:	280d883a 	mov	r6,r5
 40012f4:	200b883a 	mov	r5,r4
 40012f8:	e13ffe17 	ldw	r4,-8(fp)
 40012fc:	40026c00 	call	40026c0 <map_set_sprite>
		--(*(ghost_ys + index));
 4001300:	e0bfff17 	ldw	r2,-4(fp)
 4001304:	1085883a 	add	r2,r2,r2
 4001308:	1085883a 	add	r2,r2,r2
 400130c:	1007883a 	mov	r3,r2
 4001310:	00810074 	movhi	r2,1025
 4001314:	109c2f04 	addi	r2,r2,28860
 4001318:	1885883a 	add	r2,r3,r2
 400131c:	10c00017 	ldw	r3,0(r2)
 4001320:	18ffffc4 	addi	r3,r3,-1
 4001324:	10c00015 	stw	r3,0(r2)
		under_ghost[index] = map_get_sprite(map, *(ghost_xs + index), *(ghost_ys + index));
 4001328:	e0bfff17 	ldw	r2,-4(fp)
 400132c:	1085883a 	add	r2,r2,r2
 4001330:	1085883a 	add	r2,r2,r2
 4001334:	1007883a 	mov	r3,r2
 4001338:	00810074 	movhi	r2,1025
 400133c:	109c2b04 	addi	r2,r2,28844
 4001340:	1885883a 	add	r2,r3,r2
 4001344:	10c00017 	ldw	r3,0(r2)
 4001348:	e0bfff17 	ldw	r2,-4(fp)
 400134c:	1085883a 	add	r2,r2,r2
 4001350:	1085883a 	add	r2,r2,r2
 4001354:	1009883a 	mov	r4,r2
 4001358:	00810074 	movhi	r2,1025
 400135c:	109c2f04 	addi	r2,r2,28860
 4001360:	2085883a 	add	r2,r4,r2
 4001364:	10800017 	ldw	r2,0(r2)
 4001368:	100d883a 	mov	r6,r2
 400136c:	180b883a 	mov	r5,r3
 4001370:	e13ffe17 	ldw	r4,-8(fp)
 4001374:	40026600 	call	4002660 <map_get_sprite>
 4001378:	1009883a 	mov	r4,r2
 400137c:	00810074 	movhi	r2,1025
 4001380:	109c2704 	addi	r2,r2,28828
 4001384:	e0ffff17 	ldw	r3,-4(fp)
 4001388:	18c7883a 	add	r3,r3,r3
 400138c:	18c7883a 	add	r3,r3,r3
 4001390:	10c5883a 	add	r2,r2,r3
 4001394:	11000015 	stw	r4,0(r2)
		if (sprite_type(under_ghost[index]) == PACMAN) {
 4001398:	00810074 	movhi	r2,1025
 400139c:	109c2704 	addi	r2,r2,28828
 40013a0:	e0ffff17 	ldw	r3,-4(fp)
 40013a4:	18c7883a 	add	r3,r3,r3
 40013a8:	18c7883a 	add	r3,r3,r3
 40013ac:	10c5883a 	add	r2,r2,r3
 40013b0:	10800017 	ldw	r2,0(r2)
 40013b4:	1009883a 	mov	r4,r2
 40013b8:	40023c80 	call	40023c8 <sprite_type>
 40013bc:	1000021e 	bne	r2,zero,40013c8 <ghost_go+0xb5c>
			game_over(map);
 40013c0:	e13ffe17 	ldw	r4,-8(fp)
 40013c4:	4003e200 	call	4003e20 <game_over>
		}
		map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), ghost);
 40013c8:	e0bfff17 	ldw	r2,-4(fp)
 40013cc:	1085883a 	add	r2,r2,r2
 40013d0:	1085883a 	add	r2,r2,r2
 40013d4:	1007883a 	mov	r3,r2
 40013d8:	00810074 	movhi	r2,1025
 40013dc:	109c2b04 	addi	r2,r2,28844
 40013e0:	1885883a 	add	r2,r3,r2
 40013e4:	10c00017 	ldw	r3,0(r2)
 40013e8:	e0bfff17 	ldw	r2,-4(fp)
 40013ec:	1085883a 	add	r2,r2,r2
 40013f0:	1085883a 	add	r2,r2,r2
 40013f4:	1009883a 	mov	r4,r2
 40013f8:	00810074 	movhi	r2,1025
 40013fc:	109c2f04 	addi	r2,r2,28860
 4001400:	2085883a 	add	r2,r4,r2
 4001404:	10800017 	ldw	r2,0(r2)
 4001408:	e1fffb17 	ldw	r7,-20(fp)
 400140c:	100d883a 	mov	r6,r2
 4001410:	180b883a 	mov	r5,r3
 4001414:	e13ffe17 	ldw	r4,-8(fp)
 4001418:	40026c00 	call	40026c0 <map_set_sprite>
 400141c:	00016d06 	br	40019d4 <ghost_go+0x1168>
	} else if (can_walk(map, *(ghost_xs + index), *(ghost_ys + index) + 1)) {
 4001420:	e0bfff17 	ldw	r2,-4(fp)
 4001424:	1085883a 	add	r2,r2,r2
 4001428:	1085883a 	add	r2,r2,r2
 400142c:	1007883a 	mov	r3,r2
 4001430:	00810074 	movhi	r2,1025
 4001434:	109c2b04 	addi	r2,r2,28844
 4001438:	1885883a 	add	r2,r3,r2
 400143c:	10c00017 	ldw	r3,0(r2)
 4001440:	e0bfff17 	ldw	r2,-4(fp)
 4001444:	1085883a 	add	r2,r2,r2
 4001448:	1085883a 	add	r2,r2,r2
 400144c:	1009883a 	mov	r4,r2
 4001450:	00810074 	movhi	r2,1025
 4001454:	109c2f04 	addi	r2,r2,28860
 4001458:	2085883a 	add	r2,r4,r2
 400145c:	10800017 	ldw	r2,0(r2)
 4001460:	10800044 	addi	r2,r2,1
 4001464:	100d883a 	mov	r6,r2
 4001468:	180b883a 	mov	r5,r3
 400146c:	e13ffe17 	ldw	r4,-8(fp)
 4001470:	40049440 	call	4004944 <can_walk>
 4001474:	10006426 	beq	r2,zero,4001608 <ghost_go+0xd9c>
		map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), under_ghost[index]);
 4001478:	e0bfff17 	ldw	r2,-4(fp)
 400147c:	1085883a 	add	r2,r2,r2
 4001480:	1085883a 	add	r2,r2,r2
 4001484:	1007883a 	mov	r3,r2
 4001488:	00810074 	movhi	r2,1025
 400148c:	109c2b04 	addi	r2,r2,28844
 4001490:	1885883a 	add	r2,r3,r2
 4001494:	11000017 	ldw	r4,0(r2)
 4001498:	e0bfff17 	ldw	r2,-4(fp)
 400149c:	1085883a 	add	r2,r2,r2
 40014a0:	1085883a 	add	r2,r2,r2
 40014a4:	1007883a 	mov	r3,r2
 40014a8:	00810074 	movhi	r2,1025
 40014ac:	109c2f04 	addi	r2,r2,28860
 40014b0:	1885883a 	add	r2,r3,r2
 40014b4:	11400017 	ldw	r5,0(r2)
 40014b8:	00810074 	movhi	r2,1025
 40014bc:	109c2704 	addi	r2,r2,28828
 40014c0:	e0ffff17 	ldw	r3,-4(fp)
 40014c4:	18c7883a 	add	r3,r3,r3
 40014c8:	18c7883a 	add	r3,r3,r3
 40014cc:	10c5883a 	add	r2,r2,r3
 40014d0:	10800017 	ldw	r2,0(r2)
 40014d4:	100f883a 	mov	r7,r2
 40014d8:	280d883a 	mov	r6,r5
 40014dc:	200b883a 	mov	r5,r4
 40014e0:	e13ffe17 	ldw	r4,-8(fp)
 40014e4:	40026c00 	call	40026c0 <map_set_sprite>
		++(*(ghost_ys + index));
 40014e8:	e0bfff17 	ldw	r2,-4(fp)
 40014ec:	1085883a 	add	r2,r2,r2
 40014f0:	1085883a 	add	r2,r2,r2
 40014f4:	1007883a 	mov	r3,r2
 40014f8:	00810074 	movhi	r2,1025
 40014fc:	109c2f04 	addi	r2,r2,28860
 4001500:	1885883a 	add	r2,r3,r2
 4001504:	10c00017 	ldw	r3,0(r2)
 4001508:	18c00044 	addi	r3,r3,1
 400150c:	10c00015 	stw	r3,0(r2)
		under_ghost[index] = map_get_sprite(map, *(ghost_xs + index), *(ghost_ys + index));
 4001510:	e0bfff17 	ldw	r2,-4(fp)
 4001514:	1085883a 	add	r2,r2,r2
 4001518:	1085883a 	add	r2,r2,r2
 400151c:	1007883a 	mov	r3,r2
 4001520:	00810074 	movhi	r2,1025
 4001524:	109c2b04 	addi	r2,r2,28844
 4001528:	1885883a 	add	r2,r3,r2
 400152c:	10c00017 	ldw	r3,0(r2)
 4001530:	e0bfff17 	ldw	r2,-4(fp)
 4001534:	1085883a 	add	r2,r2,r2
 4001538:	1085883a 	add	r2,r2,r2
 400153c:	1009883a 	mov	r4,r2
 4001540:	00810074 	movhi	r2,1025
 4001544:	109c2f04 	addi	r2,r2,28860
 4001548:	2085883a 	add	r2,r4,r2
 400154c:	10800017 	ldw	r2,0(r2)
 4001550:	100d883a 	mov	r6,r2
 4001554:	180b883a 	mov	r5,r3
 4001558:	e13ffe17 	ldw	r4,-8(fp)
 400155c:	40026600 	call	4002660 <map_get_sprite>
 4001560:	1009883a 	mov	r4,r2
 4001564:	00810074 	movhi	r2,1025
 4001568:	109c2704 	addi	r2,r2,28828
 400156c:	e0ffff17 	ldw	r3,-4(fp)
 4001570:	18c7883a 	add	r3,r3,r3
 4001574:	18c7883a 	add	r3,r3,r3
 4001578:	10c5883a 	add	r2,r2,r3
 400157c:	11000015 	stw	r4,0(r2)
		if (sprite_type(under_ghost[index]) == PACMAN) {
 4001580:	00810074 	movhi	r2,1025
 4001584:	109c2704 	addi	r2,r2,28828
 4001588:	e0ffff17 	ldw	r3,-4(fp)
 400158c:	18c7883a 	add	r3,r3,r3
 4001590:	18c7883a 	add	r3,r3,r3
 4001594:	10c5883a 	add	r2,r2,r3
 4001598:	10800017 	ldw	r2,0(r2)
 400159c:	1009883a 	mov	r4,r2
 40015a0:	40023c80 	call	40023c8 <sprite_type>
 40015a4:	1000021e 	bne	r2,zero,40015b0 <ghost_go+0xd44>
			game_over(map);
 40015a8:	e13ffe17 	ldw	r4,-8(fp)
 40015ac:	4003e200 	call	4003e20 <game_over>
		}
		map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), ghost);
 40015b0:	e0bfff17 	ldw	r2,-4(fp)
 40015b4:	1085883a 	add	r2,r2,r2
 40015b8:	1085883a 	add	r2,r2,r2
 40015bc:	1007883a 	mov	r3,r2
 40015c0:	00810074 	movhi	r2,1025
 40015c4:	109c2b04 	addi	r2,r2,28844
 40015c8:	1885883a 	add	r2,r3,r2
 40015cc:	10c00017 	ldw	r3,0(r2)
 40015d0:	e0bfff17 	ldw	r2,-4(fp)
 40015d4:	1085883a 	add	r2,r2,r2
 40015d8:	1085883a 	add	r2,r2,r2
 40015dc:	1009883a 	mov	r4,r2
 40015e0:	00810074 	movhi	r2,1025
 40015e4:	109c2f04 	addi	r2,r2,28860
 40015e8:	2085883a 	add	r2,r4,r2
 40015ec:	10800017 	ldw	r2,0(r2)
 40015f0:	e1fffb17 	ldw	r7,-20(fp)
 40015f4:	100d883a 	mov	r6,r2
 40015f8:	180b883a 	mov	r5,r3
 40015fc:	e13ffe17 	ldw	r4,-8(fp)
 4001600:	40026c00 	call	40026c0 <map_set_sprite>
 4001604:	0000f306 	br	40019d4 <ghost_go+0x1168>
	} else if (can_walk(map, *(ghost_xs + index) - 1, *(ghost_ys + index))) {
 4001608:	e0bfff17 	ldw	r2,-4(fp)
 400160c:	1085883a 	add	r2,r2,r2
 4001610:	1085883a 	add	r2,r2,r2
 4001614:	1007883a 	mov	r3,r2
 4001618:	00810074 	movhi	r2,1025
 400161c:	109c2b04 	addi	r2,r2,28844
 4001620:	1885883a 	add	r2,r3,r2
 4001624:	10800017 	ldw	r2,0(r2)
 4001628:	10ffffc4 	addi	r3,r2,-1
 400162c:	e0bfff17 	ldw	r2,-4(fp)
 4001630:	1085883a 	add	r2,r2,r2
 4001634:	1085883a 	add	r2,r2,r2
 4001638:	1009883a 	mov	r4,r2
 400163c:	00810074 	movhi	r2,1025
 4001640:	109c2f04 	addi	r2,r2,28860
 4001644:	2085883a 	add	r2,r4,r2
 4001648:	10800017 	ldw	r2,0(r2)
 400164c:	100d883a 	mov	r6,r2
 4001650:	180b883a 	mov	r5,r3
 4001654:	e13ffe17 	ldw	r4,-8(fp)
 4001658:	40049440 	call	4004944 <can_walk>
 400165c:	10006426 	beq	r2,zero,40017f0 <ghost_go+0xf84>
		map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), under_ghost[index]);
 4001660:	e0bfff17 	ldw	r2,-4(fp)
 4001664:	1085883a 	add	r2,r2,r2
 4001668:	1085883a 	add	r2,r2,r2
 400166c:	1007883a 	mov	r3,r2
 4001670:	00810074 	movhi	r2,1025
 4001674:	109c2b04 	addi	r2,r2,28844
 4001678:	1885883a 	add	r2,r3,r2
 400167c:	11000017 	ldw	r4,0(r2)
 4001680:	e0bfff17 	ldw	r2,-4(fp)
 4001684:	1085883a 	add	r2,r2,r2
 4001688:	1085883a 	add	r2,r2,r2
 400168c:	1007883a 	mov	r3,r2
 4001690:	00810074 	movhi	r2,1025
 4001694:	109c2f04 	addi	r2,r2,28860
 4001698:	1885883a 	add	r2,r3,r2
 400169c:	11400017 	ldw	r5,0(r2)
 40016a0:	00810074 	movhi	r2,1025
 40016a4:	109c2704 	addi	r2,r2,28828
 40016a8:	e0ffff17 	ldw	r3,-4(fp)
 40016ac:	18c7883a 	add	r3,r3,r3
 40016b0:	18c7883a 	add	r3,r3,r3
 40016b4:	10c5883a 	add	r2,r2,r3
 40016b8:	10800017 	ldw	r2,0(r2)
 40016bc:	100f883a 	mov	r7,r2
 40016c0:	280d883a 	mov	r6,r5
 40016c4:	200b883a 	mov	r5,r4
 40016c8:	e13ffe17 	ldw	r4,-8(fp)
 40016cc:	40026c00 	call	40026c0 <map_set_sprite>
		--(*(ghost_xs + index));
 40016d0:	e0bfff17 	ldw	r2,-4(fp)
 40016d4:	1085883a 	add	r2,r2,r2
 40016d8:	1085883a 	add	r2,r2,r2
 40016dc:	1007883a 	mov	r3,r2
 40016e0:	00810074 	movhi	r2,1025
 40016e4:	109c2b04 	addi	r2,r2,28844
 40016e8:	1885883a 	add	r2,r3,r2
 40016ec:	10c00017 	ldw	r3,0(r2)
 40016f0:	18ffffc4 	addi	r3,r3,-1
 40016f4:	10c00015 	stw	r3,0(r2)
		under_ghost[index] = map_get_sprite(map, *(ghost_xs + index), *(ghost_ys + index));
 40016f8:	e0bfff17 	ldw	r2,-4(fp)
 40016fc:	1085883a 	add	r2,r2,r2
 4001700:	1085883a 	add	r2,r2,r2
 4001704:	1007883a 	mov	r3,r2
 4001708:	00810074 	movhi	r2,1025
 400170c:	109c2b04 	addi	r2,r2,28844
 4001710:	1885883a 	add	r2,r3,r2
 4001714:	10c00017 	ldw	r3,0(r2)
 4001718:	e0bfff17 	ldw	r2,-4(fp)
 400171c:	1085883a 	add	r2,r2,r2
 4001720:	1085883a 	add	r2,r2,r2
 4001724:	1009883a 	mov	r4,r2
 4001728:	00810074 	movhi	r2,1025
 400172c:	109c2f04 	addi	r2,r2,28860
 4001730:	2085883a 	add	r2,r4,r2
 4001734:	10800017 	ldw	r2,0(r2)
 4001738:	100d883a 	mov	r6,r2
 400173c:	180b883a 	mov	r5,r3
 4001740:	e13ffe17 	ldw	r4,-8(fp)
 4001744:	40026600 	call	4002660 <map_get_sprite>
 4001748:	1009883a 	mov	r4,r2
 400174c:	00810074 	movhi	r2,1025
 4001750:	109c2704 	addi	r2,r2,28828
 4001754:	e0ffff17 	ldw	r3,-4(fp)
 4001758:	18c7883a 	add	r3,r3,r3
 400175c:	18c7883a 	add	r3,r3,r3
 4001760:	10c5883a 	add	r2,r2,r3
 4001764:	11000015 	stw	r4,0(r2)
		if (sprite_type(under_ghost[index]) == PACMAN) {
 4001768:	00810074 	movhi	r2,1025
 400176c:	109c2704 	addi	r2,r2,28828
 4001770:	e0ffff17 	ldw	r3,-4(fp)
 4001774:	18c7883a 	add	r3,r3,r3
 4001778:	18c7883a 	add	r3,r3,r3
 400177c:	10c5883a 	add	r2,r2,r3
 4001780:	10800017 	ldw	r2,0(r2)
 4001784:	1009883a 	mov	r4,r2
 4001788:	40023c80 	call	40023c8 <sprite_type>
 400178c:	1000021e 	bne	r2,zero,4001798 <ghost_go+0xf2c>
			game_over(map);
 4001790:	e13ffe17 	ldw	r4,-8(fp)
 4001794:	4003e200 	call	4003e20 <game_over>
		}
		map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), ghost);
 4001798:	e0bfff17 	ldw	r2,-4(fp)
 400179c:	1085883a 	add	r2,r2,r2
 40017a0:	1085883a 	add	r2,r2,r2
 40017a4:	1007883a 	mov	r3,r2
 40017a8:	00810074 	movhi	r2,1025
 40017ac:	109c2b04 	addi	r2,r2,28844
 40017b0:	1885883a 	add	r2,r3,r2
 40017b4:	10c00017 	ldw	r3,0(r2)
 40017b8:	e0bfff17 	ldw	r2,-4(fp)
 40017bc:	1085883a 	add	r2,r2,r2
 40017c0:	1085883a 	add	r2,r2,r2
 40017c4:	1009883a 	mov	r4,r2
 40017c8:	00810074 	movhi	r2,1025
 40017cc:	109c2f04 	addi	r2,r2,28860
 40017d0:	2085883a 	add	r2,r4,r2
 40017d4:	10800017 	ldw	r2,0(r2)
 40017d8:	e1fffb17 	ldw	r7,-20(fp)
 40017dc:	100d883a 	mov	r6,r2
 40017e0:	180b883a 	mov	r5,r3
 40017e4:	e13ffe17 	ldw	r4,-8(fp)
 40017e8:	40026c00 	call	40026c0 <map_set_sprite>
 40017ec:	00007906 	br	40019d4 <ghost_go+0x1168>
	} else if (can_walk(map, *(ghost_xs + index) + 1, *(ghost_ys + index))) {
 40017f0:	e0bfff17 	ldw	r2,-4(fp)
 40017f4:	1085883a 	add	r2,r2,r2
 40017f8:	1085883a 	add	r2,r2,r2
 40017fc:	1007883a 	mov	r3,r2
 4001800:	00810074 	movhi	r2,1025
 4001804:	109c2b04 	addi	r2,r2,28844
 4001808:	1885883a 	add	r2,r3,r2
 400180c:	10800017 	ldw	r2,0(r2)
 4001810:	10c00044 	addi	r3,r2,1
 4001814:	e0bfff17 	ldw	r2,-4(fp)
 4001818:	1085883a 	add	r2,r2,r2
 400181c:	1085883a 	add	r2,r2,r2
 4001820:	1009883a 	mov	r4,r2
 4001824:	00810074 	movhi	r2,1025
 4001828:	109c2f04 	addi	r2,r2,28860
 400182c:	2085883a 	add	r2,r4,r2
 4001830:	10800017 	ldw	r2,0(r2)
 4001834:	100d883a 	mov	r6,r2
 4001838:	180b883a 	mov	r5,r3
 400183c:	e13ffe17 	ldw	r4,-8(fp)
 4001840:	40049440 	call	4004944 <can_walk>
 4001844:	10006326 	beq	r2,zero,40019d4 <ghost_go+0x1168>
		map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), under_ghost[index]);
 4001848:	e0bfff17 	ldw	r2,-4(fp)
 400184c:	1085883a 	add	r2,r2,r2
 4001850:	1085883a 	add	r2,r2,r2
 4001854:	1007883a 	mov	r3,r2
 4001858:	00810074 	movhi	r2,1025
 400185c:	109c2b04 	addi	r2,r2,28844
 4001860:	1885883a 	add	r2,r3,r2
 4001864:	11000017 	ldw	r4,0(r2)
 4001868:	e0bfff17 	ldw	r2,-4(fp)
 400186c:	1085883a 	add	r2,r2,r2
 4001870:	1085883a 	add	r2,r2,r2
 4001874:	1007883a 	mov	r3,r2
 4001878:	00810074 	movhi	r2,1025
 400187c:	109c2f04 	addi	r2,r2,28860
 4001880:	1885883a 	add	r2,r3,r2
 4001884:	11400017 	ldw	r5,0(r2)
 4001888:	00810074 	movhi	r2,1025
 400188c:	109c2704 	addi	r2,r2,28828
 4001890:	e0ffff17 	ldw	r3,-4(fp)
 4001894:	18c7883a 	add	r3,r3,r3
 4001898:	18c7883a 	add	r3,r3,r3
 400189c:	10c5883a 	add	r2,r2,r3
 40018a0:	10800017 	ldw	r2,0(r2)
 40018a4:	100f883a 	mov	r7,r2
 40018a8:	280d883a 	mov	r6,r5
 40018ac:	200b883a 	mov	r5,r4
 40018b0:	e13ffe17 	ldw	r4,-8(fp)
 40018b4:	40026c00 	call	40026c0 <map_set_sprite>
		++(*(ghost_xs + index));
 40018b8:	e0bfff17 	ldw	r2,-4(fp)
 40018bc:	1085883a 	add	r2,r2,r2
 40018c0:	1085883a 	add	r2,r2,r2
 40018c4:	1007883a 	mov	r3,r2
 40018c8:	00810074 	movhi	r2,1025
 40018cc:	109c2b04 	addi	r2,r2,28844
 40018d0:	1885883a 	add	r2,r3,r2
 40018d4:	10c00017 	ldw	r3,0(r2)
 40018d8:	18c00044 	addi	r3,r3,1
 40018dc:	10c00015 	stw	r3,0(r2)
		under_ghost[index] = map_get_sprite(map, *(ghost_xs + index), *(ghost_ys + index));
 40018e0:	e0bfff17 	ldw	r2,-4(fp)
 40018e4:	1085883a 	add	r2,r2,r2
 40018e8:	1085883a 	add	r2,r2,r2
 40018ec:	1007883a 	mov	r3,r2
 40018f0:	00810074 	movhi	r2,1025
 40018f4:	109c2b04 	addi	r2,r2,28844
 40018f8:	1885883a 	add	r2,r3,r2
 40018fc:	10c00017 	ldw	r3,0(r2)
 4001900:	e0bfff17 	ldw	r2,-4(fp)
 4001904:	1085883a 	add	r2,r2,r2
 4001908:	1085883a 	add	r2,r2,r2
 400190c:	1009883a 	mov	r4,r2
 4001910:	00810074 	movhi	r2,1025
 4001914:	109c2f04 	addi	r2,r2,28860
 4001918:	2085883a 	add	r2,r4,r2
 400191c:	10800017 	ldw	r2,0(r2)
 4001920:	100d883a 	mov	r6,r2
 4001924:	180b883a 	mov	r5,r3
 4001928:	e13ffe17 	ldw	r4,-8(fp)
 400192c:	40026600 	call	4002660 <map_get_sprite>
 4001930:	1009883a 	mov	r4,r2
 4001934:	00810074 	movhi	r2,1025
 4001938:	109c2704 	addi	r2,r2,28828
 400193c:	e0ffff17 	ldw	r3,-4(fp)
 4001940:	18c7883a 	add	r3,r3,r3
 4001944:	18c7883a 	add	r3,r3,r3
 4001948:	10c5883a 	add	r2,r2,r3
 400194c:	11000015 	stw	r4,0(r2)
		if (sprite_type(under_ghost[index]) == PACMAN) {
 4001950:	00810074 	movhi	r2,1025
 4001954:	109c2704 	addi	r2,r2,28828
 4001958:	e0ffff17 	ldw	r3,-4(fp)
 400195c:	18c7883a 	add	r3,r3,r3
 4001960:	18c7883a 	add	r3,r3,r3
 4001964:	10c5883a 	add	r2,r2,r3
 4001968:	10800017 	ldw	r2,0(r2)
 400196c:	1009883a 	mov	r4,r2
 4001970:	40023c80 	call	40023c8 <sprite_type>
 4001974:	1000021e 	bne	r2,zero,4001980 <ghost_go+0x1114>
			game_over(map);
 4001978:	e13ffe17 	ldw	r4,-8(fp)
 400197c:	4003e200 	call	4003e20 <game_over>
		}
		map_set_sprite(map, *(ghost_xs + index), *(ghost_ys + index), ghost);
 4001980:	e0bfff17 	ldw	r2,-4(fp)
 4001984:	1085883a 	add	r2,r2,r2
 4001988:	1085883a 	add	r2,r2,r2
 400198c:	1007883a 	mov	r3,r2
 4001990:	00810074 	movhi	r2,1025
 4001994:	109c2b04 	addi	r2,r2,28844
 4001998:	1885883a 	add	r2,r3,r2
 400199c:	10c00017 	ldw	r3,0(r2)
 40019a0:	e0bfff17 	ldw	r2,-4(fp)
 40019a4:	1085883a 	add	r2,r2,r2
 40019a8:	1085883a 	add	r2,r2,r2
 40019ac:	1009883a 	mov	r4,r2
 40019b0:	00810074 	movhi	r2,1025
 40019b4:	109c2f04 	addi	r2,r2,28860
 40019b8:	2085883a 	add	r2,r4,r2
 40019bc:	10800017 	ldw	r2,0(r2)
 40019c0:	e1fffb17 	ldw	r7,-20(fp)
 40019c4:	100d883a 	mov	r6,r2
 40019c8:	180b883a 	mov	r5,r3
 40019cc:	e13ffe17 	ldw	r4,-8(fp)
 40019d0:	40026c00 	call	40026c0 <map_set_sprite>
	}
}
 40019d4:	e037883a 	mov	sp,fp
 40019d8:	dfc00117 	ldw	ra,4(sp)
 40019dc:	df000017 	ldw	fp,0(sp)
 40019e0:	dec00204 	addi	sp,sp,8
 40019e4:	f800283a 	ret

040019e8 <pacman_task>:

void pacman_task()
{
 40019e8:	defff904 	addi	sp,sp,-28
 40019ec:	dfc00615 	stw	ra,24(sp)
 40019f0:	df000515 	stw	fp,20(sp)
 40019f4:	dc400415 	stw	r17,16(sp)
 40019f8:	dc000315 	stw	r16,12(sp)
 40019fc:	df000504 	addi	fp,sp,20
	int pacman = map_get_sprite(map, pacman_x, pacman_y);
 4001a00:	d0a00117 	ldw	r2,-32764(gp)
 4001a04:	d0e00217 	ldw	r3,-32760(gp)
 4001a08:	180d883a 	mov	r6,r3
 4001a0c:	100b883a 	mov	r5,r2
 4001a10:	010100b4 	movhi	r4,1026
 4001a14:	212a0704 	addi	r4,r4,-22500
 4001a18:	40026600 	call	4002660 <map_get_sprite>
 4001a1c:	e0bffc15 	stw	r2,-16(fp)
	int direction = sprite_direction(pacman);
 4001a20:	e13ffc17 	ldw	r4,-16(fp)
 4001a24:	40023f00 	call	40023f0 <sprite_direction>
 4001a28:	e0bffd15 	stw	r2,-12(fp)

	printf("key: %x\n", key);
 4001a2c:	d0a6ef03 	ldbu	r2,-25668(gp)
 4001a30:	10803fcc 	andi	r2,r2,255
 4001a34:	100b883a 	mov	r5,r2
 4001a38:	01010074 	movhi	r4,1025
 4001a3c:	211b0804 	addi	r4,r4,27680
 4001a40:	4006e500 	call	4006e50 <printf>
	printf("direction: %x\n", direction >> SPRITE_DIRECTION_SHIFT);
 4001a44:	e0bffd17 	ldw	r2,-12(fp)
 4001a48:	1005d43a 	srai	r2,r2,16
 4001a4c:	100b883a 	mov	r5,r2
 4001a50:	01010074 	movhi	r4,1025
 4001a54:	211b0b04 	addi	r4,r4,27692
 4001a58:	4006e500 	call	4006e50 <printf>

	if (key == ARROW_UP && direction != UP) {
 4001a5c:	d0a6ef03 	ldbu	r2,-25668(gp)
 4001a60:	10803fcc 	andi	r2,r2,255
 4001a64:	10801498 	cmpnei	r2,r2,82
 4001a68:	10000e1e 	bne	r2,zero,4001aa4 <pacman_task+0xbc>
 4001a6c:	e0fffd17 	ldw	r3,-12(fp)
 4001a70:	00800074 	movhi	r2,1
 4001a74:	18800b26 	beq	r3,r2,4001aa4 <pacman_task+0xbc>
		map_set_sprite(map, pacman_x, pacman_y, get_sprite(PACMAN | UP));
 4001a78:	d4200117 	ldw	r16,-32764(gp)
 4001a7c:	d4600217 	ldw	r17,-32760(gp)
 4001a80:	01000074 	movhi	r4,1
 4001a84:	40025900 	call	4002590 <get_sprite>
 4001a88:	100f883a 	mov	r7,r2
 4001a8c:	880d883a 	mov	r6,r17
 4001a90:	800b883a 	mov	r5,r16
 4001a94:	010100b4 	movhi	r4,1026
 4001a98:	212a0704 	addi	r4,r4,-22500
 4001a9c:	40026c00 	call	40026c0 <map_set_sprite>
 4001aa0:	00003506 	br	4001b78 <pacman_task+0x190>
	} else if (key == ARROW_DOWN && direction != DOWN) {
 4001aa4:	d0a6ef03 	ldbu	r2,-25668(gp)
 4001aa8:	10803fcc 	andi	r2,r2,255
 4001aac:	10801458 	cmpnei	r2,r2,81
 4001ab0:	10000e1e 	bne	r2,zero,4001aec <pacman_task+0x104>
 4001ab4:	e0fffd17 	ldw	r3,-12(fp)
 4001ab8:	008000b4 	movhi	r2,2
 4001abc:	18800b26 	beq	r3,r2,4001aec <pacman_task+0x104>
		map_set_sprite(map, pacman_x, pacman_y, get_sprite(PACMAN | DOWN));
 4001ac0:	d4200117 	ldw	r16,-32764(gp)
 4001ac4:	d4600217 	ldw	r17,-32760(gp)
 4001ac8:	010000b4 	movhi	r4,2
 4001acc:	40025900 	call	4002590 <get_sprite>
 4001ad0:	100f883a 	mov	r7,r2
 4001ad4:	880d883a 	mov	r6,r17
 4001ad8:	800b883a 	mov	r5,r16
 4001adc:	010100b4 	movhi	r4,1026
 4001ae0:	212a0704 	addi	r4,r4,-22500
 4001ae4:	40026c00 	call	40026c0 <map_set_sprite>
 4001ae8:	00002306 	br	4001b78 <pacman_task+0x190>
	} else if (key == ARROW_LEFT && direction != LEFT) {
 4001aec:	d0a6ef03 	ldbu	r2,-25668(gp)
 4001af0:	10803fcc 	andi	r2,r2,255
 4001af4:	10801418 	cmpnei	r2,r2,80
 4001af8:	10000e1e 	bne	r2,zero,4001b34 <pacman_task+0x14c>
 4001afc:	e0fffd17 	ldw	r3,-12(fp)
 4001b00:	008000f4 	movhi	r2,3
 4001b04:	18800b26 	beq	r3,r2,4001b34 <pacman_task+0x14c>
		map_set_sprite(map, pacman_x, pacman_y, get_sprite(PACMAN | LEFT));
 4001b08:	d4200117 	ldw	r16,-32764(gp)
 4001b0c:	d4600217 	ldw	r17,-32760(gp)
 4001b10:	010000f4 	movhi	r4,3
 4001b14:	40025900 	call	4002590 <get_sprite>
 4001b18:	100f883a 	mov	r7,r2
 4001b1c:	880d883a 	mov	r6,r17
 4001b20:	800b883a 	mov	r5,r16
 4001b24:	010100b4 	movhi	r4,1026
 4001b28:	212a0704 	addi	r4,r4,-22500
 4001b2c:	40026c00 	call	40026c0 <map_set_sprite>
 4001b30:	00001106 	br	4001b78 <pacman_task+0x190>
	} else if (key == ARROW_RIGHT && direction != RIGHT) {
 4001b34:	d0a6ef03 	ldbu	r2,-25668(gp)
 4001b38:	10803fcc 	andi	r2,r2,255
 4001b3c:	108013d8 	cmpnei	r2,r2,79
 4001b40:	10000d1e 	bne	r2,zero,4001b78 <pacman_task+0x190>
 4001b44:	e0fffd17 	ldw	r3,-12(fp)
 4001b48:	00800134 	movhi	r2,4
 4001b4c:	18800a26 	beq	r3,r2,4001b78 <pacman_task+0x190>
		map_set_sprite(map, pacman_x, pacman_y, get_sprite(PACMAN | RIGHT));
 4001b50:	d4200117 	ldw	r16,-32764(gp)
 4001b54:	d4600217 	ldw	r17,-32760(gp)
 4001b58:	01000134 	movhi	r4,4
 4001b5c:	40025900 	call	4002590 <get_sprite>
 4001b60:	100f883a 	mov	r7,r2
 4001b64:	880d883a 	mov	r6,r17
 4001b68:	800b883a 	mov	r5,r16
 4001b6c:	010100b4 	movhi	r4,1026
 4001b70:	212a0704 	addi	r4,r4,-22500
 4001b74:	40026c00 	call	40026c0 <map_set_sprite>
	}

	pacman = map_get_sprite(map, pacman_x, pacman_y);
 4001b78:	d0a00117 	ldw	r2,-32764(gp)
 4001b7c:	d0e00217 	ldw	r3,-32760(gp)
 4001b80:	180d883a 	mov	r6,r3
 4001b84:	100b883a 	mov	r5,r2
 4001b88:	010100b4 	movhi	r4,1026
 4001b8c:	212a0704 	addi	r4,r4,-22500
 4001b90:	40026600 	call	4002660 <map_get_sprite>
 4001b94:	e0bffc15 	stw	r2,-16(fp)
	direction = sprite_direction(pacman);
 4001b98:	e13ffc17 	ldw	r4,-16(fp)
 4001b9c:	40023f00 	call	40023f0 <sprite_direction>
 4001ba0:	e0bffd15 	stw	r2,-12(fp)

	switch (direction) {
 4001ba4:	e0bffd17 	ldw	r2,-12(fp)
 4001ba8:	00c000b4 	movhi	r3,2
 4001bac:	10c02726 	beq	r2,r3,4001c4c <pacman_task+0x264>
 4001bb0:	00c000b4 	movhi	r3,2
 4001bb4:	18800316 	blt	r3,r2,4001bc4 <pacman_task+0x1dc>
 4001bb8:	00c00074 	movhi	r3,1
 4001bbc:	10c00626 	beq	r2,r3,4001bd8 <pacman_task+0x1f0>
 4001bc0:	00008006 	br	4001dc4 <pacman_task+0x3dc>
 4001bc4:	00c000f4 	movhi	r3,3
 4001bc8:	10c03d26 	beq	r2,r3,4001cc0 <pacman_task+0x2d8>
 4001bcc:	00c00134 	movhi	r3,4
 4001bd0:	10c05826 	beq	r2,r3,4001d34 <pacman_task+0x34c>
 4001bd4:	00007b06 	br	4001dc4 <pacman_task+0x3dc>
	case UP:
		if (can_walk(map, pacman_x, pacman_y - 1)) {
 4001bd8:	d0e00117 	ldw	r3,-32764(gp)
 4001bdc:	d0a00217 	ldw	r2,-32760(gp)
 4001be0:	10bfffc4 	addi	r2,r2,-1
 4001be4:	100d883a 	mov	r6,r2
 4001be8:	180b883a 	mov	r5,r3
 4001bec:	010100b4 	movhi	r4,1026
 4001bf0:	212a0704 	addi	r4,r4,-22500
 4001bf4:	40049440 	call	4004944 <can_walk>
 4001bf8:	10006b26 	beq	r2,zero,4001da8 <pacman_task+0x3c0>
			map_set_sprite(map, pacman_x, pacman_y, BACKGROUND);
 4001bfc:	d0a00117 	ldw	r2,-32764(gp)
 4001c00:	d0e00217 	ldw	r3,-32760(gp)
 4001c04:	01ffffc4 	movi	r7,-1
 4001c08:	180d883a 	mov	r6,r3
 4001c0c:	100b883a 	mov	r5,r2
 4001c10:	010100b4 	movhi	r4,1026
 4001c14:	212a0704 	addi	r4,r4,-22500
 4001c18:	40026c00 	call	40026c0 <map_set_sprite>
			map_set_sprite(map, pacman_x, --pacman_y, pacman);
 4001c1c:	d0e00117 	ldw	r3,-32764(gp)
 4001c20:	d0a00217 	ldw	r2,-32760(gp)
 4001c24:	10bfffc4 	addi	r2,r2,-1
 4001c28:	d0a00215 	stw	r2,-32760(gp)
 4001c2c:	d0a00217 	ldw	r2,-32760(gp)
 4001c30:	e1fffc17 	ldw	r7,-16(fp)
 4001c34:	100d883a 	mov	r6,r2
 4001c38:	180b883a 	mov	r5,r3
 4001c3c:	010100b4 	movhi	r4,1026
 4001c40:	212a0704 	addi	r4,r4,-22500
 4001c44:	40026c00 	call	40026c0 <map_set_sprite>
		}
		break;
 4001c48:	00005706 	br	4001da8 <pacman_task+0x3c0>
	case DOWN:
		if (can_walk(map, pacman_x, pacman_y + 1)) {
 4001c4c:	d0e00117 	ldw	r3,-32764(gp)
 4001c50:	d0a00217 	ldw	r2,-32760(gp)
 4001c54:	10800044 	addi	r2,r2,1
 4001c58:	100d883a 	mov	r6,r2
 4001c5c:	180b883a 	mov	r5,r3
 4001c60:	010100b4 	movhi	r4,1026
 4001c64:	212a0704 	addi	r4,r4,-22500
 4001c68:	40049440 	call	4004944 <can_walk>
 4001c6c:	10005026 	beq	r2,zero,4001db0 <pacman_task+0x3c8>
			map_set_sprite(map, pacman_x, pacman_y, BACKGROUND);
 4001c70:	d0a00117 	ldw	r2,-32764(gp)
 4001c74:	d0e00217 	ldw	r3,-32760(gp)
 4001c78:	01ffffc4 	movi	r7,-1
 4001c7c:	180d883a 	mov	r6,r3
 4001c80:	100b883a 	mov	r5,r2
 4001c84:	010100b4 	movhi	r4,1026
 4001c88:	212a0704 	addi	r4,r4,-22500
 4001c8c:	40026c00 	call	40026c0 <map_set_sprite>
			map_set_sprite(map, pacman_x, ++pacman_y, pacman);
 4001c90:	d0e00117 	ldw	r3,-32764(gp)
 4001c94:	d0a00217 	ldw	r2,-32760(gp)
 4001c98:	10800044 	addi	r2,r2,1
 4001c9c:	d0a00215 	stw	r2,-32760(gp)
 4001ca0:	d0a00217 	ldw	r2,-32760(gp)
 4001ca4:	e1fffc17 	ldw	r7,-16(fp)
 4001ca8:	100d883a 	mov	r6,r2
 4001cac:	180b883a 	mov	r5,r3
 4001cb0:	010100b4 	movhi	r4,1026
 4001cb4:	212a0704 	addi	r4,r4,-22500
 4001cb8:	40026c00 	call	40026c0 <map_set_sprite>
		}
		break;
 4001cbc:	00003c06 	br	4001db0 <pacman_task+0x3c8>
	case LEFT:
		if (can_walk(map, pacman_x - 1, pacman_y)) {
 4001cc0:	d0a00117 	ldw	r2,-32764(gp)
 4001cc4:	10bfffc4 	addi	r2,r2,-1
 4001cc8:	d0e00217 	ldw	r3,-32760(gp)
 4001ccc:	180d883a 	mov	r6,r3
 4001cd0:	100b883a 	mov	r5,r2
 4001cd4:	010100b4 	movhi	r4,1026
 4001cd8:	212a0704 	addi	r4,r4,-22500
 4001cdc:	40049440 	call	4004944 <can_walk>
 4001ce0:	10003526 	beq	r2,zero,4001db8 <pacman_task+0x3d0>
			map_set_sprite(map, pacman_x, pacman_y, BACKGROUND);
 4001ce4:	d0a00117 	ldw	r2,-32764(gp)
 4001ce8:	d0e00217 	ldw	r3,-32760(gp)
 4001cec:	01ffffc4 	movi	r7,-1
 4001cf0:	180d883a 	mov	r6,r3
 4001cf4:	100b883a 	mov	r5,r2
 4001cf8:	010100b4 	movhi	r4,1026
 4001cfc:	212a0704 	addi	r4,r4,-22500
 4001d00:	40026c00 	call	40026c0 <map_set_sprite>
			map_set_sprite(map, --pacman_x, pacman_y, pacman);
 4001d04:	d0a00117 	ldw	r2,-32764(gp)
 4001d08:	10bfffc4 	addi	r2,r2,-1
 4001d0c:	d0a00115 	stw	r2,-32764(gp)
 4001d10:	d0a00117 	ldw	r2,-32764(gp)
 4001d14:	d0e00217 	ldw	r3,-32760(gp)
 4001d18:	e1fffc17 	ldw	r7,-16(fp)
 4001d1c:	180d883a 	mov	r6,r3
 4001d20:	100b883a 	mov	r5,r2
 4001d24:	010100b4 	movhi	r4,1026
 4001d28:	212a0704 	addi	r4,r4,-22500
 4001d2c:	40026c00 	call	40026c0 <map_set_sprite>
		}
		break;
 4001d30:	00002106 	br	4001db8 <pacman_task+0x3d0>
	case RIGHT:
		if (can_walk(map, pacman_x + 1, pacman_y)) {
 4001d34:	d0a00117 	ldw	r2,-32764(gp)
 4001d38:	10800044 	addi	r2,r2,1
 4001d3c:	d0e00217 	ldw	r3,-32760(gp)
 4001d40:	180d883a 	mov	r6,r3
 4001d44:	100b883a 	mov	r5,r2
 4001d48:	010100b4 	movhi	r4,1026
 4001d4c:	212a0704 	addi	r4,r4,-22500
 4001d50:	40049440 	call	4004944 <can_walk>
 4001d54:	10001a26 	beq	r2,zero,4001dc0 <pacman_task+0x3d8>
			map_set_sprite(map, pacman_x, pacman_y, BACKGROUND);
 4001d58:	d0a00117 	ldw	r2,-32764(gp)
 4001d5c:	d0e00217 	ldw	r3,-32760(gp)
 4001d60:	01ffffc4 	movi	r7,-1
 4001d64:	180d883a 	mov	r6,r3
 4001d68:	100b883a 	mov	r5,r2
 4001d6c:	010100b4 	movhi	r4,1026
 4001d70:	212a0704 	addi	r4,r4,-22500
 4001d74:	40026c00 	call	40026c0 <map_set_sprite>
			map_set_sprite(map, ++pacman_x, pacman_y, pacman);
 4001d78:	d0a00117 	ldw	r2,-32764(gp)
 4001d7c:	10800044 	addi	r2,r2,1
 4001d80:	d0a00115 	stw	r2,-32764(gp)
 4001d84:	d0a00117 	ldw	r2,-32764(gp)
 4001d88:	d0e00217 	ldw	r3,-32760(gp)
 4001d8c:	e1fffc17 	ldw	r7,-16(fp)
 4001d90:	180d883a 	mov	r6,r3
 4001d94:	100b883a 	mov	r5,r2
 4001d98:	010100b4 	movhi	r4,1026
 4001d9c:	212a0704 	addi	r4,r4,-22500
 4001da0:	40026c00 	call	40026c0 <map_set_sprite>
		}
		break;
 4001da4:	00000606 	br	4001dc0 <pacman_task+0x3d8>
	case UP:
		if (can_walk(map, pacman_x, pacman_y - 1)) {
			map_set_sprite(map, pacman_x, pacman_y, BACKGROUND);
			map_set_sprite(map, pacman_x, --pacman_y, pacman);
		}
		break;
 4001da8:	0001883a 	nop
 4001dac:	00000506 	br	4001dc4 <pacman_task+0x3dc>
	case DOWN:
		if (can_walk(map, pacman_x, pacman_y + 1)) {
			map_set_sprite(map, pacman_x, pacman_y, BACKGROUND);
			map_set_sprite(map, pacman_x, ++pacman_y, pacman);
		}
		break;
 4001db0:	0001883a 	nop
 4001db4:	00000306 	br	4001dc4 <pacman_task+0x3dc>
	case LEFT:
		if (can_walk(map, pacman_x - 1, pacman_y)) {
			map_set_sprite(map, pacman_x, pacman_y, BACKGROUND);
			map_set_sprite(map, --pacman_x, pacman_y, pacman);
		}
		break;
 4001db8:	0001883a 	nop
 4001dbc:	00000106 	br	4001dc4 <pacman_task+0x3dc>
	case RIGHT:
		if (can_walk(map, pacman_x + 1, pacman_y)) {
			map_set_sprite(map, pacman_x, pacman_y, BACKGROUND);
			map_set_sprite(map, ++pacman_x, pacman_y, pacman);
		}
		break;
 4001dc0:	0001883a 	nop
	}

	for (int i = 0; i < 4; ++i) {
 4001dc4:	e03ffb15 	stw	zero,-20(fp)
 4001dc8:	00000706 	br	4001de8 <pacman_task+0x400>
		ghost_go(map, i);
 4001dcc:	e17ffb17 	ldw	r5,-20(fp)
 4001dd0:	010100b4 	movhi	r4,1026
 4001dd4:	212a0704 	addi	r4,r4,-22500
 4001dd8:	400086c0 	call	400086c <ghost_go>
			map_set_sprite(map, ++pacman_x, pacman_y, pacman);
		}
		break;
	}

	for (int i = 0; i < 4; ++i) {
 4001ddc:	e0bffb17 	ldw	r2,-20(fp)
 4001de0:	10800044 	addi	r2,r2,1
 4001de4:	e0bffb15 	stw	r2,-20(fp)
 4001de8:	e0bffb17 	ldw	r2,-20(fp)
 4001dec:	10800110 	cmplti	r2,r2,4
 4001df0:	103ff61e 	bne	r2,zero,4001dcc <__alt_data_end+0xfc001dcc>
		ghost_go(map, i);
	}

	animate_map(map);
 4001df4:	010100b4 	movhi	r4,1026
 4001df8:	212a0704 	addi	r4,r4,-22500
 4001dfc:	40028900 	call	4002890 <animate_map>
	spu_set_map(map);
 4001e00:	010100b4 	movhi	r4,1026
 4001e04:	212a0704 	addi	r4,r4,-22500
 4001e08:	4004a500 	call	4004a50 <spu_set_map>
}
 4001e0c:	0001883a 	nop
 4001e10:	e6fffe04 	addi	sp,fp,-8
 4001e14:	dfc00317 	ldw	ra,12(sp)
 4001e18:	df000217 	ldw	fp,8(sp)
 4001e1c:	dc400117 	ldw	r17,4(sp)
 4001e20:	dc000017 	ldw	r16,0(sp)
 4001e24:	dec00404 	addi	sp,sp,16
 4001e28:	f800283a 	ret

04001e2c <main>:

int main()
{
 4001e2c:	defff404 	addi	sp,sp,-48
 4001e30:	dfc00b15 	stw	ra,44(sp)
 4001e34:	df000a15 	stw	fp,40(sp)
 4001e38:	dc400915 	stw	r17,36(sp)
 4001e3c:	dc000815 	stw	r16,32(sp)
 4001e40:	df000a04 	addi	fp,sp,40
	srand (time(NULL));
 4001e44:	0009883a 	mov	r4,zero
 4001e48:	40070940 	call	4007094 <time>
 4001e4c:	1009883a 	mov	r4,r2
 4001e50:	4006f800 	call	4006f80 <srand>

	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 4001e54:	e03ff605 	stb	zero,-40(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 4001e58:	e03ff645 	stb	zero,-39(fp)
	BYTE device;
	WORD keycode;

	MAX3421E_init();
 4001e5c:	4005a840 	call	4005a84 <MAX3421E_init>
	USB_init();
 4001e60:	40062380 	call	4006238 <USB_init>

	printf("PacPac\n");
 4001e64:	01010074 	movhi	r4,1025
 4001e68:	211b0f04 	addi	r4,r4,27708
 4001e6c:	4006f6c0 	call	4006f6c <puts>
	test_map(map);
 4001e70:	010100b4 	movhi	r4,1026
 4001e74:	212a0704 	addi	r4,r4,-22500
 4001e78:	4002f980 	call	4002f98 <test_map>
	map_set_sprite(map, pacman_x, pacman_y, get_sprite(PACMAN));
 4001e7c:	d4200117 	ldw	r16,-32764(gp)
 4001e80:	d4600217 	ldw	r17,-32760(gp)
 4001e84:	0009883a 	mov	r4,zero
 4001e88:	40025900 	call	4002590 <get_sprite>
 4001e8c:	100f883a 	mov	r7,r2
 4001e90:	880d883a 	mov	r6,r17
 4001e94:	800b883a 	mov	r5,r16
 4001e98:	010100b4 	movhi	r4,1026
 4001e9c:	212a0704 	addi	r4,r4,-22500
 4001ea0:	40026c00 	call	40026c0 <map_set_sprite>
	map_set_sprite(map, ghost_xs[0], ghost_ys[0], get_sprite(RED | GHOST | UP));
 4001ea4:	00810074 	movhi	r2,1025
 4001ea8:	109c2b04 	addi	r2,r2,28844
 4001eac:	14000017 	ldw	r16,0(r2)
 4001eb0:	00810074 	movhi	r2,1025
 4001eb4:	109c2f04 	addi	r2,r2,28860
 4001eb8:	14400017 	ldw	r17,0(r2)
 4001ebc:	01000074 	movhi	r4,1
 4001ec0:	210c4004 	addi	r4,r4,12544
 4001ec4:	40025900 	call	4002590 <get_sprite>
 4001ec8:	100f883a 	mov	r7,r2
 4001ecc:	880d883a 	mov	r6,r17
 4001ed0:	800b883a 	mov	r5,r16
 4001ed4:	010100b4 	movhi	r4,1026
 4001ed8:	212a0704 	addi	r4,r4,-22500
 4001edc:	40026c00 	call	40026c0 <map_set_sprite>
	map_set_sprite(map, ghost_xs[1], ghost_ys[1], get_sprite(PINK | GHOST | UP));
 4001ee0:	00810074 	movhi	r2,1025
 4001ee4:	109c2b04 	addi	r2,r2,28844
 4001ee8:	14000117 	ldw	r16,4(r2)
 4001eec:	00810074 	movhi	r2,1025
 4001ef0:	109c2f04 	addi	r2,r2,28860
 4001ef4:	14400117 	ldw	r17,4(r2)
 4001ef8:	01000074 	movhi	r4,1
 4001efc:	21104004 	addi	r4,r4,16640
 4001f00:	40025900 	call	4002590 <get_sprite>
 4001f04:	100f883a 	mov	r7,r2
 4001f08:	880d883a 	mov	r6,r17
 4001f0c:	800b883a 	mov	r5,r16
 4001f10:	010100b4 	movhi	r4,1026
 4001f14:	212a0704 	addi	r4,r4,-22500
 4001f18:	40026c00 	call	40026c0 <map_set_sprite>
	map_set_sprite(map, ghost_xs[2], ghost_ys[2], get_sprite(CYAN | GHOST | UP));
 4001f1c:	00810074 	movhi	r2,1025
 4001f20:	109c2b04 	addi	r2,r2,28844
 4001f24:	14000217 	ldw	r16,8(r2)
 4001f28:	00810074 	movhi	r2,1025
 4001f2c:	109c2f04 	addi	r2,r2,28860
 4001f30:	14400217 	ldw	r17,8(r2)
 4001f34:	01000074 	movhi	r4,1
 4001f38:	21144004 	addi	r4,r4,20736
 4001f3c:	40025900 	call	4002590 <get_sprite>
 4001f40:	100f883a 	mov	r7,r2
 4001f44:	880d883a 	mov	r6,r17
 4001f48:	800b883a 	mov	r5,r16
 4001f4c:	010100b4 	movhi	r4,1026
 4001f50:	212a0704 	addi	r4,r4,-22500
 4001f54:	40026c00 	call	40026c0 <map_set_sprite>
	map_set_sprite(map, ghost_xs[3], ghost_ys[3], get_sprite(TEAL | GHOST | UP));
 4001f58:	00810074 	movhi	r2,1025
 4001f5c:	109c2b04 	addi	r2,r2,28844
 4001f60:	14000317 	ldw	r16,12(r2)
 4001f64:	00810074 	movhi	r2,1025
 4001f68:	109c2f04 	addi	r2,r2,28860
 4001f6c:	14400317 	ldw	r17,12(r2)
 4001f70:	01000074 	movhi	r4,1
 4001f74:	21184004 	addi	r4,r4,24832
 4001f78:	40025900 	call	4002590 <get_sprite>
 4001f7c:	100f883a 	mov	r7,r2
 4001f80:	880d883a 	mov	r6,r17
 4001f84:	800b883a 	mov	r5,r16
 4001f88:	010100b4 	movhi	r4,1026
 4001f8c:	212a0704 	addi	r4,r4,-22500
 4001f90:	40026c00 	call	40026c0 <map_set_sprite>
	spu_set_map(map);
 4001f94:	010100b4 	movhi	r4,1026
 4001f98:	212a0704 	addi	r4,r4,-22500
 4001f9c:	4004a500 	call	4004a50 <spu_set_map>

	for (int i = 0; ; ++i) {
 4001fa0:	e03ff715 	stw	zero,-36(fp)
		MAX3421E_Task();
 4001fa4:	4005b180 	call	4005b18 <MAX3421E_Task>
		USB_Task();
 4001fa8:	40062d00 	call	40062d0 <USB_Task>
		pacman_task();
 4001fac:	40019e80 	call	40019e8 <pacman_task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 4001fb0:	4006a400 	call	4006a40 <GetUsbTaskState>
 4001fb4:	10803fcc 	andi	r2,r2,255
 4001fb8:	10801018 	cmpnei	r2,r2,64
 4001fbc:	1000a11e 	bne	r2,zero,4002244 <main+0x418>
			if (!runningdebugflag) {
 4001fc0:	e0bff603 	ldbu	r2,-40(fp)
 4001fc4:	1000071e 	bne	r2,zero,4001fe4 <main+0x1b8>
				runningdebugflag = 1;
 4001fc8:	00800044 	movi	r2,1
 4001fcc:	e0bff605 	stb	r2,-40(fp)
				setLED(9);
 4001fd0:	01000244 	movi	r4,9
 4001fd4:	40004900 	call	4000490 <setLED>
				device = GetDriverandReport();
 4001fd8:	40002a00 	call	40002a0 <GetDriverandReport>
 4001fdc:	e0bff685 	stb	r2,-38(fp)
 4001fe0:	0000bb06 	br	40022d0 <main+0x4a4>
			} else if (device == 1) {
 4001fe4:	e0bff683 	ldbu	r2,-38(fp)
 4001fe8:	10800058 	cmpnei	r2,r2,1
 4001fec:	1000391e 	bne	r2,zero,40020d4 <main+0x2a8>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 4001ff0:	e0bffb84 	addi	r2,fp,-18
 4001ff4:	1009883a 	mov	r4,r2
 4001ff8:	40053d40 	call	40053d4 <kbdPoll>
 4001ffc:	e0bff905 	stb	r2,-28(fp)
				if (rcode == hrNAK) {
 4002000:	e0bff903 	ldbu	r2,-28(fp)
 4002004:	10800118 	cmpnei	r2,r2,4
 4002008:	1000ae26 	beq	r2,zero,40022c4 <main+0x498>
					continue; //NAK means no new data
				} else if (rcode) {
 400200c:	e0bff903 	ldbu	r2,-28(fp)
 4002010:	10000926 	beq	r2,zero,4002038 <main+0x20c>
					printf("Rcode: ");
 4002014:	01010074 	movhi	r4,1025
 4002018:	211b1104 	addi	r4,r4,27716
 400201c:	4006e500 	call	4006e50 <printf>
					printf("%x \n", rcode);
 4002020:	e0bff903 	ldbu	r2,-28(fp)
 4002024:	100b883a 	mov	r5,r2
 4002028:	01010074 	movhi	r4,1025
 400202c:	211af604 	addi	r4,r4,27608
 4002030:	4006e500 	call	4006e50 <printf>
					continue;
 4002034:	0000a606 	br	40022d0 <main+0x4a4>
				}
				printf("keycodes: ");
 4002038:	01010074 	movhi	r4,1025
 400203c:	211b1304 	addi	r4,r4,27724
 4002040:	4006e500 	call	4006e50 <printf>
				for (int n = 0; n < 6; n++) {
 4002044:	e03ff815 	stw	zero,-32(fp)
 4002048:	00000c06 	br	400207c <main+0x250>
					printf("%x ", kbdbuf.keycode[n]);
 400204c:	e0fffc04 	addi	r3,fp,-16
 4002050:	e0bff817 	ldw	r2,-32(fp)
 4002054:	1885883a 	add	r2,r3,r2
 4002058:	10800003 	ldbu	r2,0(r2)
 400205c:	10803fcc 	andi	r2,r2,255
 4002060:	100b883a 	mov	r5,r2
 4002064:	01010074 	movhi	r4,1025
 4002068:	211b1604 	addi	r4,r4,27736
 400206c:	4006e500 	call	4006e50 <printf>
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				printf("keycodes: ");
				for (int n = 0; n < 6; n++) {
 4002070:	e0bff817 	ldw	r2,-32(fp)
 4002074:	10800044 	addi	r2,r2,1
 4002078:	e0bff815 	stw	r2,-32(fp)
 400207c:	e0bff817 	ldw	r2,-32(fp)
 4002080:	10800190 	cmplti	r2,r2,6
 4002084:	103ff11e 	bne	r2,zero,400204c <__alt_data_end+0xfc00204c>
					printf("%x ", kbdbuf.keycode[n]);
				}
				BYTE temp = kbdbuf.keycode[0];
 4002088:	e0bffc03 	ldbu	r2,-16(fp)
 400208c:	e0bff945 	stb	r2,-27(fp)
				if (temp == 0x52 || temp == 0x51 || temp == 0x50 || temp == 0x4f)
 4002090:	e0bff943 	ldbu	r2,-27(fp)
 4002094:	108014a0 	cmpeqi	r2,r2,82
 4002098:	1000091e 	bne	r2,zero,40020c0 <main+0x294>
 400209c:	e0bff943 	ldbu	r2,-27(fp)
 40020a0:	10801460 	cmpeqi	r2,r2,81
 40020a4:	1000061e 	bne	r2,zero,40020c0 <main+0x294>
 40020a8:	e0bff943 	ldbu	r2,-27(fp)
 40020ac:	10801420 	cmpeqi	r2,r2,80
 40020b0:	1000031e 	bne	r2,zero,40020c0 <main+0x294>
 40020b4:	e0bff943 	ldbu	r2,-27(fp)
 40020b8:	108013d8 	cmpnei	r2,r2,79
 40020bc:	1000021e 	bne	r2,zero,40020c8 <main+0x29c>
					key = temp;
 40020c0:	e0bff943 	ldbu	r2,-27(fp)
 40020c4:	d0a6ef05 	stb	r2,-25668(gp)
//				setKeycode(kbdbuf.keycode[0]);
//				printSignedHex0(kbdbuf.keycode[0]);
//				printSignedHex1(kbdbuf.keycode[1]);
				printf("\n");
 40020c8:	01000284 	movi	r4,10
 40020cc:	4006e940 	call	4006e94 <putchar>
 40020d0:	00007f06 	br	40022d0 <main+0x4a4>
			}

			else if (device == 2) {
 40020d4:	e0bff683 	ldbu	r2,-38(fp)
 40020d8:	10800098 	cmpnei	r2,r2,2
 40020dc:	10007c1e 	bne	r2,zero,40022d0 <main+0x4a4>
				rcode = mousePoll(&buf);
 40020e0:	e0bff984 	addi	r2,fp,-26
 40020e4:	1009883a 	mov	r4,r2
 40020e8:	400534c0 	call	400534c <mousePoll>
 40020ec:	e0bff905 	stb	r2,-28(fp)
				if (rcode == hrNAK) {
 40020f0:	e0bff903 	ldbu	r2,-28(fp)
 40020f4:	10800118 	cmpnei	r2,r2,4
 40020f8:	10007426 	beq	r2,zero,40022cc <main+0x4a0>
					//NAK means no new data
					continue;
				} else if (rcode) {
 40020fc:	e0bff903 	ldbu	r2,-28(fp)
 4002100:	10000926 	beq	r2,zero,4002128 <main+0x2fc>
					printf("Rcode: ");
 4002104:	01010074 	movhi	r4,1025
 4002108:	211b1104 	addi	r4,r4,27716
 400210c:	4006e500 	call	4006e50 <printf>
					printf("%x \n", rcode);
 4002110:	e0bff903 	ldbu	r2,-28(fp)
 4002114:	100b883a 	mov	r5,r2
 4002118:	01010074 	movhi	r4,1025
 400211c:	211af604 	addi	r4,r4,27608
 4002120:	4006e500 	call	4006e50 <printf>
					continue;
 4002124:	00006a06 	br	40022d0 <main+0x4a4>
				}
				printf("X displacement: ");
 4002128:	01010074 	movhi	r4,1025
 400212c:	211b1704 	addi	r4,r4,27740
 4002130:	4006e500 	call	4006e50 <printf>
				printf("%d ", (signed char) buf.Xdispl);
 4002134:	e0bff9c3 	ldbu	r2,-25(fp)
 4002138:	10803fcc 	andi	r2,r2,255
 400213c:	1080201c 	xori	r2,r2,128
 4002140:	10bfe004 	addi	r2,r2,-128
 4002144:	100b883a 	mov	r5,r2
 4002148:	01010074 	movhi	r4,1025
 400214c:	211b1c04 	addi	r4,r4,27760
 4002150:	4006e500 	call	4006e50 <printf>
				printSignedHex0((signed char) buf.Xdispl);
 4002154:	e0bff9c3 	ldbu	r2,-25(fp)
 4002158:	10803fcc 	andi	r2,r2,255
 400215c:	1080201c 	xori	r2,r2,128
 4002160:	10bfe004 	addi	r2,r2,-128
 4002164:	1009883a 	mov	r4,r2
 4002168:	400052c0 	call	400052c <printSignedHex0>
				printf("Y displacement: ");
 400216c:	01010074 	movhi	r4,1025
 4002170:	211b1d04 	addi	r4,r4,27764
 4002174:	4006e500 	call	4006e50 <printf>
				printf("%d ", (signed char) buf.Ydispl);
 4002178:	e0bffa03 	ldbu	r2,-24(fp)
 400217c:	10803fcc 	andi	r2,r2,255
 4002180:	1080201c 	xori	r2,r2,128
 4002184:	10bfe004 	addi	r2,r2,-128
 4002188:	100b883a 	mov	r5,r2
 400218c:	01010074 	movhi	r4,1025
 4002190:	211b1c04 	addi	r4,r4,27760
 4002194:	4006e500 	call	4006e50 <printf>
				printSignedHex1((signed char) buf.Ydispl);
 4002198:	e0bffa03 	ldbu	r2,-24(fp)
 400219c:	10803fcc 	andi	r2,r2,255
 40021a0:	1080201c 	xori	r2,r2,128
 40021a4:	10bfe004 	addi	r2,r2,-128
 40021a8:	1009883a 	mov	r4,r2
 40021ac:	400064c0 	call	400064c <printSignedHex1>
				printf("Buttons: ");
 40021b0:	01010074 	movhi	r4,1025
 40021b4:	211b2204 	addi	r4,r4,27784
 40021b8:	4006e500 	call	4006e50 <printf>
				printf("%x\n", buf.button);
 40021bc:	e0bff983 	ldbu	r2,-26(fp)
 40021c0:	10803fcc 	andi	r2,r2,255
 40021c4:	100b883a 	mov	r5,r2
 40021c8:	01010074 	movhi	r4,1025
 40021cc:	211b2504 	addi	r4,r4,27796
 40021d0:	4006e500 	call	4006e50 <printf>
				if (buf.button & 0x04)
 40021d4:	e0bff983 	ldbu	r2,-26(fp)
 40021d8:	10803fcc 	andi	r2,r2,255
 40021dc:	1080010c 	andi	r2,r2,4
 40021e0:	10000326 	beq	r2,zero,40021f0 <main+0x3c4>
					setLED(2);
 40021e4:	01000084 	movi	r4,2
 40021e8:	40004900 	call	4000490 <setLED>
 40021ec:	00000206 	br	40021f8 <main+0x3cc>
				else
					clearLED(2);
 40021f0:	01000084 	movi	r4,2
 40021f4:	40004dc0 	call	40004dc <clearLED>
				if (buf.button & 0x02)
 40021f8:	e0bff983 	ldbu	r2,-26(fp)
 40021fc:	10803fcc 	andi	r2,r2,255
 4002200:	1080008c 	andi	r2,r2,2
 4002204:	10000326 	beq	r2,zero,4002214 <main+0x3e8>
					setLED(1);
 4002208:	01000044 	movi	r4,1
 400220c:	40004900 	call	4000490 <setLED>
 4002210:	00000206 	br	400221c <main+0x3f0>
				else
					clearLED(1);
 4002214:	01000044 	movi	r4,1
 4002218:	40004dc0 	call	40004dc <clearLED>
				if (buf.button & 0x01)
 400221c:	e0bff983 	ldbu	r2,-26(fp)
 4002220:	10803fcc 	andi	r2,r2,255
 4002224:	1080004c 	andi	r2,r2,1
 4002228:	10000326 	beq	r2,zero,4002238 <main+0x40c>
					setLED(0);
 400222c:	0009883a 	mov	r4,zero
 4002230:	40004900 	call	4000490 <setLED>
 4002234:	00002606 	br	40022d0 <main+0x4a4>
				else
					clearLED(0);
 4002238:	0009883a 	mov	r4,zero
 400223c:	40004dc0 	call	40004dc <clearLED>
 4002240:	00002306 	br	40022d0 <main+0x4a4>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 4002244:	4006a400 	call	4006a40 <GetUsbTaskState>
 4002248:	10803fcc 	andi	r2,r2,255
 400224c:	10803fd8 	cmpnei	r2,r2,255
 4002250:	10000a1e 	bne	r2,zero,400227c <main+0x450>
			if (!errorflag) {
 4002254:	e0bff643 	ldbu	r2,-39(fp)
 4002258:	10001d1e 	bne	r2,zero,40022d0 <main+0x4a4>
				errorflag = 1;
 400225c:	00800044 	movi	r2,1
 4002260:	e0bff645 	stb	r2,-39(fp)
				clearLED(9);
 4002264:	01000244 	movi	r4,9
 4002268:	40004dc0 	call	40004dc <clearLED>
				printf("USB Error State\n");
 400226c:	01010074 	movhi	r4,1025
 4002270:	211b2604 	addi	r4,r4,27800
 4002274:	4006f6c0 	call	4006f6c <puts>
 4002278:	00001506 	br	40022d0 <main+0x4a4>
				//print out string descriptor here
			}
		} else { //not in USB running state
			printf("USB task state: ");
 400227c:	01010074 	movhi	r4,1025
 4002280:	211b2a04 	addi	r4,r4,27816
 4002284:	4006e500 	call	4006e50 <printf>
			printf("%x\n", GetUsbTaskState());
 4002288:	4006a400 	call	4006a40 <GetUsbTaskState>
 400228c:	10803fcc 	andi	r2,r2,255
 4002290:	100b883a 	mov	r5,r2
 4002294:	01010074 	movhi	r4,1025
 4002298:	211b2504 	addi	r4,r4,27796
 400229c:	4006e500 	call	4006e50 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 40022a0:	e0bff603 	ldbu	r2,-40(fp)
 40022a4:	10000326 	beq	r2,zero,40022b4 <main+0x488>
				runningdebugflag = 0;
 40022a8:	e03ff605 	stb	zero,-40(fp)
				MAX3421E_init();
 40022ac:	4005a840 	call	4005a84 <MAX3421E_init>
				USB_init();
 40022b0:	40062380 	call	4006238 <USB_init>
			}
			errorflag = 0;
 40022b4:	e03ff645 	stb	zero,-39(fp)
			clearLED(9);
 40022b8:	01000244 	movi	r4,9
 40022bc:	40004dc0 	call	40004dc <clearLED>
 40022c0:	00000306 	br	40022d0 <main+0x4a4>
				device = GetDriverandReport();
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
				if (rcode == hrNAK) {
					continue; //NAK means no new data
 40022c4:	0001883a 	nop
 40022c8:	00000106 	br	40022d0 <main+0x4a4>

			else if (device == 2) {
				rcode = mousePoll(&buf);
				if (rcode == hrNAK) {
					//NAK means no new data
					continue;
 40022cc:	0001883a 	nop
	map_set_sprite(map, ghost_xs[1], ghost_ys[1], get_sprite(PINK | GHOST | UP));
	map_set_sprite(map, ghost_xs[2], ghost_ys[2], get_sprite(CYAN | GHOST | UP));
	map_set_sprite(map, ghost_xs[3], ghost_ys[3], get_sprite(TEAL | GHOST | UP));
	spu_set_map(map);

	for (int i = 0; ; ++i) {
 40022d0:	e0bff717 	ldw	r2,-36(fp)
 40022d4:	10800044 	addi	r2,r2,1
 40022d8:	e0bff715 	stw	r2,-36(fp)
				USB_init();
			}
			errorflag = 0;
			clearLED(9);
		}
	}
 40022dc:	003f3106 	br	4001fa4 <__alt_data_end+0xfc001fa4>

040022e0 <spawn_all_sprites>:
 */

#include "pacman.h"

void spawn_all_sprites(int *map)
{
 40022e0:	defff904 	addi	sp,sp,-28
 40022e4:	dfc00615 	stw	ra,24(sp)
 40022e8:	df000515 	stw	fp,20(sp)
 40022ec:	dc000415 	stw	r16,16(sp)
 40022f0:	df000504 	addi	fp,sp,20
 40022f4:	e13ffe15 	stw	r4,-8(fp)
	int count = 0;
 40022f8:	e03ffb15 	stw	zero,-20(fp)
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 40022fc:	e03ffc15 	stw	zero,-16(fp)
 4002300:	00001d06 	br	4002378 <spawn_all_sprites+0x98>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4002304:	e03ffd15 	stw	zero,-12(fp)
 4002308:	00001506 	br	4002360 <spawn_all_sprites+0x80>
			map[y * PACMAN_MAP_WIDTH + x] = (count++) % SPRITE_COUNT;
 400230c:	01400a04 	movi	r5,40
 4002310:	e13ffc17 	ldw	r4,-16(fp)
 4002314:	4006cd00 	call	4006cd0 <__mulsi3>
 4002318:	1007883a 	mov	r3,r2
 400231c:	e0bffd17 	ldw	r2,-12(fp)
 4002320:	1885883a 	add	r2,r3,r2
 4002324:	1085883a 	add	r2,r2,r2
 4002328:	1085883a 	add	r2,r2,r2
 400232c:	1007883a 	mov	r3,r2
 4002330:	e0bffe17 	ldw	r2,-8(fp)
 4002334:	10e1883a 	add	r16,r2,r3
 4002338:	e0bffb17 	ldw	r2,-20(fp)
 400233c:	10c00044 	addi	r3,r2,1
 4002340:	e0fffb15 	stw	r3,-20(fp)
 4002344:	01400d04 	movi	r5,52
 4002348:	1009883a 	mov	r4,r2
 400234c:	4006ba00 	call	4006ba0 <__modsi3>
 4002350:	80800015 	stw	r2,0(r16)

void spawn_all_sprites(int *map)
{
	int count = 0;
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4002354:	e0bffd17 	ldw	r2,-12(fp)
 4002358:	10800044 	addi	r2,r2,1
 400235c:	e0bffd15 	stw	r2,-12(fp)
 4002360:	e0bffd17 	ldw	r2,-12(fp)
 4002364:	10800a10 	cmplti	r2,r2,40
 4002368:	103fe81e 	bne	r2,zero,400230c <__alt_data_end+0xfc00230c>
#include "pacman.h"

void spawn_all_sprites(int *map)
{
	int count = 0;
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 400236c:	e0bffc17 	ldw	r2,-16(fp)
 4002370:	10800044 	addi	r2,r2,1
 4002374:	e0bffc15 	stw	r2,-16(fp)
 4002378:	e0bffc17 	ldw	r2,-16(fp)
 400237c:	10800790 	cmplti	r2,r2,30
 4002380:	103fe01e 	bne	r2,zero,4002304 <__alt_data_end+0xfc002304>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
			map[y * PACMAN_MAP_WIDTH + x] = (count++) % SPRITE_COUNT;
		}
	}
}
 4002384:	0001883a 	nop
 4002388:	e6ffff04 	addi	sp,fp,-4
 400238c:	dfc00217 	ldw	ra,8(sp)
 4002390:	df000117 	ldw	fp,4(sp)
 4002394:	dc000017 	ldw	r16,0(sp)
 4002398:	dec00304 	addi	sp,sp,12
 400239c:	f800283a 	ret

040023a0 <sprite_index>:

int sprite_index(int sprite)
{
 40023a0:	defffe04 	addi	sp,sp,-8
 40023a4:	df000115 	stw	fp,4(sp)
 40023a8:	df000104 	addi	fp,sp,4
 40023ac:	e13fff15 	stw	r4,-4(fp)
	return SPRITE_INDEX_MASK & sprite;
 40023b0:	e0bfff17 	ldw	r2,-4(fp)
 40023b4:	10803fcc 	andi	r2,r2,255
}
 40023b8:	e037883a 	mov	sp,fp
 40023bc:	df000017 	ldw	fp,0(sp)
 40023c0:	dec00104 	addi	sp,sp,4
 40023c4:	f800283a 	ret

040023c8 <sprite_type>:

int sprite_type(int sprite)
{
 40023c8:	defffe04 	addi	sp,sp,-8
 40023cc:	df000115 	stw	fp,4(sp)
 40023d0:	df000104 	addi	fp,sp,4
 40023d4:	e13fff15 	stw	r4,-4(fp)
	return SPRITE_TYPE_MASK & sprite;
 40023d8:	e0bfff17 	ldw	r2,-4(fp)
 40023dc:	1083c00c 	andi	r2,r2,3840
}
 40023e0:	e037883a 	mov	sp,fp
 40023e4:	df000017 	ldw	fp,0(sp)
 40023e8:	dec00104 	addi	sp,sp,4
 40023ec:	f800283a 	ret

040023f0 <sprite_direction>:

int sprite_direction(int sprite)
{
 40023f0:	defffe04 	addi	sp,sp,-8
 40023f4:	df000115 	stw	fp,4(sp)
 40023f8:	df000104 	addi	fp,sp,4
 40023fc:	e13fff15 	stw	r4,-4(fp)
	return SPRITE_DIRECTION_MASK & sprite;
 4002400:	e0bfff17 	ldw	r2,-4(fp)
 4002404:	108003ec 	andhi	r2,r2,15
}
 4002408:	e037883a 	mov	sp,fp
 400240c:	df000017 	ldw	fp,0(sp)
 4002410:	dec00104 	addi	sp,sp,4
 4002414:	f800283a 	ret

04002418 <sprite_property>:

int sprite_property(int sprite)
{
 4002418:	defffe04 	addi	sp,sp,-8
 400241c:	df000115 	stw	fp,4(sp)
 4002420:	df000104 	addi	fp,sp,4
 4002424:	e13fff15 	stw	r4,-4(fp)
	return SPRITE_PROPERTY_MASK & sprite;
 4002428:	e0bfff17 	ldw	r2,-4(fp)
 400242c:	10bc000c 	andi	r2,r2,61440
}
 4002430:	e037883a 	mov	sp,fp
 4002434:	df000017 	ldw	fp,0(sp)
 4002438:	dec00104 	addi	sp,sp,4
 400243c:	f800283a 	ret

04002440 <get_pacman>:

int get_pacman(int pacman)
{
 4002440:	defffd04 	addi	sp,sp,-12
 4002444:	dfc00215 	stw	ra,8(sp)
 4002448:	df000115 	stw	fp,4(sp)
 400244c:	df000104 	addi	fp,sp,4
 4002450:	e13fff15 	stw	r4,-4(fp)
	if (sprite_direction(pacman) == IDLE) {
 4002454:	e13fff17 	ldw	r4,-4(fp)
 4002458:	40023f00 	call	40023f0 <sprite_direction>
 400245c:	1000021e 	bne	r2,zero,4002468 <get_pacman+0x28>
		return 0;
 4002460:	0005883a 	mov	r2,zero
 4002464:	00000506 	br	400247c <get_pacman+0x3c>
	}
	return PACMAN_BASE + 2 * (sprite_direction(pacman) >> SPRITE_DIRECTION_SHIFT) - 1;
 4002468:	e13fff17 	ldw	r4,-4(fp)
 400246c:	40023f00 	call	40023f0 <sprite_direction>
 4002470:	1005d43a 	srai	r2,r2,16
 4002474:	1085883a 	add	r2,r2,r2
 4002478:	10bfffc4 	addi	r2,r2,-1
}
 400247c:	e037883a 	mov	sp,fp
 4002480:	dfc00117 	ldw	ra,4(sp)
 4002484:	df000017 	ldw	fp,0(sp)
 4002488:	dec00204 	addi	sp,sp,8
 400248c:	f800283a 	ret

04002490 <get_ghost>:

int get_ghost(int ghost)
{
 4002490:	defffc04 	addi	sp,sp,-16
 4002494:	dfc00315 	stw	ra,12(sp)
 4002498:	df000215 	stw	fp,8(sp)
 400249c:	dc000115 	stw	r16,4(sp)
 40024a0:	df000204 	addi	fp,sp,8
 40024a4:	e13ffe15 	stw	r4,-8(fp)
	switch (sprite_property(ghost)) {
 40024a8:	e13ffe17 	ldw	r4,-8(fp)
 40024ac:	40024180 	call	4002418 <sprite_property>
 40024b0:	10dc0020 	cmpeqi	r3,r2,28672
 40024b4:	1800051e 	bne	r3,zero,40024cc <get_ghost+0x3c>
 40024b8:	00f40014 	movui	r3,53248
 40024bc:	10c00726 	beq	r2,r3,40024dc <get_ghost+0x4c>
 40024c0:	10840020 	cmpeqi	r2,r2,4096
 40024c4:	1000031e 	bne	r2,zero,40024d4 <get_ghost+0x44>
 40024c8:	00000906 	br	40024f0 <get_ghost+0x60>
	case BLUE:
		return BLUE_GHOST;
 40024cc:	00800a44 	movi	r2,41
 40024d0:	00001306 	br	4002520 <get_ghost+0x90>
	case WHITE:
		return WHITE_GHOST;
 40024d4:	00800ac4 	movi	r2,43
 40024d8:	00001106 	br	4002520 <get_ghost+0x90>
	case EYES_ONLY:
		return GHOST_EYES_BASE + (sprite_direction(ghost) >> SPRITE_DIRECTION_SHIFT) - 1;
 40024dc:	e13ffe17 	ldw	r4,-8(fp)
 40024e0:	40023f00 	call	40023f0 <sprite_direction>
 40024e4:	1005d43a 	srai	r2,r2,16
 40024e8:	10800b04 	addi	r2,r2,44
 40024ec:	00000c06 	br	4002520 <get_ghost+0x90>
	default:
		return GHOST_BASE
			+ 8 * ((sprite_property(ghost) >> SPRITE_PROPERTY_SHIFT) - GHOST_PROPERTY_BASE)
 40024f0:	e13ffe17 	ldw	r4,-8(fp)
 40024f4:	40024180 	call	4002418 <sprite_property>
 40024f8:	1005d33a 	srai	r2,r2,12
 40024fc:	10bfff44 	addi	r2,r2,-3
 4002500:	100490fa 	slli	r2,r2,3
 4002504:	14000244 	addi	r16,r2,9
			+ 2 * ((sprite_direction(ghost) >> SPRITE_DIRECTION_SHIFT) - 1);
 4002508:	e13ffe17 	ldw	r4,-8(fp)
 400250c:	40023f00 	call	40023f0 <sprite_direction>
 4002510:	1005d43a 	srai	r2,r2,16
 4002514:	10bfffc4 	addi	r2,r2,-1
 4002518:	1085883a 	add	r2,r2,r2
	case WHITE:
		return WHITE_GHOST;
	case EYES_ONLY:
		return GHOST_EYES_BASE + (sprite_direction(ghost) >> SPRITE_DIRECTION_SHIFT) - 1;
	default:
		return GHOST_BASE
 400251c:	8085883a 	add	r2,r16,r2
			+ 8 * ((sprite_property(ghost) >> SPRITE_PROPERTY_SHIFT) - GHOST_PROPERTY_BASE)
			+ 2 * ((sprite_direction(ghost) >> SPRITE_DIRECTION_SHIFT) - 1);
	}
}
 4002520:	e6ffff04 	addi	sp,fp,-4
 4002524:	dfc00217 	ldw	ra,8(sp)
 4002528:	df000117 	ldw	fp,4(sp)
 400252c:	dc000017 	ldw	r16,0(sp)
 4002530:	dec00304 	addi	sp,sp,12
 4002534:	f800283a 	ret

04002538 <get_food>:

int get_food(int food)
{
 4002538:	defffd04 	addi	sp,sp,-12
 400253c:	dfc00215 	stw	ra,8(sp)
 4002540:	df000115 	stw	fp,4(sp)
 4002544:	df000104 	addi	fp,sp,4
 4002548:	e13fff15 	stw	r4,-4(fp)
	switch (sprite_property(food)) {
 400254c:	e13fff17 	ldw	r4,-4(fp)
 4002550:	40024180 	call	4002418 <sprite_property>
 4002554:	00f80014 	movui	r3,57344
 4002558:	10c00326 	beq	r2,r3,4002568 <get_food+0x30>
 400255c:	00fc0014 	movui	r3,61440
 4002560:	10c00326 	beq	r2,r3,4002570 <get_food+0x38>
 4002564:	00000406 	br	4002578 <get_food+0x40>
	case SMALL:
		return FOOD_BASE + 1;
 4002568:	00800c84 	movi	r2,50
 400256c:	00000306 	br	400257c <get_food+0x44>
	case BIG:
		return FOOD_BASE;
 4002570:	00800c44 	movi	r2,49
 4002574:	00000106 	br	400257c <get_food+0x44>
	default:
		return -1;
 4002578:	00bfffc4 	movi	r2,-1
	}
}
 400257c:	e037883a 	mov	sp,fp
 4002580:	dfc00117 	ldw	ra,4(sp)
 4002584:	df000017 	ldw	fp,0(sp)
 4002588:	dec00204 	addi	sp,sp,8
 400258c:	f800283a 	ret

04002590 <get_sprite>:

int get_sprite(int sprite)
{
 4002590:	defffc04 	addi	sp,sp,-16
 4002594:	dfc00315 	stw	ra,12(sp)
 4002598:	df000215 	stw	fp,8(sp)
 400259c:	dc000115 	stw	r16,4(sp)
 40025a0:	df000204 	addi	fp,sp,8
 40025a4:	e13ffe15 	stw	r4,-8(fp)
	switch (sprite_type(sprite)) {
 40025a8:	e13ffe17 	ldw	r4,-8(fp)
 40025ac:	40023c80 	call	40023c8 <sprite_type>
 40025b0:	10c04020 	cmpeqi	r3,r2,256
 40025b4:	1800101e 	bne	r3,zero,40025f8 <get_sprite+0x68>
 40025b8:	10c04048 	cmpgei	r3,r2,257
 40025bc:	1800021e 	bne	r3,zero,40025c8 <get_sprite+0x38>
 40025c0:	10000626 	beq	r2,zero,40025dc <get_sprite+0x4c>
 40025c4:	00001f06 	br	4002644 <get_sprite+0xb4>
 40025c8:	10c08020 	cmpeqi	r3,r2,512
 40025cc:	1800111e 	bne	r3,zero,4002614 <get_sprite+0x84>
 40025d0:	1080c020 	cmpeqi	r2,r2,768
 40025d4:	1000161e 	bne	r2,zero,4002630 <get_sprite+0xa0>
 40025d8:	00001a06 	br	4002644 <get_sprite+0xb4>
	case PACMAN:
		return (sprite & ~SPRITE_INDEX_MASK) | get_pacman(sprite);
 40025dc:	e0fffe17 	ldw	r3,-8(fp)
 40025e0:	00bfc004 	movi	r2,-256
 40025e4:	18a0703a 	and	r16,r3,r2
 40025e8:	e13ffe17 	ldw	r4,-8(fp)
 40025ec:	40024400 	call	4002440 <get_pacman>
 40025f0:	8084b03a 	or	r2,r16,r2
 40025f4:	00001406 	br	4002648 <get_sprite+0xb8>
	case GHOST:
		return (sprite & ~SPRITE_INDEX_MASK) | get_ghost(sprite);
 40025f8:	e0fffe17 	ldw	r3,-8(fp)
 40025fc:	00bfc004 	movi	r2,-256
 4002600:	18a0703a 	and	r16,r3,r2
 4002604:	e13ffe17 	ldw	r4,-8(fp)
 4002608:	40024900 	call	4002490 <get_ghost>
 400260c:	8084b03a 	or	r2,r16,r2
 4002610:	00000d06 	br	4002648 <get_sprite+0xb8>
	case FOOD:
		return (sprite & ~SPRITE_INDEX_MASK) | get_food(sprite);
 4002614:	e0fffe17 	ldw	r3,-8(fp)
 4002618:	00bfc004 	movi	r2,-256
 400261c:	18a0703a 	and	r16,r3,r2
 4002620:	e13ffe17 	ldw	r4,-8(fp)
 4002624:	40025380 	call	4002538 <get_food>
 4002628:	8084b03a 	or	r2,r16,r2
 400262c:	00000606 	br	4002648 <get_sprite+0xb8>
	case WALL:
		return (sprite & ~SPRITE_INDEX_MASK) | WALL_BASE;
 4002630:	e0fffe17 	ldw	r3,-8(fp)
 4002634:	00bfc004 	movi	r2,-256
 4002638:	1884703a 	and	r2,r3,r2
 400263c:	10800cd4 	ori	r2,r2,51
 4002640:	00000106 	br	4002648 <get_sprite+0xb8>
	default:
		return -1;
 4002644:	00bfffc4 	movi	r2,-1
	}
}
 4002648:	e6ffff04 	addi	sp,fp,-4
 400264c:	dfc00217 	ldw	ra,8(sp)
 4002650:	df000117 	ldw	fp,4(sp)
 4002654:	dc000017 	ldw	r16,0(sp)
 4002658:	dec00304 	addi	sp,sp,12
 400265c:	f800283a 	ret

04002660 <map_get_sprite>:

int map_get_sprite(int *map, int x, int y)
{
 4002660:	defffb04 	addi	sp,sp,-20
 4002664:	dfc00415 	stw	ra,16(sp)
 4002668:	df000315 	stw	fp,12(sp)
 400266c:	df000304 	addi	fp,sp,12
 4002670:	e13ffd15 	stw	r4,-12(fp)
 4002674:	e17ffe15 	stw	r5,-8(fp)
 4002678:	e1bfff15 	stw	r6,-4(fp)
	return map[y * PACMAN_MAP_WIDTH + x];
 400267c:	01400a04 	movi	r5,40
 4002680:	e13fff17 	ldw	r4,-4(fp)
 4002684:	4006cd00 	call	4006cd0 <__mulsi3>
 4002688:	1007883a 	mov	r3,r2
 400268c:	e0bffe17 	ldw	r2,-8(fp)
 4002690:	1885883a 	add	r2,r3,r2
 4002694:	1085883a 	add	r2,r2,r2
 4002698:	1085883a 	add	r2,r2,r2
 400269c:	1007883a 	mov	r3,r2
 40026a0:	e0bffd17 	ldw	r2,-12(fp)
 40026a4:	10c5883a 	add	r2,r2,r3
 40026a8:	10800017 	ldw	r2,0(r2)
}
 40026ac:	e037883a 	mov	sp,fp
 40026b0:	dfc00117 	ldw	ra,4(sp)
 40026b4:	df000017 	ldw	fp,0(sp)
 40026b8:	dec00204 	addi	sp,sp,8
 40026bc:	f800283a 	ret

040026c0 <map_set_sprite>:

int map_set_sprite(int *map, int x, int y, int sprite)
{
 40026c0:	defffa04 	addi	sp,sp,-24
 40026c4:	dfc00515 	stw	ra,20(sp)
 40026c8:	df000415 	stw	fp,16(sp)
 40026cc:	df000404 	addi	fp,sp,16
 40026d0:	e13ffc15 	stw	r4,-16(fp)
 40026d4:	e17ffd15 	stw	r5,-12(fp)
 40026d8:	e1bffe15 	stw	r6,-8(fp)
 40026dc:	e1ffff15 	stw	r7,-4(fp)
	map[y * PACMAN_MAP_WIDTH + x] = sprite;
 40026e0:	01400a04 	movi	r5,40
 40026e4:	e13ffe17 	ldw	r4,-8(fp)
 40026e8:	4006cd00 	call	4006cd0 <__mulsi3>
 40026ec:	1007883a 	mov	r3,r2
 40026f0:	e0bffd17 	ldw	r2,-12(fp)
 40026f4:	1885883a 	add	r2,r3,r2
 40026f8:	1085883a 	add	r2,r2,r2
 40026fc:	1085883a 	add	r2,r2,r2
 4002700:	1007883a 	mov	r3,r2
 4002704:	e0bffc17 	ldw	r2,-16(fp)
 4002708:	10c5883a 	add	r2,r2,r3
 400270c:	e0ffff17 	ldw	r3,-4(fp)
 4002710:	10c00015 	stw	r3,0(r2)
}
 4002714:	0001883a 	nop
 4002718:	e037883a 	mov	sp,fp
 400271c:	dfc00117 	ldw	ra,4(sp)
 4002720:	df000017 	ldw	fp,0(sp)
 4002724:	dec00204 	addi	sp,sp,8
 4002728:	f800283a 	ret

0400272c <next_pacman>:

int next_pacman(int pacman)
{
 400272c:	defffd04 	addi	sp,sp,-12
 4002730:	dfc00215 	stw	ra,8(sp)
 4002734:	df000115 	stw	fp,4(sp)
 4002738:	df000104 	addi	fp,sp,4
 400273c:	e13fff15 	stw	r4,-4(fp)
	if (sprite_index(pacman) == PACMAN_BASE) {
 4002740:	e13fff17 	ldw	r4,-4(fp)
 4002744:	40023a00 	call	40023a0 <sprite_index>
 4002748:	1000031e 	bne	r2,zero,4002758 <next_pacman+0x2c>
		return get_sprite(pacman);
 400274c:	e13fff17 	ldw	r4,-4(fp)
 4002750:	40025900 	call	4002590 <get_sprite>
 4002754:	00001106 	br	400279c <next_pacman+0x70>
	}
	if (pacman % 2 == 1) {
 4002758:	e0ffff17 	ldw	r3,-4(fp)
 400275c:	00a00034 	movhi	r2,32768
 4002760:	10800044 	addi	r2,r2,1
 4002764:	1884703a 	and	r2,r3,r2
 4002768:	1000040e 	bge	r2,zero,400277c <next_pacman+0x50>
 400276c:	10bfffc4 	addi	r2,r2,-1
 4002770:	00ffff84 	movi	r3,-2
 4002774:	10c4b03a 	or	r2,r2,r3
 4002778:	10800044 	addi	r2,r2,1
 400277c:	10800058 	cmpnei	r2,r2,1
 4002780:	1000031e 	bne	r2,zero,4002790 <next_pacman+0x64>
		return pacman + 1;
 4002784:	e0bfff17 	ldw	r2,-4(fp)
 4002788:	10800044 	addi	r2,r2,1
 400278c:	00000306 	br	400279c <next_pacman+0x70>
	} else {
		return (pacman & ~SPRITE_INDEX_MASK);
 4002790:	e0ffff17 	ldw	r3,-4(fp)
 4002794:	00bfc004 	movi	r2,-256
 4002798:	1884703a 	and	r2,r3,r2
	}
}
 400279c:	e037883a 	mov	sp,fp
 40027a0:	dfc00117 	ldw	ra,4(sp)
 40027a4:	df000017 	ldw	fp,0(sp)
 40027a8:	dec00204 	addi	sp,sp,8
 40027ac:	f800283a 	ret

040027b0 <next_ghost>:

int next_ghost(int ghost)
{
 40027b0:	defffe04 	addi	sp,sp,-8
 40027b4:	df000115 	stw	fp,4(sp)
 40027b8:	df000104 	addi	fp,sp,4
 40027bc:	e13fff15 	stw	r4,-4(fp)
	if (ghost % 2 == 1) {
 40027c0:	e0ffff17 	ldw	r3,-4(fp)
 40027c4:	00a00034 	movhi	r2,32768
 40027c8:	10800044 	addi	r2,r2,1
 40027cc:	1884703a 	and	r2,r3,r2
 40027d0:	1000040e 	bge	r2,zero,40027e4 <next_ghost+0x34>
 40027d4:	10bfffc4 	addi	r2,r2,-1
 40027d8:	00ffff84 	movi	r3,-2
 40027dc:	10c4b03a 	or	r2,r2,r3
 40027e0:	10800044 	addi	r2,r2,1
 40027e4:	10800058 	cmpnei	r2,r2,1
 40027e8:	1000031e 	bne	r2,zero,40027f8 <next_ghost+0x48>
		return ghost + 1;
 40027ec:	e0bfff17 	ldw	r2,-4(fp)
 40027f0:	10800044 	addi	r2,r2,1
 40027f4:	00000206 	br	4002800 <next_ghost+0x50>
	} else {
		return ghost - 1;
 40027f8:	e0bfff17 	ldw	r2,-4(fp)
 40027fc:	10bfffc4 	addi	r2,r2,-1
	}
}
 4002800:	e037883a 	mov	sp,fp
 4002804:	df000017 	ldw	fp,0(sp)
 4002808:	dec00104 	addi	sp,sp,4
 400280c:	f800283a 	ret

04002810 <next_sprite>:

int next_sprite(int sprite)
{
 4002810:	defffd04 	addi	sp,sp,-12
 4002814:	dfc00215 	stw	ra,8(sp)
 4002818:	df000115 	stw	fp,4(sp)
 400281c:	df000104 	addi	fp,sp,4
 4002820:	e13fff15 	stw	r4,-4(fp)
	switch (sprite_type(sprite)) {
 4002824:	e13fff17 	ldw	r4,-4(fp)
 4002828:	40023c80 	call	40023c8 <sprite_type>
 400282c:	10c04020 	cmpeqi	r3,r2,256
 4002830:	18000c1e 	bne	r3,zero,4002864 <next_sprite+0x54>
 4002834:	10c04048 	cmpgei	r3,r2,257
 4002838:	1800021e 	bne	r3,zero,4002844 <next_sprite+0x34>
 400283c:	10000626 	beq	r2,zero,4002858 <next_sprite+0x48>
 4002840:	00000d06 	br	4002878 <next_sprite+0x68>
 4002844:	10c08020 	cmpeqi	r3,r2,512
 4002848:	1800091e 	bne	r3,zero,4002870 <next_sprite+0x60>
 400284c:	1080c020 	cmpeqi	r2,r2,768
 4002850:	1000071e 	bne	r2,zero,4002870 <next_sprite+0x60>
 4002854:	00000806 	br	4002878 <next_sprite+0x68>
	case PACMAN:
		return next_pacman(sprite);
 4002858:	e13fff17 	ldw	r4,-4(fp)
 400285c:	400272c0 	call	400272c <next_pacman>
 4002860:	00000606 	br	400287c <next_sprite+0x6c>
	case GHOST:
		return next_ghost(sprite);
 4002864:	e13fff17 	ldw	r4,-4(fp)
 4002868:	40027b00 	call	40027b0 <next_ghost>
 400286c:	00000306 	br	400287c <next_sprite+0x6c>
	case FOOD:
	case WALL:
		return sprite;
 4002870:	e0bfff17 	ldw	r2,-4(fp)
 4002874:	00000106 	br	400287c <next_sprite+0x6c>
	default:
		return -1;
 4002878:	00bfffc4 	movi	r2,-1
	}
}
 400287c:	e037883a 	mov	sp,fp
 4002880:	dfc00117 	ldw	ra,4(sp)
 4002884:	df000017 	ldw	fp,0(sp)
 4002888:	dec00204 	addi	sp,sp,8
 400288c:	f800283a 	ret

04002890 <animate_map>:

int animate_map(int *map)
{
 4002890:	defffa04 	addi	sp,sp,-24
 4002894:	dfc00515 	stw	ra,20(sp)
 4002898:	df000415 	stw	fp,16(sp)
 400289c:	dc000315 	stw	r16,12(sp)
 40028a0:	df000404 	addi	fp,sp,16
 40028a4:	e13ffe15 	stw	r4,-8(fp)
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 40028a8:	e03ffc15 	stw	zero,-16(fp)
 40028ac:	00002506 	br	4002944 <animate_map+0xb4>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 40028b0:	e03ffd15 	stw	zero,-12(fp)
 40028b4:	00001d06 	br	400292c <animate_map+0x9c>
			map[y * PACMAN_MAP_WIDTH + x] = next_sprite(map[y * PACMAN_MAP_WIDTH + x]);
 40028b8:	01400a04 	movi	r5,40
 40028bc:	e13ffc17 	ldw	r4,-16(fp)
 40028c0:	4006cd00 	call	4006cd0 <__mulsi3>
 40028c4:	1007883a 	mov	r3,r2
 40028c8:	e0bffd17 	ldw	r2,-12(fp)
 40028cc:	1885883a 	add	r2,r3,r2
 40028d0:	1085883a 	add	r2,r2,r2
 40028d4:	1085883a 	add	r2,r2,r2
 40028d8:	1007883a 	mov	r3,r2
 40028dc:	e0bffe17 	ldw	r2,-8(fp)
 40028e0:	10e1883a 	add	r16,r2,r3
 40028e4:	01400a04 	movi	r5,40
 40028e8:	e13ffc17 	ldw	r4,-16(fp)
 40028ec:	4006cd00 	call	4006cd0 <__mulsi3>
 40028f0:	1007883a 	mov	r3,r2
 40028f4:	e0bffd17 	ldw	r2,-12(fp)
 40028f8:	1885883a 	add	r2,r3,r2
 40028fc:	1085883a 	add	r2,r2,r2
 4002900:	1085883a 	add	r2,r2,r2
 4002904:	1007883a 	mov	r3,r2
 4002908:	e0bffe17 	ldw	r2,-8(fp)
 400290c:	10c5883a 	add	r2,r2,r3
 4002910:	10800017 	ldw	r2,0(r2)
 4002914:	1009883a 	mov	r4,r2
 4002918:	40028100 	call	4002810 <next_sprite>
 400291c:	80800015 	stw	r2,0(r16)
}

int animate_map(int *map)
{
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4002920:	e0bffd17 	ldw	r2,-12(fp)
 4002924:	10800044 	addi	r2,r2,1
 4002928:	e0bffd15 	stw	r2,-12(fp)
 400292c:	e0bffd17 	ldw	r2,-12(fp)
 4002930:	10800a10 	cmplti	r2,r2,40
 4002934:	103fe01e 	bne	r2,zero,40028b8 <__alt_data_end+0xfc0028b8>
	}
}

int animate_map(int *map)
{
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 4002938:	e0bffc17 	ldw	r2,-16(fp)
 400293c:	10800044 	addi	r2,r2,1
 4002940:	e0bffc15 	stw	r2,-16(fp)
 4002944:	e0bffc17 	ldw	r2,-16(fp)
 4002948:	10800790 	cmplti	r2,r2,30
 400294c:	103fd81e 	bne	r2,zero,40028b0 <__alt_data_end+0xfc0028b0>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
			map[y * PACMAN_MAP_WIDTH + x] = next_sprite(map[y * PACMAN_MAP_WIDTH + x]);
		}
	}
}
 4002950:	0001883a 	nop
 4002954:	e6ffff04 	addi	sp,fp,-4
 4002958:	dfc00217 	ldw	ra,8(sp)
 400295c:	df000117 	ldw	fp,4(sp)
 4002960:	dc000017 	ldw	r16,0(sp)
 4002964:	dec00304 	addi	sp,sp,12
 4002968:	f800283a 	ret

0400296c <random_sprite>:

int random_sprite()
{
 400296c:	defffd04 	addi	sp,sp,-12
 4002970:	dfc00215 	stw	ra,8(sp)
 4002974:	df000115 	stw	fp,4(sp)
 4002978:	dc000015 	stw	r16,0(sp)
 400297c:	df000104 	addi	fp,sp,4
	return get_sprite(
			(rand() % SPRITE_TYPE_SIZE << SPRITE_TYPE_SHIFT)
 4002980:	4006f980 	call	4006f98 <rand>
 4002984:	1007883a 	mov	r3,r2
 4002988:	00a00034 	movhi	r2,32768
 400298c:	108000c4 	addi	r2,r2,3
 4002990:	1884703a 	and	r2,r3,r2
 4002994:	1000040e 	bge	r2,zero,40029a8 <random_sprite+0x3c>
 4002998:	10bfffc4 	addi	r2,r2,-1
 400299c:	00ffff04 	movi	r3,-4
 40029a0:	10c4b03a 	or	r2,r2,r3
 40029a4:	10800044 	addi	r2,r2,1
 40029a8:	1020923a 	slli	r16,r2,8
		| (rand() % SPRITE_PROPERTY_SIZE << SPRITE_PROPERTY_SHIFT)
 40029ac:	4006f980 	call	4006f98 <rand>
 40029b0:	1007883a 	mov	r3,r2
 40029b4:	00a00034 	movhi	r2,32768
 40029b8:	108003c4 	addi	r2,r2,15
 40029bc:	1884703a 	and	r2,r3,r2
 40029c0:	1000040e 	bge	r2,zero,40029d4 <random_sprite+0x68>
 40029c4:	10bfffc4 	addi	r2,r2,-1
 40029c8:	00fffc04 	movi	r3,-16
 40029cc:	10c4b03a 	or	r2,r2,r3
 40029d0:	10800044 	addi	r2,r2,1
 40029d4:	1004933a 	slli	r2,r2,12
 40029d8:	80a0b03a 	or	r16,r16,r2
		| (rand() % SPRITE_DIRECTION_SIZE << SPRITE_DIRECTION_SHIFT));
 40029dc:	4006f980 	call	4006f98 <rand>
 40029e0:	01400144 	movi	r5,5
 40029e4:	1009883a 	mov	r4,r2
 40029e8:	4006ba00 	call	4006ba0 <__modsi3>
 40029ec:	1004943a 	slli	r2,r2,16
	}
}

int random_sprite()
{
	return get_sprite(
 40029f0:	8084b03a 	or	r2,r16,r2
 40029f4:	1009883a 	mov	r4,r2
 40029f8:	40025900 	call	4002590 <get_sprite>
			(rand() % SPRITE_TYPE_SIZE << SPRITE_TYPE_SHIFT)
		| (rand() % SPRITE_PROPERTY_SIZE << SPRITE_PROPERTY_SHIFT)
		| (rand() % SPRITE_DIRECTION_SIZE << SPRITE_DIRECTION_SHIFT));
}
 40029fc:	e6ffff04 	addi	sp,fp,-4
 4002a00:	dfc00217 	ldw	ra,8(sp)
 4002a04:	df000117 	ldw	fp,4(sp)
 4002a08:	dc000017 	ldw	r16,0(sp)
 4002a0c:	dec00304 	addi	sp,sp,12
 4002a10:	f800283a 	ret

04002a14 <connect_walls>:

void connect_walls(int *walls, int src, int dst)
{
 4002a14:	defff904 	addi	sp,sp,-28
 4002a18:	dfc00615 	stw	ra,24(sp)
 4002a1c:	df000515 	stw	fp,20(sp)
 4002a20:	df000504 	addi	fp,sp,20
 4002a24:	e13ffd15 	stw	r4,-12(fp)
 4002a28:	e17ffe15 	stw	r5,-8(fp)
 4002a2c:	e1bfff15 	stw	r6,-4(fp)
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 4002a30:	e03ffb15 	stw	zero,-20(fp)
 4002a34:	00002606 	br	4002ad0 <connect_walls+0xbc>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4002a38:	e03ffc15 	stw	zero,-16(fp)
 4002a3c:	00001e06 	br	4002ab8 <connect_walls+0xa4>
			if (walls[y * PACMAN_MAP_WIDTH + x] == src) {
 4002a40:	01400a04 	movi	r5,40
 4002a44:	e13ffb17 	ldw	r4,-20(fp)
 4002a48:	4006cd00 	call	4006cd0 <__mulsi3>
 4002a4c:	1007883a 	mov	r3,r2
 4002a50:	e0bffc17 	ldw	r2,-16(fp)
 4002a54:	1885883a 	add	r2,r3,r2
 4002a58:	1085883a 	add	r2,r2,r2
 4002a5c:	1085883a 	add	r2,r2,r2
 4002a60:	1007883a 	mov	r3,r2
 4002a64:	e0bffd17 	ldw	r2,-12(fp)
 4002a68:	10c5883a 	add	r2,r2,r3
 4002a6c:	10c00017 	ldw	r3,0(r2)
 4002a70:	e0bffe17 	ldw	r2,-8(fp)
 4002a74:	18800d1e 	bne	r3,r2,4002aac <connect_walls+0x98>
				walls[y * PACMAN_MAP_WIDTH + x] = dst;
 4002a78:	01400a04 	movi	r5,40
 4002a7c:	e13ffb17 	ldw	r4,-20(fp)
 4002a80:	4006cd00 	call	4006cd0 <__mulsi3>
 4002a84:	1007883a 	mov	r3,r2
 4002a88:	e0bffc17 	ldw	r2,-16(fp)
 4002a8c:	1885883a 	add	r2,r3,r2
 4002a90:	1085883a 	add	r2,r2,r2
 4002a94:	1085883a 	add	r2,r2,r2
 4002a98:	1007883a 	mov	r3,r2
 4002a9c:	e0bffd17 	ldw	r2,-12(fp)
 4002aa0:	10c5883a 	add	r2,r2,r3
 4002aa4:	e0ffff17 	ldw	r3,-4(fp)
 4002aa8:	10c00015 	stw	r3,0(r2)
}

void connect_walls(int *walls, int src, int dst)
{
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4002aac:	e0bffc17 	ldw	r2,-16(fp)
 4002ab0:	10800044 	addi	r2,r2,1
 4002ab4:	e0bffc15 	stw	r2,-16(fp)
 4002ab8:	e0bffc17 	ldw	r2,-16(fp)
 4002abc:	10800a10 	cmplti	r2,r2,40
 4002ac0:	103fdf1e 	bne	r2,zero,4002a40 <__alt_data_end+0xfc002a40>
		| (rand() % SPRITE_DIRECTION_SIZE << SPRITE_DIRECTION_SHIFT));
}

void connect_walls(int *walls, int src, int dst)
{
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 4002ac4:	e0bffb17 	ldw	r2,-20(fp)
 4002ac8:	10800044 	addi	r2,r2,1
 4002acc:	e0bffb15 	stw	r2,-20(fp)
 4002ad0:	e0bffb17 	ldw	r2,-20(fp)
 4002ad4:	10800790 	cmplti	r2,r2,30
 4002ad8:	103fd71e 	bne	r2,zero,4002a38 <__alt_data_end+0xfc002a38>
			if (walls[y * PACMAN_MAP_WIDTH + x] == src) {
				walls[y * PACMAN_MAP_WIDTH + x] = dst;
			}
		}
	}
}
 4002adc:	0001883a 	nop
 4002ae0:	e037883a 	mov	sp,fp
 4002ae4:	dfc00117 	ldw	ra,4(sp)
 4002ae8:	df000017 	ldw	fp,0(sp)
 4002aec:	dec00204 	addi	sp,sp,8
 4002af0:	f800283a 	ret

04002af4 <random_walls>:

void random_walls(int *map)
{
 4002af4:	def68904 	addi	sp,sp,-9692
 4002af8:	dfc97615 	stw	ra,9688(sp)
 4002afc:	df097515 	stw	fp,9684(sp)
 4002b00:	dc097415 	stw	r16,9680(sp)
 4002b04:	df097504 	addi	fp,sp,9684
 4002b08:	e13ffe15 	stw	r4,-8(fp)
	int walls[1200] = {0};
 4002b0c:	e0b69604 	addi	r2,fp,-9640
 4002b10:	00c4b004 	movi	r3,4800
 4002b14:	180d883a 	mov	r6,r3
 4002b18:	000b883a 	mov	r5,zero
 4002b1c:	1009883a 	mov	r4,r2
 4002b20:	4006cf80 	call	4006cf8 <memset>
	int index = 1;
 4002b24:	00800044 	movi	r2,1
 4002b28:	e0b68b15 	stw	r2,-9684(fp)
	for (int i = 0; i < 1024; ++i) {
 4002b2c:	e0368c15 	stw	zero,-9680(fp)
 4002b30:	0000bf06 	br	4002e30 <random_walls+0x33c>
		int connected[1200] = {0};
 4002b34:	e0bb4604 	addi	r2,fp,-4840
 4002b38:	00c4b004 	movi	r3,4800
 4002b3c:	180d883a 	mov	r6,r3
 4002b40:	000b883a 	mov	r5,zero
 4002b44:	1009883a 	mov	r4,r2
 4002b48:	4006cf80 	call	4006cf8 <memset>
		int x = rand() % (PACMAN_MAP_WIDTH - 2) + 2;
 4002b4c:	4006f980 	call	4006f98 <rand>
 4002b50:	01400984 	movi	r5,38
 4002b54:	1009883a 	mov	r4,r2
 4002b58:	4006ba00 	call	4006ba0 <__modsi3>
 4002b5c:	10800084 	addi	r2,r2,2
 4002b60:	e0b69415 	stw	r2,-9648(fp)
		int y = rand() % (PACMAN_MAP_HEIGHT - 2) + 2;
 4002b64:	4006f980 	call	4006f98 <rand>
 4002b68:	01400704 	movi	r5,28
 4002b6c:	1009883a 	mov	r4,r2
 4002b70:	4006ba00 	call	4006ba0 <__modsi3>
 4002b74:	10800084 	addi	r2,r2,2
 4002b78:	e0b69515 	stw	r2,-9644(fp)
		if (walls[y * PACMAN_MAP_WIDTH + x] != 0) {
 4002b7c:	01400a04 	movi	r5,40
 4002b80:	e1369517 	ldw	r4,-9644(fp)
 4002b84:	4006cd00 	call	4006cd0 <__mulsi3>
 4002b88:	1007883a 	mov	r3,r2
 4002b8c:	e0b69417 	ldw	r2,-9648(fp)
 4002b90:	1885883a 	add	r2,r3,r2
 4002b94:	1085883a 	add	r2,r2,r2
 4002b98:	1085883a 	add	r2,r2,r2
 4002b9c:	e0f68b04 	addi	r3,fp,-9684
 4002ba0:	1885883a 	add	r2,r3,r2
 4002ba4:	10800b04 	addi	r2,r2,44
 4002ba8:	10800017 	ldw	r2,0(r2)
 4002bac:	10009a1e 	bne	r2,zero,4002e18 <random_walls+0x324>
			continue;
		}
		int is_closed = 0;
 4002bb0:	e0368d15 	stw	zero,-9676(fp)
		int count = 0;
 4002bb4:	e0368e15 	stw	zero,-9672(fp)
		int connected_indices[8] = {0};
 4002bb8:	e03ff615 	stw	zero,-40(fp)
 4002bbc:	e03ff715 	stw	zero,-36(fp)
 4002bc0:	e03ff815 	stw	zero,-32(fp)
 4002bc4:	e03ff915 	stw	zero,-28(fp)
 4002bc8:	e03ffa15 	stw	zero,-24(fp)
 4002bcc:	e03ffb15 	stw	zero,-20(fp)
 4002bd0:	e03ffc15 	stw	zero,-16(fp)
 4002bd4:	e03ffd15 	stw	zero,-12(fp)
		for (int j = y - 1; j < y + 2; ++j) {
 4002bd8:	e0b69517 	ldw	r2,-9644(fp)
 4002bdc:	10bfffc4 	addi	r2,r2,-1
 4002be0:	e0b68f15 	stw	r2,-9668(fp)
 4002be4:	00005b06 	br	4002d54 <random_walls+0x260>
			for (int i = x - 1; i < x + 2; ++i) {
 4002be8:	e0b69417 	ldw	r2,-9648(fp)
 4002bec:	10bfffc4 	addi	r2,r2,-1
 4002bf0:	e0b69015 	stw	r2,-9664(fp)
 4002bf4:	00004e06 	br	4002d30 <random_walls+0x23c>
				if (walls[j * PACMAN_MAP_WIDTH + i] != 0) {
 4002bf8:	01400a04 	movi	r5,40
 4002bfc:	e1368f17 	ldw	r4,-9668(fp)
 4002c00:	4006cd00 	call	4006cd0 <__mulsi3>
 4002c04:	1007883a 	mov	r3,r2
 4002c08:	e0b69017 	ldw	r2,-9664(fp)
 4002c0c:	1885883a 	add	r2,r3,r2
 4002c10:	1085883a 	add	r2,r2,r2
 4002c14:	1085883a 	add	r2,r2,r2
 4002c18:	e1368b04 	addi	r4,fp,-9684
 4002c1c:	2085883a 	add	r2,r4,r2
 4002c20:	10800b04 	addi	r2,r2,44
 4002c24:	10800017 	ldw	r2,0(r2)
 4002c28:	10003e26 	beq	r2,zero,4002d24 <random_walls+0x230>
					if (connected[walls[j * PACMAN_MAP_WIDTH + i]]) {
 4002c2c:	01400a04 	movi	r5,40
 4002c30:	e1368f17 	ldw	r4,-9668(fp)
 4002c34:	4006cd00 	call	4006cd0 <__mulsi3>
 4002c38:	1007883a 	mov	r3,r2
 4002c3c:	e0b69017 	ldw	r2,-9664(fp)
 4002c40:	1885883a 	add	r2,r3,r2
 4002c44:	1085883a 	add	r2,r2,r2
 4002c48:	1085883a 	add	r2,r2,r2
 4002c4c:	e0f68b04 	addi	r3,fp,-9684
 4002c50:	1885883a 	add	r2,r3,r2
 4002c54:	10800b04 	addi	r2,r2,44
 4002c58:	10800017 	ldw	r2,0(r2)
 4002c5c:	1085883a 	add	r2,r2,r2
 4002c60:	1085883a 	add	r2,r2,r2
 4002c64:	e1368b04 	addi	r4,fp,-9684
 4002c68:	2085883a 	add	r2,r4,r2
 4002c6c:	1084bb04 	addi	r2,r2,4844
 4002c70:	10800017 	ldw	r2,0(r2)
 4002c74:	10000326 	beq	r2,zero,4002c84 <random_walls+0x190>
						is_closed = 1;
 4002c78:	00800044 	movi	r2,1
 4002c7c:	e0b68d15 	stw	r2,-9676(fp)
						break;
 4002c80:	00002f06 	br	4002d40 <random_walls+0x24c>
					}
					connected[walls[j * PACMAN_MAP_WIDTH + i]] = 1;
 4002c84:	01400a04 	movi	r5,40
 4002c88:	e1368f17 	ldw	r4,-9668(fp)
 4002c8c:	4006cd00 	call	4006cd0 <__mulsi3>
 4002c90:	1007883a 	mov	r3,r2
 4002c94:	e0b69017 	ldw	r2,-9664(fp)
 4002c98:	1885883a 	add	r2,r3,r2
 4002c9c:	1085883a 	add	r2,r2,r2
 4002ca0:	1085883a 	add	r2,r2,r2
 4002ca4:	e0f68b04 	addi	r3,fp,-9684
 4002ca8:	1885883a 	add	r2,r3,r2
 4002cac:	10800b04 	addi	r2,r2,44
 4002cb0:	10800017 	ldw	r2,0(r2)
 4002cb4:	1085883a 	add	r2,r2,r2
 4002cb8:	1085883a 	add	r2,r2,r2
 4002cbc:	e1368b04 	addi	r4,fp,-9684
 4002cc0:	2085883a 	add	r2,r4,r2
 4002cc4:	1084bb04 	addi	r2,r2,4844
 4002cc8:	00c00044 	movi	r3,1
 4002ccc:	10c00015 	stw	r3,0(r2)
					connected_indices[count++] = walls[j * PACMAN_MAP_WIDTH + i];
 4002cd0:	e4368e17 	ldw	r16,-9672(fp)
 4002cd4:	80800044 	addi	r2,r16,1
 4002cd8:	e0b68e15 	stw	r2,-9672(fp)
 4002cdc:	01400a04 	movi	r5,40
 4002ce0:	e1368f17 	ldw	r4,-9668(fp)
 4002ce4:	4006cd00 	call	4006cd0 <__mulsi3>
 4002ce8:	1007883a 	mov	r3,r2
 4002cec:	e0b69017 	ldw	r2,-9664(fp)
 4002cf0:	1885883a 	add	r2,r3,r2
 4002cf4:	1085883a 	add	r2,r2,r2
 4002cf8:	1085883a 	add	r2,r2,r2
 4002cfc:	e0f68b04 	addi	r3,fp,-9684
 4002d00:	1885883a 	add	r2,r3,r2
 4002d04:	10800b04 	addi	r2,r2,44
 4002d08:	10c00017 	ldw	r3,0(r2)
 4002d0c:	8405883a 	add	r2,r16,r16
 4002d10:	1085883a 	add	r2,r2,r2
 4002d14:	e1368b04 	addi	r4,fp,-9684
 4002d18:	2085883a 	add	r2,r4,r2
 4002d1c:	10896b04 	addi	r2,r2,9644
 4002d20:	10c00015 	stw	r3,0(r2)
		}
		int is_closed = 0;
		int count = 0;
		int connected_indices[8] = {0};
		for (int j = y - 1; j < y + 2; ++j) {
			for (int i = x - 1; i < x + 2; ++i) {
 4002d24:	e0b69017 	ldw	r2,-9664(fp)
 4002d28:	10800044 	addi	r2,r2,1
 4002d2c:	e0b69015 	stw	r2,-9664(fp)
 4002d30:	e0b69417 	ldw	r2,-9648(fp)
 4002d34:	10800084 	addi	r2,r2,2
 4002d38:	e0f69017 	ldw	r3,-9664(fp)
 4002d3c:	18bfae16 	blt	r3,r2,4002bf8 <__alt_data_end+0xfc002bf8>
					}
					connected[walls[j * PACMAN_MAP_WIDTH + i]] = 1;
					connected_indices[count++] = walls[j * PACMAN_MAP_WIDTH + i];
				}
			}
			if (is_closed) {
 4002d40:	e0b68d17 	ldw	r2,-9676(fp)
 4002d44:	1000081e 	bne	r2,zero,4002d68 <random_walls+0x274>
			continue;
		}
		int is_closed = 0;
		int count = 0;
		int connected_indices[8] = {0};
		for (int j = y - 1; j < y + 2; ++j) {
 4002d48:	e0b68f17 	ldw	r2,-9668(fp)
 4002d4c:	10800044 	addi	r2,r2,1
 4002d50:	e0b68f15 	stw	r2,-9668(fp)
 4002d54:	e0b69517 	ldw	r2,-9644(fp)
 4002d58:	10800084 	addi	r2,r2,2
 4002d5c:	e0f68f17 	ldw	r3,-9668(fp)
 4002d60:	18bfa116 	blt	r3,r2,4002be8 <__alt_data_end+0xfc002be8>
 4002d64:	00000106 	br	4002d6c <random_walls+0x278>
					connected[walls[j * PACMAN_MAP_WIDTH + i]] = 1;
					connected_indices[count++] = walls[j * PACMAN_MAP_WIDTH + i];
				}
			}
			if (is_closed) {
				break;
 4002d68:	0001883a 	nop
			}
		}
		if (count == 0) {
 4002d6c:	e0b68e17 	ldw	r2,-9672(fp)
 4002d70:	1000101e 	bne	r2,zero,4002db4 <random_walls+0x2c0>
			walls[y * PACMAN_MAP_WIDTH + x] = index++;
 4002d74:	01400a04 	movi	r5,40
 4002d78:	e1369517 	ldw	r4,-9644(fp)
 4002d7c:	4006cd00 	call	4006cd0 <__mulsi3>
 4002d80:	1007883a 	mov	r3,r2
 4002d84:	e0b69417 	ldw	r2,-9648(fp)
 4002d88:	1887883a 	add	r3,r3,r2
 4002d8c:	e0b68b17 	ldw	r2,-9684(fp)
 4002d90:	11000044 	addi	r4,r2,1
 4002d94:	e1368b15 	stw	r4,-9684(fp)
 4002d98:	18c7883a 	add	r3,r3,r3
 4002d9c:	18c7883a 	add	r3,r3,r3
 4002da0:	e1368b04 	addi	r4,fp,-9684
 4002da4:	20c7883a 	add	r3,r4,r3
 4002da8:	18c00b04 	addi	r3,r3,44
 4002dac:	18800015 	stw	r2,0(r3)
			continue;
 4002db0:	00001c06 	br	4002e24 <random_walls+0x330>
		}
		if (is_closed) {
 4002db4:	e0b68d17 	ldw	r2,-9676(fp)
 4002db8:	1000191e 	bne	r2,zero,4002e20 <random_walls+0x32c>
			continue;
		}
		for (int i = 1; i < count; ++i) {
 4002dbc:	00800044 	movi	r2,1
 4002dc0:	e0b69115 	stw	r2,-9660(fp)
 4002dc4:	00001006 	br	4002e08 <random_walls+0x314>
			connect_walls(walls, connected_indices[i], connected_indices[0]);
 4002dc8:	e0b69117 	ldw	r2,-9660(fp)
 4002dcc:	1085883a 	add	r2,r2,r2
 4002dd0:	1085883a 	add	r2,r2,r2
 4002dd4:	e0f68b04 	addi	r3,fp,-9684
 4002dd8:	1885883a 	add	r2,r3,r2
 4002ddc:	10896b04 	addi	r2,r2,9644
 4002de0:	10c00017 	ldw	r3,0(r2)
 4002de4:	e13ff617 	ldw	r4,-40(fp)
 4002de8:	e0b69604 	addi	r2,fp,-9640
 4002dec:	200d883a 	mov	r6,r4
 4002df0:	180b883a 	mov	r5,r3
 4002df4:	1009883a 	mov	r4,r2
 4002df8:	4002a140 	call	4002a14 <connect_walls>
			continue;
		}
		if (is_closed) {
			continue;
		}
		for (int i = 1; i < count; ++i) {
 4002dfc:	e0b69117 	ldw	r2,-9660(fp)
 4002e00:	10800044 	addi	r2,r2,1
 4002e04:	e0b69115 	stw	r2,-9660(fp)
 4002e08:	e0f69117 	ldw	r3,-9660(fp)
 4002e0c:	e0b68e17 	ldw	r2,-9672(fp)
 4002e10:	18bfed16 	blt	r3,r2,4002dc8 <__alt_data_end+0xfc002dc8>
 4002e14:	00000306 	br	4002e24 <random_walls+0x330>
	for (int i = 0; i < 1024; ++i) {
		int connected[1200] = {0};
		int x = rand() % (PACMAN_MAP_WIDTH - 2) + 2;
		int y = rand() % (PACMAN_MAP_HEIGHT - 2) + 2;
		if (walls[y * PACMAN_MAP_WIDTH + x] != 0) {
			continue;
 4002e18:	0001883a 	nop
 4002e1c:	00000106 	br	4002e24 <random_walls+0x330>
		if (count == 0) {
			walls[y * PACMAN_MAP_WIDTH + x] = index++;
			continue;
		}
		if (is_closed) {
			continue;
 4002e20:	0001883a 	nop

void random_walls(int *map)
{
	int walls[1200] = {0};
	int index = 1;
	for (int i = 0; i < 1024; ++i) {
 4002e24:	e0b68c17 	ldw	r2,-9680(fp)
 4002e28:	10800044 	addi	r2,r2,1
 4002e2c:	e0b68c15 	stw	r2,-9680(fp)
 4002e30:	e0b68c17 	ldw	r2,-9680(fp)
 4002e34:	10810010 	cmplti	r2,r2,1024
 4002e38:	103f3e1e 	bne	r2,zero,4002b34 <__alt_data_end+0xfc002b34>
		for (int i = 1; i < count; ++i) {
			connect_walls(walls, connected_indices[i], connected_indices[0]);
		}
	}

	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 4002e3c:	e0369215 	stw	zero,-9656(fp)
 4002e40:	00001f06 	br	4002ec0 <random_walls+0x3cc>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4002e44:	e0369315 	stw	zero,-9652(fp)
 4002e48:	00001706 	br	4002ea8 <random_walls+0x3b4>
			if (walls[y * PACMAN_MAP_WIDTH + x])
 4002e4c:	01400a04 	movi	r5,40
 4002e50:	e1369217 	ldw	r4,-9656(fp)
 4002e54:	4006cd00 	call	4006cd0 <__mulsi3>
 4002e58:	1007883a 	mov	r3,r2
 4002e5c:	e0b69317 	ldw	r2,-9652(fp)
 4002e60:	1885883a 	add	r2,r3,r2
 4002e64:	1085883a 	add	r2,r2,r2
 4002e68:	1085883a 	add	r2,r2,r2
 4002e6c:	e1368b04 	addi	r4,fp,-9684
 4002e70:	2085883a 	add	r2,r4,r2
 4002e74:	10800b04 	addi	r2,r2,44
 4002e78:	10800017 	ldw	r2,0(r2)
 4002e7c:	10000726 	beq	r2,zero,4002e9c <random_walls+0x3a8>
				map_set_sprite(map, x, y, get_sprite(WALL));
 4002e80:	0100c004 	movi	r4,768
 4002e84:	40025900 	call	4002590 <get_sprite>
 4002e88:	100f883a 	mov	r7,r2
 4002e8c:	e1b69217 	ldw	r6,-9656(fp)
 4002e90:	e1769317 	ldw	r5,-9652(fp)
 4002e94:	e13ffe17 	ldw	r4,-8(fp)
 4002e98:	40026c00 	call	40026c0 <map_set_sprite>
			connect_walls(walls, connected_indices[i], connected_indices[0]);
		}
	}

	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4002e9c:	e0b69317 	ldw	r2,-9652(fp)
 4002ea0:	10800044 	addi	r2,r2,1
 4002ea4:	e0b69315 	stw	r2,-9652(fp)
 4002ea8:	e0b69317 	ldw	r2,-9652(fp)
 4002eac:	10800a10 	cmplti	r2,r2,40
 4002eb0:	103fe61e 	bne	r2,zero,4002e4c <__alt_data_end+0xfc002e4c>
		for (int i = 1; i < count; ++i) {
			connect_walls(walls, connected_indices[i], connected_indices[0]);
		}
	}

	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 4002eb4:	e0b69217 	ldw	r2,-9656(fp)
 4002eb8:	10800044 	addi	r2,r2,1
 4002ebc:	e0b69215 	stw	r2,-9656(fp)
 4002ec0:	e0b69217 	ldw	r2,-9656(fp)
 4002ec4:	10800790 	cmplti	r2,r2,30
 4002ec8:	103fde1e 	bne	r2,zero,4002e44 <__alt_data_end+0xfc002e44>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
			if (walls[y * PACMAN_MAP_WIDTH + x])
				map_set_sprite(map, x, y, get_sprite(WALL));
		}
	}
}
 4002ecc:	0001883a 	nop
 4002ed0:	e6ffff04 	addi	sp,fp,-4
 4002ed4:	dfc00217 	ldw	ra,8(sp)
 4002ed8:	df000117 	ldw	fp,4(sp)
 4002edc:	dc000017 	ldw	r16,0(sp)
 4002ee0:	dec00304 	addi	sp,sp,12
 4002ee4:	f800283a 	ret

04002ee8 <random_map>:

void random_map(int *map)
{
 4002ee8:	defffa04 	addi	sp,sp,-24
 4002eec:	dfc00515 	stw	ra,20(sp)
 4002ef0:	df000415 	stw	fp,16(sp)
 4002ef4:	dc000315 	stw	r16,12(sp)
 4002ef8:	df000404 	addi	fp,sp,16
 4002efc:	e13ffe15 	stw	r4,-8(fp)
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 4002f00:	e03ffc15 	stw	zero,-16(fp)
 4002f04:	00001a06 	br	4002f70 <random_map+0x88>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4002f08:	e03ffd15 	stw	zero,-12(fp)
 4002f0c:	00001206 	br	4002f58 <random_map+0x70>
			map[y * PACMAN_MAP_WIDTH + x] = get_sprite(random_sprite());
 4002f10:	01400a04 	movi	r5,40
 4002f14:	e13ffc17 	ldw	r4,-16(fp)
 4002f18:	4006cd00 	call	4006cd0 <__mulsi3>
 4002f1c:	1007883a 	mov	r3,r2
 4002f20:	e0bffd17 	ldw	r2,-12(fp)
 4002f24:	1885883a 	add	r2,r3,r2
 4002f28:	1085883a 	add	r2,r2,r2
 4002f2c:	1085883a 	add	r2,r2,r2
 4002f30:	1007883a 	mov	r3,r2
 4002f34:	e0bffe17 	ldw	r2,-8(fp)
 4002f38:	10e1883a 	add	r16,r2,r3
 4002f3c:	400296c0 	call	400296c <random_sprite>
 4002f40:	1009883a 	mov	r4,r2
 4002f44:	40025900 	call	4002590 <get_sprite>
 4002f48:	80800015 	stw	r2,0(r16)
}

void random_map(int *map)
{
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4002f4c:	e0bffd17 	ldw	r2,-12(fp)
 4002f50:	10800044 	addi	r2,r2,1
 4002f54:	e0bffd15 	stw	r2,-12(fp)
 4002f58:	e0bffd17 	ldw	r2,-12(fp)
 4002f5c:	10800a10 	cmplti	r2,r2,40
 4002f60:	103feb1e 	bne	r2,zero,4002f10 <__alt_data_end+0xfc002f10>
	}
}

void random_map(int *map)
{
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 4002f64:	e0bffc17 	ldw	r2,-16(fp)
 4002f68:	10800044 	addi	r2,r2,1
 4002f6c:	e0bffc15 	stw	r2,-16(fp)
 4002f70:	e0bffc17 	ldw	r2,-16(fp)
 4002f74:	10800790 	cmplti	r2,r2,30
 4002f78:	103fe31e 	bne	r2,zero,4002f08 <__alt_data_end+0xfc002f08>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
			map[y * PACMAN_MAP_WIDTH + x] = get_sprite(random_sprite());
		}
	}
}
 4002f7c:	0001883a 	nop
 4002f80:	e6ffff04 	addi	sp,fp,-4
 4002f84:	dfc00217 	ldw	ra,8(sp)
 4002f88:	df000117 	ldw	fp,4(sp)
 4002f8c:	dc000017 	ldw	r16,0(sp)
 4002f90:	dec00304 	addi	sp,sp,12
 4002f94:	f800283a 	ret

04002f98 <test_map>:

void test_map(int *map)
{
 4002f98:	deffd604 	addi	sp,sp,-168
 4002f9c:	dfc02915 	stw	ra,164(sp)
 4002fa0:	df002815 	stw	fp,160(sp)
 4002fa4:	dc002715 	stw	r16,156(sp)
 4002fa8:	df002804 	addi	fp,sp,160
 4002fac:	e13ffe15 	stw	r4,-8(fp)
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 4002fb0:	e03fd815 	stw	zero,-160(fp)
 4002fb4:	00001906 	br	400301c <test_map+0x84>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4002fb8:	e03fd915 	stw	zero,-156(fp)
 4002fbc:	00001106 	br	4003004 <test_map+0x6c>
			map[y * PACMAN_MAP_WIDTH + x] = get_sprite(SMALL | FOOD);
 4002fc0:	01400a04 	movi	r5,40
 4002fc4:	e13fd817 	ldw	r4,-160(fp)
 4002fc8:	4006cd00 	call	4006cd0 <__mulsi3>
 4002fcc:	1007883a 	mov	r3,r2
 4002fd0:	e0bfd917 	ldw	r2,-156(fp)
 4002fd4:	1885883a 	add	r2,r3,r2
 4002fd8:	1085883a 	add	r2,r2,r2
 4002fdc:	1085883a 	add	r2,r2,r2
 4002fe0:	1007883a 	mov	r3,r2
 4002fe4:	e0bffe17 	ldw	r2,-8(fp)
 4002fe8:	10e1883a 	add	r16,r2,r3
 4002fec:	01388014 	movui	r4,57856
 4002ff0:	40025900 	call	4002590 <get_sprite>
 4002ff4:	80800015 	stw	r2,0(r16)
}

void test_map(int *map)
{
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4002ff8:	e0bfd917 	ldw	r2,-156(fp)
 4002ffc:	10800044 	addi	r2,r2,1
 4003000:	e0bfd915 	stw	r2,-156(fp)
 4003004:	e0bfd917 	ldw	r2,-156(fp)
 4003008:	10800a10 	cmplti	r2,r2,40
 400300c:	103fec1e 	bne	r2,zero,4002fc0 <__alt_data_end+0xfc002fc0>
	}
}

void test_map(int *map)
{
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 4003010:	e0bfd817 	ldw	r2,-160(fp)
 4003014:	10800044 	addi	r2,r2,1
 4003018:	e0bfd815 	stw	r2,-160(fp)
 400301c:	e0bfd817 	ldw	r2,-160(fp)
 4003020:	10800790 	cmplti	r2,r2,30
 4003024:	103fe41e 	bne	r2,zero,4002fb8 <__alt_data_end+0xfc002fb8>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
			map[y * PACMAN_MAP_WIDTH + x] = get_sprite(SMALL | FOOD);
		}
	}
	for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4003028:	e03fda15 	stw	zero,-152(fp)
 400302c:	00001606 	br	4003088 <test_map+0xf0>
		map[x] = get_sprite(WALL);
 4003030:	e0bfda17 	ldw	r2,-152(fp)
 4003034:	1085883a 	add	r2,r2,r2
 4003038:	1085883a 	add	r2,r2,r2
 400303c:	1007883a 	mov	r3,r2
 4003040:	e0bffe17 	ldw	r2,-8(fp)
 4003044:	10e1883a 	add	r16,r2,r3
 4003048:	0100c004 	movi	r4,768
 400304c:	40025900 	call	4002590 <get_sprite>
 4003050:	80800015 	stw	r2,0(r16)
		map[(PACMAN_MAP_HEIGHT - 1) * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003054:	e0bfda17 	ldw	r2,-152(fp)
 4003058:	10812204 	addi	r2,r2,1160
 400305c:	1085883a 	add	r2,r2,r2
 4003060:	1085883a 	add	r2,r2,r2
 4003064:	1007883a 	mov	r3,r2
 4003068:	e0bffe17 	ldw	r2,-8(fp)
 400306c:	10e1883a 	add	r16,r2,r3
 4003070:	0100c004 	movi	r4,768
 4003074:	40025900 	call	4002590 <get_sprite>
 4003078:	80800015 	stw	r2,0(r16)
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
			map[y * PACMAN_MAP_WIDTH + x] = get_sprite(SMALL | FOOD);
		}
	}
	for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 400307c:	e0bfda17 	ldw	r2,-152(fp)
 4003080:	10800044 	addi	r2,r2,1
 4003084:	e0bfda15 	stw	r2,-152(fp)
 4003088:	e0bfda17 	ldw	r2,-152(fp)
 400308c:	10800a10 	cmplti	r2,r2,40
 4003090:	103fe71e 	bne	r2,zero,4003030 <__alt_data_end+0xfc003030>
		map[x] = get_sprite(WALL);
		map[(PACMAN_MAP_HEIGHT - 1) * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	}
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 4003094:	e03fdb15 	stw	zero,-148(fp)
 4003098:	00001506 	br	40030f0 <test_map+0x158>
		map[y * PACMAN_MAP_WIDTH] = get_sprite(WALL);
 400309c:	01402804 	movi	r5,160
 40030a0:	e13fdb17 	ldw	r4,-148(fp)
 40030a4:	4006cd00 	call	4006cd0 <__mulsi3>
 40030a8:	1007883a 	mov	r3,r2
 40030ac:	e0bffe17 	ldw	r2,-8(fp)
 40030b0:	10e1883a 	add	r16,r2,r3
 40030b4:	0100c004 	movi	r4,768
 40030b8:	40025900 	call	4002590 <get_sprite>
 40030bc:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + PACMAN_MAP_WIDTH - 1] = get_sprite(WALL);
 40030c0:	01402804 	movi	r5,160
 40030c4:	e13fdb17 	ldw	r4,-148(fp)
 40030c8:	4006cd00 	call	4006cd0 <__mulsi3>
 40030cc:	10802704 	addi	r2,r2,156
 40030d0:	e0fffe17 	ldw	r3,-8(fp)
 40030d4:	18a1883a 	add	r16,r3,r2
 40030d8:	0100c004 	movi	r4,768
 40030dc:	40025900 	call	4002590 <get_sprite>
 40030e0:	80800015 	stw	r2,0(r16)
	}
	for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
		map[x] = get_sprite(WALL);
		map[(PACMAN_MAP_HEIGHT - 1) * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	}
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 40030e4:	e0bfdb17 	ldw	r2,-148(fp)
 40030e8:	10800044 	addi	r2,r2,1
 40030ec:	e0bfdb15 	stw	r2,-148(fp)
 40030f0:	e0bfdb17 	ldw	r2,-148(fp)
 40030f4:	10800790 	cmplti	r2,r2,30
 40030f8:	103fe81e 	bne	r2,zero,400309c <__alt_data_end+0xfc00309c>
		map[y * PACMAN_MAP_WIDTH] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + PACMAN_MAP_WIDTH - 1] = get_sprite(WALL);
	}
	for (int x = 17; x <= 22; ++x) {
 40030fc:	00800444 	movi	r2,17
 4003100:	e0bfdc15 	stw	r2,-144(fp)
 4003104:	00001706 	br	4003164 <test_map+0x1cc>
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003108:	e0bfdc17 	ldw	r2,-144(fp)
 400310c:	10805a04 	addi	r2,r2,360
 4003110:	1085883a 	add	r2,r2,r2
 4003114:	1085883a 	add	r2,r2,r2
 4003118:	1007883a 	mov	r3,r2
 400311c:	e0bffe17 	ldw	r2,-8(fp)
 4003120:	10e1883a 	add	r16,r2,r3
 4003124:	0100c004 	movi	r4,768
 4003128:	40025900 	call	4002590 <get_sprite>
 400312c:	80800015 	stw	r2,0(r16)
		map[12 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003130:	e0bfdc17 	ldw	r2,-144(fp)
 4003134:	10807804 	addi	r2,r2,480
 4003138:	1085883a 	add	r2,r2,r2
 400313c:	1085883a 	add	r2,r2,r2
 4003140:	1007883a 	mov	r3,r2
 4003144:	e0bffe17 	ldw	r2,-8(fp)
 4003148:	10e1883a 	add	r16,r2,r3
 400314c:	0100c004 	movi	r4,768
 4003150:	40025900 	call	4002590 <get_sprite>
 4003154:	80800015 	stw	r2,0(r16)
	}
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
		map[y * PACMAN_MAP_WIDTH] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + PACMAN_MAP_WIDTH - 1] = get_sprite(WALL);
	}
	for (int x = 17; x <= 22; ++x) {
 4003158:	e0bfdc17 	ldw	r2,-144(fp)
 400315c:	10800044 	addi	r2,r2,1
 4003160:	e0bfdc15 	stw	r2,-144(fp)
 4003164:	e0bfdc17 	ldw	r2,-144(fp)
 4003168:	108005d0 	cmplti	r2,r2,23
 400316c:	103fe61e 	bne	r2,zero,4003108 <__alt_data_end+0xfc003108>
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
		map[12 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	}
	for (int y = 10; y <= 11; ++y) {
 4003170:	00800284 	movi	r2,10
 4003174:	e0bfdd15 	stw	r2,-140(fp)
 4003178:	00001506 	br	40031d0 <test_map+0x238>
		map[y * PACMAN_MAP_WIDTH + 17] = get_sprite(WALL);
 400317c:	01402804 	movi	r5,160
 4003180:	e13fdd17 	ldw	r4,-140(fp)
 4003184:	4006cd00 	call	4006cd0 <__mulsi3>
 4003188:	10801104 	addi	r2,r2,68
 400318c:	e0fffe17 	ldw	r3,-8(fp)
 4003190:	18a1883a 	add	r16,r3,r2
 4003194:	0100c004 	movi	r4,768
 4003198:	40025900 	call	4002590 <get_sprite>
 400319c:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 22] = get_sprite(WALL);
 40031a0:	01402804 	movi	r5,160
 40031a4:	e13fdd17 	ldw	r4,-140(fp)
 40031a8:	4006cd00 	call	4006cd0 <__mulsi3>
 40031ac:	10801604 	addi	r2,r2,88
 40031b0:	e0fffe17 	ldw	r3,-8(fp)
 40031b4:	18a1883a 	add	r16,r3,r2
 40031b8:	0100c004 	movi	r4,768
 40031bc:	40025900 	call	4002590 <get_sprite>
 40031c0:	80800015 	stw	r2,0(r16)
	}
	for (int x = 17; x <= 22; ++x) {
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
		map[12 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	}
	for (int y = 10; y <= 11; ++y) {
 40031c4:	e0bfdd17 	ldw	r2,-140(fp)
 40031c8:	10800044 	addi	r2,r2,1
 40031cc:	e0bfdd15 	stw	r2,-140(fp)
 40031d0:	e0bfdd17 	ldw	r2,-140(fp)
 40031d4:	10800310 	cmplti	r2,r2,12
 40031d8:	103fe81e 	bne	r2,zero,400317c <__alt_data_end+0xfc00317c>
		map[y * PACMAN_MAP_WIDTH + 17] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 22] = get_sprite(WALL);
	}
	for (int x = 19; x <= 20; ++x)
 40031dc:	008004c4 	movi	r2,19
 40031e0:	e0bfde15 	stw	r2,-136(fp)
 40031e4:	00000d06 	br	400321c <test_map+0x284>
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
 40031e8:	e0bfde17 	ldw	r2,-136(fp)
 40031ec:	10805a04 	addi	r2,r2,360
 40031f0:	1085883a 	add	r2,r2,r2
 40031f4:	1085883a 	add	r2,r2,r2
 40031f8:	1007883a 	mov	r3,r2
 40031fc:	e0bffe17 	ldw	r2,-8(fp)
 4003200:	10e1883a 	add	r16,r2,r3
 4003204:	013fffc4 	movi	r4,-1
 4003208:	40025900 	call	4002590 <get_sprite>
 400320c:	80800015 	stw	r2,0(r16)
	}
	for (int y = 10; y <= 11; ++y) {
		map[y * PACMAN_MAP_WIDTH + 17] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 22] = get_sprite(WALL);
	}
	for (int x = 19; x <= 20; ++x)
 4003210:	e0bfde17 	ldw	r2,-136(fp)
 4003214:	10800044 	addi	r2,r2,1
 4003218:	e0bfde15 	stw	r2,-136(fp)
 400321c:	e0bfde17 	ldw	r2,-136(fp)
 4003220:	10800550 	cmplti	r2,r2,21
 4003224:	103ff01e 	bne	r2,zero,40031e8 <__alt_data_end+0xfc0031e8>
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
	for (int x = 18; x <= 21; ++x) {
 4003228:	00800484 	movi	r2,18
 400322c:	e0bfdf15 	stw	r2,-132(fp)
 4003230:	00001706 	br	4003290 <test_map+0x2f8>
		map[10 * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
 4003234:	e0bfdf17 	ldw	r2,-132(fp)
 4003238:	10806404 	addi	r2,r2,400
 400323c:	1085883a 	add	r2,r2,r2
 4003240:	1085883a 	add	r2,r2,r2
 4003244:	1007883a 	mov	r3,r2
 4003248:	e0bffe17 	ldw	r2,-8(fp)
 400324c:	10e1883a 	add	r16,r2,r3
 4003250:	013fffc4 	movi	r4,-1
 4003254:	40025900 	call	4002590 <get_sprite>
 4003258:	80800015 	stw	r2,0(r16)
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
 400325c:	e0bfdf17 	ldw	r2,-132(fp)
 4003260:	10806e04 	addi	r2,r2,440
 4003264:	1085883a 	add	r2,r2,r2
 4003268:	1085883a 	add	r2,r2,r2
 400326c:	1007883a 	mov	r3,r2
 4003270:	e0bffe17 	ldw	r2,-8(fp)
 4003274:	10e1883a 	add	r16,r2,r3
 4003278:	013fffc4 	movi	r4,-1
 400327c:	40025900 	call	4002590 <get_sprite>
 4003280:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 17] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 22] = get_sprite(WALL);
	}
	for (int x = 19; x <= 20; ++x)
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
	for (int x = 18; x <= 21; ++x) {
 4003284:	e0bfdf17 	ldw	r2,-132(fp)
 4003288:	10800044 	addi	r2,r2,1
 400328c:	e0bfdf15 	stw	r2,-132(fp)
 4003290:	e0bfdf17 	ldw	r2,-132(fp)
 4003294:	10800590 	cmplti	r2,r2,22
 4003298:	103fe61e 	bne	r2,zero,4003234 <__alt_data_end+0xfc003234>
		map[10 * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
	}
	for (int y = 1; y <= 3; ++y) {
 400329c:	00800044 	movi	r2,1
 40032a0:	e0bfe015 	stw	r2,-128(fp)
 40032a4:	00001506 	br	40032fc <test_map+0x364>
		map[y * PACMAN_MAP_WIDTH + 4] = get_sprite(WALL);
 40032a8:	01402804 	movi	r5,160
 40032ac:	e13fe017 	ldw	r4,-128(fp)
 40032b0:	4006cd00 	call	4006cd0 <__mulsi3>
 40032b4:	10800404 	addi	r2,r2,16
 40032b8:	e0fffe17 	ldw	r3,-8(fp)
 40032bc:	18a1883a 	add	r16,r3,r2
 40032c0:	0100c004 	movi	r4,768
 40032c4:	40025900 	call	4002590 <get_sprite>
 40032c8:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 35] = get_sprite(WALL);
 40032cc:	01402804 	movi	r5,160
 40032d0:	e13fe017 	ldw	r4,-128(fp)
 40032d4:	4006cd00 	call	4006cd0 <__mulsi3>
 40032d8:	10802304 	addi	r2,r2,140
 40032dc:	e0fffe17 	ldw	r3,-8(fp)
 40032e0:	18a1883a 	add	r16,r3,r2
 40032e4:	0100c004 	movi	r4,768
 40032e8:	40025900 	call	4002590 <get_sprite>
 40032ec:	80800015 	stw	r2,0(r16)
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
	for (int x = 18; x <= 21; ++x) {
		map[10 * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
	}
	for (int y = 1; y <= 3; ++y) {
 40032f0:	e0bfe017 	ldw	r2,-128(fp)
 40032f4:	10800044 	addi	r2,r2,1
 40032f8:	e0bfe015 	stw	r2,-128(fp)
 40032fc:	e0bfe017 	ldw	r2,-128(fp)
 4003300:	10800110 	cmplti	r2,r2,4
 4003304:	103fe81e 	bne	r2,zero,40032a8 <__alt_data_end+0xfc0032a8>
		map[y * PACMAN_MAP_WIDTH + 4] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 35] = get_sprite(WALL);
	}
	map[PACMAN_MAP_WIDTH + 14] = get_sprite(WALL);
 4003308:	e0bffe17 	ldw	r2,-8(fp)
 400330c:	14003604 	addi	r16,r2,216
 4003310:	0100c004 	movi	r4,768
 4003314:	40025900 	call	4002590 <get_sprite>
 4003318:	80800015 	stw	r2,0(r16)
	map[PACMAN_MAP_WIDTH + 25] = get_sprite(WALL);
 400331c:	e0bffe17 	ldw	r2,-8(fp)
 4003320:	14004104 	addi	r16,r2,260
 4003324:	0100c004 	movi	r4,768
 4003328:	40025900 	call	4002590 <get_sprite>
 400332c:	80800015 	stw	r2,0(r16)
	for (int x = 14; x <= 25; ++x)
 4003330:	00800384 	movi	r2,14
 4003334:	e0bfe115 	stw	r2,-124(fp)
 4003338:	00000d06 	br	4003370 <test_map+0x3d8>
		map[2 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 400333c:	e0bfe117 	ldw	r2,-124(fp)
 4003340:	10801404 	addi	r2,r2,80
 4003344:	1085883a 	add	r2,r2,r2
 4003348:	1085883a 	add	r2,r2,r2
 400334c:	1007883a 	mov	r3,r2
 4003350:	e0bffe17 	ldw	r2,-8(fp)
 4003354:	10e1883a 	add	r16,r2,r3
 4003358:	0100c004 	movi	r4,768
 400335c:	40025900 	call	4002590 <get_sprite>
 4003360:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 4] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 35] = get_sprite(WALL);
	}
	map[PACMAN_MAP_WIDTH + 14] = get_sprite(WALL);
	map[PACMAN_MAP_WIDTH + 25] = get_sprite(WALL);
	for (int x = 14; x <= 25; ++x)
 4003364:	e0bfe117 	ldw	r2,-124(fp)
 4003368:	10800044 	addi	r2,r2,1
 400336c:	e0bfe115 	stw	r2,-124(fp)
 4003370:	e0bfe117 	ldw	r2,-124(fp)
 4003374:	10800690 	cmplti	r2,r2,26
 4003378:	103ff01e 	bne	r2,zero,400333c <__alt_data_end+0xfc00333c>
		map[2 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 5; x <= 7; ++x)
 400337c:	00800144 	movi	r2,5
 4003380:	e0bfe215 	stw	r2,-120(fp)
 4003384:	00000d06 	br	40033bc <test_map+0x424>
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003388:	e0bfe217 	ldw	r2,-120(fp)
 400338c:	10801e04 	addi	r2,r2,120
 4003390:	1085883a 	add	r2,r2,r2
 4003394:	1085883a 	add	r2,r2,r2
 4003398:	1007883a 	mov	r3,r2
 400339c:	e0bffe17 	ldw	r2,-8(fp)
 40033a0:	10e1883a 	add	r16,r2,r3
 40033a4:	0100c004 	movi	r4,768
 40033a8:	40025900 	call	4002590 <get_sprite>
 40033ac:	80800015 	stw	r2,0(r16)
	}
	map[PACMAN_MAP_WIDTH + 14] = get_sprite(WALL);
	map[PACMAN_MAP_WIDTH + 25] = get_sprite(WALL);
	for (int x = 14; x <= 25; ++x)
		map[2 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 5; x <= 7; ++x)
 40033b0:	e0bfe217 	ldw	r2,-120(fp)
 40033b4:	10800044 	addi	r2,r2,1
 40033b8:	e0bfe215 	stw	r2,-120(fp)
 40033bc:	e0bfe217 	ldw	r2,-120(fp)
 40033c0:	10800210 	cmplti	r2,r2,8
 40033c4:	103ff01e 	bne	r2,zero,4003388 <__alt_data_end+0xfc003388>
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 11; x <= 17; ++x)
 40033c8:	008002c4 	movi	r2,11
 40033cc:	e0bfe315 	stw	r2,-116(fp)
 40033d0:	00000d06 	br	4003408 <test_map+0x470>
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 40033d4:	e0bfe317 	ldw	r2,-116(fp)
 40033d8:	10801e04 	addi	r2,r2,120
 40033dc:	1085883a 	add	r2,r2,r2
 40033e0:	1085883a 	add	r2,r2,r2
 40033e4:	1007883a 	mov	r3,r2
 40033e8:	e0bffe17 	ldw	r2,-8(fp)
 40033ec:	10e1883a 	add	r16,r2,r3
 40033f0:	0100c004 	movi	r4,768
 40033f4:	40025900 	call	4002590 <get_sprite>
 40033f8:	80800015 	stw	r2,0(r16)
	map[PACMAN_MAP_WIDTH + 25] = get_sprite(WALL);
	for (int x = 14; x <= 25; ++x)
		map[2 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 5; x <= 7; ++x)
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 11; x <= 17; ++x)
 40033fc:	e0bfe317 	ldw	r2,-116(fp)
 4003400:	10800044 	addi	r2,r2,1
 4003404:	e0bfe315 	stw	r2,-116(fp)
 4003408:	e0bfe317 	ldw	r2,-116(fp)
 400340c:	10800490 	cmplti	r2,r2,18
 4003410:	103ff01e 	bne	r2,zero,40033d4 <__alt_data_end+0xfc0033d4>
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 22; x <= 28; ++x)
 4003414:	00800584 	movi	r2,22
 4003418:	e0bfe415 	stw	r2,-112(fp)
 400341c:	00000d06 	br	4003454 <test_map+0x4bc>
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003420:	e0bfe417 	ldw	r2,-112(fp)
 4003424:	10801e04 	addi	r2,r2,120
 4003428:	1085883a 	add	r2,r2,r2
 400342c:	1085883a 	add	r2,r2,r2
 4003430:	1007883a 	mov	r3,r2
 4003434:	e0bffe17 	ldw	r2,-8(fp)
 4003438:	10e1883a 	add	r16,r2,r3
 400343c:	0100c004 	movi	r4,768
 4003440:	40025900 	call	4002590 <get_sprite>
 4003444:	80800015 	stw	r2,0(r16)
		map[2 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 5; x <= 7; ++x)
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 11; x <= 17; ++x)
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 22; x <= 28; ++x)
 4003448:	e0bfe417 	ldw	r2,-112(fp)
 400344c:	10800044 	addi	r2,r2,1
 4003450:	e0bfe415 	stw	r2,-112(fp)
 4003454:	e0bfe417 	ldw	r2,-112(fp)
 4003458:	10800750 	cmplti	r2,r2,29
 400345c:	103ff01e 	bne	r2,zero,4003420 <__alt_data_end+0xfc003420>
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 32; x <= 34; ++x)
 4003460:	00800804 	movi	r2,32
 4003464:	e0bfe515 	stw	r2,-108(fp)
 4003468:	00000d06 	br	40034a0 <test_map+0x508>
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 400346c:	e0bfe517 	ldw	r2,-108(fp)
 4003470:	10801e04 	addi	r2,r2,120
 4003474:	1085883a 	add	r2,r2,r2
 4003478:	1085883a 	add	r2,r2,r2
 400347c:	1007883a 	mov	r3,r2
 4003480:	e0bffe17 	ldw	r2,-8(fp)
 4003484:	10e1883a 	add	r16,r2,r3
 4003488:	0100c004 	movi	r4,768
 400348c:	40025900 	call	4002590 <get_sprite>
 4003490:	80800015 	stw	r2,0(r16)
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 11; x <= 17; ++x)
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 22; x <= 28; ++x)
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 32; x <= 34; ++x)
 4003494:	e0bfe517 	ldw	r2,-108(fp)
 4003498:	10800044 	addi	r2,r2,1
 400349c:	e0bfe515 	stw	r2,-108(fp)
 40034a0:	e0bfe517 	ldw	r2,-108(fp)
 40034a4:	108008d0 	cmplti	r2,r2,35
 40034a8:	103ff01e 	bne	r2,zero,400346c <__alt_data_end+0xfc00346c>
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 8; ++x)
 40034ac:	00800104 	movi	r2,4
 40034b0:	e0bfe615 	stw	r2,-104(fp)
 40034b4:	00000d06 	br	40034ec <test_map+0x554>
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 40034b8:	e0bfe617 	ldw	r2,-104(fp)
 40034bc:	10803c04 	addi	r2,r2,240
 40034c0:	1085883a 	add	r2,r2,r2
 40034c4:	1085883a 	add	r2,r2,r2
 40034c8:	1007883a 	mov	r3,r2
 40034cc:	e0bffe17 	ldw	r2,-8(fp)
 40034d0:	10e1883a 	add	r16,r2,r3
 40034d4:	0100c004 	movi	r4,768
 40034d8:	40025900 	call	4002590 <get_sprite>
 40034dc:	80800015 	stw	r2,0(r16)
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 22; x <= 28; ++x)
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 32; x <= 34; ++x)
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 8; ++x)
 40034e0:	e0bfe617 	ldw	r2,-104(fp)
 40034e4:	10800044 	addi	r2,r2,1
 40034e8:	e0bfe615 	stw	r2,-104(fp)
 40034ec:	e0bfe617 	ldw	r2,-104(fp)
 40034f0:	10800250 	cmplti	r2,r2,9
 40034f4:	103ff01e 	bne	r2,zero,40034b8 <__alt_data_end+0xfc0034b8>
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 14; x <= 25; ++x)
 40034f8:	00800384 	movi	r2,14
 40034fc:	e0bfe715 	stw	r2,-100(fp)
 4003500:	00000d06 	br	4003538 <test_map+0x5a0>
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003504:	e0bfe717 	ldw	r2,-100(fp)
 4003508:	10803c04 	addi	r2,r2,240
 400350c:	1085883a 	add	r2,r2,r2
 4003510:	1085883a 	add	r2,r2,r2
 4003514:	1007883a 	mov	r3,r2
 4003518:	e0bffe17 	ldw	r2,-8(fp)
 400351c:	10e1883a 	add	r16,r2,r3
 4003520:	0100c004 	movi	r4,768
 4003524:	40025900 	call	4002590 <get_sprite>
 4003528:	80800015 	stw	r2,0(r16)
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 32; x <= 34; ++x)
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 8; ++x)
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 14; x <= 25; ++x)
 400352c:	e0bfe717 	ldw	r2,-100(fp)
 4003530:	10800044 	addi	r2,r2,1
 4003534:	e0bfe715 	stw	r2,-100(fp)
 4003538:	e0bfe717 	ldw	r2,-100(fp)
 400353c:	10800690 	cmplti	r2,r2,26
 4003540:	103ff01e 	bne	r2,zero,4003504 <__alt_data_end+0xfc003504>
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 31; x <= 35; ++x)
 4003544:	008007c4 	movi	r2,31
 4003548:	e0bfe815 	stw	r2,-96(fp)
 400354c:	00000d06 	br	4003584 <test_map+0x5ec>
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003550:	e0bfe817 	ldw	r2,-96(fp)
 4003554:	10803c04 	addi	r2,r2,240
 4003558:	1085883a 	add	r2,r2,r2
 400355c:	1085883a 	add	r2,r2,r2
 4003560:	1007883a 	mov	r3,r2
 4003564:	e0bffe17 	ldw	r2,-8(fp)
 4003568:	10e1883a 	add	r16,r2,r3
 400356c:	0100c004 	movi	r4,768
 4003570:	40025900 	call	4002590 <get_sprite>
 4003574:	80800015 	stw	r2,0(r16)
		map[3 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 8; ++x)
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 14; x <= 25; ++x)
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 31; x <= 35; ++x)
 4003578:	e0bfe817 	ldw	r2,-96(fp)
 400357c:	10800044 	addi	r2,r2,1
 4003580:	e0bfe815 	stw	r2,-96(fp)
 4003584:	e0bfe817 	ldw	r2,-96(fp)
 4003588:	10800910 	cmplti	r2,r2,36
 400358c:	103ff01e 	bne	r2,zero,4003550 <__alt_data_end+0xfc003550>
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 6; ++x)
 4003590:	00800104 	movi	r2,4
 4003594:	e0bfe915 	stw	r2,-92(fp)
 4003598:	00000d06 	br	40035d0 <test_map+0x638>
		map[7 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 400359c:	e0bfe917 	ldw	r2,-92(fp)
 40035a0:	10804604 	addi	r2,r2,280
 40035a4:	1085883a 	add	r2,r2,r2
 40035a8:	1085883a 	add	r2,r2,r2
 40035ac:	1007883a 	mov	r3,r2
 40035b0:	e0bffe17 	ldw	r2,-8(fp)
 40035b4:	10e1883a 	add	r16,r2,r3
 40035b8:	0100c004 	movi	r4,768
 40035bc:	40025900 	call	4002590 <get_sprite>
 40035c0:	80800015 	stw	r2,0(r16)
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 14; x <= 25; ++x)
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 31; x <= 35; ++x)
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 6; ++x)
 40035c4:	e0bfe917 	ldw	r2,-92(fp)
 40035c8:	10800044 	addi	r2,r2,1
 40035cc:	e0bfe915 	stw	r2,-92(fp)
 40035d0:	e0bfe917 	ldw	r2,-92(fp)
 40035d4:	108001d0 	cmplti	r2,r2,7
 40035d8:	103ff01e 	bne	r2,zero,400359c <__alt_data_end+0xfc00359c>
		map[7 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 33; x <= 35; ++x)
 40035dc:	00800844 	movi	r2,33
 40035e0:	e0bfea15 	stw	r2,-88(fp)
 40035e4:	00000d06 	br	400361c <test_map+0x684>
		map[7 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 40035e8:	e0bfea17 	ldw	r2,-88(fp)
 40035ec:	10804604 	addi	r2,r2,280
 40035f0:	1085883a 	add	r2,r2,r2
 40035f4:	1085883a 	add	r2,r2,r2
 40035f8:	1007883a 	mov	r3,r2
 40035fc:	e0bffe17 	ldw	r2,-8(fp)
 4003600:	10e1883a 	add	r16,r2,r3
 4003604:	0100c004 	movi	r4,768
 4003608:	40025900 	call	4002590 <get_sprite>
 400360c:	80800015 	stw	r2,0(r16)
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 31; x <= 35; ++x)
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 6; ++x)
		map[7 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 33; x <= 35; ++x)
 4003610:	e0bfea17 	ldw	r2,-88(fp)
 4003614:	10800044 	addi	r2,r2,1
 4003618:	e0bfea15 	stw	r2,-88(fp)
 400361c:	e0bfea17 	ldw	r2,-88(fp)
 4003620:	10800910 	cmplti	r2,r2,36
 4003624:	103ff01e 	bne	r2,zero,40035e8 <__alt_data_end+0xfc0035e8>
		map[7 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 5; ++x)
 4003628:	00800104 	movi	r2,4
 400362c:	e0bfeb15 	stw	r2,-84(fp)
 4003630:	00000d06 	br	4003668 <test_map+0x6d0>
		map[8 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003634:	e0bfeb17 	ldw	r2,-84(fp)
 4003638:	10805004 	addi	r2,r2,320
 400363c:	1085883a 	add	r2,r2,r2
 4003640:	1085883a 	add	r2,r2,r2
 4003644:	1007883a 	mov	r3,r2
 4003648:	e0bffe17 	ldw	r2,-8(fp)
 400364c:	10e1883a 	add	r16,r2,r3
 4003650:	0100c004 	movi	r4,768
 4003654:	40025900 	call	4002590 <get_sprite>
 4003658:	80800015 	stw	r2,0(r16)
		map[6 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 6; ++x)
		map[7 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 33; x <= 35; ++x)
		map[7 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 5; ++x)
 400365c:	e0bfeb17 	ldw	r2,-84(fp)
 4003660:	10800044 	addi	r2,r2,1
 4003664:	e0bfeb15 	stw	r2,-84(fp)
 4003668:	e0bfeb17 	ldw	r2,-84(fp)
 400366c:	10800190 	cmplti	r2,r2,6
 4003670:	103ff01e 	bne	r2,zero,4003634 <__alt_data_end+0xfc003634>
		map[8 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 34; x <= 35; ++x)
 4003674:	00800884 	movi	r2,34
 4003678:	e0bfec15 	stw	r2,-80(fp)
 400367c:	00000d06 	br	40036b4 <test_map+0x71c>
		map[8 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003680:	e0bfec17 	ldw	r2,-80(fp)
 4003684:	10805004 	addi	r2,r2,320
 4003688:	1085883a 	add	r2,r2,r2
 400368c:	1085883a 	add	r2,r2,r2
 4003690:	1007883a 	mov	r3,r2
 4003694:	e0bffe17 	ldw	r2,-8(fp)
 4003698:	10e1883a 	add	r16,r2,r3
 400369c:	0100c004 	movi	r4,768
 40036a0:	40025900 	call	4002590 <get_sprite>
 40036a4:	80800015 	stw	r2,0(r16)
		map[7 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 33; x <= 35; ++x)
		map[7 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 5; ++x)
		map[8 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 34; x <= 35; ++x)
 40036a8:	e0bfec17 	ldw	r2,-80(fp)
 40036ac:	10800044 	addi	r2,r2,1
 40036b0:	e0bfec15 	stw	r2,-80(fp)
 40036b4:	e0bfec17 	ldw	r2,-80(fp)
 40036b8:	10800910 	cmplti	r2,r2,36
 40036bc:	103ff01e 	bne	r2,zero,4003680 <__alt_data_end+0xfc003680>
		map[8 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int y = 9; y <= 10; ++y) {
 40036c0:	00800244 	movi	r2,9
 40036c4:	e0bfed15 	stw	r2,-76(fp)
 40036c8:	00001506 	br	4003720 <test_map+0x788>
		map[y * PACMAN_MAP_WIDTH + 4] = get_sprite(WALL);
 40036cc:	01402804 	movi	r5,160
 40036d0:	e13fed17 	ldw	r4,-76(fp)
 40036d4:	4006cd00 	call	4006cd0 <__mulsi3>
 40036d8:	10800404 	addi	r2,r2,16
 40036dc:	e0fffe17 	ldw	r3,-8(fp)
 40036e0:	18a1883a 	add	r16,r3,r2
 40036e4:	0100c004 	movi	r4,768
 40036e8:	40025900 	call	4002590 <get_sprite>
 40036ec:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 35] = get_sprite(WALL);
 40036f0:	01402804 	movi	r5,160
 40036f4:	e13fed17 	ldw	r4,-76(fp)
 40036f8:	4006cd00 	call	4006cd0 <__mulsi3>
 40036fc:	10802304 	addi	r2,r2,140
 4003700:	e0fffe17 	ldw	r3,-8(fp)
 4003704:	18a1883a 	add	r16,r3,r2
 4003708:	0100c004 	movi	r4,768
 400370c:	40025900 	call	4002590 <get_sprite>
 4003710:	80800015 	stw	r2,0(r16)
		map[7 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 5; ++x)
		map[8 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 34; x <= 35; ++x)
		map[8 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int y = 9; y <= 10; ++y) {
 4003714:	e0bfed17 	ldw	r2,-76(fp)
 4003718:	10800044 	addi	r2,r2,1
 400371c:	e0bfed15 	stw	r2,-76(fp)
 4003720:	e0bfed17 	ldw	r2,-76(fp)
 4003724:	108002d0 	cmplti	r2,r2,11
 4003728:	103fe81e 	bne	r2,zero,40036cc <__alt_data_end+0xfc0036cc>
		map[y * PACMAN_MAP_WIDTH + 4] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 35] = get_sprite(WALL);
	}
	for (int y = 11; y <= 16; ++y) {
 400372c:	008002c4 	movi	r2,11
 4003730:	e0bfee15 	stw	r2,-72(fp)
 4003734:	00001506 	br	400378c <test_map+0x7f4>
		map[y * PACMAN_MAP_WIDTH + 9] = get_sprite(WALL);
 4003738:	01402804 	movi	r5,160
 400373c:	e13fee17 	ldw	r4,-72(fp)
 4003740:	4006cd00 	call	4006cd0 <__mulsi3>
 4003744:	10800904 	addi	r2,r2,36
 4003748:	e0fffe17 	ldw	r3,-8(fp)
 400374c:	18a1883a 	add	r16,r3,r2
 4003750:	0100c004 	movi	r4,768
 4003754:	40025900 	call	4002590 <get_sprite>
 4003758:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 30] = get_sprite(WALL);
 400375c:	01402804 	movi	r5,160
 4003760:	e13fee17 	ldw	r4,-72(fp)
 4003764:	4006cd00 	call	4006cd0 <__mulsi3>
 4003768:	10801e04 	addi	r2,r2,120
 400376c:	e0fffe17 	ldw	r3,-8(fp)
 4003770:	18a1883a 	add	r16,r3,r2
 4003774:	0100c004 	movi	r4,768
 4003778:	40025900 	call	4002590 <get_sprite>
 400377c:	80800015 	stw	r2,0(r16)
		map[8 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int y = 9; y <= 10; ++y) {
		map[y * PACMAN_MAP_WIDTH + 4] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 35] = get_sprite(WALL);
	}
	for (int y = 11; y <= 16; ++y) {
 4003780:	e0bfee17 	ldw	r2,-72(fp)
 4003784:	10800044 	addi	r2,r2,1
 4003788:	e0bfee15 	stw	r2,-72(fp)
 400378c:	e0bfee17 	ldw	r2,-72(fp)
 4003790:	10800450 	cmplti	r2,r2,17
 4003794:	103fe81e 	bne	r2,zero,4003738 <__alt_data_end+0xfc003738>
		map[y * PACMAN_MAP_WIDTH + 9] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 30] = get_sprite(WALL);
	}
	for (int y = 11; y <= 15; ++y) {
 4003798:	008002c4 	movi	r2,11
 400379c:	e0bfef15 	stw	r2,-68(fp)
 40037a0:	00001506 	br	40037f8 <test_map+0x860>
		map[y * PACMAN_MAP_WIDTH + 12] = get_sprite(WALL);
 40037a4:	01402804 	movi	r5,160
 40037a8:	e13fef17 	ldw	r4,-68(fp)
 40037ac:	4006cd00 	call	4006cd0 <__mulsi3>
 40037b0:	10800c04 	addi	r2,r2,48
 40037b4:	e0fffe17 	ldw	r3,-8(fp)
 40037b8:	18a1883a 	add	r16,r3,r2
 40037bc:	0100c004 	movi	r4,768
 40037c0:	40025900 	call	4002590 <get_sprite>
 40037c4:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 27] = get_sprite(WALL);
 40037c8:	01402804 	movi	r5,160
 40037cc:	e13fef17 	ldw	r4,-68(fp)
 40037d0:	4006cd00 	call	4006cd0 <__mulsi3>
 40037d4:	10801b04 	addi	r2,r2,108
 40037d8:	e0fffe17 	ldw	r3,-8(fp)
 40037dc:	18a1883a 	add	r16,r3,r2
 40037e0:	0100c004 	movi	r4,768
 40037e4:	40025900 	call	4002590 <get_sprite>
 40037e8:	80800015 	stw	r2,0(r16)
	}
	for (int y = 11; y <= 16; ++y) {
		map[y * PACMAN_MAP_WIDTH + 9] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 30] = get_sprite(WALL);
	}
	for (int y = 11; y <= 15; ++y) {
 40037ec:	e0bfef17 	ldw	r2,-68(fp)
 40037f0:	10800044 	addi	r2,r2,1
 40037f4:	e0bfef15 	stw	r2,-68(fp)
 40037f8:	e0bfef17 	ldw	r2,-68(fp)
 40037fc:	10800410 	cmplti	r2,r2,16
 4003800:	103fe81e 	bne	r2,zero,40037a4 <__alt_data_end+0xfc0037a4>
		map[y * PACMAN_MAP_WIDTH + 12] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 27] = get_sprite(WALL);
	}
	for (int y = 13; y <= 15; ++y) {
 4003804:	00800344 	movi	r2,13
 4003808:	e0bff015 	stw	r2,-64(fp)
 400380c:	00002706 	br	40038ac <test_map+0x914>
		map[y * PACMAN_MAP_WIDTH + 11] = get_sprite(WALL);
 4003810:	01402804 	movi	r5,160
 4003814:	e13ff017 	ldw	r4,-64(fp)
 4003818:	4006cd00 	call	4006cd0 <__mulsi3>
 400381c:	10800b04 	addi	r2,r2,44
 4003820:	e0fffe17 	ldw	r3,-8(fp)
 4003824:	18a1883a 	add	r16,r3,r2
 4003828:	0100c004 	movi	r4,768
 400382c:	40025900 	call	4002590 <get_sprite>
 4003830:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 13] = get_sprite(WALL);
 4003834:	01402804 	movi	r5,160
 4003838:	e13ff017 	ldw	r4,-64(fp)
 400383c:	4006cd00 	call	4006cd0 <__mulsi3>
 4003840:	10800d04 	addi	r2,r2,52
 4003844:	e0fffe17 	ldw	r3,-8(fp)
 4003848:	18a1883a 	add	r16,r3,r2
 400384c:	0100c004 	movi	r4,768
 4003850:	40025900 	call	4002590 <get_sprite>
 4003854:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 26] = get_sprite(WALL);
 4003858:	01402804 	movi	r5,160
 400385c:	e13ff017 	ldw	r4,-64(fp)
 4003860:	4006cd00 	call	4006cd0 <__mulsi3>
 4003864:	10801a04 	addi	r2,r2,104
 4003868:	e0fffe17 	ldw	r3,-8(fp)
 400386c:	18a1883a 	add	r16,r3,r2
 4003870:	0100c004 	movi	r4,768
 4003874:	40025900 	call	4002590 <get_sprite>
 4003878:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 28] = get_sprite(WALL);
 400387c:	01402804 	movi	r5,160
 4003880:	e13ff017 	ldw	r4,-64(fp)
 4003884:	4006cd00 	call	4006cd0 <__mulsi3>
 4003888:	10801c04 	addi	r2,r2,112
 400388c:	e0fffe17 	ldw	r3,-8(fp)
 4003890:	18a1883a 	add	r16,r3,r2
 4003894:	0100c004 	movi	r4,768
 4003898:	40025900 	call	4002590 <get_sprite>
 400389c:	80800015 	stw	r2,0(r16)
	}
	for (int y = 11; y <= 15; ++y) {
		map[y * PACMAN_MAP_WIDTH + 12] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 27] = get_sprite(WALL);
	}
	for (int y = 13; y <= 15; ++y) {
 40038a0:	e0bff017 	ldw	r2,-64(fp)
 40038a4:	10800044 	addi	r2,r2,1
 40038a8:	e0bff015 	stw	r2,-64(fp)
 40038ac:	e0bff017 	ldw	r2,-64(fp)
 40038b0:	10800410 	cmplti	r2,r2,16
 40038b4:	103fd61e 	bne	r2,zero,4003810 <__alt_data_end+0xfc003810>
		map[y * PACMAN_MAP_WIDTH + 11] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 13] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 26] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 28] = get_sprite(WALL);
	}
	map[14 * PACMAN_MAP_WIDTH + 12] = get_sprite(BACKGROUND);
 40038b8:	e0bffe17 	ldw	r2,-8(fp)
 40038bc:	14023c04 	addi	r16,r2,2288
 40038c0:	013fffc4 	movi	r4,-1
 40038c4:	40025900 	call	4002590 <get_sprite>
 40038c8:	80800015 	stw	r2,0(r16)
	map[14 * PACMAN_MAP_WIDTH + 27] = get_sprite(BACKGROUND);
 40038cc:	e0bffe17 	ldw	r2,-8(fp)
 40038d0:	14024b04 	addi	r16,r2,2348
 40038d4:	013fffc4 	movi	r4,-1
 40038d8:	40025900 	call	4002590 <get_sprite>
 40038dc:	80800015 	stw	r2,0(r16)
	for (int x = 10; x <= 11; ++x) 
 40038e0:	00800284 	movi	r2,10
 40038e4:	e0bff115 	stw	r2,-60(fp)
 40038e8:	00000d06 	br	4003920 <test_map+0x988>
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 40038ec:	e0bff117 	ldw	r2,-60(fp)
 40038f0:	10806e04 	addi	r2,r2,440
 40038f4:	1085883a 	add	r2,r2,r2
 40038f8:	1085883a 	add	r2,r2,r2
 40038fc:	1007883a 	mov	r3,r2
 4003900:	e0bffe17 	ldw	r2,-8(fp)
 4003904:	10e1883a 	add	r16,r2,r3
 4003908:	0100c004 	movi	r4,768
 400390c:	40025900 	call	4002590 <get_sprite>
 4003910:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 26] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 28] = get_sprite(WALL);
	}
	map[14 * PACMAN_MAP_WIDTH + 12] = get_sprite(BACKGROUND);
	map[14 * PACMAN_MAP_WIDTH + 27] = get_sprite(BACKGROUND);
	for (int x = 10; x <= 11; ++x) 
 4003914:	e0bff117 	ldw	r2,-60(fp)
 4003918:	10800044 	addi	r2,r2,1
 400391c:	e0bff115 	stw	r2,-60(fp)
 4003920:	e0bff117 	ldw	r2,-60(fp)
 4003924:	10800310 	cmplti	r2,r2,12
 4003928:	103ff01e 	bne	r2,zero,40038ec <__alt_data_end+0xfc0038ec>
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 28; x <= 29; ++x) 
 400392c:	00800704 	movi	r2,28
 4003930:	e0bff215 	stw	r2,-56(fp)
 4003934:	00000d06 	br	400396c <test_map+0x9d4>
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003938:	e0bff217 	ldw	r2,-56(fp)
 400393c:	10806e04 	addi	r2,r2,440
 4003940:	1085883a 	add	r2,r2,r2
 4003944:	1085883a 	add	r2,r2,r2
 4003948:	1007883a 	mov	r3,r2
 400394c:	e0bffe17 	ldw	r2,-8(fp)
 4003950:	10e1883a 	add	r16,r2,r3
 4003954:	0100c004 	movi	r4,768
 4003958:	40025900 	call	4002590 <get_sprite>
 400395c:	80800015 	stw	r2,0(r16)
	}
	map[14 * PACMAN_MAP_WIDTH + 12] = get_sprite(BACKGROUND);
	map[14 * PACMAN_MAP_WIDTH + 27] = get_sprite(BACKGROUND);
	for (int x = 10; x <= 11; ++x) 
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 28; x <= 29; ++x) 
 4003960:	e0bff217 	ldw	r2,-56(fp)
 4003964:	10800044 	addi	r2,r2,1
 4003968:	e0bff215 	stw	r2,-56(fp)
 400396c:	e0bff217 	ldw	r2,-56(fp)
 4003970:	10800790 	cmplti	r2,r2,30
 4003974:	103ff01e 	bne	r2,zero,4003938 <__alt_data_end+0xfc003938>
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 8; ++x) 
 4003978:	00800104 	movi	r2,4
 400397c:	e0bff315 	stw	r2,-52(fp)
 4003980:	00000d06 	br	40039b8 <test_map+0xa20>
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003984:	e0bff317 	ldw	r2,-52(fp)
 4003988:	1080a004 	addi	r2,r2,640
 400398c:	1085883a 	add	r2,r2,r2
 4003990:	1085883a 	add	r2,r2,r2
 4003994:	1007883a 	mov	r3,r2
 4003998:	e0bffe17 	ldw	r2,-8(fp)
 400399c:	10e1883a 	add	r16,r2,r3
 40039a0:	0100c004 	movi	r4,768
 40039a4:	40025900 	call	4002590 <get_sprite>
 40039a8:	80800015 	stw	r2,0(r16)
	map[14 * PACMAN_MAP_WIDTH + 27] = get_sprite(BACKGROUND);
	for (int x = 10; x <= 11; ++x) 
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 28; x <= 29; ++x) 
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 8; ++x) 
 40039ac:	e0bff317 	ldw	r2,-52(fp)
 40039b0:	10800044 	addi	r2,r2,1
 40039b4:	e0bff315 	stw	r2,-52(fp)
 40039b8:	e0bff317 	ldw	r2,-52(fp)
 40039bc:	10800250 	cmplti	r2,r2,9
 40039c0:	103ff01e 	bne	r2,zero,4003984 <__alt_data_end+0xfc003984>
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 31; x <= 35; ++x) 
 40039c4:	008007c4 	movi	r2,31
 40039c8:	e0bff415 	stw	r2,-48(fp)
 40039cc:	00000d06 	br	4003a04 <test_map+0xa6c>
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 40039d0:	e0bff417 	ldw	r2,-48(fp)
 40039d4:	1080a004 	addi	r2,r2,640
 40039d8:	1085883a 	add	r2,r2,r2
 40039dc:	1085883a 	add	r2,r2,r2
 40039e0:	1007883a 	mov	r3,r2
 40039e4:	e0bffe17 	ldw	r2,-8(fp)
 40039e8:	10e1883a 	add	r16,r2,r3
 40039ec:	0100c004 	movi	r4,768
 40039f0:	40025900 	call	4002590 <get_sprite>
 40039f4:	80800015 	stw	r2,0(r16)
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 28; x <= 29; ++x) 
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 8; ++x) 
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 31; x <= 35; ++x) 
 40039f8:	e0bff417 	ldw	r2,-48(fp)
 40039fc:	10800044 	addi	r2,r2,1
 4003a00:	e0bff415 	stw	r2,-48(fp)
 4003a04:	e0bff417 	ldw	r2,-48(fp)
 4003a08:	10800910 	cmplti	r2,r2,36
 4003a0c:	103ff01e 	bne	r2,zero,40039d0 <__alt_data_end+0xfc0039d0>
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 12; x <= 14; ++x) 
 4003a10:	00800304 	movi	r2,12
 4003a14:	e0bff515 	stw	r2,-44(fp)
 4003a18:	00000d06 	br	4003a50 <test_map+0xab8>
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003a1c:	e0bff517 	ldw	r2,-44(fp)
 4003a20:	1080a004 	addi	r2,r2,640
 4003a24:	1085883a 	add	r2,r2,r2
 4003a28:	1085883a 	add	r2,r2,r2
 4003a2c:	1007883a 	mov	r3,r2
 4003a30:	e0bffe17 	ldw	r2,-8(fp)
 4003a34:	10e1883a 	add	r16,r2,r3
 4003a38:	0100c004 	movi	r4,768
 4003a3c:	40025900 	call	4002590 <get_sprite>
 4003a40:	80800015 	stw	r2,0(r16)
		map[11 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 4; x <= 8; ++x) 
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 31; x <= 35; ++x) 
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 12; x <= 14; ++x) 
 4003a44:	e0bff517 	ldw	r2,-44(fp)
 4003a48:	10800044 	addi	r2,r2,1
 4003a4c:	e0bff515 	stw	r2,-44(fp)
 4003a50:	e0bff517 	ldw	r2,-44(fp)
 4003a54:	108003d0 	cmplti	r2,r2,15
 4003a58:	103ff01e 	bne	r2,zero,4003a1c <__alt_data_end+0xfc003a1c>
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 25; x <= 27; ++x) 
 4003a5c:	00800644 	movi	r2,25
 4003a60:	e0bff615 	stw	r2,-40(fp)
 4003a64:	00000d06 	br	4003a9c <test_map+0xb04>
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003a68:	e0bff617 	ldw	r2,-40(fp)
 4003a6c:	1080a004 	addi	r2,r2,640
 4003a70:	1085883a 	add	r2,r2,r2
 4003a74:	1085883a 	add	r2,r2,r2
 4003a78:	1007883a 	mov	r3,r2
 4003a7c:	e0bffe17 	ldw	r2,-8(fp)
 4003a80:	10e1883a 	add	r16,r2,r3
 4003a84:	0100c004 	movi	r4,768
 4003a88:	40025900 	call	4002590 <get_sprite>
 4003a8c:	80800015 	stw	r2,0(r16)
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 31; x <= 35; ++x) 
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 12; x <= 14; ++x) 
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 25; x <= 27; ++x) 
 4003a90:	e0bff617 	ldw	r2,-40(fp)
 4003a94:	10800044 	addi	r2,r2,1
 4003a98:	e0bff615 	stw	r2,-40(fp)
 4003a9c:	e0bff617 	ldw	r2,-40(fp)
 4003aa0:	10800710 	cmplti	r2,r2,28
 4003aa4:	103ff01e 	bne	r2,zero,4003a68 <__alt_data_end+0xfc003a68>
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int y = 17; y <= 18; ++y) {
 4003aa8:	00800444 	movi	r2,17
 4003aac:	e0bff715 	stw	r2,-36(fp)
 4003ab0:	00001506 	br	4003b08 <test_map+0xb70>
		map[y * PACMAN_MAP_WIDTH + 15] = get_sprite(WALL);
 4003ab4:	01402804 	movi	r5,160
 4003ab8:	e13ff717 	ldw	r4,-36(fp)
 4003abc:	4006cd00 	call	4006cd0 <__mulsi3>
 4003ac0:	10800f04 	addi	r2,r2,60
 4003ac4:	e0fffe17 	ldw	r3,-8(fp)
 4003ac8:	18a1883a 	add	r16,r3,r2
 4003acc:	0100c004 	movi	r4,768
 4003ad0:	40025900 	call	4002590 <get_sprite>
 4003ad4:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 24] = get_sprite(WALL);
 4003ad8:	01402804 	movi	r5,160
 4003adc:	e13ff717 	ldw	r4,-36(fp)
 4003ae0:	4006cd00 	call	4006cd0 <__mulsi3>
 4003ae4:	10801804 	addi	r2,r2,96
 4003ae8:	e0fffe17 	ldw	r3,-8(fp)
 4003aec:	18a1883a 	add	r16,r3,r2
 4003af0:	0100c004 	movi	r4,768
 4003af4:	40025900 	call	4002590 <get_sprite>
 4003af8:	80800015 	stw	r2,0(r16)
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 12; x <= 14; ++x) 
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 25; x <= 27; ++x) 
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int y = 17; y <= 18; ++y) {
 4003afc:	e0bff717 	ldw	r2,-36(fp)
 4003b00:	10800044 	addi	r2,r2,1
 4003b04:	e0bff715 	stw	r2,-36(fp)
 4003b08:	e0bff717 	ldw	r2,-36(fp)
 4003b0c:	108004d0 	cmplti	r2,r2,19
 4003b10:	103fe81e 	bne	r2,zero,4003ab4 <__alt_data_end+0xfc003ab4>
		map[y * PACMAN_MAP_WIDTH + 15] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 24] = get_sprite(WALL);
	}
	for (int x = 3; x <= 7; ++x) 
 4003b14:	008000c4 	movi	r2,3
 4003b18:	e0bff815 	stw	r2,-32(fp)
 4003b1c:	00000d06 	br	4003b54 <test_map+0xbbc>
		map[21 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003b20:	e0bff817 	ldw	r2,-32(fp)
 4003b24:	1080d204 	addi	r2,r2,840
 4003b28:	1085883a 	add	r2,r2,r2
 4003b2c:	1085883a 	add	r2,r2,r2
 4003b30:	1007883a 	mov	r3,r2
 4003b34:	e0bffe17 	ldw	r2,-8(fp)
 4003b38:	10e1883a 	add	r16,r2,r3
 4003b3c:	0100c004 	movi	r4,768
 4003b40:	40025900 	call	4002590 <get_sprite>
 4003b44:	80800015 	stw	r2,0(r16)
		map[16 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int y = 17; y <= 18; ++y) {
		map[y * PACMAN_MAP_WIDTH + 15] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 24] = get_sprite(WALL);
	}
	for (int x = 3; x <= 7; ++x) 
 4003b48:	e0bff817 	ldw	r2,-32(fp)
 4003b4c:	10800044 	addi	r2,r2,1
 4003b50:	e0bff815 	stw	r2,-32(fp)
 4003b54:	e0bff817 	ldw	r2,-32(fp)
 4003b58:	10800210 	cmplti	r2,r2,8
 4003b5c:	103ff01e 	bne	r2,zero,4003b20 <__alt_data_end+0xfc003b20>
		map[21 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 32; x <= 36; ++x) 
 4003b60:	00800804 	movi	r2,32
 4003b64:	e0bff915 	stw	r2,-28(fp)
 4003b68:	00000d06 	br	4003ba0 <test_map+0xc08>
		map[21 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003b6c:	e0bff917 	ldw	r2,-28(fp)
 4003b70:	1080d204 	addi	r2,r2,840
 4003b74:	1085883a 	add	r2,r2,r2
 4003b78:	1085883a 	add	r2,r2,r2
 4003b7c:	1007883a 	mov	r3,r2
 4003b80:	e0bffe17 	ldw	r2,-8(fp)
 4003b84:	10e1883a 	add	r16,r2,r3
 4003b88:	0100c004 	movi	r4,768
 4003b8c:	40025900 	call	4002590 <get_sprite>
 4003b90:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 15] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 24] = get_sprite(WALL);
	}
	for (int x = 3; x <= 7; ++x) 
		map[21 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 32; x <= 36; ++x) 
 4003b94:	e0bff917 	ldw	r2,-28(fp)
 4003b98:	10800044 	addi	r2,r2,1
 4003b9c:	e0bff915 	stw	r2,-28(fp)
 4003ba0:	e0bff917 	ldw	r2,-28(fp)
 4003ba4:	10800950 	cmplti	r2,r2,37
 4003ba8:	103ff01e 	bne	r2,zero,4003b6c <__alt_data_end+0xfc003b6c>
		map[21 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int y = 19; y <= 25; ++y) {
 4003bac:	008004c4 	movi	r2,19
 4003bb0:	e0bffa15 	stw	r2,-24(fp)
 4003bb4:	00001506 	br	4003c0c <test_map+0xc74>
		map[y * PACMAN_MAP_WIDTH + 8] = get_sprite(WALL);
 4003bb8:	01402804 	movi	r5,160
 4003bbc:	e13ffa17 	ldw	r4,-24(fp)
 4003bc0:	4006cd00 	call	4006cd0 <__mulsi3>
 4003bc4:	10800804 	addi	r2,r2,32
 4003bc8:	e0fffe17 	ldw	r3,-8(fp)
 4003bcc:	18a1883a 	add	r16,r3,r2
 4003bd0:	0100c004 	movi	r4,768
 4003bd4:	40025900 	call	4002590 <get_sprite>
 4003bd8:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 31] = get_sprite(WALL);
 4003bdc:	01402804 	movi	r5,160
 4003be0:	e13ffa17 	ldw	r4,-24(fp)
 4003be4:	4006cd00 	call	4006cd0 <__mulsi3>
 4003be8:	10801f04 	addi	r2,r2,124
 4003bec:	e0fffe17 	ldw	r3,-8(fp)
 4003bf0:	18a1883a 	add	r16,r3,r2
 4003bf4:	0100c004 	movi	r4,768
 4003bf8:	40025900 	call	4002590 <get_sprite>
 4003bfc:	80800015 	stw	r2,0(r16)
	}
	for (int x = 3; x <= 7; ++x) 
		map[21 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int x = 32; x <= 36; ++x) 
		map[21 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int y = 19; y <= 25; ++y) {
 4003c00:	e0bffa17 	ldw	r2,-24(fp)
 4003c04:	10800044 	addi	r2,r2,1
 4003c08:	e0bffa15 	stw	r2,-24(fp)
 4003c0c:	e0bffa17 	ldw	r2,-24(fp)
 4003c10:	10800690 	cmplti	r2,r2,26
 4003c14:	103fe81e 	bne	r2,zero,4003bb8 <__alt_data_end+0xfc003bb8>
		map[y * PACMAN_MAP_WIDTH + 8] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 31] = get_sprite(WALL);
	}
	for (int y = 21; y <= 23; ++y) {
 4003c18:	00800544 	movi	r2,21
 4003c1c:	e0bffb15 	stw	r2,-20(fp)
 4003c20:	00001506 	br	4003c78 <test_map+0xce0>
		map[y * PACMAN_MAP_WIDTH + 12] = get_sprite(WALL);
 4003c24:	01402804 	movi	r5,160
 4003c28:	e13ffb17 	ldw	r4,-20(fp)
 4003c2c:	4006cd00 	call	4006cd0 <__mulsi3>
 4003c30:	10800c04 	addi	r2,r2,48
 4003c34:	e0fffe17 	ldw	r3,-8(fp)
 4003c38:	18a1883a 	add	r16,r3,r2
 4003c3c:	0100c004 	movi	r4,768
 4003c40:	40025900 	call	4002590 <get_sprite>
 4003c44:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 27] = get_sprite(WALL);
 4003c48:	01402804 	movi	r5,160
 4003c4c:	e13ffb17 	ldw	r4,-20(fp)
 4003c50:	4006cd00 	call	4006cd0 <__mulsi3>
 4003c54:	10801b04 	addi	r2,r2,108
 4003c58:	e0fffe17 	ldw	r3,-8(fp)
 4003c5c:	18a1883a 	add	r16,r3,r2
 4003c60:	0100c004 	movi	r4,768
 4003c64:	40025900 	call	4002590 <get_sprite>
 4003c68:	80800015 	stw	r2,0(r16)
		map[21 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	for (int y = 19; y <= 25; ++y) {
		map[y * PACMAN_MAP_WIDTH + 8] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 31] = get_sprite(WALL);
	}
	for (int y = 21; y <= 23; ++y) {
 4003c6c:	e0bffb17 	ldw	r2,-20(fp)
 4003c70:	10800044 	addi	r2,r2,1
 4003c74:	e0bffb15 	stw	r2,-20(fp)
 4003c78:	e0bffb17 	ldw	r2,-20(fp)
 4003c7c:	10800610 	cmplti	r2,r2,24
 4003c80:	103fe81e 	bne	r2,zero,4003c24 <__alt_data_end+0xfc003c24>
		map[y * PACMAN_MAP_WIDTH + 12] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 27] = get_sprite(WALL);
	}
	map[23 * PACMAN_MAP_WIDTH + 13] = get_sprite(WALL);
 4003c84:	e0bffe17 	ldw	r2,-8(fp)
 4003c88:	1403a504 	addi	r16,r2,3732
 4003c8c:	0100c004 	movi	r4,768
 4003c90:	40025900 	call	4002590 <get_sprite>
 4003c94:	80800015 	stw	r2,0(r16)
	map[23 * PACMAN_MAP_WIDTH + 26] = get_sprite(WALL);
 4003c98:	e0bffe17 	ldw	r2,-8(fp)
 4003c9c:	1403b204 	addi	r16,r2,3784
 4003ca0:	0100c004 	movi	r4,768
 4003ca4:	40025900 	call	4002590 <get_sprite>
 4003ca8:	80800015 	stw	r2,0(r16)
	for (int y = 19; y <= 23; ++y) {
 4003cac:	008004c4 	movi	r2,19
 4003cb0:	e0bffc15 	stw	r2,-16(fp)
 4003cb4:	00001506 	br	4003d0c <test_map+0xd74>
		map[y * PACMAN_MAP_WIDTH + 19] = get_sprite(WALL);
 4003cb8:	01402804 	movi	r5,160
 4003cbc:	e13ffc17 	ldw	r4,-16(fp)
 4003cc0:	4006cd00 	call	4006cd0 <__mulsi3>
 4003cc4:	10801304 	addi	r2,r2,76
 4003cc8:	e0fffe17 	ldw	r3,-8(fp)
 4003ccc:	18a1883a 	add	r16,r3,r2
 4003cd0:	0100c004 	movi	r4,768
 4003cd4:	40025900 	call	4002590 <get_sprite>
 4003cd8:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 20] = get_sprite(WALL);
 4003cdc:	01402804 	movi	r5,160
 4003ce0:	e13ffc17 	ldw	r4,-16(fp)
 4003ce4:	4006cd00 	call	4006cd0 <__mulsi3>
 4003ce8:	10801404 	addi	r2,r2,80
 4003cec:	e0fffe17 	ldw	r3,-8(fp)
 4003cf0:	18a1883a 	add	r16,r3,r2
 4003cf4:	0100c004 	movi	r4,768
 4003cf8:	40025900 	call	4002590 <get_sprite>
 4003cfc:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 12] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 27] = get_sprite(WALL);
	}
	map[23 * PACMAN_MAP_WIDTH + 13] = get_sprite(WALL);
	map[23 * PACMAN_MAP_WIDTH + 26] = get_sprite(WALL);
	for (int y = 19; y <= 23; ++y) {
 4003d00:	e0bffc17 	ldw	r2,-16(fp)
 4003d04:	10800044 	addi	r2,r2,1
 4003d08:	e0bffc15 	stw	r2,-16(fp)
 4003d0c:	e0bffc17 	ldw	r2,-16(fp)
 4003d10:	10800610 	cmplti	r2,r2,24
 4003d14:	103fe81e 	bne	r2,zero,4003cb8 <__alt_data_end+0xfc003cb8>
		map[y * PACMAN_MAP_WIDTH + 19] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 20] = get_sprite(WALL);
	}
	for (int x = 12; x <= 27; ++x) 
 4003d18:	00800304 	movi	r2,12
 4003d1c:	e0bffd15 	stw	r2,-12(fp)
 4003d20:	00000d06 	br	4003d58 <test_map+0xdc0>
		map[24 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
 4003d24:	e0bffd17 	ldw	r2,-12(fp)
 4003d28:	1080f004 	addi	r2,r2,960
 4003d2c:	1085883a 	add	r2,r2,r2
 4003d30:	1085883a 	add	r2,r2,r2
 4003d34:	1007883a 	mov	r3,r2
 4003d38:	e0bffe17 	ldw	r2,-8(fp)
 4003d3c:	10e1883a 	add	r16,r2,r3
 4003d40:	0100c004 	movi	r4,768
 4003d44:	40025900 	call	4002590 <get_sprite>
 4003d48:	80800015 	stw	r2,0(r16)
	map[23 * PACMAN_MAP_WIDTH + 26] = get_sprite(WALL);
	for (int y = 19; y <= 23; ++y) {
		map[y * PACMAN_MAP_WIDTH + 19] = get_sprite(WALL);
		map[y * PACMAN_MAP_WIDTH + 20] = get_sprite(WALL);
	}
	for (int x = 12; x <= 27; ++x) 
 4003d4c:	e0bffd17 	ldw	r2,-12(fp)
 4003d50:	10800044 	addi	r2,r2,1
 4003d54:	e0bffd15 	stw	r2,-12(fp)
 4003d58:	e0bffd17 	ldw	r2,-12(fp)
 4003d5c:	10800710 	cmplti	r2,r2,28
 4003d60:	103ff01e 	bne	r2,zero,4003d24 <__alt_data_end+0xfc003d24>
		map[24 * PACMAN_MAP_WIDTH + x] = get_sprite(WALL);
	map[24 * PACMAN_MAP_WIDTH + 7] = get_sprite(WALL);
 4003d64:	e0bffe17 	ldw	r2,-8(fp)
 4003d68:	1403c704 	addi	r16,r2,3868
 4003d6c:	0100c004 	movi	r4,768
 4003d70:	40025900 	call	4002590 <get_sprite>
 4003d74:	80800015 	stw	r2,0(r16)
	map[24 * PACMAN_MAP_WIDTH + 32] = get_sprite(WALL);
 4003d78:	e0bffe17 	ldw	r2,-8(fp)
 4003d7c:	1403e004 	addi	r16,r2,3968
 4003d80:	0100c004 	movi	r4,768
 4003d84:	40025900 	call	4002590 <get_sprite>
 4003d88:	80800015 	stw	r2,0(r16)
	map[25 * PACMAN_MAP_WIDTH + 6] = get_sprite(WALL);
 4003d8c:	e0bffe17 	ldw	r2,-8(fp)
 4003d90:	1403ee04 	addi	r16,r2,4024
 4003d94:	0100c004 	movi	r4,768
 4003d98:	40025900 	call	4002590 <get_sprite>
 4003d9c:	80800015 	stw	r2,0(r16)
	map[25 * PACMAN_MAP_WIDTH + 33] = get_sprite(WALL);
 4003da0:	e0bffe17 	ldw	r2,-8(fp)
 4003da4:	14040904 	addi	r16,r2,4132
 4003da8:	0100c004 	movi	r4,768
 4003dac:	40025900 	call	4002590 <get_sprite>
 4003db0:	80800015 	stw	r2,0(r16)
	map[26 * PACMAN_MAP_WIDTH + 5] = get_sprite(WALL);
 4003db4:	e0bffe17 	ldw	r2,-8(fp)
 4003db8:	14041504 	addi	r16,r2,4180
 4003dbc:	0100c004 	movi	r4,768
 4003dc0:	40025900 	call	4002590 <get_sprite>
 4003dc4:	80800015 	stw	r2,0(r16)
	map[26 * PACMAN_MAP_WIDTH + 34] = get_sprite(WALL);
 4003dc8:	e0bffe17 	ldw	r2,-8(fp)
 4003dcc:	14043204 	addi	r16,r2,4296
 4003dd0:	0100c004 	movi	r4,768
 4003dd4:	40025900 	call	4002590 <get_sprite>
 4003dd8:	80800015 	stw	r2,0(r16)
	map[27 * PACMAN_MAP_WIDTH + 4] = get_sprite(WALL);
 4003ddc:	e0bffe17 	ldw	r2,-8(fp)
 4003de0:	14043c04 	addi	r16,r2,4336
 4003de4:	0100c004 	movi	r4,768
 4003de8:	40025900 	call	4002590 <get_sprite>
 4003dec:	80800015 	stw	r2,0(r16)
	map[27 * PACMAN_MAP_WIDTH + 35] = get_sprite(WALL);
 4003df0:	e0bffe17 	ldw	r2,-8(fp)
 4003df4:	14045b04 	addi	r16,r2,4460
 4003df8:	0100c004 	movi	r4,768
 4003dfc:	40025900 	call	4002590 <get_sprite>
 4003e00:	80800015 	stw	r2,0(r16)
}
 4003e04:	0001883a 	nop
 4003e08:	e6ffff04 	addi	sp,fp,-4
 4003e0c:	dfc00217 	ldw	ra,8(sp)
 4003e10:	df000117 	ldw	fp,4(sp)
 4003e14:	dc000017 	ldw	r16,0(sp)
 4003e18:	dec00304 	addi	sp,sp,12
 4003e1c:	f800283a 	ret

04003e20 <game_over>:

void game_over(int *map)
{
 4003e20:	deffe304 	addi	sp,sp,-116
 4003e24:	dfc01c15 	stw	ra,112(sp)
 4003e28:	df001b15 	stw	fp,108(sp)
 4003e2c:	dc001a15 	stw	r16,104(sp)
 4003e30:	df001b04 	addi	fp,sp,108
 4003e34:	e13ffe15 	stw	r4,-8(fp)
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 4003e38:	e03fe515 	stw	zero,-108(fp)
 4003e3c:	00001906 	br	4003ea4 <game_over+0x84>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4003e40:	e03fe615 	stw	zero,-104(fp)
 4003e44:	00001106 	br	4003e8c <game_over+0x6c>
			map[y * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
 4003e48:	01400a04 	movi	r5,40
 4003e4c:	e13fe517 	ldw	r4,-108(fp)
 4003e50:	4006cd00 	call	4006cd0 <__mulsi3>
 4003e54:	1007883a 	mov	r3,r2
 4003e58:	e0bfe617 	ldw	r2,-104(fp)
 4003e5c:	1885883a 	add	r2,r3,r2
 4003e60:	1085883a 	add	r2,r2,r2
 4003e64:	1085883a 	add	r2,r2,r2
 4003e68:	1007883a 	mov	r3,r2
 4003e6c:	e0bffe17 	ldw	r2,-8(fp)
 4003e70:	10e1883a 	add	r16,r2,r3
 4003e74:	013fffc4 	movi	r4,-1
 4003e78:	40025900 	call	4002590 <get_sprite>
 4003e7c:	80800015 	stw	r2,0(r16)
}

void game_over(int *map)
{
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
 4003e80:	e0bfe617 	ldw	r2,-104(fp)
 4003e84:	10800044 	addi	r2,r2,1
 4003e88:	e0bfe615 	stw	r2,-104(fp)
 4003e8c:	e0bfe617 	ldw	r2,-104(fp)
 4003e90:	10800a10 	cmplti	r2,r2,40
 4003e94:	103fec1e 	bne	r2,zero,4003e48 <__alt_data_end+0xfc003e48>
	map[27 * PACMAN_MAP_WIDTH + 35] = get_sprite(WALL);
}

void game_over(int *map)
{
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
 4003e98:	e0bfe517 	ldw	r2,-108(fp)
 4003e9c:	10800044 	addi	r2,r2,1
 4003ea0:	e0bfe515 	stw	r2,-108(fp)
 4003ea4:	e0bfe517 	ldw	r2,-108(fp)
 4003ea8:	10800790 	cmplti	r2,r2,30
 4003eac:	103fe41e 	bne	r2,zero,4003e40 <__alt_data_end+0xfc003e40>
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
			map[y * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
		}
	}
	for (int x = 4; x <= 6; ++x)
 4003eb0:	00800104 	movi	r2,4
 4003eb4:	e0bfe715 	stw	r2,-100(fp)
 4003eb8:	00000d06 	br	4003ef0 <game_over+0xd0>
		map[4 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 4003ebc:	e0bfe717 	ldw	r2,-100(fp)
 4003ec0:	10802804 	addi	r2,r2,160
 4003ec4:	1085883a 	add	r2,r2,r2
 4003ec8:	1085883a 	add	r2,r2,r2
 4003ecc:	1007883a 	mov	r3,r2
 4003ed0:	e0bffe17 	ldw	r2,-8(fp)
 4003ed4:	10e1883a 	add	r16,r2,r3
 4003ed8:	0009883a 	mov	r4,zero
 4003edc:	40025900 	call	4002590 <get_sprite>
 4003ee0:	80800015 	stw	r2,0(r16)
	for (int y = 0; y < PACMAN_MAP_HEIGHT; ++y) {
		for (int x = 0; x < PACMAN_MAP_WIDTH; ++x) {
			map[y * PACMAN_MAP_WIDTH + x] = get_sprite(BACKGROUND);
		}
	}
	for (int x = 4; x <= 6; ++x)
 4003ee4:	e0bfe717 	ldw	r2,-100(fp)
 4003ee8:	10800044 	addi	r2,r2,1
 4003eec:	e0bfe715 	stw	r2,-100(fp)
 4003ef0:	e0bfe717 	ldw	r2,-100(fp)
 4003ef4:	108001d0 	cmplti	r2,r2,7
 4003ef8:	103ff01e 	bne	r2,zero,4003ebc <__alt_data_end+0xfc003ebc>
		map[4 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	map[4 * PACMAN_MAP_WIDTH + 14] = get_sprite(PACMAN);
 4003efc:	e0bffe17 	ldw	r2,-8(fp)
 4003f00:	1400ae04 	addi	r16,r2,696
 4003f04:	0009883a 	mov	r4,zero
 4003f08:	40025900 	call	4002590 <get_sprite>
 4003f0c:	80800015 	stw	r2,0(r16)
	for (int x = 32; x <= 36; ++x) {
 4003f10:	00800804 	movi	r2,32
 4003f14:	e0bfe815 	stw	r2,-96(fp)
 4003f18:	00002106 	br	4003fa0 <game_over+0x180>
		map[4 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 4003f1c:	e0bfe817 	ldw	r2,-96(fp)
 4003f20:	10802804 	addi	r2,r2,160
 4003f24:	1085883a 	add	r2,r2,r2
 4003f28:	1085883a 	add	r2,r2,r2
 4003f2c:	1007883a 	mov	r3,r2
 4003f30:	e0bffe17 	ldw	r2,-8(fp)
 4003f34:	10e1883a 	add	r16,r2,r3
 4003f38:	0009883a 	mov	r4,zero
 4003f3c:	40025900 	call	4002590 <get_sprite>
 4003f40:	80800015 	stw	r2,0(r16)
		map[8 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 4003f44:	e0bfe817 	ldw	r2,-96(fp)
 4003f48:	10805004 	addi	r2,r2,320
 4003f4c:	1085883a 	add	r2,r2,r2
 4003f50:	1085883a 	add	r2,r2,r2
 4003f54:	1007883a 	mov	r3,r2
 4003f58:	e0bffe17 	ldw	r2,-8(fp)
 4003f5c:	10e1883a 	add	r16,r2,r3
 4003f60:	0009883a 	mov	r4,zero
 4003f64:	40025900 	call	4002590 <get_sprite>
 4003f68:	80800015 	stw	r2,0(r16)
		map[12 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 4003f6c:	e0bfe817 	ldw	r2,-96(fp)
 4003f70:	10807804 	addi	r2,r2,480
 4003f74:	1085883a 	add	r2,r2,r2
 4003f78:	1085883a 	add	r2,r2,r2
 4003f7c:	1007883a 	mov	r3,r2
 4003f80:	e0bffe17 	ldw	r2,-8(fp)
 4003f84:	10e1883a 	add	r16,r2,r3
 4003f88:	0009883a 	mov	r4,zero
 4003f8c:	40025900 	call	4002590 <get_sprite>
 4003f90:	80800015 	stw	r2,0(r16)
		}
	}
	for (int x = 4; x <= 6; ++x)
		map[4 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	map[4 * PACMAN_MAP_WIDTH + 14] = get_sprite(PACMAN);
	for (int x = 32; x <= 36; ++x) {
 4003f94:	e0bfe817 	ldw	r2,-96(fp)
 4003f98:	10800044 	addi	r2,r2,1
 4003f9c:	e0bfe815 	stw	r2,-96(fp)
 4003fa0:	e0bfe817 	ldw	r2,-96(fp)
 4003fa4:	10800950 	cmplti	r2,r2,37
 4003fa8:	103fdc1e 	bne	r2,zero,4003f1c <__alt_data_end+0xfc003f1c>
		map[4 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
		map[8 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
		map[12 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	}
	map[5 * PACMAN_MAP_WIDTH + 3] = get_sprite(PACMAN);
 4003fac:	e0bffe17 	ldw	r2,-8(fp)
 4003fb0:	1400cb04 	addi	r16,r2,812
 4003fb4:	0009883a 	mov	r4,zero
 4003fb8:	40025900 	call	4002590 <get_sprite>
 4003fbc:	80800015 	stw	r2,0(r16)
	for (int y = 5; y <= 6; ++y) {
 4003fc0:	00800144 	movi	r2,5
 4003fc4:	e0bfe915 	stw	r2,-92(fp)
 4003fc8:	00001e06 	br	4004044 <game_over+0x224>
		map[y * PACMAN_MAP_WIDTH + 7] = get_sprite(PACMAN);
 4003fcc:	01402804 	movi	r5,160
 4003fd0:	e13fe917 	ldw	r4,-92(fp)
 4003fd4:	4006cd00 	call	4006cd0 <__mulsi3>
 4003fd8:	10800704 	addi	r2,r2,28
 4003fdc:	e0fffe17 	ldw	r3,-8(fp)
 4003fe0:	18a1883a 	add	r16,r3,r2
 4003fe4:	0009883a 	mov	r4,zero
 4003fe8:	40025900 	call	4002590 <get_sprite>
 4003fec:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 13] = get_sprite(PACMAN);
 4003ff0:	01402804 	movi	r5,160
 4003ff4:	e13fe917 	ldw	r4,-92(fp)
 4003ff8:	4006cd00 	call	4006cd0 <__mulsi3>
 4003ffc:	10800d04 	addi	r2,r2,52
 4004000:	e0fffe17 	ldw	r3,-8(fp)
 4004004:	18a1883a 	add	r16,r3,r2
 4004008:	0009883a 	mov	r4,zero
 400400c:	40025900 	call	4002590 <get_sprite>
 4004010:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 15] = get_sprite(PACMAN);
 4004014:	01402804 	movi	r5,160
 4004018:	e13fe917 	ldw	r4,-92(fp)
 400401c:	4006cd00 	call	4006cd0 <__mulsi3>
 4004020:	10800f04 	addi	r2,r2,60
 4004024:	e0fffe17 	ldw	r3,-8(fp)
 4004028:	18a1883a 	add	r16,r3,r2
 400402c:	0009883a 	mov	r4,zero
 4004030:	40025900 	call	4002590 <get_sprite>
 4004034:	80800015 	stw	r2,0(r16)
		map[4 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
		map[8 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
		map[12 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	}
	map[5 * PACMAN_MAP_WIDTH + 3] = get_sprite(PACMAN);
	for (int y = 5; y <= 6; ++y) {
 4004038:	e0bfe917 	ldw	r2,-92(fp)
 400403c:	10800044 	addi	r2,r2,1
 4004040:	e0bfe915 	stw	r2,-92(fp)
 4004044:	e0bfe917 	ldw	r2,-92(fp)
 4004048:	108001d0 	cmplti	r2,r2,7
 400404c:	103fdf1e 	bne	r2,zero,4003fcc <__alt_data_end+0xfc003fcc>
		map[y * PACMAN_MAP_WIDTH + 7] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 13] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 15] = get_sprite(PACMAN);
	}
	for (int y = 6; y <= 10; ++y)
 4004050:	00800184 	movi	r2,6
 4004054:	e0bfea15 	stw	r2,-88(fp)
 4004058:	00000c06 	br	400408c <game_over+0x26c>
		map[y * PACMAN_MAP_WIDTH + 2] = get_sprite(PACMAN);
 400405c:	01402804 	movi	r5,160
 4004060:	e13fea17 	ldw	r4,-88(fp)
 4004064:	4006cd00 	call	4006cd0 <__mulsi3>
 4004068:	10800204 	addi	r2,r2,8
 400406c:	e0fffe17 	ldw	r3,-8(fp)
 4004070:	18a1883a 	add	r16,r3,r2
 4004074:	0009883a 	mov	r4,zero
 4004078:	40025900 	call	4002590 <get_sprite>
 400407c:	80800015 	stw	r2,0(r16)
	for (int y = 5; y <= 6; ++y) {
		map[y * PACMAN_MAP_WIDTH + 7] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 13] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 15] = get_sprite(PACMAN);
	}
	for (int y = 6; y <= 10; ++y)
 4004080:	e0bfea17 	ldw	r2,-88(fp)
 4004084:	10800044 	addi	r2,r2,1
 4004088:	e0bfea15 	stw	r2,-88(fp)
 400408c:	e0bfea17 	ldw	r2,-88(fp)
 4004090:	108002d0 	cmplti	r2,r2,11
 4004094:	103ff11e 	bne	r2,zero,400405c <__alt_data_end+0xfc00405c>
		map[y * PACMAN_MAP_WIDTH + 2] = get_sprite(PACMAN);
	for (int y = 4; y <= 12; ++y) {
 4004098:	00800104 	movi	r2,4
 400409c:	e0bfeb15 	stw	r2,-84(fp)
 40040a0:	00001e06 	br	400411c <game_over+0x2fc>
		map[y * PACMAN_MAP_WIDTH + 20] = get_sprite(PACMAN);
 40040a4:	01402804 	movi	r5,160
 40040a8:	e13feb17 	ldw	r4,-84(fp)
 40040ac:	4006cd00 	call	4006cd0 <__mulsi3>
 40040b0:	10801404 	addi	r2,r2,80
 40040b4:	e0fffe17 	ldw	r3,-8(fp)
 40040b8:	18a1883a 	add	r16,r3,r2
 40040bc:	0009883a 	mov	r4,zero
 40040c0:	40025900 	call	4002590 <get_sprite>
 40040c4:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 27] = get_sprite(PACMAN);
 40040c8:	01402804 	movi	r5,160
 40040cc:	e13feb17 	ldw	r4,-84(fp)
 40040d0:	4006cd00 	call	4006cd0 <__mulsi3>
 40040d4:	10801b04 	addi	r2,r2,108
 40040d8:	e0fffe17 	ldw	r3,-8(fp)
 40040dc:	18a1883a 	add	r16,r3,r2
 40040e0:	0009883a 	mov	r4,zero
 40040e4:	40025900 	call	4002590 <get_sprite>
 40040e8:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 31] = get_sprite(PACMAN);
 40040ec:	01402804 	movi	r5,160
 40040f0:	e13feb17 	ldw	r4,-84(fp)
 40040f4:	4006cd00 	call	4006cd0 <__mulsi3>
 40040f8:	10801f04 	addi	r2,r2,124
 40040fc:	e0fffe17 	ldw	r3,-8(fp)
 4004100:	18a1883a 	add	r16,r3,r2
 4004104:	0009883a 	mov	r4,zero
 4004108:	40025900 	call	4002590 <get_sprite>
 400410c:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 13] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 15] = get_sprite(PACMAN);
	}
	for (int y = 6; y <= 10; ++y)
		map[y * PACMAN_MAP_WIDTH + 2] = get_sprite(PACMAN);
	for (int y = 4; y <= 12; ++y) {
 4004110:	e0bfeb17 	ldw	r2,-84(fp)
 4004114:	10800044 	addi	r2,r2,1
 4004118:	e0bfeb15 	stw	r2,-84(fp)
 400411c:	e0bfeb17 	ldw	r2,-84(fp)
 4004120:	10800350 	cmplti	r2,r2,13
 4004124:	103fdf1e 	bne	r2,zero,40040a4 <__alt_data_end+0xfc0040a4>
		map[y * PACMAN_MAP_WIDTH + 20] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 27] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 31] = get_sprite(PACMAN);
	}
	map[6 * PACMAN_MAP_WIDTH + 21] = get_sprite(PACMAN);
 4004128:	e0bffe17 	ldw	r2,-8(fp)
 400412c:	14010504 	addi	r16,r2,1044
 4004130:	0009883a 	mov	r4,zero
 4004134:	40025900 	call	4002590 <get_sprite>
 4004138:	80800015 	stw	r2,0(r16)
	map[6 * PACMAN_MAP_WIDTH + 26] = get_sprite(PACMAN);
 400413c:	e0bffe17 	ldw	r2,-8(fp)
 4004140:	14010a04 	addi	r16,r2,1064
 4004144:	0009883a 	mov	r4,zero
 4004148:	40025900 	call	4002590 <get_sprite>
 400414c:	80800015 	stw	r2,0(r16)
	for (int y = 7; y <= 9; ++y) {
 4004150:	008001c4 	movi	r2,7
 4004154:	e0bfec15 	stw	r2,-80(fp)
 4004158:	00002706 	br	40041f8 <game_over+0x3d8>
		map[y * PACMAN_MAP_WIDTH + 12] = get_sprite(PACMAN);
 400415c:	01402804 	movi	r5,160
 4004160:	e13fec17 	ldw	r4,-80(fp)
 4004164:	4006cd00 	call	4006cd0 <__mulsi3>
 4004168:	10800c04 	addi	r2,r2,48
 400416c:	e0fffe17 	ldw	r3,-8(fp)
 4004170:	18a1883a 	add	r16,r3,r2
 4004174:	0009883a 	mov	r4,zero
 4004178:	40025900 	call	4002590 <get_sprite>
 400417c:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 16] = get_sprite(PACMAN);
 4004180:	01402804 	movi	r5,160
 4004184:	e13fec17 	ldw	r4,-80(fp)
 4004188:	4006cd00 	call	4006cd0 <__mulsi3>
 400418c:	10801004 	addi	r2,r2,64
 4004190:	e0fffe17 	ldw	r3,-8(fp)
 4004194:	18a1883a 	add	r16,r3,r2
 4004198:	0009883a 	mov	r4,zero
 400419c:	40025900 	call	4002590 <get_sprite>
 40041a0:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 22] = get_sprite(PACMAN);
 40041a4:	01402804 	movi	r5,160
 40041a8:	e13fec17 	ldw	r4,-80(fp)
 40041ac:	4006cd00 	call	4006cd0 <__mulsi3>
 40041b0:	10801604 	addi	r2,r2,88
 40041b4:	e0fffe17 	ldw	r3,-8(fp)
 40041b8:	18a1883a 	add	r16,r3,r2
 40041bc:	0009883a 	mov	r4,zero
 40041c0:	40025900 	call	4002590 <get_sprite>
 40041c4:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 25] = get_sprite(PACMAN);
 40041c8:	01402804 	movi	r5,160
 40041cc:	e13fec17 	ldw	r4,-80(fp)
 40041d0:	4006cd00 	call	4006cd0 <__mulsi3>
 40041d4:	10801904 	addi	r2,r2,100
 40041d8:	e0fffe17 	ldw	r3,-8(fp)
 40041dc:	18a1883a 	add	r16,r3,r2
 40041e0:	0009883a 	mov	r4,zero
 40041e4:	40025900 	call	4002590 <get_sprite>
 40041e8:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 27] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 31] = get_sprite(PACMAN);
	}
	map[6 * PACMAN_MAP_WIDTH + 21] = get_sprite(PACMAN);
	map[6 * PACMAN_MAP_WIDTH + 26] = get_sprite(PACMAN);
	for (int y = 7; y <= 9; ++y) {
 40041ec:	e0bfec17 	ldw	r2,-80(fp)
 40041f0:	10800044 	addi	r2,r2,1
 40041f4:	e0bfec15 	stw	r2,-80(fp)
 40041f8:	e0bfec17 	ldw	r2,-80(fp)
 40041fc:	10800290 	cmplti	r2,r2,10
 4004200:	103fd61e 	bne	r2,zero,400415c <__alt_data_end+0xfc00415c>
		map[y * PACMAN_MAP_WIDTH + 12] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 16] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 22] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 25] = get_sprite(PACMAN);
	}
	for (int x = 6; x <= 8; ++x)
 4004204:	00800184 	movi	r2,6
 4004208:	e0bfed15 	stw	r2,-76(fp)
 400420c:	00000d06 	br	4004244 <game_over+0x424>
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 4004210:	e0bfed17 	ldw	r2,-76(fp)
 4004214:	10805a04 	addi	r2,r2,360
 4004218:	1085883a 	add	r2,r2,r2
 400421c:	1085883a 	add	r2,r2,r2
 4004220:	1007883a 	mov	r3,r2
 4004224:	e0bffe17 	ldw	r2,-8(fp)
 4004228:	10e1883a 	add	r16,r2,r3
 400422c:	0009883a 	mov	r4,zero
 4004230:	40025900 	call	4002590 <get_sprite>
 4004234:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 12] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 16] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 22] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 25] = get_sprite(PACMAN);
	}
	for (int x = 6; x <= 8; ++x)
 4004238:	e0bfed17 	ldw	r2,-76(fp)
 400423c:	10800044 	addi	r2,r2,1
 4004240:	e0bfed15 	stw	r2,-76(fp)
 4004244:	e0bfed17 	ldw	r2,-76(fp)
 4004248:	10800250 	cmplti	r2,r2,9
 400424c:	103ff01e 	bne	r2,zero,4004210 <__alt_data_end+0xfc004210>
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	for (int x = 13; x <= 15; ++x)
 4004250:	00800344 	movi	r2,13
 4004254:	e0bfee15 	stw	r2,-72(fp)
 4004258:	00000d06 	br	4004290 <game_over+0x470>
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 400425c:	e0bfee17 	ldw	r2,-72(fp)
 4004260:	10805a04 	addi	r2,r2,360
 4004264:	1085883a 	add	r2,r2,r2
 4004268:	1085883a 	add	r2,r2,r2
 400426c:	1007883a 	mov	r3,r2
 4004270:	e0bffe17 	ldw	r2,-8(fp)
 4004274:	10e1883a 	add	r16,r2,r3
 4004278:	0009883a 	mov	r4,zero
 400427c:	40025900 	call	4002590 <get_sprite>
 4004280:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 22] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 25] = get_sprite(PACMAN);
	}
	for (int x = 6; x <= 8; ++x)
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	for (int x = 13; x <= 15; ++x)
 4004284:	e0bfee17 	ldw	r2,-72(fp)
 4004288:	10800044 	addi	r2,r2,1
 400428c:	e0bfee15 	stw	r2,-72(fp)
 4004290:	e0bfee17 	ldw	r2,-72(fp)
 4004294:	10800410 	cmplti	r2,r2,16
 4004298:	103ff01e 	bne	r2,zero,400425c <__alt_data_end+0xfc00425c>
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	for (int y = 10; y <= 11; ++y) {
 400429c:	00800284 	movi	r2,10
 40042a0:	e0bfef15 	stw	r2,-68(fp)
 40042a4:	00001e06 	br	4004320 <game_over+0x500>
		map[y * PACMAN_MAP_WIDTH + 7] = get_sprite(PACMAN);
 40042a8:	01402804 	movi	r5,160
 40042ac:	e13fef17 	ldw	r4,-68(fp)
 40042b0:	4006cd00 	call	4006cd0 <__mulsi3>
 40042b4:	10800704 	addi	r2,r2,28
 40042b8:	e0fffe17 	ldw	r3,-8(fp)
 40042bc:	18a1883a 	add	r16,r3,r2
 40042c0:	0009883a 	mov	r4,zero
 40042c4:	40025900 	call	4002590 <get_sprite>
 40042c8:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 23] = get_sprite(PACMAN);
 40042cc:	01402804 	movi	r5,160
 40042d0:	e13fef17 	ldw	r4,-68(fp)
 40042d4:	4006cd00 	call	4006cd0 <__mulsi3>
 40042d8:	10801704 	addi	r2,r2,92
 40042dc:	e0fffe17 	ldw	r3,-8(fp)
 40042e0:	18a1883a 	add	r16,r3,r2
 40042e4:	0009883a 	mov	r4,zero
 40042e8:	40025900 	call	4002590 <get_sprite>
 40042ec:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 24] = get_sprite(PACMAN);
 40042f0:	01402804 	movi	r5,160
 40042f4:	e13fef17 	ldw	r4,-68(fp)
 40042f8:	4006cd00 	call	4006cd0 <__mulsi3>
 40042fc:	10801804 	addi	r2,r2,96
 4004300:	e0fffe17 	ldw	r3,-8(fp)
 4004304:	18a1883a 	add	r16,r3,r2
 4004308:	0009883a 	mov	r4,zero
 400430c:	40025900 	call	4002590 <get_sprite>
 4004310:	80800015 	stw	r2,0(r16)
	}
	for (int x = 6; x <= 8; ++x)
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	for (int x = 13; x <= 15; ++x)
		map[9 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	for (int y = 10; y <= 11; ++y) {
 4004314:	e0bfef17 	ldw	r2,-68(fp)
 4004318:	10800044 	addi	r2,r2,1
 400431c:	e0bfef15 	stw	r2,-68(fp)
 4004320:	e0bfef17 	ldw	r2,-68(fp)
 4004324:	10800310 	cmplti	r2,r2,12
 4004328:	103fdf1e 	bne	r2,zero,40042a8 <__alt_data_end+0xfc0042a8>
		map[y * PACMAN_MAP_WIDTH + 7] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 23] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 24] = get_sprite(PACMAN);
	}
	for (int y = 10; y <= 12; ++y) {
 400432c:	00800284 	movi	r2,10
 4004330:	e0bff015 	stw	r2,-64(fp)
 4004334:	00001506 	br	400438c <game_over+0x56c>
		map[y * PACMAN_MAP_WIDTH + 11] = get_sprite(PACMAN);
 4004338:	01402804 	movi	r5,160
 400433c:	e13ff017 	ldw	r4,-64(fp)
 4004340:	4006cd00 	call	4006cd0 <__mulsi3>
 4004344:	10800b04 	addi	r2,r2,44
 4004348:	e0fffe17 	ldw	r3,-8(fp)
 400434c:	18a1883a 	add	r16,r3,r2
 4004350:	0009883a 	mov	r4,zero
 4004354:	40025900 	call	4002590 <get_sprite>
 4004358:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 17] = get_sprite(PACMAN);
 400435c:	01402804 	movi	r5,160
 4004360:	e13ff017 	ldw	r4,-64(fp)
 4004364:	4006cd00 	call	4006cd0 <__mulsi3>
 4004368:	10801104 	addi	r2,r2,68
 400436c:	e0fffe17 	ldw	r3,-8(fp)
 4004370:	18a1883a 	add	r16,r3,r2
 4004374:	0009883a 	mov	r4,zero
 4004378:	40025900 	call	4002590 <get_sprite>
 400437c:	80800015 	stw	r2,0(r16)
	for (int y = 10; y <= 11; ++y) {
		map[y * PACMAN_MAP_WIDTH + 7] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 23] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 24] = get_sprite(PACMAN);
	}
	for (int y = 10; y <= 12; ++y) {
 4004380:	e0bff017 	ldw	r2,-64(fp)
 4004384:	10800044 	addi	r2,r2,1
 4004388:	e0bff015 	stw	r2,-64(fp)
 400438c:	e0bff017 	ldw	r2,-64(fp)
 4004390:	10800350 	cmplti	r2,r2,13
 4004394:	103fe81e 	bne	r2,zero,4004338 <__alt_data_end+0xfc004338>
		map[y * PACMAN_MAP_WIDTH + 11] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 17] = get_sprite(PACMAN);
	}
	map[11 * PACMAN_MAP_WIDTH + 3] = get_sprite(PACMAN);
 4004398:	e0bffe17 	ldw	r2,-8(fp)
 400439c:	1401bb04 	addi	r16,r2,1772
 40043a0:	0009883a 	mov	r4,zero
 40043a4:	40025900 	call	4002590 <get_sprite>
 40043a8:	80800015 	stw	r2,0(r16)
	for (int x = 4; x <= 6; ++x)
 40043ac:	00800104 	movi	r2,4
 40043b0:	e0bff115 	stw	r2,-60(fp)
 40043b4:	00000d06 	br	40043ec <game_over+0x5cc>
		map[12 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 40043b8:	e0bff117 	ldw	r2,-60(fp)
 40043bc:	10807804 	addi	r2,r2,480
 40043c0:	1085883a 	add	r2,r2,r2
 40043c4:	1085883a 	add	r2,r2,r2
 40043c8:	1007883a 	mov	r3,r2
 40043cc:	e0bffe17 	ldw	r2,-8(fp)
 40043d0:	10e1883a 	add	r16,r2,r3
 40043d4:	0009883a 	mov	r4,zero
 40043d8:	40025900 	call	4002590 <get_sprite>
 40043dc:	80800015 	stw	r2,0(r16)
	for (int y = 10; y <= 12; ++y) {
		map[y * PACMAN_MAP_WIDTH + 11] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 17] = get_sprite(PACMAN);
	}
	map[11 * PACMAN_MAP_WIDTH + 3] = get_sprite(PACMAN);
	for (int x = 4; x <= 6; ++x)
 40043e0:	e0bff117 	ldw	r2,-60(fp)
 40043e4:	10800044 	addi	r2,r2,1
 40043e8:	e0bff115 	stw	r2,-60(fp)
 40043ec:	e0bff117 	ldw	r2,-60(fp)
 40043f0:	108001d0 	cmplti	r2,r2,7
 40043f4:	103ff01e 	bne	r2,zero,40043b8 <__alt_data_end+0xfc0043b8>
		map[12 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	for (int x = 4; x <= 6; ++x)
 40043f8:	00800104 	movi	r2,4
 40043fc:	e0bff215 	stw	r2,-56(fp)
 4004400:	00000d06 	br	4004438 <game_over+0x618>
		map[18 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 4004404:	e0bff217 	ldw	r2,-56(fp)
 4004408:	1080b404 	addi	r2,r2,720
 400440c:	1085883a 	add	r2,r2,r2
 4004410:	1085883a 	add	r2,r2,r2
 4004414:	1007883a 	mov	r3,r2
 4004418:	e0bffe17 	ldw	r2,-8(fp)
 400441c:	10e1883a 	add	r16,r2,r3
 4004420:	0009883a 	mov	r4,zero
 4004424:	40025900 	call	4002590 <get_sprite>
 4004428:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 17] = get_sprite(PACMAN);
	}
	map[11 * PACMAN_MAP_WIDTH + 3] = get_sprite(PACMAN);
	for (int x = 4; x <= 6; ++x)
		map[12 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	for (int x = 4; x <= 6; ++x)
 400442c:	e0bff217 	ldw	r2,-56(fp)
 4004430:	10800044 	addi	r2,r2,1
 4004434:	e0bff215 	stw	r2,-56(fp)
 4004438:	e0bff217 	ldw	r2,-56(fp)
 400443c:	108001d0 	cmplti	r2,r2,7
 4004440:	103ff01e 	bne	r2,zero,4004404 <__alt_data_end+0xfc004404>
		map[18 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	for (int x = 22; x <= 26; ++x) {
 4004444:	00800584 	movi	r2,22
 4004448:	e0bff315 	stw	r2,-52(fp)
 400444c:	00002106 	br	40044d4 <game_over+0x6b4>
		map[18 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 4004450:	e0bff317 	ldw	r2,-52(fp)
 4004454:	1080b404 	addi	r2,r2,720
 4004458:	1085883a 	add	r2,r2,r2
 400445c:	1085883a 	add	r2,r2,r2
 4004460:	1007883a 	mov	r3,r2
 4004464:	e0bffe17 	ldw	r2,-8(fp)
 4004468:	10e1883a 	add	r16,r2,r3
 400446c:	0009883a 	mov	r4,zero
 4004470:	40025900 	call	4002590 <get_sprite>
 4004474:	80800015 	stw	r2,0(r16)
		map[22 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 4004478:	e0bff317 	ldw	r2,-52(fp)
 400447c:	1080dc04 	addi	r2,r2,880
 4004480:	1085883a 	add	r2,r2,r2
 4004484:	1085883a 	add	r2,r2,r2
 4004488:	1007883a 	mov	r3,r2
 400448c:	e0bffe17 	ldw	r2,-8(fp)
 4004490:	10e1883a 	add	r16,r2,r3
 4004494:	0009883a 	mov	r4,zero
 4004498:	40025900 	call	4002590 <get_sprite>
 400449c:	80800015 	stw	r2,0(r16)
		map[26 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 40044a0:	e0bff317 	ldw	r2,-52(fp)
 40044a4:	10810404 	addi	r2,r2,1040
 40044a8:	1085883a 	add	r2,r2,r2
 40044ac:	1085883a 	add	r2,r2,r2
 40044b0:	1007883a 	mov	r3,r2
 40044b4:	e0bffe17 	ldw	r2,-8(fp)
 40044b8:	10e1883a 	add	r16,r2,r3
 40044bc:	0009883a 	mov	r4,zero
 40044c0:	40025900 	call	4002590 <get_sprite>
 40044c4:	80800015 	stw	r2,0(r16)
	map[11 * PACMAN_MAP_WIDTH + 3] = get_sprite(PACMAN);
	for (int x = 4; x <= 6; ++x)
		map[12 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	for (int x = 4; x <= 6; ++x)
		map[18 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	for (int x = 22; x <= 26; ++x) {
 40044c8:	e0bff317 	ldw	r2,-52(fp)
 40044cc:	10800044 	addi	r2,r2,1
 40044d0:	e0bff315 	stw	r2,-52(fp)
 40044d4:	e0bff317 	ldw	r2,-52(fp)
 40044d8:	108006d0 	cmplti	r2,r2,27
 40044dc:	103fdc1e 	bne	r2,zero,4004450 <__alt_data_end+0xfc004450>
		map[18 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
		map[22 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
		map[26 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	}
	for (int x = 31; x <= 34; ++x) {
 40044e0:	008007c4 	movi	r2,31
 40044e4:	e0bff415 	stw	r2,-48(fp)
 40044e8:	00001706 	br	4004548 <game_over+0x728>
		map[18 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 40044ec:	e0bff417 	ldw	r2,-48(fp)
 40044f0:	1080b404 	addi	r2,r2,720
 40044f4:	1085883a 	add	r2,r2,r2
 40044f8:	1085883a 	add	r2,r2,r2
 40044fc:	1007883a 	mov	r3,r2
 4004500:	e0bffe17 	ldw	r2,-8(fp)
 4004504:	10e1883a 	add	r16,r2,r3
 4004508:	0009883a 	mov	r4,zero
 400450c:	40025900 	call	4002590 <get_sprite>
 4004510:	80800015 	stw	r2,0(r16)
		map[22 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 4004514:	e0bff417 	ldw	r2,-48(fp)
 4004518:	1080dc04 	addi	r2,r2,880
 400451c:	1085883a 	add	r2,r2,r2
 4004520:	1085883a 	add	r2,r2,r2
 4004524:	1007883a 	mov	r3,r2
 4004528:	e0bffe17 	ldw	r2,-8(fp)
 400452c:	10e1883a 	add	r16,r2,r3
 4004530:	0009883a 	mov	r4,zero
 4004534:	40025900 	call	4002590 <get_sprite>
 4004538:	80800015 	stw	r2,0(r16)
	for (int x = 22; x <= 26; ++x) {
		map[18 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
		map[22 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
		map[26 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	}
	for (int x = 31; x <= 34; ++x) {
 400453c:	e0bff417 	ldw	r2,-48(fp)
 4004540:	10800044 	addi	r2,r2,1
 4004544:	e0bff415 	stw	r2,-48(fp)
 4004548:	e0bff417 	ldw	r2,-48(fp)
 400454c:	108008d0 	cmplti	r2,r2,35
 4004550:	103fe61e 	bne	r2,zero,40044ec <__alt_data_end+0xfc0044ec>
		map[18 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
		map[22 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	}
	for (int y = 18; y <= 26; ++y)
 4004554:	00800484 	movi	r2,18
 4004558:	e0bff515 	stw	r2,-44(fp)
 400455c:	00000c06 	br	4004590 <game_over+0x770>
		map[y * PACMAN_MAP_WIDTH + 21] = get_sprite(PACMAN);
 4004560:	01402804 	movi	r5,160
 4004564:	e13ff517 	ldw	r4,-44(fp)
 4004568:	4006cd00 	call	4006cd0 <__mulsi3>
 400456c:	10801504 	addi	r2,r2,84
 4004570:	e0fffe17 	ldw	r3,-8(fp)
 4004574:	18a1883a 	add	r16,r3,r2
 4004578:	0009883a 	mov	r4,zero
 400457c:	40025900 	call	4002590 <get_sprite>
 4004580:	80800015 	stw	r2,0(r16)
	}
	for (int x = 31; x <= 34; ++x) {
		map[18 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
		map[22 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	}
	for (int y = 18; y <= 26; ++y)
 4004584:	e0bff517 	ldw	r2,-44(fp)
 4004588:	10800044 	addi	r2,r2,1
 400458c:	e0bff515 	stw	r2,-44(fp)
 4004590:	e0bff517 	ldw	r2,-44(fp)
 4004594:	108006d0 	cmplti	r2,r2,27
 4004598:	103ff11e 	bne	r2,zero,4004560 <__alt_data_end+0xfc004560>
		map[y * PACMAN_MAP_WIDTH + 21] = get_sprite(PACMAN);
	for (int y = 18; y <= 27; ++y)
 400459c:	00800484 	movi	r2,18
 40045a0:	e0bff615 	stw	r2,-40(fp)
 40045a4:	00000c06 	br	40045d8 <game_over+0x7b8>
		map[y * PACMAN_MAP_WIDTH + 30] = get_sprite(PACMAN);
 40045a8:	01402804 	movi	r5,160
 40045ac:	e13ff617 	ldw	r4,-40(fp)
 40045b0:	4006cd00 	call	4006cd0 <__mulsi3>
 40045b4:	10801e04 	addi	r2,r2,120
 40045b8:	e0fffe17 	ldw	r3,-8(fp)
 40045bc:	18a1883a 	add	r16,r3,r2
 40045c0:	0009883a 	mov	r4,zero
 40045c4:	40025900 	call	4002590 <get_sprite>
 40045c8:	80800015 	stw	r2,0(r16)
		map[18 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
		map[22 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	}
	for (int y = 18; y <= 26; ++y)
		map[y * PACMAN_MAP_WIDTH + 21] = get_sprite(PACMAN);
	for (int y = 18; y <= 27; ++y)
 40045cc:	e0bff617 	ldw	r2,-40(fp)
 40045d0:	10800044 	addi	r2,r2,1
 40045d4:	e0bff615 	stw	r2,-40(fp)
 40045d8:	e0bff617 	ldw	r2,-40(fp)
 40045dc:	10800710 	cmplti	r2,r2,28
 40045e0:	103ff11e 	bne	r2,zero,40045a8 <__alt_data_end+0xfc0045a8>
		map[y * PACMAN_MAP_WIDTH + 30] = get_sprite(PACMAN);
	for (int y = 18; y <= 20; ++y) {
 40045e4:	00800484 	movi	r2,18
 40045e8:	e0bff715 	stw	r2,-36(fp)
 40045ec:	00001506 	br	4004644 <game_over+0x824>
		map[y * PACMAN_MAP_WIDTH + 11] = get_sprite(PACMAN);
 40045f0:	01402804 	movi	r5,160
 40045f4:	e13ff717 	ldw	r4,-36(fp)
 40045f8:	4006cd00 	call	4006cd0 <__mulsi3>
 40045fc:	10800b04 	addi	r2,r2,44
 4004600:	e0fffe17 	ldw	r3,-8(fp)
 4004604:	18a1883a 	add	r16,r3,r2
 4004608:	0009883a 	mov	r4,zero
 400460c:	40025900 	call	4002590 <get_sprite>
 4004610:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 17] = get_sprite(PACMAN);
 4004614:	01402804 	movi	r5,160
 4004618:	e13ff717 	ldw	r4,-36(fp)
 400461c:	4006cd00 	call	4006cd0 <__mulsi3>
 4004620:	10801104 	addi	r2,r2,68
 4004624:	e0fffe17 	ldw	r3,-8(fp)
 4004628:	18a1883a 	add	r16,r3,r2
 400462c:	0009883a 	mov	r4,zero
 4004630:	40025900 	call	4002590 <get_sprite>
 4004634:	80800015 	stw	r2,0(r16)
	}
	for (int y = 18; y <= 26; ++y)
		map[y * PACMAN_MAP_WIDTH + 21] = get_sprite(PACMAN);
	for (int y = 18; y <= 27; ++y)
		map[y * PACMAN_MAP_WIDTH + 30] = get_sprite(PACMAN);
	for (int y = 18; y <= 20; ++y) {
 4004638:	e0bff717 	ldw	r2,-36(fp)
 400463c:	10800044 	addi	r2,r2,1
 4004640:	e0bff715 	stw	r2,-36(fp)
 4004644:	e0bff717 	ldw	r2,-36(fp)
 4004648:	10800550 	cmplti	r2,r2,21
 400464c:	103fe81e 	bne	r2,zero,40045f0 <__alt_data_end+0xfc0045f0>
		map[y * PACMAN_MAP_WIDTH + 11] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 17] = get_sprite(PACMAN);
	}
	for (int y = 21; y <= 23; ++y) {
 4004650:	00800544 	movi	r2,21
 4004654:	e0bff815 	stw	r2,-32(fp)
 4004658:	00001506 	br	40046b0 <game_over+0x890>
		map[y * PACMAN_MAP_WIDTH + 12] = get_sprite(PACMAN);
 400465c:	01402804 	movi	r5,160
 4004660:	e13ff817 	ldw	r4,-32(fp)
 4004664:	4006cd00 	call	4006cd0 <__mulsi3>
 4004668:	10800c04 	addi	r2,r2,48
 400466c:	e0fffe17 	ldw	r3,-8(fp)
 4004670:	18a1883a 	add	r16,r3,r2
 4004674:	0009883a 	mov	r4,zero
 4004678:	40025900 	call	4002590 <get_sprite>
 400467c:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 16] = get_sprite(PACMAN);
 4004680:	01402804 	movi	r5,160
 4004684:	e13ff817 	ldw	r4,-32(fp)
 4004688:	4006cd00 	call	4006cd0 <__mulsi3>
 400468c:	10801004 	addi	r2,r2,64
 4004690:	e0fffe17 	ldw	r3,-8(fp)
 4004694:	18a1883a 	add	r16,r3,r2
 4004698:	0009883a 	mov	r4,zero
 400469c:	40025900 	call	4002590 <get_sprite>
 40046a0:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 30] = get_sprite(PACMAN);
	for (int y = 18; y <= 20; ++y) {
		map[y * PACMAN_MAP_WIDTH + 11] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 17] = get_sprite(PACMAN);
	}
	for (int y = 21; y <= 23; ++y) {
 40046a4:	e0bff817 	ldw	r2,-32(fp)
 40046a8:	10800044 	addi	r2,r2,1
 40046ac:	e0bff815 	stw	r2,-32(fp)
 40046b0:	e0bff817 	ldw	r2,-32(fp)
 40046b4:	10800610 	cmplti	r2,r2,24
 40046b8:	103fe81e 	bne	r2,zero,400465c <__alt_data_end+0xfc00465c>
		map[y * PACMAN_MAP_WIDTH + 12] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 16] = get_sprite(PACMAN);
	}
	for (int y = 24; y <= 25; ++y) {
 40046bc:	00800604 	movi	r2,24
 40046c0:	e0bff915 	stw	r2,-28(fp)
 40046c4:	00001506 	br	400471c <game_over+0x8fc>
		map[y * PACMAN_MAP_WIDTH + 13] = get_sprite(PACMAN);
 40046c8:	01402804 	movi	r5,160
 40046cc:	e13ff917 	ldw	r4,-28(fp)
 40046d0:	4006cd00 	call	4006cd0 <__mulsi3>
 40046d4:	10800d04 	addi	r2,r2,52
 40046d8:	e0fffe17 	ldw	r3,-8(fp)
 40046dc:	18a1883a 	add	r16,r3,r2
 40046e0:	0009883a 	mov	r4,zero
 40046e4:	40025900 	call	4002590 <get_sprite>
 40046e8:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 15] = get_sprite(PACMAN);
 40046ec:	01402804 	movi	r5,160
 40046f0:	e13ff917 	ldw	r4,-28(fp)
 40046f4:	4006cd00 	call	4006cd0 <__mulsi3>
 40046f8:	10800f04 	addi	r2,r2,60
 40046fc:	e0fffe17 	ldw	r3,-8(fp)
 4004700:	18a1883a 	add	r16,r3,r2
 4004704:	0009883a 	mov	r4,zero
 4004708:	40025900 	call	4002590 <get_sprite>
 400470c:	80800015 	stw	r2,0(r16)
	}
	for (int y = 21; y <= 23; ++y) {
		map[y * PACMAN_MAP_WIDTH + 12] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 16] = get_sprite(PACMAN);
	}
	for (int y = 24; y <= 25; ++y) {
 4004710:	e0bff917 	ldw	r2,-28(fp)
 4004714:	10800044 	addi	r2,r2,1
 4004718:	e0bff915 	stw	r2,-28(fp)
 400471c:	e0bff917 	ldw	r2,-28(fp)
 4004720:	10800690 	cmplti	r2,r2,26
 4004724:	103fe81e 	bne	r2,zero,40046c8 <__alt_data_end+0xfc0046c8>
		map[y * PACMAN_MAP_WIDTH + 13] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 15] = get_sprite(PACMAN);
	}
	map[26 * PACMAN_MAP_WIDTH + 14] = get_sprite(PACMAN);
 4004728:	e0bffe17 	ldw	r2,-8(fp)
 400472c:	14041e04 	addi	r16,r2,4216
 4004730:	0009883a 	mov	r4,zero
 4004734:	40025900 	call	4002590 <get_sprite>
 4004738:	80800015 	stw	r2,0(r16)
	map[19 * PACMAN_MAP_WIDTH + 3] = get_sprite(PACMAN);
 400473c:	e0bffe17 	ldw	r2,-8(fp)
 4004740:	1402fb04 	addi	r16,r2,3052
 4004744:	0009883a 	mov	r4,zero
 4004748:	40025900 	call	4002590 <get_sprite>
 400474c:	80800015 	stw	r2,0(r16)
	map[19 * PACMAN_MAP_WIDTH + 7] = get_sprite(PACMAN);
 4004750:	e0bffe17 	ldw	r2,-8(fp)
 4004754:	1402ff04 	addi	r16,r2,3068
 4004758:	0009883a 	mov	r4,zero
 400475c:	40025900 	call	4002590 <get_sprite>
 4004760:	80800015 	stw	r2,0(r16)
	map[19 * PACMAN_MAP_WIDTH + 35] = get_sprite(PACMAN);
 4004764:	e0bffe17 	ldw	r2,-8(fp)
 4004768:	14031b04 	addi	r16,r2,3180
 400476c:	0009883a 	mov	r4,zero
 4004770:	40025900 	call	4002590 <get_sprite>
 4004774:	80800015 	stw	r2,0(r16)
	for (int y = 20; y <= 21; ++y)
 4004778:	00800504 	movi	r2,20
 400477c:	e0bffa15 	stw	r2,-24(fp)
 4004780:	00000c06 	br	40047b4 <game_over+0x994>
		map[y * PACMAN_MAP_WIDTH + 36] = get_sprite(PACMAN);
 4004784:	01402804 	movi	r5,160
 4004788:	e13ffa17 	ldw	r4,-24(fp)
 400478c:	4006cd00 	call	4006cd0 <__mulsi3>
 4004790:	10802404 	addi	r2,r2,144
 4004794:	e0fffe17 	ldw	r3,-8(fp)
 4004798:	18a1883a 	add	r16,r3,r2
 400479c:	0009883a 	mov	r4,zero
 40047a0:	40025900 	call	4002590 <get_sprite>
 40047a4:	80800015 	stw	r2,0(r16)
	}
	map[26 * PACMAN_MAP_WIDTH + 14] = get_sprite(PACMAN);
	map[19 * PACMAN_MAP_WIDTH + 3] = get_sprite(PACMAN);
	map[19 * PACMAN_MAP_WIDTH + 7] = get_sprite(PACMAN);
	map[19 * PACMAN_MAP_WIDTH + 35] = get_sprite(PACMAN);
	for (int y = 20; y <= 21; ++y)
 40047a8:	e0bffa17 	ldw	r2,-24(fp)
 40047ac:	10800044 	addi	r2,r2,1
 40047b0:	e0bffa15 	stw	r2,-24(fp)
 40047b4:	e0bffa17 	ldw	r2,-24(fp)
 40047b8:	10800590 	cmplti	r2,r2,22
 40047bc:	103ff11e 	bne	r2,zero,4004784 <__alt_data_end+0xfc004784>
		map[y * PACMAN_MAP_WIDTH + 36] = get_sprite(PACMAN);
	for (int y = 20; y <= 24; ++y) {
 40047c0:	00800504 	movi	r2,20
 40047c4:	e0bffb15 	stw	r2,-20(fp)
 40047c8:	00001506 	br	4004820 <game_over+0xa00>
		map[y * PACMAN_MAP_WIDTH + 2] = get_sprite(PACMAN);
 40047cc:	01402804 	movi	r5,160
 40047d0:	e13ffb17 	ldw	r4,-20(fp)
 40047d4:	4006cd00 	call	4006cd0 <__mulsi3>
 40047d8:	10800204 	addi	r2,r2,8
 40047dc:	e0fffe17 	ldw	r3,-8(fp)
 40047e0:	18a1883a 	add	r16,r3,r2
 40047e4:	0009883a 	mov	r4,zero
 40047e8:	40025900 	call	4002590 <get_sprite>
 40047ec:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 8] = get_sprite(PACMAN);
 40047f0:	01402804 	movi	r5,160
 40047f4:	e13ffb17 	ldw	r4,-20(fp)
 40047f8:	4006cd00 	call	4006cd0 <__mulsi3>
 40047fc:	10800804 	addi	r2,r2,32
 4004800:	e0fffe17 	ldw	r3,-8(fp)
 4004804:	18a1883a 	add	r16,r3,r2
 4004808:	0009883a 	mov	r4,zero
 400480c:	40025900 	call	4002590 <get_sprite>
 4004810:	80800015 	stw	r2,0(r16)
	map[19 * PACMAN_MAP_WIDTH + 3] = get_sprite(PACMAN);
	map[19 * PACMAN_MAP_WIDTH + 7] = get_sprite(PACMAN);
	map[19 * PACMAN_MAP_WIDTH + 35] = get_sprite(PACMAN);
	for (int y = 20; y <= 21; ++y)
		map[y * PACMAN_MAP_WIDTH + 36] = get_sprite(PACMAN);
	for (int y = 20; y <= 24; ++y) {
 4004814:	e0bffb17 	ldw	r2,-20(fp)
 4004818:	10800044 	addi	r2,r2,1
 400481c:	e0bffb15 	stw	r2,-20(fp)
 4004820:	e0bffb17 	ldw	r2,-20(fp)
 4004824:	10800650 	cmplti	r2,r2,25
 4004828:	103fe81e 	bne	r2,zero,40047cc <__alt_data_end+0xfc0047cc>
		map[y * PACMAN_MAP_WIDTH + 2] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 8] = get_sprite(PACMAN);
	}
	map[25 * PACMAN_MAP_WIDTH + 3] = get_sprite(PACMAN);
 400482c:	e0bffe17 	ldw	r2,-8(fp)
 4004830:	1403eb04 	addi	r16,r2,4012
 4004834:	0009883a 	mov	r4,zero
 4004838:	40025900 	call	4002590 <get_sprite>
 400483c:	80800015 	stw	r2,0(r16)
	map[25 * PACMAN_MAP_WIDTH + 7] = get_sprite(PACMAN);
 4004840:	e0bffe17 	ldw	r2,-8(fp)
 4004844:	1403ef04 	addi	r16,r2,4028
 4004848:	0009883a 	mov	r4,zero
 400484c:	40025900 	call	4002590 <get_sprite>
 4004850:	80800015 	stw	r2,0(r16)
	for (int x = 4; x <= 6; ++x)
 4004854:	00800104 	movi	r2,4
 4004858:	e0bffc15 	stw	r2,-16(fp)
 400485c:	00000d06 	br	4004894 <game_over+0xa74>
		map[26 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 4004860:	e0bffc17 	ldw	r2,-16(fp)
 4004864:	10810404 	addi	r2,r2,1040
 4004868:	1085883a 	add	r2,r2,r2
 400486c:	1085883a 	add	r2,r2,r2
 4004870:	1007883a 	mov	r3,r2
 4004874:	e0bffe17 	ldw	r2,-8(fp)
 4004878:	10e1883a 	add	r16,r2,r3
 400487c:	0009883a 	mov	r4,zero
 4004880:	40025900 	call	4002590 <get_sprite>
 4004884:	80800015 	stw	r2,0(r16)
		map[y * PACMAN_MAP_WIDTH + 2] = get_sprite(PACMAN);
		map[y * PACMAN_MAP_WIDTH + 8] = get_sprite(PACMAN);
	}
	map[25 * PACMAN_MAP_WIDTH + 3] = get_sprite(PACMAN);
	map[25 * PACMAN_MAP_WIDTH + 7] = get_sprite(PACMAN);
	for (int x = 4; x <= 6; ++x)
 4004888:	e0bffc17 	ldw	r2,-16(fp)
 400488c:	10800044 	addi	r2,r2,1
 4004890:	e0bffc15 	stw	r2,-16(fp)
 4004894:	e0bffc17 	ldw	r2,-16(fp)
 4004898:	108001d0 	cmplti	r2,r2,7
 400489c:	103ff01e 	bne	r2,zero,4004860 <__alt_data_end+0xfc004860>
		map[26 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	for (int x = 35; x <= 36; ++x)
 40048a0:	008008c4 	movi	r2,35
 40048a4:	e0bffd15 	stw	r2,-12(fp)
 40048a8:	00000d06 	br	40048e0 <game_over+0xac0>
		map[26 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
 40048ac:	e0bffd17 	ldw	r2,-12(fp)
 40048b0:	10810404 	addi	r2,r2,1040
 40048b4:	1085883a 	add	r2,r2,r2
 40048b8:	1085883a 	add	r2,r2,r2
 40048bc:	1007883a 	mov	r3,r2
 40048c0:	e0bffe17 	ldw	r2,-8(fp)
 40048c4:	10e1883a 	add	r16,r2,r3
 40048c8:	0009883a 	mov	r4,zero
 40048cc:	40025900 	call	4002590 <get_sprite>
 40048d0:	80800015 	stw	r2,0(r16)
	}
	map[25 * PACMAN_MAP_WIDTH + 3] = get_sprite(PACMAN);
	map[25 * PACMAN_MAP_WIDTH + 7] = get_sprite(PACMAN);
	for (int x = 4; x <= 6; ++x)
		map[26 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	for (int x = 35; x <= 36; ++x)
 40048d4:	e0bffd17 	ldw	r2,-12(fp)
 40048d8:	10800044 	addi	r2,r2,1
 40048dc:	e0bffd15 	stw	r2,-12(fp)
 40048e0:	e0bffd17 	ldw	r2,-12(fp)
 40048e4:	10800950 	cmplti	r2,r2,37
 40048e8:	103ff01e 	bne	r2,zero,40048ac <__alt_data_end+0xfc0048ac>
		map[26 * PACMAN_MAP_WIDTH + x] = get_sprite(PACMAN);
	map[23 * PACMAN_MAP_WIDTH + 32] = get_sprite(PACMAN);
 40048ec:	e0bffe17 	ldw	r2,-8(fp)
 40048f0:	1403b804 	addi	r16,r2,3808
 40048f4:	0009883a 	mov	r4,zero
 40048f8:	40025900 	call	4002590 <get_sprite>
 40048fc:	80800015 	stw	r2,0(r16)
	map[24 * PACMAN_MAP_WIDTH + 33] = get_sprite(PACMAN);
 4004900:	e0bffe17 	ldw	r2,-8(fp)
 4004904:	1403e104 	addi	r16,r2,3972
 4004908:	0009883a 	mov	r4,zero
 400490c:	40025900 	call	4002590 <get_sprite>
 4004910:	80800015 	stw	r2,0(r16)
	map[25 * PACMAN_MAP_WIDTH + 34] = get_sprite(PACMAN);
 4004914:	e0bffe17 	ldw	r2,-8(fp)
 4004918:	14040a04 	addi	r16,r2,4136
 400491c:	0009883a 	mov	r4,zero
 4004920:	40025900 	call	4002590 <get_sprite>
 4004924:	80800015 	stw	r2,0(r16)
}
 4004928:	0001883a 	nop
 400492c:	e6ffff04 	addi	sp,fp,-4
 4004930:	dfc00217 	ldw	ra,8(sp)
 4004934:	df000117 	ldw	fp,4(sp)
 4004938:	dc000017 	ldw	r16,0(sp)
 400493c:	dec00304 	addi	sp,sp,12
 4004940:	f800283a 	ret

04004944 <can_walk>:

int can_walk(int *map, int x, int y)
{
 4004944:	defff904 	addi	sp,sp,-28
 4004948:	dfc00615 	stw	ra,24(sp)
 400494c:	df000515 	stw	fp,20(sp)
 4004950:	df000504 	addi	fp,sp,20
 4004954:	e13ffd15 	stw	r4,-12(fp)
 4004958:	e17ffe15 	stw	r5,-8(fp)
 400495c:	e1bfff15 	stw	r6,-4(fp)
	if (x == -1 || y == -1 || x == PACMAN_MAP_WIDTH || y == PACMAN_MAP_HEIGHT) {
 4004960:	e0bffe17 	ldw	r2,-8(fp)
 4004964:	10bfffe0 	cmpeqi	r2,r2,-1
 4004968:	1000091e 	bne	r2,zero,4004990 <can_walk+0x4c>
 400496c:	e0bfff17 	ldw	r2,-4(fp)
 4004970:	10bfffe0 	cmpeqi	r2,r2,-1
 4004974:	1000061e 	bne	r2,zero,4004990 <can_walk+0x4c>
 4004978:	e0bffe17 	ldw	r2,-8(fp)
 400497c:	10800a20 	cmpeqi	r2,r2,40
 4004980:	1000031e 	bne	r2,zero,4004990 <can_walk+0x4c>
 4004984:	e0bfff17 	ldw	r2,-4(fp)
 4004988:	10800798 	cmpnei	r2,r2,30
 400498c:	1000021e 	bne	r2,zero,4004998 <can_walk+0x54>
		return 0;
 4004990:	0005883a 	mov	r2,zero
 4004994:	00001206 	br	40049e0 <can_walk+0x9c>
	}
	int dest_sprite = map_get_sprite(map, x, y);
 4004998:	e1bfff17 	ldw	r6,-4(fp)
 400499c:	e17ffe17 	ldw	r5,-8(fp)
 40049a0:	e13ffd17 	ldw	r4,-12(fp)
 40049a4:	40026600 	call	4002660 <map_get_sprite>
 40049a8:	e0bffb15 	stw	r2,-20(fp)
	int dest_type = sprite_type(dest_sprite);
 40049ac:	e13ffb17 	ldw	r4,-20(fp)
 40049b0:	40023c80 	call	40023c8 <sprite_type>
 40049b4:	e0bffc15 	stw	r2,-16(fp)
	return dest_type != GHOST && dest_type != WALL;
 40049b8:	e0bffc17 	ldw	r2,-16(fp)
 40049bc:	10804020 	cmpeqi	r2,r2,256
 40049c0:	1000051e 	bne	r2,zero,40049d8 <can_walk+0x94>
 40049c4:	e0bffc17 	ldw	r2,-16(fp)
 40049c8:	1080c020 	cmpeqi	r2,r2,768
 40049cc:	1000021e 	bne	r2,zero,40049d8 <can_walk+0x94>
 40049d0:	00800044 	movi	r2,1
 40049d4:	00000106 	br	40049dc <can_walk+0x98>
 40049d8:	0005883a 	mov	r2,zero
 40049dc:	0001883a 	nop
}
 40049e0:	e037883a 	mov	sp,fp
 40049e4:	dfc00117 	ldw	ra,4(sp)
 40049e8:	df000017 	ldw	fp,0(sp)
 40049ec:	dec00204 	addi	sp,sp,8
 40049f0:	f800283a 	ret

040049f4 <spu_set_sprite>:
 */

#include "spu.h"

void spu_set_sprite(int x, int y, int index)
{
 40049f4:	defffb04 	addi	sp,sp,-20
 40049f8:	dfc00415 	stw	ra,16(sp)
 40049fc:	df000315 	stw	fp,12(sp)
 4004a00:	df000304 	addi	fp,sp,12
 4004a04:	e13ffd15 	stw	r4,-12(fp)
 4004a08:	e17ffe15 	stw	r5,-8(fp)
 4004a0c:	e1bfff15 	stw	r6,-4(fp)
	spu_control((x << 14) | (y << 8) | (0x00FF & index));
 4004a10:	e0bffd17 	ldw	r2,-12(fp)
 4004a14:	100693ba 	slli	r3,r2,14
 4004a18:	e0bffe17 	ldw	r2,-8(fp)
 4004a1c:	1004923a 	slli	r2,r2,8
 4004a20:	1886b03a 	or	r3,r3,r2
 4004a24:	e0bfff17 	ldw	r2,-4(fp)
 4004a28:	10803fcc 	andi	r2,r2,255
 4004a2c:	1884b03a 	or	r2,r3,r2
 4004a30:	1009883a 	mov	r4,r2
 4004a34:	400026c0 	call	400026c <spu_control>
}
 4004a38:	0001883a 	nop
 4004a3c:	e037883a 	mov	sp,fp
 4004a40:	dfc00117 	ldw	ra,4(sp)
 4004a44:	df000017 	ldw	fp,0(sp)
 4004a48:	dec00204 	addi	sp,sp,8
 4004a4c:	f800283a 	ret

04004a50 <spu_set_map>:

void spu_set_map(int *map)
{
 4004a50:	defffb04 	addi	sp,sp,-20
 4004a54:	dfc00415 	stw	ra,16(sp)
 4004a58:	df000315 	stw	fp,12(sp)
 4004a5c:	df000304 	addi	fp,sp,12
 4004a60:	e13fff15 	stw	r4,-4(fp)
	for (int y = 0; y < SPU_MAP_HEIGHT; ++y) {
 4004a64:	e03ffd15 	stw	zero,-12(fp)
 4004a68:	00001b06 	br	4004ad8 <spu_set_map+0x88>
		for (int x = 0; x < SPU_MAP_WIDTH; ++x) {
 4004a6c:	e03ffe15 	stw	zero,-8(fp)
 4004a70:	00001306 	br	4004ac0 <spu_set_map+0x70>
			spu_set_sprite(x, y, map[y * SPU_MAP_WIDTH + x]);
 4004a74:	01400a04 	movi	r5,40
 4004a78:	e13ffd17 	ldw	r4,-12(fp)
 4004a7c:	4006cd00 	call	4006cd0 <__mulsi3>
 4004a80:	1007883a 	mov	r3,r2
 4004a84:	e0bffe17 	ldw	r2,-8(fp)
 4004a88:	1885883a 	add	r2,r3,r2
 4004a8c:	1085883a 	add	r2,r2,r2
 4004a90:	1085883a 	add	r2,r2,r2
 4004a94:	1007883a 	mov	r3,r2
 4004a98:	e0bfff17 	ldw	r2,-4(fp)
 4004a9c:	10c5883a 	add	r2,r2,r3
 4004aa0:	10800017 	ldw	r2,0(r2)
 4004aa4:	100d883a 	mov	r6,r2
 4004aa8:	e17ffd17 	ldw	r5,-12(fp)
 4004aac:	e13ffe17 	ldw	r4,-8(fp)
 4004ab0:	40049f40 	call	40049f4 <spu_set_sprite>
}

void spu_set_map(int *map)
{
	for (int y = 0; y < SPU_MAP_HEIGHT; ++y) {
		for (int x = 0; x < SPU_MAP_WIDTH; ++x) {
 4004ab4:	e0bffe17 	ldw	r2,-8(fp)
 4004ab8:	10800044 	addi	r2,r2,1
 4004abc:	e0bffe15 	stw	r2,-8(fp)
 4004ac0:	e0bffe17 	ldw	r2,-8(fp)
 4004ac4:	10800a10 	cmplti	r2,r2,40
 4004ac8:	103fea1e 	bne	r2,zero,4004a74 <__alt_data_end+0xfc004a74>
	spu_control((x << 14) | (y << 8) | (0x00FF & index));
}

void spu_set_map(int *map)
{
	for (int y = 0; y < SPU_MAP_HEIGHT; ++y) {
 4004acc:	e0bffd17 	ldw	r2,-12(fp)
 4004ad0:	10800044 	addi	r2,r2,1
 4004ad4:	e0bffd15 	stw	r2,-12(fp)
 4004ad8:	e0bffd17 	ldw	r2,-12(fp)
 4004adc:	10800790 	cmplti	r2,r2,30
 4004ae0:	103fe21e 	bne	r2,zero,4004a6c <__alt_data_end+0xfc004a6c>
		for (int x = 0; x < SPU_MAP_WIDTH; ++x) {
			spu_set_sprite(x, y, map[y * SPU_MAP_WIDTH + x]);
		}
	}
}
 4004ae4:	0001883a 	nop
 4004ae8:	e037883a 	mov	sp,fp
 4004aec:	dfc00117 	ldw	ra,4(sp)
 4004af0:	df000017 	ldw	fp,0(sp)
 4004af4:	dec00204 	addi	sp,sp,8
 4004af8:	f800283a 	ret

04004afc <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 4004afc:	defff204 	addi	sp,sp,-56
 4004b00:	dfc00d15 	stw	ra,52(sp)
 4004b04:	df000c15 	stw	fp,48(sp)
 4004b08:	df000c04 	addi	fp,sp,48
 4004b0c:	2005883a 	mov	r2,r4
 4004b10:	e17fff15 	stw	r5,-4(fp)
 4004b14:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 4004b18:	008100b4 	movhi	r2,1026
 4004b1c:	10aeb704 	addi	r2,r2,-17700
 4004b20:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 4004b24:	008100b4 	movhi	r2,1026
 4004b28:	10aeb704 	addi	r2,r2,-17700
 4004b2c:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 4004b30:	e0fffe03 	ldbu	r3,-8(fp)
 4004b34:	008100b4 	movhi	r2,1026
 4004b38:	10aeb704 	addi	r2,r2,-17700
 4004b3c:	d8800415 	stw	r2,16(sp)
 4004b40:	00800244 	movi	r2,9
 4004b44:	d8800315 	stw	r2,12(sp)
 4004b48:	d8000215 	stw	zero,8(sp)
 4004b4c:	00800084 	movi	r2,2
 4004b50:	d8800115 	stw	r2,4(sp)
 4004b54:	d8000015 	stw	zero,0(sp)
 4004b58:	01c00184 	movi	r7,6
 4004b5c:	01802004 	movi	r6,128
 4004b60:	000b883a 	mov	r5,zero
 4004b64:	1809883a 	mov	r4,r3
 4004b68:	4005c840 	call	4005c84 <XferCtrlReq>
 4004b6c:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 4004b70:	e0bffc03 	ldbu	r2,-16(fp)
 4004b74:	10000226 	beq	r2,zero,4004b80 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 4004b78:	0005883a 	mov	r2,zero
 4004b7c:	0000dc06 	br	4004ef0 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 4004b80:	e0bffa17 	ldw	r2,-24(fp)
 4004b84:	1080008b 	ldhu	r2,2(r2)
 4004b88:	10bfffcc 	andi	r2,r2,65535
 4004b8c:	10804070 	cmpltui	r2,r2,257
 4004b90:	1000031e 	bne	r2,zero,4004ba0 <HIDMProbe+0xa4>
		total_length = 256;
 4004b94:	00804004 	movi	r2,256
 4004b98:	e0bff90d 	sth	r2,-28(fp)
 4004b9c:	00000306 	br	4004bac <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 4004ba0:	e0bffa17 	ldw	r2,-24(fp)
 4004ba4:	1080008b 	ldhu	r2,2(r2)
 4004ba8:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 4004bac:	e13ffe03 	ldbu	r4,-8(fp)
 4004bb0:	e0fff90b 	ldhu	r3,-28(fp)
 4004bb4:	008100b4 	movhi	r2,1026
 4004bb8:	10aeb704 	addi	r2,r2,-17700
 4004bbc:	d8800415 	stw	r2,16(sp)
 4004bc0:	d8c00315 	stw	r3,12(sp)
 4004bc4:	d8000215 	stw	zero,8(sp)
 4004bc8:	00800084 	movi	r2,2
 4004bcc:	d8800115 	stw	r2,4(sp)
 4004bd0:	d8000015 	stw	zero,0(sp)
 4004bd4:	01c00184 	movi	r7,6
 4004bd8:	01802004 	movi	r6,128
 4004bdc:	000b883a 	mov	r5,zero
 4004be0:	4005c840 	call	4005c84 <XferCtrlReq>
 4004be4:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 4004be8:	e0bffc03 	ldbu	r2,-16(fp)
 4004bec:	10000226 	beq	r2,zero,4004bf8 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 4004bf0:	0005883a 	mov	r2,zero
 4004bf4:	0000be06 	br	4004ef0 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 4004bf8:	e0bffa17 	ldw	r2,-24(fp)
 4004bfc:	10800143 	ldbu	r2,5(r2)
 4004c00:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 4004c04:	0000b306 	br	4004ed4 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 4004c08:	e0bffa17 	ldw	r2,-24(fp)
 4004c0c:	10800043 	ldbu	r2,1(r2)
 4004c10:	10803fcc 	andi	r2,r2,255
 4004c14:	10800120 	cmpeqi	r2,r2,4
 4004c18:	1000091e 	bne	r2,zero,4004c40 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4004c1c:	e0bffa17 	ldw	r2,-24(fp)
 4004c20:	10800003 	ldbu	r2,0(r2)
 4004c24:	10803fcc 	andi	r2,r2,255
 4004c28:	e0fffb17 	ldw	r3,-20(fp)
 4004c2c:	1885883a 	add	r2,r3,r2
 4004c30:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 4004c34:	e0bffb17 	ldw	r2,-20(fp)
 4004c38:	e0bffa15 	stw	r2,-24(fp)
 4004c3c:	0000a506 	br	4004ed4 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 4004c40:	e0bffa17 	ldw	r2,-24(fp)
 4004c44:	10800143 	ldbu	r2,5(r2)
 4004c48:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 4004c4c:	e0bffa17 	ldw	r2,-24(fp)
 4004c50:	10800183 	ldbu	r2,6(r2)
 4004c54:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 4004c58:	e0bffa17 	ldw	r2,-24(fp)
 4004c5c:	108001c3 	ldbu	r2,7(r2)
 4004c60:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 4004c64:	e0bffc83 	ldbu	r2,-14(fp)
 4004c68:	108000d8 	cmpnei	r2,r2,3
 4004c6c:	1000971e 	bne	r2,zero,4004ecc <HIDMProbe+0x3d0>
 4004c70:	e0bffcc3 	ldbu	r2,-13(fp)
 4004c74:	10800058 	cmpnei	r2,r2,1
 4004c78:	1000941e 	bne	r2,zero,4004ecc <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 4004c7c:	e0bffd03 	ldbu	r2,-12(fp)
 4004c80:	10800098 	cmpnei	r2,r2,2
 4004c84:	1000911e 	bne	r2,zero,4004ecc <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 4004c88:	e0fffe03 	ldbu	r3,-8(fp)
 4004c8c:	008100b4 	movhi	r2,1026
 4004c90:	10aef704 	addi	r2,r2,-17444
 4004c94:	180690fa 	slli	r3,r3,3
 4004c98:	10c5883a 	add	r2,r2,r3
 4004c9c:	10800104 	addi	r2,r2,4
 4004ca0:	00c00084 	movi	r3,2
 4004ca4:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 4004ca8:	e0fffe03 	ldbu	r3,-8(fp)
 4004cac:	008100b4 	movhi	r2,1026
 4004cb0:	10aef704 	addi	r2,r2,-17444
 4004cb4:	180690fa 	slli	r3,r3,3
 4004cb8:	10c5883a 	add	r2,r2,r3
 4004cbc:	10800017 	ldw	r2,0(r2)
 4004cc0:	1080008b 	ldhu	r2,2(r2)
 4004cc4:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 4004cc8:	400530c0 	call	400530c <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 4004ccc:	e0fffe03 	ldbu	r3,-8(fp)
 4004cd0:	008100b4 	movhi	r2,1026
 4004cd4:	10aef704 	addi	r2,r2,-17444
 4004cd8:	180690fa 	slli	r3,r3,3
 4004cdc:	10c7883a 	add	r3,r2,r3
 4004ce0:	008100b4 	movhi	r2,1026
 4004ce4:	10a9f304 	addi	r2,r2,-22580
 4004ce8:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 4004cec:	e0fffe03 	ldbu	r3,-8(fp)
 4004cf0:	008100b4 	movhi	r2,1026
 4004cf4:	10aef704 	addi	r2,r2,-17444
 4004cf8:	180690fa 	slli	r3,r3,3
 4004cfc:	10c5883a 	add	r2,r2,r3
 4004d00:	10800017 	ldw	r2,0(r2)
 4004d04:	e0fffd43 	ldbu	r3,-11(fp)
 4004d08:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 4004d0c:	e0bffa17 	ldw	r2,-24(fp)
 4004d10:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 4004d14:	d0a6f185 	stb	r2,-25658(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 4004d18:	e0bffe03 	ldbu	r2,-8(fp)
 4004d1c:	d0a6f145 	stb	r2,-25659(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4004d20:	e0bffa17 	ldw	r2,-24(fp)
 4004d24:	10800003 	ldbu	r2,0(r2)
 4004d28:	10803fcc 	andi	r2,r2,255
 4004d2c:	e0fffb17 	ldw	r3,-20(fp)
 4004d30:	1885883a 	add	r2,r3,r2
 4004d34:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 4004d38:	e0bffb17 	ldw	r2,-20(fp)
 4004d3c:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 4004d40:	00005b06 	br	4004eb0 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 4004d44:	e0bffa17 	ldw	r2,-24(fp)
 4004d48:	10800043 	ldbu	r2,1(r2)
 4004d4c:	10803fcc 	andi	r2,r2,255
 4004d50:	10800160 	cmpeqi	r2,r2,5
 4004d54:	1000091e 	bne	r2,zero,4004d7c <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4004d58:	e0bffa17 	ldw	r2,-24(fp)
 4004d5c:	10800003 	ldbu	r2,0(r2)
 4004d60:	10803fcc 	andi	r2,r2,255
 4004d64:	e0fffb17 	ldw	r3,-20(fp)
 4004d68:	1885883a 	add	r2,r3,r2
 4004d6c:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 4004d70:	e0bffb17 	ldw	r2,-20(fp)
 4004d74:	e0bffa15 	stw	r2,-24(fp)
 4004d78:	00004d06 	br	4004eb0 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 4004d7c:	e0fffe03 	ldbu	r3,-8(fp)
 4004d80:	008100b4 	movhi	r2,1026
 4004d84:	10aef704 	addi	r2,r2,-17444
 4004d88:	180690fa 	slli	r3,r3,3
 4004d8c:	10c5883a 	add	r2,r2,r3
 4004d90:	10800017 	ldw	r2,0(r2)
 4004d94:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 4004d98:	e0fffa17 	ldw	r3,-24(fp)
 4004d9c:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 4004da0:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 4004da4:	e0fffe03 	ldbu	r3,-8(fp)
 4004da8:	008100b4 	movhi	r2,1026
 4004dac:	10aef704 	addi	r2,r2,-17444
 4004db0:	180690fa 	slli	r3,r3,3
 4004db4:	10c5883a 	add	r2,r2,r3
 4004db8:	10800017 	ldw	r2,0(r2)
 4004dbc:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 4004dc0:	e0fffa17 	ldw	r3,-24(fp)
 4004dc4:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 4004dc8:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 4004dcc:	e0fffe03 	ldbu	r3,-8(fp)
 4004dd0:	008100b4 	movhi	r2,1026
 4004dd4:	10aef704 	addi	r2,r2,-17444
 4004dd8:	180690fa 	slli	r3,r3,3
 4004ddc:	10c5883a 	add	r2,r2,r3
 4004de0:	10800017 	ldw	r2,0(r2)
 4004de4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 4004de8:	e0fffa17 	ldw	r3,-24(fp)
 4004dec:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 4004df0:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 4004df4:	e0fffe03 	ldbu	r3,-8(fp)
 4004df8:	008100b4 	movhi	r2,1026
 4004dfc:	10aef704 	addi	r2,r2,-17444
 4004e00:	180690fa 	slli	r3,r3,3
 4004e04:	10c5883a 	add	r2,r2,r3
 4004e08:	10800017 	ldw	r2,0(r2)
 4004e0c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 4004e10:	e0fffa17 	ldw	r3,-24(fp)
 4004e14:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 4004e18:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 4004e1c:	e0fffe03 	ldbu	r3,-8(fp)
 4004e20:	e0bffc43 	ldbu	r2,-15(fp)
 4004e24:	d8000415 	stw	zero,16(sp)
 4004e28:	d8000315 	stw	zero,12(sp)
 4004e2c:	d8000215 	stw	zero,8(sp)
 4004e30:	d8000115 	stw	zero,4(sp)
 4004e34:	d8800015 	stw	r2,0(sp)
 4004e38:	01c00244 	movi	r7,9
 4004e3c:	000d883a 	mov	r6,zero
 4004e40:	000b883a 	mov	r5,zero
 4004e44:	1809883a 	mov	r4,r3
 4004e48:	4005c840 	call	4005c84 <XferCtrlReq>
 4004e4c:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 4004e50:	e0bffc03 	ldbu	r2,-16(fp)
 4004e54:	10000226 	beq	r2,zero,4004e60 <HIDMProbe+0x364>
							return (FALSE);
 4004e58:	0005883a 	mov	r2,zero
 4004e5c:	00002406 	br	4004ef0 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 4004e60:	e0fffe03 	ldbu	r3,-8(fp)
 4004e64:	d0a6f183 	ldbu	r2,-25658(gp)
 4004e68:	10803fcc 	andi	r2,r2,255
 4004e6c:	d8000415 	stw	zero,16(sp)
 4004e70:	d8000315 	stw	zero,12(sp)
 4004e74:	d8800215 	stw	r2,8(sp)
 4004e78:	d8000115 	stw	zero,4(sp)
 4004e7c:	d8000015 	stw	zero,0(sp)
 4004e80:	01c002c4 	movi	r7,11
 4004e84:	01800844 	movi	r6,33
 4004e88:	000b883a 	mov	r5,zero
 4004e8c:	1809883a 	mov	r4,r3
 4004e90:	4005c840 	call	4005c84 <XferCtrlReq>
 4004e94:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 4004e98:	e0bffc03 	ldbu	r2,-16(fp)
 4004e9c:	10000226 	beq	r2,zero,4004ea8 <HIDMProbe+0x3ac>
							return (FALSE);
 4004ea0:	0005883a 	mov	r2,zero
 4004ea4:	00001206 	br	4004ef0 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 4004ea8:	00800044 	movi	r2,1
 4004eac:	00001006 	br	4004ef0 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 4004eb0:	e0fff90b 	ldhu	r3,-28(fp)
 4004eb4:	008100b4 	movhi	r2,1026
 4004eb8:	10aeb704 	addi	r2,r2,-17700
 4004ebc:	1885883a 	add	r2,r3,r2
 4004ec0:	e0fffb17 	ldw	r3,-20(fp)
 4004ec4:	18bf9f36 	bltu	r3,r2,4004d44 <__alt_data_end+0xfc004d44>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 4004ec8:	00000206 	br	4004ed4 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 4004ecc:	0005883a 	mov	r2,zero
 4004ed0:	00000706 	br	4004ef0 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 4004ed4:	e0fff90b 	ldhu	r3,-28(fp)
 4004ed8:	008100b4 	movhi	r2,1026
 4004edc:	10aeb704 	addi	r2,r2,-17700
 4004ee0:	1885883a 	add	r2,r3,r2
 4004ee4:	e0fffb17 	ldw	r3,-20(fp)
 4004ee8:	18bf4736 	bltu	r3,r2,4004c08 <__alt_data_end+0xfc004c08>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 4004eec:	0005883a 	mov	r2,zero
}
 4004ef0:	e037883a 	mov	sp,fp
 4004ef4:	dfc00117 	ldw	ra,4(sp)
 4004ef8:	df000017 	ldw	fp,0(sp)
 4004efc:	dec00204 	addi	sp,sp,8
 4004f00:	f800283a 	ret

04004f04 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 4004f04:	defff204 	addi	sp,sp,-56
 4004f08:	dfc00d15 	stw	ra,52(sp)
 4004f0c:	df000c15 	stw	fp,48(sp)
 4004f10:	df000c04 	addi	fp,sp,48
 4004f14:	2005883a 	mov	r2,r4
 4004f18:	e17fff15 	stw	r5,-4(fp)
 4004f1c:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 4004f20:	008100b4 	movhi	r2,1026
 4004f24:	10aeb704 	addi	r2,r2,-17700
 4004f28:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 4004f2c:	008100b4 	movhi	r2,1026
 4004f30:	10aeb704 	addi	r2,r2,-17700
 4004f34:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 4004f38:	e0fffe03 	ldbu	r3,-8(fp)
 4004f3c:	008100b4 	movhi	r2,1026
 4004f40:	10aeb704 	addi	r2,r2,-17700
 4004f44:	d8800415 	stw	r2,16(sp)
 4004f48:	00800244 	movi	r2,9
 4004f4c:	d8800315 	stw	r2,12(sp)
 4004f50:	d8000215 	stw	zero,8(sp)
 4004f54:	00800084 	movi	r2,2
 4004f58:	d8800115 	stw	r2,4(sp)
 4004f5c:	d8000015 	stw	zero,0(sp)
 4004f60:	01c00184 	movi	r7,6
 4004f64:	01802004 	movi	r6,128
 4004f68:	000b883a 	mov	r5,zero
 4004f6c:	1809883a 	mov	r4,r3
 4004f70:	4005c840 	call	4005c84 <XferCtrlReq>
 4004f74:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 4004f78:	e0bffc03 	ldbu	r2,-16(fp)
 4004f7c:	10000226 	beq	r2,zero,4004f88 <HIDKProbe+0x84>
		return (FALSE);
 4004f80:	0005883a 	mov	r2,zero
 4004f84:	0000dc06 	br	40052f8 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 4004f88:	e0bffa17 	ldw	r2,-24(fp)
 4004f8c:	1080008b 	ldhu	r2,2(r2)
 4004f90:	10bfffcc 	andi	r2,r2,65535
 4004f94:	10804070 	cmpltui	r2,r2,257
 4004f98:	1000031e 	bne	r2,zero,4004fa8 <HIDKProbe+0xa4>
		total_length = 256;
 4004f9c:	00804004 	movi	r2,256
 4004fa0:	e0bff90d 	sth	r2,-28(fp)
 4004fa4:	00000306 	br	4004fb4 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 4004fa8:	e0bffa17 	ldw	r2,-24(fp)
 4004fac:	1080008b 	ldhu	r2,2(r2)
 4004fb0:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 4004fb4:	e13ffe03 	ldbu	r4,-8(fp)
 4004fb8:	e0fff90b 	ldhu	r3,-28(fp)
 4004fbc:	008100b4 	movhi	r2,1026
 4004fc0:	10aeb704 	addi	r2,r2,-17700
 4004fc4:	d8800415 	stw	r2,16(sp)
 4004fc8:	d8c00315 	stw	r3,12(sp)
 4004fcc:	d8000215 	stw	zero,8(sp)
 4004fd0:	00800084 	movi	r2,2
 4004fd4:	d8800115 	stw	r2,4(sp)
 4004fd8:	d8000015 	stw	zero,0(sp)
 4004fdc:	01c00184 	movi	r7,6
 4004fe0:	01802004 	movi	r6,128
 4004fe4:	000b883a 	mov	r5,zero
 4004fe8:	4005c840 	call	4005c84 <XferCtrlReq>
 4004fec:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 4004ff0:	e0bffc03 	ldbu	r2,-16(fp)
 4004ff4:	10000226 	beq	r2,zero,4005000 <HIDKProbe+0xfc>
		return (FALSE);
 4004ff8:	0005883a 	mov	r2,zero
 4004ffc:	0000be06 	br	40052f8 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 4005000:	e0bffa17 	ldw	r2,-24(fp)
 4005004:	10800143 	ldbu	r2,5(r2)
 4005008:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 400500c:	0000b306 	br	40052dc <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 4005010:	e0bffa17 	ldw	r2,-24(fp)
 4005014:	10800043 	ldbu	r2,1(r2)
 4005018:	10803fcc 	andi	r2,r2,255
 400501c:	10800120 	cmpeqi	r2,r2,4
 4005020:	1000091e 	bne	r2,zero,4005048 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4005024:	e0bffa17 	ldw	r2,-24(fp)
 4005028:	10800003 	ldbu	r2,0(r2)
 400502c:	10803fcc 	andi	r2,r2,255
 4005030:	e0fffb17 	ldw	r3,-20(fp)
 4005034:	1885883a 	add	r2,r3,r2
 4005038:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 400503c:	e0bffb17 	ldw	r2,-20(fp)
 4005040:	e0bffa15 	stw	r2,-24(fp)
 4005044:	0000a506 	br	40052dc <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 4005048:	e0bffa17 	ldw	r2,-24(fp)
 400504c:	10800143 	ldbu	r2,5(r2)
 4005050:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 4005054:	e0bffa17 	ldw	r2,-24(fp)
 4005058:	10800183 	ldbu	r2,6(r2)
 400505c:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 4005060:	e0bffa17 	ldw	r2,-24(fp)
 4005064:	108001c3 	ldbu	r2,7(r2)
 4005068:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 400506c:	e0bffc83 	ldbu	r2,-14(fp)
 4005070:	108000d8 	cmpnei	r2,r2,3
 4005074:	1000971e 	bne	r2,zero,40052d4 <HIDKProbe+0x3d0>
 4005078:	e0bffcc3 	ldbu	r2,-13(fp)
 400507c:	10800058 	cmpnei	r2,r2,1
 4005080:	1000941e 	bne	r2,zero,40052d4 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 4005084:	e0bffd03 	ldbu	r2,-12(fp)
 4005088:	10800058 	cmpnei	r2,r2,1
 400508c:	1000911e 	bne	r2,zero,40052d4 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 4005090:	e0fffe03 	ldbu	r3,-8(fp)
 4005094:	008100b4 	movhi	r2,1026
 4005098:	10aef704 	addi	r2,r2,-17444
 400509c:	180690fa 	slli	r3,r3,3
 40050a0:	10c5883a 	add	r2,r2,r3
 40050a4:	10800104 	addi	r2,r2,4
 40050a8:	00c00044 	movi	r3,1
 40050ac:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 40050b0:	e0fffe03 	ldbu	r3,-8(fp)
 40050b4:	008100b4 	movhi	r2,1026
 40050b8:	10aef704 	addi	r2,r2,-17444
 40050bc:	180690fa 	slli	r3,r3,3
 40050c0:	10c5883a 	add	r2,r2,r3
 40050c4:	10800017 	ldw	r2,0(r2)
 40050c8:	1080008b 	ldhu	r2,2(r2)
 40050cc:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 40050d0:	400530c0 	call	400530c <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 40050d4:	e0fffe03 	ldbu	r3,-8(fp)
 40050d8:	008100b4 	movhi	r2,1026
 40050dc:	10aef704 	addi	r2,r2,-17444
 40050e0:	180690fa 	slli	r3,r3,3
 40050e4:	10c7883a 	add	r3,r2,r3
 40050e8:	008100b4 	movhi	r2,1026
 40050ec:	10a9f304 	addi	r2,r2,-22580
 40050f0:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 40050f4:	e0fffe03 	ldbu	r3,-8(fp)
 40050f8:	008100b4 	movhi	r2,1026
 40050fc:	10aef704 	addi	r2,r2,-17444
 4005100:	180690fa 	slli	r3,r3,3
 4005104:	10c5883a 	add	r2,r2,r3
 4005108:	10800017 	ldw	r2,0(r2)
 400510c:	e0fffd43 	ldbu	r3,-11(fp)
 4005110:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 4005114:	e0bffa17 	ldw	r2,-24(fp)
 4005118:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 400511c:	d0a6f185 	stb	r2,-25658(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 4005120:	e0bffe03 	ldbu	r2,-8(fp)
 4005124:	d0a6f145 	stb	r2,-25659(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 4005128:	e0bffa17 	ldw	r2,-24(fp)
 400512c:	10800003 	ldbu	r2,0(r2)
 4005130:	10803fcc 	andi	r2,r2,255
 4005134:	e0fffb17 	ldw	r3,-20(fp)
 4005138:	1885883a 	add	r2,r3,r2
 400513c:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 4005140:	e0bffb17 	ldw	r2,-20(fp)
 4005144:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 4005148:	00005b06 	br	40052b8 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 400514c:	e0bffa17 	ldw	r2,-24(fp)
 4005150:	10800043 	ldbu	r2,1(r2)
 4005154:	10803fcc 	andi	r2,r2,255
 4005158:	10800160 	cmpeqi	r2,r2,5
 400515c:	1000091e 	bne	r2,zero,4005184 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4005160:	e0bffa17 	ldw	r2,-24(fp)
 4005164:	10800003 	ldbu	r2,0(r2)
 4005168:	10803fcc 	andi	r2,r2,255
 400516c:	e0fffb17 	ldw	r3,-20(fp)
 4005170:	1885883a 	add	r2,r3,r2
 4005174:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 4005178:	e0bffb17 	ldw	r2,-20(fp)
 400517c:	e0bffa15 	stw	r2,-24(fp)
 4005180:	00004d06 	br	40052b8 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 4005184:	e0fffe03 	ldbu	r3,-8(fp)
 4005188:	008100b4 	movhi	r2,1026
 400518c:	10aef704 	addi	r2,r2,-17444
 4005190:	180690fa 	slli	r3,r3,3
 4005194:	10c5883a 	add	r2,r2,r3
 4005198:	10800017 	ldw	r2,0(r2)
 400519c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 40051a0:	e0fffa17 	ldw	r3,-24(fp)
 40051a4:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 40051a8:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 40051ac:	e0fffe03 	ldbu	r3,-8(fp)
 40051b0:	008100b4 	movhi	r2,1026
 40051b4:	10aef704 	addi	r2,r2,-17444
 40051b8:	180690fa 	slli	r3,r3,3
 40051bc:	10c5883a 	add	r2,r2,r3
 40051c0:	10800017 	ldw	r2,0(r2)
 40051c4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 40051c8:	e0fffa17 	ldw	r3,-24(fp)
 40051cc:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 40051d0:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 40051d4:	e0fffe03 	ldbu	r3,-8(fp)
 40051d8:	008100b4 	movhi	r2,1026
 40051dc:	10aef704 	addi	r2,r2,-17444
 40051e0:	180690fa 	slli	r3,r3,3
 40051e4:	10c5883a 	add	r2,r2,r3
 40051e8:	10800017 	ldw	r2,0(r2)
 40051ec:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 40051f0:	e0fffa17 	ldw	r3,-24(fp)
 40051f4:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 40051f8:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 40051fc:	e0fffe03 	ldbu	r3,-8(fp)
 4005200:	008100b4 	movhi	r2,1026
 4005204:	10aef704 	addi	r2,r2,-17444
 4005208:	180690fa 	slli	r3,r3,3
 400520c:	10c5883a 	add	r2,r2,r3
 4005210:	10800017 	ldw	r2,0(r2)
 4005214:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 4005218:	e0fffa17 	ldw	r3,-24(fp)
 400521c:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 4005220:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 4005224:	e0fffe03 	ldbu	r3,-8(fp)
 4005228:	e0bffc43 	ldbu	r2,-15(fp)
 400522c:	d8000415 	stw	zero,16(sp)
 4005230:	d8000315 	stw	zero,12(sp)
 4005234:	d8000215 	stw	zero,8(sp)
 4005238:	d8000115 	stw	zero,4(sp)
 400523c:	d8800015 	stw	r2,0(sp)
 4005240:	01c00244 	movi	r7,9
 4005244:	000d883a 	mov	r6,zero
 4005248:	000b883a 	mov	r5,zero
 400524c:	1809883a 	mov	r4,r3
 4005250:	4005c840 	call	4005c84 <XferCtrlReq>
 4005254:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 4005258:	e0bffc03 	ldbu	r2,-16(fp)
 400525c:	10000226 	beq	r2,zero,4005268 <HIDKProbe+0x364>
							return (FALSE);
 4005260:	0005883a 	mov	r2,zero
 4005264:	00002406 	br	40052f8 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 4005268:	e0fffe03 	ldbu	r3,-8(fp)
 400526c:	d0a6f183 	ldbu	r2,-25658(gp)
 4005270:	10803fcc 	andi	r2,r2,255
 4005274:	d8000415 	stw	zero,16(sp)
 4005278:	d8000315 	stw	zero,12(sp)
 400527c:	d8800215 	stw	r2,8(sp)
 4005280:	d8000115 	stw	zero,4(sp)
 4005284:	d8000015 	stw	zero,0(sp)
 4005288:	01c002c4 	movi	r7,11
 400528c:	01800844 	movi	r6,33
 4005290:	000b883a 	mov	r5,zero
 4005294:	1809883a 	mov	r4,r3
 4005298:	4005c840 	call	4005c84 <XferCtrlReq>
 400529c:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 40052a0:	e0bffc03 	ldbu	r2,-16(fp)
 40052a4:	10000226 	beq	r2,zero,40052b0 <HIDKProbe+0x3ac>
							return (FALSE);
 40052a8:	0005883a 	mov	r2,zero
 40052ac:	00001206 	br	40052f8 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 40052b0:	00800044 	movi	r2,1
 40052b4:	00001006 	br	40052f8 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 40052b8:	e0fff90b 	ldhu	r3,-28(fp)
 40052bc:	008100b4 	movhi	r2,1026
 40052c0:	10aeb704 	addi	r2,r2,-17700
 40052c4:	1885883a 	add	r2,r3,r2
 40052c8:	e0fffb17 	ldw	r3,-20(fp)
 40052cc:	18bf9f36 	bltu	r3,r2,400514c <__alt_data_end+0xfc00514c>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 40052d0:	00000206 	br	40052dc <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 40052d4:	0005883a 	mov	r2,zero
 40052d8:	00000706 	br	40052f8 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 40052dc:	e0fff90b 	ldhu	r3,-28(fp)
 40052e0:	008100b4 	movhi	r2,1026
 40052e4:	10aeb704 	addi	r2,r2,-17700
 40052e8:	1885883a 	add	r2,r3,r2
 40052ec:	e0fffb17 	ldw	r3,-20(fp)
 40052f0:	18bf4736 	bltu	r3,r2,4005010 <__alt_data_end+0xfc005010>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 40052f4:	0005883a 	mov	r2,zero
}
 40052f8:	e037883a 	mov	sp,fp
 40052fc:	dfc00117 	ldw	ra,4(sp)
 4005300:	df000017 	ldw	fp,0(sp)
 4005304:	dec00204 	addi	sp,sp,8
 4005308:	f800283a 	ret

0400530c <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 400530c:	deffff04 	addi	sp,sp,-4
 4005310:	df000015 	stw	fp,0(sp)
 4005314:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 4005318:	008100b4 	movhi	r2,1026
 400531c:	10a9f304 	addi	r2,r2,-22580
 4005320:	00c01004 	movi	r3,64
 4005324:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 4005328:	008100b4 	movhi	r2,1026
 400532c:	10a9f304 	addi	r2,r2,-22580
 4005330:	00c00404 	movi	r3,16
 4005334:	10c00385 	stb	r3,14(r2)
}
 4005338:	0001883a 	nop
 400533c:	e037883a 	mov	sp,fp
 4005340:	df000017 	ldw	fp,0(sp)
 4005344:	dec00104 	addi	sp,sp,4
 4005348:	f800283a 	ret

0400534c <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 400534c:	defffb04 	addi	sp,sp,-20
 4005350:	dfc00415 	stw	ra,16(sp)
 4005354:	df000315 	stw	fp,12(sp)
 4005358:	df000304 	addi	fp,sp,12
 400535c:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 4005360:	d0a6f143 	ldbu	r2,-25659(gp)
 4005364:	10803fcc 	andi	r2,r2,255
 4005368:	100b883a 	mov	r5,r2
 400536c:	01003804 	movi	r4,224
 4005370:	40055280 	call	4005528 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 4005374:	d0a6f143 	ldbu	r2,-25659(gp)
 4005378:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 400537c:	d0a6f143 	ldbu	r2,-25659(gp)
 4005380:	10c03fcc 	andi	r3,r2,255
 4005384:	008100b4 	movhi	r2,1026
 4005388:	10aef704 	addi	r2,r2,-17444
 400538c:	180690fa 	slli	r3,r3,3
 4005390:	10c5883a 	add	r2,r2,r3
 4005394:	10800017 	ldw	r2,0(r2)
 4005398:	10800204 	addi	r2,r2,8
 400539c:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 40053a0:	10803fcc 	andi	r2,r2,255
 40053a4:	d8800015 	stw	r2,0(sp)
 40053a8:	e1ffff17 	ldw	r7,-4(fp)
 40053ac:	01800204 	movi	r6,8
 40053b0:	01400044 	movi	r5,1
 40053b4:	40060a80 	call	40060a8 <XferInTransfer>
 40053b8:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 40053bc:	e0bffe03 	ldbu	r2,-8(fp)
}
 40053c0:	e037883a 	mov	sp,fp
 40053c4:	dfc00117 	ldw	ra,4(sp)
 40053c8:	df000017 	ldw	fp,0(sp)
 40053cc:	dec00204 	addi	sp,sp,8
 40053d0:	f800283a 	ret

040053d4 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 40053d4:	defffb04 	addi	sp,sp,-20
 40053d8:	dfc00415 	stw	ra,16(sp)
 40053dc:	df000315 	stw	fp,12(sp)
 40053e0:	df000304 	addi	fp,sp,12
 40053e4:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 40053e8:	d0a6f143 	ldbu	r2,-25659(gp)
 40053ec:	10803fcc 	andi	r2,r2,255
 40053f0:	100b883a 	mov	r5,r2
 40053f4:	01003804 	movi	r4,224
 40053f8:	40055280 	call	4005528 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 40053fc:	d0a6f143 	ldbu	r2,-25659(gp)
 4005400:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 4005404:	d0a6f143 	ldbu	r2,-25659(gp)
 4005408:	10c03fcc 	andi	r3,r2,255
 400540c:	008100b4 	movhi	r2,1026
 4005410:	10aef704 	addi	r2,r2,-17444
 4005414:	180690fa 	slli	r3,r3,3
 4005418:	10c5883a 	add	r2,r2,r3
 400541c:	10800017 	ldw	r2,0(r2)
 4005420:	10800204 	addi	r2,r2,8
 4005424:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 4005428:	10803fcc 	andi	r2,r2,255
 400542c:	d8800015 	stw	r2,0(sp)
 4005430:	e1ffff17 	ldw	r7,-4(fp)
 4005434:	01800204 	movi	r6,8
 4005438:	01400044 	movi	r5,1
 400543c:	40060a80 	call	40060a8 <XferInTransfer>
 4005440:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 4005444:	e0bffe03 	ldbu	r2,-8(fp)
}
 4005448:	e037883a 	mov	sp,fp
 400544c:	dfc00117 	ldw	ra,4(sp)
 4005450:	df000017 	ldw	fp,0(sp)
 4005454:	dec00204 	addi	sp,sp,8
 4005458:	f800283a 	ret

0400545c <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 400545c:	defffb04 	addi	sp,sp,-20
 4005460:	df000415 	stw	fp,16(sp)
 4005464:	df000404 	addi	fp,sp,16
 4005468:	2007883a 	mov	r3,r4
 400546c:	2805883a 	mov	r2,r5
 4005470:	e1bffe15 	stw	r6,-8(fp)
 4005474:	e1ffff15 	stw	r7,-4(fp)
 4005478:	e0fffc05 	stb	r3,-16(fp)
 400547c:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 4005480:	0005883a 	mov	r2,zero
}
 4005484:	e037883a 	mov	sp,fp
 4005488:	df000017 	ldw	fp,0(sp)
 400548c:	dec00104 	addi	sp,sp,4
 4005490:	f800283a 	ret

04005494 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 4005494:	defffb04 	addi	sp,sp,-20
 4005498:	df000415 	stw	fp,16(sp)
 400549c:	df000404 	addi	fp,sp,16
 40054a0:	2007883a 	mov	r3,r4
 40054a4:	2805883a 	mov	r2,r5
 40054a8:	e1bffe15 	stw	r6,-8(fp)
 40054ac:	e1ffff15 	stw	r7,-4(fp)
 40054b0:	e0fffc05 	stb	r3,-16(fp)
 40054b4:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 40054b8:	0005883a 	mov	r2,zero
}
 40054bc:	e037883a 	mov	sp,fp
 40054c0:	df000017 	ldw	fp,0(sp)
 40054c4:	dec00104 	addi	sp,sp,4
 40054c8:	f800283a 	ret

040054cc <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 40054cc:	defffc04 	addi	sp,sp,-16
 40054d0:	df000315 	stw	fp,12(sp)
 40054d4:	df000304 	addi	fp,sp,12
 40054d8:	2807883a 	mov	r3,r5
 40054dc:	3005883a 	mov	r2,r6
 40054e0:	e13ffd05 	stb	r4,-12(fp)
 40054e4:	e0fffe05 	stb	r3,-8(fp)
 40054e8:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 40054ec:	0001883a 	nop
 40054f0:	e037883a 	mov	sp,fp
 40054f4:	df000017 	ldw	fp,0(sp)
 40054f8:	dec00104 	addi	sp,sp,4
 40054fc:	f800283a 	ret

04005500 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultaneously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 4005500:	defffe04 	addi	sp,sp,-8
 4005504:	df000115 	stw	fp,4(sp)
 4005508:	df000104 	addi	fp,sp,4
 400550c:	2005883a 	mov	r2,r4
 4005510:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 4005514:	0001883a 	nop
 4005518:	e037883a 	mov	sp,fp
 400551c:	df000017 	ldw	fp,0(sp)
 4005520:	dec00104 	addi	sp,sp,4
 4005524:	f800283a 	ret

04005528 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 4005528:	defff704 	addi	sp,sp,-36
 400552c:	dfc00815 	stw	ra,32(sp)
 4005530:	df000715 	stw	fp,28(sp)
 4005534:	df000704 	addi	fp,sp,28
 4005538:	2007883a 	mov	r3,r4
 400553c:	2805883a 	mov	r2,r5
 4005540:	e0fffe05 	stb	r3,-8(fp)
 4005544:	e0bfff05 	stb	r2,-4(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	alt_u8 wdata[2];
	wdata[0] = reg + 2;
 4005548:	e0bffe03 	ldbu	r2,-8(fp)
 400554c:	10800084 	addi	r2,r2,2
 4005550:	e0bffd05 	stb	r2,-12(fp)
	wdata[1] = val;
 4005554:	e0bfff03 	ldbu	r2,-4(fp)
 4005558:	e0bffd45 	stb	r2,-11(fp)
	int code = alt_avalon_spi_command(SPI_BASE, 0, 2, wdata, 0, NULL, 0);
 400555c:	e0bffd04 	addi	r2,fp,-12
 4005560:	d8000215 	stw	zero,8(sp)
 4005564:	d8000115 	stw	zero,4(sp)
 4005568:	d8000015 	stw	zero,0(sp)
 400556c:	100f883a 	mov	r7,r2
 4005570:	01800084 	movi	r6,2
 4005574:	000b883a 	mov	r5,zero
 4005578:	01020034 	movhi	r4,2048
 400557c:	21042804 	addi	r4,r4,4256
 4005580:	40156b00 	call	40156b0 <alt_avalon_spi_command>
 4005584:	e0bffc15 	stw	r2,-16(fp)
	if (code < 0)
 4005588:	e0bffc17 	ldw	r2,-16(fp)
 400558c:	1000030e 	bge	r2,zero,400559c <MAXreg_wr+0x74>
		printf("Reg Write Error!");
 4005590:	01010074 	movhi	r4,1025
 4005594:	211b2f04 	addi	r4,r4,27836
 4005598:	4006e500 	call	4006e50 <printf>
}
 400559c:	0001883a 	nop
 40055a0:	e037883a 	mov	sp,fp
 40055a4:	dfc00117 	ldw	ra,4(sp)
 40055a8:	df000017 	ldw	fp,0(sp)
 40055ac:	dec00204 	addi	sp,sp,8
 40055b0:	f800283a 	ret

040055b4 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 40055b4:	defff304 	addi	sp,sp,-52
 40055b8:	dfc00c15 	stw	ra,48(sp)
 40055bc:	df000b15 	stw	fp,44(sp)
 40055c0:	dc000a15 	stw	r16,40(sp)
 40055c4:	df000b04 	addi	fp,sp,44
 40055c8:	201b883a 	mov	r13,r4
 40055cc:	2809883a 	mov	r4,r5
 40055d0:	e1bffe15 	stw	r6,-8(fp)
 40055d4:	e37ffc05 	stb	r13,-16(fp)
 40055d8:	e13ffd05 	stb	r4,-12(fp)
 40055dc:	d809883a 	mov	r4,sp
 40055e0:	2021883a 	mov	r16,r4
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 wdata[1 + nbytes];
 40055e4:	e13ffd03 	ldbu	r4,-12(fp)
 40055e8:	21000044 	addi	r4,r4,1
 40055ec:	217fffc4 	addi	r5,r4,-1
 40055f0:	e17ff915 	stw	r5,-28(fp)
 40055f4:	200b883a 	mov	r5,r4
 40055f8:	2817883a 	mov	r11,r5
 40055fc:	0019883a 	mov	r12,zero
 4005600:	580ad77a 	srli	r5,r11,29
 4005604:	601090fa 	slli	r8,r12,3
 4005608:	2a10b03a 	or	r8,r5,r8
 400560c:	580e90fa 	slli	r7,r11,3
 4005610:	200b883a 	mov	r5,r4
 4005614:	2813883a 	mov	r9,r5
 4005618:	0015883a 	mov	r10,zero
 400561c:	480ad77a 	srli	r5,r9,29
 4005620:	500690fa 	slli	r3,r10,3
 4005624:	28c6b03a 	or	r3,r5,r3
 4005628:	480490fa 	slli	r2,r9,3
 400562c:	2005883a 	mov	r2,r4
 4005630:	108000c4 	addi	r2,r2,3
 4005634:	1004d0ba 	srli	r2,r2,2
 4005638:	1085883a 	add	r2,r2,r2
 400563c:	1085883a 	add	r2,r2,r2
 4005640:	d8b7c83a 	sub	sp,sp,r2
 4005644:	d8800304 	addi	r2,sp,12
 4005648:	1005883a 	mov	r2,r2
 400564c:	e0bffa15 	stw	r2,-24(fp)
	wdata[0] = reg + 2;
 4005650:	e0bffc03 	ldbu	r2,-16(fp)
 4005654:	10800084 	addi	r2,r2,2
 4005658:	1007883a 	mov	r3,r2
 400565c:	e0bffa17 	ldw	r2,-24(fp)
 4005660:	10c00005 	stb	r3,0(r2)
	for (int i = 0; i < nbytes; i++)
 4005664:	e03ff815 	stw	zero,-32(fp)
 4005668:	00000c06 	br	400569c <MAXbytes_wr+0xe8>
		wdata[1 + i] = data[i];
 400566c:	e0bff817 	ldw	r2,-32(fp)
 4005670:	10800044 	addi	r2,r2,1
 4005674:	e0fff817 	ldw	r3,-32(fp)
 4005678:	e13ffe17 	ldw	r4,-8(fp)
 400567c:	20c7883a 	add	r3,r4,r3
 4005680:	18c00003 	ldbu	r3,0(r3)
 4005684:	e13ffa17 	ldw	r4,-24(fp)
 4005688:	2085883a 	add	r2,r4,r2
 400568c:	10c00005 	stb	r3,0(r2)
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 wdata[1 + nbytes];
	wdata[0] = reg + 2;
	for (int i = 0; i < nbytes; i++)
 4005690:	e0bff817 	ldw	r2,-32(fp)
 4005694:	10800044 	addi	r2,r2,1
 4005698:	e0bff815 	stw	r2,-32(fp)
 400569c:	e0bffd03 	ldbu	r2,-12(fp)
 40056a0:	e0fff817 	ldw	r3,-32(fp)
 40056a4:	18bff116 	blt	r3,r2,400566c <__alt_data_end+0xfc00566c>
		wdata[1 + i] = data[i];
	int code = alt_avalon_spi_command(SPI_BASE, 0, 1 + nbytes, wdata, 0, NULL, 0);
 40056a8:	e0bffd03 	ldbu	r2,-12(fp)
 40056ac:	10800044 	addi	r2,r2,1
 40056b0:	1007883a 	mov	r3,r2
 40056b4:	e0bffa17 	ldw	r2,-24(fp)
 40056b8:	d8000215 	stw	zero,8(sp)
 40056bc:	d8000115 	stw	zero,4(sp)
 40056c0:	d8000015 	stw	zero,0(sp)
 40056c4:	100f883a 	mov	r7,r2
 40056c8:	180d883a 	mov	r6,r3
 40056cc:	000b883a 	mov	r5,zero
 40056d0:	01020034 	movhi	r4,2048
 40056d4:	21042804 	addi	r4,r4,4256
 40056d8:	40156b00 	call	40156b0 <alt_avalon_spi_command>
 40056dc:	e0bffb15 	stw	r2,-20(fp)
	if (code < 0)
 40056e0:	e0bffb17 	ldw	r2,-20(fp)
 40056e4:	1000030e 	bge	r2,zero,40056f4 <MAXbytes_wr+0x140>
		printf("Byte Write Error!");
 40056e8:	01010074 	movhi	r4,1025
 40056ec:	211b3404 	addi	r4,r4,27856
 40056f0:	4006e500 	call	4006e50 <printf>
	return data + nbytes;
 40056f4:	e0bffd03 	ldbu	r2,-12(fp)
 40056f8:	e0fffe17 	ldw	r3,-8(fp)
 40056fc:	1885883a 	add	r2,r3,r2
 4005700:	8037883a 	mov	sp,r16
}
 4005704:	e6ffff04 	addi	sp,fp,-4
 4005708:	dfc00217 	ldw	ra,8(sp)
 400570c:	df000117 	ldw	fp,4(sp)
 4005710:	dc000017 	ldw	r16,0(sp)
 4005714:	dec00304 	addi	sp,sp,12
 4005718:	f800283a 	ret

0400571c <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 400571c:	defff804 	addi	sp,sp,-32
 4005720:	dfc00715 	stw	ra,28(sp)
 4005724:	df000615 	stw	fp,24(sp)
 4005728:	df000604 	addi	fp,sp,24
 400572c:	2005883a 	mov	r2,r4
 4005730:	e0bfff05 	stb	r2,-4(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	alt_u8 wdata[1];
	wdata[0] = reg;
 4005734:	e0bfff03 	ldbu	r2,-4(fp)
 4005738:	e0bffe05 	stb	r2,-8(fp)
	alt_u8 rdata[1];
	int code = alt_avalon_spi_command(SPI_BASE, 0, 1, wdata, 1, rdata, 0);
 400573c:	e0fffe04 	addi	r3,fp,-8
 4005740:	d8000215 	stw	zero,8(sp)
 4005744:	e0bffe44 	addi	r2,fp,-7
 4005748:	d8800115 	stw	r2,4(sp)
 400574c:	00800044 	movi	r2,1
 4005750:	d8800015 	stw	r2,0(sp)
 4005754:	180f883a 	mov	r7,r3
 4005758:	01800044 	movi	r6,1
 400575c:	000b883a 	mov	r5,zero
 4005760:	01020034 	movhi	r4,2048
 4005764:	21042804 	addi	r4,r4,4256
 4005768:	40156b00 	call	40156b0 <alt_avalon_spi_command>
 400576c:	e0bffd15 	stw	r2,-12(fp)
	if (code < 0)
 4005770:	e0bffd17 	ldw	r2,-12(fp)
 4005774:	1000030e 	bge	r2,zero,4005784 <MAXreg_rd+0x68>
		printf("Reg Read Error!");
 4005778:	01010074 	movhi	r4,1025
 400577c:	211b3904 	addi	r4,r4,27876
 4005780:	4006e500 	call	4006e50 <printf>
	return rdata[0];
 4005784:	e0bffe43 	ldbu	r2,-7(fp)
}
 4005788:	e037883a 	mov	sp,fp
 400578c:	dfc00117 	ldw	ra,4(sp)
 4005790:	df000017 	ldw	fp,0(sp)
 4005794:	dec00204 	addi	sp,sp,8
 4005798:	f800283a 	ret

0400579c <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 400579c:	defff604 	addi	sp,sp,-40
 40057a0:	dfc00915 	stw	ra,36(sp)
 40057a4:	df000815 	stw	fp,32(sp)
 40057a8:	df000804 	addi	fp,sp,32
 40057ac:	2007883a 	mov	r3,r4
 40057b0:	2805883a 	mov	r2,r5
 40057b4:	e1bfff15 	stw	r6,-4(fp)
 40057b8:	e0fffd05 	stb	r3,-12(fp)
 40057bc:	e0bffe05 	stb	r2,-8(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 wdata[1];
	wdata[0] = reg;
 40057c0:	e0bffd03 	ldbu	r2,-12(fp)
 40057c4:	e0bffc05 	stb	r2,-16(fp)
	int code = alt_avalon_spi_command(SPI_BASE, 0, 1, wdata, nbytes, data, 0);
 40057c8:	e0bffe03 	ldbu	r2,-8(fp)
 40057cc:	e13ffc04 	addi	r4,fp,-16
 40057d0:	d8000215 	stw	zero,8(sp)
 40057d4:	e0ffff17 	ldw	r3,-4(fp)
 40057d8:	d8c00115 	stw	r3,4(sp)
 40057dc:	d8800015 	stw	r2,0(sp)
 40057e0:	200f883a 	mov	r7,r4
 40057e4:	01800044 	movi	r6,1
 40057e8:	000b883a 	mov	r5,zero
 40057ec:	01020034 	movhi	r4,2048
 40057f0:	21042804 	addi	r4,r4,4256
 40057f4:	40156b00 	call	40156b0 <alt_avalon_spi_command>
 40057f8:	e0bffb15 	stw	r2,-20(fp)
	if (code < 0)
 40057fc:	e0bffb17 	ldw	r2,-20(fp)
 4005800:	1000030e 	bge	r2,zero,4005810 <MAXbytes_rd+0x74>
		printf("Byte Read Error!");
 4005804:	01010074 	movhi	r4,1025
 4005808:	211b3d04 	addi	r4,r4,27892
 400580c:	4006e500 	call	4006e50 <printf>
	return data + nbytes;
 4005810:	e0bffe03 	ldbu	r2,-8(fp)
 4005814:	e0ffff17 	ldw	r3,-4(fp)
 4005818:	1885883a 	add	r2,r3,r2
}
 400581c:	e037883a 	mov	sp,fp
 4005820:	dfc00117 	ldw	ra,4(sp)
 4005824:	df000017 	ldw	fp,0(sp)
 4005828:	dec00204 	addi	sp,sp,8
 400582c:	f800283a 	ret

04005830 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 4005830:	defffd04 	addi	sp,sp,-12
 4005834:	dfc00215 	stw	ra,8(sp)
 4005838:	df000115 	stw	fp,4(sp)
 400583c:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 4005840:	0007883a 	mov	r3,zero
 4005844:	00820034 	movhi	r2,2048
 4005848:	10846004 	addi	r2,r2,4480
 400584c:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 4005850:	010003f4 	movhi	r4,15
 4005854:	21109004 	addi	r4,r4,16960
 4005858:	4014a080 	call	4014a08 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 400585c:	00c00044 	movi	r3,1
 4005860:	00820034 	movhi	r2,2048
 4005864:	10846004 	addi	r2,r2,4480
 4005868:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 400586c:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 4005870:	01400804 	movi	r5,32
 4005874:	01001e04 	movi	r4,120
 4005878:	40055280 	call	4005528 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 400587c:	000b883a 	mov	r5,zero
 4005880:	01001e04 	movi	r4,120
 4005884:	40055280 	call	4005528 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 4005888:	00000806 	br	40058ac <MAX3421E_reset+0x7c>
		tmp++;                                      //timeout after 256 attempts
 400588c:	e0bfff03 	ldbu	r2,-4(fp)
 4005890:	10800044 	addi	r2,r2,1
 4005894:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 4005898:	e0bfff03 	ldbu	r2,-4(fp)
 400589c:	1000031e 	bne	r2,zero,40058ac <MAX3421E_reset+0x7c>
			printf("reset timeout!");
 40058a0:	01010074 	movhi	r4,1025
 40058a4:	211b4204 	addi	r4,r4,27912
 40058a8:	4006e500 	call	4006e50 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 40058ac:	01001a04 	movi	r4,104
 40058b0:	400571c0 	call	400571c <MAXreg_rd>
 40058b4:	10803fcc 	andi	r2,r2,255
 40058b8:	1080004c 	andi	r2,r2,1
 40058bc:	103ff326 	beq	r2,zero,400588c <__alt_data_end+0xfc00588c>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 40058c0:	0001883a 	nop
 40058c4:	e037883a 	mov	sp,fp
 40058c8:	dfc00117 	ldw	ra,4(sp)
 40058cc:	df000017 	ldw	fp,0(sp)
 40058d0:	dec00204 	addi	sp,sp,8
 40058d4:	f800283a 	ret

040058d8 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 40058d8:	defffe04 	addi	sp,sp,-8
 40058dc:	df000115 	stw	fp,4(sp)
 40058e0:	df000104 	addi	fp,sp,4
 40058e4:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 40058e8:	00800044 	movi	r2,1
}
 40058ec:	e037883a 	mov	sp,fp
 40058f0:	df000017 	ldw	fp,0(sp)
 40058f4:	dec00104 	addi	sp,sp,4
 40058f8:	f800283a 	ret

040058fc <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 40058fc:	defffd04 	addi	sp,sp,-12
 4005900:	dfc00215 	stw	ra,8(sp)
 4005904:	df000115 	stw	fp,4(sp)
 4005908:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 400590c:	01003e04 	movi	r4,248
 4005910:	400571c0 	call	400571c <MAXreg_rd>
 4005914:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 4005918:	e0ffff03 	ldbu	r3,-4(fp)
 400591c:	00bff004 	movi	r2,-64
 4005920:	1884703a 	and	r2,r3,r2
 4005924:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 4005928:	e0bfff03 	ldbu	r2,-4(fp)
 400592c:	10c01020 	cmpeqi	r3,r2,64
 4005930:	1800221e 	bne	r3,zero,40059bc <MAX_busprobe+0xc0>
 4005934:	10c01048 	cmpgei	r3,r2,65
 4005938:	1800021e 	bne	r3,zero,4005944 <MAX_busprobe+0x48>
 400593c:	10003b26 	beq	r2,zero,4005a2c <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 4005940:	00004a06 	br	4005a6c <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 4005944:	10c02020 	cmpeqi	r3,r2,128
 4005948:	1800031e 	bne	r3,zero,4005958 <MAX_busprobe+0x5c>
 400594c:	10803020 	cmpeqi	r2,r2,192
 4005950:	1000331e 	bne	r2,zero,4005a20 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 4005954:	00004506 	br	4005a6c <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 4005958:	d0a00503 	ldbu	r2,-32748(gp)
 400595c:	10803fcc 	andi	r2,r2,255
 4005960:	108004e0 	cmpeqi	r2,r2,19
 4005964:	10003e1e 	bne	r2,zero,4005a60 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 4005968:	01003604 	movi	r4,216
 400596c:	400571c0 	call	400571c <MAXreg_rd>
 4005970:	10803fcc 	andi	r2,r2,255
 4005974:	1080008c 	andi	r2,r2,2
 4005978:	1000071e 	bne	r2,zero,4005998 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 400597c:	01403244 	movi	r5,201
 4005980:	01003604 	movi	r4,216
 4005984:	40055280 	call	4005528 <MAXreg_wr>
				printf("Starting in full speed\n");
 4005988:	01010074 	movhi	r4,1025
 400598c:	211b4604 	addi	r4,r4,27928
 4005990:	4006f6c0 	call	4006f6c <puts>
 4005994:	00000606 	br	40059b0 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 4005998:	014032c4 	movi	r5,203
 400599c:	01003604 	movi	r4,216
 40059a0:	40055280 	call	4005528 <MAXreg_wr>
				printf("Starting in low speed\n");
 40059a4:	01010074 	movhi	r4,1025
 40059a8:	211b4c04 	addi	r4,r4,27952
 40059ac:	4006f6c0 	call	4006f6c <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 40059b0:	00800404 	movi	r2,16
 40059b4:	d0a00505 	stb	r2,-32748(gp)
		}
		break;
 40059b8:	00002906 	br	4005a60 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 40059bc:	d0a00503 	ldbu	r2,-32748(gp)
 40059c0:	10803fcc 	andi	r2,r2,255
 40059c4:	108004e0 	cmpeqi	r2,r2,19
 40059c8:	1000271e 	bne	r2,zero,4005a68 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 40059cc:	01003604 	movi	r4,216
 40059d0:	400571c0 	call	400571c <MAXreg_rd>
 40059d4:	10803fcc 	andi	r2,r2,255
 40059d8:	1080008c 	andi	r2,r2,2
 40059dc:	1000071e 	bne	r2,zero,40059fc <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 40059e0:	014032c4 	movi	r5,203
 40059e4:	01003604 	movi	r4,216
 40059e8:	40055280 	call	4005528 <MAXreg_wr>
				printf("Starting in low speed\n");
 40059ec:	01010074 	movhi	r4,1025
 40059f0:	211b4c04 	addi	r4,r4,27952
 40059f4:	4006f6c0 	call	4006f6c <puts>
 40059f8:	00000606 	br	4005a14 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 40059fc:	01403244 	movi	r5,201
 4005a00:	01003604 	movi	r4,216
 4005a04:	40055280 	call	4005528 <MAXreg_wr>
				printf("Starting in full speed\n");
 4005a08:	01010074 	movhi	r4,1025
 4005a0c:	211b4604 	addi	r4,r4,27928
 4005a10:	4006f6c0 	call	4006f6c <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 4005a14:	00800404 	movi	r2,16
 4005a18:	d0a00505 	stb	r2,-32748(gp)
		}
		break;
 4005a1c:	00001206 	br	4005a68 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 4005a20:	00800104 	movi	r2,4
 4005a24:	d0a00505 	stb	r2,-32748(gp)
		break;
 4005a28:	00001006 	br	4005a6c <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 4005a2c:	d0a00503 	ldbu	r2,-32748(gp)
 4005a30:	10803fcc 	andi	r2,r2,255
 4005a34:	10803c0c 	andi	r2,r2,240
 4005a38:	10000326 	beq	r2,zero,4005a48 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 4005a3c:	00800044 	movi	r2,1
 4005a40:	d0a00505 	stb	r2,-32748(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 4005a44:	00000906 	br	4005a6c <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 4005a48:	01403244 	movi	r5,201
 4005a4c:	01003604 	movi	r4,216
 4005a50:	40055280 	call	4005528 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 4005a54:	008000c4 	movi	r2,3
 4005a58:	d0a00505 	stb	r2,-32748(gp)
		}
		break;
 4005a5c:	00000306 	br	4005a6c <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 4005a60:	0001883a 	nop
 4005a64:	00000106 	br	4005a6c <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 4005a68:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 4005a6c:	0001883a 	nop
 4005a70:	e037883a 	mov	sp,fp
 4005a74:	dfc00117 	ldw	ra,4(sp)
 4005a78:	df000017 	ldw	fp,0(sp)
 4005a7c:	dec00204 	addi	sp,sp,8
 4005a80:	f800283a 	ret

04005a84 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 4005a84:	defffe04 	addi	sp,sp,-8
 4005a88:	dfc00115 	stw	ra,4(sp)
 4005a8c:	df000015 	stw	fp,0(sp)
 4005a90:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 4005a94:	01400684 	movi	r5,26
 4005a98:	01002204 	movi	r4,136
 4005a9c:	40055280 	call	4005528 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 4005aa0:	40058300 	call	4005830 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 4005aa4:	0009883a 	mov	r4,zero
 4005aa8:	40058d80 	call	40058d8 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 4005aac:	01402004 	movi	r5,128
 4005ab0:	01002e04 	movi	r4,184
 4005ab4:	40055280 	call	4005528 <MAXreg_wr>
	Vbus_power( ON);
 4005ab8:	01000044 	movi	r4,1
 4005abc:	40058d80 	call	40058d8 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 4005ac0:	01403444 	movi	r5,209
 4005ac4:	01003604 	movi	r4,216
 4005ac8:	40055280 	call	4005528 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 4005acc:	01400804 	movi	r5,32
 4005ad0:	01003404 	movi	r4,208
 4005ad4:	40055280 	call	4005528 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 4005ad8:	01400104 	movi	r5,4
 4005adc:	01003a04 	movi	r4,232
 4005ae0:	40055280 	call	4005528 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 4005ae4:	40058fc0 	call	40058fc <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 4005ae8:	01400804 	movi	r5,32
 4005aec:	01003204 	movi	r4,200
 4005af0:	40055280 	call	4005528 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 4005af4:	01400044 	movi	r5,1
 4005af8:	01002004 	movi	r4,128
 4005afc:	40055280 	call	4005528 <MAXreg_wr>
}
 4005b00:	0001883a 	nop
 4005b04:	e037883a 	mov	sp,fp
 4005b08:	dfc00117 	ldw	ra,4(sp)
 4005b0c:	df000017 	ldw	fp,0(sp)
 4005b10:	dec00204 	addi	sp,sp,8
 4005b14:	f800283a 	ret

04005b18 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 4005b18:	defffe04 	addi	sp,sp,-8
 4005b1c:	dfc00115 	stw	ra,4(sp)
 4005b20:	df000015 	stw	fp,0(sp)
 4005b24:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 4005b28:	00820034 	movhi	r2,2048
 4005b2c:	10846804 	addi	r2,r2,4512
 4005b30:	10800037 	ldwio	r2,0(r2)
 4005b34:	1000041e 	bne	r2,zero,4005b48 <MAX3421E_Task+0x30>
		printf("MAX interrupt\n\r");
 4005b38:	01010074 	movhi	r4,1025
 4005b3c:	211b5204 	addi	r4,r4,27976
 4005b40:	4006e500 	call	4006e50 <printf>
		MaxIntHandler();
 4005b44:	4005b840 	call	4005b84 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 4005b48:	00820034 	movhi	r2,2048
 4005b4c:	10846404 	addi	r2,r2,4496
 4005b50:	10800037 	ldwio	r2,0(r2)
 4005b54:	10800058 	cmpnei	r2,r2,1
 4005b58:	1000041e 	bne	r2,zero,4005b6c <MAX3421E_Task+0x54>
		printf("GPX interrupt\n\r");
 4005b5c:	01010074 	movhi	r4,1025
 4005b60:	211b5604 	addi	r4,r4,27992
 4005b64:	4006e500 	call	4006e50 <printf>
		MaxGpxHandler();
 4005b68:	4005c500 	call	4005c50 <MaxGpxHandler>
	}
}
 4005b6c:	0001883a 	nop
 4005b70:	e037883a 	mov	sp,fp
 4005b74:	dfc00117 	ldw	ra,4(sp)
 4005b78:	df000017 	ldw	fp,0(sp)
 4005b7c:	dec00204 	addi	sp,sp,8
 4005b80:	f800283a 	ret

04005b84 <MaxIntHandler>:

void MaxIntHandler(void) {
 4005b84:	defffd04 	addi	sp,sp,-12
 4005b88:	dfc00215 	stw	ra,8(sp)
 4005b8c:	df000115 	stw	fp,4(sp)
 4005b90:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 4005b94:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 4005b98:	01003204 	movi	r4,200
 4005b9c:	400571c0 	call	400571c <MAXreg_rd>
 4005ba0:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 4005ba4:	e0bfff43 	ldbu	r2,-3(fp)
 4005ba8:	100b883a 	mov	r5,r2
 4005bac:	01010074 	movhi	r4,1025
 4005bb0:	211b5a04 	addi	r4,r4,28008
 4005bb4:	4006e500 	call	4006e50 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 4005bb8:	e0bfff43 	ldbu	r2,-3(fp)
 4005bbc:	1080100c 	andi	r2,r2,64
 4005bc0:	10000326 	beq	r2,zero,4005bd0 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 4005bc4:	e0bfff03 	ldbu	r2,-4(fp)
 4005bc8:	10801014 	ori	r2,r2,64
 4005bcc:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 4005bd0:	e0bfff43 	ldbu	r2,-3(fp)
 4005bd4:	1080080c 	andi	r2,r2,32
 4005bd8:	10000426 	beq	r2,zero,4005bec <MaxIntHandler+0x68>
		MAX_busprobe();
 4005bdc:	40058fc0 	call	40058fc <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 4005be0:	e0bfff03 	ldbu	r2,-4(fp)
 4005be4:	10800814 	ori	r2,r2,32
 4005be8:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 4005bec:	e0bfff43 	ldbu	r2,-3(fp)
 4005bf0:	1080020c 	andi	r2,r2,8
 4005bf4:	10000326 	beq	r2,zero,4005c04 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 4005bf8:	000b883a 	mov	r5,zero
 4005bfc:	01000e04 	movi	r4,56
 4005c00:	40055280 	call	4005528 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 4005c04:	e0bfff43 	ldbu	r2,-3(fp)
 4005c08:	1080004c 	andi	r2,r2,1
 4005c0c:	10000626 	beq	r2,zero,4005c28 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 4005c10:	d0a00503 	ldbu	r2,-32748(gp)
 4005c14:	10800044 	addi	r2,r2,1
 4005c18:	d0a00505 	stb	r2,-32748(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 4005c1c:	e0bfff03 	ldbu	r2,-4(fp)
 4005c20:	10800054 	ori	r2,r2,1
 4005c24:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 4005c28:	e0bfff03 	ldbu	r2,-4(fp)
 4005c2c:	100b883a 	mov	r5,r2
 4005c30:	01003204 	movi	r4,200
 4005c34:	40055280 	call	4005528 <MAXreg_wr>
}
 4005c38:	0001883a 	nop
 4005c3c:	e037883a 	mov	sp,fp
 4005c40:	dfc00117 	ldw	ra,4(sp)
 4005c44:	df000017 	ldw	fp,0(sp)
 4005c48:	dec00204 	addi	sp,sp,8
 4005c4c:	f800283a 	ret

04005c50 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 4005c50:	defffd04 	addi	sp,sp,-12
 4005c54:	dfc00215 	stw	ra,8(sp)
 4005c58:	df000115 	stw	fp,4(sp)
 4005c5c:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 4005c60:	01002c04 	movi	r4,176
 4005c64:	400571c0 	call	400571c <MAXreg_rd>
 4005c68:	e0bfff05 	stb	r2,-4(fp)
}
 4005c6c:	0001883a 	nop
 4005c70:	e037883a 	mov	sp,fp
 4005c74:	dfc00117 	ldw	ra,4(sp)
 4005c78:	df000017 	ldw	fp,0(sp)
 4005c7c:	dec00204 	addi	sp,sp,8
 4005c80:	f800283a 	ret

04005c84 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 4005c84:	defff104 	addi	sp,sp,-60
 4005c88:	dfc00e15 	stw	ra,56(sp)
 4005c8c:	df000d15 	stw	fp,52(sp)
 4005c90:	df000d04 	addi	fp,sp,52
 4005c94:	2015883a 	mov	r10,r4
 4005c98:	2813883a 	mov	r9,r5
 4005c9c:	3011883a 	mov	r8,r6
 4005ca0:	380d883a 	mov	r6,r7
 4005ca4:	e1400217 	ldw	r5,8(fp)
 4005ca8:	e1000317 	ldw	r4,12(fp)
 4005cac:	e0c00417 	ldw	r3,16(fp)
 4005cb0:	e0800517 	ldw	r2,20(fp)
 4005cb4:	e2bff805 	stb	r10,-32(fp)
 4005cb8:	e27ff905 	stb	r9,-28(fp)
 4005cbc:	e23ffa05 	stb	r8,-24(fp)
 4005cc0:	e1bffb05 	stb	r6,-20(fp)
 4005cc4:	e17ffc05 	stb	r5,-16(fp)
 4005cc8:	e13ffd05 	stb	r4,-12(fp)
 4005ccc:	e0fffe0d 	sth	r3,-8(fp)
 4005cd0:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 4005cd4:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 4005cd8:	00800044 	movi	r2,1
 4005cdc:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 4005ce0:	e0800617 	ldw	r2,24(fp)
 4005ce4:	1000011e 	bne	r2,zero,4005cec <XferCtrlReq+0x68>
        datastage = 0;
 4005ce8:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 4005cec:	e0bff803 	ldbu	r2,-32(fp)
 4005cf0:	100b883a 	mov	r5,r2
 4005cf4:	01003804 	movi	r4,224
 4005cf8:	40055280 	call	4005528 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 4005cfc:	e0bffa03 	ldbu	r2,-24(fp)
 4005d00:	10803fcc 	andi	r2,r2,255
 4005d04:	1080201c 	xori	r2,r2,128
 4005d08:	10bfe004 	addi	r2,r2,-128
 4005d0c:	1000020e 	bge	r2,zero,4005d18 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 4005d10:	00800044 	movi	r2,1
 4005d14:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 4005d18:	e0bffa03 	ldbu	r2,-24(fp)
 4005d1c:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 4005d20:	e0bffb03 	ldbu	r2,-20(fp)
 4005d24:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 4005d28:	e0bffc03 	ldbu	r2,-16(fp)
 4005d2c:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 4005d30:	e0bffd03 	ldbu	r2,-12(fp)
 4005d34:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 4005d38:	e0bffe0b 	ldhu	r2,-8(fp)
 4005d3c:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 4005d40:	e0bfff0b 	ldhu	r2,-4(fp)
 4005d44:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 4005d48:	e0bff584 	addi	r2,fp,-42
 4005d4c:	100d883a 	mov	r6,r2
 4005d50:	01400204 	movi	r5,8
 4005d54:	01000804 	movi	r4,32
 4005d58:	40055b40 	call	40055b4 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 4005d5c:	e0bff903 	ldbu	r2,-28(fp)
 4005d60:	100b883a 	mov	r5,r2
 4005d64:	01000404 	movi	r4,16
 4005d68:	4005f2c0 	call	4005f2c <XferDispatchPkt>
 4005d6c:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 4005d70:	e0bff543 	ldbu	r2,-43(fp)
 4005d74:	10000226 	beq	r2,zero,4005d80 <XferCtrlReq+0xfc>
        return( rcode );
 4005d78:	e0bff543 	ldbu	r2,-43(fp)
 4005d7c:	00000f06 	br	4005dbc <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 4005d80:	e0bff503 	ldbu	r2,-44(fp)
 4005d84:	1085883a 	add	r2,r2,r2
 4005d88:	1087883a 	add	r3,r2,r2
 4005d8c:	d0a00304 	addi	r2,gp,-32756
 4005d90:	1885883a 	add	r2,r3,r2
 4005d94:	10800017 	ldw	r2,0(r2)
 4005d98:	e13ff803 	ldbu	r4,-32(fp)
 4005d9c:	e17ff903 	ldbu	r5,-28(fp)
 4005da0:	e1bfff0b 	ldhu	r6,-4(fp)
 4005da4:	e0fff417 	ldw	r3,-48(fp)
 4005da8:	d8c00015 	stw	r3,0(sp)
 4005dac:	e1c00617 	ldw	r7,24(fp)
 4005db0:	103ee83a 	callr	r2
 4005db4:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 4005db8:	e0bff543 	ldbu	r2,-43(fp)
}
 4005dbc:	e037883a 	mov	sp,fp
 4005dc0:	dfc00117 	ldw	ra,4(sp)
 4005dc4:	df000017 	ldw	fp,0(sp)
 4005dc8:	dec00204 	addi	sp,sp,8
 4005dcc:	f800283a 	ret

04005dd0 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 4005dd0:	defff804 	addi	sp,sp,-32
 4005dd4:	dfc00715 	stw	ra,28(sp)
 4005dd8:	df000615 	stw	fp,24(sp)
 4005ddc:	df000604 	addi	fp,sp,24
 4005de0:	2807883a 	mov	r3,r5
 4005de4:	3005883a 	mov	r2,r6
 4005de8:	e1ffff15 	stw	r7,-4(fp)
 4005dec:	e13ffc05 	stb	r4,-16(fp)
 4005df0:	e0fffd05 	stb	r3,-12(fp)
 4005df4:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 4005df8:	e0800217 	ldw	r2,8(fp)
 4005dfc:	10002826 	beq	r2,zero,4005ea0 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 4005e00:	e0fffc03 	ldbu	r3,-16(fp)
 4005e04:	008100b4 	movhi	r2,1026
 4005e08:	10aef704 	addi	r2,r2,-17444
 4005e0c:	180690fa 	slli	r3,r3,3
 4005e10:	10c5883a 	add	r2,r2,r3
 4005e14:	10c00017 	ldw	r3,0(r2)
 4005e18:	e0bffd03 	ldbu	r2,-12(fp)
 4005e1c:	100490fa 	slli	r2,r2,3
 4005e20:	1885883a 	add	r2,r3,r2
 4005e24:	00c00804 	movi	r3,32
 4005e28:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 4005e2c:	e13ffc03 	ldbu	r4,-16(fp)
 4005e30:	e17ffd03 	ldbu	r5,-12(fp)
 4005e34:	e1bffe0b 	ldhu	r6,-8(fp)
 4005e38:	e0fffc03 	ldbu	r3,-16(fp)
 4005e3c:	008100b4 	movhi	r2,1026
 4005e40:	10aef704 	addi	r2,r2,-17444
 4005e44:	180690fa 	slli	r3,r3,3
 4005e48:	10c5883a 	add	r2,r2,r3
 4005e4c:	10c00017 	ldw	r3,0(r2)
 4005e50:	e0bffd03 	ldbu	r2,-12(fp)
 4005e54:	100490fa 	slli	r2,r2,3
 4005e58:	1885883a 	add	r2,r3,r2
 4005e5c:	1080008b 	ldhu	r2,2(r2)
 4005e60:	10803fcc 	andi	r2,r2,255
 4005e64:	d8800015 	stw	r2,0(sp)
 4005e68:	e1ffff17 	ldw	r7,-4(fp)
 4005e6c:	40060a80 	call	40060a8 <XferInTransfer>
 4005e70:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 4005e74:	e0bffb03 	ldbu	r2,-20(fp)
 4005e78:	10000226 	beq	r2,zero,4005e84 <XferCtrlData+0xb4>
        return( rcode );
 4005e7c:	e0bffb03 	ldbu	r2,-20(fp)
 4005e80:	00000806 	br	4005ea4 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 4005e84:	e0bffd03 	ldbu	r2,-12(fp)
 4005e88:	100b883a 	mov	r5,r2
 4005e8c:	01002804 	movi	r4,160
 4005e90:	4005f2c0 	call	4005f2c <XferDispatchPkt>
 4005e94:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 4005e98:	e0bffb03 	ldbu	r2,-20(fp)
 4005e9c:	00000106 	br	4005ea4 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 4005ea0:	00bfffc4 	movi	r2,-1
    }
}
 4005ea4:	e037883a 	mov	sp,fp
 4005ea8:	dfc00117 	ldw	ra,4(sp)
 4005eac:	df000017 	ldw	fp,0(sp)
 4005eb0:	dec00204 	addi	sp,sp,8
 4005eb4:	f800283a 	ret

04005eb8 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 4005eb8:	defff904 	addi	sp,sp,-28
 4005ebc:	dfc00615 	stw	ra,24(sp)
 4005ec0:	df000515 	stw	fp,20(sp)
 4005ec4:	df000504 	addi	fp,sp,20
 4005ec8:	2807883a 	mov	r3,r5
 4005ecc:	3005883a 	mov	r2,r6
 4005ed0:	e1ffff15 	stw	r7,-4(fp)
 4005ed4:	e13ffc05 	stb	r4,-16(fp)
 4005ed8:	e0fffd05 	stb	r3,-12(fp)
 4005edc:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 4005ee0:	e0800217 	ldw	r2,8(fp)
 4005ee4:	10000626 	beq	r2,zero,4005f00 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 4005ee8:	e0bffd03 	ldbu	r2,-12(fp)
 4005eec:	100b883a 	mov	r5,r2
 4005ef0:	01002804 	movi	r4,160
 4005ef4:	4005f2c0 	call	4005f2c <XferDispatchPkt>
 4005ef8:	e0bffb05 	stb	r2,-20(fp)
 4005efc:	00000506 	br	4005f14 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 4005f00:	e0bffd03 	ldbu	r2,-12(fp)
 4005f04:	100b883a 	mov	r5,r2
 4005f08:	01002004 	movi	r4,128
 4005f0c:	4005f2c0 	call	4005f2c <XferDispatchPkt>
 4005f10:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 4005f14:	e0bffb03 	ldbu	r2,-20(fp)
}
 4005f18:	e037883a 	mov	sp,fp
 4005f1c:	dfc00117 	ldw	ra,4(sp)
 4005f20:	df000017 	ldw	fp,0(sp)
 4005f24:	dec00204 	addi	sp,sp,8
 4005f28:	f800283a 	ret

04005f2c <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 4005f2c:	defff904 	addi	sp,sp,-28
 4005f30:	dfc00615 	stw	ra,24(sp)
 4005f34:	df000515 	stw	fp,20(sp)
 4005f38:	df000504 	addi	fp,sp,20
 4005f3c:	2007883a 	mov	r3,r4
 4005f40:	2805883a 	mov	r2,r5
 4005f44:	e0fffe05 	stb	r3,-8(fp)
 4005f48:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4005f4c:	d0a70617 	ldw	r2,-25576(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 4005f50:	0140fa04 	movi	r5,1000
 4005f54:	1009883a 	mov	r4,r2
 4005f58:	4006cd00 	call	4006cd0 <__mulsi3>
 4005f5c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4005f60:	d0a70517 	ldw	r2,-25580(gp)
 4005f64:	100b883a 	mov	r5,r2
 4005f68:	1809883a 	mov	r4,r3
 4005f6c:	4006c140 	call	4006c14 <__udivsi3>
 4005f70:	1084e204 	addi	r2,r2,5000
 4005f74:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 4005f78:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 4005f7c:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 4005f80:	e0fffe03 	ldbu	r3,-8(fp)
 4005f84:	e0bfff03 	ldbu	r2,-4(fp)
 4005f88:	1884b03a 	or	r2,r3,r2
 4005f8c:	10803fcc 	andi	r2,r2,255
 4005f90:	100b883a 	mov	r5,r2
 4005f94:	01003c04 	movi	r4,240
 4005f98:	40055280 	call	4005528 <MAXreg_wr>
        rcode = 0xff;
 4005f9c:	00bfffc4 	movi	r2,-1
 4005fa0:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 4005fa4:	00000d06 	br	4005fdc <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 4005fa8:	01003204 	movi	r4,200
 4005fac:	400571c0 	call	400571c <MAXreg_rd>
 4005fb0:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 4005fb4:	e0bffd03 	ldbu	r2,-12(fp)
 4005fb8:	10803fcc 	andi	r2,r2,255
 4005fbc:	1080201c 	xori	r2,r2,128
 4005fc0:	10bfe004 	addi	r2,r2,-128
 4005fc4:	1000050e 	bge	r2,zero,4005fdc <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 4005fc8:	01402004 	movi	r5,128
 4005fcc:	01003204 	movi	r4,200
 4005fd0:	40055280 	call	4005528 <MAXreg_wr>
                rcode = 0x00;
 4005fd4:	e03ffb05 	stb	zero,-20(fp)
                break;
 4005fd8:	00000c06 	br	400600c <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4005fdc:	d0a70617 	ldw	r2,-25576(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 4005fe0:	0140fa04 	movi	r5,1000
 4005fe4:	1009883a 	mov	r4,r2
 4005fe8:	4006cd00 	call	4006cd0 <__mulsi3>
 4005fec:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4005ff0:	d0a70517 	ldw	r2,-25580(gp)
 4005ff4:	100b883a 	mov	r5,r2
 4005ff8:	1809883a 	mov	r4,r3
 4005ffc:	4006c140 	call	4006c14 <__udivsi3>
 4006000:	1007883a 	mov	r3,r2
 4006004:	e0bffc17 	ldw	r2,-16(fp)
 4006008:	18bfe736 	bltu	r3,r2,4005fa8 <__alt_data_end+0xfc005fa8>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 400600c:	e0bffb03 	ldbu	r2,-20(fp)
 4006010:	10000226 	beq	r2,zero,400601c <XferDispatchPkt+0xf0>
            return( rcode );
 4006014:	e0bffb03 	ldbu	r2,-20(fp)
 4006018:	00001e06 	br	4006094 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 400601c:	01003e04 	movi	r4,248
 4006020:	400571c0 	call	400571c <MAXreg_rd>
 4006024:	108003cc 	andi	r2,r2,15
 4006028:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 400602c:	e0bffb03 	ldbu	r2,-20(fp)
 4006030:	10800118 	cmpnei	r2,r2,4
 4006034:	1000071e 	bne	r2,zero,4006054 <XferDispatchPkt+0x128>
            nak_count++;
 4006038:	e0bffb83 	ldbu	r2,-18(fp)
 400603c:	10800044 	addi	r2,r2,1
 4006040:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 4006044:	e0bffb83 	ldbu	r2,-18(fp)
 4006048:	10803218 	cmpnei	r2,r2,200
 400604c:	10000b1e 	bne	r2,zero,400607c <XferDispatchPkt+0x150>
                break;
 4006050:	00000f06 	br	4006090 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 4006054:	e0bffb03 	ldbu	r2,-20(fp)
 4006058:	10800398 	cmpnei	r2,r2,14
 400605c:	1000091e 	bne	r2,zero,4006084 <XferDispatchPkt+0x158>
            retry_count++;
 4006060:	e0bffb43 	ldbu	r2,-19(fp)
 4006064:	10800044 	addi	r2,r2,1
 4006068:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 400606c:	e0bffb47 	ldb	r2,-19(fp)
 4006070:	108000d8 	cmpnei	r2,r2,3
 4006074:	10000526 	beq	r2,zero,400608c <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 4006078:	00000106 	br	4006080 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 400607c:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 4006080:	003fbf06 	br	4005f80 <__alt_data_end+0xfc005f80>
            }
            else {
                continue;
            }
        }
        else break;
 4006084:	0001883a 	nop
 4006088:	00000106 	br	4006090 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 400608c:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 4006090:	e0bffb03 	ldbu	r2,-20(fp)
}
 4006094:	e037883a 	mov	sp,fp
 4006098:	dfc00117 	ldw	ra,4(sp)
 400609c:	df000017 	ldw	fp,0(sp)
 40060a0:	dec00204 	addi	sp,sp,8
 40060a4:	f800283a 	ret

040060a8 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 40060a8:	defff804 	addi	sp,sp,-32
 40060ac:	dfc00715 	stw	ra,28(sp)
 40060b0:	df000615 	stw	fp,24(sp)
 40060b4:	df000604 	addi	fp,sp,24
 40060b8:	2011883a 	mov	r8,r4
 40060bc:	2809883a 	mov	r4,r5
 40060c0:	3007883a 	mov	r3,r6
 40060c4:	e1fffe15 	stw	r7,-8(fp)
 40060c8:	e0800217 	ldw	r2,8(fp)
 40060cc:	e23ffb05 	stb	r8,-20(fp)
 40060d0:	e13ffc05 	stb	r4,-16(fp)
 40060d4:	e0fffd0d 	sth	r3,-12(fp)
 40060d8:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 40060dc:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 40060e0:	e0fffb03 	ldbu	r3,-20(fp)
 40060e4:	008100b4 	movhi	r2,1026
 40060e8:	10aef704 	addi	r2,r2,-17444
 40060ec:	180690fa 	slli	r3,r3,3
 40060f0:	10c5883a 	add	r2,r2,r3
 40060f4:	10c00017 	ldw	r3,0(r2)
 40060f8:	e0bffc03 	ldbu	r2,-16(fp)
 40060fc:	100490fa 	slli	r2,r2,3
 4006100:	1885883a 	add	r2,r3,r2
 4006104:	10800183 	ldbu	r2,6(r2)
 4006108:	10803fcc 	andi	r2,r2,255
 400610c:	100b883a 	mov	r5,r2
 4006110:	01003a04 	movi	r4,232
 4006114:	40055280 	call	4005528 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 4006118:	e0bffc03 	ldbu	r2,-16(fp)
 400611c:	100b883a 	mov	r5,r2
 4006120:	0009883a 	mov	r4,zero
 4006124:	4005f2c0 	call	4005f2c <XferDispatchPkt>
 4006128:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 400612c:	e0bffa83 	ldbu	r2,-22(fp)
 4006130:	10000226 	beq	r2,zero,400613c <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 4006134:	e0bffa83 	ldbu	r2,-22(fp)
 4006138:	00003a06 	br	4006224 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 400613c:	01003204 	movi	r4,200
 4006140:	400571c0 	call	400571c <MAXreg_rd>
 4006144:	10803fcc 	andi	r2,r2,255
 4006148:	1080010c 	andi	r2,r2,4
 400614c:	1000021e 	bne	r2,zero,4006158 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 4006150:	00bffc04 	movi	r2,-16
 4006154:	00003306 	br	4006224 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 4006158:	01000c04 	movi	r4,48
 400615c:	400571c0 	call	400571c <MAXreg_rd>
 4006160:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 4006164:	e0bffac3 	ldbu	r2,-21(fp)
 4006168:	e1bffe17 	ldw	r6,-8(fp)
 400616c:	100b883a 	mov	r5,r2
 4006170:	01000204 	movi	r4,8
 4006174:	400579c0 	call	400579c <MAXbytes_rd>
 4006178:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 400617c:	01400104 	movi	r5,4
 4006180:	01003204 	movi	r4,200
 4006184:	40055280 	call	4005528 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 4006188:	e0fffac3 	ldbu	r3,-21(fp)
 400618c:	e0bffa0b 	ldhu	r2,-24(fp)
 4006190:	1885883a 	add	r2,r3,r2
 4006194:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 4006198:	e0fffac3 	ldbu	r3,-21(fp)
 400619c:	e0bfff03 	ldbu	r2,-4(fp)
 40061a0:	18800336 	bltu	r3,r2,40061b0 <XferInTransfer+0x108>
 40061a4:	e0fffa0b 	ldhu	r3,-24(fp)
 40061a8:	e0bffd0b 	ldhu	r2,-12(fp)
 40061ac:	18bfda36 	bltu	r3,r2,4006118 <__alt_data_end+0xfc006118>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 40061b0:	01003e04 	movi	r4,248
 40061b4:	400571c0 	call	400571c <MAXreg_rd>
 40061b8:	10803fcc 	andi	r2,r2,255
 40061bc:	1080040c 	andi	r2,r2,16
 40061c0:	10000c26 	beq	r2,zero,40061f4 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 40061c4:	e0fffb03 	ldbu	r3,-20(fp)
 40061c8:	008100b4 	movhi	r2,1026
 40061cc:	10aef704 	addi	r2,r2,-17444
 40061d0:	180690fa 	slli	r3,r3,3
 40061d4:	10c5883a 	add	r2,r2,r3
 40061d8:	10c00017 	ldw	r3,0(r2)
 40061dc:	e0bffc03 	ldbu	r2,-16(fp)
 40061e0:	100490fa 	slli	r2,r2,3
 40061e4:	1885883a 	add	r2,r3,r2
 40061e8:	00c00804 	movi	r3,32
 40061ec:	10c00185 	stb	r3,6(r2)
 40061f0:	00000b06 	br	4006220 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 40061f4:	e0fffb03 	ldbu	r3,-20(fp)
 40061f8:	008100b4 	movhi	r2,1026
 40061fc:	10aef704 	addi	r2,r2,-17444
 4006200:	180690fa 	slli	r3,r3,3
 4006204:	10c5883a 	add	r2,r2,r3
 4006208:	10c00017 	ldw	r3,0(r2)
 400620c:	e0bffc03 	ldbu	r2,-16(fp)
 4006210:	100490fa 	slli	r2,r2,3
 4006214:	1885883a 	add	r2,r3,r2
 4006218:	00c00404 	movi	r3,16
 400621c:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 4006220:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 4006224:	e037883a 	mov	sp,fp
 4006228:	dfc00117 	ldw	ra,4(sp)
 400622c:	df000017 	ldw	fp,0(sp)
 4006230:	dec00204 	addi	sp,sp,8
 4006234:	f800283a 	ret

04006238 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 4006238:	defffe04 	addi	sp,sp,-8
 400623c:	df000115 	stw	fp,4(sp)
 4006240:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 4006244:	e03fff05 	stb	zero,-4(fp)
 4006248:	00001006 	br	400628c <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 400624c:	e0ffff03 	ldbu	r3,-4(fp)
 4006250:	008100b4 	movhi	r2,1026
 4006254:	10aef704 	addi	r2,r2,-17444
 4006258:	180690fa 	slli	r3,r3,3
 400625c:	10c5883a 	add	r2,r2,r3
 4006260:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 4006264:	e0ffff03 	ldbu	r3,-4(fp)
 4006268:	008100b4 	movhi	r2,1026
 400626c:	10aef704 	addi	r2,r2,-17444
 4006270:	180690fa 	slli	r3,r3,3
 4006274:	10c5883a 	add	r2,r2,r3
 4006278:	10800104 	addi	r2,r2,4
 400627c:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 4006280:	e0bfff03 	ldbu	r2,-4(fp)
 4006284:	10800044 	addi	r2,r2,1
 4006288:	e0bfff05 	stb	r2,-4(fp)
 400628c:	e0bfff03 	ldbu	r2,-4(fp)
 4006290:	10800270 	cmpltui	r2,r2,9
 4006294:	103fed1e 	bne	r2,zero,400624c <__alt_data_end+0xfc00624c>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 4006298:	008100b4 	movhi	r2,1026
 400629c:	10aef704 	addi	r2,r2,-17444
 40062a0:	d0e6f204 	addi	r3,gp,-25656
 40062a4:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 40062a8:	d026f28d 	sth	zero,-25654(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 40062ac:	00801004 	movi	r2,64
 40062b0:	d0a6f345 	stb	r2,-25651(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 40062b4:	00800404 	movi	r2,16
 40062b8:	d0a6f385 	stb	r2,-25650(gp)
}
 40062bc:	0001883a 	nop
 40062c0:	e037883a 	mov	sp,fp
 40062c4:	df000017 	ldw	fp,0(sp)
 40062c8:	dec00104 	addi	sp,sp,4
 40062cc:	f800283a 	ret

040062d0 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 40062d0:	deffb204 	addi	sp,sp,-312
 40062d4:	dfc04d15 	stw	ra,308(sp)
 40062d8:	df004c15 	stw	fp,304(sp)
 40062dc:	dc004b15 	stw	r16,300(sp)
 40062e0:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 40062e4:	d0a00503 	ldbu	r2,-32748(gp)
 40062e8:	10803fcc 	andi	r2,r2,255
 40062ec:	10803c0c 	andi	r2,r2,240
 40062f0:	10c00820 	cmpeqi	r3,r2,32
 40062f4:	1801121e 	bne	r3,zero,4006740 <USB_Task+0x470>
 40062f8:	10c00848 	cmpgei	r3,r2,33
 40062fc:	1800041e 	bne	r3,zero,4006310 <USB_Task+0x40>
 4006300:	10000a26 	beq	r2,zero,400632c <USB_Task+0x5c>
 4006304:	10800420 	cmpeqi	r2,r2,16
 4006308:	10001b1e 	bne	r2,zero,4006378 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 400630c:	00017a06 	br	40068f8 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 4006310:	10c01020 	cmpeqi	r3,r2,64
 4006314:	18016f1e 	bne	r3,zero,40068d4 <USB_Task+0x604>
 4006318:	10c03fe0 	cmpeqi	r3,r2,255
 400631c:	18016f1e 	bne	r3,zero,40068dc <USB_Task+0x60c>
 4006320:	10800c20 	cmpeqi	r2,r2,48
 4006324:	1001441e 	bne	r2,zero,4006838 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 4006328:	00017306 	br	40068f8 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 400632c:	d0a00503 	ldbu	r2,-32748(gp)
 4006330:	10803fcc 	andi	r2,r2,255
 4006334:	10c000e0 	cmpeqi	r3,r2,3
 4006338:	1800091e 	bne	r3,zero,4006360 <USB_Task+0x90>
 400633c:	10c00120 	cmpeqi	r3,r2,4
 4006340:	18000b1e 	bne	r3,zero,4006370 <USB_Task+0xa0>
 4006344:	10800060 	cmpeqi	r2,r2,1
 4006348:	1000011e 	bne	r2,zero,4006350 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 400634c:	00016a06 	br	40068f8 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 4006350:	40062380 	call	4006238 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 4006354:	008000c4 	movi	r2,3
 4006358:	d0a00505 	stb	r2,-32748(gp)
                    break;
 400635c:	00000506 	br	4006374 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 4006360:	01400104 	movi	r5,4
 4006364:	01003a04 	movi	r4,232
 4006368:	40055280 	call	4005528 <MAXreg_wr>
                    break;
 400636c:	00000106 	br	4006374 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 4006370:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 4006374:	00016006 	br	40068f8 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 4006378:	d0a00503 	ldbu	r2,-32748(gp)
 400637c:	10803fcc 	andi	r2,r2,255
 4006380:	10bffc04 	addi	r2,r2,-16
 4006384:	10c001a8 	cmpgeui	r3,r2,6
 4006388:	1801561e 	bne	r3,zero,40068e4 <USB_Task+0x614>
 400638c:	100690ba 	slli	r3,r2,2
 4006390:	00810034 	movhi	r2,1024
 4006394:	1098e904 	addi	r2,r2,25508
 4006398:	1885883a 	add	r2,r3,r2
 400639c:	10800017 	ldw	r2,0(r2)
 40063a0:	1000683a 	jmp	r2
 40063a4:	040063bc 	xorhi	r16,zero,398
 40063a8:	040063f4 	movhi	r16,399
 40063ac:	04006430 	cmpltui	r16,zero,400
 40063b0:	04006454 	movui	r16,401
 40063b4:	04006494 	movui	r16,402
 40063b8:	040064a8 	cmpgeui	r16,zero,402
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40063bc:	d0a70617 	ldw	r2,-25576(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 40063c0:	0140fa04 	movi	r5,1000
 40063c4:	1009883a 	mov	r4,r2
 40063c8:	4006cd00 	call	4006cd0 <__mulsi3>
 40063cc:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40063d0:	d0a70517 	ldw	r2,-25580(gp)
 40063d4:	100b883a 	mov	r5,r2
 40063d8:	1809883a 	mov	r4,r3
 40063dc:	4006c140 	call	4006c14 <__udivsi3>
 40063e0:	10803204 	addi	r2,r2,200
 40063e4:	d0a6f515 	stw	r2,-25644(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 40063e8:	00800444 	movi	r2,17
 40063ec:	d0a00505 	stb	r2,-32748(gp)
                    break;//case( USB_STATE_ATTACHED )
 40063f0:	0000d206 	br	400673c <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40063f4:	d0a70617 	ldw	r2,-25576(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 40063f8:	0140fa04 	movi	r5,1000
 40063fc:	1009883a 	mov	r4,r2
 4006400:	4006cd00 	call	4006cd0 <__mulsi3>
 4006404:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4006408:	d0a70517 	ldw	r2,-25580(gp)
 400640c:	100b883a 	mov	r5,r2
 4006410:	1809883a 	mov	r4,r3
 4006414:	4006c140 	call	4006c14 <__udivsi3>
 4006418:	1007883a 	mov	r3,r2
 400641c:	d0a6f517 	ldw	r2,-25644(gp)
 4006420:	10c0c32e 	bgeu	r2,r3,4006730 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 4006424:	00800484 	movi	r2,18
 4006428:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 400642c:	0000c006 	br	4006730 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 4006430:	01400044 	movi	r5,1
 4006434:	01003204 	movi	r4,200
 4006438:	40055280 	call	4005528 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 400643c:	01400044 	movi	r5,1
 4006440:	01003a04 	movi	r4,232
 4006444:	40055280 	call	4005528 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 4006448:	008004c4 	movi	r2,19
 400644c:	d0a00505 	stb	r2,-32748(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 4006450:	0000ba06 	br	400673c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 4006454:	01003a04 	movi	r4,232
 4006458:	400571c0 	call	400571c <MAXreg_rd>
 400645c:	10803fcc 	andi	r2,r2,255
 4006460:	1080004c 	andi	r2,r2,1
 4006464:	1000b41e 	bne	r2,zero,4006738 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 4006468:	01003604 	movi	r4,216
 400646c:	400571c0 	call	400571c <MAXreg_rd>
 4006470:	10800214 	ori	r2,r2,8
 4006474:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 4006478:	e0bfb943 	ldbu	r2,-283(fp)
 400647c:	100b883a 	mov	r5,r2
 4006480:	01003604 	movi	r4,216
 4006484:	40055280 	call	4005528 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 4006488:	00800504 	movi	r2,20
 400648c:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 4006490:	0000a906 	br	4006738 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 4006494:	01003204 	movi	r4,200
 4006498:	400571c0 	call	400571c <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 400649c:	00800544 	movi	r2,21
 40064a0:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 40064a4:	0000a506 	br	400673c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 40064a8:	008100b4 	movhi	r2,1026
 40064ac:	10aef704 	addi	r2,r2,-17444
 40064b0:	10800017 	ldw	r2,0(r2)
 40064b4:	00c00204 	movi	r3,8
 40064b8:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 40064bc:	e0bfba04 	addi	r2,fp,-280
 40064c0:	d8800415 	stw	r2,16(sp)
 40064c4:	00800204 	movi	r2,8
 40064c8:	d8800315 	stw	r2,12(sp)
 40064cc:	d8000215 	stw	zero,8(sp)
 40064d0:	00800044 	movi	r2,1
 40064d4:	d8800115 	stw	r2,4(sp)
 40064d8:	d8000015 	stw	zero,0(sp)
 40064dc:	01c00184 	movi	r7,6
 40064e0:	01802004 	movi	r6,128
 40064e4:	000b883a 	mov	r5,zero
 40064e8:	0009883a 	mov	r4,zero
 40064ec:	4005c840 	call	4005c84 <XferCtrlReq>
 40064f0:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 40064f4:	e0bfb983 	ldbu	r2,-282(fp)
 40064f8:	1000861e 	bne	r2,zero,4006714 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 40064fc:	008100b4 	movhi	r2,1026
 4006500:	10aef704 	addi	r2,r2,-17444
 4006504:	10800017 	ldw	r2,0(r2)
 4006508:	e0ffbbc3 	ldbu	r3,-273(fp)
 400650c:	18c03fcc 	andi	r3,r3,255
 4006510:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 4006514:	e0bfba03 	ldbu	r2,-280(fp)
 4006518:	10803fcc 	andi	r2,r2,255
 400651c:	e0ffba04 	addi	r3,fp,-280
 4006520:	d8c00415 	stw	r3,16(sp)
 4006524:	d8800315 	stw	r2,12(sp)
 4006528:	d8000215 	stw	zero,8(sp)
 400652c:	00800044 	movi	r2,1
 4006530:	d8800115 	stw	r2,4(sp)
 4006534:	d8000015 	stw	zero,0(sp)
 4006538:	01c00184 	movi	r7,6
 400653c:	01802004 	movi	r6,128
 4006540:	000b883a 	mov	r5,zero
 4006544:	0009883a 	mov	r4,zero
 4006548:	4005c840 	call	4005c84 <XferCtrlReq>
 400654c:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 4006550:	e0bfbd83 	ldbu	r2,-266(fp)
 4006554:	10803fcc 	andi	r2,r2,255
 4006558:	10003426 	beq	r2,zero,400662c <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 400655c:	e0bfbd83 	ldbu	r2,-266(fp)
 4006560:	10803fcc 	andi	r2,r2,255
 4006564:	e0ffbe84 	addi	r3,fp,-262
 4006568:	d8c00415 	stw	r3,16(sp)
 400656c:	00c00084 	movi	r3,2
 4006570:	d8c00315 	stw	r3,12(sp)
 4006574:	00c10244 	movi	r3,1033
 4006578:	d8c00215 	stw	r3,8(sp)
 400657c:	00c000c4 	movi	r3,3
 4006580:	d8c00115 	stw	r3,4(sp)
 4006584:	d8800015 	stw	r2,0(sp)
 4006588:	01c00184 	movi	r7,6
 400658c:	01802004 	movi	r6,128
 4006590:	000b883a 	mov	r5,zero
 4006594:	0009883a 	mov	r4,zero
 4006598:	4005c840 	call	4005c84 <XferCtrlReq>
 400659c:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 40065a0:	e0bfbd83 	ldbu	r2,-266(fp)
 40065a4:	10803fcc 	andi	r2,r2,255
 40065a8:	e0ffbe83 	ldbu	r3,-262(fp)
 40065ac:	18c03fcc 	andi	r3,r3,255
 40065b0:	e13fbe84 	addi	r4,fp,-262
 40065b4:	d9000415 	stw	r4,16(sp)
 40065b8:	d8c00315 	stw	r3,12(sp)
 40065bc:	00c10244 	movi	r3,1033
 40065c0:	d8c00215 	stw	r3,8(sp)
 40065c4:	00c000c4 	movi	r3,3
 40065c8:	d8c00115 	stw	r3,4(sp)
 40065cc:	d8800015 	stw	r2,0(sp)
 40065d0:	01c00184 	movi	r7,6
 40065d4:	01802004 	movi	r6,128
 40065d8:	000b883a 	mov	r5,zero
 40065dc:	0009883a 	mov	r4,zero
 40065e0:	4005c840 	call	4005c84 <XferCtrlReq>
 40065e4:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 40065e8:	e0bfbd83 	ldbu	r2,-266(fp)
 40065ec:	14003fcc 	andi	r16,r2,255
 40065f0:	e0bfbe83 	ldbu	r2,-262(fp)
 40065f4:	10803fcc 	andi	r2,r2,255
 40065f8:	1004d07a 	srli	r2,r2,1
 40065fc:	10bfffc4 	addi	r2,r2,-1
 4006600:	10c03fcc 	andi	r3,r2,255
 4006604:	e0bfbe84 	addi	r2,fp,-262
 4006608:	10800084 	addi	r2,r2,2
 400660c:	180b883a 	mov	r5,r3
 4006610:	1009883a 	mov	r4,r2
 4006614:	4006a980 	call	4006a98 <ConvUTF8ToStr>
 4006618:	100d883a 	mov	r6,r2
 400661c:	800b883a 	mov	r5,r16
 4006620:	01010074 	movhi	r4,1025
 4006624:	211b5d04 	addi	r4,r4,28020
 4006628:	4006e500 	call	4006e50 <printf>
                		}
                		if (buf.iProduct != 0)
 400662c:	e0bfbdc3 	ldbu	r2,-265(fp)
 4006630:	10803fcc 	andi	r2,r2,255
 4006634:	10003426 	beq	r2,zero,4006708 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 4006638:	e0bfbdc3 	ldbu	r2,-265(fp)
 400663c:	10803fcc 	andi	r2,r2,255
 4006640:	e0ffbe84 	addi	r3,fp,-262
 4006644:	d8c00415 	stw	r3,16(sp)
 4006648:	00c00084 	movi	r3,2
 400664c:	d8c00315 	stw	r3,12(sp)
 4006650:	00c10244 	movi	r3,1033
 4006654:	d8c00215 	stw	r3,8(sp)
 4006658:	00c000c4 	movi	r3,3
 400665c:	d8c00115 	stw	r3,4(sp)
 4006660:	d8800015 	stw	r2,0(sp)
 4006664:	01c00184 	movi	r7,6
 4006668:	01802004 	movi	r6,128
 400666c:	000b883a 	mov	r5,zero
 4006670:	0009883a 	mov	r4,zero
 4006674:	4005c840 	call	4005c84 <XferCtrlReq>
 4006678:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 400667c:	e0bfbdc3 	ldbu	r2,-265(fp)
 4006680:	10803fcc 	andi	r2,r2,255
 4006684:	e0ffbe83 	ldbu	r3,-262(fp)
 4006688:	18c03fcc 	andi	r3,r3,255
 400668c:	e13fbe84 	addi	r4,fp,-262
 4006690:	d9000415 	stw	r4,16(sp)
 4006694:	d8c00315 	stw	r3,12(sp)
 4006698:	00c10244 	movi	r3,1033
 400669c:	d8c00215 	stw	r3,8(sp)
 40066a0:	00c000c4 	movi	r3,3
 40066a4:	d8c00115 	stw	r3,4(sp)
 40066a8:	d8800015 	stw	r2,0(sp)
 40066ac:	01c00184 	movi	r7,6
 40066b0:	01802004 	movi	r6,128
 40066b4:	000b883a 	mov	r5,zero
 40066b8:	0009883a 	mov	r4,zero
 40066bc:	4005c840 	call	4005c84 <XferCtrlReq>
 40066c0:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 40066c4:	e0bfbdc3 	ldbu	r2,-265(fp)
 40066c8:	14003fcc 	andi	r16,r2,255
 40066cc:	e0bfbe83 	ldbu	r2,-262(fp)
 40066d0:	10803fcc 	andi	r2,r2,255
 40066d4:	1004d07a 	srli	r2,r2,1
 40066d8:	10bfffc4 	addi	r2,r2,-1
 40066dc:	10c03fcc 	andi	r3,r2,255
 40066e0:	e0bfbe84 	addi	r2,fp,-262
 40066e4:	10800084 	addi	r2,r2,2
 40066e8:	180b883a 	mov	r5,r3
 40066ec:	1009883a 	mov	r4,r2
 40066f0:	4006a980 	call	4006a98 <ConvUTF8ToStr>
 40066f4:	100d883a 	mov	r6,r2
 40066f8:	800b883a 	mov	r5,r16
 40066fc:	01010074 	movhi	r4,1025
 4006700:	211b6304 	addi	r4,r4,28044
 4006704:	4006e500 	call	4006e50 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 4006708:	00800804 	movi	r2,32
 400670c:	d0a00505 	stb	r2,-32748(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 4006710:	00000a06 	br	400673c <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 4006714:	e0bfb983 	ldbu	r2,-282(fp)
 4006718:	d0a6f645 	stb	r2,-25639(gp)
                        last_usb_task_state = usb_task_state;
 400671c:	d0a00503 	ldbu	r2,-32748(gp)
 4006720:	d0a6f405 	stb	r2,-25648(gp)
                        usb_task_state = USB_STATE_ERROR;
 4006724:	00bfffc4 	movi	r2,-1
 4006728:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 400672c:	00000306 	br	400673c <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 4006730:	0001883a 	nop
 4006734:	00006b06 	br	40068e4 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 4006738:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 400673c:	00006906 	br	40068e4 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 4006740:	00800044 	movi	r2,1
 4006744:	e0bfb905 	stb	r2,-284(fp)
 4006748:	00002d06 	br	4006800 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 400674c:	e0ffb903 	ldbu	r3,-284(fp)
 4006750:	008100b4 	movhi	r2,1026
 4006754:	10aef704 	addi	r2,r2,-17444
 4006758:	180690fa 	slli	r3,r3,3
 400675c:	10c5883a 	add	r2,r2,r3
 4006760:	10800017 	ldw	r2,0(r2)
 4006764:	1000231e 	bne	r2,zero,40067f4 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 4006768:	e13fb903 	ldbu	r4,-284(fp)
 400676c:	008100b4 	movhi	r2,1026
 4006770:	10aef704 	addi	r2,r2,-17444
 4006774:	10c00017 	ldw	r3,0(r2)
 4006778:	008100b4 	movhi	r2,1026
 400677c:	10aef704 	addi	r2,r2,-17444
 4006780:	200890fa 	slli	r4,r4,3
 4006784:	1105883a 	add	r2,r2,r4
 4006788:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 400678c:	e0bfb903 	ldbu	r2,-284(fp)
 4006790:	d8000415 	stw	zero,16(sp)
 4006794:	d8000315 	stw	zero,12(sp)
 4006798:	d8000215 	stw	zero,8(sp)
 400679c:	d8000115 	stw	zero,4(sp)
 40067a0:	d8800015 	stw	r2,0(sp)
 40067a4:	01c00144 	movi	r7,5
 40067a8:	000d883a 	mov	r6,zero
 40067ac:	000b883a 	mov	r5,zero
 40067b0:	0009883a 	mov	r4,zero
 40067b4:	4005c840 	call	4005c84 <XferCtrlReq>
 40067b8:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 40067bc:	e0bfb983 	ldbu	r2,-282(fp)
 40067c0:	1000051e 	bne	r2,zero,40067d8 <USB_Task+0x508>
                        tmp_addr = i;
 40067c4:	e0bfb903 	ldbu	r2,-284(fp)
 40067c8:	d0a6f605 	stb	r2,-25640(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 40067cc:	00800c04 	movi	r2,48
 40067d0:	d0a00505 	stb	r2,-32748(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 40067d4:	00000d06 	br	400680c <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 40067d8:	e0bfb983 	ldbu	r2,-282(fp)
 40067dc:	d0a6f645 	stb	r2,-25639(gp)
                        last_usb_task_state = usb_task_state;
 40067e0:	d0a00503 	ldbu	r2,-32748(gp)
 40067e4:	d0a6f405 	stb	r2,-25648(gp)
                        usb_task_state = USB_STATE_ERROR;
 40067e8:	00bfffc4 	movi	r2,-1
 40067ec:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 40067f0:	00000606 	br	400680c <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 40067f4:	e0bfb903 	ldbu	r2,-284(fp)
 40067f8:	10800044 	addi	r2,r2,1
 40067fc:	e0bfb905 	stb	r2,-284(fp)
 4006800:	e0bfb903 	ldbu	r2,-284(fp)
 4006804:	10800230 	cmpltui	r2,r2,8
 4006808:	103fd01e 	bne	r2,zero,400674c <__alt_data_end+0xfc00674c>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 400680c:	d0a00503 	ldbu	r2,-32748(gp)
 4006810:	10803fcc 	andi	r2,r2,255
 4006814:	10800818 	cmpnei	r2,r2,32
 4006818:	1000341e 	bne	r2,zero,40068ec <USB_Task+0x61c>
                usb_error = 0xfe;
 400681c:	00bfff84 	movi	r2,-2
 4006820:	d0a6f645 	stb	r2,-25639(gp)
                last_usb_task_state = usb_task_state;
 4006824:	d0a00503 	ldbu	r2,-32748(gp)
 4006828:	d0a6f405 	stb	r2,-25648(gp)
                usb_task_state = USB_STATE_ERROR;
 400682c:	00bfffc4 	movi	r2,-1
 4006830:	d0a00505 	stb	r2,-32748(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 4006834:	00002d06 	br	40068ec <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 4006838:	e03fb905 	stb	zero,-284(fp)
 400683c:	00001706 	br	400689c <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 4006840:	e0bfb903 	ldbu	r2,-284(fp)
 4006844:	04010074 	movhi	r16,1025
 4006848:	841c3304 	addi	r16,r16,28876
 400684c:	01400304 	movi	r5,12
 4006850:	1009883a 	mov	r4,r2
 4006854:	4006cd00 	call	4006cd0 <__mulsi3>
 4006858:	8085883a 	add	r2,r16,r2
 400685c:	10800017 	ldw	r2,0(r2)
 4006860:	d0e6f603 	ldbu	r3,-25640(gp)
 4006864:	18c03fcc 	andi	r3,r3,255
 4006868:	000b883a 	mov	r5,zero
 400686c:	1809883a 	mov	r4,r3
 4006870:	103ee83a 	callr	r2
 4006874:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 4006878:	e0bfb983 	ldbu	r2,-282(fp)
 400687c:	10800058 	cmpnei	r2,r2,1
 4006880:	1000031e 	bne	r2,zero,4006890 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 4006884:	00801004 	movi	r2,64
 4006888:	d0a00505 	stb	r2,-32748(gp)
                    break;
 400688c:	00000606 	br	40068a8 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 4006890:	e0bfb903 	ldbu	r2,-284(fp)
 4006894:	10800044 	addi	r2,r2,1
 4006898:	e0bfb905 	stb	r2,-284(fp)
 400689c:	e0bfb903 	ldbu	r2,-284(fp)
 40068a0:	10800130 	cmpltui	r2,r2,4
 40068a4:	103fe61e 	bne	r2,zero,4006840 <__alt_data_end+0xfc006840>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 40068a8:	d0a00503 	ldbu	r2,-32748(gp)
 40068ac:	10803fcc 	andi	r2,r2,255
 40068b0:	10800c18 	cmpnei	r2,r2,48
 40068b4:	10000f1e 	bne	r2,zero,40068f4 <USB_Task+0x624>
                usb_error = 0xfd;
 40068b8:	00bfff44 	movi	r2,-3
 40068bc:	d0a6f645 	stb	r2,-25639(gp)
                last_usb_task_state = usb_task_state;
 40068c0:	d0a00503 	ldbu	r2,-32748(gp)
 40068c4:	d0a6f405 	stb	r2,-25648(gp)
                usb_task_state = USB_STATE_ERROR;
 40068c8:	00bfffc4 	movi	r2,-1
 40068cc:	d0a00505 	stb	r2,-32748(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 40068d0:	00000806 	br	40068f4 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 40068d4:	0001883a 	nop
 40068d8:	00000706 	br	40068f8 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 40068dc:	0001883a 	nop
 40068e0:	00000506 	br	40068f8 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 40068e4:	0001883a 	nop
 40068e8:	00000306 	br	40068f8 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 40068ec:	0001883a 	nop
 40068f0:	00000106 	br	40068f8 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 40068f4:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 40068f8:	0001883a 	nop
 40068fc:	e6ffff04 	addi	sp,fp,-4
 4006900:	dfc00217 	ldw	ra,8(sp)
 4006904:	df000117 	ldw	fp,4(sp)
 4006908:	dc000017 	ldw	r16,0(sp)
 400690c:	dec00304 	addi	sp,sp,12
 4006910:	f800283a 	ret

04006914 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 4006914:	defffd04 	addi	sp,sp,-12
 4006918:	df000215 	stw	fp,8(sp)
 400691c:	df000204 	addi	fp,sp,8
 4006920:	2005883a 	mov	r2,r4
 4006924:	e17fff15 	stw	r5,-4(fp)
 4006928:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 400692c:	0005883a 	mov	r2,zero
}
 4006930:	e037883a 	mov	sp,fp
 4006934:	df000017 	ldw	fp,0(sp)
 4006938:	dec00104 	addi	sp,sp,4
 400693c:	f800283a 	ret

04006940 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 4006940:	defffb04 	addi	sp,sp,-20
 4006944:	df000415 	stw	fp,16(sp)
 4006948:	df000404 	addi	fp,sp,16
 400694c:	2007883a 	mov	r3,r4
 4006950:	2805883a 	mov	r2,r5
 4006954:	e1bffe15 	stw	r6,-8(fp)
 4006958:	e1ffff15 	stw	r7,-4(fp)
 400695c:	e0fffc05 	stb	r3,-16(fp)
 4006960:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 4006964:	0005883a 	mov	r2,zero

}
 4006968:	e037883a 	mov	sp,fp
 400696c:	df000017 	ldw	fp,0(sp)
 4006970:	dec00104 	addi	sp,sp,4
 4006974:	f800283a 	ret

04006978 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 4006978:	defffd04 	addi	sp,sp,-12
 400697c:	df000215 	stw	fp,8(sp)
 4006980:	df000204 	addi	fp,sp,8
 4006984:	2005883a 	mov	r2,r4
 4006988:	e17fff15 	stw	r5,-4(fp)
 400698c:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 4006990:	0005883a 	mov	r2,zero

}
 4006994:	e037883a 	mov	sp,fp
 4006998:	df000017 	ldw	fp,0(sp)
 400699c:	dec00104 	addi	sp,sp,4
 40069a0:	f800283a 	ret

040069a4 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 40069a4:	defffb04 	addi	sp,sp,-20
 40069a8:	df000415 	stw	fp,16(sp)
 40069ac:	df000404 	addi	fp,sp,16
 40069b0:	2007883a 	mov	r3,r4
 40069b4:	2805883a 	mov	r2,r5
 40069b8:	e1bffe15 	stw	r6,-8(fp)
 40069bc:	e1ffff15 	stw	r7,-4(fp)
 40069c0:	e0fffc05 	stb	r3,-16(fp)
 40069c4:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 40069c8:	0005883a 	mov	r2,zero
}
 40069cc:	e037883a 	mov	sp,fp
 40069d0:	df000017 	ldw	fp,0(sp)
 40069d4:	dec00104 	addi	sp,sp,4
 40069d8:	f800283a 	ret

040069dc <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 40069dc:	defffd04 	addi	sp,sp,-12
 40069e0:	df000215 	stw	fp,8(sp)
 40069e4:	df000204 	addi	fp,sp,8
 40069e8:	2005883a 	mov	r2,r4
 40069ec:	e17fff15 	stw	r5,-4(fp)
 40069f0:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 40069f4:	0005883a 	mov	r2,zero
}
 40069f8:	e037883a 	mov	sp,fp
 40069fc:	df000017 	ldw	fp,0(sp)
 4006a00:	dec00104 	addi	sp,sp,4
 4006a04:	f800283a 	ret

04006a08 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 4006a08:	defffb04 	addi	sp,sp,-20
 4006a0c:	df000415 	stw	fp,16(sp)
 4006a10:	df000404 	addi	fp,sp,16
 4006a14:	2007883a 	mov	r3,r4
 4006a18:	2805883a 	mov	r2,r5
 4006a1c:	e1bffe15 	stw	r6,-8(fp)
 4006a20:	e1ffff15 	stw	r7,-4(fp)
 4006a24:	e0fffc05 	stb	r3,-16(fp)
 4006a28:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 4006a2c:	0005883a 	mov	r2,zero
}
 4006a30:	e037883a 	mov	sp,fp
 4006a34:	df000017 	ldw	fp,0(sp)
 4006a38:	dec00104 	addi	sp,sp,4
 4006a3c:	f800283a 	ret

04006a40 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 4006a40:	deffff04 	addi	sp,sp,-4
 4006a44:	df000015 	stw	fp,0(sp)
 4006a48:	d839883a 	mov	fp,sp
    return( usb_task_state );
 4006a4c:	d0a00503 	ldbu	r2,-32748(gp)
}
 4006a50:	e037883a 	mov	sp,fp
 4006a54:	df000017 	ldw	fp,0(sp)
 4006a58:	dec00104 	addi	sp,sp,4
 4006a5c:	f800283a 	ret

04006a60 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 4006a60:	defffe04 	addi	sp,sp,-8
 4006a64:	df000115 	stw	fp,4(sp)
 4006a68:	df000104 	addi	fp,sp,4
 4006a6c:	2005883a 	mov	r2,r4
 4006a70:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 4006a74:	e0bfff03 	ldbu	r2,-4(fp)
 4006a78:	100690fa 	slli	r3,r2,3
 4006a7c:	008100b4 	movhi	r2,1026
 4006a80:	10aef704 	addi	r2,r2,-17444
 4006a84:	1885883a 	add	r2,r3,r2
}
 4006a88:	e037883a 	mov	sp,fp
 4006a8c:	df000017 	ldw	fp,0(sp)
 4006a90:	dec00104 	addi	sp,sp,4
 4006a94:	f800283a 	ret

04006a98 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 4006a98:	defffc04 	addi	sp,sp,-16
 4006a9c:	df000315 	stw	fp,12(sp)
 4006aa0:	df000304 	addi	fp,sp,12
 4006aa4:	e13ffe15 	stw	r4,-8(fp)
 4006aa8:	2805883a 	mov	r2,r5
 4006aac:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 4006ab0:	e03ffd05 	stb	zero,-12(fp)
 4006ab4:	00000d06 	br	4006aec <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 4006ab8:	e0bffd03 	ldbu	r2,-12(fp)
 4006abc:	e0fffe17 	ldw	r3,-8(fp)
 4006ac0:	1887883a 	add	r3,r3,r2
 4006ac4:	e0bffd03 	ldbu	r2,-12(fp)
 4006ac8:	1085883a 	add	r2,r2,r2
 4006acc:	1009883a 	mov	r4,r2
 4006ad0:	e0bffe17 	ldw	r2,-8(fp)
 4006ad4:	1105883a 	add	r2,r2,r4
 4006ad8:	10800003 	ldbu	r2,0(r2)
 4006adc:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 4006ae0:	e0bffd03 	ldbu	r2,-12(fp)
 4006ae4:	10800044 	addi	r2,r2,1
 4006ae8:	e0bffd05 	stb	r2,-12(fp)
 4006aec:	e0fffd03 	ldbu	r3,-12(fp)
 4006af0:	e0bfff03 	ldbu	r2,-4(fp)
 4006af4:	18bff036 	bltu	r3,r2,4006ab8 <__alt_data_end+0xfc006ab8>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 4006af8:	e0bfff03 	ldbu	r2,-4(fp)
 4006afc:	e0fffe17 	ldw	r3,-8(fp)
 4006b00:	1885883a 	add	r2,r3,r2
 4006b04:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 4006b08:	e0bffe17 	ldw	r2,-8(fp)
}
 4006b0c:	e037883a 	mov	sp,fp
 4006b10:	df000017 	ldw	fp,0(sp)
 4006b14:	dec00104 	addi	sp,sp,4
 4006b18:	f800283a 	ret

04006b1c <__divsi3>:
 4006b1c:	20001b16 	blt	r4,zero,4006b8c <__divsi3+0x70>
 4006b20:	000f883a 	mov	r7,zero
 4006b24:	28001616 	blt	r5,zero,4006b80 <__divsi3+0x64>
 4006b28:	200d883a 	mov	r6,r4
 4006b2c:	29001a2e 	bgeu	r5,r4,4006b98 <__divsi3+0x7c>
 4006b30:	00800804 	movi	r2,32
 4006b34:	00c00044 	movi	r3,1
 4006b38:	00000106 	br	4006b40 <__divsi3+0x24>
 4006b3c:	10000d26 	beq	r2,zero,4006b74 <__divsi3+0x58>
 4006b40:	294b883a 	add	r5,r5,r5
 4006b44:	10bfffc4 	addi	r2,r2,-1
 4006b48:	18c7883a 	add	r3,r3,r3
 4006b4c:	293ffb36 	bltu	r5,r4,4006b3c <__alt_data_end+0xfc006b3c>
 4006b50:	0005883a 	mov	r2,zero
 4006b54:	18000726 	beq	r3,zero,4006b74 <__divsi3+0x58>
 4006b58:	0005883a 	mov	r2,zero
 4006b5c:	31400236 	bltu	r6,r5,4006b68 <__divsi3+0x4c>
 4006b60:	314dc83a 	sub	r6,r6,r5
 4006b64:	10c4b03a 	or	r2,r2,r3
 4006b68:	1806d07a 	srli	r3,r3,1
 4006b6c:	280ad07a 	srli	r5,r5,1
 4006b70:	183ffa1e 	bne	r3,zero,4006b5c <__alt_data_end+0xfc006b5c>
 4006b74:	38000126 	beq	r7,zero,4006b7c <__divsi3+0x60>
 4006b78:	0085c83a 	sub	r2,zero,r2
 4006b7c:	f800283a 	ret
 4006b80:	014bc83a 	sub	r5,zero,r5
 4006b84:	39c0005c 	xori	r7,r7,1
 4006b88:	003fe706 	br	4006b28 <__alt_data_end+0xfc006b28>
 4006b8c:	0109c83a 	sub	r4,zero,r4
 4006b90:	01c00044 	movi	r7,1
 4006b94:	003fe306 	br	4006b24 <__alt_data_end+0xfc006b24>
 4006b98:	00c00044 	movi	r3,1
 4006b9c:	003fee06 	br	4006b58 <__alt_data_end+0xfc006b58>

04006ba0 <__modsi3>:
 4006ba0:	20001716 	blt	r4,zero,4006c00 <__modsi3+0x60>
 4006ba4:	000f883a 	mov	r7,zero
 4006ba8:	2005883a 	mov	r2,r4
 4006bac:	28001216 	blt	r5,zero,4006bf8 <__modsi3+0x58>
 4006bb0:	2900162e 	bgeu	r5,r4,4006c0c <__modsi3+0x6c>
 4006bb4:	01800804 	movi	r6,32
 4006bb8:	00c00044 	movi	r3,1
 4006bbc:	00000106 	br	4006bc4 <__modsi3+0x24>
 4006bc0:	30000a26 	beq	r6,zero,4006bec <__modsi3+0x4c>
 4006bc4:	294b883a 	add	r5,r5,r5
 4006bc8:	31bfffc4 	addi	r6,r6,-1
 4006bcc:	18c7883a 	add	r3,r3,r3
 4006bd0:	293ffb36 	bltu	r5,r4,4006bc0 <__alt_data_end+0xfc006bc0>
 4006bd4:	18000526 	beq	r3,zero,4006bec <__modsi3+0x4c>
 4006bd8:	1806d07a 	srli	r3,r3,1
 4006bdc:	11400136 	bltu	r2,r5,4006be4 <__modsi3+0x44>
 4006be0:	1145c83a 	sub	r2,r2,r5
 4006be4:	280ad07a 	srli	r5,r5,1
 4006be8:	183ffb1e 	bne	r3,zero,4006bd8 <__alt_data_end+0xfc006bd8>
 4006bec:	38000126 	beq	r7,zero,4006bf4 <__modsi3+0x54>
 4006bf0:	0085c83a 	sub	r2,zero,r2
 4006bf4:	f800283a 	ret
 4006bf8:	014bc83a 	sub	r5,zero,r5
 4006bfc:	003fec06 	br	4006bb0 <__alt_data_end+0xfc006bb0>
 4006c00:	0109c83a 	sub	r4,zero,r4
 4006c04:	01c00044 	movi	r7,1
 4006c08:	003fe706 	br	4006ba8 <__alt_data_end+0xfc006ba8>
 4006c0c:	00c00044 	movi	r3,1
 4006c10:	003ff106 	br	4006bd8 <__alt_data_end+0xfc006bd8>

04006c14 <__udivsi3>:
 4006c14:	200d883a 	mov	r6,r4
 4006c18:	2900152e 	bgeu	r5,r4,4006c70 <__udivsi3+0x5c>
 4006c1c:	28001416 	blt	r5,zero,4006c70 <__udivsi3+0x5c>
 4006c20:	00800804 	movi	r2,32
 4006c24:	00c00044 	movi	r3,1
 4006c28:	00000206 	br	4006c34 <__udivsi3+0x20>
 4006c2c:	10000e26 	beq	r2,zero,4006c68 <__udivsi3+0x54>
 4006c30:	28000516 	blt	r5,zero,4006c48 <__udivsi3+0x34>
 4006c34:	294b883a 	add	r5,r5,r5
 4006c38:	10bfffc4 	addi	r2,r2,-1
 4006c3c:	18c7883a 	add	r3,r3,r3
 4006c40:	293ffa36 	bltu	r5,r4,4006c2c <__alt_data_end+0xfc006c2c>
 4006c44:	18000826 	beq	r3,zero,4006c68 <__udivsi3+0x54>
 4006c48:	0005883a 	mov	r2,zero
 4006c4c:	31400236 	bltu	r6,r5,4006c58 <__udivsi3+0x44>
 4006c50:	314dc83a 	sub	r6,r6,r5
 4006c54:	10c4b03a 	or	r2,r2,r3
 4006c58:	1806d07a 	srli	r3,r3,1
 4006c5c:	280ad07a 	srli	r5,r5,1
 4006c60:	183ffa1e 	bne	r3,zero,4006c4c <__alt_data_end+0xfc006c4c>
 4006c64:	f800283a 	ret
 4006c68:	0005883a 	mov	r2,zero
 4006c6c:	f800283a 	ret
 4006c70:	00c00044 	movi	r3,1
 4006c74:	003ff406 	br	4006c48 <__alt_data_end+0xfc006c48>

04006c78 <__umodsi3>:
 4006c78:	2005883a 	mov	r2,r4
 4006c7c:	2900122e 	bgeu	r5,r4,4006cc8 <__umodsi3+0x50>
 4006c80:	28001116 	blt	r5,zero,4006cc8 <__umodsi3+0x50>
 4006c84:	01800804 	movi	r6,32
 4006c88:	00c00044 	movi	r3,1
 4006c8c:	00000206 	br	4006c98 <__umodsi3+0x20>
 4006c90:	30000c26 	beq	r6,zero,4006cc4 <__umodsi3+0x4c>
 4006c94:	28000516 	blt	r5,zero,4006cac <__umodsi3+0x34>
 4006c98:	294b883a 	add	r5,r5,r5
 4006c9c:	31bfffc4 	addi	r6,r6,-1
 4006ca0:	18c7883a 	add	r3,r3,r3
 4006ca4:	293ffa36 	bltu	r5,r4,4006c90 <__alt_data_end+0xfc006c90>
 4006ca8:	18000626 	beq	r3,zero,4006cc4 <__umodsi3+0x4c>
 4006cac:	1806d07a 	srli	r3,r3,1
 4006cb0:	11400136 	bltu	r2,r5,4006cb8 <__umodsi3+0x40>
 4006cb4:	1145c83a 	sub	r2,r2,r5
 4006cb8:	280ad07a 	srli	r5,r5,1
 4006cbc:	183ffb1e 	bne	r3,zero,4006cac <__alt_data_end+0xfc006cac>
 4006cc0:	f800283a 	ret
 4006cc4:	f800283a 	ret
 4006cc8:	00c00044 	movi	r3,1
 4006ccc:	003ff706 	br	4006cac <__alt_data_end+0xfc006cac>

04006cd0 <__mulsi3>:
 4006cd0:	0005883a 	mov	r2,zero
 4006cd4:	20000726 	beq	r4,zero,4006cf4 <__mulsi3+0x24>
 4006cd8:	20c0004c 	andi	r3,r4,1
 4006cdc:	2008d07a 	srli	r4,r4,1
 4006ce0:	18000126 	beq	r3,zero,4006ce8 <__mulsi3+0x18>
 4006ce4:	1145883a 	add	r2,r2,r5
 4006ce8:	294b883a 	add	r5,r5,r5
 4006cec:	203ffa1e 	bne	r4,zero,4006cd8 <__alt_data_end+0xfc006cd8>
 4006cf0:	f800283a 	ret
 4006cf4:	f800283a 	ret

04006cf8 <memset>:
 4006cf8:	20c000cc 	andi	r3,r4,3
 4006cfc:	2005883a 	mov	r2,r4
 4006d00:	18004426 	beq	r3,zero,4006e14 <memset+0x11c>
 4006d04:	31ffffc4 	addi	r7,r6,-1
 4006d08:	30004026 	beq	r6,zero,4006e0c <memset+0x114>
 4006d0c:	2813883a 	mov	r9,r5
 4006d10:	200d883a 	mov	r6,r4
 4006d14:	2007883a 	mov	r3,r4
 4006d18:	00000406 	br	4006d2c <memset+0x34>
 4006d1c:	3a3fffc4 	addi	r8,r7,-1
 4006d20:	31800044 	addi	r6,r6,1
 4006d24:	38003926 	beq	r7,zero,4006e0c <memset+0x114>
 4006d28:	400f883a 	mov	r7,r8
 4006d2c:	18c00044 	addi	r3,r3,1
 4006d30:	32400005 	stb	r9,0(r6)
 4006d34:	1a0000cc 	andi	r8,r3,3
 4006d38:	403ff81e 	bne	r8,zero,4006d1c <__alt_data_end+0xfc006d1c>
 4006d3c:	010000c4 	movi	r4,3
 4006d40:	21c02d2e 	bgeu	r4,r7,4006df8 <memset+0x100>
 4006d44:	29003fcc 	andi	r4,r5,255
 4006d48:	200c923a 	slli	r6,r4,8
 4006d4c:	3108b03a 	or	r4,r6,r4
 4006d50:	200c943a 	slli	r6,r4,16
 4006d54:	218cb03a 	or	r6,r4,r6
 4006d58:	010003c4 	movi	r4,15
 4006d5c:	21c0182e 	bgeu	r4,r7,4006dc0 <memset+0xc8>
 4006d60:	3b3ffc04 	addi	r12,r7,-16
 4006d64:	6018d13a 	srli	r12,r12,4
 4006d68:	1a000104 	addi	r8,r3,4
 4006d6c:	1ac00204 	addi	r11,r3,8
 4006d70:	6008913a 	slli	r4,r12,4
 4006d74:	1a800304 	addi	r10,r3,12
 4006d78:	1813883a 	mov	r9,r3
 4006d7c:	21000504 	addi	r4,r4,20
 4006d80:	1909883a 	add	r4,r3,r4
 4006d84:	49800015 	stw	r6,0(r9)
 4006d88:	41800015 	stw	r6,0(r8)
 4006d8c:	59800015 	stw	r6,0(r11)
 4006d90:	51800015 	stw	r6,0(r10)
 4006d94:	42000404 	addi	r8,r8,16
 4006d98:	4a400404 	addi	r9,r9,16
 4006d9c:	5ac00404 	addi	r11,r11,16
 4006da0:	52800404 	addi	r10,r10,16
 4006da4:	413ff71e 	bne	r8,r4,4006d84 <__alt_data_end+0xfc006d84>
 4006da8:	63000044 	addi	r12,r12,1
 4006dac:	6018913a 	slli	r12,r12,4
 4006db0:	39c003cc 	andi	r7,r7,15
 4006db4:	010000c4 	movi	r4,3
 4006db8:	1b07883a 	add	r3,r3,r12
 4006dbc:	21c00e2e 	bgeu	r4,r7,4006df8 <memset+0x100>
 4006dc0:	1813883a 	mov	r9,r3
 4006dc4:	3811883a 	mov	r8,r7
 4006dc8:	010000c4 	movi	r4,3
 4006dcc:	49800015 	stw	r6,0(r9)
 4006dd0:	423fff04 	addi	r8,r8,-4
 4006dd4:	4a400104 	addi	r9,r9,4
 4006dd8:	223ffc36 	bltu	r4,r8,4006dcc <__alt_data_end+0xfc006dcc>
 4006ddc:	393fff04 	addi	r4,r7,-4
 4006de0:	2008d0ba 	srli	r4,r4,2
 4006de4:	39c000cc 	andi	r7,r7,3
 4006de8:	21000044 	addi	r4,r4,1
 4006dec:	2109883a 	add	r4,r4,r4
 4006df0:	2109883a 	add	r4,r4,r4
 4006df4:	1907883a 	add	r3,r3,r4
 4006df8:	38000526 	beq	r7,zero,4006e10 <memset+0x118>
 4006dfc:	19cf883a 	add	r7,r3,r7
 4006e00:	19400005 	stb	r5,0(r3)
 4006e04:	18c00044 	addi	r3,r3,1
 4006e08:	38fffd1e 	bne	r7,r3,4006e00 <__alt_data_end+0xfc006e00>
 4006e0c:	f800283a 	ret
 4006e10:	f800283a 	ret
 4006e14:	2007883a 	mov	r3,r4
 4006e18:	300f883a 	mov	r7,r6
 4006e1c:	003fc706 	br	4006d3c <__alt_data_end+0xfc006d3c>

04006e20 <_printf_r>:
 4006e20:	defffd04 	addi	sp,sp,-12
 4006e24:	2805883a 	mov	r2,r5
 4006e28:	dfc00015 	stw	ra,0(sp)
 4006e2c:	d9800115 	stw	r6,4(sp)
 4006e30:	d9c00215 	stw	r7,8(sp)
 4006e34:	21400217 	ldw	r5,8(r4)
 4006e38:	d9c00104 	addi	r7,sp,4
 4006e3c:	100d883a 	mov	r6,r2
 4006e40:	40070e40 	call	40070e4 <___vfprintf_internal_r>
 4006e44:	dfc00017 	ldw	ra,0(sp)
 4006e48:	dec00304 	addi	sp,sp,12
 4006e4c:	f800283a 	ret

04006e50 <printf>:
 4006e50:	defffc04 	addi	sp,sp,-16
 4006e54:	dfc00015 	stw	ra,0(sp)
 4006e58:	d9400115 	stw	r5,4(sp)
 4006e5c:	d9800215 	stw	r6,8(sp)
 4006e60:	d9c00315 	stw	r7,12(sp)
 4006e64:	008100b4 	movhi	r2,1026
 4006e68:	10a2f104 	addi	r2,r2,-29756
 4006e6c:	10800017 	ldw	r2,0(r2)
 4006e70:	200b883a 	mov	r5,r4
 4006e74:	d9800104 	addi	r6,sp,4
 4006e78:	11000217 	ldw	r4,8(r2)
 4006e7c:	40093c00 	call	40093c0 <__vfprintf_internal>
 4006e80:	dfc00017 	ldw	ra,0(sp)
 4006e84:	dec00404 	addi	sp,sp,16
 4006e88:	f800283a 	ret

04006e8c <_putchar_r>:
 4006e8c:	21800217 	ldw	r6,8(r4)
 4006e90:	400deb81 	jmpi	400deb8 <_putc_r>

04006e94 <putchar>:
 4006e94:	008100b4 	movhi	r2,1026
 4006e98:	10a2f104 	addi	r2,r2,-29756
 4006e9c:	200b883a 	mov	r5,r4
 4006ea0:	11000017 	ldw	r4,0(r2)
 4006ea4:	21800217 	ldw	r6,8(r4)
 4006ea8:	400deb81 	jmpi	400deb8 <_putc_r>

04006eac <_puts_r>:
 4006eac:	defff604 	addi	sp,sp,-40
 4006eb0:	dc000715 	stw	r16,28(sp)
 4006eb4:	2021883a 	mov	r16,r4
 4006eb8:	2809883a 	mov	r4,r5
 4006ebc:	dc400815 	stw	r17,32(sp)
 4006ec0:	dfc00915 	stw	ra,36(sp)
 4006ec4:	2823883a 	mov	r17,r5
 4006ec8:	4006ffc0 	call	4006ffc <strlen>
 4006ecc:	10c00044 	addi	r3,r2,1
 4006ed0:	d8800115 	stw	r2,4(sp)
 4006ed4:	00810074 	movhi	r2,1025
 4006ed8:	109b6904 	addi	r2,r2,28068
 4006edc:	d8800215 	stw	r2,8(sp)
 4006ee0:	00800044 	movi	r2,1
 4006ee4:	d8800315 	stw	r2,12(sp)
 4006ee8:	00800084 	movi	r2,2
 4006eec:	dc400015 	stw	r17,0(sp)
 4006ef0:	d8c00615 	stw	r3,24(sp)
 4006ef4:	dec00415 	stw	sp,16(sp)
 4006ef8:	d8800515 	stw	r2,20(sp)
 4006efc:	80000226 	beq	r16,zero,4006f08 <_puts_r+0x5c>
 4006f00:	80800e17 	ldw	r2,56(r16)
 4006f04:	10001426 	beq	r2,zero,4006f58 <_puts_r+0xac>
 4006f08:	81400217 	ldw	r5,8(r16)
 4006f0c:	2880030b 	ldhu	r2,12(r5)
 4006f10:	10c8000c 	andi	r3,r2,8192
 4006f14:	1800061e 	bne	r3,zero,4006f30 <_puts_r+0x84>
 4006f18:	29001917 	ldw	r4,100(r5)
 4006f1c:	00f7ffc4 	movi	r3,-8193
 4006f20:	10880014 	ori	r2,r2,8192
 4006f24:	20c6703a 	and	r3,r4,r3
 4006f28:	2880030d 	sth	r2,12(r5)
 4006f2c:	28c01915 	stw	r3,100(r5)
 4006f30:	d9800404 	addi	r6,sp,16
 4006f34:	8009883a 	mov	r4,r16
 4006f38:	400b9280 	call	400b928 <__sfvwrite_r>
 4006f3c:	1000091e 	bne	r2,zero,4006f64 <_puts_r+0xb8>
 4006f40:	00800284 	movi	r2,10
 4006f44:	dfc00917 	ldw	ra,36(sp)
 4006f48:	dc400817 	ldw	r17,32(sp)
 4006f4c:	dc000717 	ldw	r16,28(sp)
 4006f50:	dec00a04 	addi	sp,sp,40
 4006f54:	f800283a 	ret
 4006f58:	8009883a 	mov	r4,r16
 4006f5c:	400b4a40 	call	400b4a4 <__sinit>
 4006f60:	003fe906 	br	4006f08 <__alt_data_end+0xfc006f08>
 4006f64:	00bfffc4 	movi	r2,-1
 4006f68:	003ff606 	br	4006f44 <__alt_data_end+0xfc006f44>

04006f6c <puts>:
 4006f6c:	008100b4 	movhi	r2,1026
 4006f70:	10a2f104 	addi	r2,r2,-29756
 4006f74:	200b883a 	mov	r5,r4
 4006f78:	11000017 	ldw	r4,0(r2)
 4006f7c:	4006eac1 	jmpi	4006eac <_puts_r>

04006f80 <srand>:
 4006f80:	008100b4 	movhi	r2,1026
 4006f84:	10a2f104 	addi	r2,r2,-29756
 4006f88:	10800017 	ldw	r2,0(r2)
 4006f8c:	11002915 	stw	r4,164(r2)
 4006f90:	10002a15 	stw	zero,168(r2)
 4006f94:	f800283a 	ret

04006f98 <rand>:
 4006f98:	008100b4 	movhi	r2,1026
 4006f9c:	defffe04 	addi	sp,sp,-8
 4006fa0:	10a2f104 	addi	r2,r2,-29756
 4006fa4:	dc000015 	stw	r16,0(sp)
 4006fa8:	14000017 	ldw	r16,0(r2)
 4006fac:	dfc00115 	stw	ra,4(sp)
 4006fb0:	01932574 	movhi	r6,19605
 4006fb4:	81002917 	ldw	r4,164(r16)
 4006fb8:	81402a17 	ldw	r5,168(r16)
 4006fbc:	01d614b4 	movhi	r7,22610
 4006fc0:	319fcb44 	addi	r6,r6,32557
 4006fc4:	39fd0b44 	addi	r7,r7,-3027
 4006fc8:	40108a80 	call	40108a8 <__muldi3>
 4006fcc:	11000044 	addi	r4,r2,1
 4006fd0:	2085803a 	cmpltu	r2,r4,r2
 4006fd4:	10c7883a 	add	r3,r2,r3
 4006fd8:	00a00034 	movhi	r2,32768
 4006fdc:	10bfffc4 	addi	r2,r2,-1
 4006fe0:	1884703a 	and	r2,r3,r2
 4006fe4:	81002915 	stw	r4,164(r16)
 4006fe8:	80c02a15 	stw	r3,168(r16)
 4006fec:	dfc00117 	ldw	ra,4(sp)
 4006ff0:	dc000017 	ldw	r16,0(sp)
 4006ff4:	dec00204 	addi	sp,sp,8
 4006ff8:	f800283a 	ret

04006ffc <strlen>:
 4006ffc:	208000cc 	andi	r2,r4,3
 4007000:	10002026 	beq	r2,zero,4007084 <strlen+0x88>
 4007004:	20800007 	ldb	r2,0(r4)
 4007008:	10002026 	beq	r2,zero,400708c <strlen+0x90>
 400700c:	2005883a 	mov	r2,r4
 4007010:	00000206 	br	400701c <strlen+0x20>
 4007014:	10c00007 	ldb	r3,0(r2)
 4007018:	18001826 	beq	r3,zero,400707c <strlen+0x80>
 400701c:	10800044 	addi	r2,r2,1
 4007020:	10c000cc 	andi	r3,r2,3
 4007024:	183ffb1e 	bne	r3,zero,4007014 <__alt_data_end+0xfc007014>
 4007028:	10c00017 	ldw	r3,0(r2)
 400702c:	01ffbff4 	movhi	r7,65279
 4007030:	39ffbfc4 	addi	r7,r7,-257
 4007034:	00ca303a 	nor	r5,zero,r3
 4007038:	01a02074 	movhi	r6,32897
 400703c:	19c7883a 	add	r3,r3,r7
 4007040:	31a02004 	addi	r6,r6,-32640
 4007044:	1946703a 	and	r3,r3,r5
 4007048:	1986703a 	and	r3,r3,r6
 400704c:	1800091e 	bne	r3,zero,4007074 <strlen+0x78>
 4007050:	10800104 	addi	r2,r2,4
 4007054:	10c00017 	ldw	r3,0(r2)
 4007058:	19cb883a 	add	r5,r3,r7
 400705c:	00c6303a 	nor	r3,zero,r3
 4007060:	28c6703a 	and	r3,r5,r3
 4007064:	1986703a 	and	r3,r3,r6
 4007068:	183ff926 	beq	r3,zero,4007050 <__alt_data_end+0xfc007050>
 400706c:	00000106 	br	4007074 <strlen+0x78>
 4007070:	10800044 	addi	r2,r2,1
 4007074:	10c00007 	ldb	r3,0(r2)
 4007078:	183ffd1e 	bne	r3,zero,4007070 <__alt_data_end+0xfc007070>
 400707c:	1105c83a 	sub	r2,r2,r4
 4007080:	f800283a 	ret
 4007084:	2005883a 	mov	r2,r4
 4007088:	003fe706 	br	4007028 <__alt_data_end+0xfc007028>
 400708c:	0005883a 	mov	r2,zero
 4007090:	f800283a 	ret

04007094 <time>:
 4007094:	008100b4 	movhi	r2,1026
 4007098:	defffc04 	addi	sp,sp,-16
 400709c:	10a2f104 	addi	r2,r2,-29756
 40070a0:	dc000215 	stw	r16,8(sp)
 40070a4:	2021883a 	mov	r16,r4
 40070a8:	11000017 	ldw	r4,0(r2)
 40070ac:	000d883a 	mov	r6,zero
 40070b0:	d80b883a 	mov	r5,sp
 40070b4:	dfc00315 	stw	ra,12(sp)
 40070b8:	400bf780 	call	400bf78 <_gettimeofday_r>
 40070bc:	10000716 	blt	r2,zero,40070dc <time+0x48>
 40070c0:	d8800017 	ldw	r2,0(sp)
 40070c4:	80000126 	beq	r16,zero,40070cc <time+0x38>
 40070c8:	80800015 	stw	r2,0(r16)
 40070cc:	dfc00317 	ldw	ra,12(sp)
 40070d0:	dc000217 	ldw	r16,8(sp)
 40070d4:	dec00404 	addi	sp,sp,16
 40070d8:	f800283a 	ret
 40070dc:	00bfffc4 	movi	r2,-1
 40070e0:	003ffa06 	br	40070cc <__alt_data_end+0xfc0070cc>

040070e4 <___vfprintf_internal_r>:
 40070e4:	deffb804 	addi	sp,sp,-288
 40070e8:	dfc04715 	stw	ra,284(sp)
 40070ec:	ddc04515 	stw	r23,276(sp)
 40070f0:	dd404315 	stw	r21,268(sp)
 40070f4:	d9002d15 	stw	r4,180(sp)
 40070f8:	282f883a 	mov	r23,r5
 40070fc:	302b883a 	mov	r21,r6
 4007100:	d9c02e15 	stw	r7,184(sp)
 4007104:	df004615 	stw	fp,280(sp)
 4007108:	dd804415 	stw	r22,272(sp)
 400710c:	dd004215 	stw	r20,264(sp)
 4007110:	dcc04115 	stw	r19,260(sp)
 4007114:	dc804015 	stw	r18,256(sp)
 4007118:	dc403f15 	stw	r17,252(sp)
 400711c:	dc003e15 	stw	r16,248(sp)
 4007120:	400c0800 	call	400c080 <_localeconv_r>
 4007124:	10800017 	ldw	r2,0(r2)
 4007128:	1009883a 	mov	r4,r2
 400712c:	d8803415 	stw	r2,208(sp)
 4007130:	4006ffc0 	call	4006ffc <strlen>
 4007134:	d8803715 	stw	r2,220(sp)
 4007138:	d8802d17 	ldw	r2,180(sp)
 400713c:	10000226 	beq	r2,zero,4007148 <___vfprintf_internal_r+0x64>
 4007140:	10800e17 	ldw	r2,56(r2)
 4007144:	1000fb26 	beq	r2,zero,4007534 <___vfprintf_internal_r+0x450>
 4007148:	b880030b 	ldhu	r2,12(r23)
 400714c:	10c8000c 	andi	r3,r2,8192
 4007150:	1800061e 	bne	r3,zero,400716c <___vfprintf_internal_r+0x88>
 4007154:	b9001917 	ldw	r4,100(r23)
 4007158:	00f7ffc4 	movi	r3,-8193
 400715c:	10880014 	ori	r2,r2,8192
 4007160:	20c6703a 	and	r3,r4,r3
 4007164:	b880030d 	sth	r2,12(r23)
 4007168:	b8c01915 	stw	r3,100(r23)
 400716c:	10c0020c 	andi	r3,r2,8
 4007170:	1800c326 	beq	r3,zero,4007480 <___vfprintf_internal_r+0x39c>
 4007174:	b8c00417 	ldw	r3,16(r23)
 4007178:	1800c126 	beq	r3,zero,4007480 <___vfprintf_internal_r+0x39c>
 400717c:	1080068c 	andi	r2,r2,26
 4007180:	00c00284 	movi	r3,10
 4007184:	10c0c626 	beq	r2,r3,40074a0 <___vfprintf_internal_r+0x3bc>
 4007188:	d8c00404 	addi	r3,sp,16
 400718c:	05010074 	movhi	r20,1025
 4007190:	d9001e04 	addi	r4,sp,120
 4007194:	a51b7a84 	addi	r20,r20,28138
 4007198:	d8c01e15 	stw	r3,120(sp)
 400719c:	d8002015 	stw	zero,128(sp)
 40071a0:	d8001f15 	stw	zero,124(sp)
 40071a4:	d8003315 	stw	zero,204(sp)
 40071a8:	d8003615 	stw	zero,216(sp)
 40071ac:	d8003815 	stw	zero,224(sp)
 40071b0:	1811883a 	mov	r8,r3
 40071b4:	d8003915 	stw	zero,228(sp)
 40071b8:	d8003a15 	stw	zero,232(sp)
 40071bc:	d8002f15 	stw	zero,188(sp)
 40071c0:	d9002815 	stw	r4,160(sp)
 40071c4:	a8800007 	ldb	r2,0(r21)
 40071c8:	10028b26 	beq	r2,zero,4007bf8 <___vfprintf_internal_r+0xb14>
 40071cc:	00c00944 	movi	r3,37
 40071d0:	a823883a 	mov	r17,r21
 40071d4:	10c0021e 	bne	r2,r3,40071e0 <___vfprintf_internal_r+0xfc>
 40071d8:	00001406 	br	400722c <___vfprintf_internal_r+0x148>
 40071dc:	10c00326 	beq	r2,r3,40071ec <___vfprintf_internal_r+0x108>
 40071e0:	8c400044 	addi	r17,r17,1
 40071e4:	88800007 	ldb	r2,0(r17)
 40071e8:	103ffc1e 	bne	r2,zero,40071dc <__alt_data_end+0xfc0071dc>
 40071ec:	8d61c83a 	sub	r16,r17,r21
 40071f0:	80000e26 	beq	r16,zero,400722c <___vfprintf_internal_r+0x148>
 40071f4:	d8c02017 	ldw	r3,128(sp)
 40071f8:	d8801f17 	ldw	r2,124(sp)
 40071fc:	45400015 	stw	r21,0(r8)
 4007200:	1c07883a 	add	r3,r3,r16
 4007204:	10800044 	addi	r2,r2,1
 4007208:	d8c02015 	stw	r3,128(sp)
 400720c:	44000115 	stw	r16,4(r8)
 4007210:	d8801f15 	stw	r2,124(sp)
 4007214:	00c001c4 	movi	r3,7
 4007218:	1880a916 	blt	r3,r2,40074c0 <___vfprintf_internal_r+0x3dc>
 400721c:	42000204 	addi	r8,r8,8
 4007220:	d9402f17 	ldw	r5,188(sp)
 4007224:	2c0b883a 	add	r5,r5,r16
 4007228:	d9402f15 	stw	r5,188(sp)
 400722c:	88800007 	ldb	r2,0(r17)
 4007230:	1000aa26 	beq	r2,zero,40074dc <___vfprintf_internal_r+0x3f8>
 4007234:	8d400044 	addi	r21,r17,1
 4007238:	8c400047 	ldb	r17,1(r17)
 400723c:	0021883a 	mov	r16,zero
 4007240:	00bfffc4 	movi	r2,-1
 4007244:	0025883a 	mov	r18,zero
 4007248:	dc002905 	stb	r16,164(sp)
 400724c:	d8002785 	stb	zero,158(sp)
 4007250:	d8002b05 	stb	zero,172(sp)
 4007254:	d8802a15 	stw	r2,168(sp)
 4007258:	d8003115 	stw	zero,196(sp)
 400725c:	04c01604 	movi	r19,88
 4007260:	05800244 	movi	r22,9
 4007264:	9021883a 	mov	r16,r18
 4007268:	4039883a 	mov	fp,r8
 400726c:	ad400044 	addi	r21,r21,1
 4007270:	88bff804 	addi	r2,r17,-32
 4007274:	98833236 	bltu	r19,r2,4007f40 <___vfprintf_internal_r+0xe5c>
 4007278:	100490ba 	slli	r2,r2,2
 400727c:	00c10034 	movhi	r3,1024
 4007280:	18dca404 	addi	r3,r3,29328
 4007284:	10c5883a 	add	r2,r2,r3
 4007288:	10800017 	ldw	r2,0(r2)
 400728c:	1000683a 	jmp	r2
 4007290:	04007e38 	rdprs	r16,zero,504
 4007294:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007298:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 400729c:	04007e58 	cmpnei	r16,zero,505
 40072a0:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40072a4:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40072a8:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40072ac:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40072b0:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40072b4:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40072b8:	04007540 	call	400754 <__alt_mem_onchip_memory+0x400754>
 40072bc:	04007d48 	cmpgei	r16,zero,501
 40072c0:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40072c4:	04007404 	movi	r16,464
 40072c8:	04007564 	muli	r16,zero,469
 40072cc:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40072d0:	040075b4 	movhi	r16,470
 40072d4:	040075c0 	call	40075c <__alt_mem_onchip_memory+0x40075c>
 40072d8:	040075c0 	call	40075c <__alt_mem_onchip_memory+0x40075c>
 40072dc:	040075c0 	call	40075c <__alt_mem_onchip_memory+0x40075c>
 40072e0:	040075c0 	call	40075c <__alt_mem_onchip_memory+0x40075c>
 40072e4:	040075c0 	call	40075c <__alt_mem_onchip_memory+0x40075c>
 40072e8:	040075c0 	call	40075c <__alt_mem_onchip_memory+0x40075c>
 40072ec:	040075c0 	call	40075c <__alt_mem_onchip_memory+0x40075c>
 40072f0:	040075c0 	call	40075c <__alt_mem_onchip_memory+0x40075c>
 40072f4:	040075c0 	call	40075c <__alt_mem_onchip_memory+0x40075c>
 40072f8:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40072fc:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007300:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007304:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007308:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 400730c:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007310:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007314:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007318:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 400731c:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007320:	040075fc 	xorhi	r16,zero,471
 4007324:	040076c4 	movi	r16,475
 4007328:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 400732c:	040076c4 	movi	r16,475
 4007330:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007334:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007338:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 400733c:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007340:	04007770 	cmpltui	r16,zero,477
 4007344:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007348:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 400734c:	0400777c 	xorhi	r16,zero,477
 4007350:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007354:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007358:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 400735c:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007360:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007364:	04007c00 	call	4007c0 <__alt_mem_onchip_memory+0x4007c0>
 4007368:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 400736c:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007370:	04007c6c 	andhi	r16,zero,497
 4007374:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007378:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 400737c:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007380:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007384:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007388:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 400738c:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007390:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007394:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 4007398:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 400739c:	04007ee4 	muli	r16,zero,507
 40073a0:	04007e64 	muli	r16,zero,505
 40073a4:	040076c4 	movi	r16,475
 40073a8:	040076c4 	movi	r16,475
 40073ac:	040076c4 	movi	r16,475
 40073b0:	04007e84 	movi	r16,506
 40073b4:	04007e64 	muli	r16,zero,505
 40073b8:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40073bc:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40073c0:	04007e90 	cmplti	r16,zero,506
 40073c4:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40073c8:	04007ea4 	muli	r16,zero,506
 40073cc:	04007d28 	cmpgeui	r16,zero,500
 40073d0:	04007410 	cmplti	r16,zero,464
 40073d4:	04007d60 	cmpeqi	r16,zero,501
 40073d8:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40073dc:	04007d6c 	andhi	r16,zero,501
 40073e0:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40073e4:	04007dd0 	cmplti	r16,zero,503
 40073e8:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40073ec:	04007f40 	call	4007f4 <__alt_mem_onchip_memory+0x4007f4>
 40073f0:	04007df0 	cmpltui	r16,zero,503
 40073f4:	d8c03117 	ldw	r3,196(sp)
 40073f8:	d8802e15 	stw	r2,184(sp)
 40073fc:	00c7c83a 	sub	r3,zero,r3
 4007400:	d8c03115 	stw	r3,196(sp)
 4007404:	84000114 	ori	r16,r16,4
 4007408:	ac400007 	ldb	r17,0(r21)
 400740c:	003f9706 	br	400726c <__alt_data_end+0xfc00726c>
 4007410:	00800c04 	movi	r2,48
 4007414:	d8802705 	stb	r2,156(sp)
 4007418:	00801e04 	movi	r2,120
 400741c:	d8802745 	stb	r2,157(sp)
 4007420:	d9002a17 	ldw	r4,168(sp)
 4007424:	d8802e17 	ldw	r2,184(sp)
 4007428:	d8002785 	stb	zero,158(sp)
 400742c:	e011883a 	mov	r8,fp
 4007430:	10c00104 	addi	r3,r2,4
 4007434:	14c00017 	ldw	r19,0(r2)
 4007438:	002d883a 	mov	r22,zero
 400743c:	80800094 	ori	r2,r16,2
 4007440:	2002ca16 	blt	r4,zero,4007f6c <___vfprintf_internal_r+0xe88>
 4007444:	00bfdfc4 	movi	r2,-129
 4007448:	80a4703a 	and	r18,r16,r2
 400744c:	d8c02e15 	stw	r3,184(sp)
 4007450:	94800094 	ori	r18,r18,2
 4007454:	9802b41e 	bne	r19,zero,4007f28 <___vfprintf_internal_r+0xe44>
 4007458:	01410074 	movhi	r5,1025
 400745c:	295b7304 	addi	r5,r5,28108
 4007460:	d9403915 	stw	r5,228(sp)
 4007464:	04401e04 	movi	r17,120
 4007468:	d8802a17 	ldw	r2,168(sp)
 400746c:	0039883a 	mov	fp,zero
 4007470:	1001fa26 	beq	r2,zero,4007c5c <___vfprintf_internal_r+0xb78>
 4007474:	0027883a 	mov	r19,zero
 4007478:	002d883a 	mov	r22,zero
 400747c:	00021906 	br	4007ce4 <___vfprintf_internal_r+0xc00>
 4007480:	d9002d17 	ldw	r4,180(sp)
 4007484:	b80b883a 	mov	r5,r23
 4007488:	40094980 	call	4009498 <__swsetup_r>
 400748c:	1005dc1e 	bne	r2,zero,4008c00 <___vfprintf_internal_r+0x1b1c>
 4007490:	b880030b 	ldhu	r2,12(r23)
 4007494:	00c00284 	movi	r3,10
 4007498:	1080068c 	andi	r2,r2,26
 400749c:	10ff3a1e 	bne	r2,r3,4007188 <__alt_data_end+0xfc007188>
 40074a0:	b880038f 	ldh	r2,14(r23)
 40074a4:	103f3816 	blt	r2,zero,4007188 <__alt_data_end+0xfc007188>
 40074a8:	d9c02e17 	ldw	r7,184(sp)
 40074ac:	d9002d17 	ldw	r4,180(sp)
 40074b0:	a80d883a 	mov	r6,r21
 40074b4:	b80b883a 	mov	r5,r23
 40074b8:	40093dc0 	call	40093dc <__sbprintf>
 40074bc:	00001106 	br	4007504 <___vfprintf_internal_r+0x420>
 40074c0:	d9002d17 	ldw	r4,180(sp)
 40074c4:	d9801e04 	addi	r6,sp,120
 40074c8:	b80b883a 	mov	r5,r23
 40074cc:	400e9600 	call	400e960 <__sprint_r>
 40074d0:	1000081e 	bne	r2,zero,40074f4 <___vfprintf_internal_r+0x410>
 40074d4:	da000404 	addi	r8,sp,16
 40074d8:	003f5106 	br	4007220 <__alt_data_end+0xfc007220>
 40074dc:	d8802017 	ldw	r2,128(sp)
 40074e0:	10000426 	beq	r2,zero,40074f4 <___vfprintf_internal_r+0x410>
 40074e4:	d9002d17 	ldw	r4,180(sp)
 40074e8:	d9801e04 	addi	r6,sp,120
 40074ec:	b80b883a 	mov	r5,r23
 40074f0:	400e9600 	call	400e960 <__sprint_r>
 40074f4:	b880030b 	ldhu	r2,12(r23)
 40074f8:	1080100c 	andi	r2,r2,64
 40074fc:	1005c01e 	bne	r2,zero,4008c00 <___vfprintf_internal_r+0x1b1c>
 4007500:	d8802f17 	ldw	r2,188(sp)
 4007504:	dfc04717 	ldw	ra,284(sp)
 4007508:	df004617 	ldw	fp,280(sp)
 400750c:	ddc04517 	ldw	r23,276(sp)
 4007510:	dd804417 	ldw	r22,272(sp)
 4007514:	dd404317 	ldw	r21,268(sp)
 4007518:	dd004217 	ldw	r20,264(sp)
 400751c:	dcc04117 	ldw	r19,260(sp)
 4007520:	dc804017 	ldw	r18,256(sp)
 4007524:	dc403f17 	ldw	r17,252(sp)
 4007528:	dc003e17 	ldw	r16,248(sp)
 400752c:	dec04804 	addi	sp,sp,288
 4007530:	f800283a 	ret
 4007534:	d9002d17 	ldw	r4,180(sp)
 4007538:	400b4a40 	call	400b4a4 <__sinit>
 400753c:	003f0206 	br	4007148 <__alt_data_end+0xfc007148>
 4007540:	d9002e17 	ldw	r4,184(sp)
 4007544:	d9402e17 	ldw	r5,184(sp)
 4007548:	21000017 	ldw	r4,0(r4)
 400754c:	28800104 	addi	r2,r5,4
 4007550:	d9003115 	stw	r4,196(sp)
 4007554:	203fa716 	blt	r4,zero,40073f4 <__alt_data_end+0xfc0073f4>
 4007558:	d8802e15 	stw	r2,184(sp)
 400755c:	ac400007 	ldb	r17,0(r21)
 4007560:	003f4206 	br	400726c <__alt_data_end+0xfc00726c>
 4007564:	ac400007 	ldb	r17,0(r21)
 4007568:	01000a84 	movi	r4,42
 400756c:	a8c00044 	addi	r3,r21,1
 4007570:	89075826 	beq	r17,r4,40092d4 <___vfprintf_internal_r+0x21f0>
 4007574:	8cbff404 	addi	r18,r17,-48
 4007578:	b486ae36 	bltu	r22,r18,4009034 <___vfprintf_internal_r+0x1f50>
 400757c:	0009883a 	mov	r4,zero
 4007580:	1823883a 	mov	r17,r3
 4007584:	01400284 	movi	r5,10
 4007588:	4006cd00 	call	4006cd0 <__mulsi3>
 400758c:	88c00007 	ldb	r3,0(r17)
 4007590:	1489883a 	add	r4,r2,r18
 4007594:	8d400044 	addi	r21,r17,1
 4007598:	1cbff404 	addi	r18,r3,-48
 400759c:	a823883a 	mov	r17,r21
 40075a0:	b4bff82e 	bgeu	r22,r18,4007584 <__alt_data_end+0xfc007584>
 40075a4:	1823883a 	mov	r17,r3
 40075a8:	2005f616 	blt	r4,zero,4008d84 <___vfprintf_internal_r+0x1ca0>
 40075ac:	d9002a15 	stw	r4,168(sp)
 40075b0:	003f2f06 	br	4007270 <__alt_data_end+0xfc007270>
 40075b4:	84002014 	ori	r16,r16,128
 40075b8:	ac400007 	ldb	r17,0(r21)
 40075bc:	003f2b06 	br	400726c <__alt_data_end+0xfc00726c>
 40075c0:	8cbff404 	addi	r18,r17,-48
 40075c4:	d8003115 	stw	zero,196(sp)
 40075c8:	0009883a 	mov	r4,zero
 40075cc:	a823883a 	mov	r17,r21
 40075d0:	01400284 	movi	r5,10
 40075d4:	4006cd00 	call	4006cd0 <__mulsi3>
 40075d8:	88c00007 	ldb	r3,0(r17)
 40075dc:	9089883a 	add	r4,r18,r2
 40075e0:	ad400044 	addi	r21,r21,1
 40075e4:	1cbff404 	addi	r18,r3,-48
 40075e8:	a823883a 	mov	r17,r21
 40075ec:	b4bff82e 	bgeu	r22,r18,40075d0 <__alt_data_end+0xfc0075d0>
 40075f0:	1823883a 	mov	r17,r3
 40075f4:	d9003115 	stw	r4,196(sp)
 40075f8:	003f1d06 	br	4007270 <__alt_data_end+0xfc007270>
 40075fc:	8025883a 	mov	r18,r16
 4007600:	dc002903 	ldbu	r16,164(sp)
 4007604:	e011883a 	mov	r8,fp
 4007608:	84003fcc 	andi	r16,r16,255
 400760c:	8007531e 	bne	r16,zero,400935c <___vfprintf_internal_r+0x2278>
 4007610:	94800414 	ori	r18,r18,16
 4007614:	9080080c 	andi	r2,r18,32
 4007618:	1003a326 	beq	r2,zero,40084a8 <___vfprintf_internal_r+0x13c4>
 400761c:	d9002e17 	ldw	r4,184(sp)
 4007620:	20800117 	ldw	r2,4(r4)
 4007624:	24c00017 	ldw	r19,0(r4)
 4007628:	21000204 	addi	r4,r4,8
 400762c:	d9002e15 	stw	r4,184(sp)
 4007630:	102d883a 	mov	r22,r2
 4007634:	10047316 	blt	r2,zero,4008804 <___vfprintf_internal_r+0x1720>
 4007638:	d9002a17 	ldw	r4,168(sp)
 400763c:	df002783 	ldbu	fp,158(sp)
 4007640:	2003e416 	blt	r4,zero,40085d4 <___vfprintf_internal_r+0x14f0>
 4007644:	00ffdfc4 	movi	r3,-129
 4007648:	9d84b03a 	or	r2,r19,r22
 400764c:	90e4703a 	and	r18,r18,r3
 4007650:	10018026 	beq	r2,zero,4007c54 <___vfprintf_internal_r+0xb70>
 4007654:	b003ab26 	beq	r22,zero,4008504 <___vfprintf_internal_r+0x1420>
 4007658:	dc402915 	stw	r17,164(sp)
 400765c:	dc001e04 	addi	r16,sp,120
 4007660:	b023883a 	mov	r17,r22
 4007664:	402d883a 	mov	r22,r8
 4007668:	9809883a 	mov	r4,r19
 400766c:	880b883a 	mov	r5,r17
 4007670:	01800284 	movi	r6,10
 4007674:	000f883a 	mov	r7,zero
 4007678:	4010fb00 	call	4010fb0 <__umoddi3>
 400767c:	10800c04 	addi	r2,r2,48
 4007680:	843fffc4 	addi	r16,r16,-1
 4007684:	9809883a 	mov	r4,r19
 4007688:	880b883a 	mov	r5,r17
 400768c:	80800005 	stb	r2,0(r16)
 4007690:	01800284 	movi	r6,10
 4007694:	000f883a 	mov	r7,zero
 4007698:	40109b40 	call	40109b4 <__udivdi3>
 400769c:	1027883a 	mov	r19,r2
 40076a0:	10c4b03a 	or	r2,r2,r3
 40076a4:	1823883a 	mov	r17,r3
 40076a8:	103fef1e 	bne	r2,zero,4007668 <__alt_data_end+0xfc007668>
 40076ac:	d8c02817 	ldw	r3,160(sp)
 40076b0:	dc402917 	ldw	r17,164(sp)
 40076b4:	b011883a 	mov	r8,r22
 40076b8:	1c07c83a 	sub	r3,r3,r16
 40076bc:	d8c02b15 	stw	r3,172(sp)
 40076c0:	00005f06 	br	4007840 <___vfprintf_internal_r+0x75c>
 40076c4:	8025883a 	mov	r18,r16
 40076c8:	dc002903 	ldbu	r16,164(sp)
 40076cc:	e011883a 	mov	r8,fp
 40076d0:	84003fcc 	andi	r16,r16,255
 40076d4:	80071e1e 	bne	r16,zero,4009350 <___vfprintf_internal_r+0x226c>
 40076d8:	9080020c 	andi	r2,r18,8
 40076dc:	1004af26 	beq	r2,zero,400899c <___vfprintf_internal_r+0x18b8>
 40076e0:	d9002e17 	ldw	r4,184(sp)
 40076e4:	d9402e17 	ldw	r5,184(sp)
 40076e8:	d8802e17 	ldw	r2,184(sp)
 40076ec:	21000017 	ldw	r4,0(r4)
 40076f0:	29400117 	ldw	r5,4(r5)
 40076f4:	10800204 	addi	r2,r2,8
 40076f8:	d9003615 	stw	r4,216(sp)
 40076fc:	d9403815 	stw	r5,224(sp)
 4007700:	d8802e15 	stw	r2,184(sp)
 4007704:	d9003617 	ldw	r4,216(sp)
 4007708:	d9403817 	ldw	r5,224(sp)
 400770c:	da003d15 	stw	r8,244(sp)
 4007710:	04000044 	movi	r16,1
 4007714:	400e5840 	call	400e584 <__fpclassifyd>
 4007718:	da003d17 	ldw	r8,244(sp)
 400771c:	1404441e 	bne	r2,r16,4008830 <___vfprintf_internal_r+0x174c>
 4007720:	d9003617 	ldw	r4,216(sp)
 4007724:	d9403817 	ldw	r5,224(sp)
 4007728:	000d883a 	mov	r6,zero
 400772c:	000f883a 	mov	r7,zero
 4007730:	40129540 	call	4012954 <__ledf2>
 4007734:	da003d17 	ldw	r8,244(sp)
 4007738:	1005e316 	blt	r2,zero,4008ec8 <___vfprintf_internal_r+0x1de4>
 400773c:	df002783 	ldbu	fp,158(sp)
 4007740:	008011c4 	movi	r2,71
 4007744:	1445580e 	bge	r2,r17,4008ca8 <___vfprintf_internal_r+0x1bc4>
 4007748:	04010074 	movhi	r16,1025
 400774c:	841b6b04 	addi	r16,r16,28076
 4007750:	00c000c4 	movi	r3,3
 4007754:	00bfdfc4 	movi	r2,-129
 4007758:	d8c02915 	stw	r3,164(sp)
 400775c:	90a4703a 	and	r18,r18,r2
 4007760:	d8c02b15 	stw	r3,172(sp)
 4007764:	d8002a15 	stw	zero,168(sp)
 4007768:	d8003215 	stw	zero,200(sp)
 400776c:	00003a06 	br	4007858 <___vfprintf_internal_r+0x774>
 4007770:	84000214 	ori	r16,r16,8
 4007774:	ac400007 	ldb	r17,0(r21)
 4007778:	003ebc06 	br	400726c <__alt_data_end+0xfc00726c>
 400777c:	8025883a 	mov	r18,r16
 4007780:	dc002903 	ldbu	r16,164(sp)
 4007784:	e011883a 	mov	r8,fp
 4007788:	84003fcc 	andi	r16,r16,255
 400778c:	8007001e 	bne	r16,zero,4009390 <___vfprintf_internal_r+0x22ac>
 4007790:	94800414 	ori	r18,r18,16
 4007794:	9080080c 	andi	r2,r18,32
 4007798:	1002fa26 	beq	r2,zero,4008384 <___vfprintf_internal_r+0x12a0>
 400779c:	d9002e17 	ldw	r4,184(sp)
 40077a0:	d9402a17 	ldw	r5,168(sp)
 40077a4:	d8002785 	stb	zero,158(sp)
 40077a8:	20800204 	addi	r2,r4,8
 40077ac:	24c00017 	ldw	r19,0(r4)
 40077b0:	25800117 	ldw	r22,4(r4)
 40077b4:	2804b116 	blt	r5,zero,4008a7c <___vfprintf_internal_r+0x1998>
 40077b8:	013fdfc4 	movi	r4,-129
 40077bc:	9d86b03a 	or	r3,r19,r22
 40077c0:	d8802e15 	stw	r2,184(sp)
 40077c4:	9124703a 	and	r18,r18,r4
 40077c8:	1802fb1e 	bne	r3,zero,40083b8 <___vfprintf_internal_r+0x12d4>
 40077cc:	d8c02a17 	ldw	r3,168(sp)
 40077d0:	0039883a 	mov	fp,zero
 40077d4:	1805e526 	beq	r3,zero,4008f6c <___vfprintf_internal_r+0x1e88>
 40077d8:	0027883a 	mov	r19,zero
 40077dc:	002d883a 	mov	r22,zero
 40077e0:	dc001e04 	addi	r16,sp,120
 40077e4:	9806d0fa 	srli	r3,r19,3
 40077e8:	b008977a 	slli	r4,r22,29
 40077ec:	b02cd0fa 	srli	r22,r22,3
 40077f0:	9cc001cc 	andi	r19,r19,7
 40077f4:	98800c04 	addi	r2,r19,48
 40077f8:	843fffc4 	addi	r16,r16,-1
 40077fc:	20e6b03a 	or	r19,r4,r3
 4007800:	80800005 	stb	r2,0(r16)
 4007804:	9d86b03a 	or	r3,r19,r22
 4007808:	183ff61e 	bne	r3,zero,40077e4 <__alt_data_end+0xfc0077e4>
 400780c:	90c0004c 	andi	r3,r18,1
 4007810:	18014126 	beq	r3,zero,4007d18 <___vfprintf_internal_r+0xc34>
 4007814:	10803fcc 	andi	r2,r2,255
 4007818:	1080201c 	xori	r2,r2,128
 400781c:	10bfe004 	addi	r2,r2,-128
 4007820:	00c00c04 	movi	r3,48
 4007824:	10c13c26 	beq	r2,r3,4007d18 <___vfprintf_internal_r+0xc34>
 4007828:	80ffffc5 	stb	r3,-1(r16)
 400782c:	d8c02817 	ldw	r3,160(sp)
 4007830:	80bfffc4 	addi	r2,r16,-1
 4007834:	1021883a 	mov	r16,r2
 4007838:	1887c83a 	sub	r3,r3,r2
 400783c:	d8c02b15 	stw	r3,172(sp)
 4007840:	d8802b17 	ldw	r2,172(sp)
 4007844:	d9002a17 	ldw	r4,168(sp)
 4007848:	1100010e 	bge	r2,r4,4007850 <___vfprintf_internal_r+0x76c>
 400784c:	2005883a 	mov	r2,r4
 4007850:	d8802915 	stw	r2,164(sp)
 4007854:	d8003215 	stw	zero,200(sp)
 4007858:	e7003fcc 	andi	fp,fp,255
 400785c:	e700201c 	xori	fp,fp,128
 4007860:	e73fe004 	addi	fp,fp,-128
 4007864:	e0000326 	beq	fp,zero,4007874 <___vfprintf_internal_r+0x790>
 4007868:	d8c02917 	ldw	r3,164(sp)
 400786c:	18c00044 	addi	r3,r3,1
 4007870:	d8c02915 	stw	r3,164(sp)
 4007874:	90c0008c 	andi	r3,r18,2
 4007878:	d8c02c15 	stw	r3,176(sp)
 400787c:	18000326 	beq	r3,zero,400788c <___vfprintf_internal_r+0x7a8>
 4007880:	d8c02917 	ldw	r3,164(sp)
 4007884:	18c00084 	addi	r3,r3,2
 4007888:	d8c02915 	stw	r3,164(sp)
 400788c:	90c0210c 	andi	r3,r18,132
 4007890:	d8c03015 	stw	r3,192(sp)
 4007894:	1801c51e 	bne	r3,zero,4007fac <___vfprintf_internal_r+0xec8>
 4007898:	d9003117 	ldw	r4,196(sp)
 400789c:	d8c02917 	ldw	r3,164(sp)
 40078a0:	20e7c83a 	sub	r19,r4,r3
 40078a4:	04c1c10e 	bge	zero,r19,4007fac <___vfprintf_internal_r+0xec8>
 40078a8:	02400404 	movi	r9,16
 40078ac:	d8c02017 	ldw	r3,128(sp)
 40078b0:	d8801f17 	ldw	r2,124(sp)
 40078b4:	4cc52f0e 	bge	r9,r19,4008d74 <___vfprintf_internal_r+0x1c90>
 40078b8:	01410074 	movhi	r5,1025
 40078bc:	295b7e84 	addi	r5,r5,28154
 40078c0:	dc403b15 	stw	r17,236(sp)
 40078c4:	d9403515 	stw	r5,212(sp)
 40078c8:	9823883a 	mov	r17,r19
 40078cc:	482d883a 	mov	r22,r9
 40078d0:	9027883a 	mov	r19,r18
 40078d4:	070001c4 	movi	fp,7
 40078d8:	8025883a 	mov	r18,r16
 40078dc:	dc002d17 	ldw	r16,180(sp)
 40078e0:	00000306 	br	40078f0 <___vfprintf_internal_r+0x80c>
 40078e4:	8c7ffc04 	addi	r17,r17,-16
 40078e8:	42000204 	addi	r8,r8,8
 40078ec:	b440130e 	bge	r22,r17,400793c <___vfprintf_internal_r+0x858>
 40078f0:	01010074 	movhi	r4,1025
 40078f4:	18c00404 	addi	r3,r3,16
 40078f8:	10800044 	addi	r2,r2,1
 40078fc:	211b7e84 	addi	r4,r4,28154
 4007900:	41000015 	stw	r4,0(r8)
 4007904:	45800115 	stw	r22,4(r8)
 4007908:	d8c02015 	stw	r3,128(sp)
 400790c:	d8801f15 	stw	r2,124(sp)
 4007910:	e0bff40e 	bge	fp,r2,40078e4 <__alt_data_end+0xfc0078e4>
 4007914:	d9801e04 	addi	r6,sp,120
 4007918:	b80b883a 	mov	r5,r23
 400791c:	8009883a 	mov	r4,r16
 4007920:	400e9600 	call	400e960 <__sprint_r>
 4007924:	103ef31e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4007928:	8c7ffc04 	addi	r17,r17,-16
 400792c:	d8c02017 	ldw	r3,128(sp)
 4007930:	d8801f17 	ldw	r2,124(sp)
 4007934:	da000404 	addi	r8,sp,16
 4007938:	b47fed16 	blt	r22,r17,40078f0 <__alt_data_end+0xfc0078f0>
 400793c:	9021883a 	mov	r16,r18
 4007940:	9825883a 	mov	r18,r19
 4007944:	8827883a 	mov	r19,r17
 4007948:	dc403b17 	ldw	r17,236(sp)
 400794c:	d9403517 	ldw	r5,212(sp)
 4007950:	98c7883a 	add	r3,r19,r3
 4007954:	10800044 	addi	r2,r2,1
 4007958:	41400015 	stw	r5,0(r8)
 400795c:	44c00115 	stw	r19,4(r8)
 4007960:	d8c02015 	stw	r3,128(sp)
 4007964:	d8801f15 	stw	r2,124(sp)
 4007968:	010001c4 	movi	r4,7
 400796c:	2082c516 	blt	r4,r2,4008484 <___vfprintf_internal_r+0x13a0>
 4007970:	df002787 	ldb	fp,158(sp)
 4007974:	42000204 	addi	r8,r8,8
 4007978:	e0000c26 	beq	fp,zero,40079ac <___vfprintf_internal_r+0x8c8>
 400797c:	d8801f17 	ldw	r2,124(sp)
 4007980:	d9002784 	addi	r4,sp,158
 4007984:	18c00044 	addi	r3,r3,1
 4007988:	10800044 	addi	r2,r2,1
 400798c:	41000015 	stw	r4,0(r8)
 4007990:	01000044 	movi	r4,1
 4007994:	41000115 	stw	r4,4(r8)
 4007998:	d8c02015 	stw	r3,128(sp)
 400799c:	d8801f15 	stw	r2,124(sp)
 40079a0:	010001c4 	movi	r4,7
 40079a4:	20825e16 	blt	r4,r2,4008320 <___vfprintf_internal_r+0x123c>
 40079a8:	42000204 	addi	r8,r8,8
 40079ac:	d8802c17 	ldw	r2,176(sp)
 40079b0:	10000c26 	beq	r2,zero,40079e4 <___vfprintf_internal_r+0x900>
 40079b4:	d8801f17 	ldw	r2,124(sp)
 40079b8:	d9002704 	addi	r4,sp,156
 40079bc:	18c00084 	addi	r3,r3,2
 40079c0:	10800044 	addi	r2,r2,1
 40079c4:	41000015 	stw	r4,0(r8)
 40079c8:	01000084 	movi	r4,2
 40079cc:	41000115 	stw	r4,4(r8)
 40079d0:	d8c02015 	stw	r3,128(sp)
 40079d4:	d8801f15 	stw	r2,124(sp)
 40079d8:	010001c4 	movi	r4,7
 40079dc:	20825816 	blt	r4,r2,4008340 <___vfprintf_internal_r+0x125c>
 40079e0:	42000204 	addi	r8,r8,8
 40079e4:	d9003017 	ldw	r4,192(sp)
 40079e8:	00802004 	movi	r2,128
 40079ec:	2081bb26 	beq	r4,r2,40080dc <___vfprintf_internal_r+0xff8>
 40079f0:	d9402a17 	ldw	r5,168(sp)
 40079f4:	d8802b17 	ldw	r2,172(sp)
 40079f8:	28adc83a 	sub	r22,r5,r2
 40079fc:	0580310e 	bge	zero,r22,4007ac4 <___vfprintf_internal_r+0x9e0>
 4007a00:	07000404 	movi	fp,16
 4007a04:	d8801f17 	ldw	r2,124(sp)
 4007a08:	e584360e 	bge	fp,r22,4008ae4 <___vfprintf_internal_r+0x1a00>
 4007a0c:	01410074 	movhi	r5,1025
 4007a10:	295b7a84 	addi	r5,r5,28138
 4007a14:	dc402a15 	stw	r17,168(sp)
 4007a18:	d9402c15 	stw	r5,176(sp)
 4007a1c:	b023883a 	mov	r17,r22
 4007a20:	04c001c4 	movi	r19,7
 4007a24:	a82d883a 	mov	r22,r21
 4007a28:	902b883a 	mov	r21,r18
 4007a2c:	8025883a 	mov	r18,r16
 4007a30:	dc002d17 	ldw	r16,180(sp)
 4007a34:	00000306 	br	4007a44 <___vfprintf_internal_r+0x960>
 4007a38:	8c7ffc04 	addi	r17,r17,-16
 4007a3c:	42000204 	addi	r8,r8,8
 4007a40:	e440110e 	bge	fp,r17,4007a88 <___vfprintf_internal_r+0x9a4>
 4007a44:	18c00404 	addi	r3,r3,16
 4007a48:	10800044 	addi	r2,r2,1
 4007a4c:	45000015 	stw	r20,0(r8)
 4007a50:	47000115 	stw	fp,4(r8)
 4007a54:	d8c02015 	stw	r3,128(sp)
 4007a58:	d8801f15 	stw	r2,124(sp)
 4007a5c:	98bff60e 	bge	r19,r2,4007a38 <__alt_data_end+0xfc007a38>
 4007a60:	d9801e04 	addi	r6,sp,120
 4007a64:	b80b883a 	mov	r5,r23
 4007a68:	8009883a 	mov	r4,r16
 4007a6c:	400e9600 	call	400e960 <__sprint_r>
 4007a70:	103ea01e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4007a74:	8c7ffc04 	addi	r17,r17,-16
 4007a78:	d8c02017 	ldw	r3,128(sp)
 4007a7c:	d8801f17 	ldw	r2,124(sp)
 4007a80:	da000404 	addi	r8,sp,16
 4007a84:	e47fef16 	blt	fp,r17,4007a44 <__alt_data_end+0xfc007a44>
 4007a88:	9021883a 	mov	r16,r18
 4007a8c:	a825883a 	mov	r18,r21
 4007a90:	b02b883a 	mov	r21,r22
 4007a94:	882d883a 	mov	r22,r17
 4007a98:	dc402a17 	ldw	r17,168(sp)
 4007a9c:	d9002c17 	ldw	r4,176(sp)
 4007aa0:	1d87883a 	add	r3,r3,r22
 4007aa4:	10800044 	addi	r2,r2,1
 4007aa8:	41000015 	stw	r4,0(r8)
 4007aac:	45800115 	stw	r22,4(r8)
 4007ab0:	d8c02015 	stw	r3,128(sp)
 4007ab4:	d8801f15 	stw	r2,124(sp)
 4007ab8:	010001c4 	movi	r4,7
 4007abc:	20821016 	blt	r4,r2,4008300 <___vfprintf_internal_r+0x121c>
 4007ac0:	42000204 	addi	r8,r8,8
 4007ac4:	9080400c 	andi	r2,r18,256
 4007ac8:	10013a1e 	bne	r2,zero,4007fb4 <___vfprintf_internal_r+0xed0>
 4007acc:	d9402b17 	ldw	r5,172(sp)
 4007ad0:	d8801f17 	ldw	r2,124(sp)
 4007ad4:	44000015 	stw	r16,0(r8)
 4007ad8:	1947883a 	add	r3,r3,r5
 4007adc:	10800044 	addi	r2,r2,1
 4007ae0:	41400115 	stw	r5,4(r8)
 4007ae4:	d8c02015 	stw	r3,128(sp)
 4007ae8:	d8801f15 	stw	r2,124(sp)
 4007aec:	010001c4 	movi	r4,7
 4007af0:	2081f516 	blt	r4,r2,40082c8 <___vfprintf_internal_r+0x11e4>
 4007af4:	42000204 	addi	r8,r8,8
 4007af8:	9480010c 	andi	r18,r18,4
 4007afc:	90003226 	beq	r18,zero,4007bc8 <___vfprintf_internal_r+0xae4>
 4007b00:	d9403117 	ldw	r5,196(sp)
 4007b04:	d8802917 	ldw	r2,164(sp)
 4007b08:	28a1c83a 	sub	r16,r5,r2
 4007b0c:	04002e0e 	bge	zero,r16,4007bc8 <___vfprintf_internal_r+0xae4>
 4007b10:	04400404 	movi	r17,16
 4007b14:	d8801f17 	ldw	r2,124(sp)
 4007b18:	8c04c40e 	bge	r17,r16,4008e2c <___vfprintf_internal_r+0x1d48>
 4007b1c:	01410074 	movhi	r5,1025
 4007b20:	295b7e84 	addi	r5,r5,28154
 4007b24:	d9403515 	stw	r5,212(sp)
 4007b28:	048001c4 	movi	r18,7
 4007b2c:	dcc02d17 	ldw	r19,180(sp)
 4007b30:	00000306 	br	4007b40 <___vfprintf_internal_r+0xa5c>
 4007b34:	843ffc04 	addi	r16,r16,-16
 4007b38:	42000204 	addi	r8,r8,8
 4007b3c:	8c00130e 	bge	r17,r16,4007b8c <___vfprintf_internal_r+0xaa8>
 4007b40:	01010074 	movhi	r4,1025
 4007b44:	18c00404 	addi	r3,r3,16
 4007b48:	10800044 	addi	r2,r2,1
 4007b4c:	211b7e84 	addi	r4,r4,28154
 4007b50:	41000015 	stw	r4,0(r8)
 4007b54:	44400115 	stw	r17,4(r8)
 4007b58:	d8c02015 	stw	r3,128(sp)
 4007b5c:	d8801f15 	stw	r2,124(sp)
 4007b60:	90bff40e 	bge	r18,r2,4007b34 <__alt_data_end+0xfc007b34>
 4007b64:	d9801e04 	addi	r6,sp,120
 4007b68:	b80b883a 	mov	r5,r23
 4007b6c:	9809883a 	mov	r4,r19
 4007b70:	400e9600 	call	400e960 <__sprint_r>
 4007b74:	103e5f1e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4007b78:	843ffc04 	addi	r16,r16,-16
 4007b7c:	d8c02017 	ldw	r3,128(sp)
 4007b80:	d8801f17 	ldw	r2,124(sp)
 4007b84:	da000404 	addi	r8,sp,16
 4007b88:	8c3fed16 	blt	r17,r16,4007b40 <__alt_data_end+0xfc007b40>
 4007b8c:	d9403517 	ldw	r5,212(sp)
 4007b90:	1c07883a 	add	r3,r3,r16
 4007b94:	10800044 	addi	r2,r2,1
 4007b98:	41400015 	stw	r5,0(r8)
 4007b9c:	44000115 	stw	r16,4(r8)
 4007ba0:	d8c02015 	stw	r3,128(sp)
 4007ba4:	d8801f15 	stw	r2,124(sp)
 4007ba8:	010001c4 	movi	r4,7
 4007bac:	2080060e 	bge	r4,r2,4007bc8 <___vfprintf_internal_r+0xae4>
 4007bb0:	d9002d17 	ldw	r4,180(sp)
 4007bb4:	d9801e04 	addi	r6,sp,120
 4007bb8:	b80b883a 	mov	r5,r23
 4007bbc:	400e9600 	call	400e960 <__sprint_r>
 4007bc0:	103e4c1e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4007bc4:	d8c02017 	ldw	r3,128(sp)
 4007bc8:	d8803117 	ldw	r2,196(sp)
 4007bcc:	d9002917 	ldw	r4,164(sp)
 4007bd0:	1100010e 	bge	r2,r4,4007bd8 <___vfprintf_internal_r+0xaf4>
 4007bd4:	2005883a 	mov	r2,r4
 4007bd8:	d9402f17 	ldw	r5,188(sp)
 4007bdc:	288b883a 	add	r5,r5,r2
 4007be0:	d9402f15 	stw	r5,188(sp)
 4007be4:	1801c01e 	bne	r3,zero,40082e8 <___vfprintf_internal_r+0x1204>
 4007be8:	a8800007 	ldb	r2,0(r21)
 4007bec:	d8001f15 	stw	zero,124(sp)
 4007bf0:	da000404 	addi	r8,sp,16
 4007bf4:	103d751e 	bne	r2,zero,40071cc <__alt_data_end+0xfc0071cc>
 4007bf8:	a823883a 	mov	r17,r21
 4007bfc:	003d8b06 	br	400722c <__alt_data_end+0xfc00722c>
 4007c00:	8025883a 	mov	r18,r16
 4007c04:	dc002903 	ldbu	r16,164(sp)
 4007c08:	e011883a 	mov	r8,fp
 4007c0c:	84003fcc 	andi	r16,r16,255
 4007c10:	8005e51e 	bne	r16,zero,40093a8 <___vfprintf_internal_r+0x22c4>
 4007c14:	94800414 	ori	r18,r18,16
 4007c18:	9080080c 	andi	r2,r18,32
 4007c1c:	10022b26 	beq	r2,zero,40084cc <___vfprintf_internal_r+0x13e8>
 4007c20:	d9002e17 	ldw	r4,184(sp)
 4007c24:	d9402a17 	ldw	r5,168(sp)
 4007c28:	d8002785 	stb	zero,158(sp)
 4007c2c:	20c00204 	addi	r3,r4,8
 4007c30:	24c00017 	ldw	r19,0(r4)
 4007c34:	25800117 	ldw	r22,4(r4)
 4007c38:	28042e16 	blt	r5,zero,4008cf4 <___vfprintf_internal_r+0x1c10>
 4007c3c:	013fdfc4 	movi	r4,-129
 4007c40:	9d84b03a 	or	r2,r19,r22
 4007c44:	d8c02e15 	stw	r3,184(sp)
 4007c48:	9124703a 	and	r18,r18,r4
 4007c4c:	0039883a 	mov	fp,zero
 4007c50:	103e801e 	bne	r2,zero,4007654 <__alt_data_end+0xfc007654>
 4007c54:	d9002a17 	ldw	r4,168(sp)
 4007c58:	2002e01e 	bne	r4,zero,40087dc <___vfprintf_internal_r+0x16f8>
 4007c5c:	d8002a15 	stw	zero,168(sp)
 4007c60:	d8002b15 	stw	zero,172(sp)
 4007c64:	dc001e04 	addi	r16,sp,120
 4007c68:	003ef506 	br	4007840 <__alt_data_end+0xfc007840>
 4007c6c:	8025883a 	mov	r18,r16
 4007c70:	dc002903 	ldbu	r16,164(sp)
 4007c74:	e011883a 	mov	r8,fp
 4007c78:	84003fcc 	andi	r16,r16,255
 4007c7c:	8005ba1e 	bne	r16,zero,4009368 <___vfprintf_internal_r+0x2284>
 4007c80:	01010074 	movhi	r4,1025
 4007c84:	211b6e04 	addi	r4,r4,28088
 4007c88:	d9003915 	stw	r4,228(sp)
 4007c8c:	9080080c 	andi	r2,r18,32
 4007c90:	10006126 	beq	r2,zero,4007e18 <___vfprintf_internal_r+0xd34>
 4007c94:	d9402e17 	ldw	r5,184(sp)
 4007c98:	2cc00017 	ldw	r19,0(r5)
 4007c9c:	2d800117 	ldw	r22,4(r5)
 4007ca0:	29400204 	addi	r5,r5,8
 4007ca4:	d9402e15 	stw	r5,184(sp)
 4007ca8:	9080004c 	andi	r2,r18,1
 4007cac:	1001ac26 	beq	r2,zero,4008360 <___vfprintf_internal_r+0x127c>
 4007cb0:	9d84b03a 	or	r2,r19,r22
 4007cb4:	10038526 	beq	r2,zero,4008acc <___vfprintf_internal_r+0x19e8>
 4007cb8:	d8c02a17 	ldw	r3,168(sp)
 4007cbc:	00800c04 	movi	r2,48
 4007cc0:	d8802705 	stb	r2,156(sp)
 4007cc4:	dc402745 	stb	r17,157(sp)
 4007cc8:	d8002785 	stb	zero,158(sp)
 4007ccc:	90800094 	ori	r2,r18,2
 4007cd0:	18047916 	blt	r3,zero,4008eb8 <___vfprintf_internal_r+0x1dd4>
 4007cd4:	00bfdfc4 	movi	r2,-129
 4007cd8:	90a4703a 	and	r18,r18,r2
 4007cdc:	94800094 	ori	r18,r18,2
 4007ce0:	0039883a 	mov	fp,zero
 4007ce4:	d9003917 	ldw	r4,228(sp)
 4007ce8:	dc001e04 	addi	r16,sp,120
 4007cec:	988003cc 	andi	r2,r19,15
 4007cf0:	b006973a 	slli	r3,r22,28
 4007cf4:	2085883a 	add	r2,r4,r2
 4007cf8:	9826d13a 	srli	r19,r19,4
 4007cfc:	10800003 	ldbu	r2,0(r2)
 4007d00:	b02cd13a 	srli	r22,r22,4
 4007d04:	843fffc4 	addi	r16,r16,-1
 4007d08:	1ce6b03a 	or	r19,r3,r19
 4007d0c:	80800005 	stb	r2,0(r16)
 4007d10:	9d84b03a 	or	r2,r19,r22
 4007d14:	103ff51e 	bne	r2,zero,4007cec <__alt_data_end+0xfc007cec>
 4007d18:	d8c02817 	ldw	r3,160(sp)
 4007d1c:	1c07c83a 	sub	r3,r3,r16
 4007d20:	d8c02b15 	stw	r3,172(sp)
 4007d24:	003ec606 	br	4007840 <__alt_data_end+0xfc007840>
 4007d28:	8025883a 	mov	r18,r16
 4007d2c:	dc002903 	ldbu	r16,164(sp)
 4007d30:	e011883a 	mov	r8,fp
 4007d34:	84003fcc 	andi	r16,r16,255
 4007d38:	803e9626 	beq	r16,zero,4007794 <__alt_data_end+0xfc007794>
 4007d3c:	d8c02b03 	ldbu	r3,172(sp)
 4007d40:	d8c02785 	stb	r3,158(sp)
 4007d44:	003e9306 	br	4007794 <__alt_data_end+0xfc007794>
 4007d48:	00c00044 	movi	r3,1
 4007d4c:	d8c02905 	stb	r3,164(sp)
 4007d50:	00c00ac4 	movi	r3,43
 4007d54:	d8c02b05 	stb	r3,172(sp)
 4007d58:	ac400007 	ldb	r17,0(r21)
 4007d5c:	003d4306 	br	400726c <__alt_data_end+0xfc00726c>
 4007d60:	84000814 	ori	r16,r16,32
 4007d64:	ac400007 	ldb	r17,0(r21)
 4007d68:	003d4006 	br	400726c <__alt_data_end+0xfc00726c>
 4007d6c:	d8802e17 	ldw	r2,184(sp)
 4007d70:	8025883a 	mov	r18,r16
 4007d74:	d8002785 	stb	zero,158(sp)
 4007d78:	14000017 	ldw	r16,0(r2)
 4007d7c:	e011883a 	mov	r8,fp
 4007d80:	14c00104 	addi	r19,r2,4
 4007d84:	80042d26 	beq	r16,zero,4008e3c <___vfprintf_internal_r+0x1d58>
 4007d88:	d8c02a17 	ldw	r3,168(sp)
 4007d8c:	1803e416 	blt	r3,zero,4008d20 <___vfprintf_internal_r+0x1c3c>
 4007d90:	180d883a 	mov	r6,r3
 4007d94:	000b883a 	mov	r5,zero
 4007d98:	8009883a 	mov	r4,r16
 4007d9c:	df003d15 	stw	fp,244(sp)
 4007da0:	400ca780 	call	400ca78 <memchr>
 4007da4:	da003d17 	ldw	r8,244(sp)
 4007da8:	10046826 	beq	r2,zero,4008f4c <___vfprintf_internal_r+0x1e68>
 4007dac:	1405c83a 	sub	r2,r2,r16
 4007db0:	d8802b15 	stw	r2,172(sp)
 4007db4:	1003e016 	blt	r2,zero,4008d38 <___vfprintf_internal_r+0x1c54>
 4007db8:	df002783 	ldbu	fp,158(sp)
 4007dbc:	d8802915 	stw	r2,164(sp)
 4007dc0:	dcc02e15 	stw	r19,184(sp)
 4007dc4:	d8002a15 	stw	zero,168(sp)
 4007dc8:	d8003215 	stw	zero,200(sp)
 4007dcc:	003ea206 	br	4007858 <__alt_data_end+0xfc007858>
 4007dd0:	8025883a 	mov	r18,r16
 4007dd4:	dc002903 	ldbu	r16,164(sp)
 4007dd8:	e011883a 	mov	r8,fp
 4007ddc:	84003fcc 	andi	r16,r16,255
 4007de0:	803f8d26 	beq	r16,zero,4007c18 <__alt_data_end+0xfc007c18>
 4007de4:	d8c02b03 	ldbu	r3,172(sp)
 4007de8:	d8c02785 	stb	r3,158(sp)
 4007dec:	003f8a06 	br	4007c18 <__alt_data_end+0xfc007c18>
 4007df0:	8025883a 	mov	r18,r16
 4007df4:	dc002903 	ldbu	r16,164(sp)
 4007df8:	e011883a 	mov	r8,fp
 4007dfc:	84003fcc 	andi	r16,r16,255
 4007e00:	8005661e 	bne	r16,zero,400939c <___vfprintf_internal_r+0x22b8>
 4007e04:	01010074 	movhi	r4,1025
 4007e08:	211b7304 	addi	r4,r4,28108
 4007e0c:	d9003915 	stw	r4,228(sp)
 4007e10:	9080080c 	andi	r2,r18,32
 4007e14:	103f9f1e 	bne	r2,zero,4007c94 <__alt_data_end+0xfc007c94>
 4007e18:	9080040c 	andi	r2,r18,16
 4007e1c:	1002eb26 	beq	r2,zero,40089cc <___vfprintf_internal_r+0x18e8>
 4007e20:	d8802e17 	ldw	r2,184(sp)
 4007e24:	002d883a 	mov	r22,zero
 4007e28:	14c00017 	ldw	r19,0(r2)
 4007e2c:	10800104 	addi	r2,r2,4
 4007e30:	d8802e15 	stw	r2,184(sp)
 4007e34:	003f9c06 	br	4007ca8 <__alt_data_end+0xfc007ca8>
 4007e38:	d8802b07 	ldb	r2,172(sp)
 4007e3c:	1002e11e 	bne	r2,zero,40089c4 <___vfprintf_internal_r+0x18e0>
 4007e40:	00c00044 	movi	r3,1
 4007e44:	d8c02905 	stb	r3,164(sp)
 4007e48:	00c00804 	movi	r3,32
 4007e4c:	d8c02b05 	stb	r3,172(sp)
 4007e50:	ac400007 	ldb	r17,0(r21)
 4007e54:	003d0506 	br	400726c <__alt_data_end+0xfc00726c>
 4007e58:	84000054 	ori	r16,r16,1
 4007e5c:	ac400007 	ldb	r17,0(r21)
 4007e60:	003d0206 	br	400726c <__alt_data_end+0xfc00726c>
 4007e64:	8025883a 	mov	r18,r16
 4007e68:	dc002903 	ldbu	r16,164(sp)
 4007e6c:	e011883a 	mov	r8,fp
 4007e70:	84003fcc 	andi	r16,r16,255
 4007e74:	803de726 	beq	r16,zero,4007614 <__alt_data_end+0xfc007614>
 4007e78:	d8c02b03 	ldbu	r3,172(sp)
 4007e7c:	d8c02785 	stb	r3,158(sp)
 4007e80:	003de406 	br	4007614 <__alt_data_end+0xfc007614>
 4007e84:	84001014 	ori	r16,r16,64
 4007e88:	ac400007 	ldb	r17,0(r21)
 4007e8c:	003cf706 	br	400726c <__alt_data_end+0xfc00726c>
 4007e90:	ac400007 	ldb	r17,0(r21)
 4007e94:	00801b04 	movi	r2,108
 4007e98:	88838f26 	beq	r17,r2,4008cd8 <___vfprintf_internal_r+0x1bf4>
 4007e9c:	84000414 	ori	r16,r16,16
 4007ea0:	003cf206 	br	400726c <__alt_data_end+0xfc00726c>
 4007ea4:	8025883a 	mov	r18,r16
 4007ea8:	dc002903 	ldbu	r16,164(sp)
 4007eac:	e011883a 	mov	r8,fp
 4007eb0:	84003fcc 	andi	r16,r16,255
 4007eb4:	80053f1e 	bne	r16,zero,40093b4 <___vfprintf_internal_r+0x22d0>
 4007eb8:	9080080c 	andi	r2,r18,32
 4007ebc:	1002d226 	beq	r2,zero,4008a08 <___vfprintf_internal_r+0x1924>
 4007ec0:	d9002e17 	ldw	r4,184(sp)
 4007ec4:	d9402f17 	ldw	r5,188(sp)
 4007ec8:	20800017 	ldw	r2,0(r4)
 4007ecc:	2807d7fa 	srai	r3,r5,31
 4007ed0:	21000104 	addi	r4,r4,4
 4007ed4:	d9002e15 	stw	r4,184(sp)
 4007ed8:	11400015 	stw	r5,0(r2)
 4007edc:	10c00115 	stw	r3,4(r2)
 4007ee0:	003cb806 	br	40071c4 <__alt_data_end+0xfc0071c4>
 4007ee4:	d8c02e17 	ldw	r3,184(sp)
 4007ee8:	d9002e17 	ldw	r4,184(sp)
 4007eec:	8025883a 	mov	r18,r16
 4007ef0:	18800017 	ldw	r2,0(r3)
 4007ef4:	21000104 	addi	r4,r4,4
 4007ef8:	00c00044 	movi	r3,1
 4007efc:	e011883a 	mov	r8,fp
 4007f00:	d8c02915 	stw	r3,164(sp)
 4007f04:	d8002785 	stb	zero,158(sp)
 4007f08:	d8801405 	stb	r2,80(sp)
 4007f0c:	d9002e15 	stw	r4,184(sp)
 4007f10:	d8c02b15 	stw	r3,172(sp)
 4007f14:	d8002a15 	stw	zero,168(sp)
 4007f18:	d8003215 	stw	zero,200(sp)
 4007f1c:	dc001404 	addi	r16,sp,80
 4007f20:	0039883a 	mov	fp,zero
 4007f24:	003e5306 	br	4007874 <__alt_data_end+0xfc007874>
 4007f28:	01010074 	movhi	r4,1025
 4007f2c:	211b7304 	addi	r4,r4,28108
 4007f30:	0039883a 	mov	fp,zero
 4007f34:	d9003915 	stw	r4,228(sp)
 4007f38:	04401e04 	movi	r17,120
 4007f3c:	003f6906 	br	4007ce4 <__alt_data_end+0xfc007ce4>
 4007f40:	8025883a 	mov	r18,r16
 4007f44:	dc002903 	ldbu	r16,164(sp)
 4007f48:	e011883a 	mov	r8,fp
 4007f4c:	84003fcc 	andi	r16,r16,255
 4007f50:	8005081e 	bne	r16,zero,4009374 <___vfprintf_internal_r+0x2290>
 4007f54:	883d6126 	beq	r17,zero,40074dc <__alt_data_end+0xfc0074dc>
 4007f58:	00c00044 	movi	r3,1
 4007f5c:	d8c02915 	stw	r3,164(sp)
 4007f60:	dc401405 	stb	r17,80(sp)
 4007f64:	d8002785 	stb	zero,158(sp)
 4007f68:	003fe906 	br	4007f10 <__alt_data_end+0xfc007f10>
 4007f6c:	01410074 	movhi	r5,1025
 4007f70:	295b7304 	addi	r5,r5,28108
 4007f74:	d9403915 	stw	r5,228(sp)
 4007f78:	d8c02e15 	stw	r3,184(sp)
 4007f7c:	1025883a 	mov	r18,r2
 4007f80:	04401e04 	movi	r17,120
 4007f84:	9d84b03a 	or	r2,r19,r22
 4007f88:	1000fc1e 	bne	r2,zero,400837c <___vfprintf_internal_r+0x1298>
 4007f8c:	0039883a 	mov	fp,zero
 4007f90:	00800084 	movi	r2,2
 4007f94:	10803fcc 	andi	r2,r2,255
 4007f98:	00c00044 	movi	r3,1
 4007f9c:	10c20f26 	beq	r2,r3,40087dc <___vfprintf_internal_r+0x16f8>
 4007fa0:	00c00084 	movi	r3,2
 4007fa4:	10fd3326 	beq	r2,r3,4007474 <__alt_data_end+0xfc007474>
 4007fa8:	003e0b06 	br	40077d8 <__alt_data_end+0xfc0077d8>
 4007fac:	d8c02017 	ldw	r3,128(sp)
 4007fb0:	003e7106 	br	4007978 <__alt_data_end+0xfc007978>
 4007fb4:	00801944 	movi	r2,101
 4007fb8:	14407e0e 	bge	r2,r17,40081b4 <___vfprintf_internal_r+0x10d0>
 4007fbc:	d9003617 	ldw	r4,216(sp)
 4007fc0:	d9403817 	ldw	r5,224(sp)
 4007fc4:	000d883a 	mov	r6,zero
 4007fc8:	000f883a 	mov	r7,zero
 4007fcc:	d8c03c15 	stw	r3,240(sp)
 4007fd0:	da003d15 	stw	r8,244(sp)
 4007fd4:	40127f00 	call	40127f0 <__eqdf2>
 4007fd8:	d8c03c17 	ldw	r3,240(sp)
 4007fdc:	da003d17 	ldw	r8,244(sp)
 4007fe0:	1000f71e 	bne	r2,zero,40083c0 <___vfprintf_internal_r+0x12dc>
 4007fe4:	d8801f17 	ldw	r2,124(sp)
 4007fe8:	01010074 	movhi	r4,1025
 4007fec:	211b7a04 	addi	r4,r4,28136
 4007ff0:	18c00044 	addi	r3,r3,1
 4007ff4:	10800044 	addi	r2,r2,1
 4007ff8:	41000015 	stw	r4,0(r8)
 4007ffc:	01000044 	movi	r4,1
 4008000:	41000115 	stw	r4,4(r8)
 4008004:	d8c02015 	stw	r3,128(sp)
 4008008:	d8801f15 	stw	r2,124(sp)
 400800c:	010001c4 	movi	r4,7
 4008010:	2082b816 	blt	r4,r2,4008af4 <___vfprintf_internal_r+0x1a10>
 4008014:	42000204 	addi	r8,r8,8
 4008018:	d8802617 	ldw	r2,152(sp)
 400801c:	d9403317 	ldw	r5,204(sp)
 4008020:	11400216 	blt	r2,r5,400802c <___vfprintf_internal_r+0xf48>
 4008024:	9080004c 	andi	r2,r18,1
 4008028:	103eb326 	beq	r2,zero,4007af8 <__alt_data_end+0xfc007af8>
 400802c:	d8803717 	ldw	r2,220(sp)
 4008030:	d9003417 	ldw	r4,208(sp)
 4008034:	d9403717 	ldw	r5,220(sp)
 4008038:	1887883a 	add	r3,r3,r2
 400803c:	d8801f17 	ldw	r2,124(sp)
 4008040:	41000015 	stw	r4,0(r8)
 4008044:	41400115 	stw	r5,4(r8)
 4008048:	10800044 	addi	r2,r2,1
 400804c:	d8c02015 	stw	r3,128(sp)
 4008050:	d8801f15 	stw	r2,124(sp)
 4008054:	010001c4 	movi	r4,7
 4008058:	20832916 	blt	r4,r2,4008d00 <___vfprintf_internal_r+0x1c1c>
 400805c:	42000204 	addi	r8,r8,8
 4008060:	d8803317 	ldw	r2,204(sp)
 4008064:	143fffc4 	addi	r16,r2,-1
 4008068:	043ea30e 	bge	zero,r16,4007af8 <__alt_data_end+0xfc007af8>
 400806c:	04400404 	movi	r17,16
 4008070:	d8801f17 	ldw	r2,124(sp)
 4008074:	8c00880e 	bge	r17,r16,4008298 <___vfprintf_internal_r+0x11b4>
 4008078:	01410074 	movhi	r5,1025
 400807c:	295b7a84 	addi	r5,r5,28138
 4008080:	d9402c15 	stw	r5,176(sp)
 4008084:	058001c4 	movi	r22,7
 4008088:	dcc02d17 	ldw	r19,180(sp)
 400808c:	00000306 	br	400809c <___vfprintf_internal_r+0xfb8>
 4008090:	42000204 	addi	r8,r8,8
 4008094:	843ffc04 	addi	r16,r16,-16
 4008098:	8c00820e 	bge	r17,r16,40082a4 <___vfprintf_internal_r+0x11c0>
 400809c:	18c00404 	addi	r3,r3,16
 40080a0:	10800044 	addi	r2,r2,1
 40080a4:	45000015 	stw	r20,0(r8)
 40080a8:	44400115 	stw	r17,4(r8)
 40080ac:	d8c02015 	stw	r3,128(sp)
 40080b0:	d8801f15 	stw	r2,124(sp)
 40080b4:	b0bff60e 	bge	r22,r2,4008090 <__alt_data_end+0xfc008090>
 40080b8:	d9801e04 	addi	r6,sp,120
 40080bc:	b80b883a 	mov	r5,r23
 40080c0:	9809883a 	mov	r4,r19
 40080c4:	400e9600 	call	400e960 <__sprint_r>
 40080c8:	103d0a1e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 40080cc:	d8c02017 	ldw	r3,128(sp)
 40080d0:	d8801f17 	ldw	r2,124(sp)
 40080d4:	da000404 	addi	r8,sp,16
 40080d8:	003fee06 	br	4008094 <__alt_data_end+0xfc008094>
 40080dc:	d9403117 	ldw	r5,196(sp)
 40080e0:	d8802917 	ldw	r2,164(sp)
 40080e4:	28adc83a 	sub	r22,r5,r2
 40080e8:	05be410e 	bge	zero,r22,40079f0 <__alt_data_end+0xfc0079f0>
 40080ec:	07000404 	movi	fp,16
 40080f0:	d8801f17 	ldw	r2,124(sp)
 40080f4:	e5838f0e 	bge	fp,r22,4008f34 <___vfprintf_internal_r+0x1e50>
 40080f8:	01410074 	movhi	r5,1025
 40080fc:	295b7a84 	addi	r5,r5,28138
 4008100:	dc403015 	stw	r17,192(sp)
 4008104:	d9402c15 	stw	r5,176(sp)
 4008108:	b023883a 	mov	r17,r22
 400810c:	04c001c4 	movi	r19,7
 4008110:	a82d883a 	mov	r22,r21
 4008114:	902b883a 	mov	r21,r18
 4008118:	8025883a 	mov	r18,r16
 400811c:	dc002d17 	ldw	r16,180(sp)
 4008120:	00000306 	br	4008130 <___vfprintf_internal_r+0x104c>
 4008124:	8c7ffc04 	addi	r17,r17,-16
 4008128:	42000204 	addi	r8,r8,8
 400812c:	e440110e 	bge	fp,r17,4008174 <___vfprintf_internal_r+0x1090>
 4008130:	18c00404 	addi	r3,r3,16
 4008134:	10800044 	addi	r2,r2,1
 4008138:	45000015 	stw	r20,0(r8)
 400813c:	47000115 	stw	fp,4(r8)
 4008140:	d8c02015 	stw	r3,128(sp)
 4008144:	d8801f15 	stw	r2,124(sp)
 4008148:	98bff60e 	bge	r19,r2,4008124 <__alt_data_end+0xfc008124>
 400814c:	d9801e04 	addi	r6,sp,120
 4008150:	b80b883a 	mov	r5,r23
 4008154:	8009883a 	mov	r4,r16
 4008158:	400e9600 	call	400e960 <__sprint_r>
 400815c:	103ce51e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008160:	8c7ffc04 	addi	r17,r17,-16
 4008164:	d8c02017 	ldw	r3,128(sp)
 4008168:	d8801f17 	ldw	r2,124(sp)
 400816c:	da000404 	addi	r8,sp,16
 4008170:	e47fef16 	blt	fp,r17,4008130 <__alt_data_end+0xfc008130>
 4008174:	9021883a 	mov	r16,r18
 4008178:	a825883a 	mov	r18,r21
 400817c:	b02b883a 	mov	r21,r22
 4008180:	882d883a 	mov	r22,r17
 4008184:	dc403017 	ldw	r17,192(sp)
 4008188:	d9002c17 	ldw	r4,176(sp)
 400818c:	1d87883a 	add	r3,r3,r22
 4008190:	10800044 	addi	r2,r2,1
 4008194:	41000015 	stw	r4,0(r8)
 4008198:	45800115 	stw	r22,4(r8)
 400819c:	d8c02015 	stw	r3,128(sp)
 40081a0:	d8801f15 	stw	r2,124(sp)
 40081a4:	010001c4 	movi	r4,7
 40081a8:	20818e16 	blt	r4,r2,40087e4 <___vfprintf_internal_r+0x1700>
 40081ac:	42000204 	addi	r8,r8,8
 40081b0:	003e0f06 	br	40079f0 <__alt_data_end+0xfc0079f0>
 40081b4:	d9403317 	ldw	r5,204(sp)
 40081b8:	00800044 	movi	r2,1
 40081bc:	18c00044 	addi	r3,r3,1
 40081c0:	1141530e 	bge	r2,r5,4008710 <___vfprintf_internal_r+0x162c>
 40081c4:	dc401f17 	ldw	r17,124(sp)
 40081c8:	00800044 	movi	r2,1
 40081cc:	40800115 	stw	r2,4(r8)
 40081d0:	8c400044 	addi	r17,r17,1
 40081d4:	44000015 	stw	r16,0(r8)
 40081d8:	d8c02015 	stw	r3,128(sp)
 40081dc:	dc401f15 	stw	r17,124(sp)
 40081e0:	008001c4 	movi	r2,7
 40081e4:	14416b16 	blt	r2,r17,4008794 <___vfprintf_internal_r+0x16b0>
 40081e8:	42000204 	addi	r8,r8,8
 40081ec:	d8803717 	ldw	r2,220(sp)
 40081f0:	d9003417 	ldw	r4,208(sp)
 40081f4:	8c400044 	addi	r17,r17,1
 40081f8:	10c7883a 	add	r3,r2,r3
 40081fc:	40800115 	stw	r2,4(r8)
 4008200:	41000015 	stw	r4,0(r8)
 4008204:	d8c02015 	stw	r3,128(sp)
 4008208:	dc401f15 	stw	r17,124(sp)
 400820c:	008001c4 	movi	r2,7
 4008210:	14416916 	blt	r2,r17,40087b8 <___vfprintf_internal_r+0x16d4>
 4008214:	45800204 	addi	r22,r8,8
 4008218:	d9003617 	ldw	r4,216(sp)
 400821c:	d9403817 	ldw	r5,224(sp)
 4008220:	000d883a 	mov	r6,zero
 4008224:	000f883a 	mov	r7,zero
 4008228:	d8c03c15 	stw	r3,240(sp)
 400822c:	40127f00 	call	40127f0 <__eqdf2>
 4008230:	d8c03c17 	ldw	r3,240(sp)
 4008234:	1000bc26 	beq	r2,zero,4008528 <___vfprintf_internal_r+0x1444>
 4008238:	d9403317 	ldw	r5,204(sp)
 400823c:	84000044 	addi	r16,r16,1
 4008240:	8c400044 	addi	r17,r17,1
 4008244:	28bfffc4 	addi	r2,r5,-1
 4008248:	1887883a 	add	r3,r3,r2
 400824c:	b0800115 	stw	r2,4(r22)
 4008250:	b4000015 	stw	r16,0(r22)
 4008254:	d8c02015 	stw	r3,128(sp)
 4008258:	dc401f15 	stw	r17,124(sp)
 400825c:	008001c4 	movi	r2,7
 4008260:	14414316 	blt	r2,r17,4008770 <___vfprintf_internal_r+0x168c>
 4008264:	b5800204 	addi	r22,r22,8
 4008268:	d9003a17 	ldw	r4,232(sp)
 400826c:	df0022c4 	addi	fp,sp,139
 4008270:	8c400044 	addi	r17,r17,1
 4008274:	20c7883a 	add	r3,r4,r3
 4008278:	b7000015 	stw	fp,0(r22)
 400827c:	b1000115 	stw	r4,4(r22)
 4008280:	d8c02015 	stw	r3,128(sp)
 4008284:	dc401f15 	stw	r17,124(sp)
 4008288:	008001c4 	movi	r2,7
 400828c:	14400e16 	blt	r2,r17,40082c8 <___vfprintf_internal_r+0x11e4>
 4008290:	b2000204 	addi	r8,r22,8
 4008294:	003e1806 	br	4007af8 <__alt_data_end+0xfc007af8>
 4008298:	01010074 	movhi	r4,1025
 400829c:	211b7a84 	addi	r4,r4,28138
 40082a0:	d9002c15 	stw	r4,176(sp)
 40082a4:	d9002c17 	ldw	r4,176(sp)
 40082a8:	1c07883a 	add	r3,r3,r16
 40082ac:	44000115 	stw	r16,4(r8)
 40082b0:	41000015 	stw	r4,0(r8)
 40082b4:	10800044 	addi	r2,r2,1
 40082b8:	d8c02015 	stw	r3,128(sp)
 40082bc:	d8801f15 	stw	r2,124(sp)
 40082c0:	010001c4 	movi	r4,7
 40082c4:	20be0b0e 	bge	r4,r2,4007af4 <__alt_data_end+0xfc007af4>
 40082c8:	d9002d17 	ldw	r4,180(sp)
 40082cc:	d9801e04 	addi	r6,sp,120
 40082d0:	b80b883a 	mov	r5,r23
 40082d4:	400e9600 	call	400e960 <__sprint_r>
 40082d8:	103c861e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 40082dc:	d8c02017 	ldw	r3,128(sp)
 40082e0:	da000404 	addi	r8,sp,16
 40082e4:	003e0406 	br	4007af8 <__alt_data_end+0xfc007af8>
 40082e8:	d9002d17 	ldw	r4,180(sp)
 40082ec:	d9801e04 	addi	r6,sp,120
 40082f0:	b80b883a 	mov	r5,r23
 40082f4:	400e9600 	call	400e960 <__sprint_r>
 40082f8:	103e3b26 	beq	r2,zero,4007be8 <__alt_data_end+0xfc007be8>
 40082fc:	003c7d06 	br	40074f4 <__alt_data_end+0xfc0074f4>
 4008300:	d9002d17 	ldw	r4,180(sp)
 4008304:	d9801e04 	addi	r6,sp,120
 4008308:	b80b883a 	mov	r5,r23
 400830c:	400e9600 	call	400e960 <__sprint_r>
 4008310:	103c781e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008314:	d8c02017 	ldw	r3,128(sp)
 4008318:	da000404 	addi	r8,sp,16
 400831c:	003de906 	br	4007ac4 <__alt_data_end+0xfc007ac4>
 4008320:	d9002d17 	ldw	r4,180(sp)
 4008324:	d9801e04 	addi	r6,sp,120
 4008328:	b80b883a 	mov	r5,r23
 400832c:	400e9600 	call	400e960 <__sprint_r>
 4008330:	103c701e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008334:	d8c02017 	ldw	r3,128(sp)
 4008338:	da000404 	addi	r8,sp,16
 400833c:	003d9b06 	br	40079ac <__alt_data_end+0xfc0079ac>
 4008340:	d9002d17 	ldw	r4,180(sp)
 4008344:	d9801e04 	addi	r6,sp,120
 4008348:	b80b883a 	mov	r5,r23
 400834c:	400e9600 	call	400e960 <__sprint_r>
 4008350:	103c681e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008354:	d8c02017 	ldw	r3,128(sp)
 4008358:	da000404 	addi	r8,sp,16
 400835c:	003da106 	br	40079e4 <__alt_data_end+0xfc0079e4>
 4008360:	d9402a17 	ldw	r5,168(sp)
 4008364:	d8002785 	stb	zero,158(sp)
 4008368:	283f0616 	blt	r5,zero,4007f84 <__alt_data_end+0xfc007f84>
 400836c:	00ffdfc4 	movi	r3,-129
 4008370:	9d84b03a 	or	r2,r19,r22
 4008374:	90e4703a 	and	r18,r18,r3
 4008378:	103c3b26 	beq	r2,zero,4007468 <__alt_data_end+0xfc007468>
 400837c:	0039883a 	mov	fp,zero
 4008380:	003e5806 	br	4007ce4 <__alt_data_end+0xfc007ce4>
 4008384:	9080040c 	andi	r2,r18,16
 4008388:	1001b326 	beq	r2,zero,4008a58 <___vfprintf_internal_r+0x1974>
 400838c:	d8c02e17 	ldw	r3,184(sp)
 4008390:	d9002a17 	ldw	r4,168(sp)
 4008394:	d8002785 	stb	zero,158(sp)
 4008398:	18800104 	addi	r2,r3,4
 400839c:	1cc00017 	ldw	r19,0(r3)
 40083a0:	002d883a 	mov	r22,zero
 40083a4:	2001b516 	blt	r4,zero,4008a7c <___vfprintf_internal_r+0x1998>
 40083a8:	00ffdfc4 	movi	r3,-129
 40083ac:	d8802e15 	stw	r2,184(sp)
 40083b0:	90e4703a 	and	r18,r18,r3
 40083b4:	983d0526 	beq	r19,zero,40077cc <__alt_data_end+0xfc0077cc>
 40083b8:	0039883a 	mov	fp,zero
 40083bc:	003d0806 	br	40077e0 <__alt_data_end+0xfc0077e0>
 40083c0:	dc402617 	ldw	r17,152(sp)
 40083c4:	0441d30e 	bge	zero,r17,4008b14 <___vfprintf_internal_r+0x1a30>
 40083c8:	dc403217 	ldw	r17,200(sp)
 40083cc:	d8803317 	ldw	r2,204(sp)
 40083d0:	1440010e 	bge	r2,r17,40083d8 <___vfprintf_internal_r+0x12f4>
 40083d4:	1023883a 	mov	r17,r2
 40083d8:	04400a0e 	bge	zero,r17,4008404 <___vfprintf_internal_r+0x1320>
 40083dc:	d8801f17 	ldw	r2,124(sp)
 40083e0:	1c47883a 	add	r3,r3,r17
 40083e4:	44000015 	stw	r16,0(r8)
 40083e8:	10800044 	addi	r2,r2,1
 40083ec:	44400115 	stw	r17,4(r8)
 40083f0:	d8c02015 	stw	r3,128(sp)
 40083f4:	d8801f15 	stw	r2,124(sp)
 40083f8:	010001c4 	movi	r4,7
 40083fc:	20826516 	blt	r4,r2,4008d94 <___vfprintf_internal_r+0x1cb0>
 4008400:	42000204 	addi	r8,r8,8
 4008404:	88026116 	blt	r17,zero,4008d8c <___vfprintf_internal_r+0x1ca8>
 4008408:	d9003217 	ldw	r4,200(sp)
 400840c:	2463c83a 	sub	r17,r4,r17
 4008410:	04407b0e 	bge	zero,r17,4008600 <___vfprintf_internal_r+0x151c>
 4008414:	05800404 	movi	r22,16
 4008418:	d8801f17 	ldw	r2,124(sp)
 400841c:	b4419d0e 	bge	r22,r17,4008a94 <___vfprintf_internal_r+0x19b0>
 4008420:	01010074 	movhi	r4,1025
 4008424:	211b7a84 	addi	r4,r4,28138
 4008428:	d9002c15 	stw	r4,176(sp)
 400842c:	070001c4 	movi	fp,7
 4008430:	dcc02d17 	ldw	r19,180(sp)
 4008434:	00000306 	br	4008444 <___vfprintf_internal_r+0x1360>
 4008438:	42000204 	addi	r8,r8,8
 400843c:	8c7ffc04 	addi	r17,r17,-16
 4008440:	b441970e 	bge	r22,r17,4008aa0 <___vfprintf_internal_r+0x19bc>
 4008444:	18c00404 	addi	r3,r3,16
 4008448:	10800044 	addi	r2,r2,1
 400844c:	45000015 	stw	r20,0(r8)
 4008450:	45800115 	stw	r22,4(r8)
 4008454:	d8c02015 	stw	r3,128(sp)
 4008458:	d8801f15 	stw	r2,124(sp)
 400845c:	e0bff60e 	bge	fp,r2,4008438 <__alt_data_end+0xfc008438>
 4008460:	d9801e04 	addi	r6,sp,120
 4008464:	b80b883a 	mov	r5,r23
 4008468:	9809883a 	mov	r4,r19
 400846c:	400e9600 	call	400e960 <__sprint_r>
 4008470:	103c201e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008474:	d8c02017 	ldw	r3,128(sp)
 4008478:	d8801f17 	ldw	r2,124(sp)
 400847c:	da000404 	addi	r8,sp,16
 4008480:	003fee06 	br	400843c <__alt_data_end+0xfc00843c>
 4008484:	d9002d17 	ldw	r4,180(sp)
 4008488:	d9801e04 	addi	r6,sp,120
 400848c:	b80b883a 	mov	r5,r23
 4008490:	400e9600 	call	400e960 <__sprint_r>
 4008494:	103c171e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008498:	d8c02017 	ldw	r3,128(sp)
 400849c:	df002787 	ldb	fp,158(sp)
 40084a0:	da000404 	addi	r8,sp,16
 40084a4:	003d3406 	br	4007978 <__alt_data_end+0xfc007978>
 40084a8:	9080040c 	andi	r2,r18,16
 40084ac:	10016126 	beq	r2,zero,4008a34 <___vfprintf_internal_r+0x1950>
 40084b0:	d9402e17 	ldw	r5,184(sp)
 40084b4:	2cc00017 	ldw	r19,0(r5)
 40084b8:	29400104 	addi	r5,r5,4
 40084bc:	d9402e15 	stw	r5,184(sp)
 40084c0:	982dd7fa 	srai	r22,r19,31
 40084c4:	b005883a 	mov	r2,r22
 40084c8:	003c5a06 	br	4007634 <__alt_data_end+0xfc007634>
 40084cc:	9080040c 	andi	r2,r18,16
 40084d0:	10003526 	beq	r2,zero,40085a8 <___vfprintf_internal_r+0x14c4>
 40084d4:	d8c02e17 	ldw	r3,184(sp)
 40084d8:	d9002a17 	ldw	r4,168(sp)
 40084dc:	d8002785 	stb	zero,158(sp)
 40084e0:	18800104 	addi	r2,r3,4
 40084e4:	1cc00017 	ldw	r19,0(r3)
 40084e8:	002d883a 	mov	r22,zero
 40084ec:	20003716 	blt	r4,zero,40085cc <___vfprintf_internal_r+0x14e8>
 40084f0:	00ffdfc4 	movi	r3,-129
 40084f4:	d8802e15 	stw	r2,184(sp)
 40084f8:	90e4703a 	and	r18,r18,r3
 40084fc:	0039883a 	mov	fp,zero
 4008500:	983dd426 	beq	r19,zero,4007c54 <__alt_data_end+0xfc007c54>
 4008504:	00800244 	movi	r2,9
 4008508:	14fc5336 	bltu	r2,r19,4007658 <__alt_data_end+0xfc007658>
 400850c:	d8c02817 	ldw	r3,160(sp)
 4008510:	dc001dc4 	addi	r16,sp,119
 4008514:	9cc00c04 	addi	r19,r19,48
 4008518:	1c07c83a 	sub	r3,r3,r16
 400851c:	dcc01dc5 	stb	r19,119(sp)
 4008520:	d8c02b15 	stw	r3,172(sp)
 4008524:	003cc606 	br	4007840 <__alt_data_end+0xfc007840>
 4008528:	d8803317 	ldw	r2,204(sp)
 400852c:	143fffc4 	addi	r16,r2,-1
 4008530:	043f4d0e 	bge	zero,r16,4008268 <__alt_data_end+0xfc008268>
 4008534:	07000404 	movi	fp,16
 4008538:	e400810e 	bge	fp,r16,4008740 <___vfprintf_internal_r+0x165c>
 400853c:	01410074 	movhi	r5,1025
 4008540:	295b7a84 	addi	r5,r5,28138
 4008544:	d9402c15 	stw	r5,176(sp)
 4008548:	01c001c4 	movi	r7,7
 400854c:	dcc02d17 	ldw	r19,180(sp)
 4008550:	00000306 	br	4008560 <___vfprintf_internal_r+0x147c>
 4008554:	b5800204 	addi	r22,r22,8
 4008558:	843ffc04 	addi	r16,r16,-16
 400855c:	e4007b0e 	bge	fp,r16,400874c <___vfprintf_internal_r+0x1668>
 4008560:	18c00404 	addi	r3,r3,16
 4008564:	8c400044 	addi	r17,r17,1
 4008568:	b5000015 	stw	r20,0(r22)
 400856c:	b7000115 	stw	fp,4(r22)
 4008570:	d8c02015 	stw	r3,128(sp)
 4008574:	dc401f15 	stw	r17,124(sp)
 4008578:	3c7ff60e 	bge	r7,r17,4008554 <__alt_data_end+0xfc008554>
 400857c:	d9801e04 	addi	r6,sp,120
 4008580:	b80b883a 	mov	r5,r23
 4008584:	9809883a 	mov	r4,r19
 4008588:	d9c03c15 	stw	r7,240(sp)
 400858c:	400e9600 	call	400e960 <__sprint_r>
 4008590:	d9c03c17 	ldw	r7,240(sp)
 4008594:	103bd71e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008598:	d8c02017 	ldw	r3,128(sp)
 400859c:	dc401f17 	ldw	r17,124(sp)
 40085a0:	dd800404 	addi	r22,sp,16
 40085a4:	003fec06 	br	4008558 <__alt_data_end+0xfc008558>
 40085a8:	9080100c 	andi	r2,r18,64
 40085ac:	d8002785 	stb	zero,158(sp)
 40085b0:	10010e26 	beq	r2,zero,40089ec <___vfprintf_internal_r+0x1908>
 40085b4:	d9402e17 	ldw	r5,184(sp)
 40085b8:	d8c02a17 	ldw	r3,168(sp)
 40085bc:	002d883a 	mov	r22,zero
 40085c0:	28800104 	addi	r2,r5,4
 40085c4:	2cc0000b 	ldhu	r19,0(r5)
 40085c8:	183fc90e 	bge	r3,zero,40084f0 <__alt_data_end+0xfc0084f0>
 40085cc:	d8802e15 	stw	r2,184(sp)
 40085d0:	0039883a 	mov	fp,zero
 40085d4:	9d84b03a 	or	r2,r19,r22
 40085d8:	103c1e1e 	bne	r2,zero,4007654 <__alt_data_end+0xfc007654>
 40085dc:	00800044 	movi	r2,1
 40085e0:	003e6c06 	br	4007f94 <__alt_data_end+0xfc007f94>
 40085e4:	d9002d17 	ldw	r4,180(sp)
 40085e8:	d9801e04 	addi	r6,sp,120
 40085ec:	b80b883a 	mov	r5,r23
 40085f0:	400e9600 	call	400e960 <__sprint_r>
 40085f4:	103bbf1e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 40085f8:	d8c02017 	ldw	r3,128(sp)
 40085fc:	da000404 	addi	r8,sp,16
 4008600:	d9003217 	ldw	r4,200(sp)
 4008604:	d8802617 	ldw	r2,152(sp)
 4008608:	d9403317 	ldw	r5,204(sp)
 400860c:	8123883a 	add	r17,r16,r4
 4008610:	11400216 	blt	r2,r5,400861c <___vfprintf_internal_r+0x1538>
 4008614:	9100004c 	andi	r4,r18,1
 4008618:	20000d26 	beq	r4,zero,4008650 <___vfprintf_internal_r+0x156c>
 400861c:	d9003717 	ldw	r4,220(sp)
 4008620:	d9403417 	ldw	r5,208(sp)
 4008624:	1907883a 	add	r3,r3,r4
 4008628:	d9001f17 	ldw	r4,124(sp)
 400862c:	41400015 	stw	r5,0(r8)
 4008630:	d9403717 	ldw	r5,220(sp)
 4008634:	21000044 	addi	r4,r4,1
 4008638:	d8c02015 	stw	r3,128(sp)
 400863c:	41400115 	stw	r5,4(r8)
 4008640:	d9001f15 	stw	r4,124(sp)
 4008644:	014001c4 	movi	r5,7
 4008648:	2901e816 	blt	r5,r4,4008dec <___vfprintf_internal_r+0x1d08>
 400864c:	42000204 	addi	r8,r8,8
 4008650:	d9003317 	ldw	r4,204(sp)
 4008654:	8121883a 	add	r16,r16,r4
 4008658:	2085c83a 	sub	r2,r4,r2
 400865c:	8461c83a 	sub	r16,r16,r17
 4008660:	1400010e 	bge	r2,r16,4008668 <___vfprintf_internal_r+0x1584>
 4008664:	1021883a 	mov	r16,r2
 4008668:	04000a0e 	bge	zero,r16,4008694 <___vfprintf_internal_r+0x15b0>
 400866c:	d9001f17 	ldw	r4,124(sp)
 4008670:	1c07883a 	add	r3,r3,r16
 4008674:	44400015 	stw	r17,0(r8)
 4008678:	21000044 	addi	r4,r4,1
 400867c:	44000115 	stw	r16,4(r8)
 4008680:	d8c02015 	stw	r3,128(sp)
 4008684:	d9001f15 	stw	r4,124(sp)
 4008688:	014001c4 	movi	r5,7
 400868c:	2901fb16 	blt	r5,r4,4008e7c <___vfprintf_internal_r+0x1d98>
 4008690:	42000204 	addi	r8,r8,8
 4008694:	8001f716 	blt	r16,zero,4008e74 <___vfprintf_internal_r+0x1d90>
 4008698:	1421c83a 	sub	r16,r2,r16
 400869c:	043d160e 	bge	zero,r16,4007af8 <__alt_data_end+0xfc007af8>
 40086a0:	04400404 	movi	r17,16
 40086a4:	d8801f17 	ldw	r2,124(sp)
 40086a8:	8c3efb0e 	bge	r17,r16,4008298 <__alt_data_end+0xfc008298>
 40086ac:	01410074 	movhi	r5,1025
 40086b0:	295b7a84 	addi	r5,r5,28138
 40086b4:	d9402c15 	stw	r5,176(sp)
 40086b8:	058001c4 	movi	r22,7
 40086bc:	dcc02d17 	ldw	r19,180(sp)
 40086c0:	00000306 	br	40086d0 <___vfprintf_internal_r+0x15ec>
 40086c4:	42000204 	addi	r8,r8,8
 40086c8:	843ffc04 	addi	r16,r16,-16
 40086cc:	8c3ef50e 	bge	r17,r16,40082a4 <__alt_data_end+0xfc0082a4>
 40086d0:	18c00404 	addi	r3,r3,16
 40086d4:	10800044 	addi	r2,r2,1
 40086d8:	45000015 	stw	r20,0(r8)
 40086dc:	44400115 	stw	r17,4(r8)
 40086e0:	d8c02015 	stw	r3,128(sp)
 40086e4:	d8801f15 	stw	r2,124(sp)
 40086e8:	b0bff60e 	bge	r22,r2,40086c4 <__alt_data_end+0xfc0086c4>
 40086ec:	d9801e04 	addi	r6,sp,120
 40086f0:	b80b883a 	mov	r5,r23
 40086f4:	9809883a 	mov	r4,r19
 40086f8:	400e9600 	call	400e960 <__sprint_r>
 40086fc:	103b7d1e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008700:	d8c02017 	ldw	r3,128(sp)
 4008704:	d8801f17 	ldw	r2,124(sp)
 4008708:	da000404 	addi	r8,sp,16
 400870c:	003fee06 	br	40086c8 <__alt_data_end+0xfc0086c8>
 4008710:	9088703a 	and	r4,r18,r2
 4008714:	203eab1e 	bne	r4,zero,40081c4 <__alt_data_end+0xfc0081c4>
 4008718:	dc401f17 	ldw	r17,124(sp)
 400871c:	40800115 	stw	r2,4(r8)
 4008720:	44000015 	stw	r16,0(r8)
 4008724:	8c400044 	addi	r17,r17,1
 4008728:	d8c02015 	stw	r3,128(sp)
 400872c:	dc401f15 	stw	r17,124(sp)
 4008730:	008001c4 	movi	r2,7
 4008734:	14400e16 	blt	r2,r17,4008770 <___vfprintf_internal_r+0x168c>
 4008738:	45800204 	addi	r22,r8,8
 400873c:	003eca06 	br	4008268 <__alt_data_end+0xfc008268>
 4008740:	01010074 	movhi	r4,1025
 4008744:	211b7a84 	addi	r4,r4,28138
 4008748:	d9002c15 	stw	r4,176(sp)
 400874c:	d8802c17 	ldw	r2,176(sp)
 4008750:	1c07883a 	add	r3,r3,r16
 4008754:	8c400044 	addi	r17,r17,1
 4008758:	b0800015 	stw	r2,0(r22)
 400875c:	b4000115 	stw	r16,4(r22)
 4008760:	d8c02015 	stw	r3,128(sp)
 4008764:	dc401f15 	stw	r17,124(sp)
 4008768:	008001c4 	movi	r2,7
 400876c:	147ebd0e 	bge	r2,r17,4008264 <__alt_data_end+0xfc008264>
 4008770:	d9002d17 	ldw	r4,180(sp)
 4008774:	d9801e04 	addi	r6,sp,120
 4008778:	b80b883a 	mov	r5,r23
 400877c:	400e9600 	call	400e960 <__sprint_r>
 4008780:	103b5c1e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008784:	d8c02017 	ldw	r3,128(sp)
 4008788:	dc401f17 	ldw	r17,124(sp)
 400878c:	dd800404 	addi	r22,sp,16
 4008790:	003eb506 	br	4008268 <__alt_data_end+0xfc008268>
 4008794:	d9002d17 	ldw	r4,180(sp)
 4008798:	d9801e04 	addi	r6,sp,120
 400879c:	b80b883a 	mov	r5,r23
 40087a0:	400e9600 	call	400e960 <__sprint_r>
 40087a4:	103b531e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 40087a8:	d8c02017 	ldw	r3,128(sp)
 40087ac:	dc401f17 	ldw	r17,124(sp)
 40087b0:	da000404 	addi	r8,sp,16
 40087b4:	003e8d06 	br	40081ec <__alt_data_end+0xfc0081ec>
 40087b8:	d9002d17 	ldw	r4,180(sp)
 40087bc:	d9801e04 	addi	r6,sp,120
 40087c0:	b80b883a 	mov	r5,r23
 40087c4:	400e9600 	call	400e960 <__sprint_r>
 40087c8:	103b4a1e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 40087cc:	d8c02017 	ldw	r3,128(sp)
 40087d0:	dc401f17 	ldw	r17,124(sp)
 40087d4:	dd800404 	addi	r22,sp,16
 40087d8:	003e8f06 	br	4008218 <__alt_data_end+0xfc008218>
 40087dc:	0027883a 	mov	r19,zero
 40087e0:	003f4a06 	br	400850c <__alt_data_end+0xfc00850c>
 40087e4:	d9002d17 	ldw	r4,180(sp)
 40087e8:	d9801e04 	addi	r6,sp,120
 40087ec:	b80b883a 	mov	r5,r23
 40087f0:	400e9600 	call	400e960 <__sprint_r>
 40087f4:	103b3f1e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 40087f8:	d8c02017 	ldw	r3,128(sp)
 40087fc:	da000404 	addi	r8,sp,16
 4008800:	003c7b06 	br	40079f0 <__alt_data_end+0xfc0079f0>
 4008804:	d9402a17 	ldw	r5,168(sp)
 4008808:	04e7c83a 	sub	r19,zero,r19
 400880c:	07000b44 	movi	fp,45
 4008810:	9804c03a 	cmpne	r2,r19,zero
 4008814:	05adc83a 	sub	r22,zero,r22
 4008818:	df002785 	stb	fp,158(sp)
 400881c:	b0adc83a 	sub	r22,r22,r2
 4008820:	28017b16 	blt	r5,zero,4008e10 <___vfprintf_internal_r+0x1d2c>
 4008824:	00bfdfc4 	movi	r2,-129
 4008828:	90a4703a 	and	r18,r18,r2
 400882c:	003b8906 	br	4007654 <__alt_data_end+0xfc007654>
 4008830:	d9003617 	ldw	r4,216(sp)
 4008834:	d9403817 	ldw	r5,224(sp)
 4008838:	da003d15 	stw	r8,244(sp)
 400883c:	400e5840 	call	400e584 <__fpclassifyd>
 4008840:	da003d17 	ldw	r8,244(sp)
 4008844:	1000f026 	beq	r2,zero,4008c08 <___vfprintf_internal_r+0x1b24>
 4008848:	d9002a17 	ldw	r4,168(sp)
 400884c:	05bff7c4 	movi	r22,-33
 4008850:	00bfffc4 	movi	r2,-1
 4008854:	8dac703a 	and	r22,r17,r22
 4008858:	20820026 	beq	r4,r2,400905c <___vfprintf_internal_r+0x1f78>
 400885c:	008011c4 	movi	r2,71
 4008860:	b081f726 	beq	r22,r2,4009040 <___vfprintf_internal_r+0x1f5c>
 4008864:	d9003817 	ldw	r4,224(sp)
 4008868:	90c04014 	ori	r3,r18,256
 400886c:	d8c02c15 	stw	r3,176(sp)
 4008870:	20021516 	blt	r4,zero,40090c8 <___vfprintf_internal_r+0x1fe4>
 4008874:	dcc03817 	ldw	r19,224(sp)
 4008878:	d8002905 	stb	zero,164(sp)
 400887c:	00801984 	movi	r2,102
 4008880:	8881f926 	beq	r17,r2,4009068 <___vfprintf_internal_r+0x1f84>
 4008884:	00801184 	movi	r2,70
 4008888:	88821c26 	beq	r17,r2,40090fc <___vfprintf_internal_r+0x2018>
 400888c:	00801144 	movi	r2,69
 4008890:	b081ef26 	beq	r22,r2,4009050 <___vfprintf_internal_r+0x1f6c>
 4008894:	d8c02a17 	ldw	r3,168(sp)
 4008898:	d8802104 	addi	r2,sp,132
 400889c:	d8800315 	stw	r2,12(sp)
 40088a0:	d9403617 	ldw	r5,216(sp)
 40088a4:	d8802504 	addi	r2,sp,148
 40088a8:	d9002d17 	ldw	r4,180(sp)
 40088ac:	d8800215 	stw	r2,8(sp)
 40088b0:	d8802604 	addi	r2,sp,152
 40088b4:	d8c00015 	stw	r3,0(sp)
 40088b8:	d8800115 	stw	r2,4(sp)
 40088bc:	01c00084 	movi	r7,2
 40088c0:	980d883a 	mov	r6,r19
 40088c4:	d8c03c15 	stw	r3,240(sp)
 40088c8:	da003d15 	stw	r8,244(sp)
 40088cc:	40098140 	call	4009814 <_dtoa_r>
 40088d0:	1021883a 	mov	r16,r2
 40088d4:	008019c4 	movi	r2,103
 40088d8:	d8c03c17 	ldw	r3,240(sp)
 40088dc:	da003d17 	ldw	r8,244(sp)
 40088e0:	88817126 	beq	r17,r2,4008ea8 <___vfprintf_internal_r+0x1dc4>
 40088e4:	008011c4 	movi	r2,71
 40088e8:	88829126 	beq	r17,r2,4009330 <___vfprintf_internal_r+0x224c>
 40088ec:	80f9883a 	add	fp,r16,r3
 40088f0:	d9003617 	ldw	r4,216(sp)
 40088f4:	000d883a 	mov	r6,zero
 40088f8:	000f883a 	mov	r7,zero
 40088fc:	980b883a 	mov	r5,r19
 4008900:	da003d15 	stw	r8,244(sp)
 4008904:	40127f00 	call	40127f0 <__eqdf2>
 4008908:	da003d17 	ldw	r8,244(sp)
 400890c:	10018d26 	beq	r2,zero,4008f44 <___vfprintf_internal_r+0x1e60>
 4008910:	d8802117 	ldw	r2,132(sp)
 4008914:	1700062e 	bgeu	r2,fp,4008930 <___vfprintf_internal_r+0x184c>
 4008918:	01000c04 	movi	r4,48
 400891c:	10c00044 	addi	r3,r2,1
 4008920:	d8c02115 	stw	r3,132(sp)
 4008924:	11000005 	stb	r4,0(r2)
 4008928:	d8802117 	ldw	r2,132(sp)
 400892c:	173ffb36 	bltu	r2,fp,400891c <__alt_data_end+0xfc00891c>
 4008930:	1405c83a 	sub	r2,r2,r16
 4008934:	d8803315 	stw	r2,204(sp)
 4008938:	008011c4 	movi	r2,71
 400893c:	b0817626 	beq	r22,r2,4008f18 <___vfprintf_internal_r+0x1e34>
 4008940:	00801944 	movi	r2,101
 4008944:	1442800e 	bge	r2,r17,4009348 <___vfprintf_internal_r+0x2264>
 4008948:	d8c02617 	ldw	r3,152(sp)
 400894c:	00801984 	movi	r2,102
 4008950:	d8c03215 	stw	r3,200(sp)
 4008954:	8881fe26 	beq	r17,r2,4009150 <___vfprintf_internal_r+0x206c>
 4008958:	d8c03217 	ldw	r3,200(sp)
 400895c:	d9003317 	ldw	r4,204(sp)
 4008960:	1901dd16 	blt	r3,r4,40090d8 <___vfprintf_internal_r+0x1ff4>
 4008964:	9480004c 	andi	r18,r18,1
 4008968:	90022b1e 	bne	r18,zero,4009218 <___vfprintf_internal_r+0x2134>
 400896c:	1805883a 	mov	r2,r3
 4008970:	18028316 	blt	r3,zero,4009380 <___vfprintf_internal_r+0x229c>
 4008974:	d8c03217 	ldw	r3,200(sp)
 4008978:	044019c4 	movi	r17,103
 400897c:	d8c02b15 	stw	r3,172(sp)
 4008980:	df002907 	ldb	fp,164(sp)
 4008984:	e001531e 	bne	fp,zero,4008ed4 <___vfprintf_internal_r+0x1df0>
 4008988:	df002783 	ldbu	fp,158(sp)
 400898c:	d8802915 	stw	r2,164(sp)
 4008990:	dc802c17 	ldw	r18,176(sp)
 4008994:	d8002a15 	stw	zero,168(sp)
 4008998:	003baf06 	br	4007858 <__alt_data_end+0xfc007858>
 400899c:	d8c02e17 	ldw	r3,184(sp)
 40089a0:	d9002e17 	ldw	r4,184(sp)
 40089a4:	d9402e17 	ldw	r5,184(sp)
 40089a8:	18c00017 	ldw	r3,0(r3)
 40089ac:	21000117 	ldw	r4,4(r4)
 40089b0:	29400204 	addi	r5,r5,8
 40089b4:	d8c03615 	stw	r3,216(sp)
 40089b8:	d9003815 	stw	r4,224(sp)
 40089bc:	d9402e15 	stw	r5,184(sp)
 40089c0:	003b5006 	br	4007704 <__alt_data_end+0xfc007704>
 40089c4:	ac400007 	ldb	r17,0(r21)
 40089c8:	003a2806 	br	400726c <__alt_data_end+0xfc00726c>
 40089cc:	9080100c 	andi	r2,r18,64
 40089d0:	1000a826 	beq	r2,zero,4008c74 <___vfprintf_internal_r+0x1b90>
 40089d4:	d8c02e17 	ldw	r3,184(sp)
 40089d8:	002d883a 	mov	r22,zero
 40089dc:	1cc0000b 	ldhu	r19,0(r3)
 40089e0:	18c00104 	addi	r3,r3,4
 40089e4:	d8c02e15 	stw	r3,184(sp)
 40089e8:	003caf06 	br	4007ca8 <__alt_data_end+0xfc007ca8>
 40089ec:	d9002e17 	ldw	r4,184(sp)
 40089f0:	d9402a17 	ldw	r5,168(sp)
 40089f4:	002d883a 	mov	r22,zero
 40089f8:	20800104 	addi	r2,r4,4
 40089fc:	24c00017 	ldw	r19,0(r4)
 4008a00:	283ebb0e 	bge	r5,zero,40084f0 <__alt_data_end+0xfc0084f0>
 4008a04:	003ef106 	br	40085cc <__alt_data_end+0xfc0085cc>
 4008a08:	9080040c 	andi	r2,r18,16
 4008a0c:	1000921e 	bne	r2,zero,4008c58 <___vfprintf_internal_r+0x1b74>
 4008a10:	9480100c 	andi	r18,r18,64
 4008a14:	90013926 	beq	r18,zero,4008efc <___vfprintf_internal_r+0x1e18>
 4008a18:	d9402e17 	ldw	r5,184(sp)
 4008a1c:	d8c02f17 	ldw	r3,188(sp)
 4008a20:	28800017 	ldw	r2,0(r5)
 4008a24:	29400104 	addi	r5,r5,4
 4008a28:	d9402e15 	stw	r5,184(sp)
 4008a2c:	10c0000d 	sth	r3,0(r2)
 4008a30:	0039e406 	br	40071c4 <__alt_data_end+0xfc0071c4>
 4008a34:	9080100c 	andi	r2,r18,64
 4008a38:	10008026 	beq	r2,zero,4008c3c <___vfprintf_internal_r+0x1b58>
 4008a3c:	d8802e17 	ldw	r2,184(sp)
 4008a40:	14c0000f 	ldh	r19,0(r2)
 4008a44:	10800104 	addi	r2,r2,4
 4008a48:	d8802e15 	stw	r2,184(sp)
 4008a4c:	982dd7fa 	srai	r22,r19,31
 4008a50:	b005883a 	mov	r2,r22
 4008a54:	003af706 	br	4007634 <__alt_data_end+0xfc007634>
 4008a58:	9080100c 	andi	r2,r18,64
 4008a5c:	d8002785 	stb	zero,158(sp)
 4008a60:	10008a1e 	bne	r2,zero,4008c8c <___vfprintf_internal_r+0x1ba8>
 4008a64:	d9002e17 	ldw	r4,184(sp)
 4008a68:	d9402a17 	ldw	r5,168(sp)
 4008a6c:	002d883a 	mov	r22,zero
 4008a70:	20800104 	addi	r2,r4,4
 4008a74:	24c00017 	ldw	r19,0(r4)
 4008a78:	283e4b0e 	bge	r5,zero,40083a8 <__alt_data_end+0xfc0083a8>
 4008a7c:	9d86b03a 	or	r3,r19,r22
 4008a80:	d8802e15 	stw	r2,184(sp)
 4008a84:	183e4c1e 	bne	r3,zero,40083b8 <__alt_data_end+0xfc0083b8>
 4008a88:	0039883a 	mov	fp,zero
 4008a8c:	0005883a 	mov	r2,zero
 4008a90:	003d4006 	br	4007f94 <__alt_data_end+0xfc007f94>
 4008a94:	01410074 	movhi	r5,1025
 4008a98:	295b7a84 	addi	r5,r5,28138
 4008a9c:	d9402c15 	stw	r5,176(sp)
 4008aa0:	d9402c17 	ldw	r5,176(sp)
 4008aa4:	1c47883a 	add	r3,r3,r17
 4008aa8:	10800044 	addi	r2,r2,1
 4008aac:	41400015 	stw	r5,0(r8)
 4008ab0:	44400115 	stw	r17,4(r8)
 4008ab4:	d8c02015 	stw	r3,128(sp)
 4008ab8:	d8801f15 	stw	r2,124(sp)
 4008abc:	010001c4 	movi	r4,7
 4008ac0:	20bec816 	blt	r4,r2,40085e4 <__alt_data_end+0xfc0085e4>
 4008ac4:	42000204 	addi	r8,r8,8
 4008ac8:	003ecd06 	br	4008600 <__alt_data_end+0xfc008600>
 4008acc:	d9002a17 	ldw	r4,168(sp)
 4008ad0:	d8002785 	stb	zero,158(sp)
 4008ad4:	203d2d16 	blt	r4,zero,4007f8c <__alt_data_end+0xfc007f8c>
 4008ad8:	00bfdfc4 	movi	r2,-129
 4008adc:	90a4703a 	and	r18,r18,r2
 4008ae0:	003a6106 	br	4007468 <__alt_data_end+0xfc007468>
 4008ae4:	01010074 	movhi	r4,1025
 4008ae8:	211b7a84 	addi	r4,r4,28138
 4008aec:	d9002c15 	stw	r4,176(sp)
 4008af0:	003bea06 	br	4007a9c <__alt_data_end+0xfc007a9c>
 4008af4:	d9002d17 	ldw	r4,180(sp)
 4008af8:	d9801e04 	addi	r6,sp,120
 4008afc:	b80b883a 	mov	r5,r23
 4008b00:	400e9600 	call	400e960 <__sprint_r>
 4008b04:	103a7b1e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008b08:	d8c02017 	ldw	r3,128(sp)
 4008b0c:	da000404 	addi	r8,sp,16
 4008b10:	003d4106 	br	4008018 <__alt_data_end+0xfc008018>
 4008b14:	d8801f17 	ldw	r2,124(sp)
 4008b18:	01410074 	movhi	r5,1025
 4008b1c:	01000044 	movi	r4,1
 4008b20:	18c00044 	addi	r3,r3,1
 4008b24:	10800044 	addi	r2,r2,1
 4008b28:	295b7a04 	addi	r5,r5,28136
 4008b2c:	41000115 	stw	r4,4(r8)
 4008b30:	41400015 	stw	r5,0(r8)
 4008b34:	d8c02015 	stw	r3,128(sp)
 4008b38:	d8801f15 	stw	r2,124(sp)
 4008b3c:	010001c4 	movi	r4,7
 4008b40:	20805c16 	blt	r4,r2,4008cb4 <___vfprintf_internal_r+0x1bd0>
 4008b44:	42000204 	addi	r8,r8,8
 4008b48:	8800041e 	bne	r17,zero,4008b5c <___vfprintf_internal_r+0x1a78>
 4008b4c:	d8803317 	ldw	r2,204(sp)
 4008b50:	1000021e 	bne	r2,zero,4008b5c <___vfprintf_internal_r+0x1a78>
 4008b54:	9080004c 	andi	r2,r18,1
 4008b58:	103be726 	beq	r2,zero,4007af8 <__alt_data_end+0xfc007af8>
 4008b5c:	d9003717 	ldw	r4,220(sp)
 4008b60:	d8801f17 	ldw	r2,124(sp)
 4008b64:	d9403417 	ldw	r5,208(sp)
 4008b68:	20c7883a 	add	r3,r4,r3
 4008b6c:	10800044 	addi	r2,r2,1
 4008b70:	41000115 	stw	r4,4(r8)
 4008b74:	41400015 	stw	r5,0(r8)
 4008b78:	d8c02015 	stw	r3,128(sp)
 4008b7c:	d8801f15 	stw	r2,124(sp)
 4008b80:	010001c4 	movi	r4,7
 4008b84:	20812116 	blt	r4,r2,400900c <___vfprintf_internal_r+0x1f28>
 4008b88:	42000204 	addi	r8,r8,8
 4008b8c:	0463c83a 	sub	r17,zero,r17
 4008b90:	0440730e 	bge	zero,r17,4008d60 <___vfprintf_internal_r+0x1c7c>
 4008b94:	05800404 	movi	r22,16
 4008b98:	b440860e 	bge	r22,r17,4008db4 <___vfprintf_internal_r+0x1cd0>
 4008b9c:	01410074 	movhi	r5,1025
 4008ba0:	295b7a84 	addi	r5,r5,28138
 4008ba4:	d9402c15 	stw	r5,176(sp)
 4008ba8:	070001c4 	movi	fp,7
 4008bac:	dcc02d17 	ldw	r19,180(sp)
 4008bb0:	00000306 	br	4008bc0 <___vfprintf_internal_r+0x1adc>
 4008bb4:	42000204 	addi	r8,r8,8
 4008bb8:	8c7ffc04 	addi	r17,r17,-16
 4008bbc:	b440800e 	bge	r22,r17,4008dc0 <___vfprintf_internal_r+0x1cdc>
 4008bc0:	18c00404 	addi	r3,r3,16
 4008bc4:	10800044 	addi	r2,r2,1
 4008bc8:	45000015 	stw	r20,0(r8)
 4008bcc:	45800115 	stw	r22,4(r8)
 4008bd0:	d8c02015 	stw	r3,128(sp)
 4008bd4:	d8801f15 	stw	r2,124(sp)
 4008bd8:	e0bff60e 	bge	fp,r2,4008bb4 <__alt_data_end+0xfc008bb4>
 4008bdc:	d9801e04 	addi	r6,sp,120
 4008be0:	b80b883a 	mov	r5,r23
 4008be4:	9809883a 	mov	r4,r19
 4008be8:	400e9600 	call	400e960 <__sprint_r>
 4008bec:	103a411e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008bf0:	d8c02017 	ldw	r3,128(sp)
 4008bf4:	d8801f17 	ldw	r2,124(sp)
 4008bf8:	da000404 	addi	r8,sp,16
 4008bfc:	003fee06 	br	4008bb8 <__alt_data_end+0xfc008bb8>
 4008c00:	00bfffc4 	movi	r2,-1
 4008c04:	003a3f06 	br	4007504 <__alt_data_end+0xfc007504>
 4008c08:	008011c4 	movi	r2,71
 4008c0c:	1440b816 	blt	r2,r17,4008ef0 <___vfprintf_internal_r+0x1e0c>
 4008c10:	04010074 	movhi	r16,1025
 4008c14:	841b6c04 	addi	r16,r16,28080
 4008c18:	00c000c4 	movi	r3,3
 4008c1c:	00bfdfc4 	movi	r2,-129
 4008c20:	d8c02915 	stw	r3,164(sp)
 4008c24:	90a4703a 	and	r18,r18,r2
 4008c28:	df002783 	ldbu	fp,158(sp)
 4008c2c:	d8c02b15 	stw	r3,172(sp)
 4008c30:	d8002a15 	stw	zero,168(sp)
 4008c34:	d8003215 	stw	zero,200(sp)
 4008c38:	003b0706 	br	4007858 <__alt_data_end+0xfc007858>
 4008c3c:	d8c02e17 	ldw	r3,184(sp)
 4008c40:	1cc00017 	ldw	r19,0(r3)
 4008c44:	18c00104 	addi	r3,r3,4
 4008c48:	d8c02e15 	stw	r3,184(sp)
 4008c4c:	982dd7fa 	srai	r22,r19,31
 4008c50:	b005883a 	mov	r2,r22
 4008c54:	003a7706 	br	4007634 <__alt_data_end+0xfc007634>
 4008c58:	d8c02e17 	ldw	r3,184(sp)
 4008c5c:	d9002f17 	ldw	r4,188(sp)
 4008c60:	18800017 	ldw	r2,0(r3)
 4008c64:	18c00104 	addi	r3,r3,4
 4008c68:	d8c02e15 	stw	r3,184(sp)
 4008c6c:	11000015 	stw	r4,0(r2)
 4008c70:	00395406 	br	40071c4 <__alt_data_end+0xfc0071c4>
 4008c74:	d9002e17 	ldw	r4,184(sp)
 4008c78:	002d883a 	mov	r22,zero
 4008c7c:	24c00017 	ldw	r19,0(r4)
 4008c80:	21000104 	addi	r4,r4,4
 4008c84:	d9002e15 	stw	r4,184(sp)
 4008c88:	003c0706 	br	4007ca8 <__alt_data_end+0xfc007ca8>
 4008c8c:	d9402e17 	ldw	r5,184(sp)
 4008c90:	d8c02a17 	ldw	r3,168(sp)
 4008c94:	002d883a 	mov	r22,zero
 4008c98:	28800104 	addi	r2,r5,4
 4008c9c:	2cc0000b 	ldhu	r19,0(r5)
 4008ca0:	183dc10e 	bge	r3,zero,40083a8 <__alt_data_end+0xfc0083a8>
 4008ca4:	003f7506 	br	4008a7c <__alt_data_end+0xfc008a7c>
 4008ca8:	04010074 	movhi	r16,1025
 4008cac:	841b6a04 	addi	r16,r16,28072
 4008cb0:	003aa706 	br	4007750 <__alt_data_end+0xfc007750>
 4008cb4:	d9002d17 	ldw	r4,180(sp)
 4008cb8:	d9801e04 	addi	r6,sp,120
 4008cbc:	b80b883a 	mov	r5,r23
 4008cc0:	400e9600 	call	400e960 <__sprint_r>
 4008cc4:	103a0b1e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008cc8:	dc402617 	ldw	r17,152(sp)
 4008ccc:	d8c02017 	ldw	r3,128(sp)
 4008cd0:	da000404 	addi	r8,sp,16
 4008cd4:	003f9c06 	br	4008b48 <__alt_data_end+0xfc008b48>
 4008cd8:	ac400043 	ldbu	r17,1(r21)
 4008cdc:	84000814 	ori	r16,r16,32
 4008ce0:	ad400044 	addi	r21,r21,1
 4008ce4:	8c403fcc 	andi	r17,r17,255
 4008ce8:	8c40201c 	xori	r17,r17,128
 4008cec:	8c7fe004 	addi	r17,r17,-128
 4008cf0:	00395e06 	br	400726c <__alt_data_end+0xfc00726c>
 4008cf4:	d8c02e15 	stw	r3,184(sp)
 4008cf8:	0039883a 	mov	fp,zero
 4008cfc:	003e3506 	br	40085d4 <__alt_data_end+0xfc0085d4>
 4008d00:	d9002d17 	ldw	r4,180(sp)
 4008d04:	d9801e04 	addi	r6,sp,120
 4008d08:	b80b883a 	mov	r5,r23
 4008d0c:	400e9600 	call	400e960 <__sprint_r>
 4008d10:	1039f81e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008d14:	d8c02017 	ldw	r3,128(sp)
 4008d18:	da000404 	addi	r8,sp,16
 4008d1c:	003cd006 	br	4008060 <__alt_data_end+0xfc008060>
 4008d20:	8009883a 	mov	r4,r16
 4008d24:	df003d15 	stw	fp,244(sp)
 4008d28:	4006ffc0 	call	4006ffc <strlen>
 4008d2c:	d8802b15 	stw	r2,172(sp)
 4008d30:	da003d17 	ldw	r8,244(sp)
 4008d34:	103c200e 	bge	r2,zero,4007db8 <__alt_data_end+0xfc007db8>
 4008d38:	0005883a 	mov	r2,zero
 4008d3c:	003c1e06 	br	4007db8 <__alt_data_end+0xfc007db8>
 4008d40:	d9002d17 	ldw	r4,180(sp)
 4008d44:	d9801e04 	addi	r6,sp,120
 4008d48:	b80b883a 	mov	r5,r23
 4008d4c:	400e9600 	call	400e960 <__sprint_r>
 4008d50:	1039e81e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008d54:	d8c02017 	ldw	r3,128(sp)
 4008d58:	d8801f17 	ldw	r2,124(sp)
 4008d5c:	da000404 	addi	r8,sp,16
 4008d60:	d9403317 	ldw	r5,204(sp)
 4008d64:	10800044 	addi	r2,r2,1
 4008d68:	44000015 	stw	r16,0(r8)
 4008d6c:	28c7883a 	add	r3,r5,r3
 4008d70:	003b5b06 	br	4007ae0 <__alt_data_end+0xfc007ae0>
 4008d74:	01010074 	movhi	r4,1025
 4008d78:	211b7e84 	addi	r4,r4,28154
 4008d7c:	d9003515 	stw	r4,212(sp)
 4008d80:	003af206 	br	400794c <__alt_data_end+0xfc00794c>
 4008d84:	013fffc4 	movi	r4,-1
 4008d88:	003a0806 	br	40075ac <__alt_data_end+0xfc0075ac>
 4008d8c:	0023883a 	mov	r17,zero
 4008d90:	003d9d06 	br	4008408 <__alt_data_end+0xfc008408>
 4008d94:	d9002d17 	ldw	r4,180(sp)
 4008d98:	d9801e04 	addi	r6,sp,120
 4008d9c:	b80b883a 	mov	r5,r23
 4008da0:	400e9600 	call	400e960 <__sprint_r>
 4008da4:	1039d31e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008da8:	d8c02017 	ldw	r3,128(sp)
 4008dac:	da000404 	addi	r8,sp,16
 4008db0:	003d9406 	br	4008404 <__alt_data_end+0xfc008404>
 4008db4:	01010074 	movhi	r4,1025
 4008db8:	211b7a84 	addi	r4,r4,28138
 4008dbc:	d9002c15 	stw	r4,176(sp)
 4008dc0:	d9002c17 	ldw	r4,176(sp)
 4008dc4:	1c47883a 	add	r3,r3,r17
 4008dc8:	10800044 	addi	r2,r2,1
 4008dcc:	41000015 	stw	r4,0(r8)
 4008dd0:	44400115 	stw	r17,4(r8)
 4008dd4:	d8c02015 	stw	r3,128(sp)
 4008dd8:	d8801f15 	stw	r2,124(sp)
 4008ddc:	010001c4 	movi	r4,7
 4008de0:	20bfd716 	blt	r4,r2,4008d40 <__alt_data_end+0xfc008d40>
 4008de4:	42000204 	addi	r8,r8,8
 4008de8:	003fdd06 	br	4008d60 <__alt_data_end+0xfc008d60>
 4008dec:	d9002d17 	ldw	r4,180(sp)
 4008df0:	d9801e04 	addi	r6,sp,120
 4008df4:	b80b883a 	mov	r5,r23
 4008df8:	400e9600 	call	400e960 <__sprint_r>
 4008dfc:	1039bd1e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008e00:	d8802617 	ldw	r2,152(sp)
 4008e04:	d8c02017 	ldw	r3,128(sp)
 4008e08:	da000404 	addi	r8,sp,16
 4008e0c:	003e1006 	br	4008650 <__alt_data_end+0xfc008650>
 4008e10:	00800044 	movi	r2,1
 4008e14:	10803fcc 	andi	r2,r2,255
 4008e18:	00c00044 	movi	r3,1
 4008e1c:	10fa0d26 	beq	r2,r3,4007654 <__alt_data_end+0xfc007654>
 4008e20:	00c00084 	movi	r3,2
 4008e24:	10fbaf26 	beq	r2,r3,4007ce4 <__alt_data_end+0xfc007ce4>
 4008e28:	003a6d06 	br	40077e0 <__alt_data_end+0xfc0077e0>
 4008e2c:	01010074 	movhi	r4,1025
 4008e30:	211b7e84 	addi	r4,r4,28154
 4008e34:	d9003515 	stw	r4,212(sp)
 4008e38:	003b5406 	br	4007b8c <__alt_data_end+0xfc007b8c>
 4008e3c:	d8802a17 	ldw	r2,168(sp)
 4008e40:	00c00184 	movi	r3,6
 4008e44:	1880012e 	bgeu	r3,r2,4008e4c <___vfprintf_internal_r+0x1d68>
 4008e48:	1805883a 	mov	r2,r3
 4008e4c:	d8802b15 	stw	r2,172(sp)
 4008e50:	1000ef16 	blt	r2,zero,4009210 <___vfprintf_internal_r+0x212c>
 4008e54:	04010074 	movhi	r16,1025
 4008e58:	d8802915 	stw	r2,164(sp)
 4008e5c:	dcc02e15 	stw	r19,184(sp)
 4008e60:	d8002a15 	stw	zero,168(sp)
 4008e64:	d8003215 	stw	zero,200(sp)
 4008e68:	841b7804 	addi	r16,r16,28128
 4008e6c:	0039883a 	mov	fp,zero
 4008e70:	003a8006 	br	4007874 <__alt_data_end+0xfc007874>
 4008e74:	0021883a 	mov	r16,zero
 4008e78:	003e0706 	br	4008698 <__alt_data_end+0xfc008698>
 4008e7c:	d9002d17 	ldw	r4,180(sp)
 4008e80:	d9801e04 	addi	r6,sp,120
 4008e84:	b80b883a 	mov	r5,r23
 4008e88:	400e9600 	call	400e960 <__sprint_r>
 4008e8c:	1039991e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4008e90:	d8802617 	ldw	r2,152(sp)
 4008e94:	d9403317 	ldw	r5,204(sp)
 4008e98:	d8c02017 	ldw	r3,128(sp)
 4008e9c:	da000404 	addi	r8,sp,16
 4008ea0:	2885c83a 	sub	r2,r5,r2
 4008ea4:	003dfb06 	br	4008694 <__alt_data_end+0xfc008694>
 4008ea8:	9080004c 	andi	r2,r18,1
 4008eac:	103e8f1e 	bne	r2,zero,40088ec <__alt_data_end+0xfc0088ec>
 4008eb0:	d8802117 	ldw	r2,132(sp)
 4008eb4:	003e9e06 	br	4008930 <__alt_data_end+0xfc008930>
 4008eb8:	1025883a 	mov	r18,r2
 4008ebc:	0039883a 	mov	fp,zero
 4008ec0:	00800084 	movi	r2,2
 4008ec4:	003fd306 	br	4008e14 <__alt_data_end+0xfc008e14>
 4008ec8:	07000b44 	movi	fp,45
 4008ecc:	df002785 	stb	fp,158(sp)
 4008ed0:	003a1b06 	br	4007740 <__alt_data_end+0xfc007740>
 4008ed4:	00c00b44 	movi	r3,45
 4008ed8:	d8c02785 	stb	r3,158(sp)
 4008edc:	d8802915 	stw	r2,164(sp)
 4008ee0:	dc802c17 	ldw	r18,176(sp)
 4008ee4:	d8002a15 	stw	zero,168(sp)
 4008ee8:	07000b44 	movi	fp,45
 4008eec:	003a5e06 	br	4007868 <__alt_data_end+0xfc007868>
 4008ef0:	04010074 	movhi	r16,1025
 4008ef4:	841b6d04 	addi	r16,r16,28084
 4008ef8:	003f4706 	br	4008c18 <__alt_data_end+0xfc008c18>
 4008efc:	d9002e17 	ldw	r4,184(sp)
 4008f00:	d9402f17 	ldw	r5,188(sp)
 4008f04:	20800017 	ldw	r2,0(r4)
 4008f08:	21000104 	addi	r4,r4,4
 4008f0c:	d9002e15 	stw	r4,184(sp)
 4008f10:	11400015 	stw	r5,0(r2)
 4008f14:	0038ab06 	br	40071c4 <__alt_data_end+0xfc0071c4>
 4008f18:	dd802617 	ldw	r22,152(sp)
 4008f1c:	00bfff44 	movi	r2,-3
 4008f20:	b0801c16 	blt	r22,r2,4008f94 <___vfprintf_internal_r+0x1eb0>
 4008f24:	d9402a17 	ldw	r5,168(sp)
 4008f28:	2d801a16 	blt	r5,r22,4008f94 <___vfprintf_internal_r+0x1eb0>
 4008f2c:	dd803215 	stw	r22,200(sp)
 4008f30:	003e8906 	br	4008958 <__alt_data_end+0xfc008958>
 4008f34:	01010074 	movhi	r4,1025
 4008f38:	211b7a84 	addi	r4,r4,28138
 4008f3c:	d9002c15 	stw	r4,176(sp)
 4008f40:	003c9106 	br	4008188 <__alt_data_end+0xfc008188>
 4008f44:	e005883a 	mov	r2,fp
 4008f48:	003e7906 	br	4008930 <__alt_data_end+0xfc008930>
 4008f4c:	d9002a17 	ldw	r4,168(sp)
 4008f50:	df002783 	ldbu	fp,158(sp)
 4008f54:	dcc02e15 	stw	r19,184(sp)
 4008f58:	d9002915 	stw	r4,164(sp)
 4008f5c:	d9002b15 	stw	r4,172(sp)
 4008f60:	d8002a15 	stw	zero,168(sp)
 4008f64:	d8003215 	stw	zero,200(sp)
 4008f68:	003a3b06 	br	4007858 <__alt_data_end+0xfc007858>
 4008f6c:	9080004c 	andi	r2,r18,1
 4008f70:	0039883a 	mov	fp,zero
 4008f74:	10000426 	beq	r2,zero,4008f88 <___vfprintf_internal_r+0x1ea4>
 4008f78:	00800c04 	movi	r2,48
 4008f7c:	dc001dc4 	addi	r16,sp,119
 4008f80:	d8801dc5 	stb	r2,119(sp)
 4008f84:	003b6406 	br	4007d18 <__alt_data_end+0xfc007d18>
 4008f88:	d8002b15 	stw	zero,172(sp)
 4008f8c:	dc001e04 	addi	r16,sp,120
 4008f90:	003a2b06 	br	4007840 <__alt_data_end+0xfc007840>
 4008f94:	8c7fff84 	addi	r17,r17,-2
 4008f98:	b5bfffc4 	addi	r22,r22,-1
 4008f9c:	dd802615 	stw	r22,152(sp)
 4008fa0:	dc4022c5 	stb	r17,139(sp)
 4008fa4:	b000bf16 	blt	r22,zero,40092a4 <___vfprintf_internal_r+0x21c0>
 4008fa8:	00800ac4 	movi	r2,43
 4008fac:	d8802305 	stb	r2,140(sp)
 4008fb0:	00800244 	movi	r2,9
 4008fb4:	15807016 	blt	r2,r22,4009178 <___vfprintf_internal_r+0x2094>
 4008fb8:	00800c04 	movi	r2,48
 4008fbc:	b5800c04 	addi	r22,r22,48
 4008fc0:	d8802345 	stb	r2,141(sp)
 4008fc4:	dd802385 	stb	r22,142(sp)
 4008fc8:	d88023c4 	addi	r2,sp,143
 4008fcc:	df0022c4 	addi	fp,sp,139
 4008fd0:	d8c03317 	ldw	r3,204(sp)
 4008fd4:	1739c83a 	sub	fp,r2,fp
 4008fd8:	d9003317 	ldw	r4,204(sp)
 4008fdc:	e0c7883a 	add	r3,fp,r3
 4008fe0:	df003a15 	stw	fp,232(sp)
 4008fe4:	d8c02b15 	stw	r3,172(sp)
 4008fe8:	00800044 	movi	r2,1
 4008fec:	1100b30e 	bge	r2,r4,40092bc <___vfprintf_internal_r+0x21d8>
 4008ff0:	d8c02b17 	ldw	r3,172(sp)
 4008ff4:	18c00044 	addi	r3,r3,1
 4008ff8:	d8c02b15 	stw	r3,172(sp)
 4008ffc:	1805883a 	mov	r2,r3
 4009000:	1800ac16 	blt	r3,zero,40092b4 <___vfprintf_internal_r+0x21d0>
 4009004:	d8003215 	stw	zero,200(sp)
 4009008:	003e5d06 	br	4008980 <__alt_data_end+0xfc008980>
 400900c:	d9002d17 	ldw	r4,180(sp)
 4009010:	d9801e04 	addi	r6,sp,120
 4009014:	b80b883a 	mov	r5,r23
 4009018:	400e9600 	call	400e960 <__sprint_r>
 400901c:	1039351e 	bne	r2,zero,40074f4 <__alt_data_end+0xfc0074f4>
 4009020:	dc402617 	ldw	r17,152(sp)
 4009024:	d8c02017 	ldw	r3,128(sp)
 4009028:	d8801f17 	ldw	r2,124(sp)
 400902c:	da000404 	addi	r8,sp,16
 4009030:	003ed606 	br	4008b8c <__alt_data_end+0xfc008b8c>
 4009034:	182b883a 	mov	r21,r3
 4009038:	d8002a15 	stw	zero,168(sp)
 400903c:	00388c06 	br	4007270 <__alt_data_end+0xfc007270>
 4009040:	d8802a17 	ldw	r2,168(sp)
 4009044:	103e071e 	bne	r2,zero,4008864 <__alt_data_end+0xfc008864>
 4009048:	dc002a15 	stw	r16,168(sp)
 400904c:	003e0506 	br	4008864 <__alt_data_end+0xfc008864>
 4009050:	d9002a17 	ldw	r4,168(sp)
 4009054:	20c00044 	addi	r3,r4,1
 4009058:	003e0f06 	br	4008898 <__alt_data_end+0xfc008898>
 400905c:	01400184 	movi	r5,6
 4009060:	d9402a15 	stw	r5,168(sp)
 4009064:	003dff06 	br	4008864 <__alt_data_end+0xfc008864>
 4009068:	d8802104 	addi	r2,sp,132
 400906c:	d8800315 	stw	r2,12(sp)
 4009070:	d8802504 	addi	r2,sp,148
 4009074:	d8800215 	stw	r2,8(sp)
 4009078:	d8802604 	addi	r2,sp,152
 400907c:	d8800115 	stw	r2,4(sp)
 4009080:	d8802a17 	ldw	r2,168(sp)
 4009084:	d9403617 	ldw	r5,216(sp)
 4009088:	d9002d17 	ldw	r4,180(sp)
 400908c:	d8800015 	stw	r2,0(sp)
 4009090:	01c000c4 	movi	r7,3
 4009094:	980d883a 	mov	r6,r19
 4009098:	da003d15 	stw	r8,244(sp)
 400909c:	40098140 	call	4009814 <_dtoa_r>
 40090a0:	d8c02a17 	ldw	r3,168(sp)
 40090a4:	da003d17 	ldw	r8,244(sp)
 40090a8:	1021883a 	mov	r16,r2
 40090ac:	10f9883a 	add	fp,r2,r3
 40090b0:	81000007 	ldb	r4,0(r16)
 40090b4:	00800c04 	movi	r2,48
 40090b8:	20805e26 	beq	r4,r2,4009234 <___vfprintf_internal_r+0x2150>
 40090bc:	d8c02617 	ldw	r3,152(sp)
 40090c0:	e0f9883a 	add	fp,fp,r3
 40090c4:	003e0a06 	br	40088f0 <__alt_data_end+0xfc0088f0>
 40090c8:	00c00b44 	movi	r3,45
 40090cc:	24e0003c 	xorhi	r19,r4,32768
 40090d0:	d8c02905 	stb	r3,164(sp)
 40090d4:	003de906 	br	400887c <__alt_data_end+0xfc00887c>
 40090d8:	d8c03217 	ldw	r3,200(sp)
 40090dc:	00c07a0e 	bge	zero,r3,40092c8 <___vfprintf_internal_r+0x21e4>
 40090e0:	00800044 	movi	r2,1
 40090e4:	d9003317 	ldw	r4,204(sp)
 40090e8:	1105883a 	add	r2,r2,r4
 40090ec:	d8802b15 	stw	r2,172(sp)
 40090f0:	10004e16 	blt	r2,zero,400922c <___vfprintf_internal_r+0x2148>
 40090f4:	044019c4 	movi	r17,103
 40090f8:	003e2106 	br	4008980 <__alt_data_end+0xfc008980>
 40090fc:	d9002a17 	ldw	r4,168(sp)
 4009100:	d8802104 	addi	r2,sp,132
 4009104:	d8800315 	stw	r2,12(sp)
 4009108:	d9000015 	stw	r4,0(sp)
 400910c:	d8802504 	addi	r2,sp,148
 4009110:	d9403617 	ldw	r5,216(sp)
 4009114:	d9002d17 	ldw	r4,180(sp)
 4009118:	d8800215 	stw	r2,8(sp)
 400911c:	d8802604 	addi	r2,sp,152
 4009120:	d8800115 	stw	r2,4(sp)
 4009124:	01c000c4 	movi	r7,3
 4009128:	980d883a 	mov	r6,r19
 400912c:	da003d15 	stw	r8,244(sp)
 4009130:	40098140 	call	4009814 <_dtoa_r>
 4009134:	d8c02a17 	ldw	r3,168(sp)
 4009138:	da003d17 	ldw	r8,244(sp)
 400913c:	1021883a 	mov	r16,r2
 4009140:	00801184 	movi	r2,70
 4009144:	80f9883a 	add	fp,r16,r3
 4009148:	88bfd926 	beq	r17,r2,40090b0 <__alt_data_end+0xfc0090b0>
 400914c:	003de806 	br	40088f0 <__alt_data_end+0xfc0088f0>
 4009150:	d9002a17 	ldw	r4,168(sp)
 4009154:	00c04d0e 	bge	zero,r3,400928c <___vfprintf_internal_r+0x21a8>
 4009158:	2000441e 	bne	r4,zero,400926c <___vfprintf_internal_r+0x2188>
 400915c:	9480004c 	andi	r18,r18,1
 4009160:	9000421e 	bne	r18,zero,400926c <___vfprintf_internal_r+0x2188>
 4009164:	1805883a 	mov	r2,r3
 4009168:	18006f16 	blt	r3,zero,4009328 <___vfprintf_internal_r+0x2244>
 400916c:	d8c03217 	ldw	r3,200(sp)
 4009170:	d8c02b15 	stw	r3,172(sp)
 4009174:	003e0206 	br	4008980 <__alt_data_end+0xfc008980>
 4009178:	df0022c4 	addi	fp,sp,139
 400917c:	dc002a15 	stw	r16,168(sp)
 4009180:	4027883a 	mov	r19,r8
 4009184:	e021883a 	mov	r16,fp
 4009188:	b009883a 	mov	r4,r22
 400918c:	01400284 	movi	r5,10
 4009190:	4006ba00 	call	4006ba0 <__modsi3>
 4009194:	10800c04 	addi	r2,r2,48
 4009198:	843fffc4 	addi	r16,r16,-1
 400919c:	b009883a 	mov	r4,r22
 40091a0:	01400284 	movi	r5,10
 40091a4:	80800005 	stb	r2,0(r16)
 40091a8:	4006b1c0 	call	4006b1c <__divsi3>
 40091ac:	102d883a 	mov	r22,r2
 40091b0:	00800244 	movi	r2,9
 40091b4:	15bff416 	blt	r2,r22,4009188 <__alt_data_end+0xfc009188>
 40091b8:	9811883a 	mov	r8,r19
 40091bc:	b0800c04 	addi	r2,r22,48
 40091c0:	8027883a 	mov	r19,r16
 40091c4:	997fffc4 	addi	r5,r19,-1
 40091c8:	98bfffc5 	stb	r2,-1(r19)
 40091cc:	dc002a17 	ldw	r16,168(sp)
 40091d0:	2f006d2e 	bgeu	r5,fp,4009388 <___vfprintf_internal_r+0x22a4>
 40091d4:	d9c02384 	addi	r7,sp,142
 40091d8:	3ccfc83a 	sub	r7,r7,r19
 40091dc:	d9002344 	addi	r4,sp,141
 40091e0:	e1cf883a 	add	r7,fp,r7
 40091e4:	00000106 	br	40091ec <___vfprintf_internal_r+0x2108>
 40091e8:	28800003 	ldbu	r2,0(r5)
 40091ec:	20800005 	stb	r2,0(r4)
 40091f0:	21000044 	addi	r4,r4,1
 40091f4:	29400044 	addi	r5,r5,1
 40091f8:	393ffb1e 	bne	r7,r4,40091e8 <__alt_data_end+0xfc0091e8>
 40091fc:	d8802304 	addi	r2,sp,140
 4009200:	14c5c83a 	sub	r2,r2,r19
 4009204:	d8c02344 	addi	r3,sp,141
 4009208:	1885883a 	add	r2,r3,r2
 400920c:	003f7006 	br	4008fd0 <__alt_data_end+0xfc008fd0>
 4009210:	0005883a 	mov	r2,zero
 4009214:	003f0f06 	br	4008e54 <__alt_data_end+0xfc008e54>
 4009218:	d8c03217 	ldw	r3,200(sp)
 400921c:	18c00044 	addi	r3,r3,1
 4009220:	d8c02b15 	stw	r3,172(sp)
 4009224:	1805883a 	mov	r2,r3
 4009228:	183fb20e 	bge	r3,zero,40090f4 <__alt_data_end+0xfc0090f4>
 400922c:	0005883a 	mov	r2,zero
 4009230:	003fb006 	br	40090f4 <__alt_data_end+0xfc0090f4>
 4009234:	d9003617 	ldw	r4,216(sp)
 4009238:	000d883a 	mov	r6,zero
 400923c:	000f883a 	mov	r7,zero
 4009240:	980b883a 	mov	r5,r19
 4009244:	d8c03c15 	stw	r3,240(sp)
 4009248:	da003d15 	stw	r8,244(sp)
 400924c:	40127f00 	call	40127f0 <__eqdf2>
 4009250:	d8c03c17 	ldw	r3,240(sp)
 4009254:	da003d17 	ldw	r8,244(sp)
 4009258:	103f9826 	beq	r2,zero,40090bc <__alt_data_end+0xfc0090bc>
 400925c:	00800044 	movi	r2,1
 4009260:	10c7c83a 	sub	r3,r2,r3
 4009264:	d8c02615 	stw	r3,152(sp)
 4009268:	003f9506 	br	40090c0 <__alt_data_end+0xfc0090c0>
 400926c:	d9002a17 	ldw	r4,168(sp)
 4009270:	d8c03217 	ldw	r3,200(sp)
 4009274:	20800044 	addi	r2,r4,1
 4009278:	1885883a 	add	r2,r3,r2
 400927c:	d8802b15 	stw	r2,172(sp)
 4009280:	103dbf0e 	bge	r2,zero,4008980 <__alt_data_end+0xfc008980>
 4009284:	0005883a 	mov	r2,zero
 4009288:	003dbd06 	br	4008980 <__alt_data_end+0xfc008980>
 400928c:	2000201e 	bne	r4,zero,4009310 <___vfprintf_internal_r+0x222c>
 4009290:	9480004c 	andi	r18,r18,1
 4009294:	90001e1e 	bne	r18,zero,4009310 <___vfprintf_internal_r+0x222c>
 4009298:	00800044 	movi	r2,1
 400929c:	d8802b15 	stw	r2,172(sp)
 40092a0:	003db706 	br	4008980 <__alt_data_end+0xfc008980>
 40092a4:	00800b44 	movi	r2,45
 40092a8:	05adc83a 	sub	r22,zero,r22
 40092ac:	d8802305 	stb	r2,140(sp)
 40092b0:	003f3f06 	br	4008fb0 <__alt_data_end+0xfc008fb0>
 40092b4:	0005883a 	mov	r2,zero
 40092b8:	003f5206 	br	4009004 <__alt_data_end+0xfc009004>
 40092bc:	90a4703a 	and	r18,r18,r2
 40092c0:	903f4e26 	beq	r18,zero,4008ffc <__alt_data_end+0xfc008ffc>
 40092c4:	003f4a06 	br	4008ff0 <__alt_data_end+0xfc008ff0>
 40092c8:	00800084 	movi	r2,2
 40092cc:	10c5c83a 	sub	r2,r2,r3
 40092d0:	003f8406 	br	40090e4 <__alt_data_end+0xfc0090e4>
 40092d4:	d9402e17 	ldw	r5,184(sp)
 40092d8:	d9002e17 	ldw	r4,184(sp)
 40092dc:	ac400043 	ldbu	r17,1(r21)
 40092e0:	29400017 	ldw	r5,0(r5)
 40092e4:	20800104 	addi	r2,r4,4
 40092e8:	d8802e15 	stw	r2,184(sp)
 40092ec:	d9402a15 	stw	r5,168(sp)
 40092f0:	182b883a 	mov	r21,r3
 40092f4:	283e7b0e 	bge	r5,zero,4008ce4 <__alt_data_end+0xfc008ce4>
 40092f8:	8c403fcc 	andi	r17,r17,255
 40092fc:	017fffc4 	movi	r5,-1
 4009300:	8c40201c 	xori	r17,r17,128
 4009304:	d9402a15 	stw	r5,168(sp)
 4009308:	8c7fe004 	addi	r17,r17,-128
 400930c:	0037d706 	br	400726c <__alt_data_end+0xfc00726c>
 4009310:	d8c02a17 	ldw	r3,168(sp)
 4009314:	18c00084 	addi	r3,r3,2
 4009318:	d8c02b15 	stw	r3,172(sp)
 400931c:	1805883a 	mov	r2,r3
 4009320:	183d970e 	bge	r3,zero,4008980 <__alt_data_end+0xfc008980>
 4009324:	003fd706 	br	4009284 <__alt_data_end+0xfc009284>
 4009328:	0005883a 	mov	r2,zero
 400932c:	003f8f06 	br	400916c <__alt_data_end+0xfc00916c>
 4009330:	9080004c 	andi	r2,r18,1
 4009334:	103f821e 	bne	r2,zero,4009140 <__alt_data_end+0xfc009140>
 4009338:	d8802117 	ldw	r2,132(sp)
 400933c:	1405c83a 	sub	r2,r2,r16
 4009340:	d8803315 	stw	r2,204(sp)
 4009344:	b47ef426 	beq	r22,r17,4008f18 <__alt_data_end+0xfc008f18>
 4009348:	dd802617 	ldw	r22,152(sp)
 400934c:	003f1206 	br	4008f98 <__alt_data_end+0xfc008f98>
 4009350:	d8c02b03 	ldbu	r3,172(sp)
 4009354:	d8c02785 	stb	r3,158(sp)
 4009358:	0038df06 	br	40076d8 <__alt_data_end+0xfc0076d8>
 400935c:	d8c02b03 	ldbu	r3,172(sp)
 4009360:	d8c02785 	stb	r3,158(sp)
 4009364:	0038aa06 	br	4007610 <__alt_data_end+0xfc007610>
 4009368:	d8c02b03 	ldbu	r3,172(sp)
 400936c:	d8c02785 	stb	r3,158(sp)
 4009370:	003a4306 	br	4007c80 <__alt_data_end+0xfc007c80>
 4009374:	d8c02b03 	ldbu	r3,172(sp)
 4009378:	d8c02785 	stb	r3,158(sp)
 400937c:	003af506 	br	4007f54 <__alt_data_end+0xfc007f54>
 4009380:	0005883a 	mov	r2,zero
 4009384:	003d7b06 	br	4008974 <__alt_data_end+0xfc008974>
 4009388:	d8802344 	addi	r2,sp,141
 400938c:	003f1006 	br	4008fd0 <__alt_data_end+0xfc008fd0>
 4009390:	d8c02b03 	ldbu	r3,172(sp)
 4009394:	d8c02785 	stb	r3,158(sp)
 4009398:	0038fd06 	br	4007790 <__alt_data_end+0xfc007790>
 400939c:	d8c02b03 	ldbu	r3,172(sp)
 40093a0:	d8c02785 	stb	r3,158(sp)
 40093a4:	003a9706 	br	4007e04 <__alt_data_end+0xfc007e04>
 40093a8:	d8c02b03 	ldbu	r3,172(sp)
 40093ac:	d8c02785 	stb	r3,158(sp)
 40093b0:	003a1806 	br	4007c14 <__alt_data_end+0xfc007c14>
 40093b4:	d8c02b03 	ldbu	r3,172(sp)
 40093b8:	d8c02785 	stb	r3,158(sp)
 40093bc:	003abe06 	br	4007eb8 <__alt_data_end+0xfc007eb8>

040093c0 <__vfprintf_internal>:
 40093c0:	008100b4 	movhi	r2,1026
 40093c4:	10a2f104 	addi	r2,r2,-29756
 40093c8:	300f883a 	mov	r7,r6
 40093cc:	280d883a 	mov	r6,r5
 40093d0:	200b883a 	mov	r5,r4
 40093d4:	11000017 	ldw	r4,0(r2)
 40093d8:	40070e41 	jmpi	40070e4 <___vfprintf_internal_r>

040093dc <__sbprintf>:
 40093dc:	2880030b 	ldhu	r2,12(r5)
 40093e0:	2ac01917 	ldw	r11,100(r5)
 40093e4:	2a80038b 	ldhu	r10,14(r5)
 40093e8:	2a400717 	ldw	r9,28(r5)
 40093ec:	2a000917 	ldw	r8,36(r5)
 40093f0:	defee204 	addi	sp,sp,-1144
 40093f4:	00c10004 	movi	r3,1024
 40093f8:	dc011a15 	stw	r16,1128(sp)
 40093fc:	10bfff4c 	andi	r2,r2,65533
 4009400:	2821883a 	mov	r16,r5
 4009404:	d8cb883a 	add	r5,sp,r3
 4009408:	dc811c15 	stw	r18,1136(sp)
 400940c:	dc411b15 	stw	r17,1132(sp)
 4009410:	dfc11d15 	stw	ra,1140(sp)
 4009414:	2025883a 	mov	r18,r4
 4009418:	d881030d 	sth	r2,1036(sp)
 400941c:	dac11915 	stw	r11,1124(sp)
 4009420:	da81038d 	sth	r10,1038(sp)
 4009424:	da410715 	stw	r9,1052(sp)
 4009428:	da010915 	stw	r8,1060(sp)
 400942c:	dec10015 	stw	sp,1024(sp)
 4009430:	dec10415 	stw	sp,1040(sp)
 4009434:	d8c10215 	stw	r3,1032(sp)
 4009438:	d8c10515 	stw	r3,1044(sp)
 400943c:	d8010615 	stw	zero,1048(sp)
 4009440:	40070e40 	call	40070e4 <___vfprintf_internal_r>
 4009444:	1023883a 	mov	r17,r2
 4009448:	10000416 	blt	r2,zero,400945c <__sbprintf+0x80>
 400944c:	d9410004 	addi	r5,sp,1024
 4009450:	9009883a 	mov	r4,r18
 4009454:	400b0b80 	call	400b0b8 <_fflush_r>
 4009458:	10000d1e 	bne	r2,zero,4009490 <__sbprintf+0xb4>
 400945c:	d881030b 	ldhu	r2,1036(sp)
 4009460:	1080100c 	andi	r2,r2,64
 4009464:	10000326 	beq	r2,zero,4009474 <__sbprintf+0x98>
 4009468:	8080030b 	ldhu	r2,12(r16)
 400946c:	10801014 	ori	r2,r2,64
 4009470:	8080030d 	sth	r2,12(r16)
 4009474:	8805883a 	mov	r2,r17
 4009478:	dfc11d17 	ldw	ra,1140(sp)
 400947c:	dc811c17 	ldw	r18,1136(sp)
 4009480:	dc411b17 	ldw	r17,1132(sp)
 4009484:	dc011a17 	ldw	r16,1128(sp)
 4009488:	dec11e04 	addi	sp,sp,1144
 400948c:	f800283a 	ret
 4009490:	047fffc4 	movi	r17,-1
 4009494:	003ff106 	br	400945c <__alt_data_end+0xfc00945c>

04009498 <__swsetup_r>:
 4009498:	008100b4 	movhi	r2,1026
 400949c:	defffd04 	addi	sp,sp,-12
 40094a0:	10a2f104 	addi	r2,r2,-29756
 40094a4:	dc400115 	stw	r17,4(sp)
 40094a8:	2023883a 	mov	r17,r4
 40094ac:	11000017 	ldw	r4,0(r2)
 40094b0:	dc000015 	stw	r16,0(sp)
 40094b4:	dfc00215 	stw	ra,8(sp)
 40094b8:	2821883a 	mov	r16,r5
 40094bc:	20000226 	beq	r4,zero,40094c8 <__swsetup_r+0x30>
 40094c0:	20800e17 	ldw	r2,56(r4)
 40094c4:	10003126 	beq	r2,zero,400958c <__swsetup_r+0xf4>
 40094c8:	8080030b 	ldhu	r2,12(r16)
 40094cc:	10c0020c 	andi	r3,r2,8
 40094d0:	1009883a 	mov	r4,r2
 40094d4:	18000f26 	beq	r3,zero,4009514 <__swsetup_r+0x7c>
 40094d8:	80c00417 	ldw	r3,16(r16)
 40094dc:	18001526 	beq	r3,zero,4009534 <__swsetup_r+0x9c>
 40094e0:	1100004c 	andi	r4,r2,1
 40094e4:	20001c1e 	bne	r4,zero,4009558 <__swsetup_r+0xc0>
 40094e8:	1080008c 	andi	r2,r2,2
 40094ec:	1000291e 	bne	r2,zero,4009594 <__swsetup_r+0xfc>
 40094f0:	80800517 	ldw	r2,20(r16)
 40094f4:	80800215 	stw	r2,8(r16)
 40094f8:	18001c26 	beq	r3,zero,400956c <__swsetup_r+0xd4>
 40094fc:	0005883a 	mov	r2,zero
 4009500:	dfc00217 	ldw	ra,8(sp)
 4009504:	dc400117 	ldw	r17,4(sp)
 4009508:	dc000017 	ldw	r16,0(sp)
 400950c:	dec00304 	addi	sp,sp,12
 4009510:	f800283a 	ret
 4009514:	2080040c 	andi	r2,r4,16
 4009518:	10002e26 	beq	r2,zero,40095d4 <__swsetup_r+0x13c>
 400951c:	2080010c 	andi	r2,r4,4
 4009520:	10001e1e 	bne	r2,zero,400959c <__swsetup_r+0x104>
 4009524:	80c00417 	ldw	r3,16(r16)
 4009528:	20800214 	ori	r2,r4,8
 400952c:	8080030d 	sth	r2,12(r16)
 4009530:	183feb1e 	bne	r3,zero,40094e0 <__alt_data_end+0xfc0094e0>
 4009534:	1100a00c 	andi	r4,r2,640
 4009538:	01408004 	movi	r5,512
 400953c:	217fe826 	beq	r4,r5,40094e0 <__alt_data_end+0xfc0094e0>
 4009540:	800b883a 	mov	r5,r16
 4009544:	8809883a 	mov	r4,r17
 4009548:	400c0b00 	call	400c0b0 <__smakebuf_r>
 400954c:	8080030b 	ldhu	r2,12(r16)
 4009550:	80c00417 	ldw	r3,16(r16)
 4009554:	003fe206 	br	40094e0 <__alt_data_end+0xfc0094e0>
 4009558:	80800517 	ldw	r2,20(r16)
 400955c:	80000215 	stw	zero,8(r16)
 4009560:	0085c83a 	sub	r2,zero,r2
 4009564:	80800615 	stw	r2,24(r16)
 4009568:	183fe41e 	bne	r3,zero,40094fc <__alt_data_end+0xfc0094fc>
 400956c:	80c0030b 	ldhu	r3,12(r16)
 4009570:	0005883a 	mov	r2,zero
 4009574:	1900200c 	andi	r4,r3,128
 4009578:	203fe126 	beq	r4,zero,4009500 <__alt_data_end+0xfc009500>
 400957c:	18c01014 	ori	r3,r3,64
 4009580:	80c0030d 	sth	r3,12(r16)
 4009584:	00bfffc4 	movi	r2,-1
 4009588:	003fdd06 	br	4009500 <__alt_data_end+0xfc009500>
 400958c:	400b4a40 	call	400b4a4 <__sinit>
 4009590:	003fcd06 	br	40094c8 <__alt_data_end+0xfc0094c8>
 4009594:	0005883a 	mov	r2,zero
 4009598:	003fd606 	br	40094f4 <__alt_data_end+0xfc0094f4>
 400959c:	81400c17 	ldw	r5,48(r16)
 40095a0:	28000626 	beq	r5,zero,40095bc <__swsetup_r+0x124>
 40095a4:	80801004 	addi	r2,r16,64
 40095a8:	28800326 	beq	r5,r2,40095b8 <__swsetup_r+0x120>
 40095ac:	8809883a 	mov	r4,r17
 40095b0:	400b6180 	call	400b618 <_free_r>
 40095b4:	8100030b 	ldhu	r4,12(r16)
 40095b8:	80000c15 	stw	zero,48(r16)
 40095bc:	80c00417 	ldw	r3,16(r16)
 40095c0:	00bff6c4 	movi	r2,-37
 40095c4:	1108703a 	and	r4,r2,r4
 40095c8:	80000115 	stw	zero,4(r16)
 40095cc:	80c00015 	stw	r3,0(r16)
 40095d0:	003fd506 	br	4009528 <__alt_data_end+0xfc009528>
 40095d4:	00800244 	movi	r2,9
 40095d8:	88800015 	stw	r2,0(r17)
 40095dc:	20801014 	ori	r2,r4,64
 40095e0:	8080030d 	sth	r2,12(r16)
 40095e4:	00bfffc4 	movi	r2,-1
 40095e8:	003fc506 	br	4009500 <__alt_data_end+0xfc009500>

040095ec <quorem>:
 40095ec:	defff204 	addi	sp,sp,-56
 40095f0:	ddc00b15 	stw	r23,44(sp)
 40095f4:	20800417 	ldw	r2,16(r4)
 40095f8:	2dc00417 	ldw	r23,16(r5)
 40095fc:	dfc00d15 	stw	ra,52(sp)
 4009600:	df000c15 	stw	fp,48(sp)
 4009604:	dd800a15 	stw	r22,40(sp)
 4009608:	dd400915 	stw	r21,36(sp)
 400960c:	dd000815 	stw	r20,32(sp)
 4009610:	dcc00715 	stw	r19,28(sp)
 4009614:	dc800615 	stw	r18,24(sp)
 4009618:	dc400515 	stw	r17,20(sp)
 400961c:	dc000415 	stw	r16,16(sp)
 4009620:	15c07a16 	blt	r2,r23,400980c <quorem+0x220>
 4009624:	bdffffc4 	addi	r23,r23,-1
 4009628:	bde9883a 	add	r20,r23,r23
 400962c:	28c00504 	addi	r3,r5,20
 4009630:	a529883a 	add	r20,r20,r20
 4009634:	1d39883a 	add	fp,r3,r20
 4009638:	24c00504 	addi	r19,r4,20
 400963c:	d9400215 	stw	r5,8(sp)
 4009640:	9d29883a 	add	r20,r19,r20
 4009644:	e1400017 	ldw	r5,0(fp)
 4009648:	d9000015 	stw	r4,0(sp)
 400964c:	a1000017 	ldw	r4,0(r20)
 4009650:	29400044 	addi	r5,r5,1
 4009654:	d8c00115 	stw	r3,4(sp)
 4009658:	dd000315 	stw	r20,12(sp)
 400965c:	4006c140 	call	4006c14 <__udivsi3>
 4009660:	1025883a 	mov	r18,r2
 4009664:	10003026 	beq	r2,zero,4009728 <quorem+0x13c>
 4009668:	dc400117 	ldw	r17,4(sp)
 400966c:	9829883a 	mov	r20,r19
 4009670:	002d883a 	mov	r22,zero
 4009674:	0021883a 	mov	r16,zero
 4009678:	8d400017 	ldw	r21,0(r17)
 400967c:	900b883a 	mov	r5,r18
 4009680:	8c400104 	addi	r17,r17,4
 4009684:	a93fffcc 	andi	r4,r21,65535
 4009688:	4006cd00 	call	4006cd0 <__mulsi3>
 400968c:	a808d43a 	srli	r4,r21,16
 4009690:	900b883a 	mov	r5,r18
 4009694:	15ad883a 	add	r22,r2,r22
 4009698:	4006cd00 	call	4006cd0 <__mulsi3>
 400969c:	a1000017 	ldw	r4,0(r20)
 40096a0:	b00cd43a 	srli	r6,r22,16
 40096a4:	b0ffffcc 	andi	r3,r22,65535
 40096a8:	217fffcc 	andi	r5,r4,65535
 40096ac:	2c21883a 	add	r16,r5,r16
 40096b0:	80c7c83a 	sub	r3,r16,r3
 40096b4:	2008d43a 	srli	r4,r4,16
 40096b8:	1185883a 	add	r2,r2,r6
 40096bc:	1821d43a 	srai	r16,r3,16
 40096c0:	117fffcc 	andi	r5,r2,65535
 40096c4:	2149c83a 	sub	r4,r4,r5
 40096c8:	2421883a 	add	r16,r4,r16
 40096cc:	8008943a 	slli	r4,r16,16
 40096d0:	18ffffcc 	andi	r3,r3,65535
 40096d4:	102cd43a 	srli	r22,r2,16
 40096d8:	20c8b03a 	or	r4,r4,r3
 40096dc:	a1000015 	stw	r4,0(r20)
 40096e0:	8021d43a 	srai	r16,r16,16
 40096e4:	a5000104 	addi	r20,r20,4
 40096e8:	e47fe32e 	bgeu	fp,r17,4009678 <__alt_data_end+0xfc009678>
 40096ec:	d8c00317 	ldw	r3,12(sp)
 40096f0:	18800017 	ldw	r2,0(r3)
 40096f4:	10000c1e 	bne	r2,zero,4009728 <quorem+0x13c>
 40096f8:	18bfff04 	addi	r2,r3,-4
 40096fc:	9880082e 	bgeu	r19,r2,4009720 <quorem+0x134>
 4009700:	18ffff17 	ldw	r3,-4(r3)
 4009704:	18000326 	beq	r3,zero,4009714 <quorem+0x128>
 4009708:	00000506 	br	4009720 <quorem+0x134>
 400970c:	10c00017 	ldw	r3,0(r2)
 4009710:	1800031e 	bne	r3,zero,4009720 <quorem+0x134>
 4009714:	10bfff04 	addi	r2,r2,-4
 4009718:	bdffffc4 	addi	r23,r23,-1
 400971c:	98bffb36 	bltu	r19,r2,400970c <__alt_data_end+0xfc00970c>
 4009720:	d8c00017 	ldw	r3,0(sp)
 4009724:	1dc00415 	stw	r23,16(r3)
 4009728:	d9400217 	ldw	r5,8(sp)
 400972c:	d9000017 	ldw	r4,0(sp)
 4009730:	400d7840 	call	400d784 <__mcmp>
 4009734:	10002816 	blt	r2,zero,40097d8 <quorem+0x1ec>
 4009738:	dc400117 	ldw	r17,4(sp)
 400973c:	94800044 	addi	r18,r18,1
 4009740:	980d883a 	mov	r6,r19
 4009744:	0007883a 	mov	r3,zero
 4009748:	31000017 	ldw	r4,0(r6)
 400974c:	89400017 	ldw	r5,0(r17)
 4009750:	31800104 	addi	r6,r6,4
 4009754:	20bfffcc 	andi	r2,r4,65535
 4009758:	10c7883a 	add	r3,r2,r3
 400975c:	28bfffcc 	andi	r2,r5,65535
 4009760:	1885c83a 	sub	r2,r3,r2
 4009764:	280ad43a 	srli	r5,r5,16
 4009768:	2008d43a 	srli	r4,r4,16
 400976c:	1007d43a 	srai	r3,r2,16
 4009770:	10bfffcc 	andi	r2,r2,65535
 4009774:	2149c83a 	sub	r4,r4,r5
 4009778:	20c9883a 	add	r4,r4,r3
 400977c:	200a943a 	slli	r5,r4,16
 4009780:	8c400104 	addi	r17,r17,4
 4009784:	2007d43a 	srai	r3,r4,16
 4009788:	2884b03a 	or	r2,r5,r2
 400978c:	30bfff15 	stw	r2,-4(r6)
 4009790:	e47fed2e 	bgeu	fp,r17,4009748 <__alt_data_end+0xfc009748>
 4009794:	bdc5883a 	add	r2,r23,r23
 4009798:	1085883a 	add	r2,r2,r2
 400979c:	9887883a 	add	r3,r19,r2
 40097a0:	18800017 	ldw	r2,0(r3)
 40097a4:	10000c1e 	bne	r2,zero,40097d8 <quorem+0x1ec>
 40097a8:	18bfff04 	addi	r2,r3,-4
 40097ac:	9880082e 	bgeu	r19,r2,40097d0 <quorem+0x1e4>
 40097b0:	18ffff17 	ldw	r3,-4(r3)
 40097b4:	18000326 	beq	r3,zero,40097c4 <quorem+0x1d8>
 40097b8:	00000506 	br	40097d0 <quorem+0x1e4>
 40097bc:	10c00017 	ldw	r3,0(r2)
 40097c0:	1800031e 	bne	r3,zero,40097d0 <quorem+0x1e4>
 40097c4:	10bfff04 	addi	r2,r2,-4
 40097c8:	bdffffc4 	addi	r23,r23,-1
 40097cc:	98bffb36 	bltu	r19,r2,40097bc <__alt_data_end+0xfc0097bc>
 40097d0:	d8c00017 	ldw	r3,0(sp)
 40097d4:	1dc00415 	stw	r23,16(r3)
 40097d8:	9005883a 	mov	r2,r18
 40097dc:	dfc00d17 	ldw	ra,52(sp)
 40097e0:	df000c17 	ldw	fp,48(sp)
 40097e4:	ddc00b17 	ldw	r23,44(sp)
 40097e8:	dd800a17 	ldw	r22,40(sp)
 40097ec:	dd400917 	ldw	r21,36(sp)
 40097f0:	dd000817 	ldw	r20,32(sp)
 40097f4:	dcc00717 	ldw	r19,28(sp)
 40097f8:	dc800617 	ldw	r18,24(sp)
 40097fc:	dc400517 	ldw	r17,20(sp)
 4009800:	dc000417 	ldw	r16,16(sp)
 4009804:	dec00e04 	addi	sp,sp,56
 4009808:	f800283a 	ret
 400980c:	0005883a 	mov	r2,zero
 4009810:	003ff206 	br	40097dc <__alt_data_end+0xfc0097dc>

04009814 <_dtoa_r>:
 4009814:	20801017 	ldw	r2,64(r4)
 4009818:	deffde04 	addi	sp,sp,-136
 400981c:	df002015 	stw	fp,128(sp)
 4009820:	dcc01b15 	stw	r19,108(sp)
 4009824:	dc801a15 	stw	r18,104(sp)
 4009828:	dc401915 	stw	r17,100(sp)
 400982c:	dc001815 	stw	r16,96(sp)
 4009830:	dfc02115 	stw	ra,132(sp)
 4009834:	ddc01f15 	stw	r23,124(sp)
 4009838:	dd801e15 	stw	r22,120(sp)
 400983c:	dd401d15 	stw	r21,116(sp)
 4009840:	dd001c15 	stw	r20,112(sp)
 4009844:	d9c00315 	stw	r7,12(sp)
 4009848:	2039883a 	mov	fp,r4
 400984c:	3023883a 	mov	r17,r6
 4009850:	2825883a 	mov	r18,r5
 4009854:	dc002417 	ldw	r16,144(sp)
 4009858:	3027883a 	mov	r19,r6
 400985c:	10000826 	beq	r2,zero,4009880 <_dtoa_r+0x6c>
 4009860:	21801117 	ldw	r6,68(r4)
 4009864:	00c00044 	movi	r3,1
 4009868:	100b883a 	mov	r5,r2
 400986c:	1986983a 	sll	r3,r3,r6
 4009870:	11800115 	stw	r6,4(r2)
 4009874:	10c00215 	stw	r3,8(r2)
 4009878:	400cea80 	call	400cea8 <_Bfree>
 400987c:	e0001015 	stw	zero,64(fp)
 4009880:	88002e16 	blt	r17,zero,400993c <_dtoa_r+0x128>
 4009884:	80000015 	stw	zero,0(r16)
 4009888:	889ffc2c 	andhi	r2,r17,32752
 400988c:	00dffc34 	movhi	r3,32752
 4009890:	10c01c26 	beq	r2,r3,4009904 <_dtoa_r+0xf0>
 4009894:	000d883a 	mov	r6,zero
 4009898:	000f883a 	mov	r7,zero
 400989c:	9009883a 	mov	r4,r18
 40098a0:	980b883a 	mov	r5,r19
 40098a4:	40127f00 	call	40127f0 <__eqdf2>
 40098a8:	10002b1e 	bne	r2,zero,4009958 <_dtoa_r+0x144>
 40098ac:	d9c02317 	ldw	r7,140(sp)
 40098b0:	00800044 	movi	r2,1
 40098b4:	38800015 	stw	r2,0(r7)
 40098b8:	d8802517 	ldw	r2,148(sp)
 40098bc:	10019e26 	beq	r2,zero,4009f38 <_dtoa_r+0x724>
 40098c0:	d8c02517 	ldw	r3,148(sp)
 40098c4:	00810074 	movhi	r2,1025
 40098c8:	109b7a44 	addi	r2,r2,28137
 40098cc:	18800015 	stw	r2,0(r3)
 40098d0:	10bfffc4 	addi	r2,r2,-1
 40098d4:	dfc02117 	ldw	ra,132(sp)
 40098d8:	df002017 	ldw	fp,128(sp)
 40098dc:	ddc01f17 	ldw	r23,124(sp)
 40098e0:	dd801e17 	ldw	r22,120(sp)
 40098e4:	dd401d17 	ldw	r21,116(sp)
 40098e8:	dd001c17 	ldw	r20,112(sp)
 40098ec:	dcc01b17 	ldw	r19,108(sp)
 40098f0:	dc801a17 	ldw	r18,104(sp)
 40098f4:	dc401917 	ldw	r17,100(sp)
 40098f8:	dc001817 	ldw	r16,96(sp)
 40098fc:	dec02204 	addi	sp,sp,136
 4009900:	f800283a 	ret
 4009904:	d8c02317 	ldw	r3,140(sp)
 4009908:	0089c3c4 	movi	r2,9999
 400990c:	18800015 	stw	r2,0(r3)
 4009910:	90017726 	beq	r18,zero,4009ef0 <_dtoa_r+0x6dc>
 4009914:	00810074 	movhi	r2,1025
 4009918:	109b8604 	addi	r2,r2,28184
 400991c:	d9002517 	ldw	r4,148(sp)
 4009920:	203fec26 	beq	r4,zero,40098d4 <__alt_data_end+0xfc0098d4>
 4009924:	10c000c7 	ldb	r3,3(r2)
 4009928:	1801781e 	bne	r3,zero,4009f0c <_dtoa_r+0x6f8>
 400992c:	10c000c4 	addi	r3,r2,3
 4009930:	d9802517 	ldw	r6,148(sp)
 4009934:	30c00015 	stw	r3,0(r6)
 4009938:	003fe606 	br	40098d4 <__alt_data_end+0xfc0098d4>
 400993c:	04e00034 	movhi	r19,32768
 4009940:	9cffffc4 	addi	r19,r19,-1
 4009944:	00800044 	movi	r2,1
 4009948:	8ce6703a 	and	r19,r17,r19
 400994c:	80800015 	stw	r2,0(r16)
 4009950:	9823883a 	mov	r17,r19
 4009954:	003fcc06 	br	4009888 <__alt_data_end+0xfc009888>
 4009958:	d8800204 	addi	r2,sp,8
 400995c:	d8800015 	stw	r2,0(sp)
 4009960:	d9c00104 	addi	r7,sp,4
 4009964:	900b883a 	mov	r5,r18
 4009968:	980d883a 	mov	r6,r19
 400996c:	e009883a 	mov	r4,fp
 4009970:	8820d53a 	srli	r16,r17,20
 4009974:	400db500 	call	400db50 <__d2b>
 4009978:	d8800915 	stw	r2,36(sp)
 400997c:	8001651e 	bne	r16,zero,4009f14 <_dtoa_r+0x700>
 4009980:	dd800217 	ldw	r22,8(sp)
 4009984:	dc000117 	ldw	r16,4(sp)
 4009988:	00800804 	movi	r2,32
 400998c:	b421883a 	add	r16,r22,r16
 4009990:	80c10c84 	addi	r3,r16,1074
 4009994:	10c2d10e 	bge	r2,r3,400a4dc <_dtoa_r+0xcc8>
 4009998:	00801004 	movi	r2,64
 400999c:	81010484 	addi	r4,r16,1042
 40099a0:	10c7c83a 	sub	r3,r2,r3
 40099a4:	9108d83a 	srl	r4,r18,r4
 40099a8:	88e2983a 	sll	r17,r17,r3
 40099ac:	2448b03a 	or	r4,r4,r17
 40099b0:	4013d0c0 	call	4013d0c <__floatunsidf>
 40099b4:	017f8434 	movhi	r5,65040
 40099b8:	01800044 	movi	r6,1
 40099bc:	1009883a 	mov	r4,r2
 40099c0:	194b883a 	add	r5,r3,r5
 40099c4:	843fffc4 	addi	r16,r16,-1
 40099c8:	d9801115 	stw	r6,68(sp)
 40099cc:	000d883a 	mov	r6,zero
 40099d0:	01cffe34 	movhi	r7,16376
 40099d4:	40132b40 	call	40132b4 <__subdf3>
 40099d8:	0198dbf4 	movhi	r6,25455
 40099dc:	01cff4f4 	movhi	r7,16339
 40099e0:	3190d844 	addi	r6,r6,17249
 40099e4:	39e1e9c4 	addi	r7,r7,-30809
 40099e8:	1009883a 	mov	r4,r2
 40099ec:	180b883a 	mov	r5,r3
 40099f0:	4012a480 	call	4012a48 <__muldf3>
 40099f4:	01a2d874 	movhi	r6,35681
 40099f8:	01cff1f4 	movhi	r7,16327
 40099fc:	31b22cc4 	addi	r6,r6,-14157
 4009a00:	39e28a04 	addi	r7,r7,-30168
 4009a04:	180b883a 	mov	r5,r3
 4009a08:	1009883a 	mov	r4,r2
 4009a0c:	40115740 	call	4011574 <__adddf3>
 4009a10:	8009883a 	mov	r4,r16
 4009a14:	1029883a 	mov	r20,r2
 4009a18:	1823883a 	mov	r17,r3
 4009a1c:	4013c300 	call	4013c30 <__floatsidf>
 4009a20:	019427f4 	movhi	r6,20639
 4009a24:	01cff4f4 	movhi	r7,16339
 4009a28:	319e7ec4 	addi	r6,r6,31227
 4009a2c:	39d104c4 	addi	r7,r7,17427
 4009a30:	1009883a 	mov	r4,r2
 4009a34:	180b883a 	mov	r5,r3
 4009a38:	4012a480 	call	4012a48 <__muldf3>
 4009a3c:	100d883a 	mov	r6,r2
 4009a40:	180f883a 	mov	r7,r3
 4009a44:	a009883a 	mov	r4,r20
 4009a48:	880b883a 	mov	r5,r17
 4009a4c:	40115740 	call	4011574 <__adddf3>
 4009a50:	1009883a 	mov	r4,r2
 4009a54:	180b883a 	mov	r5,r3
 4009a58:	1029883a 	mov	r20,r2
 4009a5c:	1823883a 	mov	r17,r3
 4009a60:	4013bb00 	call	4013bb0 <__fixdfsi>
 4009a64:	000d883a 	mov	r6,zero
 4009a68:	000f883a 	mov	r7,zero
 4009a6c:	a009883a 	mov	r4,r20
 4009a70:	880b883a 	mov	r5,r17
 4009a74:	d8800515 	stw	r2,20(sp)
 4009a78:	40129540 	call	4012954 <__ledf2>
 4009a7c:	10028716 	blt	r2,zero,400a49c <_dtoa_r+0xc88>
 4009a80:	d8c00517 	ldw	r3,20(sp)
 4009a84:	00800584 	movi	r2,22
 4009a88:	10c27536 	bltu	r2,r3,400a460 <_dtoa_r+0xc4c>
 4009a8c:	180490fa 	slli	r2,r3,3
 4009a90:	00c10074 	movhi	r3,1025
 4009a94:	18dba204 	addi	r3,r3,28296
 4009a98:	1885883a 	add	r2,r3,r2
 4009a9c:	11000017 	ldw	r4,0(r2)
 4009aa0:	11400117 	ldw	r5,4(r2)
 4009aa4:	900d883a 	mov	r6,r18
 4009aa8:	980f883a 	mov	r7,r19
 4009aac:	40128780 	call	4012878 <__gedf2>
 4009ab0:	00828d0e 	bge	zero,r2,400a4e8 <_dtoa_r+0xcd4>
 4009ab4:	d9000517 	ldw	r4,20(sp)
 4009ab8:	d8000e15 	stw	zero,56(sp)
 4009abc:	213fffc4 	addi	r4,r4,-1
 4009ac0:	d9000515 	stw	r4,20(sp)
 4009ac4:	b42dc83a 	sub	r22,r22,r16
 4009ac8:	b5bfffc4 	addi	r22,r22,-1
 4009acc:	b0026f16 	blt	r22,zero,400a48c <_dtoa_r+0xc78>
 4009ad0:	d8000815 	stw	zero,32(sp)
 4009ad4:	d9c00517 	ldw	r7,20(sp)
 4009ad8:	38026416 	blt	r7,zero,400a46c <_dtoa_r+0xc58>
 4009adc:	b1ed883a 	add	r22,r22,r7
 4009ae0:	d9c00d15 	stw	r7,52(sp)
 4009ae4:	d8000a15 	stw	zero,40(sp)
 4009ae8:	d9800317 	ldw	r6,12(sp)
 4009aec:	00800244 	movi	r2,9
 4009af0:	11811436 	bltu	r2,r6,4009f44 <_dtoa_r+0x730>
 4009af4:	00800144 	movi	r2,5
 4009af8:	1184e10e 	bge	r2,r6,400ae80 <_dtoa_r+0x166c>
 4009afc:	31bfff04 	addi	r6,r6,-4
 4009b00:	d9800315 	stw	r6,12(sp)
 4009b04:	0023883a 	mov	r17,zero
 4009b08:	d9800317 	ldw	r6,12(sp)
 4009b0c:	008000c4 	movi	r2,3
 4009b10:	30836726 	beq	r6,r2,400a8b0 <_dtoa_r+0x109c>
 4009b14:	1183410e 	bge	r2,r6,400a81c <_dtoa_r+0x1008>
 4009b18:	d9c00317 	ldw	r7,12(sp)
 4009b1c:	00800104 	movi	r2,4
 4009b20:	38827c26 	beq	r7,r2,400a514 <_dtoa_r+0xd00>
 4009b24:	00800144 	movi	r2,5
 4009b28:	3884c41e 	bne	r7,r2,400ae3c <_dtoa_r+0x1628>
 4009b2c:	00800044 	movi	r2,1
 4009b30:	d8800b15 	stw	r2,44(sp)
 4009b34:	d8c00517 	ldw	r3,20(sp)
 4009b38:	d9002217 	ldw	r4,136(sp)
 4009b3c:	1907883a 	add	r3,r3,r4
 4009b40:	19800044 	addi	r6,r3,1
 4009b44:	d8c00c15 	stw	r3,48(sp)
 4009b48:	d9800615 	stw	r6,24(sp)
 4009b4c:	0183a40e 	bge	zero,r6,400a9e0 <_dtoa_r+0x11cc>
 4009b50:	d9800617 	ldw	r6,24(sp)
 4009b54:	3021883a 	mov	r16,r6
 4009b58:	e0001115 	stw	zero,68(fp)
 4009b5c:	008005c4 	movi	r2,23
 4009b60:	1184c92e 	bgeu	r2,r6,400ae88 <_dtoa_r+0x1674>
 4009b64:	00c00044 	movi	r3,1
 4009b68:	00800104 	movi	r2,4
 4009b6c:	1085883a 	add	r2,r2,r2
 4009b70:	11000504 	addi	r4,r2,20
 4009b74:	180b883a 	mov	r5,r3
 4009b78:	18c00044 	addi	r3,r3,1
 4009b7c:	313ffb2e 	bgeu	r6,r4,4009b6c <__alt_data_end+0xfc009b6c>
 4009b80:	e1401115 	stw	r5,68(fp)
 4009b84:	e009883a 	mov	r4,fp
 4009b88:	400ce000 	call	400ce00 <_Balloc>
 4009b8c:	d8800715 	stw	r2,28(sp)
 4009b90:	e0801015 	stw	r2,64(fp)
 4009b94:	00800384 	movi	r2,14
 4009b98:	1400f736 	bltu	r2,r16,4009f78 <_dtoa_r+0x764>
 4009b9c:	8800f626 	beq	r17,zero,4009f78 <_dtoa_r+0x764>
 4009ba0:	d9c00517 	ldw	r7,20(sp)
 4009ba4:	01c39a0e 	bge	zero,r7,400aa10 <_dtoa_r+0x11fc>
 4009ba8:	388003cc 	andi	r2,r7,15
 4009bac:	100490fa 	slli	r2,r2,3
 4009bb0:	382bd13a 	srai	r21,r7,4
 4009bb4:	00c10074 	movhi	r3,1025
 4009bb8:	18dba204 	addi	r3,r3,28296
 4009bbc:	1885883a 	add	r2,r3,r2
 4009bc0:	a8c0040c 	andi	r3,r21,16
 4009bc4:	12400017 	ldw	r9,0(r2)
 4009bc8:	12000117 	ldw	r8,4(r2)
 4009bcc:	18037926 	beq	r3,zero,400a9b4 <_dtoa_r+0x11a0>
 4009bd0:	00810074 	movhi	r2,1025
 4009bd4:	109b9804 	addi	r2,r2,28256
 4009bd8:	11800817 	ldw	r6,32(r2)
 4009bdc:	11c00917 	ldw	r7,36(r2)
 4009be0:	9009883a 	mov	r4,r18
 4009be4:	980b883a 	mov	r5,r19
 4009be8:	da001715 	stw	r8,92(sp)
 4009bec:	da401615 	stw	r9,88(sp)
 4009bf0:	4011e200 	call	4011e20 <__divdf3>
 4009bf4:	da001717 	ldw	r8,92(sp)
 4009bf8:	da401617 	ldw	r9,88(sp)
 4009bfc:	ad4003cc 	andi	r21,r21,15
 4009c00:	040000c4 	movi	r16,3
 4009c04:	1023883a 	mov	r17,r2
 4009c08:	1829883a 	mov	r20,r3
 4009c0c:	a8001126 	beq	r21,zero,4009c54 <_dtoa_r+0x440>
 4009c10:	05c10074 	movhi	r23,1025
 4009c14:	bddb9804 	addi	r23,r23,28256
 4009c18:	4805883a 	mov	r2,r9
 4009c1c:	4007883a 	mov	r3,r8
 4009c20:	a980004c 	andi	r6,r21,1
 4009c24:	1009883a 	mov	r4,r2
 4009c28:	a82bd07a 	srai	r21,r21,1
 4009c2c:	180b883a 	mov	r5,r3
 4009c30:	30000426 	beq	r6,zero,4009c44 <_dtoa_r+0x430>
 4009c34:	b9800017 	ldw	r6,0(r23)
 4009c38:	b9c00117 	ldw	r7,4(r23)
 4009c3c:	84000044 	addi	r16,r16,1
 4009c40:	4012a480 	call	4012a48 <__muldf3>
 4009c44:	bdc00204 	addi	r23,r23,8
 4009c48:	a83ff51e 	bne	r21,zero,4009c20 <__alt_data_end+0xfc009c20>
 4009c4c:	1013883a 	mov	r9,r2
 4009c50:	1811883a 	mov	r8,r3
 4009c54:	480d883a 	mov	r6,r9
 4009c58:	400f883a 	mov	r7,r8
 4009c5c:	8809883a 	mov	r4,r17
 4009c60:	a00b883a 	mov	r5,r20
 4009c64:	4011e200 	call	4011e20 <__divdf3>
 4009c68:	d8800f15 	stw	r2,60(sp)
 4009c6c:	d8c01015 	stw	r3,64(sp)
 4009c70:	d8c00e17 	ldw	r3,56(sp)
 4009c74:	18000626 	beq	r3,zero,4009c90 <_dtoa_r+0x47c>
 4009c78:	d9000f17 	ldw	r4,60(sp)
 4009c7c:	d9401017 	ldw	r5,64(sp)
 4009c80:	000d883a 	mov	r6,zero
 4009c84:	01cffc34 	movhi	r7,16368
 4009c88:	40129540 	call	4012954 <__ledf2>
 4009c8c:	10040b16 	blt	r2,zero,400acbc <_dtoa_r+0x14a8>
 4009c90:	8009883a 	mov	r4,r16
 4009c94:	4013c300 	call	4013c30 <__floatsidf>
 4009c98:	d9800f17 	ldw	r6,60(sp)
 4009c9c:	d9c01017 	ldw	r7,64(sp)
 4009ca0:	1009883a 	mov	r4,r2
 4009ca4:	180b883a 	mov	r5,r3
 4009ca8:	4012a480 	call	4012a48 <__muldf3>
 4009cac:	000d883a 	mov	r6,zero
 4009cb0:	01d00734 	movhi	r7,16412
 4009cb4:	1009883a 	mov	r4,r2
 4009cb8:	180b883a 	mov	r5,r3
 4009cbc:	40115740 	call	4011574 <__adddf3>
 4009cc0:	1021883a 	mov	r16,r2
 4009cc4:	d8800617 	ldw	r2,24(sp)
 4009cc8:	047f3034 	movhi	r17,64704
 4009ccc:	1c63883a 	add	r17,r3,r17
 4009cd0:	10031826 	beq	r2,zero,400a934 <_dtoa_r+0x1120>
 4009cd4:	d8c00517 	ldw	r3,20(sp)
 4009cd8:	db000617 	ldw	r12,24(sp)
 4009cdc:	d8c01315 	stw	r3,76(sp)
 4009ce0:	d9000b17 	ldw	r4,44(sp)
 4009ce4:	20038f26 	beq	r4,zero,400ab24 <_dtoa_r+0x1310>
 4009ce8:	60bfffc4 	addi	r2,r12,-1
 4009cec:	100490fa 	slli	r2,r2,3
 4009cf0:	00c10074 	movhi	r3,1025
 4009cf4:	18dba204 	addi	r3,r3,28296
 4009cf8:	1885883a 	add	r2,r3,r2
 4009cfc:	11800017 	ldw	r6,0(r2)
 4009d00:	11c00117 	ldw	r7,4(r2)
 4009d04:	d8800717 	ldw	r2,28(sp)
 4009d08:	0009883a 	mov	r4,zero
 4009d0c:	014ff834 	movhi	r5,16352
 4009d10:	db001615 	stw	r12,88(sp)
 4009d14:	15c00044 	addi	r23,r2,1
 4009d18:	4011e200 	call	4011e20 <__divdf3>
 4009d1c:	800d883a 	mov	r6,r16
 4009d20:	880f883a 	mov	r7,r17
 4009d24:	1009883a 	mov	r4,r2
 4009d28:	180b883a 	mov	r5,r3
 4009d2c:	40132b40 	call	40132b4 <__subdf3>
 4009d30:	d9401017 	ldw	r5,64(sp)
 4009d34:	d9000f17 	ldw	r4,60(sp)
 4009d38:	102b883a 	mov	r21,r2
 4009d3c:	d8c01215 	stw	r3,72(sp)
 4009d40:	4013bb00 	call	4013bb0 <__fixdfsi>
 4009d44:	1009883a 	mov	r4,r2
 4009d48:	1029883a 	mov	r20,r2
 4009d4c:	4013c300 	call	4013c30 <__floatsidf>
 4009d50:	d9000f17 	ldw	r4,60(sp)
 4009d54:	d9401017 	ldw	r5,64(sp)
 4009d58:	100d883a 	mov	r6,r2
 4009d5c:	180f883a 	mov	r7,r3
 4009d60:	40132b40 	call	40132b4 <__subdf3>
 4009d64:	1823883a 	mov	r17,r3
 4009d68:	d8c00717 	ldw	r3,28(sp)
 4009d6c:	d9401217 	ldw	r5,72(sp)
 4009d70:	a2000c04 	addi	r8,r20,48
 4009d74:	1021883a 	mov	r16,r2
 4009d78:	1a000005 	stb	r8,0(r3)
 4009d7c:	800d883a 	mov	r6,r16
 4009d80:	880f883a 	mov	r7,r17
 4009d84:	a809883a 	mov	r4,r21
 4009d88:	4029883a 	mov	r20,r8
 4009d8c:	40128780 	call	4012878 <__gedf2>
 4009d90:	00841d16 	blt	zero,r2,400ae08 <_dtoa_r+0x15f4>
 4009d94:	800d883a 	mov	r6,r16
 4009d98:	880f883a 	mov	r7,r17
 4009d9c:	0009883a 	mov	r4,zero
 4009da0:	014ffc34 	movhi	r5,16368
 4009da4:	40132b40 	call	40132b4 <__subdf3>
 4009da8:	d9401217 	ldw	r5,72(sp)
 4009dac:	100d883a 	mov	r6,r2
 4009db0:	180f883a 	mov	r7,r3
 4009db4:	a809883a 	mov	r4,r21
 4009db8:	40128780 	call	4012878 <__gedf2>
 4009dbc:	db001617 	ldw	r12,88(sp)
 4009dc0:	00840e16 	blt	zero,r2,400adfc <_dtoa_r+0x15e8>
 4009dc4:	00800044 	movi	r2,1
 4009dc8:	13006b0e 	bge	r2,r12,4009f78 <_dtoa_r+0x764>
 4009dcc:	d9000717 	ldw	r4,28(sp)
 4009dd0:	dd800f15 	stw	r22,60(sp)
 4009dd4:	dcc01015 	stw	r19,64(sp)
 4009dd8:	2319883a 	add	r12,r4,r12
 4009ddc:	dcc01217 	ldw	r19,72(sp)
 4009de0:	602d883a 	mov	r22,r12
 4009de4:	dc801215 	stw	r18,72(sp)
 4009de8:	b825883a 	mov	r18,r23
 4009dec:	00000906 	br	4009e14 <_dtoa_r+0x600>
 4009df0:	40132b40 	call	40132b4 <__subdf3>
 4009df4:	a80d883a 	mov	r6,r21
 4009df8:	980f883a 	mov	r7,r19
 4009dfc:	1009883a 	mov	r4,r2
 4009e00:	180b883a 	mov	r5,r3
 4009e04:	40129540 	call	4012954 <__ledf2>
 4009e08:	1003e816 	blt	r2,zero,400adac <_dtoa_r+0x1598>
 4009e0c:	b825883a 	mov	r18,r23
 4009e10:	bd83e926 	beq	r23,r22,400adb8 <_dtoa_r+0x15a4>
 4009e14:	a809883a 	mov	r4,r21
 4009e18:	980b883a 	mov	r5,r19
 4009e1c:	000d883a 	mov	r6,zero
 4009e20:	01d00934 	movhi	r7,16420
 4009e24:	4012a480 	call	4012a48 <__muldf3>
 4009e28:	000d883a 	mov	r6,zero
 4009e2c:	01d00934 	movhi	r7,16420
 4009e30:	8009883a 	mov	r4,r16
 4009e34:	880b883a 	mov	r5,r17
 4009e38:	102b883a 	mov	r21,r2
 4009e3c:	1827883a 	mov	r19,r3
 4009e40:	4012a480 	call	4012a48 <__muldf3>
 4009e44:	180b883a 	mov	r5,r3
 4009e48:	1009883a 	mov	r4,r2
 4009e4c:	1821883a 	mov	r16,r3
 4009e50:	1023883a 	mov	r17,r2
 4009e54:	4013bb00 	call	4013bb0 <__fixdfsi>
 4009e58:	1009883a 	mov	r4,r2
 4009e5c:	1029883a 	mov	r20,r2
 4009e60:	4013c300 	call	4013c30 <__floatsidf>
 4009e64:	8809883a 	mov	r4,r17
 4009e68:	800b883a 	mov	r5,r16
 4009e6c:	100d883a 	mov	r6,r2
 4009e70:	180f883a 	mov	r7,r3
 4009e74:	40132b40 	call	40132b4 <__subdf3>
 4009e78:	a5000c04 	addi	r20,r20,48
 4009e7c:	a80d883a 	mov	r6,r21
 4009e80:	980f883a 	mov	r7,r19
 4009e84:	1009883a 	mov	r4,r2
 4009e88:	180b883a 	mov	r5,r3
 4009e8c:	95000005 	stb	r20,0(r18)
 4009e90:	1021883a 	mov	r16,r2
 4009e94:	1823883a 	mov	r17,r3
 4009e98:	40129540 	call	4012954 <__ledf2>
 4009e9c:	bdc00044 	addi	r23,r23,1
 4009ea0:	800d883a 	mov	r6,r16
 4009ea4:	880f883a 	mov	r7,r17
 4009ea8:	0009883a 	mov	r4,zero
 4009eac:	014ffc34 	movhi	r5,16368
 4009eb0:	103fcf0e 	bge	r2,zero,4009df0 <__alt_data_end+0xfc009df0>
 4009eb4:	d8c01317 	ldw	r3,76(sp)
 4009eb8:	d8c00515 	stw	r3,20(sp)
 4009ebc:	d9400917 	ldw	r5,36(sp)
 4009ec0:	e009883a 	mov	r4,fp
 4009ec4:	400cea80 	call	400cea8 <_Bfree>
 4009ec8:	d9000517 	ldw	r4,20(sp)
 4009ecc:	d9802317 	ldw	r6,140(sp)
 4009ed0:	d9c02517 	ldw	r7,148(sp)
 4009ed4:	b8000005 	stb	zero,0(r23)
 4009ed8:	20800044 	addi	r2,r4,1
 4009edc:	30800015 	stw	r2,0(r6)
 4009ee0:	3802aa26 	beq	r7,zero,400a98c <_dtoa_r+0x1178>
 4009ee4:	3dc00015 	stw	r23,0(r7)
 4009ee8:	d8800717 	ldw	r2,28(sp)
 4009eec:	003e7906 	br	40098d4 <__alt_data_end+0xfc0098d4>
 4009ef0:	00800434 	movhi	r2,16
 4009ef4:	10bfffc4 	addi	r2,r2,-1
 4009ef8:	88a2703a 	and	r17,r17,r2
 4009efc:	883e851e 	bne	r17,zero,4009914 <__alt_data_end+0xfc009914>
 4009f00:	00810074 	movhi	r2,1025
 4009f04:	109b8304 	addi	r2,r2,28172
 4009f08:	003e8406 	br	400991c <__alt_data_end+0xfc00991c>
 4009f0c:	10c00204 	addi	r3,r2,8
 4009f10:	003e8706 	br	4009930 <__alt_data_end+0xfc009930>
 4009f14:	01400434 	movhi	r5,16
 4009f18:	297fffc4 	addi	r5,r5,-1
 4009f1c:	994a703a 	and	r5,r19,r5
 4009f20:	9009883a 	mov	r4,r18
 4009f24:	843f0044 	addi	r16,r16,-1023
 4009f28:	294ffc34 	orhi	r5,r5,16368
 4009f2c:	dd800217 	ldw	r22,8(sp)
 4009f30:	d8001115 	stw	zero,68(sp)
 4009f34:	003ea506 	br	40099cc <__alt_data_end+0xfc0099cc>
 4009f38:	00810074 	movhi	r2,1025
 4009f3c:	109b7a04 	addi	r2,r2,28136
 4009f40:	003e6406 	br	40098d4 <__alt_data_end+0xfc0098d4>
 4009f44:	e0001115 	stw	zero,68(fp)
 4009f48:	000b883a 	mov	r5,zero
 4009f4c:	e009883a 	mov	r4,fp
 4009f50:	400ce000 	call	400ce00 <_Balloc>
 4009f54:	01bfffc4 	movi	r6,-1
 4009f58:	01c00044 	movi	r7,1
 4009f5c:	d8800715 	stw	r2,28(sp)
 4009f60:	d9800c15 	stw	r6,48(sp)
 4009f64:	e0801015 	stw	r2,64(fp)
 4009f68:	d8000315 	stw	zero,12(sp)
 4009f6c:	d9c00b15 	stw	r7,44(sp)
 4009f70:	d9800615 	stw	r6,24(sp)
 4009f74:	d8002215 	stw	zero,136(sp)
 4009f78:	d8800117 	ldw	r2,4(sp)
 4009f7c:	10008916 	blt	r2,zero,400a1a4 <_dtoa_r+0x990>
 4009f80:	d9000517 	ldw	r4,20(sp)
 4009f84:	00c00384 	movi	r3,14
 4009f88:	19008616 	blt	r3,r4,400a1a4 <_dtoa_r+0x990>
 4009f8c:	200490fa 	slli	r2,r4,3
 4009f90:	00c10074 	movhi	r3,1025
 4009f94:	d9802217 	ldw	r6,136(sp)
 4009f98:	18dba204 	addi	r3,r3,28296
 4009f9c:	1885883a 	add	r2,r3,r2
 4009fa0:	14000017 	ldw	r16,0(r2)
 4009fa4:	14400117 	ldw	r17,4(r2)
 4009fa8:	30016316 	blt	r6,zero,400a538 <_dtoa_r+0xd24>
 4009fac:	800d883a 	mov	r6,r16
 4009fb0:	880f883a 	mov	r7,r17
 4009fb4:	9009883a 	mov	r4,r18
 4009fb8:	980b883a 	mov	r5,r19
 4009fbc:	4011e200 	call	4011e20 <__divdf3>
 4009fc0:	180b883a 	mov	r5,r3
 4009fc4:	1009883a 	mov	r4,r2
 4009fc8:	4013bb00 	call	4013bb0 <__fixdfsi>
 4009fcc:	1009883a 	mov	r4,r2
 4009fd0:	102b883a 	mov	r21,r2
 4009fd4:	4013c300 	call	4013c30 <__floatsidf>
 4009fd8:	800d883a 	mov	r6,r16
 4009fdc:	880f883a 	mov	r7,r17
 4009fe0:	1009883a 	mov	r4,r2
 4009fe4:	180b883a 	mov	r5,r3
 4009fe8:	4012a480 	call	4012a48 <__muldf3>
 4009fec:	100d883a 	mov	r6,r2
 4009ff0:	180f883a 	mov	r7,r3
 4009ff4:	9009883a 	mov	r4,r18
 4009ff8:	980b883a 	mov	r5,r19
 4009ffc:	40132b40 	call	40132b4 <__subdf3>
 400a000:	d9c00717 	ldw	r7,28(sp)
 400a004:	1009883a 	mov	r4,r2
 400a008:	a8800c04 	addi	r2,r21,48
 400a00c:	38800005 	stb	r2,0(r7)
 400a010:	3dc00044 	addi	r23,r7,1
 400a014:	d9c00617 	ldw	r7,24(sp)
 400a018:	01800044 	movi	r6,1
 400a01c:	180b883a 	mov	r5,r3
 400a020:	2005883a 	mov	r2,r4
 400a024:	39803826 	beq	r7,r6,400a108 <_dtoa_r+0x8f4>
 400a028:	000d883a 	mov	r6,zero
 400a02c:	01d00934 	movhi	r7,16420
 400a030:	4012a480 	call	4012a48 <__muldf3>
 400a034:	000d883a 	mov	r6,zero
 400a038:	000f883a 	mov	r7,zero
 400a03c:	1009883a 	mov	r4,r2
 400a040:	180b883a 	mov	r5,r3
 400a044:	1025883a 	mov	r18,r2
 400a048:	1827883a 	mov	r19,r3
 400a04c:	40127f00 	call	40127f0 <__eqdf2>
 400a050:	103f9a26 	beq	r2,zero,4009ebc <__alt_data_end+0xfc009ebc>
 400a054:	d9c00617 	ldw	r7,24(sp)
 400a058:	d8c00717 	ldw	r3,28(sp)
 400a05c:	b829883a 	mov	r20,r23
 400a060:	38bfffc4 	addi	r2,r7,-1
 400a064:	18ad883a 	add	r22,r3,r2
 400a068:	00000a06 	br	400a094 <_dtoa_r+0x880>
 400a06c:	4012a480 	call	4012a48 <__muldf3>
 400a070:	000d883a 	mov	r6,zero
 400a074:	000f883a 	mov	r7,zero
 400a078:	1009883a 	mov	r4,r2
 400a07c:	180b883a 	mov	r5,r3
 400a080:	1025883a 	mov	r18,r2
 400a084:	1827883a 	mov	r19,r3
 400a088:	b829883a 	mov	r20,r23
 400a08c:	40127f00 	call	40127f0 <__eqdf2>
 400a090:	103f8a26 	beq	r2,zero,4009ebc <__alt_data_end+0xfc009ebc>
 400a094:	800d883a 	mov	r6,r16
 400a098:	880f883a 	mov	r7,r17
 400a09c:	9009883a 	mov	r4,r18
 400a0a0:	980b883a 	mov	r5,r19
 400a0a4:	4011e200 	call	4011e20 <__divdf3>
 400a0a8:	180b883a 	mov	r5,r3
 400a0ac:	1009883a 	mov	r4,r2
 400a0b0:	4013bb00 	call	4013bb0 <__fixdfsi>
 400a0b4:	1009883a 	mov	r4,r2
 400a0b8:	102b883a 	mov	r21,r2
 400a0bc:	4013c300 	call	4013c30 <__floatsidf>
 400a0c0:	800d883a 	mov	r6,r16
 400a0c4:	880f883a 	mov	r7,r17
 400a0c8:	1009883a 	mov	r4,r2
 400a0cc:	180b883a 	mov	r5,r3
 400a0d0:	4012a480 	call	4012a48 <__muldf3>
 400a0d4:	100d883a 	mov	r6,r2
 400a0d8:	180f883a 	mov	r7,r3
 400a0dc:	9009883a 	mov	r4,r18
 400a0e0:	980b883a 	mov	r5,r19
 400a0e4:	40132b40 	call	40132b4 <__subdf3>
 400a0e8:	aa000c04 	addi	r8,r21,48
 400a0ec:	a2000005 	stb	r8,0(r20)
 400a0f0:	000d883a 	mov	r6,zero
 400a0f4:	01d00934 	movhi	r7,16420
 400a0f8:	1009883a 	mov	r4,r2
 400a0fc:	180b883a 	mov	r5,r3
 400a100:	a5c00044 	addi	r23,r20,1
 400a104:	b53fd91e 	bne	r22,r20,400a06c <__alt_data_end+0xfc00a06c>
 400a108:	100d883a 	mov	r6,r2
 400a10c:	180f883a 	mov	r7,r3
 400a110:	1009883a 	mov	r4,r2
 400a114:	180b883a 	mov	r5,r3
 400a118:	40115740 	call	4011574 <__adddf3>
 400a11c:	100d883a 	mov	r6,r2
 400a120:	180f883a 	mov	r7,r3
 400a124:	8009883a 	mov	r4,r16
 400a128:	880b883a 	mov	r5,r17
 400a12c:	1027883a 	mov	r19,r2
 400a130:	1825883a 	mov	r18,r3
 400a134:	40129540 	call	4012954 <__ledf2>
 400a138:	10000816 	blt	r2,zero,400a15c <_dtoa_r+0x948>
 400a13c:	980d883a 	mov	r6,r19
 400a140:	900f883a 	mov	r7,r18
 400a144:	8009883a 	mov	r4,r16
 400a148:	880b883a 	mov	r5,r17
 400a14c:	40127f00 	call	40127f0 <__eqdf2>
 400a150:	103f5a1e 	bne	r2,zero,4009ebc <__alt_data_end+0xfc009ebc>
 400a154:	ad40004c 	andi	r21,r21,1
 400a158:	a83f5826 	beq	r21,zero,4009ebc <__alt_data_end+0xfc009ebc>
 400a15c:	bd3fffc3 	ldbu	r20,-1(r23)
 400a160:	b8bfffc4 	addi	r2,r23,-1
 400a164:	1007883a 	mov	r3,r2
 400a168:	01400e44 	movi	r5,57
 400a16c:	d9800717 	ldw	r6,28(sp)
 400a170:	00000506 	br	400a188 <_dtoa_r+0x974>
 400a174:	18ffffc4 	addi	r3,r3,-1
 400a178:	11824726 	beq	r2,r6,400aa98 <_dtoa_r+0x1284>
 400a17c:	1d000003 	ldbu	r20,0(r3)
 400a180:	102f883a 	mov	r23,r2
 400a184:	10bfffc4 	addi	r2,r2,-1
 400a188:	a1003fcc 	andi	r4,r20,255
 400a18c:	2100201c 	xori	r4,r4,128
 400a190:	213fe004 	addi	r4,r4,-128
 400a194:	217ff726 	beq	r4,r5,400a174 <__alt_data_end+0xfc00a174>
 400a198:	a2000044 	addi	r8,r20,1
 400a19c:	12000005 	stb	r8,0(r2)
 400a1a0:	003f4606 	br	4009ebc <__alt_data_end+0xfc009ebc>
 400a1a4:	d9000b17 	ldw	r4,44(sp)
 400a1a8:	2000c826 	beq	r4,zero,400a4cc <_dtoa_r+0xcb8>
 400a1ac:	d9800317 	ldw	r6,12(sp)
 400a1b0:	00c00044 	movi	r3,1
 400a1b4:	1980f90e 	bge	r3,r6,400a59c <_dtoa_r+0xd88>
 400a1b8:	d8800617 	ldw	r2,24(sp)
 400a1bc:	d8c00a17 	ldw	r3,40(sp)
 400a1c0:	157fffc4 	addi	r21,r2,-1
 400a1c4:	1d41f316 	blt	r3,r21,400a994 <_dtoa_r+0x1180>
 400a1c8:	1d6bc83a 	sub	r21,r3,r21
 400a1cc:	d9c00617 	ldw	r7,24(sp)
 400a1d0:	3802aa16 	blt	r7,zero,400ac7c <_dtoa_r+0x1468>
 400a1d4:	dd000817 	ldw	r20,32(sp)
 400a1d8:	d8800617 	ldw	r2,24(sp)
 400a1dc:	d8c00817 	ldw	r3,32(sp)
 400a1e0:	01400044 	movi	r5,1
 400a1e4:	e009883a 	mov	r4,fp
 400a1e8:	1887883a 	add	r3,r3,r2
 400a1ec:	d8c00815 	stw	r3,32(sp)
 400a1f0:	b0ad883a 	add	r22,r22,r2
 400a1f4:	400d2340 	call	400d234 <__i2b>
 400a1f8:	1023883a 	mov	r17,r2
 400a1fc:	a0000826 	beq	r20,zero,400a220 <_dtoa_r+0xa0c>
 400a200:	0580070e 	bge	zero,r22,400a220 <_dtoa_r+0xa0c>
 400a204:	a005883a 	mov	r2,r20
 400a208:	b500b916 	blt	r22,r20,400a4f0 <_dtoa_r+0xcdc>
 400a20c:	d9000817 	ldw	r4,32(sp)
 400a210:	a0a9c83a 	sub	r20,r20,r2
 400a214:	b0adc83a 	sub	r22,r22,r2
 400a218:	2089c83a 	sub	r4,r4,r2
 400a21c:	d9000815 	stw	r4,32(sp)
 400a220:	d9800a17 	ldw	r6,40(sp)
 400a224:	0181810e 	bge	zero,r6,400a82c <_dtoa_r+0x1018>
 400a228:	d9c00b17 	ldw	r7,44(sp)
 400a22c:	3800b326 	beq	r7,zero,400a4fc <_dtoa_r+0xce8>
 400a230:	a800b226 	beq	r21,zero,400a4fc <_dtoa_r+0xce8>
 400a234:	880b883a 	mov	r5,r17
 400a238:	a80d883a 	mov	r6,r21
 400a23c:	e009883a 	mov	r4,fp
 400a240:	400d4fc0 	call	400d4fc <__pow5mult>
 400a244:	d9800917 	ldw	r6,36(sp)
 400a248:	100b883a 	mov	r5,r2
 400a24c:	e009883a 	mov	r4,fp
 400a250:	1023883a 	mov	r17,r2
 400a254:	400d2700 	call	400d270 <__multiply>
 400a258:	1021883a 	mov	r16,r2
 400a25c:	d8800a17 	ldw	r2,40(sp)
 400a260:	d9400917 	ldw	r5,36(sp)
 400a264:	e009883a 	mov	r4,fp
 400a268:	1545c83a 	sub	r2,r2,r21
 400a26c:	d8800a15 	stw	r2,40(sp)
 400a270:	400cea80 	call	400cea8 <_Bfree>
 400a274:	d8c00a17 	ldw	r3,40(sp)
 400a278:	18009f1e 	bne	r3,zero,400a4f8 <_dtoa_r+0xce4>
 400a27c:	05c00044 	movi	r23,1
 400a280:	e009883a 	mov	r4,fp
 400a284:	b80b883a 	mov	r5,r23
 400a288:	400d2340 	call	400d234 <__i2b>
 400a28c:	d9000d17 	ldw	r4,52(sp)
 400a290:	102b883a 	mov	r21,r2
 400a294:	2000ce26 	beq	r4,zero,400a5d0 <_dtoa_r+0xdbc>
 400a298:	200d883a 	mov	r6,r4
 400a29c:	100b883a 	mov	r5,r2
 400a2a0:	e009883a 	mov	r4,fp
 400a2a4:	400d4fc0 	call	400d4fc <__pow5mult>
 400a2a8:	d9800317 	ldw	r6,12(sp)
 400a2ac:	102b883a 	mov	r21,r2
 400a2b0:	b981810e 	bge	r23,r6,400a8b8 <_dtoa_r+0x10a4>
 400a2b4:	0027883a 	mov	r19,zero
 400a2b8:	a8800417 	ldw	r2,16(r21)
 400a2bc:	05c00804 	movi	r23,32
 400a2c0:	10800104 	addi	r2,r2,4
 400a2c4:	1085883a 	add	r2,r2,r2
 400a2c8:	1085883a 	add	r2,r2,r2
 400a2cc:	a885883a 	add	r2,r21,r2
 400a2d0:	11000017 	ldw	r4,0(r2)
 400a2d4:	400d11c0 	call	400d11c <__hi0bits>
 400a2d8:	b885c83a 	sub	r2,r23,r2
 400a2dc:	1585883a 	add	r2,r2,r22
 400a2e0:	108007cc 	andi	r2,r2,31
 400a2e4:	1000b326 	beq	r2,zero,400a5b4 <_dtoa_r+0xda0>
 400a2e8:	00c00804 	movi	r3,32
 400a2ec:	1887c83a 	sub	r3,r3,r2
 400a2f0:	01000104 	movi	r4,4
 400a2f4:	20c2cd0e 	bge	r4,r3,400ae2c <_dtoa_r+0x1618>
 400a2f8:	00c00704 	movi	r3,28
 400a2fc:	1885c83a 	sub	r2,r3,r2
 400a300:	d8c00817 	ldw	r3,32(sp)
 400a304:	a0a9883a 	add	r20,r20,r2
 400a308:	b0ad883a 	add	r22,r22,r2
 400a30c:	1887883a 	add	r3,r3,r2
 400a310:	d8c00815 	stw	r3,32(sp)
 400a314:	d9800817 	ldw	r6,32(sp)
 400a318:	0180040e 	bge	zero,r6,400a32c <_dtoa_r+0xb18>
 400a31c:	800b883a 	mov	r5,r16
 400a320:	e009883a 	mov	r4,fp
 400a324:	400d63c0 	call	400d63c <__lshift>
 400a328:	1021883a 	mov	r16,r2
 400a32c:	0580050e 	bge	zero,r22,400a344 <_dtoa_r+0xb30>
 400a330:	a80b883a 	mov	r5,r21
 400a334:	b00d883a 	mov	r6,r22
 400a338:	e009883a 	mov	r4,fp
 400a33c:	400d63c0 	call	400d63c <__lshift>
 400a340:	102b883a 	mov	r21,r2
 400a344:	d9c00e17 	ldw	r7,56(sp)
 400a348:	3801211e 	bne	r7,zero,400a7d0 <_dtoa_r+0xfbc>
 400a34c:	d9800617 	ldw	r6,24(sp)
 400a350:	0181380e 	bge	zero,r6,400a834 <_dtoa_r+0x1020>
 400a354:	d8c00b17 	ldw	r3,44(sp)
 400a358:	1800ab1e 	bne	r3,zero,400a608 <_dtoa_r+0xdf4>
 400a35c:	dc800717 	ldw	r18,28(sp)
 400a360:	dcc00617 	ldw	r19,24(sp)
 400a364:	9029883a 	mov	r20,r18
 400a368:	00000206 	br	400a374 <_dtoa_r+0xb60>
 400a36c:	400ced00 	call	400ced0 <__multadd>
 400a370:	1021883a 	mov	r16,r2
 400a374:	a80b883a 	mov	r5,r21
 400a378:	8009883a 	mov	r4,r16
 400a37c:	40095ec0 	call	40095ec <quorem>
 400a380:	10800c04 	addi	r2,r2,48
 400a384:	90800005 	stb	r2,0(r18)
 400a388:	94800044 	addi	r18,r18,1
 400a38c:	9507c83a 	sub	r3,r18,r20
 400a390:	000f883a 	mov	r7,zero
 400a394:	01800284 	movi	r6,10
 400a398:	800b883a 	mov	r5,r16
 400a39c:	e009883a 	mov	r4,fp
 400a3a0:	1cfff216 	blt	r3,r19,400a36c <__alt_data_end+0xfc00a36c>
 400a3a4:	1011883a 	mov	r8,r2
 400a3a8:	d8800617 	ldw	r2,24(sp)
 400a3ac:	0082370e 	bge	zero,r2,400ac8c <_dtoa_r+0x1478>
 400a3b0:	d9000717 	ldw	r4,28(sp)
 400a3b4:	0025883a 	mov	r18,zero
 400a3b8:	20af883a 	add	r23,r4,r2
 400a3bc:	01800044 	movi	r6,1
 400a3c0:	800b883a 	mov	r5,r16
 400a3c4:	e009883a 	mov	r4,fp
 400a3c8:	da001715 	stw	r8,92(sp)
 400a3cc:	400d63c0 	call	400d63c <__lshift>
 400a3d0:	a80b883a 	mov	r5,r21
 400a3d4:	1009883a 	mov	r4,r2
 400a3d8:	d8800915 	stw	r2,36(sp)
 400a3dc:	400d7840 	call	400d784 <__mcmp>
 400a3e0:	da001717 	ldw	r8,92(sp)
 400a3e4:	0081800e 	bge	zero,r2,400a9e8 <_dtoa_r+0x11d4>
 400a3e8:	b93fffc3 	ldbu	r4,-1(r23)
 400a3ec:	b8bfffc4 	addi	r2,r23,-1
 400a3f0:	1007883a 	mov	r3,r2
 400a3f4:	01800e44 	movi	r6,57
 400a3f8:	d9c00717 	ldw	r7,28(sp)
 400a3fc:	00000506 	br	400a414 <_dtoa_r+0xc00>
 400a400:	18ffffc4 	addi	r3,r3,-1
 400a404:	11c12326 	beq	r2,r7,400a894 <_dtoa_r+0x1080>
 400a408:	19000003 	ldbu	r4,0(r3)
 400a40c:	102f883a 	mov	r23,r2
 400a410:	10bfffc4 	addi	r2,r2,-1
 400a414:	21403fcc 	andi	r5,r4,255
 400a418:	2940201c 	xori	r5,r5,128
 400a41c:	297fe004 	addi	r5,r5,-128
 400a420:	29bff726 	beq	r5,r6,400a400 <__alt_data_end+0xfc00a400>
 400a424:	21000044 	addi	r4,r4,1
 400a428:	11000005 	stb	r4,0(r2)
 400a42c:	a80b883a 	mov	r5,r21
 400a430:	e009883a 	mov	r4,fp
 400a434:	400cea80 	call	400cea8 <_Bfree>
 400a438:	883ea026 	beq	r17,zero,4009ebc <__alt_data_end+0xfc009ebc>
 400a43c:	90000426 	beq	r18,zero,400a450 <_dtoa_r+0xc3c>
 400a440:	94400326 	beq	r18,r17,400a450 <_dtoa_r+0xc3c>
 400a444:	900b883a 	mov	r5,r18
 400a448:	e009883a 	mov	r4,fp
 400a44c:	400cea80 	call	400cea8 <_Bfree>
 400a450:	880b883a 	mov	r5,r17
 400a454:	e009883a 	mov	r4,fp
 400a458:	400cea80 	call	400cea8 <_Bfree>
 400a45c:	003e9706 	br	4009ebc <__alt_data_end+0xfc009ebc>
 400a460:	01800044 	movi	r6,1
 400a464:	d9800e15 	stw	r6,56(sp)
 400a468:	003d9606 	br	4009ac4 <__alt_data_end+0xfc009ac4>
 400a46c:	d8800817 	ldw	r2,32(sp)
 400a470:	d8c00517 	ldw	r3,20(sp)
 400a474:	d8000d15 	stw	zero,52(sp)
 400a478:	10c5c83a 	sub	r2,r2,r3
 400a47c:	00c9c83a 	sub	r4,zero,r3
 400a480:	d8800815 	stw	r2,32(sp)
 400a484:	d9000a15 	stw	r4,40(sp)
 400a488:	003d9706 	br	4009ae8 <__alt_data_end+0xfc009ae8>
 400a48c:	05adc83a 	sub	r22,zero,r22
 400a490:	dd800815 	stw	r22,32(sp)
 400a494:	002d883a 	mov	r22,zero
 400a498:	003d8e06 	br	4009ad4 <__alt_data_end+0xfc009ad4>
 400a49c:	d9000517 	ldw	r4,20(sp)
 400a4a0:	4013c300 	call	4013c30 <__floatsidf>
 400a4a4:	100d883a 	mov	r6,r2
 400a4a8:	180f883a 	mov	r7,r3
 400a4ac:	a009883a 	mov	r4,r20
 400a4b0:	880b883a 	mov	r5,r17
 400a4b4:	40127f00 	call	40127f0 <__eqdf2>
 400a4b8:	103d7126 	beq	r2,zero,4009a80 <__alt_data_end+0xfc009a80>
 400a4bc:	d9c00517 	ldw	r7,20(sp)
 400a4c0:	39ffffc4 	addi	r7,r7,-1
 400a4c4:	d9c00515 	stw	r7,20(sp)
 400a4c8:	003d6d06 	br	4009a80 <__alt_data_end+0xfc009a80>
 400a4cc:	dd400a17 	ldw	r21,40(sp)
 400a4d0:	dd000817 	ldw	r20,32(sp)
 400a4d4:	0023883a 	mov	r17,zero
 400a4d8:	003f4806 	br	400a1fc <__alt_data_end+0xfc00a1fc>
 400a4dc:	10e3c83a 	sub	r17,r2,r3
 400a4e0:	9448983a 	sll	r4,r18,r17
 400a4e4:	003d3206 	br	40099b0 <__alt_data_end+0xfc0099b0>
 400a4e8:	d8000e15 	stw	zero,56(sp)
 400a4ec:	003d7506 	br	4009ac4 <__alt_data_end+0xfc009ac4>
 400a4f0:	b005883a 	mov	r2,r22
 400a4f4:	003f4506 	br	400a20c <__alt_data_end+0xfc00a20c>
 400a4f8:	dc000915 	stw	r16,36(sp)
 400a4fc:	d9800a17 	ldw	r6,40(sp)
 400a500:	d9400917 	ldw	r5,36(sp)
 400a504:	e009883a 	mov	r4,fp
 400a508:	400d4fc0 	call	400d4fc <__pow5mult>
 400a50c:	1021883a 	mov	r16,r2
 400a510:	003f5a06 	br	400a27c <__alt_data_end+0xfc00a27c>
 400a514:	01c00044 	movi	r7,1
 400a518:	d9c00b15 	stw	r7,44(sp)
 400a51c:	d8802217 	ldw	r2,136(sp)
 400a520:	0081280e 	bge	zero,r2,400a9c4 <_dtoa_r+0x11b0>
 400a524:	100d883a 	mov	r6,r2
 400a528:	1021883a 	mov	r16,r2
 400a52c:	d8800c15 	stw	r2,48(sp)
 400a530:	d8800615 	stw	r2,24(sp)
 400a534:	003d8806 	br	4009b58 <__alt_data_end+0xfc009b58>
 400a538:	d8800617 	ldw	r2,24(sp)
 400a53c:	00be9b16 	blt	zero,r2,4009fac <__alt_data_end+0xfc009fac>
 400a540:	10010f1e 	bne	r2,zero,400a980 <_dtoa_r+0x116c>
 400a544:	880b883a 	mov	r5,r17
 400a548:	000d883a 	mov	r6,zero
 400a54c:	01d00534 	movhi	r7,16404
 400a550:	8009883a 	mov	r4,r16
 400a554:	4012a480 	call	4012a48 <__muldf3>
 400a558:	900d883a 	mov	r6,r18
 400a55c:	980f883a 	mov	r7,r19
 400a560:	1009883a 	mov	r4,r2
 400a564:	180b883a 	mov	r5,r3
 400a568:	40128780 	call	4012878 <__gedf2>
 400a56c:	002b883a 	mov	r21,zero
 400a570:	0023883a 	mov	r17,zero
 400a574:	1000bf16 	blt	r2,zero,400a874 <_dtoa_r+0x1060>
 400a578:	d9802217 	ldw	r6,136(sp)
 400a57c:	ddc00717 	ldw	r23,28(sp)
 400a580:	018c303a 	nor	r6,zero,r6
 400a584:	d9800515 	stw	r6,20(sp)
 400a588:	a80b883a 	mov	r5,r21
 400a58c:	e009883a 	mov	r4,fp
 400a590:	400cea80 	call	400cea8 <_Bfree>
 400a594:	883e4926 	beq	r17,zero,4009ebc <__alt_data_end+0xfc009ebc>
 400a598:	003fad06 	br	400a450 <__alt_data_end+0xfc00a450>
 400a59c:	d9c01117 	ldw	r7,68(sp)
 400a5a0:	3801bc26 	beq	r7,zero,400ac94 <_dtoa_r+0x1480>
 400a5a4:	10810cc4 	addi	r2,r2,1075
 400a5a8:	dd400a17 	ldw	r21,40(sp)
 400a5ac:	dd000817 	ldw	r20,32(sp)
 400a5b0:	003f0a06 	br	400a1dc <__alt_data_end+0xfc00a1dc>
 400a5b4:	00800704 	movi	r2,28
 400a5b8:	d9000817 	ldw	r4,32(sp)
 400a5bc:	a0a9883a 	add	r20,r20,r2
 400a5c0:	b0ad883a 	add	r22,r22,r2
 400a5c4:	2089883a 	add	r4,r4,r2
 400a5c8:	d9000815 	stw	r4,32(sp)
 400a5cc:	003f5106 	br	400a314 <__alt_data_end+0xfc00a314>
 400a5d0:	d8c00317 	ldw	r3,12(sp)
 400a5d4:	b8c1fc0e 	bge	r23,r3,400adc8 <_dtoa_r+0x15b4>
 400a5d8:	0027883a 	mov	r19,zero
 400a5dc:	b805883a 	mov	r2,r23
 400a5e0:	003f3e06 	br	400a2dc <__alt_data_end+0xfc00a2dc>
 400a5e4:	880b883a 	mov	r5,r17
 400a5e8:	e009883a 	mov	r4,fp
 400a5ec:	000f883a 	mov	r7,zero
 400a5f0:	01800284 	movi	r6,10
 400a5f4:	400ced00 	call	400ced0 <__multadd>
 400a5f8:	d9000c17 	ldw	r4,48(sp)
 400a5fc:	1023883a 	mov	r17,r2
 400a600:	0102040e 	bge	zero,r4,400ae14 <_dtoa_r+0x1600>
 400a604:	d9000615 	stw	r4,24(sp)
 400a608:	0500050e 	bge	zero,r20,400a620 <_dtoa_r+0xe0c>
 400a60c:	880b883a 	mov	r5,r17
 400a610:	a00d883a 	mov	r6,r20
 400a614:	e009883a 	mov	r4,fp
 400a618:	400d63c0 	call	400d63c <__lshift>
 400a61c:	1023883a 	mov	r17,r2
 400a620:	9801241e 	bne	r19,zero,400aab4 <_dtoa_r+0x12a0>
 400a624:	8829883a 	mov	r20,r17
 400a628:	d9000617 	ldw	r4,24(sp)
 400a62c:	dcc00717 	ldw	r19,28(sp)
 400a630:	9480004c 	andi	r18,r18,1
 400a634:	20bfffc4 	addi	r2,r4,-1
 400a638:	9885883a 	add	r2,r19,r2
 400a63c:	d8800415 	stw	r2,16(sp)
 400a640:	dc800615 	stw	r18,24(sp)
 400a644:	a80b883a 	mov	r5,r21
 400a648:	8009883a 	mov	r4,r16
 400a64c:	40095ec0 	call	40095ec <quorem>
 400a650:	880b883a 	mov	r5,r17
 400a654:	8009883a 	mov	r4,r16
 400a658:	102f883a 	mov	r23,r2
 400a65c:	400d7840 	call	400d784 <__mcmp>
 400a660:	a80b883a 	mov	r5,r21
 400a664:	a00d883a 	mov	r6,r20
 400a668:	e009883a 	mov	r4,fp
 400a66c:	102d883a 	mov	r22,r2
 400a670:	400d7e40 	call	400d7e4 <__mdiff>
 400a674:	1007883a 	mov	r3,r2
 400a678:	10800317 	ldw	r2,12(r2)
 400a67c:	bc800c04 	addi	r18,r23,48
 400a680:	180b883a 	mov	r5,r3
 400a684:	10004e1e 	bne	r2,zero,400a7c0 <_dtoa_r+0xfac>
 400a688:	8009883a 	mov	r4,r16
 400a68c:	d8c01615 	stw	r3,88(sp)
 400a690:	400d7840 	call	400d784 <__mcmp>
 400a694:	d8c01617 	ldw	r3,88(sp)
 400a698:	e009883a 	mov	r4,fp
 400a69c:	d8801615 	stw	r2,88(sp)
 400a6a0:	180b883a 	mov	r5,r3
 400a6a4:	400cea80 	call	400cea8 <_Bfree>
 400a6a8:	d8801617 	ldw	r2,88(sp)
 400a6ac:	1000041e 	bne	r2,zero,400a6c0 <_dtoa_r+0xeac>
 400a6b0:	d9800317 	ldw	r6,12(sp)
 400a6b4:	3000021e 	bne	r6,zero,400a6c0 <_dtoa_r+0xeac>
 400a6b8:	d8c00617 	ldw	r3,24(sp)
 400a6bc:	18003726 	beq	r3,zero,400a79c <_dtoa_r+0xf88>
 400a6c0:	b0002016 	blt	r22,zero,400a744 <_dtoa_r+0xf30>
 400a6c4:	b000041e 	bne	r22,zero,400a6d8 <_dtoa_r+0xec4>
 400a6c8:	d9000317 	ldw	r4,12(sp)
 400a6cc:	2000021e 	bne	r4,zero,400a6d8 <_dtoa_r+0xec4>
 400a6d0:	d8c00617 	ldw	r3,24(sp)
 400a6d4:	18001b26 	beq	r3,zero,400a744 <_dtoa_r+0xf30>
 400a6d8:	00810716 	blt	zero,r2,400aaf8 <_dtoa_r+0x12e4>
 400a6dc:	d8c00417 	ldw	r3,16(sp)
 400a6e0:	9d800044 	addi	r22,r19,1
 400a6e4:	9c800005 	stb	r18,0(r19)
 400a6e8:	b02f883a 	mov	r23,r22
 400a6ec:	98c10626 	beq	r19,r3,400ab08 <_dtoa_r+0x12f4>
 400a6f0:	800b883a 	mov	r5,r16
 400a6f4:	000f883a 	mov	r7,zero
 400a6f8:	01800284 	movi	r6,10
 400a6fc:	e009883a 	mov	r4,fp
 400a700:	400ced00 	call	400ced0 <__multadd>
 400a704:	1021883a 	mov	r16,r2
 400a708:	000f883a 	mov	r7,zero
 400a70c:	01800284 	movi	r6,10
 400a710:	880b883a 	mov	r5,r17
 400a714:	e009883a 	mov	r4,fp
 400a718:	8d002526 	beq	r17,r20,400a7b0 <_dtoa_r+0xf9c>
 400a71c:	400ced00 	call	400ced0 <__multadd>
 400a720:	a00b883a 	mov	r5,r20
 400a724:	000f883a 	mov	r7,zero
 400a728:	01800284 	movi	r6,10
 400a72c:	e009883a 	mov	r4,fp
 400a730:	1023883a 	mov	r17,r2
 400a734:	400ced00 	call	400ced0 <__multadd>
 400a738:	1029883a 	mov	r20,r2
 400a73c:	b027883a 	mov	r19,r22
 400a740:	003fc006 	br	400a644 <__alt_data_end+0xfc00a644>
 400a744:	9011883a 	mov	r8,r18
 400a748:	00800e0e 	bge	zero,r2,400a784 <_dtoa_r+0xf70>
 400a74c:	800b883a 	mov	r5,r16
 400a750:	01800044 	movi	r6,1
 400a754:	e009883a 	mov	r4,fp
 400a758:	da001715 	stw	r8,92(sp)
 400a75c:	400d63c0 	call	400d63c <__lshift>
 400a760:	a80b883a 	mov	r5,r21
 400a764:	1009883a 	mov	r4,r2
 400a768:	1021883a 	mov	r16,r2
 400a76c:	400d7840 	call	400d784 <__mcmp>
 400a770:	da001717 	ldw	r8,92(sp)
 400a774:	0081960e 	bge	zero,r2,400add0 <_dtoa_r+0x15bc>
 400a778:	00800e44 	movi	r2,57
 400a77c:	40817026 	beq	r8,r2,400ad40 <_dtoa_r+0x152c>
 400a780:	ba000c44 	addi	r8,r23,49
 400a784:	8825883a 	mov	r18,r17
 400a788:	9dc00044 	addi	r23,r19,1
 400a78c:	9a000005 	stb	r8,0(r19)
 400a790:	a023883a 	mov	r17,r20
 400a794:	dc000915 	stw	r16,36(sp)
 400a798:	003f2406 	br	400a42c <__alt_data_end+0xfc00a42c>
 400a79c:	00800e44 	movi	r2,57
 400a7a0:	9011883a 	mov	r8,r18
 400a7a4:	90816626 	beq	r18,r2,400ad40 <_dtoa_r+0x152c>
 400a7a8:	05bff516 	blt	zero,r22,400a780 <__alt_data_end+0xfc00a780>
 400a7ac:	003ff506 	br	400a784 <__alt_data_end+0xfc00a784>
 400a7b0:	400ced00 	call	400ced0 <__multadd>
 400a7b4:	1023883a 	mov	r17,r2
 400a7b8:	1029883a 	mov	r20,r2
 400a7bc:	003fdf06 	br	400a73c <__alt_data_end+0xfc00a73c>
 400a7c0:	e009883a 	mov	r4,fp
 400a7c4:	400cea80 	call	400cea8 <_Bfree>
 400a7c8:	00800044 	movi	r2,1
 400a7cc:	003fbc06 	br	400a6c0 <__alt_data_end+0xfc00a6c0>
 400a7d0:	a80b883a 	mov	r5,r21
 400a7d4:	8009883a 	mov	r4,r16
 400a7d8:	400d7840 	call	400d784 <__mcmp>
 400a7dc:	103edb0e 	bge	r2,zero,400a34c <__alt_data_end+0xfc00a34c>
 400a7e0:	800b883a 	mov	r5,r16
 400a7e4:	000f883a 	mov	r7,zero
 400a7e8:	01800284 	movi	r6,10
 400a7ec:	e009883a 	mov	r4,fp
 400a7f0:	400ced00 	call	400ced0 <__multadd>
 400a7f4:	1021883a 	mov	r16,r2
 400a7f8:	d8800517 	ldw	r2,20(sp)
 400a7fc:	d8c00b17 	ldw	r3,44(sp)
 400a800:	10bfffc4 	addi	r2,r2,-1
 400a804:	d8800515 	stw	r2,20(sp)
 400a808:	183f761e 	bne	r3,zero,400a5e4 <__alt_data_end+0xfc00a5e4>
 400a80c:	d9000c17 	ldw	r4,48(sp)
 400a810:	0101730e 	bge	zero,r4,400ade0 <_dtoa_r+0x15cc>
 400a814:	d9000615 	stw	r4,24(sp)
 400a818:	003ed006 	br	400a35c <__alt_data_end+0xfc00a35c>
 400a81c:	00800084 	movi	r2,2
 400a820:	3081861e 	bne	r6,r2,400ae3c <_dtoa_r+0x1628>
 400a824:	d8000b15 	stw	zero,44(sp)
 400a828:	003f3c06 	br	400a51c <__alt_data_end+0xfc00a51c>
 400a82c:	dc000917 	ldw	r16,36(sp)
 400a830:	003e9206 	br	400a27c <__alt_data_end+0xfc00a27c>
 400a834:	d9c00317 	ldw	r7,12(sp)
 400a838:	00800084 	movi	r2,2
 400a83c:	11fec50e 	bge	r2,r7,400a354 <__alt_data_end+0xfc00a354>
 400a840:	d9000617 	ldw	r4,24(sp)
 400a844:	20013c1e 	bne	r4,zero,400ad38 <_dtoa_r+0x1524>
 400a848:	a80b883a 	mov	r5,r21
 400a84c:	000f883a 	mov	r7,zero
 400a850:	01800144 	movi	r6,5
 400a854:	e009883a 	mov	r4,fp
 400a858:	400ced00 	call	400ced0 <__multadd>
 400a85c:	100b883a 	mov	r5,r2
 400a860:	8009883a 	mov	r4,r16
 400a864:	102b883a 	mov	r21,r2
 400a868:	400d7840 	call	400d784 <__mcmp>
 400a86c:	dc000915 	stw	r16,36(sp)
 400a870:	00bf410e 	bge	zero,r2,400a578 <__alt_data_end+0xfc00a578>
 400a874:	d9c00717 	ldw	r7,28(sp)
 400a878:	00800c44 	movi	r2,49
 400a87c:	38800005 	stb	r2,0(r7)
 400a880:	d8800517 	ldw	r2,20(sp)
 400a884:	3dc00044 	addi	r23,r7,1
 400a888:	10800044 	addi	r2,r2,1
 400a88c:	d8800515 	stw	r2,20(sp)
 400a890:	003f3d06 	br	400a588 <__alt_data_end+0xfc00a588>
 400a894:	d9800517 	ldw	r6,20(sp)
 400a898:	d9c00717 	ldw	r7,28(sp)
 400a89c:	00800c44 	movi	r2,49
 400a8a0:	31800044 	addi	r6,r6,1
 400a8a4:	d9800515 	stw	r6,20(sp)
 400a8a8:	38800005 	stb	r2,0(r7)
 400a8ac:	003edf06 	br	400a42c <__alt_data_end+0xfc00a42c>
 400a8b0:	d8000b15 	stw	zero,44(sp)
 400a8b4:	003c9f06 	br	4009b34 <__alt_data_end+0xfc009b34>
 400a8b8:	903e7e1e 	bne	r18,zero,400a2b4 <__alt_data_end+0xfc00a2b4>
 400a8bc:	00800434 	movhi	r2,16
 400a8c0:	10bfffc4 	addi	r2,r2,-1
 400a8c4:	9884703a 	and	r2,r19,r2
 400a8c8:	1000ea1e 	bne	r2,zero,400ac74 <_dtoa_r+0x1460>
 400a8cc:	9cdffc2c 	andhi	r19,r19,32752
 400a8d0:	9800e826 	beq	r19,zero,400ac74 <_dtoa_r+0x1460>
 400a8d4:	d9c00817 	ldw	r7,32(sp)
 400a8d8:	b5800044 	addi	r22,r22,1
 400a8dc:	04c00044 	movi	r19,1
 400a8e0:	39c00044 	addi	r7,r7,1
 400a8e4:	d9c00815 	stw	r7,32(sp)
 400a8e8:	d8800d17 	ldw	r2,52(sp)
 400a8ec:	103e721e 	bne	r2,zero,400a2b8 <__alt_data_end+0xfc00a2b8>
 400a8f0:	00800044 	movi	r2,1
 400a8f4:	003e7906 	br	400a2dc <__alt_data_end+0xfc00a2dc>
 400a8f8:	8009883a 	mov	r4,r16
 400a8fc:	4013c300 	call	4013c30 <__floatsidf>
 400a900:	d9800f17 	ldw	r6,60(sp)
 400a904:	d9c01017 	ldw	r7,64(sp)
 400a908:	1009883a 	mov	r4,r2
 400a90c:	180b883a 	mov	r5,r3
 400a910:	4012a480 	call	4012a48 <__muldf3>
 400a914:	000d883a 	mov	r6,zero
 400a918:	01d00734 	movhi	r7,16412
 400a91c:	1009883a 	mov	r4,r2
 400a920:	180b883a 	mov	r5,r3
 400a924:	40115740 	call	4011574 <__adddf3>
 400a928:	047f3034 	movhi	r17,64704
 400a92c:	1021883a 	mov	r16,r2
 400a930:	1c63883a 	add	r17,r3,r17
 400a934:	d9000f17 	ldw	r4,60(sp)
 400a938:	d9401017 	ldw	r5,64(sp)
 400a93c:	000d883a 	mov	r6,zero
 400a940:	01d00534 	movhi	r7,16404
 400a944:	40132b40 	call	40132b4 <__subdf3>
 400a948:	800d883a 	mov	r6,r16
 400a94c:	880f883a 	mov	r7,r17
 400a950:	1009883a 	mov	r4,r2
 400a954:	180b883a 	mov	r5,r3
 400a958:	102b883a 	mov	r21,r2
 400a95c:	1829883a 	mov	r20,r3
 400a960:	40128780 	call	4012878 <__gedf2>
 400a964:	00806c16 	blt	zero,r2,400ab18 <_dtoa_r+0x1304>
 400a968:	89e0003c 	xorhi	r7,r17,32768
 400a96c:	800d883a 	mov	r6,r16
 400a970:	a809883a 	mov	r4,r21
 400a974:	a00b883a 	mov	r5,r20
 400a978:	40129540 	call	4012954 <__ledf2>
 400a97c:	103d7e0e 	bge	r2,zero,4009f78 <__alt_data_end+0xfc009f78>
 400a980:	002b883a 	mov	r21,zero
 400a984:	0023883a 	mov	r17,zero
 400a988:	003efb06 	br	400a578 <__alt_data_end+0xfc00a578>
 400a98c:	d8800717 	ldw	r2,28(sp)
 400a990:	003bd006 	br	40098d4 <__alt_data_end+0xfc0098d4>
 400a994:	d9000a17 	ldw	r4,40(sp)
 400a998:	d9800d17 	ldw	r6,52(sp)
 400a99c:	dd400a15 	stw	r21,40(sp)
 400a9a0:	a905c83a 	sub	r2,r21,r4
 400a9a4:	308d883a 	add	r6,r6,r2
 400a9a8:	d9800d15 	stw	r6,52(sp)
 400a9ac:	002b883a 	mov	r21,zero
 400a9b0:	003e0606 	br	400a1cc <__alt_data_end+0xfc00a1cc>
 400a9b4:	9023883a 	mov	r17,r18
 400a9b8:	9829883a 	mov	r20,r19
 400a9bc:	04000084 	movi	r16,2
 400a9c0:	003c9206 	br	4009c0c <__alt_data_end+0xfc009c0c>
 400a9c4:	04000044 	movi	r16,1
 400a9c8:	dc000c15 	stw	r16,48(sp)
 400a9cc:	dc000615 	stw	r16,24(sp)
 400a9d0:	dc002215 	stw	r16,136(sp)
 400a9d4:	e0001115 	stw	zero,68(fp)
 400a9d8:	000b883a 	mov	r5,zero
 400a9dc:	003c6906 	br	4009b84 <__alt_data_end+0xfc009b84>
 400a9e0:	3021883a 	mov	r16,r6
 400a9e4:	003ffb06 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400a9e8:	1000021e 	bne	r2,zero,400a9f4 <_dtoa_r+0x11e0>
 400a9ec:	4200004c 	andi	r8,r8,1
 400a9f0:	403e7d1e 	bne	r8,zero,400a3e8 <__alt_data_end+0xfc00a3e8>
 400a9f4:	01000c04 	movi	r4,48
 400a9f8:	00000106 	br	400aa00 <_dtoa_r+0x11ec>
 400a9fc:	102f883a 	mov	r23,r2
 400aa00:	b8bfffc4 	addi	r2,r23,-1
 400aa04:	10c00007 	ldb	r3,0(r2)
 400aa08:	193ffc26 	beq	r3,r4,400a9fc <__alt_data_end+0xfc00a9fc>
 400aa0c:	003e8706 	br	400a42c <__alt_data_end+0xfc00a42c>
 400aa10:	d8800517 	ldw	r2,20(sp)
 400aa14:	00a3c83a 	sub	r17,zero,r2
 400aa18:	8800a426 	beq	r17,zero,400acac <_dtoa_r+0x1498>
 400aa1c:	888003cc 	andi	r2,r17,15
 400aa20:	100490fa 	slli	r2,r2,3
 400aa24:	00c10074 	movhi	r3,1025
 400aa28:	18dba204 	addi	r3,r3,28296
 400aa2c:	1885883a 	add	r2,r3,r2
 400aa30:	11800017 	ldw	r6,0(r2)
 400aa34:	11c00117 	ldw	r7,4(r2)
 400aa38:	9009883a 	mov	r4,r18
 400aa3c:	980b883a 	mov	r5,r19
 400aa40:	8823d13a 	srai	r17,r17,4
 400aa44:	4012a480 	call	4012a48 <__muldf3>
 400aa48:	d8800f15 	stw	r2,60(sp)
 400aa4c:	d8c01015 	stw	r3,64(sp)
 400aa50:	8800e826 	beq	r17,zero,400adf4 <_dtoa_r+0x15e0>
 400aa54:	05010074 	movhi	r20,1025
 400aa58:	a51b9804 	addi	r20,r20,28256
 400aa5c:	04000084 	movi	r16,2
 400aa60:	8980004c 	andi	r6,r17,1
 400aa64:	1009883a 	mov	r4,r2
 400aa68:	8823d07a 	srai	r17,r17,1
 400aa6c:	180b883a 	mov	r5,r3
 400aa70:	30000426 	beq	r6,zero,400aa84 <_dtoa_r+0x1270>
 400aa74:	a1800017 	ldw	r6,0(r20)
 400aa78:	a1c00117 	ldw	r7,4(r20)
 400aa7c:	84000044 	addi	r16,r16,1
 400aa80:	4012a480 	call	4012a48 <__muldf3>
 400aa84:	a5000204 	addi	r20,r20,8
 400aa88:	883ff51e 	bne	r17,zero,400aa60 <__alt_data_end+0xfc00aa60>
 400aa8c:	d8800f15 	stw	r2,60(sp)
 400aa90:	d8c01015 	stw	r3,64(sp)
 400aa94:	003c7606 	br	4009c70 <__alt_data_end+0xfc009c70>
 400aa98:	00c00c04 	movi	r3,48
 400aa9c:	10c00005 	stb	r3,0(r2)
 400aaa0:	d8c00517 	ldw	r3,20(sp)
 400aaa4:	bd3fffc3 	ldbu	r20,-1(r23)
 400aaa8:	18c00044 	addi	r3,r3,1
 400aaac:	d8c00515 	stw	r3,20(sp)
 400aab0:	003db906 	br	400a198 <__alt_data_end+0xfc00a198>
 400aab4:	89400117 	ldw	r5,4(r17)
 400aab8:	e009883a 	mov	r4,fp
 400aabc:	400ce000 	call	400ce00 <_Balloc>
 400aac0:	89800417 	ldw	r6,16(r17)
 400aac4:	89400304 	addi	r5,r17,12
 400aac8:	11000304 	addi	r4,r2,12
 400aacc:	31800084 	addi	r6,r6,2
 400aad0:	318d883a 	add	r6,r6,r6
 400aad4:	318d883a 	add	r6,r6,r6
 400aad8:	1027883a 	mov	r19,r2
 400aadc:	400cb5c0 	call	400cb5c <memcpy>
 400aae0:	01800044 	movi	r6,1
 400aae4:	980b883a 	mov	r5,r19
 400aae8:	e009883a 	mov	r4,fp
 400aaec:	400d63c0 	call	400d63c <__lshift>
 400aaf0:	1029883a 	mov	r20,r2
 400aaf4:	003ecc06 	br	400a628 <__alt_data_end+0xfc00a628>
 400aaf8:	00800e44 	movi	r2,57
 400aafc:	90809026 	beq	r18,r2,400ad40 <_dtoa_r+0x152c>
 400ab00:	92000044 	addi	r8,r18,1
 400ab04:	003f1f06 	br	400a784 <__alt_data_end+0xfc00a784>
 400ab08:	9011883a 	mov	r8,r18
 400ab0c:	8825883a 	mov	r18,r17
 400ab10:	a023883a 	mov	r17,r20
 400ab14:	003e2906 	br	400a3bc <__alt_data_end+0xfc00a3bc>
 400ab18:	002b883a 	mov	r21,zero
 400ab1c:	0023883a 	mov	r17,zero
 400ab20:	003f5406 	br	400a874 <__alt_data_end+0xfc00a874>
 400ab24:	61bfffc4 	addi	r6,r12,-1
 400ab28:	300490fa 	slli	r2,r6,3
 400ab2c:	00c10074 	movhi	r3,1025
 400ab30:	18dba204 	addi	r3,r3,28296
 400ab34:	1885883a 	add	r2,r3,r2
 400ab38:	11000017 	ldw	r4,0(r2)
 400ab3c:	11400117 	ldw	r5,4(r2)
 400ab40:	d8800717 	ldw	r2,28(sp)
 400ab44:	880f883a 	mov	r7,r17
 400ab48:	d9801215 	stw	r6,72(sp)
 400ab4c:	800d883a 	mov	r6,r16
 400ab50:	db001615 	stw	r12,88(sp)
 400ab54:	15c00044 	addi	r23,r2,1
 400ab58:	4012a480 	call	4012a48 <__muldf3>
 400ab5c:	d9401017 	ldw	r5,64(sp)
 400ab60:	d9000f17 	ldw	r4,60(sp)
 400ab64:	d8c01515 	stw	r3,84(sp)
 400ab68:	d8801415 	stw	r2,80(sp)
 400ab6c:	4013bb00 	call	4013bb0 <__fixdfsi>
 400ab70:	1009883a 	mov	r4,r2
 400ab74:	1021883a 	mov	r16,r2
 400ab78:	4013c300 	call	4013c30 <__floatsidf>
 400ab7c:	d9000f17 	ldw	r4,60(sp)
 400ab80:	d9401017 	ldw	r5,64(sp)
 400ab84:	100d883a 	mov	r6,r2
 400ab88:	180f883a 	mov	r7,r3
 400ab8c:	40132b40 	call	40132b4 <__subdf3>
 400ab90:	1829883a 	mov	r20,r3
 400ab94:	d8c00717 	ldw	r3,28(sp)
 400ab98:	84000c04 	addi	r16,r16,48
 400ab9c:	1023883a 	mov	r17,r2
 400aba0:	1c000005 	stb	r16,0(r3)
 400aba4:	db001617 	ldw	r12,88(sp)
 400aba8:	00800044 	movi	r2,1
 400abac:	60802226 	beq	r12,r2,400ac38 <_dtoa_r+0x1424>
 400abb0:	d9c00717 	ldw	r7,28(sp)
 400abb4:	8805883a 	mov	r2,r17
 400abb8:	b82b883a 	mov	r21,r23
 400abbc:	3b19883a 	add	r12,r7,r12
 400abc0:	6023883a 	mov	r17,r12
 400abc4:	a007883a 	mov	r3,r20
 400abc8:	dc800f15 	stw	r18,60(sp)
 400abcc:	000d883a 	mov	r6,zero
 400abd0:	01d00934 	movhi	r7,16420
 400abd4:	1009883a 	mov	r4,r2
 400abd8:	180b883a 	mov	r5,r3
 400abdc:	4012a480 	call	4012a48 <__muldf3>
 400abe0:	180b883a 	mov	r5,r3
 400abe4:	1009883a 	mov	r4,r2
 400abe8:	1829883a 	mov	r20,r3
 400abec:	1025883a 	mov	r18,r2
 400abf0:	4013bb00 	call	4013bb0 <__fixdfsi>
 400abf4:	1009883a 	mov	r4,r2
 400abf8:	1021883a 	mov	r16,r2
 400abfc:	4013c300 	call	4013c30 <__floatsidf>
 400ac00:	100d883a 	mov	r6,r2
 400ac04:	180f883a 	mov	r7,r3
 400ac08:	9009883a 	mov	r4,r18
 400ac0c:	a00b883a 	mov	r5,r20
 400ac10:	84000c04 	addi	r16,r16,48
 400ac14:	40132b40 	call	40132b4 <__subdf3>
 400ac18:	ad400044 	addi	r21,r21,1
 400ac1c:	ac3fffc5 	stb	r16,-1(r21)
 400ac20:	ac7fea1e 	bne	r21,r17,400abcc <__alt_data_end+0xfc00abcc>
 400ac24:	1023883a 	mov	r17,r2
 400ac28:	d8801217 	ldw	r2,72(sp)
 400ac2c:	dc800f17 	ldw	r18,60(sp)
 400ac30:	1829883a 	mov	r20,r3
 400ac34:	b8af883a 	add	r23,r23,r2
 400ac38:	d9001417 	ldw	r4,80(sp)
 400ac3c:	d9401517 	ldw	r5,84(sp)
 400ac40:	000d883a 	mov	r6,zero
 400ac44:	01cff834 	movhi	r7,16352
 400ac48:	40115740 	call	4011574 <__adddf3>
 400ac4c:	880d883a 	mov	r6,r17
 400ac50:	a00f883a 	mov	r7,r20
 400ac54:	1009883a 	mov	r4,r2
 400ac58:	180b883a 	mov	r5,r3
 400ac5c:	40129540 	call	4012954 <__ledf2>
 400ac60:	10003e0e 	bge	r2,zero,400ad5c <_dtoa_r+0x1548>
 400ac64:	d9001317 	ldw	r4,76(sp)
 400ac68:	bd3fffc3 	ldbu	r20,-1(r23)
 400ac6c:	d9000515 	stw	r4,20(sp)
 400ac70:	003d3b06 	br	400a160 <__alt_data_end+0xfc00a160>
 400ac74:	0027883a 	mov	r19,zero
 400ac78:	003f1b06 	br	400a8e8 <__alt_data_end+0xfc00a8e8>
 400ac7c:	d8800817 	ldw	r2,32(sp)
 400ac80:	11e9c83a 	sub	r20,r2,r7
 400ac84:	0005883a 	mov	r2,zero
 400ac88:	003d5406 	br	400a1dc <__alt_data_end+0xfc00a1dc>
 400ac8c:	00800044 	movi	r2,1
 400ac90:	003dc706 	br	400a3b0 <__alt_data_end+0xfc00a3b0>
 400ac94:	d8c00217 	ldw	r3,8(sp)
 400ac98:	00800d84 	movi	r2,54
 400ac9c:	dd400a17 	ldw	r21,40(sp)
 400aca0:	10c5c83a 	sub	r2,r2,r3
 400aca4:	dd000817 	ldw	r20,32(sp)
 400aca8:	003d4c06 	br	400a1dc <__alt_data_end+0xfc00a1dc>
 400acac:	dc800f15 	stw	r18,60(sp)
 400acb0:	dcc01015 	stw	r19,64(sp)
 400acb4:	04000084 	movi	r16,2
 400acb8:	003bed06 	br	4009c70 <__alt_data_end+0xfc009c70>
 400acbc:	d9000617 	ldw	r4,24(sp)
 400acc0:	203f0d26 	beq	r4,zero,400a8f8 <__alt_data_end+0xfc00a8f8>
 400acc4:	d9800c17 	ldw	r6,48(sp)
 400acc8:	01bcab0e 	bge	zero,r6,4009f78 <__alt_data_end+0xfc009f78>
 400accc:	d9401017 	ldw	r5,64(sp)
 400acd0:	d9000f17 	ldw	r4,60(sp)
 400acd4:	000d883a 	mov	r6,zero
 400acd8:	01d00934 	movhi	r7,16420
 400acdc:	4012a480 	call	4012a48 <__muldf3>
 400ace0:	81000044 	addi	r4,r16,1
 400ace4:	d8800f15 	stw	r2,60(sp)
 400ace8:	d8c01015 	stw	r3,64(sp)
 400acec:	4013c300 	call	4013c30 <__floatsidf>
 400acf0:	d9800f17 	ldw	r6,60(sp)
 400acf4:	d9c01017 	ldw	r7,64(sp)
 400acf8:	1009883a 	mov	r4,r2
 400acfc:	180b883a 	mov	r5,r3
 400ad00:	4012a480 	call	4012a48 <__muldf3>
 400ad04:	01d00734 	movhi	r7,16412
 400ad08:	000d883a 	mov	r6,zero
 400ad0c:	1009883a 	mov	r4,r2
 400ad10:	180b883a 	mov	r5,r3
 400ad14:	40115740 	call	4011574 <__adddf3>
 400ad18:	d9c00517 	ldw	r7,20(sp)
 400ad1c:	047f3034 	movhi	r17,64704
 400ad20:	1021883a 	mov	r16,r2
 400ad24:	39ffffc4 	addi	r7,r7,-1
 400ad28:	d9c01315 	stw	r7,76(sp)
 400ad2c:	1c63883a 	add	r17,r3,r17
 400ad30:	db000c17 	ldw	r12,48(sp)
 400ad34:	003bea06 	br	4009ce0 <__alt_data_end+0xfc009ce0>
 400ad38:	dc000915 	stw	r16,36(sp)
 400ad3c:	003e0e06 	br	400a578 <__alt_data_end+0xfc00a578>
 400ad40:	01000e44 	movi	r4,57
 400ad44:	8825883a 	mov	r18,r17
 400ad48:	9dc00044 	addi	r23,r19,1
 400ad4c:	99000005 	stb	r4,0(r19)
 400ad50:	a023883a 	mov	r17,r20
 400ad54:	dc000915 	stw	r16,36(sp)
 400ad58:	003da406 	br	400a3ec <__alt_data_end+0xfc00a3ec>
 400ad5c:	d9801417 	ldw	r6,80(sp)
 400ad60:	d9c01517 	ldw	r7,84(sp)
 400ad64:	0009883a 	mov	r4,zero
 400ad68:	014ff834 	movhi	r5,16352
 400ad6c:	40132b40 	call	40132b4 <__subdf3>
 400ad70:	880d883a 	mov	r6,r17
 400ad74:	a00f883a 	mov	r7,r20
 400ad78:	1009883a 	mov	r4,r2
 400ad7c:	180b883a 	mov	r5,r3
 400ad80:	40128780 	call	4012878 <__gedf2>
 400ad84:	00bc7c0e 	bge	zero,r2,4009f78 <__alt_data_end+0xfc009f78>
 400ad88:	01000c04 	movi	r4,48
 400ad8c:	00000106 	br	400ad94 <_dtoa_r+0x1580>
 400ad90:	102f883a 	mov	r23,r2
 400ad94:	b8bfffc4 	addi	r2,r23,-1
 400ad98:	10c00007 	ldb	r3,0(r2)
 400ad9c:	193ffc26 	beq	r3,r4,400ad90 <__alt_data_end+0xfc00ad90>
 400ada0:	d9801317 	ldw	r6,76(sp)
 400ada4:	d9800515 	stw	r6,20(sp)
 400ada8:	003c4406 	br	4009ebc <__alt_data_end+0xfc009ebc>
 400adac:	d9801317 	ldw	r6,76(sp)
 400adb0:	d9800515 	stw	r6,20(sp)
 400adb4:	003cea06 	br	400a160 <__alt_data_end+0xfc00a160>
 400adb8:	dd800f17 	ldw	r22,60(sp)
 400adbc:	dcc01017 	ldw	r19,64(sp)
 400adc0:	dc801217 	ldw	r18,72(sp)
 400adc4:	003c6c06 	br	4009f78 <__alt_data_end+0xfc009f78>
 400adc8:	903e031e 	bne	r18,zero,400a5d8 <__alt_data_end+0xfc00a5d8>
 400adcc:	003ebb06 	br	400a8bc <__alt_data_end+0xfc00a8bc>
 400add0:	103e6c1e 	bne	r2,zero,400a784 <__alt_data_end+0xfc00a784>
 400add4:	4080004c 	andi	r2,r8,1
 400add8:	103e6a26 	beq	r2,zero,400a784 <__alt_data_end+0xfc00a784>
 400addc:	003e6606 	br	400a778 <__alt_data_end+0xfc00a778>
 400ade0:	d8c00317 	ldw	r3,12(sp)
 400ade4:	00800084 	movi	r2,2
 400ade8:	10c02916 	blt	r2,r3,400ae90 <_dtoa_r+0x167c>
 400adec:	d9000c17 	ldw	r4,48(sp)
 400adf0:	003e8806 	br	400a814 <__alt_data_end+0xfc00a814>
 400adf4:	04000084 	movi	r16,2
 400adf8:	003b9d06 	br	4009c70 <__alt_data_end+0xfc009c70>
 400adfc:	d9001317 	ldw	r4,76(sp)
 400ae00:	d9000515 	stw	r4,20(sp)
 400ae04:	003cd606 	br	400a160 <__alt_data_end+0xfc00a160>
 400ae08:	d8801317 	ldw	r2,76(sp)
 400ae0c:	d8800515 	stw	r2,20(sp)
 400ae10:	003c2a06 	br	4009ebc <__alt_data_end+0xfc009ebc>
 400ae14:	d9800317 	ldw	r6,12(sp)
 400ae18:	00800084 	movi	r2,2
 400ae1c:	11801516 	blt	r2,r6,400ae74 <_dtoa_r+0x1660>
 400ae20:	d9c00c17 	ldw	r7,48(sp)
 400ae24:	d9c00615 	stw	r7,24(sp)
 400ae28:	003df706 	br	400a608 <__alt_data_end+0xfc00a608>
 400ae2c:	193d3926 	beq	r3,r4,400a314 <__alt_data_end+0xfc00a314>
 400ae30:	00c00f04 	movi	r3,60
 400ae34:	1885c83a 	sub	r2,r3,r2
 400ae38:	003ddf06 	br	400a5b8 <__alt_data_end+0xfc00a5b8>
 400ae3c:	e009883a 	mov	r4,fp
 400ae40:	e0001115 	stw	zero,68(fp)
 400ae44:	000b883a 	mov	r5,zero
 400ae48:	400ce000 	call	400ce00 <_Balloc>
 400ae4c:	d8800715 	stw	r2,28(sp)
 400ae50:	d8c00717 	ldw	r3,28(sp)
 400ae54:	00bfffc4 	movi	r2,-1
 400ae58:	01000044 	movi	r4,1
 400ae5c:	d8800c15 	stw	r2,48(sp)
 400ae60:	e0c01015 	stw	r3,64(fp)
 400ae64:	d9000b15 	stw	r4,44(sp)
 400ae68:	d8800615 	stw	r2,24(sp)
 400ae6c:	d8002215 	stw	zero,136(sp)
 400ae70:	003c4106 	br	4009f78 <__alt_data_end+0xfc009f78>
 400ae74:	d8c00c17 	ldw	r3,48(sp)
 400ae78:	d8c00615 	stw	r3,24(sp)
 400ae7c:	003e7006 	br	400a840 <__alt_data_end+0xfc00a840>
 400ae80:	04400044 	movi	r17,1
 400ae84:	003b2006 	br	4009b08 <__alt_data_end+0xfc009b08>
 400ae88:	000b883a 	mov	r5,zero
 400ae8c:	003b3d06 	br	4009b84 <__alt_data_end+0xfc009b84>
 400ae90:	d8800c17 	ldw	r2,48(sp)
 400ae94:	d8800615 	stw	r2,24(sp)
 400ae98:	003e6906 	br	400a840 <__alt_data_end+0xfc00a840>

0400ae9c <__sflush_r>:
 400ae9c:	2880030b 	ldhu	r2,12(r5)
 400aea0:	defffb04 	addi	sp,sp,-20
 400aea4:	dcc00315 	stw	r19,12(sp)
 400aea8:	dc400115 	stw	r17,4(sp)
 400aeac:	dfc00415 	stw	ra,16(sp)
 400aeb0:	dc800215 	stw	r18,8(sp)
 400aeb4:	dc000015 	stw	r16,0(sp)
 400aeb8:	10c0020c 	andi	r3,r2,8
 400aebc:	2823883a 	mov	r17,r5
 400aec0:	2027883a 	mov	r19,r4
 400aec4:	1800311e 	bne	r3,zero,400af8c <__sflush_r+0xf0>
 400aec8:	28c00117 	ldw	r3,4(r5)
 400aecc:	10820014 	ori	r2,r2,2048
 400aed0:	2880030d 	sth	r2,12(r5)
 400aed4:	00c04b0e 	bge	zero,r3,400b004 <__sflush_r+0x168>
 400aed8:	8a000a17 	ldw	r8,40(r17)
 400aedc:	40002326 	beq	r8,zero,400af6c <__sflush_r+0xd0>
 400aee0:	9c000017 	ldw	r16,0(r19)
 400aee4:	10c4000c 	andi	r3,r2,4096
 400aee8:	98000015 	stw	zero,0(r19)
 400aeec:	18004826 	beq	r3,zero,400b010 <__sflush_r+0x174>
 400aef0:	89801417 	ldw	r6,80(r17)
 400aef4:	10c0010c 	andi	r3,r2,4
 400aef8:	18000626 	beq	r3,zero,400af14 <__sflush_r+0x78>
 400aefc:	88c00117 	ldw	r3,4(r17)
 400af00:	88800c17 	ldw	r2,48(r17)
 400af04:	30cdc83a 	sub	r6,r6,r3
 400af08:	10000226 	beq	r2,zero,400af14 <__sflush_r+0x78>
 400af0c:	88800f17 	ldw	r2,60(r17)
 400af10:	308dc83a 	sub	r6,r6,r2
 400af14:	89400717 	ldw	r5,28(r17)
 400af18:	000f883a 	mov	r7,zero
 400af1c:	9809883a 	mov	r4,r19
 400af20:	403ee83a 	callr	r8
 400af24:	00ffffc4 	movi	r3,-1
 400af28:	10c04426 	beq	r2,r3,400b03c <__sflush_r+0x1a0>
 400af2c:	88c0030b 	ldhu	r3,12(r17)
 400af30:	89000417 	ldw	r4,16(r17)
 400af34:	88000115 	stw	zero,4(r17)
 400af38:	197dffcc 	andi	r5,r3,63487
 400af3c:	8940030d 	sth	r5,12(r17)
 400af40:	89000015 	stw	r4,0(r17)
 400af44:	18c4000c 	andi	r3,r3,4096
 400af48:	18002c1e 	bne	r3,zero,400affc <__sflush_r+0x160>
 400af4c:	89400c17 	ldw	r5,48(r17)
 400af50:	9c000015 	stw	r16,0(r19)
 400af54:	28000526 	beq	r5,zero,400af6c <__sflush_r+0xd0>
 400af58:	88801004 	addi	r2,r17,64
 400af5c:	28800226 	beq	r5,r2,400af68 <__sflush_r+0xcc>
 400af60:	9809883a 	mov	r4,r19
 400af64:	400b6180 	call	400b618 <_free_r>
 400af68:	88000c15 	stw	zero,48(r17)
 400af6c:	0005883a 	mov	r2,zero
 400af70:	dfc00417 	ldw	ra,16(sp)
 400af74:	dcc00317 	ldw	r19,12(sp)
 400af78:	dc800217 	ldw	r18,8(sp)
 400af7c:	dc400117 	ldw	r17,4(sp)
 400af80:	dc000017 	ldw	r16,0(sp)
 400af84:	dec00504 	addi	sp,sp,20
 400af88:	f800283a 	ret
 400af8c:	2c800417 	ldw	r18,16(r5)
 400af90:	903ff626 	beq	r18,zero,400af6c <__alt_data_end+0xfc00af6c>
 400af94:	2c000017 	ldw	r16,0(r5)
 400af98:	108000cc 	andi	r2,r2,3
 400af9c:	2c800015 	stw	r18,0(r5)
 400afa0:	84a1c83a 	sub	r16,r16,r18
 400afa4:	1000131e 	bne	r2,zero,400aff4 <__sflush_r+0x158>
 400afa8:	28800517 	ldw	r2,20(r5)
 400afac:	88800215 	stw	r2,8(r17)
 400afb0:	04000316 	blt	zero,r16,400afc0 <__sflush_r+0x124>
 400afb4:	003fed06 	br	400af6c <__alt_data_end+0xfc00af6c>
 400afb8:	90a5883a 	add	r18,r18,r2
 400afbc:	043feb0e 	bge	zero,r16,400af6c <__alt_data_end+0xfc00af6c>
 400afc0:	88800917 	ldw	r2,36(r17)
 400afc4:	89400717 	ldw	r5,28(r17)
 400afc8:	800f883a 	mov	r7,r16
 400afcc:	900d883a 	mov	r6,r18
 400afd0:	9809883a 	mov	r4,r19
 400afd4:	103ee83a 	callr	r2
 400afd8:	80a1c83a 	sub	r16,r16,r2
 400afdc:	00bff616 	blt	zero,r2,400afb8 <__alt_data_end+0xfc00afb8>
 400afe0:	88c0030b 	ldhu	r3,12(r17)
 400afe4:	00bfffc4 	movi	r2,-1
 400afe8:	18c01014 	ori	r3,r3,64
 400afec:	88c0030d 	sth	r3,12(r17)
 400aff0:	003fdf06 	br	400af70 <__alt_data_end+0xfc00af70>
 400aff4:	0005883a 	mov	r2,zero
 400aff8:	003fec06 	br	400afac <__alt_data_end+0xfc00afac>
 400affc:	88801415 	stw	r2,80(r17)
 400b000:	003fd206 	br	400af4c <__alt_data_end+0xfc00af4c>
 400b004:	28c00f17 	ldw	r3,60(r5)
 400b008:	00ffb316 	blt	zero,r3,400aed8 <__alt_data_end+0xfc00aed8>
 400b00c:	003fd706 	br	400af6c <__alt_data_end+0xfc00af6c>
 400b010:	89400717 	ldw	r5,28(r17)
 400b014:	000d883a 	mov	r6,zero
 400b018:	01c00044 	movi	r7,1
 400b01c:	9809883a 	mov	r4,r19
 400b020:	403ee83a 	callr	r8
 400b024:	100d883a 	mov	r6,r2
 400b028:	00bfffc4 	movi	r2,-1
 400b02c:	30801426 	beq	r6,r2,400b080 <__sflush_r+0x1e4>
 400b030:	8880030b 	ldhu	r2,12(r17)
 400b034:	8a000a17 	ldw	r8,40(r17)
 400b038:	003fae06 	br	400aef4 <__alt_data_end+0xfc00aef4>
 400b03c:	98c00017 	ldw	r3,0(r19)
 400b040:	183fba26 	beq	r3,zero,400af2c <__alt_data_end+0xfc00af2c>
 400b044:	01000744 	movi	r4,29
 400b048:	19000626 	beq	r3,r4,400b064 <__sflush_r+0x1c8>
 400b04c:	01000584 	movi	r4,22
 400b050:	19000426 	beq	r3,r4,400b064 <__sflush_r+0x1c8>
 400b054:	88c0030b 	ldhu	r3,12(r17)
 400b058:	18c01014 	ori	r3,r3,64
 400b05c:	88c0030d 	sth	r3,12(r17)
 400b060:	003fc306 	br	400af70 <__alt_data_end+0xfc00af70>
 400b064:	8880030b 	ldhu	r2,12(r17)
 400b068:	88c00417 	ldw	r3,16(r17)
 400b06c:	88000115 	stw	zero,4(r17)
 400b070:	10bdffcc 	andi	r2,r2,63487
 400b074:	8880030d 	sth	r2,12(r17)
 400b078:	88c00015 	stw	r3,0(r17)
 400b07c:	003fb306 	br	400af4c <__alt_data_end+0xfc00af4c>
 400b080:	98800017 	ldw	r2,0(r19)
 400b084:	103fea26 	beq	r2,zero,400b030 <__alt_data_end+0xfc00b030>
 400b088:	00c00744 	movi	r3,29
 400b08c:	10c00226 	beq	r2,r3,400b098 <__sflush_r+0x1fc>
 400b090:	00c00584 	movi	r3,22
 400b094:	10c0031e 	bne	r2,r3,400b0a4 <__sflush_r+0x208>
 400b098:	9c000015 	stw	r16,0(r19)
 400b09c:	0005883a 	mov	r2,zero
 400b0a0:	003fb306 	br	400af70 <__alt_data_end+0xfc00af70>
 400b0a4:	88c0030b 	ldhu	r3,12(r17)
 400b0a8:	3005883a 	mov	r2,r6
 400b0ac:	18c01014 	ori	r3,r3,64
 400b0b0:	88c0030d 	sth	r3,12(r17)
 400b0b4:	003fae06 	br	400af70 <__alt_data_end+0xfc00af70>

0400b0b8 <_fflush_r>:
 400b0b8:	defffd04 	addi	sp,sp,-12
 400b0bc:	dc000115 	stw	r16,4(sp)
 400b0c0:	dfc00215 	stw	ra,8(sp)
 400b0c4:	2021883a 	mov	r16,r4
 400b0c8:	20000226 	beq	r4,zero,400b0d4 <_fflush_r+0x1c>
 400b0cc:	20800e17 	ldw	r2,56(r4)
 400b0d0:	10000c26 	beq	r2,zero,400b104 <_fflush_r+0x4c>
 400b0d4:	2880030f 	ldh	r2,12(r5)
 400b0d8:	1000051e 	bne	r2,zero,400b0f0 <_fflush_r+0x38>
 400b0dc:	0005883a 	mov	r2,zero
 400b0e0:	dfc00217 	ldw	ra,8(sp)
 400b0e4:	dc000117 	ldw	r16,4(sp)
 400b0e8:	dec00304 	addi	sp,sp,12
 400b0ec:	f800283a 	ret
 400b0f0:	8009883a 	mov	r4,r16
 400b0f4:	dfc00217 	ldw	ra,8(sp)
 400b0f8:	dc000117 	ldw	r16,4(sp)
 400b0fc:	dec00304 	addi	sp,sp,12
 400b100:	400ae9c1 	jmpi	400ae9c <__sflush_r>
 400b104:	d9400015 	stw	r5,0(sp)
 400b108:	400b4a40 	call	400b4a4 <__sinit>
 400b10c:	d9400017 	ldw	r5,0(sp)
 400b110:	003ff006 	br	400b0d4 <__alt_data_end+0xfc00b0d4>

0400b114 <fflush>:
 400b114:	20000526 	beq	r4,zero,400b12c <fflush+0x18>
 400b118:	008100b4 	movhi	r2,1026
 400b11c:	10a2f104 	addi	r2,r2,-29756
 400b120:	200b883a 	mov	r5,r4
 400b124:	11000017 	ldw	r4,0(r2)
 400b128:	400b0b81 	jmpi	400b0b8 <_fflush_r>
 400b12c:	008100b4 	movhi	r2,1026
 400b130:	10a2f004 	addi	r2,r2,-29760
 400b134:	11000017 	ldw	r4,0(r2)
 400b138:	01410074 	movhi	r5,1025
 400b13c:	296c2e04 	addi	r5,r5,-20296
 400b140:	400beb41 	jmpi	400beb4 <_fwalk_reent>

0400b144 <__fp_unlock>:
 400b144:	0005883a 	mov	r2,zero
 400b148:	f800283a 	ret

0400b14c <_cleanup_r>:
 400b14c:	01410074 	movhi	r5,1025
 400b150:	29409104 	addi	r5,r5,580
 400b154:	400beb41 	jmpi	400beb4 <_fwalk_reent>

0400b158 <__sinit.part.1>:
 400b158:	defff704 	addi	sp,sp,-36
 400b15c:	00c10074 	movhi	r3,1025
 400b160:	dfc00815 	stw	ra,32(sp)
 400b164:	ddc00715 	stw	r23,28(sp)
 400b168:	dd800615 	stw	r22,24(sp)
 400b16c:	dd400515 	stw	r21,20(sp)
 400b170:	dd000415 	stw	r20,16(sp)
 400b174:	dcc00315 	stw	r19,12(sp)
 400b178:	dc800215 	stw	r18,8(sp)
 400b17c:	dc400115 	stw	r17,4(sp)
 400b180:	dc000015 	stw	r16,0(sp)
 400b184:	18ec5304 	addi	r3,r3,-20148
 400b188:	24000117 	ldw	r16,4(r4)
 400b18c:	20c00f15 	stw	r3,60(r4)
 400b190:	2080bb04 	addi	r2,r4,748
 400b194:	00c000c4 	movi	r3,3
 400b198:	20c0b915 	stw	r3,740(r4)
 400b19c:	2080ba15 	stw	r2,744(r4)
 400b1a0:	2000b815 	stw	zero,736(r4)
 400b1a4:	05c00204 	movi	r23,8
 400b1a8:	00800104 	movi	r2,4
 400b1ac:	2025883a 	mov	r18,r4
 400b1b0:	b80d883a 	mov	r6,r23
 400b1b4:	81001704 	addi	r4,r16,92
 400b1b8:	000b883a 	mov	r5,zero
 400b1bc:	80000015 	stw	zero,0(r16)
 400b1c0:	80000115 	stw	zero,4(r16)
 400b1c4:	80000215 	stw	zero,8(r16)
 400b1c8:	8080030d 	sth	r2,12(r16)
 400b1cc:	80001915 	stw	zero,100(r16)
 400b1d0:	8000038d 	sth	zero,14(r16)
 400b1d4:	80000415 	stw	zero,16(r16)
 400b1d8:	80000515 	stw	zero,20(r16)
 400b1dc:	80000615 	stw	zero,24(r16)
 400b1e0:	4006cf80 	call	4006cf8 <memset>
 400b1e4:	05810074 	movhi	r22,1025
 400b1e8:	94400217 	ldw	r17,8(r18)
 400b1ec:	05410074 	movhi	r21,1025
 400b1f0:	05010074 	movhi	r20,1025
 400b1f4:	04c10074 	movhi	r19,1025
 400b1f8:	b5b99304 	addi	r22,r22,-6580
 400b1fc:	ad79aa04 	addi	r21,r21,-6488
 400b200:	a539c904 	addi	r20,r20,-6364
 400b204:	9cf9e004 	addi	r19,r19,-6272
 400b208:	85800815 	stw	r22,32(r16)
 400b20c:	85400915 	stw	r21,36(r16)
 400b210:	85000a15 	stw	r20,40(r16)
 400b214:	84c00b15 	stw	r19,44(r16)
 400b218:	84000715 	stw	r16,28(r16)
 400b21c:	00800284 	movi	r2,10
 400b220:	8880030d 	sth	r2,12(r17)
 400b224:	00800044 	movi	r2,1
 400b228:	b80d883a 	mov	r6,r23
 400b22c:	89001704 	addi	r4,r17,92
 400b230:	000b883a 	mov	r5,zero
 400b234:	88000015 	stw	zero,0(r17)
 400b238:	88000115 	stw	zero,4(r17)
 400b23c:	88000215 	stw	zero,8(r17)
 400b240:	88001915 	stw	zero,100(r17)
 400b244:	8880038d 	sth	r2,14(r17)
 400b248:	88000415 	stw	zero,16(r17)
 400b24c:	88000515 	stw	zero,20(r17)
 400b250:	88000615 	stw	zero,24(r17)
 400b254:	4006cf80 	call	4006cf8 <memset>
 400b258:	94000317 	ldw	r16,12(r18)
 400b25c:	00800484 	movi	r2,18
 400b260:	8c400715 	stw	r17,28(r17)
 400b264:	8d800815 	stw	r22,32(r17)
 400b268:	8d400915 	stw	r21,36(r17)
 400b26c:	8d000a15 	stw	r20,40(r17)
 400b270:	8cc00b15 	stw	r19,44(r17)
 400b274:	8080030d 	sth	r2,12(r16)
 400b278:	00800084 	movi	r2,2
 400b27c:	80000015 	stw	zero,0(r16)
 400b280:	80000115 	stw	zero,4(r16)
 400b284:	80000215 	stw	zero,8(r16)
 400b288:	80001915 	stw	zero,100(r16)
 400b28c:	8080038d 	sth	r2,14(r16)
 400b290:	80000415 	stw	zero,16(r16)
 400b294:	80000515 	stw	zero,20(r16)
 400b298:	80000615 	stw	zero,24(r16)
 400b29c:	b80d883a 	mov	r6,r23
 400b2a0:	000b883a 	mov	r5,zero
 400b2a4:	81001704 	addi	r4,r16,92
 400b2a8:	4006cf80 	call	4006cf8 <memset>
 400b2ac:	00800044 	movi	r2,1
 400b2b0:	84000715 	stw	r16,28(r16)
 400b2b4:	85800815 	stw	r22,32(r16)
 400b2b8:	85400915 	stw	r21,36(r16)
 400b2bc:	85000a15 	stw	r20,40(r16)
 400b2c0:	84c00b15 	stw	r19,44(r16)
 400b2c4:	90800e15 	stw	r2,56(r18)
 400b2c8:	dfc00817 	ldw	ra,32(sp)
 400b2cc:	ddc00717 	ldw	r23,28(sp)
 400b2d0:	dd800617 	ldw	r22,24(sp)
 400b2d4:	dd400517 	ldw	r21,20(sp)
 400b2d8:	dd000417 	ldw	r20,16(sp)
 400b2dc:	dcc00317 	ldw	r19,12(sp)
 400b2e0:	dc800217 	ldw	r18,8(sp)
 400b2e4:	dc400117 	ldw	r17,4(sp)
 400b2e8:	dc000017 	ldw	r16,0(sp)
 400b2ec:	dec00904 	addi	sp,sp,36
 400b2f0:	f800283a 	ret

0400b2f4 <__fp_lock>:
 400b2f4:	0005883a 	mov	r2,zero
 400b2f8:	f800283a 	ret

0400b2fc <__sfmoreglue>:
 400b2fc:	defffc04 	addi	sp,sp,-16
 400b300:	dc800215 	stw	r18,8(sp)
 400b304:	2825883a 	mov	r18,r5
 400b308:	dc000015 	stw	r16,0(sp)
 400b30c:	01401a04 	movi	r5,104
 400b310:	2021883a 	mov	r16,r4
 400b314:	913fffc4 	addi	r4,r18,-1
 400b318:	dfc00315 	stw	ra,12(sp)
 400b31c:	dc400115 	stw	r17,4(sp)
 400b320:	4006cd00 	call	4006cd0 <__mulsi3>
 400b324:	8009883a 	mov	r4,r16
 400b328:	11401d04 	addi	r5,r2,116
 400b32c:	1023883a 	mov	r17,r2
 400b330:	400c26c0 	call	400c26c <_malloc_r>
 400b334:	1021883a 	mov	r16,r2
 400b338:	10000726 	beq	r2,zero,400b358 <__sfmoreglue+0x5c>
 400b33c:	11000304 	addi	r4,r2,12
 400b340:	10000015 	stw	zero,0(r2)
 400b344:	14800115 	stw	r18,4(r2)
 400b348:	11000215 	stw	r4,8(r2)
 400b34c:	89801a04 	addi	r6,r17,104
 400b350:	000b883a 	mov	r5,zero
 400b354:	4006cf80 	call	4006cf8 <memset>
 400b358:	8005883a 	mov	r2,r16
 400b35c:	dfc00317 	ldw	ra,12(sp)
 400b360:	dc800217 	ldw	r18,8(sp)
 400b364:	dc400117 	ldw	r17,4(sp)
 400b368:	dc000017 	ldw	r16,0(sp)
 400b36c:	dec00404 	addi	sp,sp,16
 400b370:	f800283a 	ret

0400b374 <__sfp>:
 400b374:	defffb04 	addi	sp,sp,-20
 400b378:	dc000015 	stw	r16,0(sp)
 400b37c:	040100b4 	movhi	r16,1026
 400b380:	8422f004 	addi	r16,r16,-29760
 400b384:	dcc00315 	stw	r19,12(sp)
 400b388:	2027883a 	mov	r19,r4
 400b38c:	81000017 	ldw	r4,0(r16)
 400b390:	dfc00415 	stw	ra,16(sp)
 400b394:	dc800215 	stw	r18,8(sp)
 400b398:	20800e17 	ldw	r2,56(r4)
 400b39c:	dc400115 	stw	r17,4(sp)
 400b3a0:	1000021e 	bne	r2,zero,400b3ac <__sfp+0x38>
 400b3a4:	400b1580 	call	400b158 <__sinit.part.1>
 400b3a8:	81000017 	ldw	r4,0(r16)
 400b3ac:	2480b804 	addi	r18,r4,736
 400b3b0:	047fffc4 	movi	r17,-1
 400b3b4:	91000117 	ldw	r4,4(r18)
 400b3b8:	94000217 	ldw	r16,8(r18)
 400b3bc:	213fffc4 	addi	r4,r4,-1
 400b3c0:	20000a16 	blt	r4,zero,400b3ec <__sfp+0x78>
 400b3c4:	8080030f 	ldh	r2,12(r16)
 400b3c8:	10000c26 	beq	r2,zero,400b3fc <__sfp+0x88>
 400b3cc:	80c01d04 	addi	r3,r16,116
 400b3d0:	00000206 	br	400b3dc <__sfp+0x68>
 400b3d4:	18bfe60f 	ldh	r2,-104(r3)
 400b3d8:	10000826 	beq	r2,zero,400b3fc <__sfp+0x88>
 400b3dc:	213fffc4 	addi	r4,r4,-1
 400b3e0:	1c3ffd04 	addi	r16,r3,-12
 400b3e4:	18c01a04 	addi	r3,r3,104
 400b3e8:	247ffa1e 	bne	r4,r17,400b3d4 <__alt_data_end+0xfc00b3d4>
 400b3ec:	90800017 	ldw	r2,0(r18)
 400b3f0:	10001d26 	beq	r2,zero,400b468 <__sfp+0xf4>
 400b3f4:	1025883a 	mov	r18,r2
 400b3f8:	003fee06 	br	400b3b4 <__alt_data_end+0xfc00b3b4>
 400b3fc:	00bfffc4 	movi	r2,-1
 400b400:	8080038d 	sth	r2,14(r16)
 400b404:	00800044 	movi	r2,1
 400b408:	8080030d 	sth	r2,12(r16)
 400b40c:	80001915 	stw	zero,100(r16)
 400b410:	80000015 	stw	zero,0(r16)
 400b414:	80000215 	stw	zero,8(r16)
 400b418:	80000115 	stw	zero,4(r16)
 400b41c:	80000415 	stw	zero,16(r16)
 400b420:	80000515 	stw	zero,20(r16)
 400b424:	80000615 	stw	zero,24(r16)
 400b428:	01800204 	movi	r6,8
 400b42c:	000b883a 	mov	r5,zero
 400b430:	81001704 	addi	r4,r16,92
 400b434:	4006cf80 	call	4006cf8 <memset>
 400b438:	8005883a 	mov	r2,r16
 400b43c:	80000c15 	stw	zero,48(r16)
 400b440:	80000d15 	stw	zero,52(r16)
 400b444:	80001115 	stw	zero,68(r16)
 400b448:	80001215 	stw	zero,72(r16)
 400b44c:	dfc00417 	ldw	ra,16(sp)
 400b450:	dcc00317 	ldw	r19,12(sp)
 400b454:	dc800217 	ldw	r18,8(sp)
 400b458:	dc400117 	ldw	r17,4(sp)
 400b45c:	dc000017 	ldw	r16,0(sp)
 400b460:	dec00504 	addi	sp,sp,20
 400b464:	f800283a 	ret
 400b468:	01400104 	movi	r5,4
 400b46c:	9809883a 	mov	r4,r19
 400b470:	400b2fc0 	call	400b2fc <__sfmoreglue>
 400b474:	90800015 	stw	r2,0(r18)
 400b478:	103fde1e 	bne	r2,zero,400b3f4 <__alt_data_end+0xfc00b3f4>
 400b47c:	00800304 	movi	r2,12
 400b480:	98800015 	stw	r2,0(r19)
 400b484:	0005883a 	mov	r2,zero
 400b488:	003ff006 	br	400b44c <__alt_data_end+0xfc00b44c>

0400b48c <_cleanup>:
 400b48c:	008100b4 	movhi	r2,1026
 400b490:	10a2f004 	addi	r2,r2,-29760
 400b494:	11000017 	ldw	r4,0(r2)
 400b498:	01410074 	movhi	r5,1025
 400b49c:	29409104 	addi	r5,r5,580
 400b4a0:	400beb41 	jmpi	400beb4 <_fwalk_reent>

0400b4a4 <__sinit>:
 400b4a4:	20800e17 	ldw	r2,56(r4)
 400b4a8:	10000126 	beq	r2,zero,400b4b0 <__sinit+0xc>
 400b4ac:	f800283a 	ret
 400b4b0:	400b1581 	jmpi	400b158 <__sinit.part.1>

0400b4b4 <__sfp_lock_acquire>:
 400b4b4:	f800283a 	ret

0400b4b8 <__sfp_lock_release>:
 400b4b8:	f800283a 	ret

0400b4bc <__sinit_lock_acquire>:
 400b4bc:	f800283a 	ret

0400b4c0 <__sinit_lock_release>:
 400b4c0:	f800283a 	ret

0400b4c4 <__fp_lock_all>:
 400b4c4:	008100b4 	movhi	r2,1026
 400b4c8:	10a2f104 	addi	r2,r2,-29756
 400b4cc:	11000017 	ldw	r4,0(r2)
 400b4d0:	01410074 	movhi	r5,1025
 400b4d4:	296cbd04 	addi	r5,r5,-19724
 400b4d8:	400bdf01 	jmpi	400bdf0 <_fwalk>

0400b4dc <__fp_unlock_all>:
 400b4dc:	008100b4 	movhi	r2,1026
 400b4e0:	10a2f104 	addi	r2,r2,-29756
 400b4e4:	11000017 	ldw	r4,0(r2)
 400b4e8:	01410074 	movhi	r5,1025
 400b4ec:	296c5104 	addi	r5,r5,-20156
 400b4f0:	400bdf01 	jmpi	400bdf0 <_fwalk>

0400b4f4 <_malloc_trim_r>:
 400b4f4:	defffb04 	addi	sp,sp,-20
 400b4f8:	dcc00315 	stw	r19,12(sp)
 400b4fc:	04c10074 	movhi	r19,1025
 400b500:	dc800215 	stw	r18,8(sp)
 400b504:	dc400115 	stw	r17,4(sp)
 400b508:	dc000015 	stw	r16,0(sp)
 400b50c:	dfc00415 	stw	ra,16(sp)
 400b510:	2821883a 	mov	r16,r5
 400b514:	9cdd6604 	addi	r19,r19,30104
 400b518:	2025883a 	mov	r18,r4
 400b51c:	40145a80 	call	40145a8 <__malloc_lock>
 400b520:	98800217 	ldw	r2,8(r19)
 400b524:	14400117 	ldw	r17,4(r2)
 400b528:	00bfff04 	movi	r2,-4
 400b52c:	88a2703a 	and	r17,r17,r2
 400b530:	8c21c83a 	sub	r16,r17,r16
 400b534:	8403fbc4 	addi	r16,r16,4079
 400b538:	8020d33a 	srli	r16,r16,12
 400b53c:	0083ffc4 	movi	r2,4095
 400b540:	843fffc4 	addi	r16,r16,-1
 400b544:	8020933a 	slli	r16,r16,12
 400b548:	1400060e 	bge	r2,r16,400b564 <_malloc_trim_r+0x70>
 400b54c:	000b883a 	mov	r5,zero
 400b550:	9009883a 	mov	r4,r18
 400b554:	400e5f80 	call	400e5f8 <_sbrk_r>
 400b558:	98c00217 	ldw	r3,8(r19)
 400b55c:	1c47883a 	add	r3,r3,r17
 400b560:	10c00a26 	beq	r2,r3,400b58c <_malloc_trim_r+0x98>
 400b564:	9009883a 	mov	r4,r18
 400b568:	40145cc0 	call	40145cc <__malloc_unlock>
 400b56c:	0005883a 	mov	r2,zero
 400b570:	dfc00417 	ldw	ra,16(sp)
 400b574:	dcc00317 	ldw	r19,12(sp)
 400b578:	dc800217 	ldw	r18,8(sp)
 400b57c:	dc400117 	ldw	r17,4(sp)
 400b580:	dc000017 	ldw	r16,0(sp)
 400b584:	dec00504 	addi	sp,sp,20
 400b588:	f800283a 	ret
 400b58c:	040bc83a 	sub	r5,zero,r16
 400b590:	9009883a 	mov	r4,r18
 400b594:	400e5f80 	call	400e5f8 <_sbrk_r>
 400b598:	00ffffc4 	movi	r3,-1
 400b59c:	10c00d26 	beq	r2,r3,400b5d4 <_malloc_trim_r+0xe0>
 400b5a0:	00c100b4 	movhi	r3,1026
 400b5a4:	18e9fd04 	addi	r3,r3,-22540
 400b5a8:	18800017 	ldw	r2,0(r3)
 400b5ac:	99000217 	ldw	r4,8(r19)
 400b5b0:	8c23c83a 	sub	r17,r17,r16
 400b5b4:	8c400054 	ori	r17,r17,1
 400b5b8:	1421c83a 	sub	r16,r2,r16
 400b5bc:	24400115 	stw	r17,4(r4)
 400b5c0:	9009883a 	mov	r4,r18
 400b5c4:	1c000015 	stw	r16,0(r3)
 400b5c8:	40145cc0 	call	40145cc <__malloc_unlock>
 400b5cc:	00800044 	movi	r2,1
 400b5d0:	003fe706 	br	400b570 <__alt_data_end+0xfc00b570>
 400b5d4:	000b883a 	mov	r5,zero
 400b5d8:	9009883a 	mov	r4,r18
 400b5dc:	400e5f80 	call	400e5f8 <_sbrk_r>
 400b5e0:	99000217 	ldw	r4,8(r19)
 400b5e4:	014003c4 	movi	r5,15
 400b5e8:	1107c83a 	sub	r3,r2,r4
 400b5ec:	28ffdd0e 	bge	r5,r3,400b564 <__alt_data_end+0xfc00b564>
 400b5f0:	014100b4 	movhi	r5,1026
 400b5f4:	2962f304 	addi	r5,r5,-29748
 400b5f8:	29400017 	ldw	r5,0(r5)
 400b5fc:	18c00054 	ori	r3,r3,1
 400b600:	20c00115 	stw	r3,4(r4)
 400b604:	00c100b4 	movhi	r3,1026
 400b608:	1145c83a 	sub	r2,r2,r5
 400b60c:	18e9fd04 	addi	r3,r3,-22540
 400b610:	18800015 	stw	r2,0(r3)
 400b614:	003fd306 	br	400b564 <__alt_data_end+0xfc00b564>

0400b618 <_free_r>:
 400b618:	28004126 	beq	r5,zero,400b720 <_free_r+0x108>
 400b61c:	defffd04 	addi	sp,sp,-12
 400b620:	dc400115 	stw	r17,4(sp)
 400b624:	dc000015 	stw	r16,0(sp)
 400b628:	2023883a 	mov	r17,r4
 400b62c:	2821883a 	mov	r16,r5
 400b630:	dfc00215 	stw	ra,8(sp)
 400b634:	40145a80 	call	40145a8 <__malloc_lock>
 400b638:	81ffff17 	ldw	r7,-4(r16)
 400b63c:	00bfff84 	movi	r2,-2
 400b640:	01010074 	movhi	r4,1025
 400b644:	81bffe04 	addi	r6,r16,-8
 400b648:	3884703a 	and	r2,r7,r2
 400b64c:	211d6604 	addi	r4,r4,30104
 400b650:	308b883a 	add	r5,r6,r2
 400b654:	2a400117 	ldw	r9,4(r5)
 400b658:	22000217 	ldw	r8,8(r4)
 400b65c:	00ffff04 	movi	r3,-4
 400b660:	48c6703a 	and	r3,r9,r3
 400b664:	2a005726 	beq	r5,r8,400b7c4 <_free_r+0x1ac>
 400b668:	28c00115 	stw	r3,4(r5)
 400b66c:	39c0004c 	andi	r7,r7,1
 400b670:	3800091e 	bne	r7,zero,400b698 <_free_r+0x80>
 400b674:	823ffe17 	ldw	r8,-8(r16)
 400b678:	22400204 	addi	r9,r4,8
 400b67c:	320dc83a 	sub	r6,r6,r8
 400b680:	31c00217 	ldw	r7,8(r6)
 400b684:	1205883a 	add	r2,r2,r8
 400b688:	3a406526 	beq	r7,r9,400b820 <_free_r+0x208>
 400b68c:	32000317 	ldw	r8,12(r6)
 400b690:	3a000315 	stw	r8,12(r7)
 400b694:	41c00215 	stw	r7,8(r8)
 400b698:	28cf883a 	add	r7,r5,r3
 400b69c:	39c00117 	ldw	r7,4(r7)
 400b6a0:	39c0004c 	andi	r7,r7,1
 400b6a4:	38003a26 	beq	r7,zero,400b790 <_free_r+0x178>
 400b6a8:	10c00054 	ori	r3,r2,1
 400b6ac:	30c00115 	stw	r3,4(r6)
 400b6b0:	3087883a 	add	r3,r6,r2
 400b6b4:	18800015 	stw	r2,0(r3)
 400b6b8:	00c07fc4 	movi	r3,511
 400b6bc:	18801936 	bltu	r3,r2,400b724 <_free_r+0x10c>
 400b6c0:	1004d0fa 	srli	r2,r2,3
 400b6c4:	01c00044 	movi	r7,1
 400b6c8:	21400117 	ldw	r5,4(r4)
 400b6cc:	10c00044 	addi	r3,r2,1
 400b6d0:	18c7883a 	add	r3,r3,r3
 400b6d4:	1005d0ba 	srai	r2,r2,2
 400b6d8:	18c7883a 	add	r3,r3,r3
 400b6dc:	18c7883a 	add	r3,r3,r3
 400b6e0:	1907883a 	add	r3,r3,r4
 400b6e4:	3884983a 	sll	r2,r7,r2
 400b6e8:	19c00017 	ldw	r7,0(r3)
 400b6ec:	1a3ffe04 	addi	r8,r3,-8
 400b6f0:	1144b03a 	or	r2,r2,r5
 400b6f4:	32000315 	stw	r8,12(r6)
 400b6f8:	31c00215 	stw	r7,8(r6)
 400b6fc:	20800115 	stw	r2,4(r4)
 400b700:	19800015 	stw	r6,0(r3)
 400b704:	39800315 	stw	r6,12(r7)
 400b708:	8809883a 	mov	r4,r17
 400b70c:	dfc00217 	ldw	ra,8(sp)
 400b710:	dc400117 	ldw	r17,4(sp)
 400b714:	dc000017 	ldw	r16,0(sp)
 400b718:	dec00304 	addi	sp,sp,12
 400b71c:	40145cc1 	jmpi	40145cc <__malloc_unlock>
 400b720:	f800283a 	ret
 400b724:	100ad27a 	srli	r5,r2,9
 400b728:	00c00104 	movi	r3,4
 400b72c:	19404a36 	bltu	r3,r5,400b858 <_free_r+0x240>
 400b730:	100ad1ba 	srli	r5,r2,6
 400b734:	28c00e44 	addi	r3,r5,57
 400b738:	18c7883a 	add	r3,r3,r3
 400b73c:	29400e04 	addi	r5,r5,56
 400b740:	18c7883a 	add	r3,r3,r3
 400b744:	18c7883a 	add	r3,r3,r3
 400b748:	1909883a 	add	r4,r3,r4
 400b74c:	20c00017 	ldw	r3,0(r4)
 400b750:	01c10074 	movhi	r7,1025
 400b754:	213ffe04 	addi	r4,r4,-8
 400b758:	39dd6604 	addi	r7,r7,30104
 400b75c:	20c04426 	beq	r4,r3,400b870 <_free_r+0x258>
 400b760:	01ffff04 	movi	r7,-4
 400b764:	19400117 	ldw	r5,4(r3)
 400b768:	29ca703a 	and	r5,r5,r7
 400b76c:	1140022e 	bgeu	r2,r5,400b778 <_free_r+0x160>
 400b770:	18c00217 	ldw	r3,8(r3)
 400b774:	20fffb1e 	bne	r4,r3,400b764 <__alt_data_end+0xfc00b764>
 400b778:	19000317 	ldw	r4,12(r3)
 400b77c:	31000315 	stw	r4,12(r6)
 400b780:	30c00215 	stw	r3,8(r6)
 400b784:	21800215 	stw	r6,8(r4)
 400b788:	19800315 	stw	r6,12(r3)
 400b78c:	003fde06 	br	400b708 <__alt_data_end+0xfc00b708>
 400b790:	29c00217 	ldw	r7,8(r5)
 400b794:	10c5883a 	add	r2,r2,r3
 400b798:	00c10074 	movhi	r3,1025
 400b79c:	18dd6804 	addi	r3,r3,30112
 400b7a0:	38c03b26 	beq	r7,r3,400b890 <_free_r+0x278>
 400b7a4:	2a000317 	ldw	r8,12(r5)
 400b7a8:	11400054 	ori	r5,r2,1
 400b7ac:	3087883a 	add	r3,r6,r2
 400b7b0:	3a000315 	stw	r8,12(r7)
 400b7b4:	41c00215 	stw	r7,8(r8)
 400b7b8:	31400115 	stw	r5,4(r6)
 400b7bc:	18800015 	stw	r2,0(r3)
 400b7c0:	003fbd06 	br	400b6b8 <__alt_data_end+0xfc00b6b8>
 400b7c4:	39c0004c 	andi	r7,r7,1
 400b7c8:	10c5883a 	add	r2,r2,r3
 400b7cc:	3800071e 	bne	r7,zero,400b7ec <_free_r+0x1d4>
 400b7d0:	81fffe17 	ldw	r7,-8(r16)
 400b7d4:	31cdc83a 	sub	r6,r6,r7
 400b7d8:	30c00317 	ldw	r3,12(r6)
 400b7dc:	31400217 	ldw	r5,8(r6)
 400b7e0:	11c5883a 	add	r2,r2,r7
 400b7e4:	28c00315 	stw	r3,12(r5)
 400b7e8:	19400215 	stw	r5,8(r3)
 400b7ec:	10c00054 	ori	r3,r2,1
 400b7f0:	30c00115 	stw	r3,4(r6)
 400b7f4:	00c100b4 	movhi	r3,1026
 400b7f8:	18e2f404 	addi	r3,r3,-29744
 400b7fc:	18c00017 	ldw	r3,0(r3)
 400b800:	21800215 	stw	r6,8(r4)
 400b804:	10ffc036 	bltu	r2,r3,400b708 <__alt_data_end+0xfc00b708>
 400b808:	008100b4 	movhi	r2,1026
 400b80c:	10a9e704 	addi	r2,r2,-22628
 400b810:	11400017 	ldw	r5,0(r2)
 400b814:	8809883a 	mov	r4,r17
 400b818:	400b4f40 	call	400b4f4 <_malloc_trim_r>
 400b81c:	003fba06 	br	400b708 <__alt_data_end+0xfc00b708>
 400b820:	28c9883a 	add	r4,r5,r3
 400b824:	21000117 	ldw	r4,4(r4)
 400b828:	2100004c 	andi	r4,r4,1
 400b82c:	2000391e 	bne	r4,zero,400b914 <_free_r+0x2fc>
 400b830:	29c00217 	ldw	r7,8(r5)
 400b834:	29000317 	ldw	r4,12(r5)
 400b838:	1885883a 	add	r2,r3,r2
 400b83c:	10c00054 	ori	r3,r2,1
 400b840:	39000315 	stw	r4,12(r7)
 400b844:	21c00215 	stw	r7,8(r4)
 400b848:	30c00115 	stw	r3,4(r6)
 400b84c:	308d883a 	add	r6,r6,r2
 400b850:	30800015 	stw	r2,0(r6)
 400b854:	003fac06 	br	400b708 <__alt_data_end+0xfc00b708>
 400b858:	00c00504 	movi	r3,20
 400b85c:	19401536 	bltu	r3,r5,400b8b4 <_free_r+0x29c>
 400b860:	28c01704 	addi	r3,r5,92
 400b864:	18c7883a 	add	r3,r3,r3
 400b868:	294016c4 	addi	r5,r5,91
 400b86c:	003fb406 	br	400b740 <__alt_data_end+0xfc00b740>
 400b870:	280bd0ba 	srai	r5,r5,2
 400b874:	00c00044 	movi	r3,1
 400b878:	38800117 	ldw	r2,4(r7)
 400b87c:	194a983a 	sll	r5,r3,r5
 400b880:	2007883a 	mov	r3,r4
 400b884:	2884b03a 	or	r2,r5,r2
 400b888:	38800115 	stw	r2,4(r7)
 400b88c:	003fbb06 	br	400b77c <__alt_data_end+0xfc00b77c>
 400b890:	21800515 	stw	r6,20(r4)
 400b894:	21800415 	stw	r6,16(r4)
 400b898:	10c00054 	ori	r3,r2,1
 400b89c:	31c00315 	stw	r7,12(r6)
 400b8a0:	31c00215 	stw	r7,8(r6)
 400b8a4:	30c00115 	stw	r3,4(r6)
 400b8a8:	308d883a 	add	r6,r6,r2
 400b8ac:	30800015 	stw	r2,0(r6)
 400b8b0:	003f9506 	br	400b708 <__alt_data_end+0xfc00b708>
 400b8b4:	00c01504 	movi	r3,84
 400b8b8:	19400536 	bltu	r3,r5,400b8d0 <_free_r+0x2b8>
 400b8bc:	100ad33a 	srli	r5,r2,12
 400b8c0:	28c01bc4 	addi	r3,r5,111
 400b8c4:	18c7883a 	add	r3,r3,r3
 400b8c8:	29401b84 	addi	r5,r5,110
 400b8cc:	003f9c06 	br	400b740 <__alt_data_end+0xfc00b740>
 400b8d0:	00c05504 	movi	r3,340
 400b8d4:	19400536 	bltu	r3,r5,400b8ec <_free_r+0x2d4>
 400b8d8:	100ad3fa 	srli	r5,r2,15
 400b8dc:	28c01e04 	addi	r3,r5,120
 400b8e0:	18c7883a 	add	r3,r3,r3
 400b8e4:	29401dc4 	addi	r5,r5,119
 400b8e8:	003f9506 	br	400b740 <__alt_data_end+0xfc00b740>
 400b8ec:	00c15504 	movi	r3,1364
 400b8f0:	19400536 	bltu	r3,r5,400b908 <_free_r+0x2f0>
 400b8f4:	100ad4ba 	srli	r5,r2,18
 400b8f8:	28c01f44 	addi	r3,r5,125
 400b8fc:	18c7883a 	add	r3,r3,r3
 400b900:	29401f04 	addi	r5,r5,124
 400b904:	003f8e06 	br	400b740 <__alt_data_end+0xfc00b740>
 400b908:	00c03f84 	movi	r3,254
 400b90c:	01401f84 	movi	r5,126
 400b910:	003f8b06 	br	400b740 <__alt_data_end+0xfc00b740>
 400b914:	10c00054 	ori	r3,r2,1
 400b918:	30c00115 	stw	r3,4(r6)
 400b91c:	308d883a 	add	r6,r6,r2
 400b920:	30800015 	stw	r2,0(r6)
 400b924:	003f7806 	br	400b708 <__alt_data_end+0xfc00b708>

0400b928 <__sfvwrite_r>:
 400b928:	30800217 	ldw	r2,8(r6)
 400b92c:	10006726 	beq	r2,zero,400bacc <__sfvwrite_r+0x1a4>
 400b930:	28c0030b 	ldhu	r3,12(r5)
 400b934:	defff404 	addi	sp,sp,-48
 400b938:	dd400715 	stw	r21,28(sp)
 400b93c:	dd000615 	stw	r20,24(sp)
 400b940:	dc000215 	stw	r16,8(sp)
 400b944:	dfc00b15 	stw	ra,44(sp)
 400b948:	df000a15 	stw	fp,40(sp)
 400b94c:	ddc00915 	stw	r23,36(sp)
 400b950:	dd800815 	stw	r22,32(sp)
 400b954:	dcc00515 	stw	r19,20(sp)
 400b958:	dc800415 	stw	r18,16(sp)
 400b95c:	dc400315 	stw	r17,12(sp)
 400b960:	1880020c 	andi	r2,r3,8
 400b964:	2821883a 	mov	r16,r5
 400b968:	202b883a 	mov	r21,r4
 400b96c:	3029883a 	mov	r20,r6
 400b970:	10002726 	beq	r2,zero,400ba10 <__sfvwrite_r+0xe8>
 400b974:	28800417 	ldw	r2,16(r5)
 400b978:	10002526 	beq	r2,zero,400ba10 <__sfvwrite_r+0xe8>
 400b97c:	1880008c 	andi	r2,r3,2
 400b980:	a4400017 	ldw	r17,0(r20)
 400b984:	10002a26 	beq	r2,zero,400ba30 <__sfvwrite_r+0x108>
 400b988:	05a00034 	movhi	r22,32768
 400b98c:	0027883a 	mov	r19,zero
 400b990:	0025883a 	mov	r18,zero
 400b994:	b5bf0004 	addi	r22,r22,-1024
 400b998:	980d883a 	mov	r6,r19
 400b99c:	a809883a 	mov	r4,r21
 400b9a0:	90004626 	beq	r18,zero,400babc <__sfvwrite_r+0x194>
 400b9a4:	900f883a 	mov	r7,r18
 400b9a8:	b480022e 	bgeu	r22,r18,400b9b4 <__sfvwrite_r+0x8c>
 400b9ac:	01e00034 	movhi	r7,32768
 400b9b0:	39ff0004 	addi	r7,r7,-1024
 400b9b4:	80800917 	ldw	r2,36(r16)
 400b9b8:	81400717 	ldw	r5,28(r16)
 400b9bc:	103ee83a 	callr	r2
 400b9c0:	00805a0e 	bge	zero,r2,400bb2c <__sfvwrite_r+0x204>
 400b9c4:	a0c00217 	ldw	r3,8(r20)
 400b9c8:	98a7883a 	add	r19,r19,r2
 400b9cc:	90a5c83a 	sub	r18,r18,r2
 400b9d0:	1885c83a 	sub	r2,r3,r2
 400b9d4:	a0800215 	stw	r2,8(r20)
 400b9d8:	103fef1e 	bne	r2,zero,400b998 <__alt_data_end+0xfc00b998>
 400b9dc:	0005883a 	mov	r2,zero
 400b9e0:	dfc00b17 	ldw	ra,44(sp)
 400b9e4:	df000a17 	ldw	fp,40(sp)
 400b9e8:	ddc00917 	ldw	r23,36(sp)
 400b9ec:	dd800817 	ldw	r22,32(sp)
 400b9f0:	dd400717 	ldw	r21,28(sp)
 400b9f4:	dd000617 	ldw	r20,24(sp)
 400b9f8:	dcc00517 	ldw	r19,20(sp)
 400b9fc:	dc800417 	ldw	r18,16(sp)
 400ba00:	dc400317 	ldw	r17,12(sp)
 400ba04:	dc000217 	ldw	r16,8(sp)
 400ba08:	dec00c04 	addi	sp,sp,48
 400ba0c:	f800283a 	ret
 400ba10:	800b883a 	mov	r5,r16
 400ba14:	a809883a 	mov	r4,r21
 400ba18:	40094980 	call	4009498 <__swsetup_r>
 400ba1c:	1000ee1e 	bne	r2,zero,400bdd8 <__sfvwrite_r+0x4b0>
 400ba20:	80c0030b 	ldhu	r3,12(r16)
 400ba24:	a4400017 	ldw	r17,0(r20)
 400ba28:	1880008c 	andi	r2,r3,2
 400ba2c:	103fd61e 	bne	r2,zero,400b988 <__alt_data_end+0xfc00b988>
 400ba30:	1880004c 	andi	r2,r3,1
 400ba34:	1000421e 	bne	r2,zero,400bb40 <__sfvwrite_r+0x218>
 400ba38:	0039883a 	mov	fp,zero
 400ba3c:	0025883a 	mov	r18,zero
 400ba40:	90001a26 	beq	r18,zero,400baac <__sfvwrite_r+0x184>
 400ba44:	1880800c 	andi	r2,r3,512
 400ba48:	84c00217 	ldw	r19,8(r16)
 400ba4c:	10002126 	beq	r2,zero,400bad4 <__sfvwrite_r+0x1ac>
 400ba50:	982f883a 	mov	r23,r19
 400ba54:	94c09636 	bltu	r18,r19,400bcb0 <__sfvwrite_r+0x388>
 400ba58:	1881200c 	andi	r2,r3,1152
 400ba5c:	1000a11e 	bne	r2,zero,400bce4 <__sfvwrite_r+0x3bc>
 400ba60:	81000017 	ldw	r4,0(r16)
 400ba64:	b80d883a 	mov	r6,r23
 400ba68:	e00b883a 	mov	r5,fp
 400ba6c:	400cca40 	call	400cca4 <memmove>
 400ba70:	80c00217 	ldw	r3,8(r16)
 400ba74:	81000017 	ldw	r4,0(r16)
 400ba78:	9005883a 	mov	r2,r18
 400ba7c:	1ce7c83a 	sub	r19,r3,r19
 400ba80:	25cf883a 	add	r7,r4,r23
 400ba84:	84c00215 	stw	r19,8(r16)
 400ba88:	81c00015 	stw	r7,0(r16)
 400ba8c:	a0c00217 	ldw	r3,8(r20)
 400ba90:	e0b9883a 	add	fp,fp,r2
 400ba94:	90a5c83a 	sub	r18,r18,r2
 400ba98:	18a7c83a 	sub	r19,r3,r2
 400ba9c:	a4c00215 	stw	r19,8(r20)
 400baa0:	983fce26 	beq	r19,zero,400b9dc <__alt_data_end+0xfc00b9dc>
 400baa4:	80c0030b 	ldhu	r3,12(r16)
 400baa8:	903fe61e 	bne	r18,zero,400ba44 <__alt_data_end+0xfc00ba44>
 400baac:	8f000017 	ldw	fp,0(r17)
 400bab0:	8c800117 	ldw	r18,4(r17)
 400bab4:	8c400204 	addi	r17,r17,8
 400bab8:	003fe106 	br	400ba40 <__alt_data_end+0xfc00ba40>
 400babc:	8cc00017 	ldw	r19,0(r17)
 400bac0:	8c800117 	ldw	r18,4(r17)
 400bac4:	8c400204 	addi	r17,r17,8
 400bac8:	003fb306 	br	400b998 <__alt_data_end+0xfc00b998>
 400bacc:	0005883a 	mov	r2,zero
 400bad0:	f800283a 	ret
 400bad4:	81000017 	ldw	r4,0(r16)
 400bad8:	80800417 	ldw	r2,16(r16)
 400badc:	11005a36 	bltu	r2,r4,400bc48 <__sfvwrite_r+0x320>
 400bae0:	85c00517 	ldw	r23,20(r16)
 400bae4:	95c05836 	bltu	r18,r23,400bc48 <__sfvwrite_r+0x320>
 400bae8:	00a00034 	movhi	r2,32768
 400baec:	10bfffc4 	addi	r2,r2,-1
 400baf0:	9009883a 	mov	r4,r18
 400baf4:	1480012e 	bgeu	r2,r18,400bafc <__sfvwrite_r+0x1d4>
 400baf8:	1009883a 	mov	r4,r2
 400bafc:	b80b883a 	mov	r5,r23
 400bb00:	4006b1c0 	call	4006b1c <__divsi3>
 400bb04:	b80b883a 	mov	r5,r23
 400bb08:	1009883a 	mov	r4,r2
 400bb0c:	4006cd00 	call	4006cd0 <__mulsi3>
 400bb10:	81400717 	ldw	r5,28(r16)
 400bb14:	80c00917 	ldw	r3,36(r16)
 400bb18:	100f883a 	mov	r7,r2
 400bb1c:	e00d883a 	mov	r6,fp
 400bb20:	a809883a 	mov	r4,r21
 400bb24:	183ee83a 	callr	r3
 400bb28:	00bfd816 	blt	zero,r2,400ba8c <__alt_data_end+0xfc00ba8c>
 400bb2c:	8080030b 	ldhu	r2,12(r16)
 400bb30:	10801014 	ori	r2,r2,64
 400bb34:	8080030d 	sth	r2,12(r16)
 400bb38:	00bfffc4 	movi	r2,-1
 400bb3c:	003fa806 	br	400b9e0 <__alt_data_end+0xfc00b9e0>
 400bb40:	0027883a 	mov	r19,zero
 400bb44:	0011883a 	mov	r8,zero
 400bb48:	0039883a 	mov	fp,zero
 400bb4c:	0025883a 	mov	r18,zero
 400bb50:	90001f26 	beq	r18,zero,400bbd0 <__sfvwrite_r+0x2a8>
 400bb54:	40005a26 	beq	r8,zero,400bcc0 <__sfvwrite_r+0x398>
 400bb58:	982d883a 	mov	r22,r19
 400bb5c:	94c0012e 	bgeu	r18,r19,400bb64 <__sfvwrite_r+0x23c>
 400bb60:	902d883a 	mov	r22,r18
 400bb64:	81000017 	ldw	r4,0(r16)
 400bb68:	80800417 	ldw	r2,16(r16)
 400bb6c:	b02f883a 	mov	r23,r22
 400bb70:	81c00517 	ldw	r7,20(r16)
 400bb74:	1100032e 	bgeu	r2,r4,400bb84 <__sfvwrite_r+0x25c>
 400bb78:	80c00217 	ldw	r3,8(r16)
 400bb7c:	38c7883a 	add	r3,r7,r3
 400bb80:	1d801816 	blt	r3,r22,400bbe4 <__sfvwrite_r+0x2bc>
 400bb84:	b1c03e16 	blt	r22,r7,400bc80 <__sfvwrite_r+0x358>
 400bb88:	80800917 	ldw	r2,36(r16)
 400bb8c:	81400717 	ldw	r5,28(r16)
 400bb90:	e00d883a 	mov	r6,fp
 400bb94:	da000115 	stw	r8,4(sp)
 400bb98:	a809883a 	mov	r4,r21
 400bb9c:	103ee83a 	callr	r2
 400bba0:	102f883a 	mov	r23,r2
 400bba4:	da000117 	ldw	r8,4(sp)
 400bba8:	00bfe00e 	bge	zero,r2,400bb2c <__alt_data_end+0xfc00bb2c>
 400bbac:	9de7c83a 	sub	r19,r19,r23
 400bbb0:	98001f26 	beq	r19,zero,400bc30 <__sfvwrite_r+0x308>
 400bbb4:	a0800217 	ldw	r2,8(r20)
 400bbb8:	e5f9883a 	add	fp,fp,r23
 400bbbc:	95e5c83a 	sub	r18,r18,r23
 400bbc0:	15efc83a 	sub	r23,r2,r23
 400bbc4:	a5c00215 	stw	r23,8(r20)
 400bbc8:	b83f8426 	beq	r23,zero,400b9dc <__alt_data_end+0xfc00b9dc>
 400bbcc:	903fe11e 	bne	r18,zero,400bb54 <__alt_data_end+0xfc00bb54>
 400bbd0:	8f000017 	ldw	fp,0(r17)
 400bbd4:	8c800117 	ldw	r18,4(r17)
 400bbd8:	0011883a 	mov	r8,zero
 400bbdc:	8c400204 	addi	r17,r17,8
 400bbe0:	003fdb06 	br	400bb50 <__alt_data_end+0xfc00bb50>
 400bbe4:	180d883a 	mov	r6,r3
 400bbe8:	e00b883a 	mov	r5,fp
 400bbec:	da000115 	stw	r8,4(sp)
 400bbf0:	d8c00015 	stw	r3,0(sp)
 400bbf4:	400cca40 	call	400cca4 <memmove>
 400bbf8:	d8c00017 	ldw	r3,0(sp)
 400bbfc:	80800017 	ldw	r2,0(r16)
 400bc00:	800b883a 	mov	r5,r16
 400bc04:	a809883a 	mov	r4,r21
 400bc08:	10c5883a 	add	r2,r2,r3
 400bc0c:	80800015 	stw	r2,0(r16)
 400bc10:	d8c00015 	stw	r3,0(sp)
 400bc14:	400b0b80 	call	400b0b8 <_fflush_r>
 400bc18:	d8c00017 	ldw	r3,0(sp)
 400bc1c:	da000117 	ldw	r8,4(sp)
 400bc20:	103fc21e 	bne	r2,zero,400bb2c <__alt_data_end+0xfc00bb2c>
 400bc24:	182f883a 	mov	r23,r3
 400bc28:	9de7c83a 	sub	r19,r19,r23
 400bc2c:	983fe11e 	bne	r19,zero,400bbb4 <__alt_data_end+0xfc00bbb4>
 400bc30:	800b883a 	mov	r5,r16
 400bc34:	a809883a 	mov	r4,r21
 400bc38:	400b0b80 	call	400b0b8 <_fflush_r>
 400bc3c:	103fbb1e 	bne	r2,zero,400bb2c <__alt_data_end+0xfc00bb2c>
 400bc40:	0011883a 	mov	r8,zero
 400bc44:	003fdb06 	br	400bbb4 <__alt_data_end+0xfc00bbb4>
 400bc48:	94c0012e 	bgeu	r18,r19,400bc50 <__sfvwrite_r+0x328>
 400bc4c:	9027883a 	mov	r19,r18
 400bc50:	980d883a 	mov	r6,r19
 400bc54:	e00b883a 	mov	r5,fp
 400bc58:	400cca40 	call	400cca4 <memmove>
 400bc5c:	80800217 	ldw	r2,8(r16)
 400bc60:	80c00017 	ldw	r3,0(r16)
 400bc64:	14c5c83a 	sub	r2,r2,r19
 400bc68:	1cc7883a 	add	r3,r3,r19
 400bc6c:	80800215 	stw	r2,8(r16)
 400bc70:	80c00015 	stw	r3,0(r16)
 400bc74:	10004326 	beq	r2,zero,400bd84 <__sfvwrite_r+0x45c>
 400bc78:	9805883a 	mov	r2,r19
 400bc7c:	003f8306 	br	400ba8c <__alt_data_end+0xfc00ba8c>
 400bc80:	b00d883a 	mov	r6,r22
 400bc84:	e00b883a 	mov	r5,fp
 400bc88:	da000115 	stw	r8,4(sp)
 400bc8c:	400cca40 	call	400cca4 <memmove>
 400bc90:	80800217 	ldw	r2,8(r16)
 400bc94:	80c00017 	ldw	r3,0(r16)
 400bc98:	da000117 	ldw	r8,4(sp)
 400bc9c:	1585c83a 	sub	r2,r2,r22
 400bca0:	1dad883a 	add	r22,r3,r22
 400bca4:	80800215 	stw	r2,8(r16)
 400bca8:	85800015 	stw	r22,0(r16)
 400bcac:	003fbf06 	br	400bbac <__alt_data_end+0xfc00bbac>
 400bcb0:	81000017 	ldw	r4,0(r16)
 400bcb4:	9027883a 	mov	r19,r18
 400bcb8:	902f883a 	mov	r23,r18
 400bcbc:	003f6906 	br	400ba64 <__alt_data_end+0xfc00ba64>
 400bcc0:	900d883a 	mov	r6,r18
 400bcc4:	01400284 	movi	r5,10
 400bcc8:	e009883a 	mov	r4,fp
 400bccc:	400ca780 	call	400ca78 <memchr>
 400bcd0:	10003e26 	beq	r2,zero,400bdcc <__sfvwrite_r+0x4a4>
 400bcd4:	10800044 	addi	r2,r2,1
 400bcd8:	1727c83a 	sub	r19,r2,fp
 400bcdc:	02000044 	movi	r8,1
 400bce0:	003f9d06 	br	400bb58 <__alt_data_end+0xfc00bb58>
 400bce4:	80800517 	ldw	r2,20(r16)
 400bce8:	81400417 	ldw	r5,16(r16)
 400bcec:	81c00017 	ldw	r7,0(r16)
 400bcf0:	10a7883a 	add	r19,r2,r2
 400bcf4:	9885883a 	add	r2,r19,r2
 400bcf8:	1026d7fa 	srli	r19,r2,31
 400bcfc:	396dc83a 	sub	r22,r7,r5
 400bd00:	b1000044 	addi	r4,r22,1
 400bd04:	9885883a 	add	r2,r19,r2
 400bd08:	1027d07a 	srai	r19,r2,1
 400bd0c:	2485883a 	add	r2,r4,r18
 400bd10:	980d883a 	mov	r6,r19
 400bd14:	9880022e 	bgeu	r19,r2,400bd20 <__sfvwrite_r+0x3f8>
 400bd18:	1027883a 	mov	r19,r2
 400bd1c:	100d883a 	mov	r6,r2
 400bd20:	18c1000c 	andi	r3,r3,1024
 400bd24:	18001c26 	beq	r3,zero,400bd98 <__sfvwrite_r+0x470>
 400bd28:	300b883a 	mov	r5,r6
 400bd2c:	a809883a 	mov	r4,r21
 400bd30:	400c26c0 	call	400c26c <_malloc_r>
 400bd34:	102f883a 	mov	r23,r2
 400bd38:	10002926 	beq	r2,zero,400bde0 <__sfvwrite_r+0x4b8>
 400bd3c:	81400417 	ldw	r5,16(r16)
 400bd40:	b00d883a 	mov	r6,r22
 400bd44:	1009883a 	mov	r4,r2
 400bd48:	400cb5c0 	call	400cb5c <memcpy>
 400bd4c:	8080030b 	ldhu	r2,12(r16)
 400bd50:	00fedfc4 	movi	r3,-1153
 400bd54:	10c4703a 	and	r2,r2,r3
 400bd58:	10802014 	ori	r2,r2,128
 400bd5c:	8080030d 	sth	r2,12(r16)
 400bd60:	bd89883a 	add	r4,r23,r22
 400bd64:	9d8fc83a 	sub	r7,r19,r22
 400bd68:	85c00415 	stw	r23,16(r16)
 400bd6c:	84c00515 	stw	r19,20(r16)
 400bd70:	81000015 	stw	r4,0(r16)
 400bd74:	9027883a 	mov	r19,r18
 400bd78:	81c00215 	stw	r7,8(r16)
 400bd7c:	902f883a 	mov	r23,r18
 400bd80:	003f3806 	br	400ba64 <__alt_data_end+0xfc00ba64>
 400bd84:	800b883a 	mov	r5,r16
 400bd88:	a809883a 	mov	r4,r21
 400bd8c:	400b0b80 	call	400b0b8 <_fflush_r>
 400bd90:	103fb926 	beq	r2,zero,400bc78 <__alt_data_end+0xfc00bc78>
 400bd94:	003f6506 	br	400bb2c <__alt_data_end+0xfc00bb2c>
 400bd98:	a809883a 	mov	r4,r21
 400bd9c:	400e0200 	call	400e020 <_realloc_r>
 400bda0:	102f883a 	mov	r23,r2
 400bda4:	103fee1e 	bne	r2,zero,400bd60 <__alt_data_end+0xfc00bd60>
 400bda8:	81400417 	ldw	r5,16(r16)
 400bdac:	a809883a 	mov	r4,r21
 400bdb0:	400b6180 	call	400b618 <_free_r>
 400bdb4:	8080030b 	ldhu	r2,12(r16)
 400bdb8:	00ffdfc4 	movi	r3,-129
 400bdbc:	1884703a 	and	r2,r3,r2
 400bdc0:	00c00304 	movi	r3,12
 400bdc4:	a8c00015 	stw	r3,0(r21)
 400bdc8:	003f5906 	br	400bb30 <__alt_data_end+0xfc00bb30>
 400bdcc:	94c00044 	addi	r19,r18,1
 400bdd0:	02000044 	movi	r8,1
 400bdd4:	003f6006 	br	400bb58 <__alt_data_end+0xfc00bb58>
 400bdd8:	00bfffc4 	movi	r2,-1
 400bddc:	003f0006 	br	400b9e0 <__alt_data_end+0xfc00b9e0>
 400bde0:	00800304 	movi	r2,12
 400bde4:	a8800015 	stw	r2,0(r21)
 400bde8:	8080030b 	ldhu	r2,12(r16)
 400bdec:	003f5006 	br	400bb30 <__alt_data_end+0xfc00bb30>

0400bdf0 <_fwalk>:
 400bdf0:	defff704 	addi	sp,sp,-36
 400bdf4:	dd000415 	stw	r20,16(sp)
 400bdf8:	dfc00815 	stw	ra,32(sp)
 400bdfc:	ddc00715 	stw	r23,28(sp)
 400be00:	dd800615 	stw	r22,24(sp)
 400be04:	dd400515 	stw	r21,20(sp)
 400be08:	dcc00315 	stw	r19,12(sp)
 400be0c:	dc800215 	stw	r18,8(sp)
 400be10:	dc400115 	stw	r17,4(sp)
 400be14:	dc000015 	stw	r16,0(sp)
 400be18:	2500b804 	addi	r20,r4,736
 400be1c:	a0002326 	beq	r20,zero,400beac <_fwalk+0xbc>
 400be20:	282b883a 	mov	r21,r5
 400be24:	002f883a 	mov	r23,zero
 400be28:	05800044 	movi	r22,1
 400be2c:	04ffffc4 	movi	r19,-1
 400be30:	a4400117 	ldw	r17,4(r20)
 400be34:	a4800217 	ldw	r18,8(r20)
 400be38:	8c7fffc4 	addi	r17,r17,-1
 400be3c:	88000d16 	blt	r17,zero,400be74 <_fwalk+0x84>
 400be40:	94000304 	addi	r16,r18,12
 400be44:	94800384 	addi	r18,r18,14
 400be48:	8080000b 	ldhu	r2,0(r16)
 400be4c:	8c7fffc4 	addi	r17,r17,-1
 400be50:	813ffd04 	addi	r4,r16,-12
 400be54:	b080042e 	bgeu	r22,r2,400be68 <_fwalk+0x78>
 400be58:	9080000f 	ldh	r2,0(r18)
 400be5c:	14c00226 	beq	r2,r19,400be68 <_fwalk+0x78>
 400be60:	a83ee83a 	callr	r21
 400be64:	b8aeb03a 	or	r23,r23,r2
 400be68:	84001a04 	addi	r16,r16,104
 400be6c:	94801a04 	addi	r18,r18,104
 400be70:	8cfff51e 	bne	r17,r19,400be48 <__alt_data_end+0xfc00be48>
 400be74:	a5000017 	ldw	r20,0(r20)
 400be78:	a03fed1e 	bne	r20,zero,400be30 <__alt_data_end+0xfc00be30>
 400be7c:	b805883a 	mov	r2,r23
 400be80:	dfc00817 	ldw	ra,32(sp)
 400be84:	ddc00717 	ldw	r23,28(sp)
 400be88:	dd800617 	ldw	r22,24(sp)
 400be8c:	dd400517 	ldw	r21,20(sp)
 400be90:	dd000417 	ldw	r20,16(sp)
 400be94:	dcc00317 	ldw	r19,12(sp)
 400be98:	dc800217 	ldw	r18,8(sp)
 400be9c:	dc400117 	ldw	r17,4(sp)
 400bea0:	dc000017 	ldw	r16,0(sp)
 400bea4:	dec00904 	addi	sp,sp,36
 400bea8:	f800283a 	ret
 400beac:	002f883a 	mov	r23,zero
 400beb0:	003ff206 	br	400be7c <__alt_data_end+0xfc00be7c>

0400beb4 <_fwalk_reent>:
 400beb4:	defff704 	addi	sp,sp,-36
 400beb8:	dd000415 	stw	r20,16(sp)
 400bebc:	dfc00815 	stw	ra,32(sp)
 400bec0:	ddc00715 	stw	r23,28(sp)
 400bec4:	dd800615 	stw	r22,24(sp)
 400bec8:	dd400515 	stw	r21,20(sp)
 400becc:	dcc00315 	stw	r19,12(sp)
 400bed0:	dc800215 	stw	r18,8(sp)
 400bed4:	dc400115 	stw	r17,4(sp)
 400bed8:	dc000015 	stw	r16,0(sp)
 400bedc:	2500b804 	addi	r20,r4,736
 400bee0:	a0002326 	beq	r20,zero,400bf70 <_fwalk_reent+0xbc>
 400bee4:	282b883a 	mov	r21,r5
 400bee8:	2027883a 	mov	r19,r4
 400beec:	002f883a 	mov	r23,zero
 400bef0:	05800044 	movi	r22,1
 400bef4:	04bfffc4 	movi	r18,-1
 400bef8:	a4400117 	ldw	r17,4(r20)
 400befc:	a4000217 	ldw	r16,8(r20)
 400bf00:	8c7fffc4 	addi	r17,r17,-1
 400bf04:	88000c16 	blt	r17,zero,400bf38 <_fwalk_reent+0x84>
 400bf08:	84000304 	addi	r16,r16,12
 400bf0c:	8080000b 	ldhu	r2,0(r16)
 400bf10:	8c7fffc4 	addi	r17,r17,-1
 400bf14:	817ffd04 	addi	r5,r16,-12
 400bf18:	b080052e 	bgeu	r22,r2,400bf30 <_fwalk_reent+0x7c>
 400bf1c:	8080008f 	ldh	r2,2(r16)
 400bf20:	9809883a 	mov	r4,r19
 400bf24:	14800226 	beq	r2,r18,400bf30 <_fwalk_reent+0x7c>
 400bf28:	a83ee83a 	callr	r21
 400bf2c:	b8aeb03a 	or	r23,r23,r2
 400bf30:	84001a04 	addi	r16,r16,104
 400bf34:	8cbff51e 	bne	r17,r18,400bf0c <__alt_data_end+0xfc00bf0c>
 400bf38:	a5000017 	ldw	r20,0(r20)
 400bf3c:	a03fee1e 	bne	r20,zero,400bef8 <__alt_data_end+0xfc00bef8>
 400bf40:	b805883a 	mov	r2,r23
 400bf44:	dfc00817 	ldw	ra,32(sp)
 400bf48:	ddc00717 	ldw	r23,28(sp)
 400bf4c:	dd800617 	ldw	r22,24(sp)
 400bf50:	dd400517 	ldw	r21,20(sp)
 400bf54:	dd000417 	ldw	r20,16(sp)
 400bf58:	dcc00317 	ldw	r19,12(sp)
 400bf5c:	dc800217 	ldw	r18,8(sp)
 400bf60:	dc400117 	ldw	r17,4(sp)
 400bf64:	dc000017 	ldw	r16,0(sp)
 400bf68:	dec00904 	addi	sp,sp,36
 400bf6c:	f800283a 	ret
 400bf70:	002f883a 	mov	r23,zero
 400bf74:	003ff206 	br	400bf40 <__alt_data_end+0xfc00bf40>

0400bf78 <_gettimeofday_r>:
 400bf78:	defffd04 	addi	sp,sp,-12
 400bf7c:	2805883a 	mov	r2,r5
 400bf80:	dc000015 	stw	r16,0(sp)
 400bf84:	040100b4 	movhi	r16,1026
 400bf88:	dc400115 	stw	r17,4(sp)
 400bf8c:	8429e104 	addi	r16,r16,-22652
 400bf90:	2023883a 	mov	r17,r4
 400bf94:	300b883a 	mov	r5,r6
 400bf98:	1009883a 	mov	r4,r2
 400bf9c:	dfc00215 	stw	ra,8(sp)
 400bfa0:	80000015 	stw	zero,0(r16)
 400bfa4:	401404c0 	call	401404c <gettimeofday>
 400bfa8:	00ffffc4 	movi	r3,-1
 400bfac:	10c00526 	beq	r2,r3,400bfc4 <_gettimeofday_r+0x4c>
 400bfb0:	dfc00217 	ldw	ra,8(sp)
 400bfb4:	dc400117 	ldw	r17,4(sp)
 400bfb8:	dc000017 	ldw	r16,0(sp)
 400bfbc:	dec00304 	addi	sp,sp,12
 400bfc0:	f800283a 	ret
 400bfc4:	80c00017 	ldw	r3,0(r16)
 400bfc8:	183ff926 	beq	r3,zero,400bfb0 <__alt_data_end+0xfc00bfb0>
 400bfcc:	88c00015 	stw	r3,0(r17)
 400bfd0:	003ff706 	br	400bfb0 <__alt_data_end+0xfc00bfb0>

0400bfd4 <_setlocale_r>:
 400bfd4:	30001b26 	beq	r6,zero,400c044 <_setlocale_r+0x70>
 400bfd8:	01410074 	movhi	r5,1025
 400bfdc:	defffe04 	addi	sp,sp,-8
 400bfe0:	295b8804 	addi	r5,r5,28192
 400bfe4:	3009883a 	mov	r4,r6
 400bfe8:	dc000015 	stw	r16,0(sp)
 400bfec:	dfc00115 	stw	ra,4(sp)
 400bff0:	3021883a 	mov	r16,r6
 400bff4:	400e7880 	call	400e788 <strcmp>
 400bff8:	1000061e 	bne	r2,zero,400c014 <_setlocale_r+0x40>
 400bffc:	00810074 	movhi	r2,1025
 400c000:	109b8704 	addi	r2,r2,28188
 400c004:	dfc00117 	ldw	ra,4(sp)
 400c008:	dc000017 	ldw	r16,0(sp)
 400c00c:	dec00204 	addi	sp,sp,8
 400c010:	f800283a 	ret
 400c014:	01410074 	movhi	r5,1025
 400c018:	295b8704 	addi	r5,r5,28188
 400c01c:	8009883a 	mov	r4,r16
 400c020:	400e7880 	call	400e788 <strcmp>
 400c024:	103ff526 	beq	r2,zero,400bffc <__alt_data_end+0xfc00bffc>
 400c028:	01410074 	movhi	r5,1025
 400c02c:	295b7204 	addi	r5,r5,28104
 400c030:	8009883a 	mov	r4,r16
 400c034:	400e7880 	call	400e788 <strcmp>
 400c038:	103ff026 	beq	r2,zero,400bffc <__alt_data_end+0xfc00bffc>
 400c03c:	0005883a 	mov	r2,zero
 400c040:	003ff006 	br	400c004 <__alt_data_end+0xfc00c004>
 400c044:	00810074 	movhi	r2,1025
 400c048:	109b8704 	addi	r2,r2,28188
 400c04c:	f800283a 	ret

0400c050 <__locale_charset>:
 400c050:	00810074 	movhi	r2,1025
 400c054:	109d5004 	addi	r2,r2,30016
 400c058:	f800283a 	ret

0400c05c <__locale_mb_cur_max>:
 400c05c:	008100b4 	movhi	r2,1026
 400c060:	10a2f204 	addi	r2,r2,-29752
 400c064:	10800017 	ldw	r2,0(r2)
 400c068:	f800283a 	ret

0400c06c <__locale_msgcharset>:
 400c06c:	00810074 	movhi	r2,1025
 400c070:	109d4804 	addi	r2,r2,29984
 400c074:	f800283a 	ret

0400c078 <__locale_cjk_lang>:
 400c078:	0005883a 	mov	r2,zero
 400c07c:	f800283a 	ret

0400c080 <_localeconv_r>:
 400c080:	00810074 	movhi	r2,1025
 400c084:	109d5804 	addi	r2,r2,30048
 400c088:	f800283a 	ret

0400c08c <setlocale>:
 400c08c:	008100b4 	movhi	r2,1026
 400c090:	10a2f104 	addi	r2,r2,-29756
 400c094:	280d883a 	mov	r6,r5
 400c098:	200b883a 	mov	r5,r4
 400c09c:	11000017 	ldw	r4,0(r2)
 400c0a0:	400bfd41 	jmpi	400bfd4 <_setlocale_r>

0400c0a4 <localeconv>:
 400c0a4:	00810074 	movhi	r2,1025
 400c0a8:	109d5804 	addi	r2,r2,30048
 400c0ac:	f800283a 	ret

0400c0b0 <__smakebuf_r>:
 400c0b0:	2880030b 	ldhu	r2,12(r5)
 400c0b4:	10c0008c 	andi	r3,r2,2
 400c0b8:	1800411e 	bne	r3,zero,400c1c0 <__smakebuf_r+0x110>
 400c0bc:	deffec04 	addi	sp,sp,-80
 400c0c0:	dc000f15 	stw	r16,60(sp)
 400c0c4:	2821883a 	mov	r16,r5
 400c0c8:	2940038f 	ldh	r5,14(r5)
 400c0cc:	dc401015 	stw	r17,64(sp)
 400c0d0:	dfc01315 	stw	ra,76(sp)
 400c0d4:	dcc01215 	stw	r19,72(sp)
 400c0d8:	dc801115 	stw	r18,68(sp)
 400c0dc:	2023883a 	mov	r17,r4
 400c0e0:	28001c16 	blt	r5,zero,400c154 <__smakebuf_r+0xa4>
 400c0e4:	d80d883a 	mov	r6,sp
 400c0e8:	40105500 	call	4010550 <_fstat_r>
 400c0ec:	10001816 	blt	r2,zero,400c150 <__smakebuf_r+0xa0>
 400c0f0:	d8800117 	ldw	r2,4(sp)
 400c0f4:	00e00014 	movui	r3,32768
 400c0f8:	10bc000c 	andi	r2,r2,61440
 400c0fc:	14c80020 	cmpeqi	r19,r2,8192
 400c100:	10c03726 	beq	r2,r3,400c1e0 <__smakebuf_r+0x130>
 400c104:	80c0030b 	ldhu	r3,12(r16)
 400c108:	18c20014 	ori	r3,r3,2048
 400c10c:	80c0030d 	sth	r3,12(r16)
 400c110:	00c80004 	movi	r3,8192
 400c114:	10c0521e 	bne	r2,r3,400c260 <__smakebuf_r+0x1b0>
 400c118:	8140038f 	ldh	r5,14(r16)
 400c11c:	8809883a 	mov	r4,r17
 400c120:	40105ac0 	call	40105ac <_isatty_r>
 400c124:	10004c26 	beq	r2,zero,400c258 <__smakebuf_r+0x1a8>
 400c128:	8080030b 	ldhu	r2,12(r16)
 400c12c:	80c010c4 	addi	r3,r16,67
 400c130:	80c00015 	stw	r3,0(r16)
 400c134:	10800054 	ori	r2,r2,1
 400c138:	8080030d 	sth	r2,12(r16)
 400c13c:	00800044 	movi	r2,1
 400c140:	80c00415 	stw	r3,16(r16)
 400c144:	80800515 	stw	r2,20(r16)
 400c148:	04810004 	movi	r18,1024
 400c14c:	00000706 	br	400c16c <__smakebuf_r+0xbc>
 400c150:	8080030b 	ldhu	r2,12(r16)
 400c154:	10c0200c 	andi	r3,r2,128
 400c158:	18001f1e 	bne	r3,zero,400c1d8 <__smakebuf_r+0x128>
 400c15c:	04810004 	movi	r18,1024
 400c160:	10820014 	ori	r2,r2,2048
 400c164:	8080030d 	sth	r2,12(r16)
 400c168:	0027883a 	mov	r19,zero
 400c16c:	900b883a 	mov	r5,r18
 400c170:	8809883a 	mov	r4,r17
 400c174:	400c26c0 	call	400c26c <_malloc_r>
 400c178:	10002c26 	beq	r2,zero,400c22c <__smakebuf_r+0x17c>
 400c17c:	80c0030b 	ldhu	r3,12(r16)
 400c180:	01010074 	movhi	r4,1025
 400c184:	212c5304 	addi	r4,r4,-20148
 400c188:	89000f15 	stw	r4,60(r17)
 400c18c:	18c02014 	ori	r3,r3,128
 400c190:	80c0030d 	sth	r3,12(r16)
 400c194:	80800015 	stw	r2,0(r16)
 400c198:	80800415 	stw	r2,16(r16)
 400c19c:	84800515 	stw	r18,20(r16)
 400c1a0:	98001a1e 	bne	r19,zero,400c20c <__smakebuf_r+0x15c>
 400c1a4:	dfc01317 	ldw	ra,76(sp)
 400c1a8:	dcc01217 	ldw	r19,72(sp)
 400c1ac:	dc801117 	ldw	r18,68(sp)
 400c1b0:	dc401017 	ldw	r17,64(sp)
 400c1b4:	dc000f17 	ldw	r16,60(sp)
 400c1b8:	dec01404 	addi	sp,sp,80
 400c1bc:	f800283a 	ret
 400c1c0:	288010c4 	addi	r2,r5,67
 400c1c4:	28800015 	stw	r2,0(r5)
 400c1c8:	28800415 	stw	r2,16(r5)
 400c1cc:	00800044 	movi	r2,1
 400c1d0:	28800515 	stw	r2,20(r5)
 400c1d4:	f800283a 	ret
 400c1d8:	04801004 	movi	r18,64
 400c1dc:	003fe006 	br	400c160 <__alt_data_end+0xfc00c160>
 400c1e0:	81000a17 	ldw	r4,40(r16)
 400c1e4:	00c10074 	movhi	r3,1025
 400c1e8:	18f9c904 	addi	r3,r3,-6364
 400c1ec:	20ffc51e 	bne	r4,r3,400c104 <__alt_data_end+0xfc00c104>
 400c1f0:	8080030b 	ldhu	r2,12(r16)
 400c1f4:	04810004 	movi	r18,1024
 400c1f8:	84801315 	stw	r18,76(r16)
 400c1fc:	1484b03a 	or	r2,r2,r18
 400c200:	8080030d 	sth	r2,12(r16)
 400c204:	0027883a 	mov	r19,zero
 400c208:	003fd806 	br	400c16c <__alt_data_end+0xfc00c16c>
 400c20c:	8140038f 	ldh	r5,14(r16)
 400c210:	8809883a 	mov	r4,r17
 400c214:	40105ac0 	call	40105ac <_isatty_r>
 400c218:	103fe226 	beq	r2,zero,400c1a4 <__alt_data_end+0xfc00c1a4>
 400c21c:	8080030b 	ldhu	r2,12(r16)
 400c220:	10800054 	ori	r2,r2,1
 400c224:	8080030d 	sth	r2,12(r16)
 400c228:	003fde06 	br	400c1a4 <__alt_data_end+0xfc00c1a4>
 400c22c:	8080030b 	ldhu	r2,12(r16)
 400c230:	10c0800c 	andi	r3,r2,512
 400c234:	183fdb1e 	bne	r3,zero,400c1a4 <__alt_data_end+0xfc00c1a4>
 400c238:	10800094 	ori	r2,r2,2
 400c23c:	80c010c4 	addi	r3,r16,67
 400c240:	8080030d 	sth	r2,12(r16)
 400c244:	00800044 	movi	r2,1
 400c248:	80c00015 	stw	r3,0(r16)
 400c24c:	80c00415 	stw	r3,16(r16)
 400c250:	80800515 	stw	r2,20(r16)
 400c254:	003fd306 	br	400c1a4 <__alt_data_end+0xfc00c1a4>
 400c258:	04810004 	movi	r18,1024
 400c25c:	003fc306 	br	400c16c <__alt_data_end+0xfc00c16c>
 400c260:	0027883a 	mov	r19,zero
 400c264:	04810004 	movi	r18,1024
 400c268:	003fc006 	br	400c16c <__alt_data_end+0xfc00c16c>

0400c26c <_malloc_r>:
 400c26c:	defff504 	addi	sp,sp,-44
 400c270:	dc800315 	stw	r18,12(sp)
 400c274:	dfc00a15 	stw	ra,40(sp)
 400c278:	df000915 	stw	fp,36(sp)
 400c27c:	ddc00815 	stw	r23,32(sp)
 400c280:	dd800715 	stw	r22,28(sp)
 400c284:	dd400615 	stw	r21,24(sp)
 400c288:	dd000515 	stw	r20,20(sp)
 400c28c:	dcc00415 	stw	r19,16(sp)
 400c290:	dc400215 	stw	r17,8(sp)
 400c294:	dc000115 	stw	r16,4(sp)
 400c298:	288002c4 	addi	r2,r5,11
 400c29c:	00c00584 	movi	r3,22
 400c2a0:	2025883a 	mov	r18,r4
 400c2a4:	18807f2e 	bgeu	r3,r2,400c4a4 <_malloc_r+0x238>
 400c2a8:	047ffe04 	movi	r17,-8
 400c2ac:	1462703a 	and	r17,r2,r17
 400c2b0:	8800a316 	blt	r17,zero,400c540 <_malloc_r+0x2d4>
 400c2b4:	8940a236 	bltu	r17,r5,400c540 <_malloc_r+0x2d4>
 400c2b8:	40145a80 	call	40145a8 <__malloc_lock>
 400c2bc:	00807dc4 	movi	r2,503
 400c2c0:	1441e92e 	bgeu	r2,r17,400ca68 <_malloc_r+0x7fc>
 400c2c4:	8804d27a 	srli	r2,r17,9
 400c2c8:	1000a126 	beq	r2,zero,400c550 <_malloc_r+0x2e4>
 400c2cc:	00c00104 	movi	r3,4
 400c2d0:	18811e36 	bltu	r3,r2,400c74c <_malloc_r+0x4e0>
 400c2d4:	8804d1ba 	srli	r2,r17,6
 400c2d8:	12000e44 	addi	r8,r2,57
 400c2dc:	11c00e04 	addi	r7,r2,56
 400c2e0:	4209883a 	add	r4,r8,r8
 400c2e4:	04c10074 	movhi	r19,1025
 400c2e8:	2109883a 	add	r4,r4,r4
 400c2ec:	9cdd6604 	addi	r19,r19,30104
 400c2f0:	2109883a 	add	r4,r4,r4
 400c2f4:	9909883a 	add	r4,r19,r4
 400c2f8:	24000117 	ldw	r16,4(r4)
 400c2fc:	213ffe04 	addi	r4,r4,-8
 400c300:	24009726 	beq	r4,r16,400c560 <_malloc_r+0x2f4>
 400c304:	80800117 	ldw	r2,4(r16)
 400c308:	01bfff04 	movi	r6,-4
 400c30c:	014003c4 	movi	r5,15
 400c310:	1184703a 	and	r2,r2,r6
 400c314:	1447c83a 	sub	r3,r2,r17
 400c318:	28c00716 	blt	r5,r3,400c338 <_malloc_r+0xcc>
 400c31c:	1800920e 	bge	r3,zero,400c568 <_malloc_r+0x2fc>
 400c320:	84000317 	ldw	r16,12(r16)
 400c324:	24008e26 	beq	r4,r16,400c560 <_malloc_r+0x2f4>
 400c328:	80800117 	ldw	r2,4(r16)
 400c32c:	1184703a 	and	r2,r2,r6
 400c330:	1447c83a 	sub	r3,r2,r17
 400c334:	28fff90e 	bge	r5,r3,400c31c <__alt_data_end+0xfc00c31c>
 400c338:	3809883a 	mov	r4,r7
 400c33c:	01810074 	movhi	r6,1025
 400c340:	9c000417 	ldw	r16,16(r19)
 400c344:	319d6604 	addi	r6,r6,30104
 400c348:	32000204 	addi	r8,r6,8
 400c34c:	82013426 	beq	r16,r8,400c820 <_malloc_r+0x5b4>
 400c350:	80c00117 	ldw	r3,4(r16)
 400c354:	00bfff04 	movi	r2,-4
 400c358:	188e703a 	and	r7,r3,r2
 400c35c:	3c45c83a 	sub	r2,r7,r17
 400c360:	00c003c4 	movi	r3,15
 400c364:	18811f16 	blt	r3,r2,400c7e4 <_malloc_r+0x578>
 400c368:	32000515 	stw	r8,20(r6)
 400c36c:	32000415 	stw	r8,16(r6)
 400c370:	10007f0e 	bge	r2,zero,400c570 <_malloc_r+0x304>
 400c374:	00807fc4 	movi	r2,511
 400c378:	11c0fd36 	bltu	r2,r7,400c770 <_malloc_r+0x504>
 400c37c:	3806d0fa 	srli	r3,r7,3
 400c380:	01c00044 	movi	r7,1
 400c384:	30800117 	ldw	r2,4(r6)
 400c388:	19400044 	addi	r5,r3,1
 400c38c:	294b883a 	add	r5,r5,r5
 400c390:	1807d0ba 	srai	r3,r3,2
 400c394:	294b883a 	add	r5,r5,r5
 400c398:	294b883a 	add	r5,r5,r5
 400c39c:	298b883a 	add	r5,r5,r6
 400c3a0:	38c6983a 	sll	r3,r7,r3
 400c3a4:	29c00017 	ldw	r7,0(r5)
 400c3a8:	2a7ffe04 	addi	r9,r5,-8
 400c3ac:	1886b03a 	or	r3,r3,r2
 400c3b0:	82400315 	stw	r9,12(r16)
 400c3b4:	81c00215 	stw	r7,8(r16)
 400c3b8:	30c00115 	stw	r3,4(r6)
 400c3bc:	2c000015 	stw	r16,0(r5)
 400c3c0:	3c000315 	stw	r16,12(r7)
 400c3c4:	2005d0ba 	srai	r2,r4,2
 400c3c8:	01400044 	movi	r5,1
 400c3cc:	288a983a 	sll	r5,r5,r2
 400c3d0:	19406f36 	bltu	r3,r5,400c590 <_malloc_r+0x324>
 400c3d4:	28c4703a 	and	r2,r5,r3
 400c3d8:	10000a1e 	bne	r2,zero,400c404 <_malloc_r+0x198>
 400c3dc:	00bfff04 	movi	r2,-4
 400c3e0:	294b883a 	add	r5,r5,r5
 400c3e4:	2088703a 	and	r4,r4,r2
 400c3e8:	28c4703a 	and	r2,r5,r3
 400c3ec:	21000104 	addi	r4,r4,4
 400c3f0:	1000041e 	bne	r2,zero,400c404 <_malloc_r+0x198>
 400c3f4:	294b883a 	add	r5,r5,r5
 400c3f8:	28c4703a 	and	r2,r5,r3
 400c3fc:	21000104 	addi	r4,r4,4
 400c400:	103ffc26 	beq	r2,zero,400c3f4 <__alt_data_end+0xfc00c3f4>
 400c404:	02bfff04 	movi	r10,-4
 400c408:	024003c4 	movi	r9,15
 400c40c:	21800044 	addi	r6,r4,1
 400c410:	318d883a 	add	r6,r6,r6
 400c414:	318d883a 	add	r6,r6,r6
 400c418:	318d883a 	add	r6,r6,r6
 400c41c:	998d883a 	add	r6,r19,r6
 400c420:	333ffe04 	addi	r12,r6,-8
 400c424:	2017883a 	mov	r11,r4
 400c428:	31800104 	addi	r6,r6,4
 400c42c:	34000017 	ldw	r16,0(r6)
 400c430:	31fffd04 	addi	r7,r6,-12
 400c434:	81c0041e 	bne	r16,r7,400c448 <_malloc_r+0x1dc>
 400c438:	0000fb06 	br	400c828 <_malloc_r+0x5bc>
 400c43c:	1801030e 	bge	r3,zero,400c84c <_malloc_r+0x5e0>
 400c440:	84000317 	ldw	r16,12(r16)
 400c444:	81c0f826 	beq	r16,r7,400c828 <_malloc_r+0x5bc>
 400c448:	80800117 	ldw	r2,4(r16)
 400c44c:	1284703a 	and	r2,r2,r10
 400c450:	1447c83a 	sub	r3,r2,r17
 400c454:	48fff90e 	bge	r9,r3,400c43c <__alt_data_end+0xfc00c43c>
 400c458:	80800317 	ldw	r2,12(r16)
 400c45c:	81000217 	ldw	r4,8(r16)
 400c460:	89400054 	ori	r5,r17,1
 400c464:	81400115 	stw	r5,4(r16)
 400c468:	20800315 	stw	r2,12(r4)
 400c46c:	11000215 	stw	r4,8(r2)
 400c470:	8463883a 	add	r17,r16,r17
 400c474:	9c400515 	stw	r17,20(r19)
 400c478:	9c400415 	stw	r17,16(r19)
 400c47c:	18800054 	ori	r2,r3,1
 400c480:	88800115 	stw	r2,4(r17)
 400c484:	8a000315 	stw	r8,12(r17)
 400c488:	8a000215 	stw	r8,8(r17)
 400c48c:	88e3883a 	add	r17,r17,r3
 400c490:	88c00015 	stw	r3,0(r17)
 400c494:	9009883a 	mov	r4,r18
 400c498:	40145cc0 	call	40145cc <__malloc_unlock>
 400c49c:	80800204 	addi	r2,r16,8
 400c4a0:	00001b06 	br	400c510 <_malloc_r+0x2a4>
 400c4a4:	04400404 	movi	r17,16
 400c4a8:	89402536 	bltu	r17,r5,400c540 <_malloc_r+0x2d4>
 400c4ac:	40145a80 	call	40145a8 <__malloc_lock>
 400c4b0:	00800184 	movi	r2,6
 400c4b4:	01000084 	movi	r4,2
 400c4b8:	04c10074 	movhi	r19,1025
 400c4bc:	1085883a 	add	r2,r2,r2
 400c4c0:	9cdd6604 	addi	r19,r19,30104
 400c4c4:	1085883a 	add	r2,r2,r2
 400c4c8:	9885883a 	add	r2,r19,r2
 400c4cc:	14000117 	ldw	r16,4(r2)
 400c4d0:	10fffe04 	addi	r3,r2,-8
 400c4d4:	80c0d926 	beq	r16,r3,400c83c <_malloc_r+0x5d0>
 400c4d8:	80c00117 	ldw	r3,4(r16)
 400c4dc:	81000317 	ldw	r4,12(r16)
 400c4e0:	00bfff04 	movi	r2,-4
 400c4e4:	1884703a 	and	r2,r3,r2
 400c4e8:	81400217 	ldw	r5,8(r16)
 400c4ec:	8085883a 	add	r2,r16,r2
 400c4f0:	10c00117 	ldw	r3,4(r2)
 400c4f4:	29000315 	stw	r4,12(r5)
 400c4f8:	21400215 	stw	r5,8(r4)
 400c4fc:	18c00054 	ori	r3,r3,1
 400c500:	10c00115 	stw	r3,4(r2)
 400c504:	9009883a 	mov	r4,r18
 400c508:	40145cc0 	call	40145cc <__malloc_unlock>
 400c50c:	80800204 	addi	r2,r16,8
 400c510:	dfc00a17 	ldw	ra,40(sp)
 400c514:	df000917 	ldw	fp,36(sp)
 400c518:	ddc00817 	ldw	r23,32(sp)
 400c51c:	dd800717 	ldw	r22,28(sp)
 400c520:	dd400617 	ldw	r21,24(sp)
 400c524:	dd000517 	ldw	r20,20(sp)
 400c528:	dcc00417 	ldw	r19,16(sp)
 400c52c:	dc800317 	ldw	r18,12(sp)
 400c530:	dc400217 	ldw	r17,8(sp)
 400c534:	dc000117 	ldw	r16,4(sp)
 400c538:	dec00b04 	addi	sp,sp,44
 400c53c:	f800283a 	ret
 400c540:	00800304 	movi	r2,12
 400c544:	90800015 	stw	r2,0(r18)
 400c548:	0005883a 	mov	r2,zero
 400c54c:	003ff006 	br	400c510 <__alt_data_end+0xfc00c510>
 400c550:	01002004 	movi	r4,128
 400c554:	02001004 	movi	r8,64
 400c558:	01c00fc4 	movi	r7,63
 400c55c:	003f6106 	br	400c2e4 <__alt_data_end+0xfc00c2e4>
 400c560:	4009883a 	mov	r4,r8
 400c564:	003f7506 	br	400c33c <__alt_data_end+0xfc00c33c>
 400c568:	81000317 	ldw	r4,12(r16)
 400c56c:	003fde06 	br	400c4e8 <__alt_data_end+0xfc00c4e8>
 400c570:	81c5883a 	add	r2,r16,r7
 400c574:	11400117 	ldw	r5,4(r2)
 400c578:	9009883a 	mov	r4,r18
 400c57c:	29400054 	ori	r5,r5,1
 400c580:	11400115 	stw	r5,4(r2)
 400c584:	40145cc0 	call	40145cc <__malloc_unlock>
 400c588:	80800204 	addi	r2,r16,8
 400c58c:	003fe006 	br	400c510 <__alt_data_end+0xfc00c510>
 400c590:	9c000217 	ldw	r16,8(r19)
 400c594:	00bfff04 	movi	r2,-4
 400c598:	85800117 	ldw	r22,4(r16)
 400c59c:	b0ac703a 	and	r22,r22,r2
 400c5a0:	b4400336 	bltu	r22,r17,400c5b0 <_malloc_r+0x344>
 400c5a4:	b445c83a 	sub	r2,r22,r17
 400c5a8:	00c003c4 	movi	r3,15
 400c5ac:	18805d16 	blt	r3,r2,400c724 <_malloc_r+0x4b8>
 400c5b0:	05c100b4 	movhi	r23,1026
 400c5b4:	008100b4 	movhi	r2,1026
 400c5b8:	10a9e704 	addi	r2,r2,-22628
 400c5bc:	bde2f304 	addi	r23,r23,-29748
 400c5c0:	15400017 	ldw	r21,0(r2)
 400c5c4:	b8c00017 	ldw	r3,0(r23)
 400c5c8:	00bfffc4 	movi	r2,-1
 400c5cc:	858d883a 	add	r6,r16,r22
 400c5d0:	8d6b883a 	add	r21,r17,r21
 400c5d4:	1880ea26 	beq	r3,r2,400c980 <_malloc_r+0x714>
 400c5d8:	ad4403c4 	addi	r21,r21,4111
 400c5dc:	00bc0004 	movi	r2,-4096
 400c5e0:	a8aa703a 	and	r21,r21,r2
 400c5e4:	a80b883a 	mov	r5,r21
 400c5e8:	9009883a 	mov	r4,r18
 400c5ec:	d9800015 	stw	r6,0(sp)
 400c5f0:	400e5f80 	call	400e5f8 <_sbrk_r>
 400c5f4:	1029883a 	mov	r20,r2
 400c5f8:	00bfffc4 	movi	r2,-1
 400c5fc:	d9800017 	ldw	r6,0(sp)
 400c600:	a080e826 	beq	r20,r2,400c9a4 <_malloc_r+0x738>
 400c604:	a180a636 	bltu	r20,r6,400c8a0 <_malloc_r+0x634>
 400c608:	070100b4 	movhi	fp,1026
 400c60c:	e729fd04 	addi	fp,fp,-22540
 400c610:	e0800017 	ldw	r2,0(fp)
 400c614:	a887883a 	add	r3,r21,r2
 400c618:	e0c00015 	stw	r3,0(fp)
 400c61c:	3500e626 	beq	r6,r20,400c9b8 <_malloc_r+0x74c>
 400c620:	b9000017 	ldw	r4,0(r23)
 400c624:	00bfffc4 	movi	r2,-1
 400c628:	2080ee26 	beq	r4,r2,400c9e4 <_malloc_r+0x778>
 400c62c:	a185c83a 	sub	r2,r20,r6
 400c630:	10c5883a 	add	r2,r2,r3
 400c634:	e0800015 	stw	r2,0(fp)
 400c638:	a0c001cc 	andi	r3,r20,7
 400c63c:	1800bc26 	beq	r3,zero,400c930 <_malloc_r+0x6c4>
 400c640:	a0e9c83a 	sub	r20,r20,r3
 400c644:	00840204 	movi	r2,4104
 400c648:	a5000204 	addi	r20,r20,8
 400c64c:	10c7c83a 	sub	r3,r2,r3
 400c650:	a545883a 	add	r2,r20,r21
 400c654:	1083ffcc 	andi	r2,r2,4095
 400c658:	18abc83a 	sub	r21,r3,r2
 400c65c:	a80b883a 	mov	r5,r21
 400c660:	9009883a 	mov	r4,r18
 400c664:	400e5f80 	call	400e5f8 <_sbrk_r>
 400c668:	00ffffc4 	movi	r3,-1
 400c66c:	10c0e126 	beq	r2,r3,400c9f4 <_malloc_r+0x788>
 400c670:	1505c83a 	sub	r2,r2,r20
 400c674:	1545883a 	add	r2,r2,r21
 400c678:	10800054 	ori	r2,r2,1
 400c67c:	e0c00017 	ldw	r3,0(fp)
 400c680:	9d000215 	stw	r20,8(r19)
 400c684:	a0800115 	stw	r2,4(r20)
 400c688:	a8c7883a 	add	r3,r21,r3
 400c68c:	e0c00015 	stw	r3,0(fp)
 400c690:	84c00e26 	beq	r16,r19,400c6cc <_malloc_r+0x460>
 400c694:	018003c4 	movi	r6,15
 400c698:	3580a72e 	bgeu	r6,r22,400c938 <_malloc_r+0x6cc>
 400c69c:	81400117 	ldw	r5,4(r16)
 400c6a0:	013ffe04 	movi	r4,-8
 400c6a4:	b0bffd04 	addi	r2,r22,-12
 400c6a8:	1104703a 	and	r2,r2,r4
 400c6ac:	2900004c 	andi	r4,r5,1
 400c6b0:	2088b03a 	or	r4,r4,r2
 400c6b4:	81000115 	stw	r4,4(r16)
 400c6b8:	01400144 	movi	r5,5
 400c6bc:	8089883a 	add	r4,r16,r2
 400c6c0:	21400115 	stw	r5,4(r4)
 400c6c4:	21400215 	stw	r5,8(r4)
 400c6c8:	3080cd36 	bltu	r6,r2,400ca00 <_malloc_r+0x794>
 400c6cc:	008100b4 	movhi	r2,1026
 400c6d0:	10a9e604 	addi	r2,r2,-22632
 400c6d4:	11000017 	ldw	r4,0(r2)
 400c6d8:	20c0012e 	bgeu	r4,r3,400c6e0 <_malloc_r+0x474>
 400c6dc:	10c00015 	stw	r3,0(r2)
 400c6e0:	008100b4 	movhi	r2,1026
 400c6e4:	10a9e504 	addi	r2,r2,-22636
 400c6e8:	11000017 	ldw	r4,0(r2)
 400c6ec:	9c000217 	ldw	r16,8(r19)
 400c6f0:	20c0012e 	bgeu	r4,r3,400c6f8 <_malloc_r+0x48c>
 400c6f4:	10c00015 	stw	r3,0(r2)
 400c6f8:	80c00117 	ldw	r3,4(r16)
 400c6fc:	00bfff04 	movi	r2,-4
 400c700:	1886703a 	and	r3,r3,r2
 400c704:	1c45c83a 	sub	r2,r3,r17
 400c708:	1c400236 	bltu	r3,r17,400c714 <_malloc_r+0x4a8>
 400c70c:	00c003c4 	movi	r3,15
 400c710:	18800416 	blt	r3,r2,400c724 <_malloc_r+0x4b8>
 400c714:	9009883a 	mov	r4,r18
 400c718:	40145cc0 	call	40145cc <__malloc_unlock>
 400c71c:	0005883a 	mov	r2,zero
 400c720:	003f7b06 	br	400c510 <__alt_data_end+0xfc00c510>
 400c724:	88c00054 	ori	r3,r17,1
 400c728:	80c00115 	stw	r3,4(r16)
 400c72c:	8463883a 	add	r17,r16,r17
 400c730:	10800054 	ori	r2,r2,1
 400c734:	9c400215 	stw	r17,8(r19)
 400c738:	88800115 	stw	r2,4(r17)
 400c73c:	9009883a 	mov	r4,r18
 400c740:	40145cc0 	call	40145cc <__malloc_unlock>
 400c744:	80800204 	addi	r2,r16,8
 400c748:	003f7106 	br	400c510 <__alt_data_end+0xfc00c510>
 400c74c:	00c00504 	movi	r3,20
 400c750:	18804a2e 	bgeu	r3,r2,400c87c <_malloc_r+0x610>
 400c754:	00c01504 	movi	r3,84
 400c758:	18806e36 	bltu	r3,r2,400c914 <_malloc_r+0x6a8>
 400c75c:	8804d33a 	srli	r2,r17,12
 400c760:	12001bc4 	addi	r8,r2,111
 400c764:	11c01b84 	addi	r7,r2,110
 400c768:	4209883a 	add	r4,r8,r8
 400c76c:	003edd06 	br	400c2e4 <__alt_data_end+0xfc00c2e4>
 400c770:	3804d27a 	srli	r2,r7,9
 400c774:	00c00104 	movi	r3,4
 400c778:	1880442e 	bgeu	r3,r2,400c88c <_malloc_r+0x620>
 400c77c:	00c00504 	movi	r3,20
 400c780:	18808136 	bltu	r3,r2,400c988 <_malloc_r+0x71c>
 400c784:	11401704 	addi	r5,r2,92
 400c788:	10c016c4 	addi	r3,r2,91
 400c78c:	294b883a 	add	r5,r5,r5
 400c790:	294b883a 	add	r5,r5,r5
 400c794:	294b883a 	add	r5,r5,r5
 400c798:	994b883a 	add	r5,r19,r5
 400c79c:	28800017 	ldw	r2,0(r5)
 400c7a0:	01810074 	movhi	r6,1025
 400c7a4:	297ffe04 	addi	r5,r5,-8
 400c7a8:	319d6604 	addi	r6,r6,30104
 400c7ac:	28806526 	beq	r5,r2,400c944 <_malloc_r+0x6d8>
 400c7b0:	01bfff04 	movi	r6,-4
 400c7b4:	10c00117 	ldw	r3,4(r2)
 400c7b8:	1986703a 	and	r3,r3,r6
 400c7bc:	38c0022e 	bgeu	r7,r3,400c7c8 <_malloc_r+0x55c>
 400c7c0:	10800217 	ldw	r2,8(r2)
 400c7c4:	28bffb1e 	bne	r5,r2,400c7b4 <__alt_data_end+0xfc00c7b4>
 400c7c8:	11400317 	ldw	r5,12(r2)
 400c7cc:	98c00117 	ldw	r3,4(r19)
 400c7d0:	81400315 	stw	r5,12(r16)
 400c7d4:	80800215 	stw	r2,8(r16)
 400c7d8:	2c000215 	stw	r16,8(r5)
 400c7dc:	14000315 	stw	r16,12(r2)
 400c7e0:	003ef806 	br	400c3c4 <__alt_data_end+0xfc00c3c4>
 400c7e4:	88c00054 	ori	r3,r17,1
 400c7e8:	80c00115 	stw	r3,4(r16)
 400c7ec:	8463883a 	add	r17,r16,r17
 400c7f0:	34400515 	stw	r17,20(r6)
 400c7f4:	34400415 	stw	r17,16(r6)
 400c7f8:	10c00054 	ori	r3,r2,1
 400c7fc:	8a000315 	stw	r8,12(r17)
 400c800:	8a000215 	stw	r8,8(r17)
 400c804:	88c00115 	stw	r3,4(r17)
 400c808:	88a3883a 	add	r17,r17,r2
 400c80c:	88800015 	stw	r2,0(r17)
 400c810:	9009883a 	mov	r4,r18
 400c814:	40145cc0 	call	40145cc <__malloc_unlock>
 400c818:	80800204 	addi	r2,r16,8
 400c81c:	003f3c06 	br	400c510 <__alt_data_end+0xfc00c510>
 400c820:	30c00117 	ldw	r3,4(r6)
 400c824:	003ee706 	br	400c3c4 <__alt_data_end+0xfc00c3c4>
 400c828:	5ac00044 	addi	r11,r11,1
 400c82c:	588000cc 	andi	r2,r11,3
 400c830:	31800204 	addi	r6,r6,8
 400c834:	103efd1e 	bne	r2,zero,400c42c <__alt_data_end+0xfc00c42c>
 400c838:	00002406 	br	400c8cc <_malloc_r+0x660>
 400c83c:	14000317 	ldw	r16,12(r2)
 400c840:	143f251e 	bne	r2,r16,400c4d8 <__alt_data_end+0xfc00c4d8>
 400c844:	21000084 	addi	r4,r4,2
 400c848:	003ebc06 	br	400c33c <__alt_data_end+0xfc00c33c>
 400c84c:	8085883a 	add	r2,r16,r2
 400c850:	10c00117 	ldw	r3,4(r2)
 400c854:	81000317 	ldw	r4,12(r16)
 400c858:	81400217 	ldw	r5,8(r16)
 400c85c:	18c00054 	ori	r3,r3,1
 400c860:	10c00115 	stw	r3,4(r2)
 400c864:	29000315 	stw	r4,12(r5)
 400c868:	21400215 	stw	r5,8(r4)
 400c86c:	9009883a 	mov	r4,r18
 400c870:	40145cc0 	call	40145cc <__malloc_unlock>
 400c874:	80800204 	addi	r2,r16,8
 400c878:	003f2506 	br	400c510 <__alt_data_end+0xfc00c510>
 400c87c:	12001704 	addi	r8,r2,92
 400c880:	11c016c4 	addi	r7,r2,91
 400c884:	4209883a 	add	r4,r8,r8
 400c888:	003e9606 	br	400c2e4 <__alt_data_end+0xfc00c2e4>
 400c88c:	3804d1ba 	srli	r2,r7,6
 400c890:	11400e44 	addi	r5,r2,57
 400c894:	10c00e04 	addi	r3,r2,56
 400c898:	294b883a 	add	r5,r5,r5
 400c89c:	003fbc06 	br	400c790 <__alt_data_end+0xfc00c790>
 400c8a0:	84ff5926 	beq	r16,r19,400c608 <__alt_data_end+0xfc00c608>
 400c8a4:	00810074 	movhi	r2,1025
 400c8a8:	109d6604 	addi	r2,r2,30104
 400c8ac:	14000217 	ldw	r16,8(r2)
 400c8b0:	00bfff04 	movi	r2,-4
 400c8b4:	80c00117 	ldw	r3,4(r16)
 400c8b8:	1886703a 	and	r3,r3,r2
 400c8bc:	003f9106 	br	400c704 <__alt_data_end+0xfc00c704>
 400c8c0:	60800217 	ldw	r2,8(r12)
 400c8c4:	213fffc4 	addi	r4,r4,-1
 400c8c8:	1300651e 	bne	r2,r12,400ca60 <_malloc_r+0x7f4>
 400c8cc:	208000cc 	andi	r2,r4,3
 400c8d0:	633ffe04 	addi	r12,r12,-8
 400c8d4:	103ffa1e 	bne	r2,zero,400c8c0 <__alt_data_end+0xfc00c8c0>
 400c8d8:	98800117 	ldw	r2,4(r19)
 400c8dc:	0146303a 	nor	r3,zero,r5
 400c8e0:	1884703a 	and	r2,r3,r2
 400c8e4:	98800115 	stw	r2,4(r19)
 400c8e8:	294b883a 	add	r5,r5,r5
 400c8ec:	117f2836 	bltu	r2,r5,400c590 <__alt_data_end+0xfc00c590>
 400c8f0:	283f2726 	beq	r5,zero,400c590 <__alt_data_end+0xfc00c590>
 400c8f4:	2886703a 	and	r3,r5,r2
 400c8f8:	5809883a 	mov	r4,r11
 400c8fc:	183ec31e 	bne	r3,zero,400c40c <__alt_data_end+0xfc00c40c>
 400c900:	294b883a 	add	r5,r5,r5
 400c904:	2886703a 	and	r3,r5,r2
 400c908:	21000104 	addi	r4,r4,4
 400c90c:	183ffc26 	beq	r3,zero,400c900 <__alt_data_end+0xfc00c900>
 400c910:	003ebe06 	br	400c40c <__alt_data_end+0xfc00c40c>
 400c914:	00c05504 	movi	r3,340
 400c918:	18801236 	bltu	r3,r2,400c964 <_malloc_r+0x6f8>
 400c91c:	8804d3fa 	srli	r2,r17,15
 400c920:	12001e04 	addi	r8,r2,120
 400c924:	11c01dc4 	addi	r7,r2,119
 400c928:	4209883a 	add	r4,r8,r8
 400c92c:	003e6d06 	br	400c2e4 <__alt_data_end+0xfc00c2e4>
 400c930:	00c40004 	movi	r3,4096
 400c934:	003f4606 	br	400c650 <__alt_data_end+0xfc00c650>
 400c938:	00800044 	movi	r2,1
 400c93c:	a0800115 	stw	r2,4(r20)
 400c940:	003f7406 	br	400c714 <__alt_data_end+0xfc00c714>
 400c944:	1805d0ba 	srai	r2,r3,2
 400c948:	01c00044 	movi	r7,1
 400c94c:	30c00117 	ldw	r3,4(r6)
 400c950:	388e983a 	sll	r7,r7,r2
 400c954:	2805883a 	mov	r2,r5
 400c958:	38c6b03a 	or	r3,r7,r3
 400c95c:	30c00115 	stw	r3,4(r6)
 400c960:	003f9b06 	br	400c7d0 <__alt_data_end+0xfc00c7d0>
 400c964:	00c15504 	movi	r3,1364
 400c968:	18801a36 	bltu	r3,r2,400c9d4 <_malloc_r+0x768>
 400c96c:	8804d4ba 	srli	r2,r17,18
 400c970:	12001f44 	addi	r8,r2,125
 400c974:	11c01f04 	addi	r7,r2,124
 400c978:	4209883a 	add	r4,r8,r8
 400c97c:	003e5906 	br	400c2e4 <__alt_data_end+0xfc00c2e4>
 400c980:	ad400404 	addi	r21,r21,16
 400c984:	003f1706 	br	400c5e4 <__alt_data_end+0xfc00c5e4>
 400c988:	00c01504 	movi	r3,84
 400c98c:	18802336 	bltu	r3,r2,400ca1c <_malloc_r+0x7b0>
 400c990:	3804d33a 	srli	r2,r7,12
 400c994:	11401bc4 	addi	r5,r2,111
 400c998:	10c01b84 	addi	r3,r2,110
 400c99c:	294b883a 	add	r5,r5,r5
 400c9a0:	003f7b06 	br	400c790 <__alt_data_end+0xfc00c790>
 400c9a4:	9c000217 	ldw	r16,8(r19)
 400c9a8:	00bfff04 	movi	r2,-4
 400c9ac:	80c00117 	ldw	r3,4(r16)
 400c9b0:	1886703a 	and	r3,r3,r2
 400c9b4:	003f5306 	br	400c704 <__alt_data_end+0xfc00c704>
 400c9b8:	3083ffcc 	andi	r2,r6,4095
 400c9bc:	103f181e 	bne	r2,zero,400c620 <__alt_data_end+0xfc00c620>
 400c9c0:	99000217 	ldw	r4,8(r19)
 400c9c4:	b545883a 	add	r2,r22,r21
 400c9c8:	10800054 	ori	r2,r2,1
 400c9cc:	20800115 	stw	r2,4(r4)
 400c9d0:	003f3e06 	br	400c6cc <__alt_data_end+0xfc00c6cc>
 400c9d4:	01003f84 	movi	r4,254
 400c9d8:	02001fc4 	movi	r8,127
 400c9dc:	01c01f84 	movi	r7,126
 400c9e0:	003e4006 	br	400c2e4 <__alt_data_end+0xfc00c2e4>
 400c9e4:	008100b4 	movhi	r2,1026
 400c9e8:	10a2f304 	addi	r2,r2,-29748
 400c9ec:	15000015 	stw	r20,0(r2)
 400c9f0:	003f1106 	br	400c638 <__alt_data_end+0xfc00c638>
 400c9f4:	00800044 	movi	r2,1
 400c9f8:	002b883a 	mov	r21,zero
 400c9fc:	003f1f06 	br	400c67c <__alt_data_end+0xfc00c67c>
 400ca00:	81400204 	addi	r5,r16,8
 400ca04:	9009883a 	mov	r4,r18
 400ca08:	400b6180 	call	400b618 <_free_r>
 400ca0c:	008100b4 	movhi	r2,1026
 400ca10:	10a9fd04 	addi	r2,r2,-22540
 400ca14:	10c00017 	ldw	r3,0(r2)
 400ca18:	003f2c06 	br	400c6cc <__alt_data_end+0xfc00c6cc>
 400ca1c:	00c05504 	movi	r3,340
 400ca20:	18800536 	bltu	r3,r2,400ca38 <_malloc_r+0x7cc>
 400ca24:	3804d3fa 	srli	r2,r7,15
 400ca28:	11401e04 	addi	r5,r2,120
 400ca2c:	10c01dc4 	addi	r3,r2,119
 400ca30:	294b883a 	add	r5,r5,r5
 400ca34:	003f5606 	br	400c790 <__alt_data_end+0xfc00c790>
 400ca38:	00c15504 	movi	r3,1364
 400ca3c:	18800536 	bltu	r3,r2,400ca54 <_malloc_r+0x7e8>
 400ca40:	3804d4ba 	srli	r2,r7,18
 400ca44:	11401f44 	addi	r5,r2,125
 400ca48:	10c01f04 	addi	r3,r2,124
 400ca4c:	294b883a 	add	r5,r5,r5
 400ca50:	003f4f06 	br	400c790 <__alt_data_end+0xfc00c790>
 400ca54:	01403f84 	movi	r5,254
 400ca58:	00c01f84 	movi	r3,126
 400ca5c:	003f4c06 	br	400c790 <__alt_data_end+0xfc00c790>
 400ca60:	98800117 	ldw	r2,4(r19)
 400ca64:	003fa006 	br	400c8e8 <__alt_data_end+0xfc00c8e8>
 400ca68:	8808d0fa 	srli	r4,r17,3
 400ca6c:	20800044 	addi	r2,r4,1
 400ca70:	1085883a 	add	r2,r2,r2
 400ca74:	003e9006 	br	400c4b8 <__alt_data_end+0xfc00c4b8>

0400ca78 <memchr>:
 400ca78:	208000cc 	andi	r2,r4,3
 400ca7c:	280f883a 	mov	r7,r5
 400ca80:	10003426 	beq	r2,zero,400cb54 <memchr+0xdc>
 400ca84:	30bfffc4 	addi	r2,r6,-1
 400ca88:	30001a26 	beq	r6,zero,400caf4 <memchr+0x7c>
 400ca8c:	20c00003 	ldbu	r3,0(r4)
 400ca90:	29803fcc 	andi	r6,r5,255
 400ca94:	30c0051e 	bne	r6,r3,400caac <memchr+0x34>
 400ca98:	00001806 	br	400cafc <memchr+0x84>
 400ca9c:	10001526 	beq	r2,zero,400caf4 <memchr+0x7c>
 400caa0:	20c00003 	ldbu	r3,0(r4)
 400caa4:	10bfffc4 	addi	r2,r2,-1
 400caa8:	30c01426 	beq	r6,r3,400cafc <memchr+0x84>
 400caac:	21000044 	addi	r4,r4,1
 400cab0:	20c000cc 	andi	r3,r4,3
 400cab4:	183ff91e 	bne	r3,zero,400ca9c <__alt_data_end+0xfc00ca9c>
 400cab8:	020000c4 	movi	r8,3
 400cabc:	40801136 	bltu	r8,r2,400cb04 <memchr+0x8c>
 400cac0:	10000c26 	beq	r2,zero,400caf4 <memchr+0x7c>
 400cac4:	20c00003 	ldbu	r3,0(r4)
 400cac8:	29403fcc 	andi	r5,r5,255
 400cacc:	28c00b26 	beq	r5,r3,400cafc <memchr+0x84>
 400cad0:	20c00044 	addi	r3,r4,1
 400cad4:	39803fcc 	andi	r6,r7,255
 400cad8:	2089883a 	add	r4,r4,r2
 400cadc:	00000306 	br	400caec <memchr+0x74>
 400cae0:	18c00044 	addi	r3,r3,1
 400cae4:	197fffc3 	ldbu	r5,-1(r3)
 400cae8:	31400526 	beq	r6,r5,400cb00 <memchr+0x88>
 400caec:	1805883a 	mov	r2,r3
 400caf0:	20fffb1e 	bne	r4,r3,400cae0 <__alt_data_end+0xfc00cae0>
 400caf4:	0005883a 	mov	r2,zero
 400caf8:	f800283a 	ret
 400cafc:	2005883a 	mov	r2,r4
 400cb00:	f800283a 	ret
 400cb04:	28c03fcc 	andi	r3,r5,255
 400cb08:	1812923a 	slli	r9,r3,8
 400cb0c:	02ffbff4 	movhi	r11,65279
 400cb10:	02a02074 	movhi	r10,32897
 400cb14:	48d2b03a 	or	r9,r9,r3
 400cb18:	4806943a 	slli	r3,r9,16
 400cb1c:	5affbfc4 	addi	r11,r11,-257
 400cb20:	52a02004 	addi	r10,r10,-32640
 400cb24:	48d2b03a 	or	r9,r9,r3
 400cb28:	20c00017 	ldw	r3,0(r4)
 400cb2c:	48c6f03a 	xor	r3,r9,r3
 400cb30:	1acd883a 	add	r6,r3,r11
 400cb34:	00c6303a 	nor	r3,zero,r3
 400cb38:	30c6703a 	and	r3,r6,r3
 400cb3c:	1a86703a 	and	r3,r3,r10
 400cb40:	183fe01e 	bne	r3,zero,400cac4 <__alt_data_end+0xfc00cac4>
 400cb44:	10bfff04 	addi	r2,r2,-4
 400cb48:	21000104 	addi	r4,r4,4
 400cb4c:	40bff636 	bltu	r8,r2,400cb28 <__alt_data_end+0xfc00cb28>
 400cb50:	003fdb06 	br	400cac0 <__alt_data_end+0xfc00cac0>
 400cb54:	3005883a 	mov	r2,r6
 400cb58:	003fd706 	br	400cab8 <__alt_data_end+0xfc00cab8>

0400cb5c <memcpy>:
 400cb5c:	defffd04 	addi	sp,sp,-12
 400cb60:	dfc00215 	stw	ra,8(sp)
 400cb64:	dc400115 	stw	r17,4(sp)
 400cb68:	dc000015 	stw	r16,0(sp)
 400cb6c:	00c003c4 	movi	r3,15
 400cb70:	2005883a 	mov	r2,r4
 400cb74:	1980452e 	bgeu	r3,r6,400cc8c <memcpy+0x130>
 400cb78:	2906b03a 	or	r3,r5,r4
 400cb7c:	18c000cc 	andi	r3,r3,3
 400cb80:	1800441e 	bne	r3,zero,400cc94 <memcpy+0x138>
 400cb84:	347ffc04 	addi	r17,r6,-16
 400cb88:	8822d13a 	srli	r17,r17,4
 400cb8c:	28c00104 	addi	r3,r5,4
 400cb90:	23400104 	addi	r13,r4,4
 400cb94:	8820913a 	slli	r16,r17,4
 400cb98:	2b000204 	addi	r12,r5,8
 400cb9c:	22c00204 	addi	r11,r4,8
 400cba0:	84000504 	addi	r16,r16,20
 400cba4:	2a800304 	addi	r10,r5,12
 400cba8:	22400304 	addi	r9,r4,12
 400cbac:	2c21883a 	add	r16,r5,r16
 400cbb0:	2811883a 	mov	r8,r5
 400cbb4:	200f883a 	mov	r7,r4
 400cbb8:	41000017 	ldw	r4,0(r8)
 400cbbc:	1fc00017 	ldw	ra,0(r3)
 400cbc0:	63c00017 	ldw	r15,0(r12)
 400cbc4:	39000015 	stw	r4,0(r7)
 400cbc8:	53800017 	ldw	r14,0(r10)
 400cbcc:	6fc00015 	stw	ra,0(r13)
 400cbd0:	5bc00015 	stw	r15,0(r11)
 400cbd4:	4b800015 	stw	r14,0(r9)
 400cbd8:	18c00404 	addi	r3,r3,16
 400cbdc:	39c00404 	addi	r7,r7,16
 400cbe0:	42000404 	addi	r8,r8,16
 400cbe4:	6b400404 	addi	r13,r13,16
 400cbe8:	63000404 	addi	r12,r12,16
 400cbec:	5ac00404 	addi	r11,r11,16
 400cbf0:	52800404 	addi	r10,r10,16
 400cbf4:	4a400404 	addi	r9,r9,16
 400cbf8:	1c3fef1e 	bne	r3,r16,400cbb8 <__alt_data_end+0xfc00cbb8>
 400cbfc:	89c00044 	addi	r7,r17,1
 400cc00:	380e913a 	slli	r7,r7,4
 400cc04:	310003cc 	andi	r4,r6,15
 400cc08:	02c000c4 	movi	r11,3
 400cc0c:	11c7883a 	add	r3,r2,r7
 400cc10:	29cb883a 	add	r5,r5,r7
 400cc14:	5900212e 	bgeu	r11,r4,400cc9c <memcpy+0x140>
 400cc18:	1813883a 	mov	r9,r3
 400cc1c:	2811883a 	mov	r8,r5
 400cc20:	200f883a 	mov	r7,r4
 400cc24:	42800017 	ldw	r10,0(r8)
 400cc28:	4a400104 	addi	r9,r9,4
 400cc2c:	39ffff04 	addi	r7,r7,-4
 400cc30:	4abfff15 	stw	r10,-4(r9)
 400cc34:	42000104 	addi	r8,r8,4
 400cc38:	59fffa36 	bltu	r11,r7,400cc24 <__alt_data_end+0xfc00cc24>
 400cc3c:	213fff04 	addi	r4,r4,-4
 400cc40:	2008d0ba 	srli	r4,r4,2
 400cc44:	318000cc 	andi	r6,r6,3
 400cc48:	21000044 	addi	r4,r4,1
 400cc4c:	2109883a 	add	r4,r4,r4
 400cc50:	2109883a 	add	r4,r4,r4
 400cc54:	1907883a 	add	r3,r3,r4
 400cc58:	290b883a 	add	r5,r5,r4
 400cc5c:	30000626 	beq	r6,zero,400cc78 <memcpy+0x11c>
 400cc60:	198d883a 	add	r6,r3,r6
 400cc64:	29c00003 	ldbu	r7,0(r5)
 400cc68:	18c00044 	addi	r3,r3,1
 400cc6c:	29400044 	addi	r5,r5,1
 400cc70:	19ffffc5 	stb	r7,-1(r3)
 400cc74:	19bffb1e 	bne	r3,r6,400cc64 <__alt_data_end+0xfc00cc64>
 400cc78:	dfc00217 	ldw	ra,8(sp)
 400cc7c:	dc400117 	ldw	r17,4(sp)
 400cc80:	dc000017 	ldw	r16,0(sp)
 400cc84:	dec00304 	addi	sp,sp,12
 400cc88:	f800283a 	ret
 400cc8c:	2007883a 	mov	r3,r4
 400cc90:	003ff206 	br	400cc5c <__alt_data_end+0xfc00cc5c>
 400cc94:	2007883a 	mov	r3,r4
 400cc98:	003ff106 	br	400cc60 <__alt_data_end+0xfc00cc60>
 400cc9c:	200d883a 	mov	r6,r4
 400cca0:	003fee06 	br	400cc5c <__alt_data_end+0xfc00cc5c>

0400cca4 <memmove>:
 400cca4:	2005883a 	mov	r2,r4
 400cca8:	29000b2e 	bgeu	r5,r4,400ccd8 <memmove+0x34>
 400ccac:	298f883a 	add	r7,r5,r6
 400ccb0:	21c0092e 	bgeu	r4,r7,400ccd8 <memmove+0x34>
 400ccb4:	2187883a 	add	r3,r4,r6
 400ccb8:	198bc83a 	sub	r5,r3,r6
 400ccbc:	30004826 	beq	r6,zero,400cde0 <memmove+0x13c>
 400ccc0:	39ffffc4 	addi	r7,r7,-1
 400ccc4:	39000003 	ldbu	r4,0(r7)
 400ccc8:	18ffffc4 	addi	r3,r3,-1
 400cccc:	19000005 	stb	r4,0(r3)
 400ccd0:	28fffb1e 	bne	r5,r3,400ccc0 <__alt_data_end+0xfc00ccc0>
 400ccd4:	f800283a 	ret
 400ccd8:	00c003c4 	movi	r3,15
 400ccdc:	1980412e 	bgeu	r3,r6,400cde4 <memmove+0x140>
 400cce0:	2886b03a 	or	r3,r5,r2
 400cce4:	18c000cc 	andi	r3,r3,3
 400cce8:	1800401e 	bne	r3,zero,400cdec <memmove+0x148>
 400ccec:	33fffc04 	addi	r15,r6,-16
 400ccf0:	781ed13a 	srli	r15,r15,4
 400ccf4:	28c00104 	addi	r3,r5,4
 400ccf8:	13400104 	addi	r13,r2,4
 400ccfc:	781c913a 	slli	r14,r15,4
 400cd00:	2b000204 	addi	r12,r5,8
 400cd04:	12c00204 	addi	r11,r2,8
 400cd08:	73800504 	addi	r14,r14,20
 400cd0c:	2a800304 	addi	r10,r5,12
 400cd10:	12400304 	addi	r9,r2,12
 400cd14:	2b9d883a 	add	r14,r5,r14
 400cd18:	2811883a 	mov	r8,r5
 400cd1c:	100f883a 	mov	r7,r2
 400cd20:	41000017 	ldw	r4,0(r8)
 400cd24:	39c00404 	addi	r7,r7,16
 400cd28:	18c00404 	addi	r3,r3,16
 400cd2c:	393ffc15 	stw	r4,-16(r7)
 400cd30:	193ffc17 	ldw	r4,-16(r3)
 400cd34:	6b400404 	addi	r13,r13,16
 400cd38:	5ac00404 	addi	r11,r11,16
 400cd3c:	693ffc15 	stw	r4,-16(r13)
 400cd40:	61000017 	ldw	r4,0(r12)
 400cd44:	4a400404 	addi	r9,r9,16
 400cd48:	42000404 	addi	r8,r8,16
 400cd4c:	593ffc15 	stw	r4,-16(r11)
 400cd50:	51000017 	ldw	r4,0(r10)
 400cd54:	63000404 	addi	r12,r12,16
 400cd58:	52800404 	addi	r10,r10,16
 400cd5c:	493ffc15 	stw	r4,-16(r9)
 400cd60:	1bbfef1e 	bne	r3,r14,400cd20 <__alt_data_end+0xfc00cd20>
 400cd64:	79000044 	addi	r4,r15,1
 400cd68:	2008913a 	slli	r4,r4,4
 400cd6c:	328003cc 	andi	r10,r6,15
 400cd70:	02c000c4 	movi	r11,3
 400cd74:	1107883a 	add	r3,r2,r4
 400cd78:	290b883a 	add	r5,r5,r4
 400cd7c:	5a801e2e 	bgeu	r11,r10,400cdf8 <memmove+0x154>
 400cd80:	1813883a 	mov	r9,r3
 400cd84:	2811883a 	mov	r8,r5
 400cd88:	500f883a 	mov	r7,r10
 400cd8c:	41000017 	ldw	r4,0(r8)
 400cd90:	4a400104 	addi	r9,r9,4
 400cd94:	39ffff04 	addi	r7,r7,-4
 400cd98:	493fff15 	stw	r4,-4(r9)
 400cd9c:	42000104 	addi	r8,r8,4
 400cda0:	59fffa36 	bltu	r11,r7,400cd8c <__alt_data_end+0xfc00cd8c>
 400cda4:	513fff04 	addi	r4,r10,-4
 400cda8:	2008d0ba 	srli	r4,r4,2
 400cdac:	318000cc 	andi	r6,r6,3
 400cdb0:	21000044 	addi	r4,r4,1
 400cdb4:	2109883a 	add	r4,r4,r4
 400cdb8:	2109883a 	add	r4,r4,r4
 400cdbc:	1907883a 	add	r3,r3,r4
 400cdc0:	290b883a 	add	r5,r5,r4
 400cdc4:	30000b26 	beq	r6,zero,400cdf4 <memmove+0x150>
 400cdc8:	198d883a 	add	r6,r3,r6
 400cdcc:	29c00003 	ldbu	r7,0(r5)
 400cdd0:	18c00044 	addi	r3,r3,1
 400cdd4:	29400044 	addi	r5,r5,1
 400cdd8:	19ffffc5 	stb	r7,-1(r3)
 400cddc:	19bffb1e 	bne	r3,r6,400cdcc <__alt_data_end+0xfc00cdcc>
 400cde0:	f800283a 	ret
 400cde4:	1007883a 	mov	r3,r2
 400cde8:	003ff606 	br	400cdc4 <__alt_data_end+0xfc00cdc4>
 400cdec:	1007883a 	mov	r3,r2
 400cdf0:	003ff506 	br	400cdc8 <__alt_data_end+0xfc00cdc8>
 400cdf4:	f800283a 	ret
 400cdf8:	500d883a 	mov	r6,r10
 400cdfc:	003ff106 	br	400cdc4 <__alt_data_end+0xfc00cdc4>

0400ce00 <_Balloc>:
 400ce00:	20801317 	ldw	r2,76(r4)
 400ce04:	defffc04 	addi	sp,sp,-16
 400ce08:	dc400115 	stw	r17,4(sp)
 400ce0c:	dc000015 	stw	r16,0(sp)
 400ce10:	dfc00315 	stw	ra,12(sp)
 400ce14:	dc800215 	stw	r18,8(sp)
 400ce18:	2023883a 	mov	r17,r4
 400ce1c:	2821883a 	mov	r16,r5
 400ce20:	10000f26 	beq	r2,zero,400ce60 <_Balloc+0x60>
 400ce24:	8407883a 	add	r3,r16,r16
 400ce28:	18c7883a 	add	r3,r3,r3
 400ce2c:	10c7883a 	add	r3,r2,r3
 400ce30:	18800017 	ldw	r2,0(r3)
 400ce34:	10001126 	beq	r2,zero,400ce7c <_Balloc+0x7c>
 400ce38:	11000017 	ldw	r4,0(r2)
 400ce3c:	19000015 	stw	r4,0(r3)
 400ce40:	10000415 	stw	zero,16(r2)
 400ce44:	10000315 	stw	zero,12(r2)
 400ce48:	dfc00317 	ldw	ra,12(sp)
 400ce4c:	dc800217 	ldw	r18,8(sp)
 400ce50:	dc400117 	ldw	r17,4(sp)
 400ce54:	dc000017 	ldw	r16,0(sp)
 400ce58:	dec00404 	addi	sp,sp,16
 400ce5c:	f800283a 	ret
 400ce60:	01800844 	movi	r6,33
 400ce64:	01400104 	movi	r5,4
 400ce68:	40101680 	call	4010168 <_calloc_r>
 400ce6c:	88801315 	stw	r2,76(r17)
 400ce70:	103fec1e 	bne	r2,zero,400ce24 <__alt_data_end+0xfc00ce24>
 400ce74:	0005883a 	mov	r2,zero
 400ce78:	003ff306 	br	400ce48 <__alt_data_end+0xfc00ce48>
 400ce7c:	01400044 	movi	r5,1
 400ce80:	2c24983a 	sll	r18,r5,r16
 400ce84:	8809883a 	mov	r4,r17
 400ce88:	91800144 	addi	r6,r18,5
 400ce8c:	318d883a 	add	r6,r6,r6
 400ce90:	318d883a 	add	r6,r6,r6
 400ce94:	40101680 	call	4010168 <_calloc_r>
 400ce98:	103ff626 	beq	r2,zero,400ce74 <__alt_data_end+0xfc00ce74>
 400ce9c:	14000115 	stw	r16,4(r2)
 400cea0:	14800215 	stw	r18,8(r2)
 400cea4:	003fe606 	br	400ce40 <__alt_data_end+0xfc00ce40>

0400cea8 <_Bfree>:
 400cea8:	28000826 	beq	r5,zero,400cecc <_Bfree+0x24>
 400ceac:	28c00117 	ldw	r3,4(r5)
 400ceb0:	20801317 	ldw	r2,76(r4)
 400ceb4:	18c7883a 	add	r3,r3,r3
 400ceb8:	18c7883a 	add	r3,r3,r3
 400cebc:	10c5883a 	add	r2,r2,r3
 400cec0:	10c00017 	ldw	r3,0(r2)
 400cec4:	28c00015 	stw	r3,0(r5)
 400cec8:	11400015 	stw	r5,0(r2)
 400cecc:	f800283a 	ret

0400ced0 <__multadd>:
 400ced0:	defff704 	addi	sp,sp,-36
 400ced4:	dc800215 	stw	r18,8(sp)
 400ced8:	2c800417 	ldw	r18,16(r5)
 400cedc:	dd800615 	stw	r22,24(sp)
 400cee0:	dd400515 	stw	r21,20(sp)
 400cee4:	dd000415 	stw	r20,16(sp)
 400cee8:	dcc00315 	stw	r19,12(sp)
 400ceec:	dc400115 	stw	r17,4(sp)
 400cef0:	dc000015 	stw	r16,0(sp)
 400cef4:	dfc00815 	stw	ra,32(sp)
 400cef8:	ddc00715 	stw	r23,28(sp)
 400cefc:	2827883a 	mov	r19,r5
 400cf00:	2029883a 	mov	r20,r4
 400cf04:	3023883a 	mov	r17,r6
 400cf08:	3821883a 	mov	r16,r7
 400cf0c:	2d400504 	addi	r21,r5,20
 400cf10:	002d883a 	mov	r22,zero
 400cf14:	adc00017 	ldw	r23,0(r21)
 400cf18:	880b883a 	mov	r5,r17
 400cf1c:	ad400104 	addi	r21,r21,4
 400cf20:	b93fffcc 	andi	r4,r23,65535
 400cf24:	4006cd00 	call	4006cd0 <__mulsi3>
 400cf28:	b808d43a 	srli	r4,r23,16
 400cf2c:	880b883a 	mov	r5,r17
 400cf30:	1421883a 	add	r16,r2,r16
 400cf34:	4006cd00 	call	4006cd0 <__mulsi3>
 400cf38:	800ed43a 	srli	r7,r16,16
 400cf3c:	80ffffcc 	andi	r3,r16,65535
 400cf40:	b5800044 	addi	r22,r22,1
 400cf44:	11c5883a 	add	r2,r2,r7
 400cf48:	100e943a 	slli	r7,r2,16
 400cf4c:	1020d43a 	srli	r16,r2,16
 400cf50:	38c7883a 	add	r3,r7,r3
 400cf54:	a8ffff15 	stw	r3,-4(r21)
 400cf58:	b4bfee16 	blt	r22,r18,400cf14 <__alt_data_end+0xfc00cf14>
 400cf5c:	80000926 	beq	r16,zero,400cf84 <__multadd+0xb4>
 400cf60:	98800217 	ldw	r2,8(r19)
 400cf64:	9080130e 	bge	r18,r2,400cfb4 <__multadd+0xe4>
 400cf68:	90800144 	addi	r2,r18,5
 400cf6c:	1085883a 	add	r2,r2,r2
 400cf70:	1085883a 	add	r2,r2,r2
 400cf74:	9885883a 	add	r2,r19,r2
 400cf78:	14000015 	stw	r16,0(r2)
 400cf7c:	94800044 	addi	r18,r18,1
 400cf80:	9c800415 	stw	r18,16(r19)
 400cf84:	9805883a 	mov	r2,r19
 400cf88:	dfc00817 	ldw	ra,32(sp)
 400cf8c:	ddc00717 	ldw	r23,28(sp)
 400cf90:	dd800617 	ldw	r22,24(sp)
 400cf94:	dd400517 	ldw	r21,20(sp)
 400cf98:	dd000417 	ldw	r20,16(sp)
 400cf9c:	dcc00317 	ldw	r19,12(sp)
 400cfa0:	dc800217 	ldw	r18,8(sp)
 400cfa4:	dc400117 	ldw	r17,4(sp)
 400cfa8:	dc000017 	ldw	r16,0(sp)
 400cfac:	dec00904 	addi	sp,sp,36
 400cfb0:	f800283a 	ret
 400cfb4:	99400117 	ldw	r5,4(r19)
 400cfb8:	a009883a 	mov	r4,r20
 400cfbc:	29400044 	addi	r5,r5,1
 400cfc0:	400ce000 	call	400ce00 <_Balloc>
 400cfc4:	99800417 	ldw	r6,16(r19)
 400cfc8:	99400304 	addi	r5,r19,12
 400cfcc:	11000304 	addi	r4,r2,12
 400cfd0:	31800084 	addi	r6,r6,2
 400cfd4:	318d883a 	add	r6,r6,r6
 400cfd8:	318d883a 	add	r6,r6,r6
 400cfdc:	1023883a 	mov	r17,r2
 400cfe0:	400cb5c0 	call	400cb5c <memcpy>
 400cfe4:	98000a26 	beq	r19,zero,400d010 <__multadd+0x140>
 400cfe8:	98c00117 	ldw	r3,4(r19)
 400cfec:	a0801317 	ldw	r2,76(r20)
 400cff0:	18c7883a 	add	r3,r3,r3
 400cff4:	18c7883a 	add	r3,r3,r3
 400cff8:	10c5883a 	add	r2,r2,r3
 400cffc:	10c00017 	ldw	r3,0(r2)
 400d000:	98c00015 	stw	r3,0(r19)
 400d004:	14c00015 	stw	r19,0(r2)
 400d008:	8827883a 	mov	r19,r17
 400d00c:	003fd606 	br	400cf68 <__alt_data_end+0xfc00cf68>
 400d010:	8827883a 	mov	r19,r17
 400d014:	003fd406 	br	400cf68 <__alt_data_end+0xfc00cf68>

0400d018 <__s2b>:
 400d018:	defff904 	addi	sp,sp,-28
 400d01c:	dc400115 	stw	r17,4(sp)
 400d020:	dc000015 	stw	r16,0(sp)
 400d024:	2023883a 	mov	r17,r4
 400d028:	2821883a 	mov	r16,r5
 400d02c:	39000204 	addi	r4,r7,8
 400d030:	01400244 	movi	r5,9
 400d034:	dcc00315 	stw	r19,12(sp)
 400d038:	dc800215 	stw	r18,8(sp)
 400d03c:	dfc00615 	stw	ra,24(sp)
 400d040:	dd400515 	stw	r21,20(sp)
 400d044:	dd000415 	stw	r20,16(sp)
 400d048:	3825883a 	mov	r18,r7
 400d04c:	3027883a 	mov	r19,r6
 400d050:	4006b1c0 	call	4006b1c <__divsi3>
 400d054:	00c00044 	movi	r3,1
 400d058:	000b883a 	mov	r5,zero
 400d05c:	1880030e 	bge	r3,r2,400d06c <__s2b+0x54>
 400d060:	18c7883a 	add	r3,r3,r3
 400d064:	29400044 	addi	r5,r5,1
 400d068:	18bffd16 	blt	r3,r2,400d060 <__alt_data_end+0xfc00d060>
 400d06c:	8809883a 	mov	r4,r17
 400d070:	400ce000 	call	400ce00 <_Balloc>
 400d074:	d8c00717 	ldw	r3,28(sp)
 400d078:	10c00515 	stw	r3,20(r2)
 400d07c:	00c00044 	movi	r3,1
 400d080:	10c00415 	stw	r3,16(r2)
 400d084:	00c00244 	movi	r3,9
 400d088:	1cc0210e 	bge	r3,r19,400d110 <__s2b+0xf8>
 400d08c:	80eb883a 	add	r21,r16,r3
 400d090:	a829883a 	mov	r20,r21
 400d094:	84e1883a 	add	r16,r16,r19
 400d098:	a1c00007 	ldb	r7,0(r20)
 400d09c:	01800284 	movi	r6,10
 400d0a0:	a5000044 	addi	r20,r20,1
 400d0a4:	100b883a 	mov	r5,r2
 400d0a8:	39fff404 	addi	r7,r7,-48
 400d0ac:	8809883a 	mov	r4,r17
 400d0b0:	400ced00 	call	400ced0 <__multadd>
 400d0b4:	a43ff81e 	bne	r20,r16,400d098 <__alt_data_end+0xfc00d098>
 400d0b8:	ace1883a 	add	r16,r21,r19
 400d0bc:	843ffe04 	addi	r16,r16,-8
 400d0c0:	9c800a0e 	bge	r19,r18,400d0ec <__s2b+0xd4>
 400d0c4:	94e5c83a 	sub	r18,r18,r19
 400d0c8:	84a5883a 	add	r18,r16,r18
 400d0cc:	81c00007 	ldb	r7,0(r16)
 400d0d0:	01800284 	movi	r6,10
 400d0d4:	84000044 	addi	r16,r16,1
 400d0d8:	100b883a 	mov	r5,r2
 400d0dc:	39fff404 	addi	r7,r7,-48
 400d0e0:	8809883a 	mov	r4,r17
 400d0e4:	400ced00 	call	400ced0 <__multadd>
 400d0e8:	84bff81e 	bne	r16,r18,400d0cc <__alt_data_end+0xfc00d0cc>
 400d0ec:	dfc00617 	ldw	ra,24(sp)
 400d0f0:	dd400517 	ldw	r21,20(sp)
 400d0f4:	dd000417 	ldw	r20,16(sp)
 400d0f8:	dcc00317 	ldw	r19,12(sp)
 400d0fc:	dc800217 	ldw	r18,8(sp)
 400d100:	dc400117 	ldw	r17,4(sp)
 400d104:	dc000017 	ldw	r16,0(sp)
 400d108:	dec00704 	addi	sp,sp,28
 400d10c:	f800283a 	ret
 400d110:	84000284 	addi	r16,r16,10
 400d114:	1827883a 	mov	r19,r3
 400d118:	003fe906 	br	400d0c0 <__alt_data_end+0xfc00d0c0>

0400d11c <__hi0bits>:
 400d11c:	20bfffec 	andhi	r2,r4,65535
 400d120:	1000141e 	bne	r2,zero,400d174 <__hi0bits+0x58>
 400d124:	2008943a 	slli	r4,r4,16
 400d128:	00800404 	movi	r2,16
 400d12c:	20ffc02c 	andhi	r3,r4,65280
 400d130:	1800021e 	bne	r3,zero,400d13c <__hi0bits+0x20>
 400d134:	2008923a 	slli	r4,r4,8
 400d138:	10800204 	addi	r2,r2,8
 400d13c:	20fc002c 	andhi	r3,r4,61440
 400d140:	1800021e 	bne	r3,zero,400d14c <__hi0bits+0x30>
 400d144:	2008913a 	slli	r4,r4,4
 400d148:	10800104 	addi	r2,r2,4
 400d14c:	20f0002c 	andhi	r3,r4,49152
 400d150:	1800031e 	bne	r3,zero,400d160 <__hi0bits+0x44>
 400d154:	2109883a 	add	r4,r4,r4
 400d158:	10800084 	addi	r2,r2,2
 400d15c:	2109883a 	add	r4,r4,r4
 400d160:	20000316 	blt	r4,zero,400d170 <__hi0bits+0x54>
 400d164:	2110002c 	andhi	r4,r4,16384
 400d168:	2000041e 	bne	r4,zero,400d17c <__hi0bits+0x60>
 400d16c:	00800804 	movi	r2,32
 400d170:	f800283a 	ret
 400d174:	0005883a 	mov	r2,zero
 400d178:	003fec06 	br	400d12c <__alt_data_end+0xfc00d12c>
 400d17c:	10800044 	addi	r2,r2,1
 400d180:	f800283a 	ret

0400d184 <__lo0bits>:
 400d184:	20c00017 	ldw	r3,0(r4)
 400d188:	188001cc 	andi	r2,r3,7
 400d18c:	10000826 	beq	r2,zero,400d1b0 <__lo0bits+0x2c>
 400d190:	1880004c 	andi	r2,r3,1
 400d194:	1000211e 	bne	r2,zero,400d21c <__lo0bits+0x98>
 400d198:	1880008c 	andi	r2,r3,2
 400d19c:	1000211e 	bne	r2,zero,400d224 <__lo0bits+0xa0>
 400d1a0:	1806d0ba 	srli	r3,r3,2
 400d1a4:	00800084 	movi	r2,2
 400d1a8:	20c00015 	stw	r3,0(r4)
 400d1ac:	f800283a 	ret
 400d1b0:	18bfffcc 	andi	r2,r3,65535
 400d1b4:	10001326 	beq	r2,zero,400d204 <__lo0bits+0x80>
 400d1b8:	0005883a 	mov	r2,zero
 400d1bc:	19403fcc 	andi	r5,r3,255
 400d1c0:	2800021e 	bne	r5,zero,400d1cc <__lo0bits+0x48>
 400d1c4:	1806d23a 	srli	r3,r3,8
 400d1c8:	10800204 	addi	r2,r2,8
 400d1cc:	194003cc 	andi	r5,r3,15
 400d1d0:	2800021e 	bne	r5,zero,400d1dc <__lo0bits+0x58>
 400d1d4:	1806d13a 	srli	r3,r3,4
 400d1d8:	10800104 	addi	r2,r2,4
 400d1dc:	194000cc 	andi	r5,r3,3
 400d1e0:	2800021e 	bne	r5,zero,400d1ec <__lo0bits+0x68>
 400d1e4:	1806d0ba 	srli	r3,r3,2
 400d1e8:	10800084 	addi	r2,r2,2
 400d1ec:	1940004c 	andi	r5,r3,1
 400d1f0:	2800081e 	bne	r5,zero,400d214 <__lo0bits+0x90>
 400d1f4:	1806d07a 	srli	r3,r3,1
 400d1f8:	1800051e 	bne	r3,zero,400d210 <__lo0bits+0x8c>
 400d1fc:	00800804 	movi	r2,32
 400d200:	f800283a 	ret
 400d204:	1806d43a 	srli	r3,r3,16
 400d208:	00800404 	movi	r2,16
 400d20c:	003feb06 	br	400d1bc <__alt_data_end+0xfc00d1bc>
 400d210:	10800044 	addi	r2,r2,1
 400d214:	20c00015 	stw	r3,0(r4)
 400d218:	f800283a 	ret
 400d21c:	0005883a 	mov	r2,zero
 400d220:	f800283a 	ret
 400d224:	1806d07a 	srli	r3,r3,1
 400d228:	00800044 	movi	r2,1
 400d22c:	20c00015 	stw	r3,0(r4)
 400d230:	f800283a 	ret

0400d234 <__i2b>:
 400d234:	defffd04 	addi	sp,sp,-12
 400d238:	dc000015 	stw	r16,0(sp)
 400d23c:	04000044 	movi	r16,1
 400d240:	dc400115 	stw	r17,4(sp)
 400d244:	2823883a 	mov	r17,r5
 400d248:	800b883a 	mov	r5,r16
 400d24c:	dfc00215 	stw	ra,8(sp)
 400d250:	400ce000 	call	400ce00 <_Balloc>
 400d254:	14400515 	stw	r17,20(r2)
 400d258:	14000415 	stw	r16,16(r2)
 400d25c:	dfc00217 	ldw	ra,8(sp)
 400d260:	dc400117 	ldw	r17,4(sp)
 400d264:	dc000017 	ldw	r16,0(sp)
 400d268:	dec00304 	addi	sp,sp,12
 400d26c:	f800283a 	ret

0400d270 <__multiply>:
 400d270:	deffef04 	addi	sp,sp,-68
 400d274:	dc400815 	stw	r17,32(sp)
 400d278:	dc000715 	stw	r16,28(sp)
 400d27c:	34400417 	ldw	r17,16(r6)
 400d280:	2c000417 	ldw	r16,16(r5)
 400d284:	dd800d15 	stw	r22,52(sp)
 400d288:	dc800915 	stw	r18,36(sp)
 400d28c:	dfc01015 	stw	ra,64(sp)
 400d290:	df000f15 	stw	fp,60(sp)
 400d294:	ddc00e15 	stw	r23,56(sp)
 400d298:	dd400c15 	stw	r21,48(sp)
 400d29c:	dd000b15 	stw	r20,44(sp)
 400d2a0:	dcc00a15 	stw	r19,40(sp)
 400d2a4:	2825883a 	mov	r18,r5
 400d2a8:	302d883a 	mov	r22,r6
 400d2ac:	8440050e 	bge	r16,r17,400d2c4 <__multiply+0x54>
 400d2b0:	8007883a 	mov	r3,r16
 400d2b4:	3025883a 	mov	r18,r6
 400d2b8:	8821883a 	mov	r16,r17
 400d2bc:	282d883a 	mov	r22,r5
 400d2c0:	1823883a 	mov	r17,r3
 400d2c4:	90800217 	ldw	r2,8(r18)
 400d2c8:	8447883a 	add	r3,r16,r17
 400d2cc:	d8c00215 	stw	r3,8(sp)
 400d2d0:	91400117 	ldw	r5,4(r18)
 400d2d4:	10c0010e 	bge	r2,r3,400d2dc <__multiply+0x6c>
 400d2d8:	29400044 	addi	r5,r5,1
 400d2dc:	400ce000 	call	400ce00 <_Balloc>
 400d2e0:	d8c00217 	ldw	r3,8(sp)
 400d2e4:	d8800615 	stw	r2,24(sp)
 400d2e8:	18eb883a 	add	r21,r3,r3
 400d2ec:	ad6b883a 	add	r21,r21,r21
 400d2f0:	10c00504 	addi	r3,r2,20
 400d2f4:	1d6b883a 	add	r21,r3,r21
 400d2f8:	d8c00115 	stw	r3,4(sp)
 400d2fc:	dd400315 	stw	r21,12(sp)
 400d300:	1805883a 	mov	r2,r3
 400d304:	1d40042e 	bgeu	r3,r21,400d318 <__multiply+0xa8>
 400d308:	d8c00317 	ldw	r3,12(sp)
 400d30c:	10000015 	stw	zero,0(r2)
 400d310:	10800104 	addi	r2,r2,4
 400d314:	10fffc36 	bltu	r2,r3,400d308 <__alt_data_end+0xfc00d308>
 400d318:	8c63883a 	add	r17,r17,r17
 400d31c:	b5800504 	addi	r22,r22,20
 400d320:	8c63883a 	add	r17,r17,r17
 400d324:	94800504 	addi	r18,r18,20
 400d328:	8421883a 	add	r16,r16,r16
 400d32c:	b463883a 	add	r17,r22,r17
 400d330:	8421883a 	add	r16,r16,r16
 400d334:	dd800015 	stw	r22,0(sp)
 400d338:	dc800415 	stw	r18,16(sp)
 400d33c:	dc400515 	stw	r17,20(sp)
 400d340:	9429883a 	add	r20,r18,r16
 400d344:	b4404f2e 	bgeu	r22,r17,400d484 <__multiply+0x214>
 400d348:	d8c00017 	ldw	r3,0(sp)
 400d34c:	1c800017 	ldw	r18,0(r3)
 400d350:	947fffcc 	andi	r17,r18,65535
 400d354:	88001e26 	beq	r17,zero,400d3d0 <__multiply+0x160>
 400d358:	dd800117 	ldw	r22,4(sp)
 400d35c:	dd400417 	ldw	r21,16(sp)
 400d360:	0027883a 	mov	r19,zero
 400d364:	ac800017 	ldw	r18,0(r21)
 400d368:	b4000017 	ldw	r16,0(r22)
 400d36c:	880b883a 	mov	r5,r17
 400d370:	913fffcc 	andi	r4,r18,65535
 400d374:	4006cd00 	call	4006cd0 <__mulsi3>
 400d378:	9008d43a 	srli	r4,r18,16
 400d37c:	84bfffcc 	andi	r18,r16,65535
 400d380:	1485883a 	add	r2,r2,r18
 400d384:	14e5883a 	add	r18,r2,r19
 400d388:	8020d43a 	srli	r16,r16,16
 400d38c:	9026d43a 	srli	r19,r18,16
 400d390:	880b883a 	mov	r5,r17
 400d394:	4006cd00 	call	4006cd0 <__mulsi3>
 400d398:	1405883a 	add	r2,r2,r16
 400d39c:	14e1883a 	add	r16,r2,r19
 400d3a0:	90ffffcc 	andi	r3,r18,65535
 400d3a4:	8024943a 	slli	r18,r16,16
 400d3a8:	ad400104 	addi	r21,r21,4
 400d3ac:	b005883a 	mov	r2,r22
 400d3b0:	90c6b03a 	or	r3,r18,r3
 400d3b4:	b0c00015 	stw	r3,0(r22)
 400d3b8:	8026d43a 	srli	r19,r16,16
 400d3bc:	b5800104 	addi	r22,r22,4
 400d3c0:	ad3fe836 	bltu	r21,r20,400d364 <__alt_data_end+0xfc00d364>
 400d3c4:	d8c00017 	ldw	r3,0(sp)
 400d3c8:	14c00115 	stw	r19,4(r2)
 400d3cc:	1c800017 	ldw	r18,0(r3)
 400d3d0:	9024d43a 	srli	r18,r18,16
 400d3d4:	90002226 	beq	r18,zero,400d460 <__multiply+0x1f0>
 400d3d8:	d8c00117 	ldw	r3,4(sp)
 400d3dc:	dd800417 	ldw	r22,16(sp)
 400d3e0:	002f883a 	mov	r23,zero
 400d3e4:	1f000017 	ldw	fp,0(r3)
 400d3e8:	1823883a 	mov	r17,r3
 400d3ec:	182b883a 	mov	r21,r3
 400d3f0:	e021883a 	mov	r16,fp
 400d3f4:	00000106 	br	400d3fc <__multiply+0x18c>
 400d3f8:	982b883a 	mov	r21,r19
 400d3fc:	b100000b 	ldhu	r4,0(r22)
 400d400:	8020d43a 	srli	r16,r16,16
 400d404:	900b883a 	mov	r5,r18
 400d408:	4006cd00 	call	4006cd0 <__mulsi3>
 400d40c:	1405883a 	add	r2,r2,r16
 400d410:	15ef883a 	add	r23,r2,r23
 400d414:	b804943a 	slli	r2,r23,16
 400d418:	e0ffffcc 	andi	r3,fp,65535
 400d41c:	8c400104 	addi	r17,r17,4
 400d420:	10c6b03a 	or	r3,r2,r3
 400d424:	88ffff15 	stw	r3,-4(r17)
 400d428:	b5800104 	addi	r22,r22,4
 400d42c:	b13fff17 	ldw	r4,-4(r22)
 400d430:	acc00104 	addi	r19,r21,4
 400d434:	900b883a 	mov	r5,r18
 400d438:	2008d43a 	srli	r4,r4,16
 400d43c:	9c000017 	ldw	r16,0(r19)
 400d440:	4006cd00 	call	4006cd0 <__mulsi3>
 400d444:	b806d43a 	srli	r3,r23,16
 400d448:	813fffcc 	andi	r4,r16,65535
 400d44c:	1105883a 	add	r2,r2,r4
 400d450:	10f9883a 	add	fp,r2,r3
 400d454:	e02ed43a 	srli	r23,fp,16
 400d458:	b53fe736 	bltu	r22,r20,400d3f8 <__alt_data_end+0xfc00d3f8>
 400d45c:	af000115 	stw	fp,4(r21)
 400d460:	d8c00017 	ldw	r3,0(sp)
 400d464:	d9000517 	ldw	r4,20(sp)
 400d468:	18c00104 	addi	r3,r3,4
 400d46c:	d8c00015 	stw	r3,0(sp)
 400d470:	d8c00117 	ldw	r3,4(sp)
 400d474:	18c00104 	addi	r3,r3,4
 400d478:	d8c00115 	stw	r3,4(sp)
 400d47c:	d8c00017 	ldw	r3,0(sp)
 400d480:	193fb136 	bltu	r3,r4,400d348 <__alt_data_end+0xfc00d348>
 400d484:	d8c00217 	ldw	r3,8(sp)
 400d488:	00c00c0e 	bge	zero,r3,400d4bc <__multiply+0x24c>
 400d48c:	d8c00317 	ldw	r3,12(sp)
 400d490:	18bfff17 	ldw	r2,-4(r3)
 400d494:	1d7fff04 	addi	r21,r3,-4
 400d498:	10000326 	beq	r2,zero,400d4a8 <__multiply+0x238>
 400d49c:	00000706 	br	400d4bc <__multiply+0x24c>
 400d4a0:	a8800017 	ldw	r2,0(r21)
 400d4a4:	1000051e 	bne	r2,zero,400d4bc <__multiply+0x24c>
 400d4a8:	d8c00217 	ldw	r3,8(sp)
 400d4ac:	ad7fff04 	addi	r21,r21,-4
 400d4b0:	18ffffc4 	addi	r3,r3,-1
 400d4b4:	d8c00215 	stw	r3,8(sp)
 400d4b8:	183ff91e 	bne	r3,zero,400d4a0 <__alt_data_end+0xfc00d4a0>
 400d4bc:	d8c00617 	ldw	r3,24(sp)
 400d4c0:	d9000217 	ldw	r4,8(sp)
 400d4c4:	1805883a 	mov	r2,r3
 400d4c8:	19000415 	stw	r4,16(r3)
 400d4cc:	dfc01017 	ldw	ra,64(sp)
 400d4d0:	df000f17 	ldw	fp,60(sp)
 400d4d4:	ddc00e17 	ldw	r23,56(sp)
 400d4d8:	dd800d17 	ldw	r22,52(sp)
 400d4dc:	dd400c17 	ldw	r21,48(sp)
 400d4e0:	dd000b17 	ldw	r20,44(sp)
 400d4e4:	dcc00a17 	ldw	r19,40(sp)
 400d4e8:	dc800917 	ldw	r18,36(sp)
 400d4ec:	dc400817 	ldw	r17,32(sp)
 400d4f0:	dc000717 	ldw	r16,28(sp)
 400d4f4:	dec01104 	addi	sp,sp,68
 400d4f8:	f800283a 	ret

0400d4fc <__pow5mult>:
 400d4fc:	defffa04 	addi	sp,sp,-24
 400d500:	dcc00315 	stw	r19,12(sp)
 400d504:	dc000015 	stw	r16,0(sp)
 400d508:	dfc00515 	stw	ra,20(sp)
 400d50c:	dd000415 	stw	r20,16(sp)
 400d510:	dc800215 	stw	r18,8(sp)
 400d514:	dc400115 	stw	r17,4(sp)
 400d518:	308000cc 	andi	r2,r6,3
 400d51c:	3021883a 	mov	r16,r6
 400d520:	2027883a 	mov	r19,r4
 400d524:	10002f1e 	bne	r2,zero,400d5e4 <__pow5mult+0xe8>
 400d528:	2825883a 	mov	r18,r5
 400d52c:	8021d0ba 	srai	r16,r16,2
 400d530:	80001a26 	beq	r16,zero,400d59c <__pow5mult+0xa0>
 400d534:	9c401217 	ldw	r17,72(r19)
 400d538:	8800061e 	bne	r17,zero,400d554 <__pow5mult+0x58>
 400d53c:	00003406 	br	400d610 <__pow5mult+0x114>
 400d540:	8021d07a 	srai	r16,r16,1
 400d544:	80001526 	beq	r16,zero,400d59c <__pow5mult+0xa0>
 400d548:	88800017 	ldw	r2,0(r17)
 400d54c:	10001c26 	beq	r2,zero,400d5c0 <__pow5mult+0xc4>
 400d550:	1023883a 	mov	r17,r2
 400d554:	8080004c 	andi	r2,r16,1
 400d558:	103ff926 	beq	r2,zero,400d540 <__alt_data_end+0xfc00d540>
 400d55c:	880d883a 	mov	r6,r17
 400d560:	900b883a 	mov	r5,r18
 400d564:	9809883a 	mov	r4,r19
 400d568:	400d2700 	call	400d270 <__multiply>
 400d56c:	90001b26 	beq	r18,zero,400d5dc <__pow5mult+0xe0>
 400d570:	91000117 	ldw	r4,4(r18)
 400d574:	98c01317 	ldw	r3,76(r19)
 400d578:	8021d07a 	srai	r16,r16,1
 400d57c:	2109883a 	add	r4,r4,r4
 400d580:	2109883a 	add	r4,r4,r4
 400d584:	1907883a 	add	r3,r3,r4
 400d588:	19000017 	ldw	r4,0(r3)
 400d58c:	91000015 	stw	r4,0(r18)
 400d590:	1c800015 	stw	r18,0(r3)
 400d594:	1025883a 	mov	r18,r2
 400d598:	803feb1e 	bne	r16,zero,400d548 <__alt_data_end+0xfc00d548>
 400d59c:	9005883a 	mov	r2,r18
 400d5a0:	dfc00517 	ldw	ra,20(sp)
 400d5a4:	dd000417 	ldw	r20,16(sp)
 400d5a8:	dcc00317 	ldw	r19,12(sp)
 400d5ac:	dc800217 	ldw	r18,8(sp)
 400d5b0:	dc400117 	ldw	r17,4(sp)
 400d5b4:	dc000017 	ldw	r16,0(sp)
 400d5b8:	dec00604 	addi	sp,sp,24
 400d5bc:	f800283a 	ret
 400d5c0:	880d883a 	mov	r6,r17
 400d5c4:	880b883a 	mov	r5,r17
 400d5c8:	9809883a 	mov	r4,r19
 400d5cc:	400d2700 	call	400d270 <__multiply>
 400d5d0:	88800015 	stw	r2,0(r17)
 400d5d4:	10000015 	stw	zero,0(r2)
 400d5d8:	003fdd06 	br	400d550 <__alt_data_end+0xfc00d550>
 400d5dc:	1025883a 	mov	r18,r2
 400d5e0:	003fd706 	br	400d540 <__alt_data_end+0xfc00d540>
 400d5e4:	10bfffc4 	addi	r2,r2,-1
 400d5e8:	1085883a 	add	r2,r2,r2
 400d5ec:	00c10074 	movhi	r3,1025
 400d5f0:	18db8b04 	addi	r3,r3,28204
 400d5f4:	1085883a 	add	r2,r2,r2
 400d5f8:	1885883a 	add	r2,r3,r2
 400d5fc:	11800017 	ldw	r6,0(r2)
 400d600:	000f883a 	mov	r7,zero
 400d604:	400ced00 	call	400ced0 <__multadd>
 400d608:	1025883a 	mov	r18,r2
 400d60c:	003fc706 	br	400d52c <__alt_data_end+0xfc00d52c>
 400d610:	05000044 	movi	r20,1
 400d614:	a00b883a 	mov	r5,r20
 400d618:	9809883a 	mov	r4,r19
 400d61c:	400ce000 	call	400ce00 <_Balloc>
 400d620:	1023883a 	mov	r17,r2
 400d624:	00809c44 	movi	r2,625
 400d628:	88800515 	stw	r2,20(r17)
 400d62c:	8d000415 	stw	r20,16(r17)
 400d630:	9c401215 	stw	r17,72(r19)
 400d634:	88000015 	stw	zero,0(r17)
 400d638:	003fc606 	br	400d554 <__alt_data_end+0xfc00d554>

0400d63c <__lshift>:
 400d63c:	defff904 	addi	sp,sp,-28
 400d640:	dd400515 	stw	r21,20(sp)
 400d644:	dcc00315 	stw	r19,12(sp)
 400d648:	302bd17a 	srai	r21,r6,5
 400d64c:	2cc00417 	ldw	r19,16(r5)
 400d650:	28800217 	ldw	r2,8(r5)
 400d654:	dd000415 	stw	r20,16(sp)
 400d658:	ace7883a 	add	r19,r21,r19
 400d65c:	dc800215 	stw	r18,8(sp)
 400d660:	dc400115 	stw	r17,4(sp)
 400d664:	dc000015 	stw	r16,0(sp)
 400d668:	dfc00615 	stw	ra,24(sp)
 400d66c:	9c000044 	addi	r16,r19,1
 400d670:	2823883a 	mov	r17,r5
 400d674:	3029883a 	mov	r20,r6
 400d678:	2025883a 	mov	r18,r4
 400d67c:	29400117 	ldw	r5,4(r5)
 400d680:	1400030e 	bge	r2,r16,400d690 <__lshift+0x54>
 400d684:	1085883a 	add	r2,r2,r2
 400d688:	29400044 	addi	r5,r5,1
 400d68c:	143ffd16 	blt	r2,r16,400d684 <__alt_data_end+0xfc00d684>
 400d690:	9009883a 	mov	r4,r18
 400d694:	400ce000 	call	400ce00 <_Balloc>
 400d698:	10c00504 	addi	r3,r2,20
 400d69c:	0540070e 	bge	zero,r21,400d6bc <__lshift+0x80>
 400d6a0:	ad6b883a 	add	r21,r21,r21
 400d6a4:	ad6b883a 	add	r21,r21,r21
 400d6a8:	1809883a 	mov	r4,r3
 400d6ac:	1d47883a 	add	r3,r3,r21
 400d6b0:	20000015 	stw	zero,0(r4)
 400d6b4:	21000104 	addi	r4,r4,4
 400d6b8:	193ffd1e 	bne	r3,r4,400d6b0 <__alt_data_end+0xfc00d6b0>
 400d6bc:	8a000417 	ldw	r8,16(r17)
 400d6c0:	89000504 	addi	r4,r17,20
 400d6c4:	a18007cc 	andi	r6,r20,31
 400d6c8:	4211883a 	add	r8,r8,r8
 400d6cc:	4211883a 	add	r8,r8,r8
 400d6d0:	2211883a 	add	r8,r4,r8
 400d6d4:	30002326 	beq	r6,zero,400d764 <__lshift+0x128>
 400d6d8:	02400804 	movi	r9,32
 400d6dc:	4993c83a 	sub	r9,r9,r6
 400d6e0:	000b883a 	mov	r5,zero
 400d6e4:	21c00017 	ldw	r7,0(r4)
 400d6e8:	1815883a 	mov	r10,r3
 400d6ec:	18c00104 	addi	r3,r3,4
 400d6f0:	398e983a 	sll	r7,r7,r6
 400d6f4:	21000104 	addi	r4,r4,4
 400d6f8:	394ab03a 	or	r5,r7,r5
 400d6fc:	197fff15 	stw	r5,-4(r3)
 400d700:	217fff17 	ldw	r5,-4(r4)
 400d704:	2a4ad83a 	srl	r5,r5,r9
 400d708:	223ff636 	bltu	r4,r8,400d6e4 <__alt_data_end+0xfc00d6e4>
 400d70c:	51400115 	stw	r5,4(r10)
 400d710:	28001a1e 	bne	r5,zero,400d77c <__lshift+0x140>
 400d714:	843fffc4 	addi	r16,r16,-1
 400d718:	14000415 	stw	r16,16(r2)
 400d71c:	88000826 	beq	r17,zero,400d740 <__lshift+0x104>
 400d720:	89000117 	ldw	r4,4(r17)
 400d724:	90c01317 	ldw	r3,76(r18)
 400d728:	2109883a 	add	r4,r4,r4
 400d72c:	2109883a 	add	r4,r4,r4
 400d730:	1907883a 	add	r3,r3,r4
 400d734:	19000017 	ldw	r4,0(r3)
 400d738:	89000015 	stw	r4,0(r17)
 400d73c:	1c400015 	stw	r17,0(r3)
 400d740:	dfc00617 	ldw	ra,24(sp)
 400d744:	dd400517 	ldw	r21,20(sp)
 400d748:	dd000417 	ldw	r20,16(sp)
 400d74c:	dcc00317 	ldw	r19,12(sp)
 400d750:	dc800217 	ldw	r18,8(sp)
 400d754:	dc400117 	ldw	r17,4(sp)
 400d758:	dc000017 	ldw	r16,0(sp)
 400d75c:	dec00704 	addi	sp,sp,28
 400d760:	f800283a 	ret
 400d764:	21400017 	ldw	r5,0(r4)
 400d768:	18c00104 	addi	r3,r3,4
 400d76c:	21000104 	addi	r4,r4,4
 400d770:	197fff15 	stw	r5,-4(r3)
 400d774:	223ffb36 	bltu	r4,r8,400d764 <__alt_data_end+0xfc00d764>
 400d778:	003fe606 	br	400d714 <__alt_data_end+0xfc00d714>
 400d77c:	9c000084 	addi	r16,r19,2
 400d780:	003fe406 	br	400d714 <__alt_data_end+0xfc00d714>

0400d784 <__mcmp>:
 400d784:	20800417 	ldw	r2,16(r4)
 400d788:	28c00417 	ldw	r3,16(r5)
 400d78c:	10c5c83a 	sub	r2,r2,r3
 400d790:	1000111e 	bne	r2,zero,400d7d8 <__mcmp+0x54>
 400d794:	18c7883a 	add	r3,r3,r3
 400d798:	18c7883a 	add	r3,r3,r3
 400d79c:	21000504 	addi	r4,r4,20
 400d7a0:	29400504 	addi	r5,r5,20
 400d7a4:	20c5883a 	add	r2,r4,r3
 400d7a8:	28cb883a 	add	r5,r5,r3
 400d7ac:	00000106 	br	400d7b4 <__mcmp+0x30>
 400d7b0:	20800a2e 	bgeu	r4,r2,400d7dc <__mcmp+0x58>
 400d7b4:	10bfff04 	addi	r2,r2,-4
 400d7b8:	297fff04 	addi	r5,r5,-4
 400d7bc:	11800017 	ldw	r6,0(r2)
 400d7c0:	28c00017 	ldw	r3,0(r5)
 400d7c4:	30fffa26 	beq	r6,r3,400d7b0 <__alt_data_end+0xfc00d7b0>
 400d7c8:	30c00236 	bltu	r6,r3,400d7d4 <__mcmp+0x50>
 400d7cc:	00800044 	movi	r2,1
 400d7d0:	f800283a 	ret
 400d7d4:	00bfffc4 	movi	r2,-1
 400d7d8:	f800283a 	ret
 400d7dc:	0005883a 	mov	r2,zero
 400d7e0:	f800283a 	ret

0400d7e4 <__mdiff>:
 400d7e4:	28c00417 	ldw	r3,16(r5)
 400d7e8:	30800417 	ldw	r2,16(r6)
 400d7ec:	defffa04 	addi	sp,sp,-24
 400d7f0:	dcc00315 	stw	r19,12(sp)
 400d7f4:	dc800215 	stw	r18,8(sp)
 400d7f8:	dfc00515 	stw	ra,20(sp)
 400d7fc:	dd000415 	stw	r20,16(sp)
 400d800:	dc400115 	stw	r17,4(sp)
 400d804:	dc000015 	stw	r16,0(sp)
 400d808:	1887c83a 	sub	r3,r3,r2
 400d80c:	2825883a 	mov	r18,r5
 400d810:	3027883a 	mov	r19,r6
 400d814:	1800141e 	bne	r3,zero,400d868 <__mdiff+0x84>
 400d818:	1085883a 	add	r2,r2,r2
 400d81c:	1085883a 	add	r2,r2,r2
 400d820:	2a000504 	addi	r8,r5,20
 400d824:	34000504 	addi	r16,r6,20
 400d828:	4087883a 	add	r3,r8,r2
 400d82c:	8085883a 	add	r2,r16,r2
 400d830:	00000106 	br	400d838 <__mdiff+0x54>
 400d834:	40c0592e 	bgeu	r8,r3,400d99c <__mdiff+0x1b8>
 400d838:	18ffff04 	addi	r3,r3,-4
 400d83c:	10bfff04 	addi	r2,r2,-4
 400d840:	19c00017 	ldw	r7,0(r3)
 400d844:	11400017 	ldw	r5,0(r2)
 400d848:	397ffa26 	beq	r7,r5,400d834 <__alt_data_end+0xfc00d834>
 400d84c:	3940592e 	bgeu	r7,r5,400d9b4 <__mdiff+0x1d0>
 400d850:	9005883a 	mov	r2,r18
 400d854:	4023883a 	mov	r17,r8
 400d858:	9825883a 	mov	r18,r19
 400d85c:	05000044 	movi	r20,1
 400d860:	1027883a 	mov	r19,r2
 400d864:	00000406 	br	400d878 <__mdiff+0x94>
 400d868:	18005616 	blt	r3,zero,400d9c4 <__mdiff+0x1e0>
 400d86c:	34400504 	addi	r17,r6,20
 400d870:	2c000504 	addi	r16,r5,20
 400d874:	0029883a 	mov	r20,zero
 400d878:	91400117 	ldw	r5,4(r18)
 400d87c:	400ce000 	call	400ce00 <_Balloc>
 400d880:	92400417 	ldw	r9,16(r18)
 400d884:	9b000417 	ldw	r12,16(r19)
 400d888:	12c00504 	addi	r11,r2,20
 400d88c:	4a51883a 	add	r8,r9,r9
 400d890:	6319883a 	add	r12,r12,r12
 400d894:	4211883a 	add	r8,r8,r8
 400d898:	6319883a 	add	r12,r12,r12
 400d89c:	15000315 	stw	r20,12(r2)
 400d8a0:	8211883a 	add	r8,r16,r8
 400d8a4:	8b19883a 	add	r12,r17,r12
 400d8a8:	0007883a 	mov	r3,zero
 400d8ac:	81400017 	ldw	r5,0(r16)
 400d8b0:	89c00017 	ldw	r7,0(r17)
 400d8b4:	59800104 	addi	r6,r11,4
 400d8b8:	293fffcc 	andi	r4,r5,65535
 400d8bc:	20c7883a 	add	r3,r4,r3
 400d8c0:	393fffcc 	andi	r4,r7,65535
 400d8c4:	1909c83a 	sub	r4,r3,r4
 400d8c8:	280ad43a 	srli	r5,r5,16
 400d8cc:	380ed43a 	srli	r7,r7,16
 400d8d0:	2007d43a 	srai	r3,r4,16
 400d8d4:	213fffcc 	andi	r4,r4,65535
 400d8d8:	29cbc83a 	sub	r5,r5,r7
 400d8dc:	28c7883a 	add	r3,r5,r3
 400d8e0:	180a943a 	slli	r5,r3,16
 400d8e4:	8c400104 	addi	r17,r17,4
 400d8e8:	84000104 	addi	r16,r16,4
 400d8ec:	2908b03a 	or	r4,r5,r4
 400d8f0:	59000015 	stw	r4,0(r11)
 400d8f4:	1807d43a 	srai	r3,r3,16
 400d8f8:	3015883a 	mov	r10,r6
 400d8fc:	3017883a 	mov	r11,r6
 400d900:	8b3fea36 	bltu	r17,r12,400d8ac <__alt_data_end+0xfc00d8ac>
 400d904:	8200162e 	bgeu	r16,r8,400d960 <__mdiff+0x17c>
 400d908:	8017883a 	mov	r11,r16
 400d90c:	59400017 	ldw	r5,0(r11)
 400d910:	31800104 	addi	r6,r6,4
 400d914:	5ac00104 	addi	r11,r11,4
 400d918:	293fffcc 	andi	r4,r5,65535
 400d91c:	20c7883a 	add	r3,r4,r3
 400d920:	280ed43a 	srli	r7,r5,16
 400d924:	180bd43a 	srai	r5,r3,16
 400d928:	193fffcc 	andi	r4,r3,65535
 400d92c:	3947883a 	add	r3,r7,r5
 400d930:	180a943a 	slli	r5,r3,16
 400d934:	1807d43a 	srai	r3,r3,16
 400d938:	2908b03a 	or	r4,r5,r4
 400d93c:	313fff15 	stw	r4,-4(r6)
 400d940:	5a3ff236 	bltu	r11,r8,400d90c <__alt_data_end+0xfc00d90c>
 400d944:	0406303a 	nor	r3,zero,r16
 400d948:	1a07883a 	add	r3,r3,r8
 400d94c:	1806d0ba 	srli	r3,r3,2
 400d950:	18c00044 	addi	r3,r3,1
 400d954:	18c7883a 	add	r3,r3,r3
 400d958:	18c7883a 	add	r3,r3,r3
 400d95c:	50d5883a 	add	r10,r10,r3
 400d960:	50ffff04 	addi	r3,r10,-4
 400d964:	2000041e 	bne	r4,zero,400d978 <__mdiff+0x194>
 400d968:	18ffff04 	addi	r3,r3,-4
 400d96c:	19000017 	ldw	r4,0(r3)
 400d970:	4a7fffc4 	addi	r9,r9,-1
 400d974:	203ffc26 	beq	r4,zero,400d968 <__alt_data_end+0xfc00d968>
 400d978:	12400415 	stw	r9,16(r2)
 400d97c:	dfc00517 	ldw	ra,20(sp)
 400d980:	dd000417 	ldw	r20,16(sp)
 400d984:	dcc00317 	ldw	r19,12(sp)
 400d988:	dc800217 	ldw	r18,8(sp)
 400d98c:	dc400117 	ldw	r17,4(sp)
 400d990:	dc000017 	ldw	r16,0(sp)
 400d994:	dec00604 	addi	sp,sp,24
 400d998:	f800283a 	ret
 400d99c:	000b883a 	mov	r5,zero
 400d9a0:	400ce000 	call	400ce00 <_Balloc>
 400d9a4:	00c00044 	movi	r3,1
 400d9a8:	10c00415 	stw	r3,16(r2)
 400d9ac:	10000515 	stw	zero,20(r2)
 400d9b0:	003ff206 	br	400d97c <__alt_data_end+0xfc00d97c>
 400d9b4:	8023883a 	mov	r17,r16
 400d9b8:	0029883a 	mov	r20,zero
 400d9bc:	4021883a 	mov	r16,r8
 400d9c0:	003fad06 	br	400d878 <__alt_data_end+0xfc00d878>
 400d9c4:	9005883a 	mov	r2,r18
 400d9c8:	94400504 	addi	r17,r18,20
 400d9cc:	9c000504 	addi	r16,r19,20
 400d9d0:	9825883a 	mov	r18,r19
 400d9d4:	05000044 	movi	r20,1
 400d9d8:	1027883a 	mov	r19,r2
 400d9dc:	003fa606 	br	400d878 <__alt_data_end+0xfc00d878>

0400d9e0 <__ulp>:
 400d9e0:	295ffc2c 	andhi	r5,r5,32752
 400d9e4:	00bf3034 	movhi	r2,64704
 400d9e8:	2887883a 	add	r3,r5,r2
 400d9ec:	00c0020e 	bge	zero,r3,400d9f8 <__ulp+0x18>
 400d9f0:	0005883a 	mov	r2,zero
 400d9f4:	f800283a 	ret
 400d9f8:	00c7c83a 	sub	r3,zero,r3
 400d9fc:	1807d53a 	srai	r3,r3,20
 400da00:	008004c4 	movi	r2,19
 400da04:	10c00b0e 	bge	r2,r3,400da34 <__ulp+0x54>
 400da08:	18bffb04 	addi	r2,r3,-20
 400da0c:	01000784 	movi	r4,30
 400da10:	0007883a 	mov	r3,zero
 400da14:	20800516 	blt	r4,r2,400da2c <__ulp+0x4c>
 400da18:	010007c4 	movi	r4,31
 400da1c:	2089c83a 	sub	r4,r4,r2
 400da20:	00800044 	movi	r2,1
 400da24:	1104983a 	sll	r2,r2,r4
 400da28:	f800283a 	ret
 400da2c:	00800044 	movi	r2,1
 400da30:	f800283a 	ret
 400da34:	01400234 	movhi	r5,8
 400da38:	28c7d83a 	sra	r3,r5,r3
 400da3c:	0005883a 	mov	r2,zero
 400da40:	f800283a 	ret

0400da44 <__b2d>:
 400da44:	defffa04 	addi	sp,sp,-24
 400da48:	dc000015 	stw	r16,0(sp)
 400da4c:	24000417 	ldw	r16,16(r4)
 400da50:	dc400115 	stw	r17,4(sp)
 400da54:	24400504 	addi	r17,r4,20
 400da58:	8421883a 	add	r16,r16,r16
 400da5c:	8421883a 	add	r16,r16,r16
 400da60:	8c21883a 	add	r16,r17,r16
 400da64:	dc800215 	stw	r18,8(sp)
 400da68:	84bfff17 	ldw	r18,-4(r16)
 400da6c:	dd000415 	stw	r20,16(sp)
 400da70:	dcc00315 	stw	r19,12(sp)
 400da74:	9009883a 	mov	r4,r18
 400da78:	2829883a 	mov	r20,r5
 400da7c:	dfc00515 	stw	ra,20(sp)
 400da80:	400d11c0 	call	400d11c <__hi0bits>
 400da84:	00c00804 	movi	r3,32
 400da88:	1889c83a 	sub	r4,r3,r2
 400da8c:	a1000015 	stw	r4,0(r20)
 400da90:	01000284 	movi	r4,10
 400da94:	84ffff04 	addi	r19,r16,-4
 400da98:	20801216 	blt	r4,r2,400dae4 <__b2d+0xa0>
 400da9c:	018002c4 	movi	r6,11
 400daa0:	308dc83a 	sub	r6,r6,r2
 400daa4:	9186d83a 	srl	r3,r18,r6
 400daa8:	18cffc34 	orhi	r3,r3,16368
 400daac:	8cc0212e 	bgeu	r17,r19,400db34 <__b2d+0xf0>
 400dab0:	813ffe17 	ldw	r4,-8(r16)
 400dab4:	218cd83a 	srl	r6,r4,r6
 400dab8:	10800544 	addi	r2,r2,21
 400dabc:	9084983a 	sll	r2,r18,r2
 400dac0:	1184b03a 	or	r2,r2,r6
 400dac4:	dfc00517 	ldw	ra,20(sp)
 400dac8:	dd000417 	ldw	r20,16(sp)
 400dacc:	dcc00317 	ldw	r19,12(sp)
 400dad0:	dc800217 	ldw	r18,8(sp)
 400dad4:	dc400117 	ldw	r17,4(sp)
 400dad8:	dc000017 	ldw	r16,0(sp)
 400dadc:	dec00604 	addi	sp,sp,24
 400dae0:	f800283a 	ret
 400dae4:	8cc00f2e 	bgeu	r17,r19,400db24 <__b2d+0xe0>
 400dae8:	117ffd44 	addi	r5,r2,-11
 400daec:	80bffe17 	ldw	r2,-8(r16)
 400daf0:	28000e26 	beq	r5,zero,400db2c <__b2d+0xe8>
 400daf4:	1949c83a 	sub	r4,r3,r5
 400daf8:	9164983a 	sll	r18,r18,r5
 400dafc:	1106d83a 	srl	r3,r2,r4
 400db00:	81bffe04 	addi	r6,r16,-8
 400db04:	948ffc34 	orhi	r18,r18,16368
 400db08:	90c6b03a 	or	r3,r18,r3
 400db0c:	89800e2e 	bgeu	r17,r6,400db48 <__b2d+0x104>
 400db10:	81bffd17 	ldw	r6,-12(r16)
 400db14:	1144983a 	sll	r2,r2,r5
 400db18:	310ad83a 	srl	r5,r6,r4
 400db1c:	2884b03a 	or	r2,r5,r2
 400db20:	003fe806 	br	400dac4 <__alt_data_end+0xfc00dac4>
 400db24:	10bffd44 	addi	r2,r2,-11
 400db28:	1000041e 	bne	r2,zero,400db3c <__b2d+0xf8>
 400db2c:	90cffc34 	orhi	r3,r18,16368
 400db30:	003fe406 	br	400dac4 <__alt_data_end+0xfc00dac4>
 400db34:	000d883a 	mov	r6,zero
 400db38:	003fdf06 	br	400dab8 <__alt_data_end+0xfc00dab8>
 400db3c:	90a4983a 	sll	r18,r18,r2
 400db40:	0005883a 	mov	r2,zero
 400db44:	003ff906 	br	400db2c <__alt_data_end+0xfc00db2c>
 400db48:	1144983a 	sll	r2,r2,r5
 400db4c:	003fdd06 	br	400dac4 <__alt_data_end+0xfc00dac4>

0400db50 <__d2b>:
 400db50:	defff804 	addi	sp,sp,-32
 400db54:	dc000215 	stw	r16,8(sp)
 400db58:	3021883a 	mov	r16,r6
 400db5c:	dc400315 	stw	r17,12(sp)
 400db60:	8022907a 	slli	r17,r16,1
 400db64:	dd000615 	stw	r20,24(sp)
 400db68:	2829883a 	mov	r20,r5
 400db6c:	01400044 	movi	r5,1
 400db70:	dcc00515 	stw	r19,20(sp)
 400db74:	dc800415 	stw	r18,16(sp)
 400db78:	dfc00715 	stw	ra,28(sp)
 400db7c:	3825883a 	mov	r18,r7
 400db80:	8822d57a 	srli	r17,r17,21
 400db84:	400ce000 	call	400ce00 <_Balloc>
 400db88:	1027883a 	mov	r19,r2
 400db8c:	00800434 	movhi	r2,16
 400db90:	10bfffc4 	addi	r2,r2,-1
 400db94:	808c703a 	and	r6,r16,r2
 400db98:	88000126 	beq	r17,zero,400dba0 <__d2b+0x50>
 400db9c:	31800434 	orhi	r6,r6,16
 400dba0:	d9800015 	stw	r6,0(sp)
 400dba4:	a0002426 	beq	r20,zero,400dc38 <__d2b+0xe8>
 400dba8:	d9000104 	addi	r4,sp,4
 400dbac:	dd000115 	stw	r20,4(sp)
 400dbb0:	400d1840 	call	400d184 <__lo0bits>
 400dbb4:	d8c00017 	ldw	r3,0(sp)
 400dbb8:	10002f1e 	bne	r2,zero,400dc78 <__d2b+0x128>
 400dbbc:	d9000117 	ldw	r4,4(sp)
 400dbc0:	99000515 	stw	r4,20(r19)
 400dbc4:	1821003a 	cmpeq	r16,r3,zero
 400dbc8:	01000084 	movi	r4,2
 400dbcc:	2421c83a 	sub	r16,r4,r16
 400dbd0:	98c00615 	stw	r3,24(r19)
 400dbd4:	9c000415 	stw	r16,16(r19)
 400dbd8:	88001f1e 	bne	r17,zero,400dc58 <__d2b+0x108>
 400dbdc:	10bef384 	addi	r2,r2,-1074
 400dbe0:	90800015 	stw	r2,0(r18)
 400dbe4:	00900034 	movhi	r2,16384
 400dbe8:	10bfffc4 	addi	r2,r2,-1
 400dbec:	8085883a 	add	r2,r16,r2
 400dbf0:	1085883a 	add	r2,r2,r2
 400dbf4:	1085883a 	add	r2,r2,r2
 400dbf8:	9885883a 	add	r2,r19,r2
 400dbfc:	11000517 	ldw	r4,20(r2)
 400dc00:	8020917a 	slli	r16,r16,5
 400dc04:	400d11c0 	call	400d11c <__hi0bits>
 400dc08:	d8c00817 	ldw	r3,32(sp)
 400dc0c:	8085c83a 	sub	r2,r16,r2
 400dc10:	18800015 	stw	r2,0(r3)
 400dc14:	9805883a 	mov	r2,r19
 400dc18:	dfc00717 	ldw	ra,28(sp)
 400dc1c:	dd000617 	ldw	r20,24(sp)
 400dc20:	dcc00517 	ldw	r19,20(sp)
 400dc24:	dc800417 	ldw	r18,16(sp)
 400dc28:	dc400317 	ldw	r17,12(sp)
 400dc2c:	dc000217 	ldw	r16,8(sp)
 400dc30:	dec00804 	addi	sp,sp,32
 400dc34:	f800283a 	ret
 400dc38:	d809883a 	mov	r4,sp
 400dc3c:	400d1840 	call	400d184 <__lo0bits>
 400dc40:	d8c00017 	ldw	r3,0(sp)
 400dc44:	04000044 	movi	r16,1
 400dc48:	9c000415 	stw	r16,16(r19)
 400dc4c:	98c00515 	stw	r3,20(r19)
 400dc50:	10800804 	addi	r2,r2,32
 400dc54:	883fe126 	beq	r17,zero,400dbdc <__alt_data_end+0xfc00dbdc>
 400dc58:	00c00d44 	movi	r3,53
 400dc5c:	8c7ef344 	addi	r17,r17,-1075
 400dc60:	88a3883a 	add	r17,r17,r2
 400dc64:	1885c83a 	sub	r2,r3,r2
 400dc68:	d8c00817 	ldw	r3,32(sp)
 400dc6c:	94400015 	stw	r17,0(r18)
 400dc70:	18800015 	stw	r2,0(r3)
 400dc74:	003fe706 	br	400dc14 <__alt_data_end+0xfc00dc14>
 400dc78:	01000804 	movi	r4,32
 400dc7c:	2089c83a 	sub	r4,r4,r2
 400dc80:	1908983a 	sll	r4,r3,r4
 400dc84:	d9400117 	ldw	r5,4(sp)
 400dc88:	1886d83a 	srl	r3,r3,r2
 400dc8c:	2148b03a 	or	r4,r4,r5
 400dc90:	99000515 	stw	r4,20(r19)
 400dc94:	d8c00015 	stw	r3,0(sp)
 400dc98:	003fca06 	br	400dbc4 <__alt_data_end+0xfc00dbc4>

0400dc9c <__ratio>:
 400dc9c:	defff904 	addi	sp,sp,-28
 400dca0:	dc400315 	stw	r17,12(sp)
 400dca4:	2823883a 	mov	r17,r5
 400dca8:	d9400104 	addi	r5,sp,4
 400dcac:	dfc00615 	stw	ra,24(sp)
 400dcb0:	dcc00515 	stw	r19,20(sp)
 400dcb4:	dc800415 	stw	r18,16(sp)
 400dcb8:	2027883a 	mov	r19,r4
 400dcbc:	dc000215 	stw	r16,8(sp)
 400dcc0:	400da440 	call	400da44 <__b2d>
 400dcc4:	d80b883a 	mov	r5,sp
 400dcc8:	8809883a 	mov	r4,r17
 400dccc:	1025883a 	mov	r18,r2
 400dcd0:	1821883a 	mov	r16,r3
 400dcd4:	400da440 	call	400da44 <__b2d>
 400dcd8:	8a000417 	ldw	r8,16(r17)
 400dcdc:	99000417 	ldw	r4,16(r19)
 400dce0:	d9400117 	ldw	r5,4(sp)
 400dce4:	2209c83a 	sub	r4,r4,r8
 400dce8:	2010917a 	slli	r8,r4,5
 400dcec:	d9000017 	ldw	r4,0(sp)
 400dcf0:	2909c83a 	sub	r4,r5,r4
 400dcf4:	4109883a 	add	r4,r8,r4
 400dcf8:	01000e0e 	bge	zero,r4,400dd34 <__ratio+0x98>
 400dcfc:	2008953a 	slli	r4,r4,20
 400dd00:	2421883a 	add	r16,r4,r16
 400dd04:	100d883a 	mov	r6,r2
 400dd08:	180f883a 	mov	r7,r3
 400dd0c:	9009883a 	mov	r4,r18
 400dd10:	800b883a 	mov	r5,r16
 400dd14:	4011e200 	call	4011e20 <__divdf3>
 400dd18:	dfc00617 	ldw	ra,24(sp)
 400dd1c:	dcc00517 	ldw	r19,20(sp)
 400dd20:	dc800417 	ldw	r18,16(sp)
 400dd24:	dc400317 	ldw	r17,12(sp)
 400dd28:	dc000217 	ldw	r16,8(sp)
 400dd2c:	dec00704 	addi	sp,sp,28
 400dd30:	f800283a 	ret
 400dd34:	2008953a 	slli	r4,r4,20
 400dd38:	1907c83a 	sub	r3,r3,r4
 400dd3c:	003ff106 	br	400dd04 <__alt_data_end+0xfc00dd04>

0400dd40 <_mprec_log10>:
 400dd40:	defffe04 	addi	sp,sp,-8
 400dd44:	dc000015 	stw	r16,0(sp)
 400dd48:	dfc00115 	stw	ra,4(sp)
 400dd4c:	008005c4 	movi	r2,23
 400dd50:	2021883a 	mov	r16,r4
 400dd54:	11000d0e 	bge	r2,r4,400dd8c <_mprec_log10+0x4c>
 400dd58:	0005883a 	mov	r2,zero
 400dd5c:	00cffc34 	movhi	r3,16368
 400dd60:	843fffc4 	addi	r16,r16,-1
 400dd64:	000d883a 	mov	r6,zero
 400dd68:	01d00934 	movhi	r7,16420
 400dd6c:	1009883a 	mov	r4,r2
 400dd70:	180b883a 	mov	r5,r3
 400dd74:	4012a480 	call	4012a48 <__muldf3>
 400dd78:	803ff91e 	bne	r16,zero,400dd60 <__alt_data_end+0xfc00dd60>
 400dd7c:	dfc00117 	ldw	ra,4(sp)
 400dd80:	dc000017 	ldw	r16,0(sp)
 400dd84:	dec00204 	addi	sp,sp,8
 400dd88:	f800283a 	ret
 400dd8c:	202090fa 	slli	r16,r4,3
 400dd90:	00810074 	movhi	r2,1025
 400dd94:	109ba204 	addi	r2,r2,28296
 400dd98:	1421883a 	add	r16,r2,r16
 400dd9c:	80800017 	ldw	r2,0(r16)
 400dda0:	80c00117 	ldw	r3,4(r16)
 400dda4:	dfc00117 	ldw	ra,4(sp)
 400dda8:	dc000017 	ldw	r16,0(sp)
 400ddac:	dec00204 	addi	sp,sp,8
 400ddb0:	f800283a 	ret

0400ddb4 <__copybits>:
 400ddb4:	297fffc4 	addi	r5,r5,-1
 400ddb8:	280fd17a 	srai	r7,r5,5
 400ddbc:	30c00417 	ldw	r3,16(r6)
 400ddc0:	30800504 	addi	r2,r6,20
 400ddc4:	39c00044 	addi	r7,r7,1
 400ddc8:	18c7883a 	add	r3,r3,r3
 400ddcc:	39cf883a 	add	r7,r7,r7
 400ddd0:	18c7883a 	add	r3,r3,r3
 400ddd4:	39cf883a 	add	r7,r7,r7
 400ddd8:	10c7883a 	add	r3,r2,r3
 400dddc:	21cf883a 	add	r7,r4,r7
 400dde0:	10c00d2e 	bgeu	r2,r3,400de18 <__copybits+0x64>
 400dde4:	200b883a 	mov	r5,r4
 400dde8:	12000017 	ldw	r8,0(r2)
 400ddec:	29400104 	addi	r5,r5,4
 400ddf0:	10800104 	addi	r2,r2,4
 400ddf4:	2a3fff15 	stw	r8,-4(r5)
 400ddf8:	10fffb36 	bltu	r2,r3,400dde8 <__alt_data_end+0xfc00dde8>
 400ddfc:	1985c83a 	sub	r2,r3,r6
 400de00:	10bffac4 	addi	r2,r2,-21
 400de04:	1004d0ba 	srli	r2,r2,2
 400de08:	10800044 	addi	r2,r2,1
 400de0c:	1085883a 	add	r2,r2,r2
 400de10:	1085883a 	add	r2,r2,r2
 400de14:	2089883a 	add	r4,r4,r2
 400de18:	21c0032e 	bgeu	r4,r7,400de28 <__copybits+0x74>
 400de1c:	20000015 	stw	zero,0(r4)
 400de20:	21000104 	addi	r4,r4,4
 400de24:	21fffd36 	bltu	r4,r7,400de1c <__alt_data_end+0xfc00de1c>
 400de28:	f800283a 	ret

0400de2c <__any_on>:
 400de2c:	20c00417 	ldw	r3,16(r4)
 400de30:	2805d17a 	srai	r2,r5,5
 400de34:	21000504 	addi	r4,r4,20
 400de38:	18800d0e 	bge	r3,r2,400de70 <__any_on+0x44>
 400de3c:	18c7883a 	add	r3,r3,r3
 400de40:	18c7883a 	add	r3,r3,r3
 400de44:	20c7883a 	add	r3,r4,r3
 400de48:	20c0192e 	bgeu	r4,r3,400deb0 <__any_on+0x84>
 400de4c:	18bfff17 	ldw	r2,-4(r3)
 400de50:	18ffff04 	addi	r3,r3,-4
 400de54:	1000041e 	bne	r2,zero,400de68 <__any_on+0x3c>
 400de58:	20c0142e 	bgeu	r4,r3,400deac <__any_on+0x80>
 400de5c:	18ffff04 	addi	r3,r3,-4
 400de60:	19400017 	ldw	r5,0(r3)
 400de64:	283ffc26 	beq	r5,zero,400de58 <__alt_data_end+0xfc00de58>
 400de68:	00800044 	movi	r2,1
 400de6c:	f800283a 	ret
 400de70:	10c00a0e 	bge	r2,r3,400de9c <__any_on+0x70>
 400de74:	1085883a 	add	r2,r2,r2
 400de78:	1085883a 	add	r2,r2,r2
 400de7c:	294007cc 	andi	r5,r5,31
 400de80:	2087883a 	add	r3,r4,r2
 400de84:	283ff026 	beq	r5,zero,400de48 <__alt_data_end+0xfc00de48>
 400de88:	19800017 	ldw	r6,0(r3)
 400de8c:	3144d83a 	srl	r2,r6,r5
 400de90:	114a983a 	sll	r5,r2,r5
 400de94:	317ff41e 	bne	r6,r5,400de68 <__alt_data_end+0xfc00de68>
 400de98:	003feb06 	br	400de48 <__alt_data_end+0xfc00de48>
 400de9c:	1085883a 	add	r2,r2,r2
 400dea0:	1085883a 	add	r2,r2,r2
 400dea4:	2087883a 	add	r3,r4,r2
 400dea8:	003fe706 	br	400de48 <__alt_data_end+0xfc00de48>
 400deac:	f800283a 	ret
 400deb0:	0005883a 	mov	r2,zero
 400deb4:	f800283a 	ret

0400deb8 <_putc_r>:
 400deb8:	defffc04 	addi	sp,sp,-16
 400debc:	dc000215 	stw	r16,8(sp)
 400dec0:	dfc00315 	stw	ra,12(sp)
 400dec4:	2021883a 	mov	r16,r4
 400dec8:	20000226 	beq	r4,zero,400ded4 <_putc_r+0x1c>
 400decc:	20800e17 	ldw	r2,56(r4)
 400ded0:	10001b26 	beq	r2,zero,400df40 <_putc_r+0x88>
 400ded4:	30800217 	ldw	r2,8(r6)
 400ded8:	10bfffc4 	addi	r2,r2,-1
 400dedc:	30800215 	stw	r2,8(r6)
 400dee0:	10000a16 	blt	r2,zero,400df0c <_putc_r+0x54>
 400dee4:	30800017 	ldw	r2,0(r6)
 400dee8:	11400005 	stb	r5,0(r2)
 400deec:	30800017 	ldw	r2,0(r6)
 400def0:	10c00044 	addi	r3,r2,1
 400def4:	30c00015 	stw	r3,0(r6)
 400def8:	10800003 	ldbu	r2,0(r2)
 400defc:	dfc00317 	ldw	ra,12(sp)
 400df00:	dc000217 	ldw	r16,8(sp)
 400df04:	dec00404 	addi	sp,sp,16
 400df08:	f800283a 	ret
 400df0c:	30c00617 	ldw	r3,24(r6)
 400df10:	10c00616 	blt	r2,r3,400df2c <_putc_r+0x74>
 400df14:	30800017 	ldw	r2,0(r6)
 400df18:	00c00284 	movi	r3,10
 400df1c:	11400005 	stb	r5,0(r2)
 400df20:	30800017 	ldw	r2,0(r6)
 400df24:	11400003 	ldbu	r5,0(r2)
 400df28:	28fff11e 	bne	r5,r3,400def0 <__alt_data_end+0xfc00def0>
 400df2c:	8009883a 	mov	r4,r16
 400df30:	dfc00317 	ldw	ra,12(sp)
 400df34:	dc000217 	ldw	r16,8(sp)
 400df38:	dec00404 	addi	sp,sp,16
 400df3c:	400ff5c1 	jmpi	400ff5c <__swbuf_r>
 400df40:	d9400015 	stw	r5,0(sp)
 400df44:	d9800115 	stw	r6,4(sp)
 400df48:	400b4a40 	call	400b4a4 <__sinit>
 400df4c:	d9800117 	ldw	r6,4(sp)
 400df50:	d9400017 	ldw	r5,0(sp)
 400df54:	003fdf06 	br	400ded4 <__alt_data_end+0xfc00ded4>

0400df58 <putc>:
 400df58:	008100b4 	movhi	r2,1026
 400df5c:	defffc04 	addi	sp,sp,-16
 400df60:	10a2f104 	addi	r2,r2,-29756
 400df64:	dc000115 	stw	r16,4(sp)
 400df68:	14000017 	ldw	r16,0(r2)
 400df6c:	dc400215 	stw	r17,8(sp)
 400df70:	dfc00315 	stw	ra,12(sp)
 400df74:	2023883a 	mov	r17,r4
 400df78:	80000226 	beq	r16,zero,400df84 <putc+0x2c>
 400df7c:	80800e17 	ldw	r2,56(r16)
 400df80:	10001a26 	beq	r2,zero,400dfec <putc+0x94>
 400df84:	28800217 	ldw	r2,8(r5)
 400df88:	10bfffc4 	addi	r2,r2,-1
 400df8c:	28800215 	stw	r2,8(r5)
 400df90:	10000b16 	blt	r2,zero,400dfc0 <putc+0x68>
 400df94:	28800017 	ldw	r2,0(r5)
 400df98:	14400005 	stb	r17,0(r2)
 400df9c:	28800017 	ldw	r2,0(r5)
 400dfa0:	10c00044 	addi	r3,r2,1
 400dfa4:	28c00015 	stw	r3,0(r5)
 400dfa8:	10800003 	ldbu	r2,0(r2)
 400dfac:	dfc00317 	ldw	ra,12(sp)
 400dfb0:	dc400217 	ldw	r17,8(sp)
 400dfb4:	dc000117 	ldw	r16,4(sp)
 400dfb8:	dec00404 	addi	sp,sp,16
 400dfbc:	f800283a 	ret
 400dfc0:	28c00617 	ldw	r3,24(r5)
 400dfc4:	10c00e16 	blt	r2,r3,400e000 <putc+0xa8>
 400dfc8:	28800017 	ldw	r2,0(r5)
 400dfcc:	01000284 	movi	r4,10
 400dfd0:	14400005 	stb	r17,0(r2)
 400dfd4:	28800017 	ldw	r2,0(r5)
 400dfd8:	10c00003 	ldbu	r3,0(r2)
 400dfdc:	193ff01e 	bne	r3,r4,400dfa0 <__alt_data_end+0xfc00dfa0>
 400dfe0:	280d883a 	mov	r6,r5
 400dfe4:	180b883a 	mov	r5,r3
 400dfe8:	00000706 	br	400e008 <putc+0xb0>
 400dfec:	8009883a 	mov	r4,r16
 400dff0:	d9400015 	stw	r5,0(sp)
 400dff4:	400b4a40 	call	400b4a4 <__sinit>
 400dff8:	d9400017 	ldw	r5,0(sp)
 400dffc:	003fe106 	br	400df84 <__alt_data_end+0xfc00df84>
 400e000:	280d883a 	mov	r6,r5
 400e004:	880b883a 	mov	r5,r17
 400e008:	8009883a 	mov	r4,r16
 400e00c:	dfc00317 	ldw	ra,12(sp)
 400e010:	dc400217 	ldw	r17,8(sp)
 400e014:	dc000117 	ldw	r16,4(sp)
 400e018:	dec00404 	addi	sp,sp,16
 400e01c:	400ff5c1 	jmpi	400ff5c <__swbuf_r>

0400e020 <_realloc_r>:
 400e020:	defff604 	addi	sp,sp,-40
 400e024:	dc800215 	stw	r18,8(sp)
 400e028:	dfc00915 	stw	ra,36(sp)
 400e02c:	df000815 	stw	fp,32(sp)
 400e030:	ddc00715 	stw	r23,28(sp)
 400e034:	dd800615 	stw	r22,24(sp)
 400e038:	dd400515 	stw	r21,20(sp)
 400e03c:	dd000415 	stw	r20,16(sp)
 400e040:	dcc00315 	stw	r19,12(sp)
 400e044:	dc400115 	stw	r17,4(sp)
 400e048:	dc000015 	stw	r16,0(sp)
 400e04c:	3025883a 	mov	r18,r6
 400e050:	2800b726 	beq	r5,zero,400e330 <_realloc_r+0x310>
 400e054:	282b883a 	mov	r21,r5
 400e058:	2029883a 	mov	r20,r4
 400e05c:	40145a80 	call	40145a8 <__malloc_lock>
 400e060:	a8bfff17 	ldw	r2,-4(r21)
 400e064:	043fff04 	movi	r16,-4
 400e068:	90c002c4 	addi	r3,r18,11
 400e06c:	01000584 	movi	r4,22
 400e070:	acfffe04 	addi	r19,r21,-8
 400e074:	1420703a 	and	r16,r2,r16
 400e078:	20c0332e 	bgeu	r4,r3,400e148 <_realloc_r+0x128>
 400e07c:	047ffe04 	movi	r17,-8
 400e080:	1c62703a 	and	r17,r3,r17
 400e084:	8807883a 	mov	r3,r17
 400e088:	88005816 	blt	r17,zero,400e1ec <_realloc_r+0x1cc>
 400e08c:	8c805736 	bltu	r17,r18,400e1ec <_realloc_r+0x1cc>
 400e090:	80c0300e 	bge	r16,r3,400e154 <_realloc_r+0x134>
 400e094:	07010074 	movhi	fp,1025
 400e098:	e71d6604 	addi	fp,fp,30104
 400e09c:	e1c00217 	ldw	r7,8(fp)
 400e0a0:	9c09883a 	add	r4,r19,r16
 400e0a4:	22000117 	ldw	r8,4(r4)
 400e0a8:	21c06326 	beq	r4,r7,400e238 <_realloc_r+0x218>
 400e0ac:	017fff84 	movi	r5,-2
 400e0b0:	414a703a 	and	r5,r8,r5
 400e0b4:	214b883a 	add	r5,r4,r5
 400e0b8:	29800117 	ldw	r6,4(r5)
 400e0bc:	3180004c 	andi	r6,r6,1
 400e0c0:	30003f26 	beq	r6,zero,400e1c0 <_realloc_r+0x1a0>
 400e0c4:	1080004c 	andi	r2,r2,1
 400e0c8:	10008326 	beq	r2,zero,400e2d8 <_realloc_r+0x2b8>
 400e0cc:	900b883a 	mov	r5,r18
 400e0d0:	a009883a 	mov	r4,r20
 400e0d4:	400c26c0 	call	400c26c <_malloc_r>
 400e0d8:	1025883a 	mov	r18,r2
 400e0dc:	10011e26 	beq	r2,zero,400e558 <_realloc_r+0x538>
 400e0e0:	a93fff17 	ldw	r4,-4(r21)
 400e0e4:	10fffe04 	addi	r3,r2,-8
 400e0e8:	00bfff84 	movi	r2,-2
 400e0ec:	2084703a 	and	r2,r4,r2
 400e0f0:	9885883a 	add	r2,r19,r2
 400e0f4:	1880ee26 	beq	r3,r2,400e4b0 <_realloc_r+0x490>
 400e0f8:	81bfff04 	addi	r6,r16,-4
 400e0fc:	00800904 	movi	r2,36
 400e100:	1180b836 	bltu	r2,r6,400e3e4 <_realloc_r+0x3c4>
 400e104:	00c004c4 	movi	r3,19
 400e108:	19809636 	bltu	r3,r6,400e364 <_realloc_r+0x344>
 400e10c:	9005883a 	mov	r2,r18
 400e110:	a807883a 	mov	r3,r21
 400e114:	19000017 	ldw	r4,0(r3)
 400e118:	11000015 	stw	r4,0(r2)
 400e11c:	19000117 	ldw	r4,4(r3)
 400e120:	11000115 	stw	r4,4(r2)
 400e124:	18c00217 	ldw	r3,8(r3)
 400e128:	10c00215 	stw	r3,8(r2)
 400e12c:	a80b883a 	mov	r5,r21
 400e130:	a009883a 	mov	r4,r20
 400e134:	400b6180 	call	400b618 <_free_r>
 400e138:	a009883a 	mov	r4,r20
 400e13c:	40145cc0 	call	40145cc <__malloc_unlock>
 400e140:	9005883a 	mov	r2,r18
 400e144:	00001206 	br	400e190 <_realloc_r+0x170>
 400e148:	00c00404 	movi	r3,16
 400e14c:	1823883a 	mov	r17,r3
 400e150:	003fce06 	br	400e08c <__alt_data_end+0xfc00e08c>
 400e154:	a825883a 	mov	r18,r21
 400e158:	8445c83a 	sub	r2,r16,r17
 400e15c:	00c003c4 	movi	r3,15
 400e160:	18802636 	bltu	r3,r2,400e1fc <_realloc_r+0x1dc>
 400e164:	99800117 	ldw	r6,4(r19)
 400e168:	9c07883a 	add	r3,r19,r16
 400e16c:	3180004c 	andi	r6,r6,1
 400e170:	3420b03a 	or	r16,r6,r16
 400e174:	9c000115 	stw	r16,4(r19)
 400e178:	18800117 	ldw	r2,4(r3)
 400e17c:	10800054 	ori	r2,r2,1
 400e180:	18800115 	stw	r2,4(r3)
 400e184:	a009883a 	mov	r4,r20
 400e188:	40145cc0 	call	40145cc <__malloc_unlock>
 400e18c:	9005883a 	mov	r2,r18
 400e190:	dfc00917 	ldw	ra,36(sp)
 400e194:	df000817 	ldw	fp,32(sp)
 400e198:	ddc00717 	ldw	r23,28(sp)
 400e19c:	dd800617 	ldw	r22,24(sp)
 400e1a0:	dd400517 	ldw	r21,20(sp)
 400e1a4:	dd000417 	ldw	r20,16(sp)
 400e1a8:	dcc00317 	ldw	r19,12(sp)
 400e1ac:	dc800217 	ldw	r18,8(sp)
 400e1b0:	dc400117 	ldw	r17,4(sp)
 400e1b4:	dc000017 	ldw	r16,0(sp)
 400e1b8:	dec00a04 	addi	sp,sp,40
 400e1bc:	f800283a 	ret
 400e1c0:	017fff04 	movi	r5,-4
 400e1c4:	414a703a 	and	r5,r8,r5
 400e1c8:	814d883a 	add	r6,r16,r5
 400e1cc:	30c01f16 	blt	r6,r3,400e24c <_realloc_r+0x22c>
 400e1d0:	20800317 	ldw	r2,12(r4)
 400e1d4:	20c00217 	ldw	r3,8(r4)
 400e1d8:	a825883a 	mov	r18,r21
 400e1dc:	3021883a 	mov	r16,r6
 400e1e0:	18800315 	stw	r2,12(r3)
 400e1e4:	10c00215 	stw	r3,8(r2)
 400e1e8:	003fdb06 	br	400e158 <__alt_data_end+0xfc00e158>
 400e1ec:	00800304 	movi	r2,12
 400e1f0:	a0800015 	stw	r2,0(r20)
 400e1f4:	0005883a 	mov	r2,zero
 400e1f8:	003fe506 	br	400e190 <__alt_data_end+0xfc00e190>
 400e1fc:	98c00117 	ldw	r3,4(r19)
 400e200:	9c4b883a 	add	r5,r19,r17
 400e204:	11000054 	ori	r4,r2,1
 400e208:	18c0004c 	andi	r3,r3,1
 400e20c:	1c62b03a 	or	r17,r3,r17
 400e210:	9c400115 	stw	r17,4(r19)
 400e214:	29000115 	stw	r4,4(r5)
 400e218:	2885883a 	add	r2,r5,r2
 400e21c:	10c00117 	ldw	r3,4(r2)
 400e220:	29400204 	addi	r5,r5,8
 400e224:	a009883a 	mov	r4,r20
 400e228:	18c00054 	ori	r3,r3,1
 400e22c:	10c00115 	stw	r3,4(r2)
 400e230:	400b6180 	call	400b618 <_free_r>
 400e234:	003fd306 	br	400e184 <__alt_data_end+0xfc00e184>
 400e238:	017fff04 	movi	r5,-4
 400e23c:	414a703a 	and	r5,r8,r5
 400e240:	89800404 	addi	r6,r17,16
 400e244:	8151883a 	add	r8,r16,r5
 400e248:	4180590e 	bge	r8,r6,400e3b0 <_realloc_r+0x390>
 400e24c:	1080004c 	andi	r2,r2,1
 400e250:	103f9e1e 	bne	r2,zero,400e0cc <__alt_data_end+0xfc00e0cc>
 400e254:	adbffe17 	ldw	r22,-8(r21)
 400e258:	00bfff04 	movi	r2,-4
 400e25c:	9dadc83a 	sub	r22,r19,r22
 400e260:	b1800117 	ldw	r6,4(r22)
 400e264:	3084703a 	and	r2,r6,r2
 400e268:	20002026 	beq	r4,zero,400e2ec <_realloc_r+0x2cc>
 400e26c:	80af883a 	add	r23,r16,r2
 400e270:	b96f883a 	add	r23,r23,r5
 400e274:	21c05f26 	beq	r4,r7,400e3f4 <_realloc_r+0x3d4>
 400e278:	b8c01c16 	blt	r23,r3,400e2ec <_realloc_r+0x2cc>
 400e27c:	20800317 	ldw	r2,12(r4)
 400e280:	20c00217 	ldw	r3,8(r4)
 400e284:	81bfff04 	addi	r6,r16,-4
 400e288:	01000904 	movi	r4,36
 400e28c:	18800315 	stw	r2,12(r3)
 400e290:	10c00215 	stw	r3,8(r2)
 400e294:	b0c00217 	ldw	r3,8(r22)
 400e298:	b0800317 	ldw	r2,12(r22)
 400e29c:	b4800204 	addi	r18,r22,8
 400e2a0:	18800315 	stw	r2,12(r3)
 400e2a4:	10c00215 	stw	r3,8(r2)
 400e2a8:	21801b36 	bltu	r4,r6,400e318 <_realloc_r+0x2f8>
 400e2ac:	008004c4 	movi	r2,19
 400e2b0:	1180352e 	bgeu	r2,r6,400e388 <_realloc_r+0x368>
 400e2b4:	a8800017 	ldw	r2,0(r21)
 400e2b8:	b0800215 	stw	r2,8(r22)
 400e2bc:	a8800117 	ldw	r2,4(r21)
 400e2c0:	b0800315 	stw	r2,12(r22)
 400e2c4:	008006c4 	movi	r2,27
 400e2c8:	11807f36 	bltu	r2,r6,400e4c8 <_realloc_r+0x4a8>
 400e2cc:	b0800404 	addi	r2,r22,16
 400e2d0:	ad400204 	addi	r21,r21,8
 400e2d4:	00002d06 	br	400e38c <_realloc_r+0x36c>
 400e2d8:	adbffe17 	ldw	r22,-8(r21)
 400e2dc:	00bfff04 	movi	r2,-4
 400e2e0:	9dadc83a 	sub	r22,r19,r22
 400e2e4:	b1000117 	ldw	r4,4(r22)
 400e2e8:	2084703a 	and	r2,r4,r2
 400e2ec:	b03f7726 	beq	r22,zero,400e0cc <__alt_data_end+0xfc00e0cc>
 400e2f0:	80af883a 	add	r23,r16,r2
 400e2f4:	b8ff7516 	blt	r23,r3,400e0cc <__alt_data_end+0xfc00e0cc>
 400e2f8:	b0800317 	ldw	r2,12(r22)
 400e2fc:	b0c00217 	ldw	r3,8(r22)
 400e300:	81bfff04 	addi	r6,r16,-4
 400e304:	01000904 	movi	r4,36
 400e308:	18800315 	stw	r2,12(r3)
 400e30c:	10c00215 	stw	r3,8(r2)
 400e310:	b4800204 	addi	r18,r22,8
 400e314:	21bfe52e 	bgeu	r4,r6,400e2ac <__alt_data_end+0xfc00e2ac>
 400e318:	a80b883a 	mov	r5,r21
 400e31c:	9009883a 	mov	r4,r18
 400e320:	400cca40 	call	400cca4 <memmove>
 400e324:	b821883a 	mov	r16,r23
 400e328:	b027883a 	mov	r19,r22
 400e32c:	003f8a06 	br	400e158 <__alt_data_end+0xfc00e158>
 400e330:	300b883a 	mov	r5,r6
 400e334:	dfc00917 	ldw	ra,36(sp)
 400e338:	df000817 	ldw	fp,32(sp)
 400e33c:	ddc00717 	ldw	r23,28(sp)
 400e340:	dd800617 	ldw	r22,24(sp)
 400e344:	dd400517 	ldw	r21,20(sp)
 400e348:	dd000417 	ldw	r20,16(sp)
 400e34c:	dcc00317 	ldw	r19,12(sp)
 400e350:	dc800217 	ldw	r18,8(sp)
 400e354:	dc400117 	ldw	r17,4(sp)
 400e358:	dc000017 	ldw	r16,0(sp)
 400e35c:	dec00a04 	addi	sp,sp,40
 400e360:	400c26c1 	jmpi	400c26c <_malloc_r>
 400e364:	a8c00017 	ldw	r3,0(r21)
 400e368:	90c00015 	stw	r3,0(r18)
 400e36c:	a8c00117 	ldw	r3,4(r21)
 400e370:	90c00115 	stw	r3,4(r18)
 400e374:	00c006c4 	movi	r3,27
 400e378:	19804536 	bltu	r3,r6,400e490 <_realloc_r+0x470>
 400e37c:	90800204 	addi	r2,r18,8
 400e380:	a8c00204 	addi	r3,r21,8
 400e384:	003f6306 	br	400e114 <__alt_data_end+0xfc00e114>
 400e388:	9005883a 	mov	r2,r18
 400e38c:	a8c00017 	ldw	r3,0(r21)
 400e390:	b821883a 	mov	r16,r23
 400e394:	b027883a 	mov	r19,r22
 400e398:	10c00015 	stw	r3,0(r2)
 400e39c:	a8c00117 	ldw	r3,4(r21)
 400e3a0:	10c00115 	stw	r3,4(r2)
 400e3a4:	a8c00217 	ldw	r3,8(r21)
 400e3a8:	10c00215 	stw	r3,8(r2)
 400e3ac:	003f6a06 	br	400e158 <__alt_data_end+0xfc00e158>
 400e3b0:	9c67883a 	add	r19,r19,r17
 400e3b4:	4445c83a 	sub	r2,r8,r17
 400e3b8:	e4c00215 	stw	r19,8(fp)
 400e3bc:	10800054 	ori	r2,r2,1
 400e3c0:	98800115 	stw	r2,4(r19)
 400e3c4:	a8bfff17 	ldw	r2,-4(r21)
 400e3c8:	a009883a 	mov	r4,r20
 400e3cc:	1080004c 	andi	r2,r2,1
 400e3d0:	1462b03a 	or	r17,r2,r17
 400e3d4:	ac7fff15 	stw	r17,-4(r21)
 400e3d8:	40145cc0 	call	40145cc <__malloc_unlock>
 400e3dc:	a805883a 	mov	r2,r21
 400e3e0:	003f6b06 	br	400e190 <__alt_data_end+0xfc00e190>
 400e3e4:	a80b883a 	mov	r5,r21
 400e3e8:	9009883a 	mov	r4,r18
 400e3ec:	400cca40 	call	400cca4 <memmove>
 400e3f0:	003f4e06 	br	400e12c <__alt_data_end+0xfc00e12c>
 400e3f4:	89000404 	addi	r4,r17,16
 400e3f8:	b93fbc16 	blt	r23,r4,400e2ec <__alt_data_end+0xfc00e2ec>
 400e3fc:	b0800317 	ldw	r2,12(r22)
 400e400:	b0c00217 	ldw	r3,8(r22)
 400e404:	81bfff04 	addi	r6,r16,-4
 400e408:	01000904 	movi	r4,36
 400e40c:	18800315 	stw	r2,12(r3)
 400e410:	10c00215 	stw	r3,8(r2)
 400e414:	b4800204 	addi	r18,r22,8
 400e418:	21804336 	bltu	r4,r6,400e528 <_realloc_r+0x508>
 400e41c:	008004c4 	movi	r2,19
 400e420:	11803f2e 	bgeu	r2,r6,400e520 <_realloc_r+0x500>
 400e424:	a8800017 	ldw	r2,0(r21)
 400e428:	b0800215 	stw	r2,8(r22)
 400e42c:	a8800117 	ldw	r2,4(r21)
 400e430:	b0800315 	stw	r2,12(r22)
 400e434:	008006c4 	movi	r2,27
 400e438:	11803f36 	bltu	r2,r6,400e538 <_realloc_r+0x518>
 400e43c:	b0800404 	addi	r2,r22,16
 400e440:	ad400204 	addi	r21,r21,8
 400e444:	a8c00017 	ldw	r3,0(r21)
 400e448:	10c00015 	stw	r3,0(r2)
 400e44c:	a8c00117 	ldw	r3,4(r21)
 400e450:	10c00115 	stw	r3,4(r2)
 400e454:	a8c00217 	ldw	r3,8(r21)
 400e458:	10c00215 	stw	r3,8(r2)
 400e45c:	b447883a 	add	r3,r22,r17
 400e460:	bc45c83a 	sub	r2,r23,r17
 400e464:	e0c00215 	stw	r3,8(fp)
 400e468:	10800054 	ori	r2,r2,1
 400e46c:	18800115 	stw	r2,4(r3)
 400e470:	b0800117 	ldw	r2,4(r22)
 400e474:	a009883a 	mov	r4,r20
 400e478:	1080004c 	andi	r2,r2,1
 400e47c:	1462b03a 	or	r17,r2,r17
 400e480:	b4400115 	stw	r17,4(r22)
 400e484:	40145cc0 	call	40145cc <__malloc_unlock>
 400e488:	9005883a 	mov	r2,r18
 400e48c:	003f4006 	br	400e190 <__alt_data_end+0xfc00e190>
 400e490:	a8c00217 	ldw	r3,8(r21)
 400e494:	90c00215 	stw	r3,8(r18)
 400e498:	a8c00317 	ldw	r3,12(r21)
 400e49c:	90c00315 	stw	r3,12(r18)
 400e4a0:	30801126 	beq	r6,r2,400e4e8 <_realloc_r+0x4c8>
 400e4a4:	90800404 	addi	r2,r18,16
 400e4a8:	a8c00404 	addi	r3,r21,16
 400e4ac:	003f1906 	br	400e114 <__alt_data_end+0xfc00e114>
 400e4b0:	90ffff17 	ldw	r3,-4(r18)
 400e4b4:	00bfff04 	movi	r2,-4
 400e4b8:	a825883a 	mov	r18,r21
 400e4bc:	1884703a 	and	r2,r3,r2
 400e4c0:	80a1883a 	add	r16,r16,r2
 400e4c4:	003f2406 	br	400e158 <__alt_data_end+0xfc00e158>
 400e4c8:	a8800217 	ldw	r2,8(r21)
 400e4cc:	b0800415 	stw	r2,16(r22)
 400e4d0:	a8800317 	ldw	r2,12(r21)
 400e4d4:	b0800515 	stw	r2,20(r22)
 400e4d8:	31000a26 	beq	r6,r4,400e504 <_realloc_r+0x4e4>
 400e4dc:	b0800604 	addi	r2,r22,24
 400e4e0:	ad400404 	addi	r21,r21,16
 400e4e4:	003fa906 	br	400e38c <__alt_data_end+0xfc00e38c>
 400e4e8:	a9000417 	ldw	r4,16(r21)
 400e4ec:	90800604 	addi	r2,r18,24
 400e4f0:	a8c00604 	addi	r3,r21,24
 400e4f4:	91000415 	stw	r4,16(r18)
 400e4f8:	a9000517 	ldw	r4,20(r21)
 400e4fc:	91000515 	stw	r4,20(r18)
 400e500:	003f0406 	br	400e114 <__alt_data_end+0xfc00e114>
 400e504:	a8c00417 	ldw	r3,16(r21)
 400e508:	ad400604 	addi	r21,r21,24
 400e50c:	b0800804 	addi	r2,r22,32
 400e510:	b0c00615 	stw	r3,24(r22)
 400e514:	a8ffff17 	ldw	r3,-4(r21)
 400e518:	b0c00715 	stw	r3,28(r22)
 400e51c:	003f9b06 	br	400e38c <__alt_data_end+0xfc00e38c>
 400e520:	9005883a 	mov	r2,r18
 400e524:	003fc706 	br	400e444 <__alt_data_end+0xfc00e444>
 400e528:	a80b883a 	mov	r5,r21
 400e52c:	9009883a 	mov	r4,r18
 400e530:	400cca40 	call	400cca4 <memmove>
 400e534:	003fc906 	br	400e45c <__alt_data_end+0xfc00e45c>
 400e538:	a8800217 	ldw	r2,8(r21)
 400e53c:	b0800415 	stw	r2,16(r22)
 400e540:	a8800317 	ldw	r2,12(r21)
 400e544:	b0800515 	stw	r2,20(r22)
 400e548:	31000726 	beq	r6,r4,400e568 <_realloc_r+0x548>
 400e54c:	b0800604 	addi	r2,r22,24
 400e550:	ad400404 	addi	r21,r21,16
 400e554:	003fbb06 	br	400e444 <__alt_data_end+0xfc00e444>
 400e558:	a009883a 	mov	r4,r20
 400e55c:	40145cc0 	call	40145cc <__malloc_unlock>
 400e560:	0005883a 	mov	r2,zero
 400e564:	003f0a06 	br	400e190 <__alt_data_end+0xfc00e190>
 400e568:	a8c00417 	ldw	r3,16(r21)
 400e56c:	ad400604 	addi	r21,r21,24
 400e570:	b0800804 	addi	r2,r22,32
 400e574:	b0c00615 	stw	r3,24(r22)
 400e578:	a8ffff17 	ldw	r3,-4(r21)
 400e57c:	b0c00715 	stw	r3,28(r22)
 400e580:	003fb006 	br	400e444 <__alt_data_end+0xfc00e444>

0400e584 <__fpclassifyd>:
 400e584:	00a00034 	movhi	r2,32768
 400e588:	10bfffc4 	addi	r2,r2,-1
 400e58c:	2884703a 	and	r2,r5,r2
 400e590:	10000726 	beq	r2,zero,400e5b0 <__fpclassifyd+0x2c>
 400e594:	00fffc34 	movhi	r3,65520
 400e598:	019ff834 	movhi	r6,32736
 400e59c:	28c7883a 	add	r3,r5,r3
 400e5a0:	31bfffc4 	addi	r6,r6,-1
 400e5a4:	30c00536 	bltu	r6,r3,400e5bc <__fpclassifyd+0x38>
 400e5a8:	00800104 	movi	r2,4
 400e5ac:	f800283a 	ret
 400e5b0:	2000021e 	bne	r4,zero,400e5bc <__fpclassifyd+0x38>
 400e5b4:	00800084 	movi	r2,2
 400e5b8:	f800283a 	ret
 400e5bc:	00dffc34 	movhi	r3,32752
 400e5c0:	019ff834 	movhi	r6,32736
 400e5c4:	28cb883a 	add	r5,r5,r3
 400e5c8:	31bfffc4 	addi	r6,r6,-1
 400e5cc:	317ff62e 	bgeu	r6,r5,400e5a8 <__alt_data_end+0xfc00e5a8>
 400e5d0:	01400434 	movhi	r5,16
 400e5d4:	297fffc4 	addi	r5,r5,-1
 400e5d8:	28800236 	bltu	r5,r2,400e5e4 <__fpclassifyd+0x60>
 400e5dc:	008000c4 	movi	r2,3
 400e5e0:	f800283a 	ret
 400e5e4:	10c00226 	beq	r2,r3,400e5f0 <__fpclassifyd+0x6c>
 400e5e8:	0005883a 	mov	r2,zero
 400e5ec:	f800283a 	ret
 400e5f0:	2005003a 	cmpeq	r2,r4,zero
 400e5f4:	f800283a 	ret

0400e5f8 <_sbrk_r>:
 400e5f8:	defffd04 	addi	sp,sp,-12
 400e5fc:	dc000015 	stw	r16,0(sp)
 400e600:	040100b4 	movhi	r16,1026
 400e604:	dc400115 	stw	r17,4(sp)
 400e608:	8429e104 	addi	r16,r16,-22652
 400e60c:	2023883a 	mov	r17,r4
 400e610:	2809883a 	mov	r4,r5
 400e614:	dfc00215 	stw	ra,8(sp)
 400e618:	80000015 	stw	zero,0(r16)
 400e61c:	40147b40 	call	40147b4 <sbrk>
 400e620:	00ffffc4 	movi	r3,-1
 400e624:	10c00526 	beq	r2,r3,400e63c <_sbrk_r+0x44>
 400e628:	dfc00217 	ldw	ra,8(sp)
 400e62c:	dc400117 	ldw	r17,4(sp)
 400e630:	dc000017 	ldw	r16,0(sp)
 400e634:	dec00304 	addi	sp,sp,12
 400e638:	f800283a 	ret
 400e63c:	80c00017 	ldw	r3,0(r16)
 400e640:	183ff926 	beq	r3,zero,400e628 <__alt_data_end+0xfc00e628>
 400e644:	88c00015 	stw	r3,0(r17)
 400e648:	003ff706 	br	400e628 <__alt_data_end+0xfc00e628>

0400e64c <__sread>:
 400e64c:	defffe04 	addi	sp,sp,-8
 400e650:	dc000015 	stw	r16,0(sp)
 400e654:	2821883a 	mov	r16,r5
 400e658:	2940038f 	ldh	r5,14(r5)
 400e65c:	dfc00115 	stw	ra,4(sp)
 400e660:	40106600 	call	4010660 <_read_r>
 400e664:	10000716 	blt	r2,zero,400e684 <__sread+0x38>
 400e668:	80c01417 	ldw	r3,80(r16)
 400e66c:	1887883a 	add	r3,r3,r2
 400e670:	80c01415 	stw	r3,80(r16)
 400e674:	dfc00117 	ldw	ra,4(sp)
 400e678:	dc000017 	ldw	r16,0(sp)
 400e67c:	dec00204 	addi	sp,sp,8
 400e680:	f800283a 	ret
 400e684:	80c0030b 	ldhu	r3,12(r16)
 400e688:	18fbffcc 	andi	r3,r3,61439
 400e68c:	80c0030d 	sth	r3,12(r16)
 400e690:	dfc00117 	ldw	ra,4(sp)
 400e694:	dc000017 	ldw	r16,0(sp)
 400e698:	dec00204 	addi	sp,sp,8
 400e69c:	f800283a 	ret

0400e6a0 <__seofread>:
 400e6a0:	0005883a 	mov	r2,zero
 400e6a4:	f800283a 	ret

0400e6a8 <__swrite>:
 400e6a8:	2880030b 	ldhu	r2,12(r5)
 400e6ac:	defffb04 	addi	sp,sp,-20
 400e6b0:	dcc00315 	stw	r19,12(sp)
 400e6b4:	dc800215 	stw	r18,8(sp)
 400e6b8:	dc400115 	stw	r17,4(sp)
 400e6bc:	dc000015 	stw	r16,0(sp)
 400e6c0:	dfc00415 	stw	ra,16(sp)
 400e6c4:	10c0400c 	andi	r3,r2,256
 400e6c8:	2821883a 	mov	r16,r5
 400e6cc:	2023883a 	mov	r17,r4
 400e6d0:	3025883a 	mov	r18,r6
 400e6d4:	3827883a 	mov	r19,r7
 400e6d8:	18000526 	beq	r3,zero,400e6f0 <__swrite+0x48>
 400e6dc:	2940038f 	ldh	r5,14(r5)
 400e6e0:	01c00084 	movi	r7,2
 400e6e4:	000d883a 	mov	r6,zero
 400e6e8:	40106000 	call	4010600 <_lseek_r>
 400e6ec:	8080030b 	ldhu	r2,12(r16)
 400e6f0:	8140038f 	ldh	r5,14(r16)
 400e6f4:	10bbffcc 	andi	r2,r2,61439
 400e6f8:	980f883a 	mov	r7,r19
 400e6fc:	900d883a 	mov	r6,r18
 400e700:	8809883a 	mov	r4,r17
 400e704:	8080030d 	sth	r2,12(r16)
 400e708:	dfc00417 	ldw	ra,16(sp)
 400e70c:	dcc00317 	ldw	r19,12(sp)
 400e710:	dc800217 	ldw	r18,8(sp)
 400e714:	dc400117 	ldw	r17,4(sp)
 400e718:	dc000017 	ldw	r16,0(sp)
 400e71c:	dec00504 	addi	sp,sp,20
 400e720:	40100b41 	jmpi	40100b4 <_write_r>

0400e724 <__sseek>:
 400e724:	defffe04 	addi	sp,sp,-8
 400e728:	dc000015 	stw	r16,0(sp)
 400e72c:	2821883a 	mov	r16,r5
 400e730:	2940038f 	ldh	r5,14(r5)
 400e734:	dfc00115 	stw	ra,4(sp)
 400e738:	40106000 	call	4010600 <_lseek_r>
 400e73c:	00ffffc4 	movi	r3,-1
 400e740:	10c00826 	beq	r2,r3,400e764 <__sseek+0x40>
 400e744:	80c0030b 	ldhu	r3,12(r16)
 400e748:	80801415 	stw	r2,80(r16)
 400e74c:	18c40014 	ori	r3,r3,4096
 400e750:	80c0030d 	sth	r3,12(r16)
 400e754:	dfc00117 	ldw	ra,4(sp)
 400e758:	dc000017 	ldw	r16,0(sp)
 400e75c:	dec00204 	addi	sp,sp,8
 400e760:	f800283a 	ret
 400e764:	80c0030b 	ldhu	r3,12(r16)
 400e768:	18fbffcc 	andi	r3,r3,61439
 400e76c:	80c0030d 	sth	r3,12(r16)
 400e770:	dfc00117 	ldw	ra,4(sp)
 400e774:	dc000017 	ldw	r16,0(sp)
 400e778:	dec00204 	addi	sp,sp,8
 400e77c:	f800283a 	ret

0400e780 <__sclose>:
 400e780:	2940038f 	ldh	r5,14(r5)
 400e784:	40101141 	jmpi	4010114 <_close_r>

0400e788 <strcmp>:
 400e788:	2144b03a 	or	r2,r4,r5
 400e78c:	108000cc 	andi	r2,r2,3
 400e790:	1000171e 	bne	r2,zero,400e7f0 <strcmp+0x68>
 400e794:	20800017 	ldw	r2,0(r4)
 400e798:	28c00017 	ldw	r3,0(r5)
 400e79c:	10c0141e 	bne	r2,r3,400e7f0 <strcmp+0x68>
 400e7a0:	027fbff4 	movhi	r9,65279
 400e7a4:	4a7fbfc4 	addi	r9,r9,-257
 400e7a8:	0086303a 	nor	r3,zero,r2
 400e7ac:	02202074 	movhi	r8,32897
 400e7b0:	1245883a 	add	r2,r2,r9
 400e7b4:	42202004 	addi	r8,r8,-32640
 400e7b8:	10c4703a 	and	r2,r2,r3
 400e7bc:	1204703a 	and	r2,r2,r8
 400e7c0:	10000226 	beq	r2,zero,400e7cc <strcmp+0x44>
 400e7c4:	00002306 	br	400e854 <strcmp+0xcc>
 400e7c8:	1000221e 	bne	r2,zero,400e854 <strcmp+0xcc>
 400e7cc:	21000104 	addi	r4,r4,4
 400e7d0:	20c00017 	ldw	r3,0(r4)
 400e7d4:	29400104 	addi	r5,r5,4
 400e7d8:	29800017 	ldw	r6,0(r5)
 400e7dc:	1a4f883a 	add	r7,r3,r9
 400e7e0:	00c4303a 	nor	r2,zero,r3
 400e7e4:	3884703a 	and	r2,r7,r2
 400e7e8:	1204703a 	and	r2,r2,r8
 400e7ec:	19bff626 	beq	r3,r6,400e7c8 <__alt_data_end+0xfc00e7c8>
 400e7f0:	20800003 	ldbu	r2,0(r4)
 400e7f4:	10c03fcc 	andi	r3,r2,255
 400e7f8:	18c0201c 	xori	r3,r3,128
 400e7fc:	18ffe004 	addi	r3,r3,-128
 400e800:	18000c26 	beq	r3,zero,400e834 <strcmp+0xac>
 400e804:	29800007 	ldb	r6,0(r5)
 400e808:	19800326 	beq	r3,r6,400e818 <strcmp+0x90>
 400e80c:	00001306 	br	400e85c <strcmp+0xd4>
 400e810:	29800007 	ldb	r6,0(r5)
 400e814:	11800b1e 	bne	r2,r6,400e844 <strcmp+0xbc>
 400e818:	21000044 	addi	r4,r4,1
 400e81c:	20c00003 	ldbu	r3,0(r4)
 400e820:	29400044 	addi	r5,r5,1
 400e824:	18803fcc 	andi	r2,r3,255
 400e828:	1080201c 	xori	r2,r2,128
 400e82c:	10bfe004 	addi	r2,r2,-128
 400e830:	103ff71e 	bne	r2,zero,400e810 <__alt_data_end+0xfc00e810>
 400e834:	0007883a 	mov	r3,zero
 400e838:	28800003 	ldbu	r2,0(r5)
 400e83c:	1885c83a 	sub	r2,r3,r2
 400e840:	f800283a 	ret
 400e844:	28800003 	ldbu	r2,0(r5)
 400e848:	18c03fcc 	andi	r3,r3,255
 400e84c:	1885c83a 	sub	r2,r3,r2
 400e850:	f800283a 	ret
 400e854:	0005883a 	mov	r2,zero
 400e858:	f800283a 	ret
 400e85c:	10c03fcc 	andi	r3,r2,255
 400e860:	003ff506 	br	400e838 <__alt_data_end+0xfc00e838>

0400e864 <__sprint_r.part.0>:
 400e864:	28801917 	ldw	r2,100(r5)
 400e868:	defff604 	addi	sp,sp,-40
 400e86c:	dd400515 	stw	r21,20(sp)
 400e870:	dfc00915 	stw	ra,36(sp)
 400e874:	df000815 	stw	fp,32(sp)
 400e878:	ddc00715 	stw	r23,28(sp)
 400e87c:	dd800615 	stw	r22,24(sp)
 400e880:	dd000415 	stw	r20,16(sp)
 400e884:	dcc00315 	stw	r19,12(sp)
 400e888:	dc800215 	stw	r18,8(sp)
 400e88c:	dc400115 	stw	r17,4(sp)
 400e890:	dc000015 	stw	r16,0(sp)
 400e894:	1088000c 	andi	r2,r2,8192
 400e898:	302b883a 	mov	r21,r6
 400e89c:	10002e26 	beq	r2,zero,400e958 <__sprint_r.part.0+0xf4>
 400e8a0:	30800217 	ldw	r2,8(r6)
 400e8a4:	35800017 	ldw	r22,0(r6)
 400e8a8:	10002926 	beq	r2,zero,400e950 <__sprint_r.part.0+0xec>
 400e8ac:	2827883a 	mov	r19,r5
 400e8b0:	2029883a 	mov	r20,r4
 400e8b4:	b5c00104 	addi	r23,r22,4
 400e8b8:	04bfffc4 	movi	r18,-1
 400e8bc:	bc400017 	ldw	r17,0(r23)
 400e8c0:	b4000017 	ldw	r16,0(r22)
 400e8c4:	0039883a 	mov	fp,zero
 400e8c8:	8822d0ba 	srli	r17,r17,2
 400e8cc:	8800031e 	bne	r17,zero,400e8dc <__sprint_r.part.0+0x78>
 400e8d0:	00001806 	br	400e934 <__sprint_r.part.0+0xd0>
 400e8d4:	84000104 	addi	r16,r16,4
 400e8d8:	8f001526 	beq	r17,fp,400e930 <__sprint_r.part.0+0xcc>
 400e8dc:	81400017 	ldw	r5,0(r16)
 400e8e0:	980d883a 	mov	r6,r19
 400e8e4:	a009883a 	mov	r4,r20
 400e8e8:	40104ac0 	call	40104ac <_fputwc_r>
 400e8ec:	e7000044 	addi	fp,fp,1
 400e8f0:	14bff81e 	bne	r2,r18,400e8d4 <__alt_data_end+0xfc00e8d4>
 400e8f4:	9005883a 	mov	r2,r18
 400e8f8:	a8000215 	stw	zero,8(r21)
 400e8fc:	a8000115 	stw	zero,4(r21)
 400e900:	dfc00917 	ldw	ra,36(sp)
 400e904:	df000817 	ldw	fp,32(sp)
 400e908:	ddc00717 	ldw	r23,28(sp)
 400e90c:	dd800617 	ldw	r22,24(sp)
 400e910:	dd400517 	ldw	r21,20(sp)
 400e914:	dd000417 	ldw	r20,16(sp)
 400e918:	dcc00317 	ldw	r19,12(sp)
 400e91c:	dc800217 	ldw	r18,8(sp)
 400e920:	dc400117 	ldw	r17,4(sp)
 400e924:	dc000017 	ldw	r16,0(sp)
 400e928:	dec00a04 	addi	sp,sp,40
 400e92c:	f800283a 	ret
 400e930:	a8800217 	ldw	r2,8(r21)
 400e934:	8c63883a 	add	r17,r17,r17
 400e938:	8c63883a 	add	r17,r17,r17
 400e93c:	1445c83a 	sub	r2,r2,r17
 400e940:	a8800215 	stw	r2,8(r21)
 400e944:	b5800204 	addi	r22,r22,8
 400e948:	bdc00204 	addi	r23,r23,8
 400e94c:	103fdb1e 	bne	r2,zero,400e8bc <__alt_data_end+0xfc00e8bc>
 400e950:	0005883a 	mov	r2,zero
 400e954:	003fe806 	br	400e8f8 <__alt_data_end+0xfc00e8f8>
 400e958:	400b9280 	call	400b928 <__sfvwrite_r>
 400e95c:	003fe606 	br	400e8f8 <__alt_data_end+0xfc00e8f8>

0400e960 <__sprint_r>:
 400e960:	30c00217 	ldw	r3,8(r6)
 400e964:	18000126 	beq	r3,zero,400e96c <__sprint_r+0xc>
 400e968:	400e8641 	jmpi	400e864 <__sprint_r.part.0>
 400e96c:	30000115 	stw	zero,4(r6)
 400e970:	0005883a 	mov	r2,zero
 400e974:	f800283a 	ret

0400e978 <___vfiprintf_internal_r>:
 400e978:	deffca04 	addi	sp,sp,-216
 400e97c:	dd403115 	stw	r21,196(sp)
 400e980:	dfc03515 	stw	ra,212(sp)
 400e984:	df003415 	stw	fp,208(sp)
 400e988:	ddc03315 	stw	r23,204(sp)
 400e98c:	dd803215 	stw	r22,200(sp)
 400e990:	dd003015 	stw	r20,192(sp)
 400e994:	dcc02f15 	stw	r19,188(sp)
 400e998:	dc802e15 	stw	r18,184(sp)
 400e99c:	dc402d15 	stw	r17,180(sp)
 400e9a0:	dc002c15 	stw	r16,176(sp)
 400e9a4:	d9002115 	stw	r4,132(sp)
 400e9a8:	d9402015 	stw	r5,128(sp)
 400e9ac:	d9c02215 	stw	r7,136(sp)
 400e9b0:	302b883a 	mov	r21,r6
 400e9b4:	20000226 	beq	r4,zero,400e9c0 <___vfiprintf_internal_r+0x48>
 400e9b8:	20800e17 	ldw	r2,56(r4)
 400e9bc:	1000cf26 	beq	r2,zero,400ecfc <___vfiprintf_internal_r+0x384>
 400e9c0:	d8c02017 	ldw	r3,128(sp)
 400e9c4:	1880030b 	ldhu	r2,12(r3)
 400e9c8:	10c8000c 	andi	r3,r2,8192
 400e9cc:	1800071e 	bne	r3,zero,400e9ec <___vfiprintf_internal_r+0x74>
 400e9d0:	d9402017 	ldw	r5,128(sp)
 400e9d4:	00f7ffc4 	movi	r3,-8193
 400e9d8:	10880014 	ori	r2,r2,8192
 400e9dc:	29001917 	ldw	r4,100(r5)
 400e9e0:	2880030d 	sth	r2,12(r5)
 400e9e4:	20c6703a 	and	r3,r4,r3
 400e9e8:	28c01915 	stw	r3,100(r5)
 400e9ec:	10c0020c 	andi	r3,r2,8
 400e9f0:	1800a526 	beq	r3,zero,400ec88 <___vfiprintf_internal_r+0x310>
 400e9f4:	d9002017 	ldw	r4,128(sp)
 400e9f8:	20c00417 	ldw	r3,16(r4)
 400e9fc:	1800a226 	beq	r3,zero,400ec88 <___vfiprintf_internal_r+0x310>
 400ea00:	1080068c 	andi	r2,r2,26
 400ea04:	00c00284 	movi	r3,10
 400ea08:	10c0a826 	beq	r2,r3,400ecac <___vfiprintf_internal_r+0x334>
 400ea0c:	d9001a04 	addi	r4,sp,104
 400ea10:	d94019c4 	addi	r5,sp,103
 400ea14:	04810074 	movhi	r18,1025
 400ea18:	2145c83a 	sub	r2,r4,r5
 400ea1c:	949bd404 	addi	r18,r18,28496
 400ea20:	d9001e15 	stw	r4,120(sp)
 400ea24:	d9401f15 	stw	r5,124(sp)
 400ea28:	dec01a15 	stw	sp,104(sp)
 400ea2c:	d8001c15 	stw	zero,112(sp)
 400ea30:	d8001b15 	stw	zero,108(sp)
 400ea34:	d811883a 	mov	r8,sp
 400ea38:	d8002615 	stw	zero,152(sp)
 400ea3c:	d8002415 	stw	zero,144(sp)
 400ea40:	d8802815 	stw	r2,160(sp)
 400ea44:	a82d883a 	mov	r22,r21
 400ea48:	b0800007 	ldb	r2,0(r22)
 400ea4c:	10040d26 	beq	r2,zero,400fa84 <___vfiprintf_internal_r+0x110c>
 400ea50:	00c00944 	movi	r3,37
 400ea54:	b029883a 	mov	r20,r22
 400ea58:	10c0021e 	bne	r2,r3,400ea64 <___vfiprintf_internal_r+0xec>
 400ea5c:	00001606 	br	400eab8 <___vfiprintf_internal_r+0x140>
 400ea60:	10c00326 	beq	r2,r3,400ea70 <___vfiprintf_internal_r+0xf8>
 400ea64:	a5000044 	addi	r20,r20,1
 400ea68:	a0800007 	ldb	r2,0(r20)
 400ea6c:	103ffc1e 	bne	r2,zero,400ea60 <__alt_data_end+0xfc00ea60>
 400ea70:	a5a1c83a 	sub	r16,r20,r22
 400ea74:	80001026 	beq	r16,zero,400eab8 <___vfiprintf_internal_r+0x140>
 400ea78:	d8c01c17 	ldw	r3,112(sp)
 400ea7c:	d8801b17 	ldw	r2,108(sp)
 400ea80:	45800015 	stw	r22,0(r8)
 400ea84:	80c7883a 	add	r3,r16,r3
 400ea88:	10800044 	addi	r2,r2,1
 400ea8c:	44000115 	stw	r16,4(r8)
 400ea90:	d8c01c15 	stw	r3,112(sp)
 400ea94:	d8801b15 	stw	r2,108(sp)
 400ea98:	010001c4 	movi	r4,7
 400ea9c:	2080750e 	bge	r4,r2,400ec74 <___vfiprintf_internal_r+0x2fc>
 400eaa0:	1803951e 	bne	r3,zero,400f8f8 <___vfiprintf_internal_r+0xf80>
 400eaa4:	d8c02417 	ldw	r3,144(sp)
 400eaa8:	d8001b15 	stw	zero,108(sp)
 400eaac:	d811883a 	mov	r8,sp
 400eab0:	1c07883a 	add	r3,r3,r16
 400eab4:	d8c02415 	stw	r3,144(sp)
 400eab8:	a0800007 	ldb	r2,0(r20)
 400eabc:	1002e026 	beq	r2,zero,400f640 <___vfiprintf_internal_r+0xcc8>
 400eac0:	a5800044 	addi	r22,r20,1
 400eac4:	a0c00047 	ldb	r3,1(r20)
 400eac8:	d8001d85 	stb	zero,118(sp)
 400eacc:	0027883a 	mov	r19,zero
 400ead0:	d8002305 	stb	zero,140(sp)
 400ead4:	043fffc4 	movi	r16,-1
 400ead8:	d8002515 	stw	zero,148(sp)
 400eadc:	0023883a 	mov	r17,zero
 400eae0:	05001604 	movi	r20,88
 400eae4:	05400244 	movi	r21,9
 400eae8:	402f883a 	mov	r23,r8
 400eaec:	b5800044 	addi	r22,r22,1
 400eaf0:	18bff804 	addi	r2,r3,-32
 400eaf4:	a0827736 	bltu	r20,r2,400f4d4 <___vfiprintf_internal_r+0xb5c>
 400eaf8:	100490ba 	slli	r2,r2,2
 400eafc:	01010074 	movhi	r4,1025
 400eb00:	213ac404 	addi	r4,r4,-5360
 400eb04:	1105883a 	add	r2,r2,r4
 400eb08:	10800017 	ldw	r2,0(r2)
 400eb0c:	1000683a 	jmp	r2
 400eb10:	0400f1d4 	movui	r16,967
 400eb14:	0400f4d4 	movui	r16,979
 400eb18:	0400f4d4 	movui	r16,979
 400eb1c:	0400f1f0 	cmpltui	r16,zero,967
 400eb20:	0400f4d4 	movui	r16,979
 400eb24:	0400f4d4 	movui	r16,979
 400eb28:	0400f4d4 	movui	r16,979
 400eb2c:	0400f4d4 	movui	r16,979
 400eb30:	0400f4d4 	movui	r16,979
 400eb34:	0400f4d4 	movui	r16,979
 400eb38:	0400f3f8 	rdprs	r16,zero,975
 400eb3c:	0400f41c 	xori	r16,zero,976
 400eb40:	0400f4d4 	movui	r16,979
 400eb44:	0400ed14 	movui	r16,948
 400eb48:	0400f430 	cmpltui	r16,zero,976
 400eb4c:	0400f4d4 	movui	r16,979
 400eb50:	0400f1fc 	xorhi	r16,zero,967
 400eb54:	0400f208 	cmpgei	r16,zero,968
 400eb58:	0400f208 	cmpgei	r16,zero,968
 400eb5c:	0400f208 	cmpgei	r16,zero,968
 400eb60:	0400f208 	cmpgei	r16,zero,968
 400eb64:	0400f208 	cmpgei	r16,zero,968
 400eb68:	0400f208 	cmpgei	r16,zero,968
 400eb6c:	0400f208 	cmpgei	r16,zero,968
 400eb70:	0400f208 	cmpgei	r16,zero,968
 400eb74:	0400f208 	cmpgei	r16,zero,968
 400eb78:	0400f4d4 	movui	r16,979
 400eb7c:	0400f4d4 	movui	r16,979
 400eb80:	0400f4d4 	movui	r16,979
 400eb84:	0400f4d4 	movui	r16,979
 400eb88:	0400f4d4 	movui	r16,979
 400eb8c:	0400f4d4 	movui	r16,979
 400eb90:	0400f4d4 	movui	r16,979
 400eb94:	0400f4d4 	movui	r16,979
 400eb98:	0400f4d4 	movui	r16,979
 400eb9c:	0400f4d4 	movui	r16,979
 400eba0:	0400f248 	cmpgei	r16,zero,969
 400eba4:	0400f4d4 	movui	r16,979
 400eba8:	0400f4d4 	movui	r16,979
 400ebac:	0400f4d4 	movui	r16,979
 400ebb0:	0400f4d4 	movui	r16,979
 400ebb4:	0400f4d4 	movui	r16,979
 400ebb8:	0400f4d4 	movui	r16,979
 400ebbc:	0400f4d4 	movui	r16,979
 400ebc0:	0400f4d4 	movui	r16,979
 400ebc4:	0400f4d4 	movui	r16,979
 400ebc8:	0400f4d4 	movui	r16,979
 400ebcc:	0400f284 	movi	r16,970
 400ebd0:	0400f4d4 	movui	r16,979
 400ebd4:	0400f4d4 	movui	r16,979
 400ebd8:	0400f4d4 	movui	r16,979
 400ebdc:	0400f4d4 	movui	r16,979
 400ebe0:	0400f4d4 	movui	r16,979
 400ebe4:	0400f2e0 	cmpeqi	r16,zero,971
 400ebe8:	0400f4d4 	movui	r16,979
 400ebec:	0400f4d4 	movui	r16,979
 400ebf0:	0400f354 	movui	r16,973
 400ebf4:	0400f4d4 	movui	r16,979
 400ebf8:	0400f4d4 	movui	r16,979
 400ebfc:	0400f4d4 	movui	r16,979
 400ec00:	0400f4d4 	movui	r16,979
 400ec04:	0400f4d4 	movui	r16,979
 400ec08:	0400f4d4 	movui	r16,979
 400ec0c:	0400f4d4 	movui	r16,979
 400ec10:	0400f4d4 	movui	r16,979
 400ec14:	0400f4d4 	movui	r16,979
 400ec18:	0400f4d4 	movui	r16,979
 400ec1c:	0400f0fc 	xorhi	r16,zero,963
 400ec20:	0400f12c 	andhi	r16,zero,964
 400ec24:	0400f4d4 	movui	r16,979
 400ec28:	0400f4d4 	movui	r16,979
 400ec2c:	0400f4d4 	movui	r16,979
 400ec30:	0400f47c 	xorhi	r16,zero,977
 400ec34:	0400f12c 	andhi	r16,zero,964
 400ec38:	0400f4d4 	movui	r16,979
 400ec3c:	0400f4d4 	movui	r16,979
 400ec40:	0400efd4 	movui	r16,959
 400ec44:	0400f4d4 	movui	r16,979
 400ec48:	0400efe8 	cmpgeui	r16,zero,959
 400ec4c:	0400f020 	cmpeqi	r16,zero,960
 400ec50:	0400ed20 	cmpeqi	r16,zero,948
 400ec54:	0400efc8 	cmpgei	r16,zero,959
 400ec58:	0400f4d4 	movui	r16,979
 400ec5c:	0400f394 	movui	r16,974
 400ec60:	0400f4d4 	movui	r16,979
 400ec64:	0400f3e0 	cmpeqi	r16,zero,975
 400ec68:	0400f4d4 	movui	r16,979
 400ec6c:	0400f4d4 	movui	r16,979
 400ec70:	0400f0a4 	muli	r16,zero,962
 400ec74:	42000204 	addi	r8,r8,8
 400ec78:	d8c02417 	ldw	r3,144(sp)
 400ec7c:	1c07883a 	add	r3,r3,r16
 400ec80:	d8c02415 	stw	r3,144(sp)
 400ec84:	003f8c06 	br	400eab8 <__alt_data_end+0xfc00eab8>
 400ec88:	d9402017 	ldw	r5,128(sp)
 400ec8c:	d9002117 	ldw	r4,132(sp)
 400ec90:	40094980 	call	4009498 <__swsetup_r>
 400ec94:	1003c11e 	bne	r2,zero,400fb9c <___vfiprintf_internal_r+0x1224>
 400ec98:	d9402017 	ldw	r5,128(sp)
 400ec9c:	00c00284 	movi	r3,10
 400eca0:	2880030b 	ldhu	r2,12(r5)
 400eca4:	1080068c 	andi	r2,r2,26
 400eca8:	10ff581e 	bne	r2,r3,400ea0c <__alt_data_end+0xfc00ea0c>
 400ecac:	d8c02017 	ldw	r3,128(sp)
 400ecb0:	1880038f 	ldh	r2,14(r3)
 400ecb4:	103f5516 	blt	r2,zero,400ea0c <__alt_data_end+0xfc00ea0c>
 400ecb8:	d9c02217 	ldw	r7,136(sp)
 400ecbc:	d9002117 	ldw	r4,132(sp)
 400ecc0:	a80d883a 	mov	r6,r21
 400ecc4:	180b883a 	mov	r5,r3
 400ecc8:	400fea00 	call	400fea0 <__sbprintf>
 400eccc:	dfc03517 	ldw	ra,212(sp)
 400ecd0:	df003417 	ldw	fp,208(sp)
 400ecd4:	ddc03317 	ldw	r23,204(sp)
 400ecd8:	dd803217 	ldw	r22,200(sp)
 400ecdc:	dd403117 	ldw	r21,196(sp)
 400ece0:	dd003017 	ldw	r20,192(sp)
 400ece4:	dcc02f17 	ldw	r19,188(sp)
 400ece8:	dc802e17 	ldw	r18,184(sp)
 400ecec:	dc402d17 	ldw	r17,180(sp)
 400ecf0:	dc002c17 	ldw	r16,176(sp)
 400ecf4:	dec03604 	addi	sp,sp,216
 400ecf8:	f800283a 	ret
 400ecfc:	400b4a40 	call	400b4a4 <__sinit>
 400ed00:	003f2f06 	br	400e9c0 <__alt_data_end+0xfc00e9c0>
 400ed04:	d8c02517 	ldw	r3,148(sp)
 400ed08:	d8802215 	stw	r2,136(sp)
 400ed0c:	00c7c83a 	sub	r3,zero,r3
 400ed10:	d8c02515 	stw	r3,148(sp)
 400ed14:	8c400114 	ori	r17,r17,4
 400ed18:	b0c00007 	ldb	r3,0(r22)
 400ed1c:	003f7306 	br	400eaec <__alt_data_end+0xfc00eaec>
 400ed20:	00800c04 	movi	r2,48
 400ed24:	d9402217 	ldw	r5,136(sp)
 400ed28:	d8801d05 	stb	r2,116(sp)
 400ed2c:	00801e04 	movi	r2,120
 400ed30:	d8801d45 	stb	r2,117(sp)
 400ed34:	d8001d85 	stb	zero,118(sp)
 400ed38:	b811883a 	mov	r8,r23
 400ed3c:	28c00104 	addi	r3,r5,4
 400ed40:	2cc00017 	ldw	r19,0(r5)
 400ed44:	0029883a 	mov	r20,zero
 400ed48:	88800094 	ori	r2,r17,2
 400ed4c:	80032516 	blt	r16,zero,400f9e4 <___vfiprintf_internal_r+0x106c>
 400ed50:	00bfdfc4 	movi	r2,-129
 400ed54:	88a2703a 	and	r17,r17,r2
 400ed58:	d8c02215 	stw	r3,136(sp)
 400ed5c:	8c400094 	ori	r17,r17,2
 400ed60:	98032a1e 	bne	r19,zero,400fa0c <___vfiprintf_internal_r+0x1094>
 400ed64:	00810074 	movhi	r2,1025
 400ed68:	109b7304 	addi	r2,r2,28108
 400ed6c:	d8802615 	stw	r2,152(sp)
 400ed70:	002b883a 	mov	r21,zero
 400ed74:	8001741e 	bne	r16,zero,400f348 <___vfiprintf_internal_r+0x9d0>
 400ed78:	0021883a 	mov	r16,zero
 400ed7c:	0029883a 	mov	r20,zero
 400ed80:	ddc01a04 	addi	r23,sp,104
 400ed84:	8027883a 	mov	r19,r16
 400ed88:	8500010e 	bge	r16,r20,400ed90 <___vfiprintf_internal_r+0x418>
 400ed8c:	a027883a 	mov	r19,r20
 400ed90:	ad403fcc 	andi	r21,r21,255
 400ed94:	ad40201c 	xori	r21,r21,128
 400ed98:	ad7fe004 	addi	r21,r21,-128
 400ed9c:	a8000126 	beq	r21,zero,400eda4 <___vfiprintf_internal_r+0x42c>
 400eda0:	9cc00044 	addi	r19,r19,1
 400eda4:	89c0008c 	andi	r7,r17,2
 400eda8:	38000126 	beq	r7,zero,400edb0 <___vfiprintf_internal_r+0x438>
 400edac:	9cc00084 	addi	r19,r19,2
 400edb0:	88c0210c 	andi	r3,r17,132
 400edb4:	1801dd1e 	bne	r3,zero,400f52c <___vfiprintf_internal_r+0xbb4>
 400edb8:	d9402517 	ldw	r5,148(sp)
 400edbc:	2cebc83a 	sub	r21,r5,r19
 400edc0:	0541da0e 	bge	zero,r21,400f52c <___vfiprintf_internal_r+0xbb4>
 400edc4:	07000404 	movi	fp,16
 400edc8:	d8801c17 	ldw	r2,112(sp)
 400edcc:	e543be0e 	bge	fp,r21,400fcc8 <___vfiprintf_internal_r+0x1350>
 400edd0:	01410074 	movhi	r5,1025
 400edd4:	295bd804 	addi	r5,r5,28512
 400edd8:	dc002715 	stw	r16,156(sp)
 400eddc:	d9801b17 	ldw	r6,108(sp)
 400ede0:	a821883a 	mov	r16,r21
 400ede4:	d9402315 	stw	r5,140(sp)
 400ede8:	028001c4 	movi	r10,7
 400edec:	d9c02915 	stw	r7,164(sp)
 400edf0:	182b883a 	mov	r21,r3
 400edf4:	00000506 	br	400ee0c <___vfiprintf_internal_r+0x494>
 400edf8:	31000084 	addi	r4,r6,2
 400edfc:	42000204 	addi	r8,r8,8
 400ee00:	180d883a 	mov	r6,r3
 400ee04:	843ffc04 	addi	r16,r16,-16
 400ee08:	e4000f0e 	bge	fp,r16,400ee48 <___vfiprintf_internal_r+0x4d0>
 400ee0c:	01010074 	movhi	r4,1025
 400ee10:	10800404 	addi	r2,r2,16
 400ee14:	30c00044 	addi	r3,r6,1
 400ee18:	211bd804 	addi	r4,r4,28512
 400ee1c:	41000015 	stw	r4,0(r8)
 400ee20:	47000115 	stw	fp,4(r8)
 400ee24:	d8801c15 	stw	r2,112(sp)
 400ee28:	d8c01b15 	stw	r3,108(sp)
 400ee2c:	50fff20e 	bge	r10,r3,400edf8 <__alt_data_end+0xfc00edf8>
 400ee30:	1001b21e 	bne	r2,zero,400f4fc <___vfiprintf_internal_r+0xb84>
 400ee34:	843ffc04 	addi	r16,r16,-16
 400ee38:	000d883a 	mov	r6,zero
 400ee3c:	01000044 	movi	r4,1
 400ee40:	d811883a 	mov	r8,sp
 400ee44:	e43ff116 	blt	fp,r16,400ee0c <__alt_data_end+0xfc00ee0c>
 400ee48:	a807883a 	mov	r3,r21
 400ee4c:	d9c02917 	ldw	r7,164(sp)
 400ee50:	802b883a 	mov	r21,r16
 400ee54:	dc002717 	ldw	r16,156(sp)
 400ee58:	d9402317 	ldw	r5,140(sp)
 400ee5c:	a885883a 	add	r2,r21,r2
 400ee60:	45400115 	stw	r21,4(r8)
 400ee64:	41400015 	stw	r5,0(r8)
 400ee68:	d8801c15 	stw	r2,112(sp)
 400ee6c:	d9001b15 	stw	r4,108(sp)
 400ee70:	014001c4 	movi	r5,7
 400ee74:	29026216 	blt	r5,r4,400f800 <___vfiprintf_internal_r+0xe88>
 400ee78:	d9801d87 	ldb	r6,118(sp)
 400ee7c:	42000204 	addi	r8,r8,8
 400ee80:	21400044 	addi	r5,r4,1
 400ee84:	3001ae1e 	bne	r6,zero,400f540 <___vfiprintf_internal_r+0xbc8>
 400ee88:	3801bb26 	beq	r7,zero,400f578 <___vfiprintf_internal_r+0xc00>
 400ee8c:	d9001d04 	addi	r4,sp,116
 400ee90:	10800084 	addi	r2,r2,2
 400ee94:	41000015 	stw	r4,0(r8)
 400ee98:	01000084 	movi	r4,2
 400ee9c:	41000115 	stw	r4,4(r8)
 400eea0:	d8801c15 	stw	r2,112(sp)
 400eea4:	d9401b15 	stw	r5,108(sp)
 400eea8:	010001c4 	movi	r4,7
 400eeac:	2142680e 	bge	r4,r5,400f850 <___vfiprintf_internal_r+0xed8>
 400eeb0:	1002b11e 	bne	r2,zero,400f978 <___vfiprintf_internal_r+0x1000>
 400eeb4:	01802004 	movi	r6,128
 400eeb8:	01400044 	movi	r5,1
 400eebc:	0009883a 	mov	r4,zero
 400eec0:	d811883a 	mov	r8,sp
 400eec4:	1981ae1e 	bne	r3,r6,400f580 <___vfiprintf_internal_r+0xc08>
 400eec8:	d8c02517 	ldw	r3,148(sp)
 400eecc:	1cf9c83a 	sub	fp,r3,r19
 400eed0:	0701ab0e 	bge	zero,fp,400f580 <___vfiprintf_internal_r+0xc08>
 400eed4:	05400404 	movi	r21,16
 400eed8:	af03a90e 	bge	r21,fp,400fd80 <___vfiprintf_internal_r+0x1408>
 400eedc:	01410074 	movhi	r5,1025
 400eee0:	295bd404 	addi	r5,r5,28496
 400eee4:	d9402315 	stw	r5,140(sp)
 400eee8:	01c001c4 	movi	r7,7
 400eeec:	00000506 	br	400ef04 <___vfiprintf_internal_r+0x58c>
 400eef0:	21800084 	addi	r6,r4,2
 400eef4:	42000204 	addi	r8,r8,8
 400eef8:	1809883a 	mov	r4,r3
 400eefc:	e73ffc04 	addi	fp,fp,-16
 400ef00:	af000d0e 	bge	r21,fp,400ef38 <___vfiprintf_internal_r+0x5c0>
 400ef04:	10800404 	addi	r2,r2,16
 400ef08:	20c00044 	addi	r3,r4,1
 400ef0c:	44800015 	stw	r18,0(r8)
 400ef10:	45400115 	stw	r21,4(r8)
 400ef14:	d8801c15 	stw	r2,112(sp)
 400ef18:	d8c01b15 	stw	r3,108(sp)
 400ef1c:	38fff40e 	bge	r7,r3,400eef0 <__alt_data_end+0xfc00eef0>
 400ef20:	10022b1e 	bne	r2,zero,400f7d0 <___vfiprintf_internal_r+0xe58>
 400ef24:	e73ffc04 	addi	fp,fp,-16
 400ef28:	01800044 	movi	r6,1
 400ef2c:	0009883a 	mov	r4,zero
 400ef30:	d811883a 	mov	r8,sp
 400ef34:	af3ff316 	blt	r21,fp,400ef04 <__alt_data_end+0xfc00ef04>
 400ef38:	d8c02317 	ldw	r3,140(sp)
 400ef3c:	1705883a 	add	r2,r2,fp
 400ef40:	47000115 	stw	fp,4(r8)
 400ef44:	40c00015 	stw	r3,0(r8)
 400ef48:	d8801c15 	stw	r2,112(sp)
 400ef4c:	d9801b15 	stw	r6,108(sp)
 400ef50:	00c001c4 	movi	r3,7
 400ef54:	19829416 	blt	r3,r6,400f9a8 <___vfiprintf_internal_r+0x1030>
 400ef58:	8521c83a 	sub	r16,r16,r20
 400ef5c:	42000204 	addi	r8,r8,8
 400ef60:	31400044 	addi	r5,r6,1
 400ef64:	3009883a 	mov	r4,r6
 400ef68:	04018716 	blt	zero,r16,400f588 <___vfiprintf_internal_r+0xc10>
 400ef6c:	a085883a 	add	r2,r20,r2
 400ef70:	45c00015 	stw	r23,0(r8)
 400ef74:	45000115 	stw	r20,4(r8)
 400ef78:	d8801c15 	stw	r2,112(sp)
 400ef7c:	d9401b15 	stw	r5,108(sp)
 400ef80:	00c001c4 	movi	r3,7
 400ef84:	1941c20e 	bge	r3,r5,400f690 <___vfiprintf_internal_r+0xd18>
 400ef88:	1002531e 	bne	r2,zero,400f8d8 <___vfiprintf_internal_r+0xf60>
 400ef8c:	d8001b15 	stw	zero,108(sp)
 400ef90:	8c40010c 	andi	r17,r17,4
 400ef94:	88023226 	beq	r17,zero,400f860 <___vfiprintf_internal_r+0xee8>
 400ef98:	d9002517 	ldw	r4,148(sp)
 400ef9c:	24e3c83a 	sub	r17,r4,r19
 400efa0:	04432916 	blt	zero,r17,400fc48 <___vfiprintf_internal_r+0x12d0>
 400efa4:	d8802517 	ldw	r2,148(sp)
 400efa8:	14c0010e 	bge	r2,r19,400efb0 <___vfiprintf_internal_r+0x638>
 400efac:	9805883a 	mov	r2,r19
 400efb0:	d8c02417 	ldw	r3,144(sp)
 400efb4:	1887883a 	add	r3,r3,r2
 400efb8:	d8c02415 	stw	r3,144(sp)
 400efbc:	d8001b15 	stw	zero,108(sp)
 400efc0:	d811883a 	mov	r8,sp
 400efc4:	003ea006 	br	400ea48 <__alt_data_end+0xfc00ea48>
 400efc8:	8c400814 	ori	r17,r17,32
 400efcc:	b0c00007 	ldb	r3,0(r22)
 400efd0:	003ec606 	br	400eaec <__alt_data_end+0xfc00eaec>
 400efd4:	b0c00007 	ldb	r3,0(r22)
 400efd8:	00801b04 	movi	r2,108
 400efdc:	18832026 	beq	r3,r2,400fc60 <___vfiprintf_internal_r+0x12e8>
 400efe0:	8c400414 	ori	r17,r17,16
 400efe4:	003ec106 	br	400eaec <__alt_data_end+0xfc00eaec>
 400efe8:	9cc03fcc 	andi	r19,r19,255
 400efec:	b811883a 	mov	r8,r23
 400eff0:	9803981e 	bne	r19,zero,400fe54 <___vfiprintf_internal_r+0x14dc>
 400eff4:	8880080c 	andi	r2,r17,32
 400eff8:	1002be26 	beq	r2,zero,400faf4 <___vfiprintf_internal_r+0x117c>
 400effc:	d9002217 	ldw	r4,136(sp)
 400f000:	d9402417 	ldw	r5,144(sp)
 400f004:	20800017 	ldw	r2,0(r4)
 400f008:	2807d7fa 	srai	r3,r5,31
 400f00c:	21000104 	addi	r4,r4,4
 400f010:	d9002215 	stw	r4,136(sp)
 400f014:	11400015 	stw	r5,0(r2)
 400f018:	10c00115 	stw	r3,4(r2)
 400f01c:	003e8a06 	br	400ea48 <__alt_data_end+0xfc00ea48>
 400f020:	9cc03fcc 	andi	r19,r19,255
 400f024:	b811883a 	mov	r8,r23
 400f028:	9803871e 	bne	r19,zero,400fe48 <___vfiprintf_internal_r+0x14d0>
 400f02c:	8880080c 	andi	r2,r17,32
 400f030:	10009a26 	beq	r2,zero,400f29c <___vfiprintf_internal_r+0x924>
 400f034:	d9002217 	ldw	r4,136(sp)
 400f038:	d8001d85 	stb	zero,118(sp)
 400f03c:	20800204 	addi	r2,r4,8
 400f040:	24c00017 	ldw	r19,0(r4)
 400f044:	25000117 	ldw	r20,4(r4)
 400f048:	8002a416 	blt	r16,zero,400fadc <___vfiprintf_internal_r+0x1164>
 400f04c:	013fdfc4 	movi	r4,-129
 400f050:	9d06b03a 	or	r3,r19,r20
 400f054:	d8802215 	stw	r2,136(sp)
 400f058:	8922703a 	and	r17,r17,r4
 400f05c:	18009b26 	beq	r3,zero,400f2cc <___vfiprintf_internal_r+0x954>
 400f060:	002b883a 	mov	r21,zero
 400f064:	ddc01a04 	addi	r23,sp,104
 400f068:	9806d0fa 	srli	r3,r19,3
 400f06c:	a008977a 	slli	r4,r20,29
 400f070:	a028d0fa 	srli	r20,r20,3
 400f074:	9cc001cc 	andi	r19,r19,7
 400f078:	98800c04 	addi	r2,r19,48
 400f07c:	bdffffc4 	addi	r23,r23,-1
 400f080:	20e6b03a 	or	r19,r4,r3
 400f084:	b8800005 	stb	r2,0(r23)
 400f088:	9d06b03a 	or	r3,r19,r20
 400f08c:	183ff61e 	bne	r3,zero,400f068 <__alt_data_end+0xfc00f068>
 400f090:	88c0004c 	andi	r3,r17,1
 400f094:	18021f1e 	bne	r3,zero,400f914 <___vfiprintf_internal_r+0xf9c>
 400f098:	d9401e17 	ldw	r5,120(sp)
 400f09c:	2de9c83a 	sub	r20,r5,r23
 400f0a0:	003f3806 	br	400ed84 <__alt_data_end+0xfc00ed84>
 400f0a4:	9cc03fcc 	andi	r19,r19,255
 400f0a8:	b811883a 	mov	r8,r23
 400f0ac:	98034f1e 	bne	r19,zero,400fdec <___vfiprintf_internal_r+0x1474>
 400f0b0:	00810074 	movhi	r2,1025
 400f0b4:	109b7304 	addi	r2,r2,28108
 400f0b8:	d8802615 	stw	r2,152(sp)
 400f0bc:	8880080c 	andi	r2,r17,32
 400f0c0:	1000ac26 	beq	r2,zero,400f374 <___vfiprintf_internal_r+0x9fc>
 400f0c4:	d9002217 	ldw	r4,136(sp)
 400f0c8:	24c00017 	ldw	r19,0(r4)
 400f0cc:	25000117 	ldw	r20,4(r4)
 400f0d0:	21000204 	addi	r4,r4,8
 400f0d4:	d9002215 	stw	r4,136(sp)
 400f0d8:	8880004c 	andi	r2,r17,1
 400f0dc:	1001e726 	beq	r2,zero,400f87c <___vfiprintf_internal_r+0xf04>
 400f0e0:	9d04b03a 	or	r2,r19,r20
 400f0e4:	10025c1e 	bne	r2,zero,400fa58 <___vfiprintf_internal_r+0x10e0>
 400f0e8:	d8001d85 	stb	zero,118(sp)
 400f0ec:	80024416 	blt	r16,zero,400fa00 <___vfiprintf_internal_r+0x1088>
 400f0f0:	00bfdfc4 	movi	r2,-129
 400f0f4:	88a2703a 	and	r17,r17,r2
 400f0f8:	003f1d06 	br	400ed70 <__alt_data_end+0xfc00ed70>
 400f0fc:	d8c02217 	ldw	r3,136(sp)
 400f100:	04c00044 	movi	r19,1
 400f104:	b811883a 	mov	r8,r23
 400f108:	18800017 	ldw	r2,0(r3)
 400f10c:	18c00104 	addi	r3,r3,4
 400f110:	d8001d85 	stb	zero,118(sp)
 400f114:	d8801005 	stb	r2,64(sp)
 400f118:	d8c02215 	stw	r3,136(sp)
 400f11c:	9829883a 	mov	r20,r19
 400f120:	ddc01004 	addi	r23,sp,64
 400f124:	0021883a 	mov	r16,zero
 400f128:	003f1e06 	br	400eda4 <__alt_data_end+0xfc00eda4>
 400f12c:	9cc03fcc 	andi	r19,r19,255
 400f130:	b811883a 	mov	r8,r23
 400f134:	9803331e 	bne	r19,zero,400fe04 <___vfiprintf_internal_r+0x148c>
 400f138:	8880080c 	andi	r2,r17,32
 400f13c:	10004826 	beq	r2,zero,400f260 <___vfiprintf_internal_r+0x8e8>
 400f140:	d9002217 	ldw	r4,136(sp)
 400f144:	20800117 	ldw	r2,4(r4)
 400f148:	24c00017 	ldw	r19,0(r4)
 400f14c:	21000204 	addi	r4,r4,8
 400f150:	d9002215 	stw	r4,136(sp)
 400f154:	1029883a 	mov	r20,r2
 400f158:	10024c16 	blt	r2,zero,400fa8c <___vfiprintf_internal_r+0x1114>
 400f15c:	dd401d83 	ldbu	r21,118(sp)
 400f160:	80007116 	blt	r16,zero,400f328 <___vfiprintf_internal_r+0x9b0>
 400f164:	00ffdfc4 	movi	r3,-129
 400f168:	9d04b03a 	or	r2,r19,r20
 400f16c:	88e2703a 	and	r17,r17,r3
 400f170:	1000d126 	beq	r2,zero,400f4b8 <___vfiprintf_internal_r+0xb40>
 400f174:	a0023526 	beq	r20,zero,400fa4c <___vfiprintf_internal_r+0x10d4>
 400f178:	ddc01a04 	addi	r23,sp,104
 400f17c:	4039883a 	mov	fp,r8
 400f180:	9809883a 	mov	r4,r19
 400f184:	a00b883a 	mov	r5,r20
 400f188:	01800284 	movi	r6,10
 400f18c:	000f883a 	mov	r7,zero
 400f190:	4010fb00 	call	4010fb0 <__umoddi3>
 400f194:	10800c04 	addi	r2,r2,48
 400f198:	bdffffc4 	addi	r23,r23,-1
 400f19c:	9809883a 	mov	r4,r19
 400f1a0:	a00b883a 	mov	r5,r20
 400f1a4:	b8800005 	stb	r2,0(r23)
 400f1a8:	01800284 	movi	r6,10
 400f1ac:	000f883a 	mov	r7,zero
 400f1b0:	40109b40 	call	40109b4 <__udivdi3>
 400f1b4:	1027883a 	mov	r19,r2
 400f1b8:	10c4b03a 	or	r2,r2,r3
 400f1bc:	1829883a 	mov	r20,r3
 400f1c0:	103fef1e 	bne	r2,zero,400f180 <__alt_data_end+0xfc00f180>
 400f1c4:	d9001e17 	ldw	r4,120(sp)
 400f1c8:	e011883a 	mov	r8,fp
 400f1cc:	25e9c83a 	sub	r20,r4,r23
 400f1d0:	003eec06 	br	400ed84 <__alt_data_end+0xfc00ed84>
 400f1d4:	d8802307 	ldb	r2,140(sp)
 400f1d8:	1002361e 	bne	r2,zero,400fab4 <___vfiprintf_internal_r+0x113c>
 400f1dc:	00c00804 	movi	r3,32
 400f1e0:	d8c02305 	stb	r3,140(sp)
 400f1e4:	04c00044 	movi	r19,1
 400f1e8:	b0c00007 	ldb	r3,0(r22)
 400f1ec:	003e3f06 	br	400eaec <__alt_data_end+0xfc00eaec>
 400f1f0:	8c400054 	ori	r17,r17,1
 400f1f4:	b0c00007 	ldb	r3,0(r22)
 400f1f8:	003e3c06 	br	400eaec <__alt_data_end+0xfc00eaec>
 400f1fc:	8c402014 	ori	r17,r17,128
 400f200:	b0c00007 	ldb	r3,0(r22)
 400f204:	003e3906 	br	400eaec <__alt_data_end+0xfc00eaec>
 400f208:	dc002715 	stw	r16,156(sp)
 400f20c:	d8002515 	stw	zero,148(sp)
 400f210:	1f3ff404 	addi	fp,r3,-48
 400f214:	0009883a 	mov	r4,zero
 400f218:	b021883a 	mov	r16,r22
 400f21c:	01400284 	movi	r5,10
 400f220:	4006cd00 	call	4006cd0 <__mulsi3>
 400f224:	80c00007 	ldb	r3,0(r16)
 400f228:	e089883a 	add	r4,fp,r2
 400f22c:	b5800044 	addi	r22,r22,1
 400f230:	1f3ff404 	addi	fp,r3,-48
 400f234:	b021883a 	mov	r16,r22
 400f238:	af3ff82e 	bgeu	r21,fp,400f21c <__alt_data_end+0xfc00f21c>
 400f23c:	d9002515 	stw	r4,148(sp)
 400f240:	dc002717 	ldw	r16,156(sp)
 400f244:	003e2a06 	br	400eaf0 <__alt_data_end+0xfc00eaf0>
 400f248:	9cc03fcc 	andi	r19,r19,255
 400f24c:	b811883a 	mov	r8,r23
 400f250:	9802e91e 	bne	r19,zero,400fdf8 <___vfiprintf_internal_r+0x1480>
 400f254:	8c400414 	ori	r17,r17,16
 400f258:	8880080c 	andi	r2,r17,32
 400f25c:	103fb81e 	bne	r2,zero,400f140 <__alt_data_end+0xfc00f140>
 400f260:	8880040c 	andi	r2,r17,16
 400f264:	10022e26 	beq	r2,zero,400fb20 <___vfiprintf_internal_r+0x11a8>
 400f268:	d9402217 	ldw	r5,136(sp)
 400f26c:	2cc00017 	ldw	r19,0(r5)
 400f270:	29400104 	addi	r5,r5,4
 400f274:	d9402215 	stw	r5,136(sp)
 400f278:	9829d7fa 	srai	r20,r19,31
 400f27c:	a005883a 	mov	r2,r20
 400f280:	003fb506 	br	400f158 <__alt_data_end+0xfc00f158>
 400f284:	9cc03fcc 	andi	r19,r19,255
 400f288:	b811883a 	mov	r8,r23
 400f28c:	9802fa1e 	bne	r19,zero,400fe78 <___vfiprintf_internal_r+0x1500>
 400f290:	8c400414 	ori	r17,r17,16
 400f294:	8880080c 	andi	r2,r17,32
 400f298:	103f661e 	bne	r2,zero,400f034 <__alt_data_end+0xfc00f034>
 400f29c:	8880040c 	andi	r2,r17,16
 400f2a0:	10020626 	beq	r2,zero,400fabc <___vfiprintf_internal_r+0x1144>
 400f2a4:	d9402217 	ldw	r5,136(sp)
 400f2a8:	d8001d85 	stb	zero,118(sp)
 400f2ac:	0029883a 	mov	r20,zero
 400f2b0:	28800104 	addi	r2,r5,4
 400f2b4:	2cc00017 	ldw	r19,0(r5)
 400f2b8:	80020816 	blt	r16,zero,400fadc <___vfiprintf_internal_r+0x1164>
 400f2bc:	00ffdfc4 	movi	r3,-129
 400f2c0:	d8802215 	stw	r2,136(sp)
 400f2c4:	88e2703a 	and	r17,r17,r3
 400f2c8:	983f651e 	bne	r19,zero,400f060 <__alt_data_end+0xfc00f060>
 400f2cc:	002b883a 	mov	r21,zero
 400f2d0:	8002cf26 	beq	r16,zero,400fe10 <___vfiprintf_internal_r+0x1498>
 400f2d4:	0027883a 	mov	r19,zero
 400f2d8:	0029883a 	mov	r20,zero
 400f2dc:	003f6106 	br	400f064 <__alt_data_end+0xfc00f064>
 400f2e0:	9cc03fcc 	andi	r19,r19,255
 400f2e4:	b811883a 	mov	r8,r23
 400f2e8:	9802e01e 	bne	r19,zero,400fe6c <___vfiprintf_internal_r+0x14f4>
 400f2ec:	8c400414 	ori	r17,r17,16
 400f2f0:	8880080c 	andi	r2,r17,32
 400f2f4:	1000641e 	bne	r2,zero,400f488 <___vfiprintf_internal_r+0xb10>
 400f2f8:	8880040c 	andi	r2,r17,16
 400f2fc:	1001c81e 	bne	r2,zero,400fa20 <___vfiprintf_internal_r+0x10a8>
 400f300:	8880100c 	andi	r2,r17,64
 400f304:	d8001d85 	stb	zero,118(sp)
 400f308:	1002281e 	bne	r2,zero,400fbac <___vfiprintf_internal_r+0x1234>
 400f30c:	d9002217 	ldw	r4,136(sp)
 400f310:	0029883a 	mov	r20,zero
 400f314:	20800104 	addi	r2,r4,4
 400f318:	24c00017 	ldw	r19,0(r4)
 400f31c:	8001c60e 	bge	r16,zero,400fa38 <___vfiprintf_internal_r+0x10c0>
 400f320:	d8802215 	stw	r2,136(sp)
 400f324:	002b883a 	mov	r21,zero
 400f328:	9d04b03a 	or	r2,r19,r20
 400f32c:	103f911e 	bne	r2,zero,400f174 <__alt_data_end+0xfc00f174>
 400f330:	00800044 	movi	r2,1
 400f334:	10803fcc 	andi	r2,r2,255
 400f338:	00c00044 	movi	r3,1
 400f33c:	10c05f26 	beq	r2,r3,400f4bc <___vfiprintf_internal_r+0xb44>
 400f340:	00c00084 	movi	r3,2
 400f344:	10ffe31e 	bne	r2,r3,400f2d4 <__alt_data_end+0xfc00f2d4>
 400f348:	0027883a 	mov	r19,zero
 400f34c:	0029883a 	mov	r20,zero
 400f350:	00015106 	br	400f898 <___vfiprintf_internal_r+0xf20>
 400f354:	9cc03fcc 	andi	r19,r19,255
 400f358:	b811883a 	mov	r8,r23
 400f35c:	9802c01e 	bne	r19,zero,400fe60 <___vfiprintf_internal_r+0x14e8>
 400f360:	01410074 	movhi	r5,1025
 400f364:	295b6e04 	addi	r5,r5,28088
 400f368:	d9402615 	stw	r5,152(sp)
 400f36c:	8880080c 	andi	r2,r17,32
 400f370:	103f541e 	bne	r2,zero,400f0c4 <__alt_data_end+0xfc00f0c4>
 400f374:	8880040c 	andi	r2,r17,16
 400f378:	1001f226 	beq	r2,zero,400fb44 <___vfiprintf_internal_r+0x11cc>
 400f37c:	d9402217 	ldw	r5,136(sp)
 400f380:	0029883a 	mov	r20,zero
 400f384:	2cc00017 	ldw	r19,0(r5)
 400f388:	29400104 	addi	r5,r5,4
 400f38c:	d9402215 	stw	r5,136(sp)
 400f390:	003f5106 	br	400f0d8 <__alt_data_end+0xfc00f0d8>
 400f394:	d8c02217 	ldw	r3,136(sp)
 400f398:	b811883a 	mov	r8,r23
 400f39c:	d8001d85 	stb	zero,118(sp)
 400f3a0:	1dc00017 	ldw	r23,0(r3)
 400f3a4:	1f000104 	addi	fp,r3,4
 400f3a8:	b8025926 	beq	r23,zero,400fd10 <___vfiprintf_internal_r+0x1398>
 400f3ac:	80023316 	blt	r16,zero,400fc7c <___vfiprintf_internal_r+0x1304>
 400f3b0:	800d883a 	mov	r6,r16
 400f3b4:	000b883a 	mov	r5,zero
 400f3b8:	b809883a 	mov	r4,r23
 400f3bc:	da002a15 	stw	r8,168(sp)
 400f3c0:	400ca780 	call	400ca78 <memchr>
 400f3c4:	da002a17 	ldw	r8,168(sp)
 400f3c8:	10026826 	beq	r2,zero,400fd6c <___vfiprintf_internal_r+0x13f4>
 400f3cc:	15e9c83a 	sub	r20,r2,r23
 400f3d0:	dd401d83 	ldbu	r21,118(sp)
 400f3d4:	df002215 	stw	fp,136(sp)
 400f3d8:	0021883a 	mov	r16,zero
 400f3dc:	003e6906 	br	400ed84 <__alt_data_end+0xfc00ed84>
 400f3e0:	9cc03fcc 	andi	r19,r19,255
 400f3e4:	b811883a 	mov	r8,r23
 400f3e8:	983fc126 	beq	r19,zero,400f2f0 <__alt_data_end+0xfc00f2f0>
 400f3ec:	d8c02303 	ldbu	r3,140(sp)
 400f3f0:	d8c01d85 	stb	r3,118(sp)
 400f3f4:	003fbe06 	br	400f2f0 <__alt_data_end+0xfc00f2f0>
 400f3f8:	d9002217 	ldw	r4,136(sp)
 400f3fc:	d9402217 	ldw	r5,136(sp)
 400f400:	21000017 	ldw	r4,0(r4)
 400f404:	28800104 	addi	r2,r5,4
 400f408:	d9002515 	stw	r4,148(sp)
 400f40c:	203e3d16 	blt	r4,zero,400ed04 <__alt_data_end+0xfc00ed04>
 400f410:	d8802215 	stw	r2,136(sp)
 400f414:	b0c00007 	ldb	r3,0(r22)
 400f418:	003db406 	br	400eaec <__alt_data_end+0xfc00eaec>
 400f41c:	00c00ac4 	movi	r3,43
 400f420:	d8c02305 	stb	r3,140(sp)
 400f424:	04c00044 	movi	r19,1
 400f428:	b0c00007 	ldb	r3,0(r22)
 400f42c:	003daf06 	br	400eaec <__alt_data_end+0xfc00eaec>
 400f430:	b0c00007 	ldb	r3,0(r22)
 400f434:	01000a84 	movi	r4,42
 400f438:	b4000044 	addi	r16,r22,1
 400f43c:	19025e26 	beq	r3,r4,400fdb8 <___vfiprintf_internal_r+0x1440>
 400f440:	1f3ff404 	addi	fp,r3,-48
 400f444:	0009883a 	mov	r4,zero
 400f448:	af025236 	bltu	r21,fp,400fd94 <___vfiprintf_internal_r+0x141c>
 400f44c:	01400284 	movi	r5,10
 400f450:	4006cd00 	call	4006cd0 <__mulsi3>
 400f454:	80c00007 	ldb	r3,0(r16)
 400f458:	1709883a 	add	r4,r2,fp
 400f45c:	85800044 	addi	r22,r16,1
 400f460:	1f3ff404 	addi	fp,r3,-48
 400f464:	b021883a 	mov	r16,r22
 400f468:	af3ff82e 	bgeu	r21,fp,400f44c <__alt_data_end+0xfc00f44c>
 400f46c:	2021883a 	mov	r16,r4
 400f470:	203d9f0e 	bge	r4,zero,400eaf0 <__alt_data_end+0xfc00eaf0>
 400f474:	043fffc4 	movi	r16,-1
 400f478:	003d9d06 	br	400eaf0 <__alt_data_end+0xfc00eaf0>
 400f47c:	8c401014 	ori	r17,r17,64
 400f480:	b0c00007 	ldb	r3,0(r22)
 400f484:	003d9906 	br	400eaec <__alt_data_end+0xfc00eaec>
 400f488:	d9002217 	ldw	r4,136(sp)
 400f48c:	d8001d85 	stb	zero,118(sp)
 400f490:	20c00204 	addi	r3,r4,8
 400f494:	24c00017 	ldw	r19,0(r4)
 400f498:	25000117 	ldw	r20,4(r4)
 400f49c:	8001e716 	blt	r16,zero,400fc3c <___vfiprintf_internal_r+0x12c4>
 400f4a0:	013fdfc4 	movi	r4,-129
 400f4a4:	9d04b03a 	or	r2,r19,r20
 400f4a8:	d8c02215 	stw	r3,136(sp)
 400f4ac:	8922703a 	and	r17,r17,r4
 400f4b0:	002b883a 	mov	r21,zero
 400f4b4:	103f2f1e 	bne	r2,zero,400f174 <__alt_data_end+0xfc00f174>
 400f4b8:	803e2f26 	beq	r16,zero,400ed78 <__alt_data_end+0xfc00ed78>
 400f4bc:	0027883a 	mov	r19,zero
 400f4c0:	9cc00c04 	addi	r19,r19,48
 400f4c4:	dcc019c5 	stb	r19,103(sp)
 400f4c8:	dd002817 	ldw	r20,160(sp)
 400f4cc:	ddc019c4 	addi	r23,sp,103
 400f4d0:	003e2c06 	br	400ed84 <__alt_data_end+0xfc00ed84>
 400f4d4:	9cc03fcc 	andi	r19,r19,255
 400f4d8:	b811883a 	mov	r8,r23
 400f4dc:	9802571e 	bne	r19,zero,400fe3c <___vfiprintf_internal_r+0x14c4>
 400f4e0:	18005726 	beq	r3,zero,400f640 <___vfiprintf_internal_r+0xcc8>
 400f4e4:	04c00044 	movi	r19,1
 400f4e8:	d8c01005 	stb	r3,64(sp)
 400f4ec:	d8001d85 	stb	zero,118(sp)
 400f4f0:	9829883a 	mov	r20,r19
 400f4f4:	ddc01004 	addi	r23,sp,64
 400f4f8:	003f0a06 	br	400f124 <__alt_data_end+0xfc00f124>
 400f4fc:	d9402017 	ldw	r5,128(sp)
 400f500:	d9002117 	ldw	r4,132(sp)
 400f504:	d9801a04 	addi	r6,sp,104
 400f508:	da802a15 	stw	r10,168(sp)
 400f50c:	400e8640 	call	400e864 <__sprint_r.part.0>
 400f510:	da802a17 	ldw	r10,168(sp)
 400f514:	1000501e 	bne	r2,zero,400f658 <___vfiprintf_internal_r+0xce0>
 400f518:	d9801b17 	ldw	r6,108(sp)
 400f51c:	d8801c17 	ldw	r2,112(sp)
 400f520:	d811883a 	mov	r8,sp
 400f524:	31000044 	addi	r4,r6,1
 400f528:	003e3606 	br	400ee04 <__alt_data_end+0xfc00ee04>
 400f52c:	d9001b17 	ldw	r4,108(sp)
 400f530:	d8801c17 	ldw	r2,112(sp)
 400f534:	21400044 	addi	r5,r4,1
 400f538:	d9801d87 	ldb	r6,118(sp)
 400f53c:	303e5226 	beq	r6,zero,400ee88 <__alt_data_end+0xfc00ee88>
 400f540:	01800044 	movi	r6,1
 400f544:	d9001d84 	addi	r4,sp,118
 400f548:	1185883a 	add	r2,r2,r6
 400f54c:	41000015 	stw	r4,0(r8)
 400f550:	41800115 	stw	r6,4(r8)
 400f554:	d8801c15 	stw	r2,112(sp)
 400f558:	d9401b15 	stw	r5,108(sp)
 400f55c:	010001c4 	movi	r4,7
 400f560:	2140b00e 	bge	r4,r5,400f824 <___vfiprintf_internal_r+0xeac>
 400f564:	1000f61e 	bne	r2,zero,400f940 <___vfiprintf_internal_r+0xfc8>
 400f568:	3800b31e 	bne	r7,zero,400f838 <___vfiprintf_internal_r+0xec0>
 400f56c:	0009883a 	mov	r4,zero
 400f570:	300b883a 	mov	r5,r6
 400f574:	d811883a 	mov	r8,sp
 400f578:	01802004 	movi	r6,128
 400f57c:	19be5226 	beq	r3,r6,400eec8 <__alt_data_end+0xfc00eec8>
 400f580:	8521c83a 	sub	r16,r16,r20
 400f584:	043e790e 	bge	zero,r16,400ef6c <__alt_data_end+0xfc00ef6c>
 400f588:	05400404 	movi	r21,16
 400f58c:	ac01b00e 	bge	r21,r16,400fc50 <___vfiprintf_internal_r+0x12d8>
 400f590:	01410074 	movhi	r5,1025
 400f594:	295bd404 	addi	r5,r5,28496
 400f598:	d9402315 	stw	r5,140(sp)
 400f59c:	070001c4 	movi	fp,7
 400f5a0:	00000506 	br	400f5b8 <___vfiprintf_internal_r+0xc40>
 400f5a4:	21400084 	addi	r5,r4,2
 400f5a8:	42000204 	addi	r8,r8,8
 400f5ac:	1809883a 	mov	r4,r3
 400f5b0:	843ffc04 	addi	r16,r16,-16
 400f5b4:	ac000d0e 	bge	r21,r16,400f5ec <___vfiprintf_internal_r+0xc74>
 400f5b8:	10800404 	addi	r2,r2,16
 400f5bc:	20c00044 	addi	r3,r4,1
 400f5c0:	44800015 	stw	r18,0(r8)
 400f5c4:	45400115 	stw	r21,4(r8)
 400f5c8:	d8801c15 	stw	r2,112(sp)
 400f5cc:	d8c01b15 	stw	r3,108(sp)
 400f5d0:	e0fff40e 	bge	fp,r3,400f5a4 <__alt_data_end+0xfc00f5a4>
 400f5d4:	1000101e 	bne	r2,zero,400f618 <___vfiprintf_internal_r+0xca0>
 400f5d8:	843ffc04 	addi	r16,r16,-16
 400f5dc:	01400044 	movi	r5,1
 400f5e0:	0009883a 	mov	r4,zero
 400f5e4:	d811883a 	mov	r8,sp
 400f5e8:	ac3ff316 	blt	r21,r16,400f5b8 <__alt_data_end+0xfc00f5b8>
 400f5ec:	d8c02317 	ldw	r3,140(sp)
 400f5f0:	1405883a 	add	r2,r2,r16
 400f5f4:	44000115 	stw	r16,4(r8)
 400f5f8:	40c00015 	stw	r3,0(r8)
 400f5fc:	d8801c15 	stw	r2,112(sp)
 400f600:	d9401b15 	stw	r5,108(sp)
 400f604:	00c001c4 	movi	r3,7
 400f608:	19401916 	blt	r3,r5,400f670 <___vfiprintf_internal_r+0xcf8>
 400f60c:	42000204 	addi	r8,r8,8
 400f610:	29400044 	addi	r5,r5,1
 400f614:	003e5506 	br	400ef6c <__alt_data_end+0xfc00ef6c>
 400f618:	d9402017 	ldw	r5,128(sp)
 400f61c:	d9002117 	ldw	r4,132(sp)
 400f620:	d9801a04 	addi	r6,sp,104
 400f624:	400e8640 	call	400e864 <__sprint_r.part.0>
 400f628:	10000b1e 	bne	r2,zero,400f658 <___vfiprintf_internal_r+0xce0>
 400f62c:	d9001b17 	ldw	r4,108(sp)
 400f630:	d8801c17 	ldw	r2,112(sp)
 400f634:	d811883a 	mov	r8,sp
 400f638:	21400044 	addi	r5,r4,1
 400f63c:	003fdc06 	br	400f5b0 <__alt_data_end+0xfc00f5b0>
 400f640:	d8801c17 	ldw	r2,112(sp)
 400f644:	10000426 	beq	r2,zero,400f658 <___vfiprintf_internal_r+0xce0>
 400f648:	d9402017 	ldw	r5,128(sp)
 400f64c:	d9002117 	ldw	r4,132(sp)
 400f650:	d9801a04 	addi	r6,sp,104
 400f654:	400e8640 	call	400e864 <__sprint_r.part.0>
 400f658:	d9402017 	ldw	r5,128(sp)
 400f65c:	2880030b 	ldhu	r2,12(r5)
 400f660:	1080100c 	andi	r2,r2,64
 400f664:	10014d1e 	bne	r2,zero,400fb9c <___vfiprintf_internal_r+0x1224>
 400f668:	d8802417 	ldw	r2,144(sp)
 400f66c:	003d9706 	br	400eccc <__alt_data_end+0xfc00eccc>
 400f670:	1000d21e 	bne	r2,zero,400f9bc <___vfiprintf_internal_r+0x1044>
 400f674:	00c00044 	movi	r3,1
 400f678:	a005883a 	mov	r2,r20
 400f67c:	ddc00015 	stw	r23,0(sp)
 400f680:	dd000115 	stw	r20,4(sp)
 400f684:	dd001c15 	stw	r20,112(sp)
 400f688:	d8c01b15 	stw	r3,108(sp)
 400f68c:	d811883a 	mov	r8,sp
 400f690:	42000204 	addi	r8,r8,8
 400f694:	8c40010c 	andi	r17,r17,4
 400f698:	88004026 	beq	r17,zero,400f79c <___vfiprintf_internal_r+0xe24>
 400f69c:	d9002517 	ldw	r4,148(sp)
 400f6a0:	24e3c83a 	sub	r17,r4,r19
 400f6a4:	04403d0e 	bge	zero,r17,400f79c <___vfiprintf_internal_r+0xe24>
 400f6a8:	04000404 	movi	r16,16
 400f6ac:	8441a90e 	bge	r16,r17,400fd54 <___vfiprintf_internal_r+0x13dc>
 400f6b0:	00c10074 	movhi	r3,1025
 400f6b4:	18dbd804 	addi	r3,r3,28512
 400f6b8:	d9001b17 	ldw	r4,108(sp)
 400f6bc:	d8c02315 	stw	r3,140(sp)
 400f6c0:	050001c4 	movi	r20,7
 400f6c4:	dd402117 	ldw	r21,132(sp)
 400f6c8:	ddc02017 	ldw	r23,128(sp)
 400f6cc:	00000506 	br	400f6e4 <___vfiprintf_internal_r+0xd6c>
 400f6d0:	21400084 	addi	r5,r4,2
 400f6d4:	42000204 	addi	r8,r8,8
 400f6d8:	1809883a 	mov	r4,r3
 400f6dc:	8c7ffc04 	addi	r17,r17,-16
 400f6e0:	84400f0e 	bge	r16,r17,400f720 <___vfiprintf_internal_r+0xda8>
 400f6e4:	01410074 	movhi	r5,1025
 400f6e8:	10800404 	addi	r2,r2,16
 400f6ec:	20c00044 	addi	r3,r4,1
 400f6f0:	295bd804 	addi	r5,r5,28512
 400f6f4:	41400015 	stw	r5,0(r8)
 400f6f8:	44000115 	stw	r16,4(r8)
 400f6fc:	d8801c15 	stw	r2,112(sp)
 400f700:	d8c01b15 	stw	r3,108(sp)
 400f704:	a0fff20e 	bge	r20,r3,400f6d0 <__alt_data_end+0xfc00f6d0>
 400f708:	1000141e 	bne	r2,zero,400f75c <___vfiprintf_internal_r+0xde4>
 400f70c:	8c7ffc04 	addi	r17,r17,-16
 400f710:	01400044 	movi	r5,1
 400f714:	0009883a 	mov	r4,zero
 400f718:	d811883a 	mov	r8,sp
 400f71c:	847ff116 	blt	r16,r17,400f6e4 <__alt_data_end+0xfc00f6e4>
 400f720:	d8c02317 	ldw	r3,140(sp)
 400f724:	1445883a 	add	r2,r2,r17
 400f728:	44400115 	stw	r17,4(r8)
 400f72c:	40c00015 	stw	r3,0(r8)
 400f730:	d8801c15 	stw	r2,112(sp)
 400f734:	d9401b15 	stw	r5,108(sp)
 400f738:	00c001c4 	movi	r3,7
 400f73c:	1940170e 	bge	r3,r5,400f79c <___vfiprintf_internal_r+0xe24>
 400f740:	1000101e 	bne	r2,zero,400f784 <___vfiprintf_internal_r+0xe0c>
 400f744:	d8802517 	ldw	r2,148(sp)
 400f748:	14c11616 	blt	r2,r19,400fba4 <___vfiprintf_internal_r+0x122c>
 400f74c:	d9002417 	ldw	r4,144(sp)
 400f750:	2089883a 	add	r4,r4,r2
 400f754:	d9002415 	stw	r4,144(sp)
 400f758:	003e1806 	br	400efbc <__alt_data_end+0xfc00efbc>
 400f75c:	d9801a04 	addi	r6,sp,104
 400f760:	b80b883a 	mov	r5,r23
 400f764:	a809883a 	mov	r4,r21
 400f768:	400e8640 	call	400e864 <__sprint_r.part.0>
 400f76c:	103fba1e 	bne	r2,zero,400f658 <__alt_data_end+0xfc00f658>
 400f770:	d9001b17 	ldw	r4,108(sp)
 400f774:	d8801c17 	ldw	r2,112(sp)
 400f778:	d811883a 	mov	r8,sp
 400f77c:	21400044 	addi	r5,r4,1
 400f780:	003fd606 	br	400f6dc <__alt_data_end+0xfc00f6dc>
 400f784:	d9402017 	ldw	r5,128(sp)
 400f788:	d9002117 	ldw	r4,132(sp)
 400f78c:	d9801a04 	addi	r6,sp,104
 400f790:	400e8640 	call	400e864 <__sprint_r.part.0>
 400f794:	103fb01e 	bne	r2,zero,400f658 <__alt_data_end+0xfc00f658>
 400f798:	d8801c17 	ldw	r2,112(sp)
 400f79c:	d8c02517 	ldw	r3,148(sp)
 400f7a0:	1cc0010e 	bge	r3,r19,400f7a8 <___vfiprintf_internal_r+0xe30>
 400f7a4:	9807883a 	mov	r3,r19
 400f7a8:	d9002417 	ldw	r4,144(sp)
 400f7ac:	20c9883a 	add	r4,r4,r3
 400f7b0:	d9002415 	stw	r4,144(sp)
 400f7b4:	103e0126 	beq	r2,zero,400efbc <__alt_data_end+0xfc00efbc>
 400f7b8:	d9402017 	ldw	r5,128(sp)
 400f7bc:	d9002117 	ldw	r4,132(sp)
 400f7c0:	d9801a04 	addi	r6,sp,104
 400f7c4:	400e8640 	call	400e864 <__sprint_r.part.0>
 400f7c8:	103dfc26 	beq	r2,zero,400efbc <__alt_data_end+0xfc00efbc>
 400f7cc:	003fa206 	br	400f658 <__alt_data_end+0xfc00f658>
 400f7d0:	d9402017 	ldw	r5,128(sp)
 400f7d4:	d9002117 	ldw	r4,132(sp)
 400f7d8:	d9801a04 	addi	r6,sp,104
 400f7dc:	d9c02b15 	stw	r7,172(sp)
 400f7e0:	400e8640 	call	400e864 <__sprint_r.part.0>
 400f7e4:	d9c02b17 	ldw	r7,172(sp)
 400f7e8:	103f9b1e 	bne	r2,zero,400f658 <__alt_data_end+0xfc00f658>
 400f7ec:	d9001b17 	ldw	r4,108(sp)
 400f7f0:	d8801c17 	ldw	r2,112(sp)
 400f7f4:	d811883a 	mov	r8,sp
 400f7f8:	21800044 	addi	r6,r4,1
 400f7fc:	003dbf06 	br	400eefc <__alt_data_end+0xfc00eefc>
 400f800:	1000d81e 	bne	r2,zero,400fb64 <___vfiprintf_internal_r+0x11ec>
 400f804:	d9001d87 	ldb	r4,118(sp)
 400f808:	20000a26 	beq	r4,zero,400f834 <___vfiprintf_internal_r+0xebc>
 400f80c:	00800044 	movi	r2,1
 400f810:	d9001d84 	addi	r4,sp,118
 400f814:	100b883a 	mov	r5,r2
 400f818:	d9000015 	stw	r4,0(sp)
 400f81c:	d8800115 	stw	r2,4(sp)
 400f820:	d811883a 	mov	r8,sp
 400f824:	2809883a 	mov	r4,r5
 400f828:	42000204 	addi	r8,r8,8
 400f82c:	29400044 	addi	r5,r5,1
 400f830:	003d9506 	br	400ee88 <__alt_data_end+0xfc00ee88>
 400f834:	3800fd26 	beq	r7,zero,400fc2c <___vfiprintf_internal_r+0x12b4>
 400f838:	00800084 	movi	r2,2
 400f83c:	d9001d04 	addi	r4,sp,116
 400f840:	d9000015 	stw	r4,0(sp)
 400f844:	d8800115 	stw	r2,4(sp)
 400f848:	01400044 	movi	r5,1
 400f84c:	d811883a 	mov	r8,sp
 400f850:	2809883a 	mov	r4,r5
 400f854:	42000204 	addi	r8,r8,8
 400f858:	29400044 	addi	r5,r5,1
 400f85c:	003f4606 	br	400f578 <__alt_data_end+0xfc00f578>
 400f860:	d8802517 	ldw	r2,148(sp)
 400f864:	14c0010e 	bge	r2,r19,400f86c <___vfiprintf_internal_r+0xef4>
 400f868:	9805883a 	mov	r2,r19
 400f86c:	d9402417 	ldw	r5,144(sp)
 400f870:	288b883a 	add	r5,r5,r2
 400f874:	d9402415 	stw	r5,144(sp)
 400f878:	003dd006 	br	400efbc <__alt_data_end+0xfc00efbc>
 400f87c:	d8001d85 	stb	zero,118(sp)
 400f880:	80005d16 	blt	r16,zero,400f9f8 <___vfiprintf_internal_r+0x1080>
 400f884:	00ffdfc4 	movi	r3,-129
 400f888:	9d04b03a 	or	r2,r19,r20
 400f88c:	88e2703a 	and	r17,r17,r3
 400f890:	103d3726 	beq	r2,zero,400ed70 <__alt_data_end+0xfc00ed70>
 400f894:	002b883a 	mov	r21,zero
 400f898:	d9002617 	ldw	r4,152(sp)
 400f89c:	ddc01a04 	addi	r23,sp,104
 400f8a0:	988003cc 	andi	r2,r19,15
 400f8a4:	a006973a 	slli	r3,r20,28
 400f8a8:	2085883a 	add	r2,r4,r2
 400f8ac:	9826d13a 	srli	r19,r19,4
 400f8b0:	10800003 	ldbu	r2,0(r2)
 400f8b4:	a028d13a 	srli	r20,r20,4
 400f8b8:	bdffffc4 	addi	r23,r23,-1
 400f8bc:	1ce6b03a 	or	r19,r3,r19
 400f8c0:	b8800005 	stb	r2,0(r23)
 400f8c4:	9d04b03a 	or	r2,r19,r20
 400f8c8:	103ff51e 	bne	r2,zero,400f8a0 <__alt_data_end+0xfc00f8a0>
 400f8cc:	d8801e17 	ldw	r2,120(sp)
 400f8d0:	15e9c83a 	sub	r20,r2,r23
 400f8d4:	003d2b06 	br	400ed84 <__alt_data_end+0xfc00ed84>
 400f8d8:	d9402017 	ldw	r5,128(sp)
 400f8dc:	d9002117 	ldw	r4,132(sp)
 400f8e0:	d9801a04 	addi	r6,sp,104
 400f8e4:	400e8640 	call	400e864 <__sprint_r.part.0>
 400f8e8:	103f5b1e 	bne	r2,zero,400f658 <__alt_data_end+0xfc00f658>
 400f8ec:	d8801c17 	ldw	r2,112(sp)
 400f8f0:	d811883a 	mov	r8,sp
 400f8f4:	003f6706 	br	400f694 <__alt_data_end+0xfc00f694>
 400f8f8:	d9402017 	ldw	r5,128(sp)
 400f8fc:	d9002117 	ldw	r4,132(sp)
 400f900:	d9801a04 	addi	r6,sp,104
 400f904:	400e8640 	call	400e864 <__sprint_r.part.0>
 400f908:	103f531e 	bne	r2,zero,400f658 <__alt_data_end+0xfc00f658>
 400f90c:	d811883a 	mov	r8,sp
 400f910:	003cd906 	br	400ec78 <__alt_data_end+0xfc00ec78>
 400f914:	10803fcc 	andi	r2,r2,255
 400f918:	1080201c 	xori	r2,r2,128
 400f91c:	10bfe004 	addi	r2,r2,-128
 400f920:	00c00c04 	movi	r3,48
 400f924:	10ffe926 	beq	r2,r3,400f8cc <__alt_data_end+0xfc00f8cc>
 400f928:	b8ffffc5 	stb	r3,-1(r23)
 400f92c:	d8c01e17 	ldw	r3,120(sp)
 400f930:	b8bfffc4 	addi	r2,r23,-1
 400f934:	102f883a 	mov	r23,r2
 400f938:	18a9c83a 	sub	r20,r3,r2
 400f93c:	003d1106 	br	400ed84 <__alt_data_end+0xfc00ed84>
 400f940:	d9402017 	ldw	r5,128(sp)
 400f944:	d9002117 	ldw	r4,132(sp)
 400f948:	d9801a04 	addi	r6,sp,104
 400f94c:	d8c02a15 	stw	r3,168(sp)
 400f950:	d9c02b15 	stw	r7,172(sp)
 400f954:	400e8640 	call	400e864 <__sprint_r.part.0>
 400f958:	d8c02a17 	ldw	r3,168(sp)
 400f95c:	d9c02b17 	ldw	r7,172(sp)
 400f960:	103f3d1e 	bne	r2,zero,400f658 <__alt_data_end+0xfc00f658>
 400f964:	d9001b17 	ldw	r4,108(sp)
 400f968:	d8801c17 	ldw	r2,112(sp)
 400f96c:	d811883a 	mov	r8,sp
 400f970:	21400044 	addi	r5,r4,1
 400f974:	003d4406 	br	400ee88 <__alt_data_end+0xfc00ee88>
 400f978:	d9402017 	ldw	r5,128(sp)
 400f97c:	d9002117 	ldw	r4,132(sp)
 400f980:	d9801a04 	addi	r6,sp,104
 400f984:	d8c02a15 	stw	r3,168(sp)
 400f988:	400e8640 	call	400e864 <__sprint_r.part.0>
 400f98c:	d8c02a17 	ldw	r3,168(sp)
 400f990:	103f311e 	bne	r2,zero,400f658 <__alt_data_end+0xfc00f658>
 400f994:	d9001b17 	ldw	r4,108(sp)
 400f998:	d8801c17 	ldw	r2,112(sp)
 400f99c:	d811883a 	mov	r8,sp
 400f9a0:	21400044 	addi	r5,r4,1
 400f9a4:	003ef406 	br	400f578 <__alt_data_end+0xfc00f578>
 400f9a8:	1000bd1e 	bne	r2,zero,400fca0 <___vfiprintf_internal_r+0x1328>
 400f9ac:	01400044 	movi	r5,1
 400f9b0:	0009883a 	mov	r4,zero
 400f9b4:	d811883a 	mov	r8,sp
 400f9b8:	003ef106 	br	400f580 <__alt_data_end+0xfc00f580>
 400f9bc:	d9402017 	ldw	r5,128(sp)
 400f9c0:	d9002117 	ldw	r4,132(sp)
 400f9c4:	d9801a04 	addi	r6,sp,104
 400f9c8:	400e8640 	call	400e864 <__sprint_r.part.0>
 400f9cc:	103f221e 	bne	r2,zero,400f658 <__alt_data_end+0xfc00f658>
 400f9d0:	d9401b17 	ldw	r5,108(sp)
 400f9d4:	d8801c17 	ldw	r2,112(sp)
 400f9d8:	d811883a 	mov	r8,sp
 400f9dc:	29400044 	addi	r5,r5,1
 400f9e0:	003d6206 	br	400ef6c <__alt_data_end+0xfc00ef6c>
 400f9e4:	01410074 	movhi	r5,1025
 400f9e8:	295b7304 	addi	r5,r5,28108
 400f9ec:	d9402615 	stw	r5,152(sp)
 400f9f0:	d8c02215 	stw	r3,136(sp)
 400f9f4:	1023883a 	mov	r17,r2
 400f9f8:	9d04b03a 	or	r2,r19,r20
 400f9fc:	103fa51e 	bne	r2,zero,400f894 <__alt_data_end+0xfc00f894>
 400fa00:	002b883a 	mov	r21,zero
 400fa04:	00800084 	movi	r2,2
 400fa08:	003e4a06 	br	400f334 <__alt_data_end+0xfc00f334>
 400fa0c:	01410074 	movhi	r5,1025
 400fa10:	295b7304 	addi	r5,r5,28108
 400fa14:	002b883a 	mov	r21,zero
 400fa18:	d9402615 	stw	r5,152(sp)
 400fa1c:	003f9e06 	br	400f898 <__alt_data_end+0xfc00f898>
 400fa20:	d9402217 	ldw	r5,136(sp)
 400fa24:	d8001d85 	stb	zero,118(sp)
 400fa28:	0029883a 	mov	r20,zero
 400fa2c:	28800104 	addi	r2,r5,4
 400fa30:	2cc00017 	ldw	r19,0(r5)
 400fa34:	803e3a16 	blt	r16,zero,400f320 <__alt_data_end+0xfc00f320>
 400fa38:	00ffdfc4 	movi	r3,-129
 400fa3c:	d8802215 	stw	r2,136(sp)
 400fa40:	88e2703a 	and	r17,r17,r3
 400fa44:	002b883a 	mov	r21,zero
 400fa48:	983e9b26 	beq	r19,zero,400f4b8 <__alt_data_end+0xfc00f4b8>
 400fa4c:	00800244 	movi	r2,9
 400fa50:	14fdc936 	bltu	r2,r19,400f178 <__alt_data_end+0xfc00f178>
 400fa54:	003e9a06 	br	400f4c0 <__alt_data_end+0xfc00f4c0>
 400fa58:	00800c04 	movi	r2,48
 400fa5c:	d8c01d45 	stb	r3,117(sp)
 400fa60:	d8801d05 	stb	r2,116(sp)
 400fa64:	d8001d85 	stb	zero,118(sp)
 400fa68:	88c00094 	ori	r3,r17,2
 400fa6c:	80009c16 	blt	r16,zero,400fce0 <___vfiprintf_internal_r+0x1368>
 400fa70:	00bfdfc4 	movi	r2,-129
 400fa74:	88a2703a 	and	r17,r17,r2
 400fa78:	8c400094 	ori	r17,r17,2
 400fa7c:	002b883a 	mov	r21,zero
 400fa80:	003f8506 	br	400f898 <__alt_data_end+0xfc00f898>
 400fa84:	b029883a 	mov	r20,r22
 400fa88:	003c0b06 	br	400eab8 <__alt_data_end+0xfc00eab8>
 400fa8c:	04e7c83a 	sub	r19,zero,r19
 400fa90:	05400b44 	movi	r21,45
 400fa94:	9804c03a 	cmpne	r2,r19,zero
 400fa98:	0529c83a 	sub	r20,zero,r20
 400fa9c:	dd401d85 	stb	r21,118(sp)
 400faa0:	a0a9c83a 	sub	r20,r20,r2
 400faa4:	80009716 	blt	r16,zero,400fd04 <___vfiprintf_internal_r+0x138c>
 400faa8:	00bfdfc4 	movi	r2,-129
 400faac:	88a2703a 	and	r17,r17,r2
 400fab0:	003db006 	br	400f174 <__alt_data_end+0xfc00f174>
 400fab4:	b0c00007 	ldb	r3,0(r22)
 400fab8:	003c0c06 	br	400eaec <__alt_data_end+0xfc00eaec>
 400fabc:	8880100c 	andi	r2,r17,64
 400fac0:	d8001d85 	stb	zero,118(sp)
 400fac4:	1000461e 	bne	r2,zero,400fbe0 <___vfiprintf_internal_r+0x1268>
 400fac8:	d9002217 	ldw	r4,136(sp)
 400facc:	0029883a 	mov	r20,zero
 400fad0:	20800104 	addi	r2,r4,4
 400fad4:	24c00017 	ldw	r19,0(r4)
 400fad8:	803df80e 	bge	r16,zero,400f2bc <__alt_data_end+0xfc00f2bc>
 400fadc:	9d06b03a 	or	r3,r19,r20
 400fae0:	d8802215 	stw	r2,136(sp)
 400fae4:	183d5e1e 	bne	r3,zero,400f060 <__alt_data_end+0xfc00f060>
 400fae8:	002b883a 	mov	r21,zero
 400faec:	0005883a 	mov	r2,zero
 400faf0:	003e1006 	br	400f334 <__alt_data_end+0xfc00f334>
 400faf4:	8880040c 	andi	r2,r17,16
 400faf8:	1000321e 	bne	r2,zero,400fbc4 <___vfiprintf_internal_r+0x124c>
 400fafc:	8c40100c 	andi	r17,r17,64
 400fb00:	88008d26 	beq	r17,zero,400fd38 <___vfiprintf_internal_r+0x13c0>
 400fb04:	d9402217 	ldw	r5,136(sp)
 400fb08:	d8c02417 	ldw	r3,144(sp)
 400fb0c:	28800017 	ldw	r2,0(r5)
 400fb10:	29400104 	addi	r5,r5,4
 400fb14:	d9402215 	stw	r5,136(sp)
 400fb18:	10c0000d 	sth	r3,0(r2)
 400fb1c:	003bca06 	br	400ea48 <__alt_data_end+0xfc00ea48>
 400fb20:	8880100c 	andi	r2,r17,64
 400fb24:	10003a26 	beq	r2,zero,400fc10 <___vfiprintf_internal_r+0x1298>
 400fb28:	d8802217 	ldw	r2,136(sp)
 400fb2c:	14c0000f 	ldh	r19,0(r2)
 400fb30:	10800104 	addi	r2,r2,4
 400fb34:	d8802215 	stw	r2,136(sp)
 400fb38:	9829d7fa 	srai	r20,r19,31
 400fb3c:	a005883a 	mov	r2,r20
 400fb40:	003d8506 	br	400f158 <__alt_data_end+0xfc00f158>
 400fb44:	8880100c 	andi	r2,r17,64
 400fb48:	10002b26 	beq	r2,zero,400fbf8 <___vfiprintf_internal_r+0x1280>
 400fb4c:	d8802217 	ldw	r2,136(sp)
 400fb50:	0029883a 	mov	r20,zero
 400fb54:	14c0000b 	ldhu	r19,0(r2)
 400fb58:	10800104 	addi	r2,r2,4
 400fb5c:	d8802215 	stw	r2,136(sp)
 400fb60:	003d5d06 	br	400f0d8 <__alt_data_end+0xfc00f0d8>
 400fb64:	d9402017 	ldw	r5,128(sp)
 400fb68:	d9002117 	ldw	r4,132(sp)
 400fb6c:	d9801a04 	addi	r6,sp,104
 400fb70:	d8c02a15 	stw	r3,168(sp)
 400fb74:	d9c02b15 	stw	r7,172(sp)
 400fb78:	400e8640 	call	400e864 <__sprint_r.part.0>
 400fb7c:	d8c02a17 	ldw	r3,168(sp)
 400fb80:	d9c02b17 	ldw	r7,172(sp)
 400fb84:	103eb41e 	bne	r2,zero,400f658 <__alt_data_end+0xfc00f658>
 400fb88:	d9001b17 	ldw	r4,108(sp)
 400fb8c:	d8801c17 	ldw	r2,112(sp)
 400fb90:	d811883a 	mov	r8,sp
 400fb94:	21400044 	addi	r5,r4,1
 400fb98:	003e6706 	br	400f538 <__alt_data_end+0xfc00f538>
 400fb9c:	00bfffc4 	movi	r2,-1
 400fba0:	003c4a06 	br	400eccc <__alt_data_end+0xfc00eccc>
 400fba4:	9805883a 	mov	r2,r19
 400fba8:	003ee806 	br	400f74c <__alt_data_end+0xfc00f74c>
 400fbac:	d8c02217 	ldw	r3,136(sp)
 400fbb0:	0029883a 	mov	r20,zero
 400fbb4:	18800104 	addi	r2,r3,4
 400fbb8:	1cc0000b 	ldhu	r19,0(r3)
 400fbbc:	803f9e0e 	bge	r16,zero,400fa38 <__alt_data_end+0xfc00fa38>
 400fbc0:	003dd706 	br	400f320 <__alt_data_end+0xfc00f320>
 400fbc4:	d8c02217 	ldw	r3,136(sp)
 400fbc8:	d9002417 	ldw	r4,144(sp)
 400fbcc:	18800017 	ldw	r2,0(r3)
 400fbd0:	18c00104 	addi	r3,r3,4
 400fbd4:	d8c02215 	stw	r3,136(sp)
 400fbd8:	11000015 	stw	r4,0(r2)
 400fbdc:	003b9a06 	br	400ea48 <__alt_data_end+0xfc00ea48>
 400fbe0:	d8c02217 	ldw	r3,136(sp)
 400fbe4:	0029883a 	mov	r20,zero
 400fbe8:	18800104 	addi	r2,r3,4
 400fbec:	1cc0000b 	ldhu	r19,0(r3)
 400fbf0:	803db20e 	bge	r16,zero,400f2bc <__alt_data_end+0xfc00f2bc>
 400fbf4:	003fb906 	br	400fadc <__alt_data_end+0xfc00fadc>
 400fbf8:	d9002217 	ldw	r4,136(sp)
 400fbfc:	0029883a 	mov	r20,zero
 400fc00:	24c00017 	ldw	r19,0(r4)
 400fc04:	21000104 	addi	r4,r4,4
 400fc08:	d9002215 	stw	r4,136(sp)
 400fc0c:	003d3206 	br	400f0d8 <__alt_data_end+0xfc00f0d8>
 400fc10:	d8c02217 	ldw	r3,136(sp)
 400fc14:	1cc00017 	ldw	r19,0(r3)
 400fc18:	18c00104 	addi	r3,r3,4
 400fc1c:	d8c02215 	stw	r3,136(sp)
 400fc20:	9829d7fa 	srai	r20,r19,31
 400fc24:	a005883a 	mov	r2,r20
 400fc28:	003d4b06 	br	400f158 <__alt_data_end+0xfc00f158>
 400fc2c:	0009883a 	mov	r4,zero
 400fc30:	01400044 	movi	r5,1
 400fc34:	d811883a 	mov	r8,sp
 400fc38:	003e4f06 	br	400f578 <__alt_data_end+0xfc00f578>
 400fc3c:	d8c02215 	stw	r3,136(sp)
 400fc40:	002b883a 	mov	r21,zero
 400fc44:	003db806 	br	400f328 <__alt_data_end+0xfc00f328>
 400fc48:	d811883a 	mov	r8,sp
 400fc4c:	003e9606 	br	400f6a8 <__alt_data_end+0xfc00f6a8>
 400fc50:	01010074 	movhi	r4,1025
 400fc54:	211bd404 	addi	r4,r4,28496
 400fc58:	d9002315 	stw	r4,140(sp)
 400fc5c:	003e6306 	br	400f5ec <__alt_data_end+0xfc00f5ec>
 400fc60:	b0c00043 	ldbu	r3,1(r22)
 400fc64:	8c400814 	ori	r17,r17,32
 400fc68:	b5800044 	addi	r22,r22,1
 400fc6c:	18c03fcc 	andi	r3,r3,255
 400fc70:	18c0201c 	xori	r3,r3,128
 400fc74:	18ffe004 	addi	r3,r3,-128
 400fc78:	003b9c06 	br	400eaec <__alt_data_end+0xfc00eaec>
 400fc7c:	b809883a 	mov	r4,r23
 400fc80:	da002a15 	stw	r8,168(sp)
 400fc84:	4006ffc0 	call	4006ffc <strlen>
 400fc88:	1029883a 	mov	r20,r2
 400fc8c:	dd401d83 	ldbu	r21,118(sp)
 400fc90:	df002215 	stw	fp,136(sp)
 400fc94:	0021883a 	mov	r16,zero
 400fc98:	da002a17 	ldw	r8,168(sp)
 400fc9c:	003c3906 	br	400ed84 <__alt_data_end+0xfc00ed84>
 400fca0:	d9402017 	ldw	r5,128(sp)
 400fca4:	d9002117 	ldw	r4,132(sp)
 400fca8:	d9801a04 	addi	r6,sp,104
 400fcac:	400e8640 	call	400e864 <__sprint_r.part.0>
 400fcb0:	103e691e 	bne	r2,zero,400f658 <__alt_data_end+0xfc00f658>
 400fcb4:	d9001b17 	ldw	r4,108(sp)
 400fcb8:	d8801c17 	ldw	r2,112(sp)
 400fcbc:	d811883a 	mov	r8,sp
 400fcc0:	21400044 	addi	r5,r4,1
 400fcc4:	003e2e06 	br	400f580 <__alt_data_end+0xfc00f580>
 400fcc8:	01010074 	movhi	r4,1025
 400fccc:	211bd804 	addi	r4,r4,28512
 400fcd0:	d9002315 	stw	r4,140(sp)
 400fcd4:	d9001b17 	ldw	r4,108(sp)
 400fcd8:	21000044 	addi	r4,r4,1
 400fcdc:	003c5e06 	br	400ee58 <__alt_data_end+0xfc00ee58>
 400fce0:	002b883a 	mov	r21,zero
 400fce4:	00800084 	movi	r2,2
 400fce8:	10803fcc 	andi	r2,r2,255
 400fcec:	01000044 	movi	r4,1
 400fcf0:	11002b26 	beq	r2,r4,400fda0 <___vfiprintf_internal_r+0x1428>
 400fcf4:	01000084 	movi	r4,2
 400fcf8:	11002b1e 	bne	r2,r4,400fda8 <___vfiprintf_internal_r+0x1430>
 400fcfc:	1823883a 	mov	r17,r3
 400fd00:	003ee506 	br	400f898 <__alt_data_end+0xfc00f898>
 400fd04:	8807883a 	mov	r3,r17
 400fd08:	00800044 	movi	r2,1
 400fd0c:	003ff606 	br	400fce8 <__alt_data_end+0xfc00fce8>
 400fd10:	00800184 	movi	r2,6
 400fd14:	1400012e 	bgeu	r2,r16,400fd1c <___vfiprintf_internal_r+0x13a4>
 400fd18:	1021883a 	mov	r16,r2
 400fd1c:	8029883a 	mov	r20,r16
 400fd20:	8027883a 	mov	r19,r16
 400fd24:	80002216 	blt	r16,zero,400fdb0 <___vfiprintf_internal_r+0x1438>
 400fd28:	05c10074 	movhi	r23,1025
 400fd2c:	df002215 	stw	fp,136(sp)
 400fd30:	bddb7804 	addi	r23,r23,28128
 400fd34:	003cfb06 	br	400f124 <__alt_data_end+0xfc00f124>
 400fd38:	d9002217 	ldw	r4,136(sp)
 400fd3c:	d9402417 	ldw	r5,144(sp)
 400fd40:	20800017 	ldw	r2,0(r4)
 400fd44:	21000104 	addi	r4,r4,4
 400fd48:	d9002215 	stw	r4,136(sp)
 400fd4c:	11400015 	stw	r5,0(r2)
 400fd50:	003b3d06 	br	400ea48 <__alt_data_end+0xfc00ea48>
 400fd54:	01410074 	movhi	r5,1025
 400fd58:	295bd804 	addi	r5,r5,28512
 400fd5c:	d9402315 	stw	r5,140(sp)
 400fd60:	d9401b17 	ldw	r5,108(sp)
 400fd64:	29400044 	addi	r5,r5,1
 400fd68:	003e6d06 	br	400f720 <__alt_data_end+0xfc00f720>
 400fd6c:	8029883a 	mov	r20,r16
 400fd70:	dd401d83 	ldbu	r21,118(sp)
 400fd74:	df002215 	stw	fp,136(sp)
 400fd78:	0021883a 	mov	r16,zero
 400fd7c:	003c0106 	br	400ed84 <__alt_data_end+0xfc00ed84>
 400fd80:	00c10074 	movhi	r3,1025
 400fd84:	18dbd404 	addi	r3,r3,28496
 400fd88:	d8c02315 	stw	r3,140(sp)
 400fd8c:	280d883a 	mov	r6,r5
 400fd90:	003c6906 	br	400ef38 <__alt_data_end+0xfc00ef38>
 400fd94:	802d883a 	mov	r22,r16
 400fd98:	0021883a 	mov	r16,zero
 400fd9c:	003b5406 	br	400eaf0 <__alt_data_end+0xfc00eaf0>
 400fda0:	1823883a 	mov	r17,r3
 400fda4:	003cf306 	br	400f174 <__alt_data_end+0xfc00f174>
 400fda8:	1823883a 	mov	r17,r3
 400fdac:	003cad06 	br	400f064 <__alt_data_end+0xfc00f064>
 400fdb0:	0027883a 	mov	r19,zero
 400fdb4:	003fdc06 	br	400fd28 <__alt_data_end+0xfc00fd28>
 400fdb8:	d9402217 	ldw	r5,136(sp)
 400fdbc:	8005883a 	mov	r2,r16
 400fdc0:	b0c00043 	ldbu	r3,1(r22)
 400fdc4:	2c000017 	ldw	r16,0(r5)
 400fdc8:	29000104 	addi	r4,r5,4
 400fdcc:	d9002215 	stw	r4,136(sp)
 400fdd0:	102d883a 	mov	r22,r2
 400fdd4:	803fa50e 	bge	r16,zero,400fc6c <__alt_data_end+0xfc00fc6c>
 400fdd8:	18c03fcc 	andi	r3,r3,255
 400fddc:	18c0201c 	xori	r3,r3,128
 400fde0:	043fffc4 	movi	r16,-1
 400fde4:	18ffe004 	addi	r3,r3,-128
 400fde8:	003b4006 	br	400eaec <__alt_data_end+0xfc00eaec>
 400fdec:	d9402303 	ldbu	r5,140(sp)
 400fdf0:	d9401d85 	stb	r5,118(sp)
 400fdf4:	003cae06 	br	400f0b0 <__alt_data_end+0xfc00f0b0>
 400fdf8:	d8c02303 	ldbu	r3,140(sp)
 400fdfc:	d8c01d85 	stb	r3,118(sp)
 400fe00:	003d1406 	br	400f254 <__alt_data_end+0xfc00f254>
 400fe04:	d8c02303 	ldbu	r3,140(sp)
 400fe08:	d8c01d85 	stb	r3,118(sp)
 400fe0c:	003cca06 	br	400f138 <__alt_data_end+0xfc00f138>
 400fe10:	8880004c 	andi	r2,r17,1
 400fe14:	002b883a 	mov	r21,zero
 400fe18:	10000526 	beq	r2,zero,400fe30 <___vfiprintf_internal_r+0x14b8>
 400fe1c:	00800c04 	movi	r2,48
 400fe20:	d88019c5 	stb	r2,103(sp)
 400fe24:	dd002817 	ldw	r20,160(sp)
 400fe28:	ddc019c4 	addi	r23,sp,103
 400fe2c:	003bd506 	br	400ed84 <__alt_data_end+0xfc00ed84>
 400fe30:	0029883a 	mov	r20,zero
 400fe34:	ddc01a04 	addi	r23,sp,104
 400fe38:	003bd206 	br	400ed84 <__alt_data_end+0xfc00ed84>
 400fe3c:	d9002303 	ldbu	r4,140(sp)
 400fe40:	d9001d85 	stb	r4,118(sp)
 400fe44:	003da606 	br	400f4e0 <__alt_data_end+0xfc00f4e0>
 400fe48:	d8c02303 	ldbu	r3,140(sp)
 400fe4c:	d8c01d85 	stb	r3,118(sp)
 400fe50:	003c7606 	br	400f02c <__alt_data_end+0xfc00f02c>
 400fe54:	d8c02303 	ldbu	r3,140(sp)
 400fe58:	d8c01d85 	stb	r3,118(sp)
 400fe5c:	003c6506 	br	400eff4 <__alt_data_end+0xfc00eff4>
 400fe60:	d9002303 	ldbu	r4,140(sp)
 400fe64:	d9001d85 	stb	r4,118(sp)
 400fe68:	003d3d06 	br	400f360 <__alt_data_end+0xfc00f360>
 400fe6c:	d8c02303 	ldbu	r3,140(sp)
 400fe70:	d8c01d85 	stb	r3,118(sp)
 400fe74:	003d1d06 	br	400f2ec <__alt_data_end+0xfc00f2ec>
 400fe78:	d8c02303 	ldbu	r3,140(sp)
 400fe7c:	d8c01d85 	stb	r3,118(sp)
 400fe80:	003d0306 	br	400f290 <__alt_data_end+0xfc00f290>

0400fe84 <__vfiprintf_internal>:
 400fe84:	008100b4 	movhi	r2,1026
 400fe88:	10a2f104 	addi	r2,r2,-29756
 400fe8c:	300f883a 	mov	r7,r6
 400fe90:	280d883a 	mov	r6,r5
 400fe94:	200b883a 	mov	r5,r4
 400fe98:	11000017 	ldw	r4,0(r2)
 400fe9c:	400e9781 	jmpi	400e978 <___vfiprintf_internal_r>

0400fea0 <__sbprintf>:
 400fea0:	2880030b 	ldhu	r2,12(r5)
 400fea4:	2ac01917 	ldw	r11,100(r5)
 400fea8:	2a80038b 	ldhu	r10,14(r5)
 400feac:	2a400717 	ldw	r9,28(r5)
 400feb0:	2a000917 	ldw	r8,36(r5)
 400feb4:	defee204 	addi	sp,sp,-1144
 400feb8:	00c10004 	movi	r3,1024
 400febc:	dc011a15 	stw	r16,1128(sp)
 400fec0:	10bfff4c 	andi	r2,r2,65533
 400fec4:	2821883a 	mov	r16,r5
 400fec8:	d8cb883a 	add	r5,sp,r3
 400fecc:	dc811c15 	stw	r18,1136(sp)
 400fed0:	dc411b15 	stw	r17,1132(sp)
 400fed4:	dfc11d15 	stw	ra,1140(sp)
 400fed8:	2025883a 	mov	r18,r4
 400fedc:	d881030d 	sth	r2,1036(sp)
 400fee0:	dac11915 	stw	r11,1124(sp)
 400fee4:	da81038d 	sth	r10,1038(sp)
 400fee8:	da410715 	stw	r9,1052(sp)
 400feec:	da010915 	stw	r8,1060(sp)
 400fef0:	dec10015 	stw	sp,1024(sp)
 400fef4:	dec10415 	stw	sp,1040(sp)
 400fef8:	d8c10215 	stw	r3,1032(sp)
 400fefc:	d8c10515 	stw	r3,1044(sp)
 400ff00:	d8010615 	stw	zero,1048(sp)
 400ff04:	400e9780 	call	400e978 <___vfiprintf_internal_r>
 400ff08:	1023883a 	mov	r17,r2
 400ff0c:	10000416 	blt	r2,zero,400ff20 <__sbprintf+0x80>
 400ff10:	d9410004 	addi	r5,sp,1024
 400ff14:	9009883a 	mov	r4,r18
 400ff18:	400b0b80 	call	400b0b8 <_fflush_r>
 400ff1c:	10000d1e 	bne	r2,zero,400ff54 <__sbprintf+0xb4>
 400ff20:	d881030b 	ldhu	r2,1036(sp)
 400ff24:	1080100c 	andi	r2,r2,64
 400ff28:	10000326 	beq	r2,zero,400ff38 <__sbprintf+0x98>
 400ff2c:	8080030b 	ldhu	r2,12(r16)
 400ff30:	10801014 	ori	r2,r2,64
 400ff34:	8080030d 	sth	r2,12(r16)
 400ff38:	8805883a 	mov	r2,r17
 400ff3c:	dfc11d17 	ldw	ra,1140(sp)
 400ff40:	dc811c17 	ldw	r18,1136(sp)
 400ff44:	dc411b17 	ldw	r17,1132(sp)
 400ff48:	dc011a17 	ldw	r16,1128(sp)
 400ff4c:	dec11e04 	addi	sp,sp,1144
 400ff50:	f800283a 	ret
 400ff54:	047fffc4 	movi	r17,-1
 400ff58:	003ff106 	br	400ff20 <__alt_data_end+0xfc00ff20>

0400ff5c <__swbuf_r>:
 400ff5c:	defffb04 	addi	sp,sp,-20
 400ff60:	dcc00315 	stw	r19,12(sp)
 400ff64:	dc800215 	stw	r18,8(sp)
 400ff68:	dc000015 	stw	r16,0(sp)
 400ff6c:	dfc00415 	stw	ra,16(sp)
 400ff70:	dc400115 	stw	r17,4(sp)
 400ff74:	2025883a 	mov	r18,r4
 400ff78:	2827883a 	mov	r19,r5
 400ff7c:	3021883a 	mov	r16,r6
 400ff80:	20000226 	beq	r4,zero,400ff8c <__swbuf_r+0x30>
 400ff84:	20800e17 	ldw	r2,56(r4)
 400ff88:	10004226 	beq	r2,zero,4010094 <__swbuf_r+0x138>
 400ff8c:	80800617 	ldw	r2,24(r16)
 400ff90:	8100030b 	ldhu	r4,12(r16)
 400ff94:	80800215 	stw	r2,8(r16)
 400ff98:	2080020c 	andi	r2,r4,8
 400ff9c:	10003626 	beq	r2,zero,4010078 <__swbuf_r+0x11c>
 400ffa0:	80c00417 	ldw	r3,16(r16)
 400ffa4:	18003426 	beq	r3,zero,4010078 <__swbuf_r+0x11c>
 400ffa8:	2088000c 	andi	r2,r4,8192
 400ffac:	9c403fcc 	andi	r17,r19,255
 400ffb0:	10001a26 	beq	r2,zero,401001c <__swbuf_r+0xc0>
 400ffb4:	80800017 	ldw	r2,0(r16)
 400ffb8:	81000517 	ldw	r4,20(r16)
 400ffbc:	10c7c83a 	sub	r3,r2,r3
 400ffc0:	1900200e 	bge	r3,r4,4010044 <__swbuf_r+0xe8>
 400ffc4:	18c00044 	addi	r3,r3,1
 400ffc8:	81000217 	ldw	r4,8(r16)
 400ffcc:	11400044 	addi	r5,r2,1
 400ffd0:	81400015 	stw	r5,0(r16)
 400ffd4:	213fffc4 	addi	r4,r4,-1
 400ffd8:	81000215 	stw	r4,8(r16)
 400ffdc:	14c00005 	stb	r19,0(r2)
 400ffe0:	80800517 	ldw	r2,20(r16)
 400ffe4:	10c01e26 	beq	r2,r3,4010060 <__swbuf_r+0x104>
 400ffe8:	8080030b 	ldhu	r2,12(r16)
 400ffec:	1080004c 	andi	r2,r2,1
 400fff0:	10000226 	beq	r2,zero,400fffc <__swbuf_r+0xa0>
 400fff4:	00800284 	movi	r2,10
 400fff8:	88801926 	beq	r17,r2,4010060 <__swbuf_r+0x104>
 400fffc:	8805883a 	mov	r2,r17
 4010000:	dfc00417 	ldw	ra,16(sp)
 4010004:	dcc00317 	ldw	r19,12(sp)
 4010008:	dc800217 	ldw	r18,8(sp)
 401000c:	dc400117 	ldw	r17,4(sp)
 4010010:	dc000017 	ldw	r16,0(sp)
 4010014:	dec00504 	addi	sp,sp,20
 4010018:	f800283a 	ret
 401001c:	81401917 	ldw	r5,100(r16)
 4010020:	00b7ffc4 	movi	r2,-8193
 4010024:	21080014 	ori	r4,r4,8192
 4010028:	2884703a 	and	r2,r5,r2
 401002c:	80801915 	stw	r2,100(r16)
 4010030:	80800017 	ldw	r2,0(r16)
 4010034:	8100030d 	sth	r4,12(r16)
 4010038:	81000517 	ldw	r4,20(r16)
 401003c:	10c7c83a 	sub	r3,r2,r3
 4010040:	193fe016 	blt	r3,r4,400ffc4 <__alt_data_end+0xfc00ffc4>
 4010044:	800b883a 	mov	r5,r16
 4010048:	9009883a 	mov	r4,r18
 401004c:	400b0b80 	call	400b0b8 <_fflush_r>
 4010050:	1000071e 	bne	r2,zero,4010070 <__swbuf_r+0x114>
 4010054:	80800017 	ldw	r2,0(r16)
 4010058:	00c00044 	movi	r3,1
 401005c:	003fda06 	br	400ffc8 <__alt_data_end+0xfc00ffc8>
 4010060:	800b883a 	mov	r5,r16
 4010064:	9009883a 	mov	r4,r18
 4010068:	400b0b80 	call	400b0b8 <_fflush_r>
 401006c:	103fe326 	beq	r2,zero,400fffc <__alt_data_end+0xfc00fffc>
 4010070:	00bfffc4 	movi	r2,-1
 4010074:	003fe206 	br	4010000 <__alt_data_end+0xfc010000>
 4010078:	800b883a 	mov	r5,r16
 401007c:	9009883a 	mov	r4,r18
 4010080:	40094980 	call	4009498 <__swsetup_r>
 4010084:	103ffa1e 	bne	r2,zero,4010070 <__alt_data_end+0xfc010070>
 4010088:	8100030b 	ldhu	r4,12(r16)
 401008c:	80c00417 	ldw	r3,16(r16)
 4010090:	003fc506 	br	400ffa8 <__alt_data_end+0xfc00ffa8>
 4010094:	400b4a40 	call	400b4a4 <__sinit>
 4010098:	003fbc06 	br	400ff8c <__alt_data_end+0xfc00ff8c>

0401009c <__swbuf>:
 401009c:	008100b4 	movhi	r2,1026
 40100a0:	10a2f104 	addi	r2,r2,-29756
 40100a4:	280d883a 	mov	r6,r5
 40100a8:	200b883a 	mov	r5,r4
 40100ac:	11000017 	ldw	r4,0(r2)
 40100b0:	400ff5c1 	jmpi	400ff5c <__swbuf_r>

040100b4 <_write_r>:
 40100b4:	defffd04 	addi	sp,sp,-12
 40100b8:	2805883a 	mov	r2,r5
 40100bc:	dc000015 	stw	r16,0(sp)
 40100c0:	040100b4 	movhi	r16,1026
 40100c4:	dc400115 	stw	r17,4(sp)
 40100c8:	300b883a 	mov	r5,r6
 40100cc:	8429e104 	addi	r16,r16,-22652
 40100d0:	2023883a 	mov	r17,r4
 40100d4:	380d883a 	mov	r6,r7
 40100d8:	1009883a 	mov	r4,r2
 40100dc:	dfc00215 	stw	ra,8(sp)
 40100e0:	80000015 	stw	zero,0(r16)
 40100e4:	4014a740 	call	4014a74 <write>
 40100e8:	00ffffc4 	movi	r3,-1
 40100ec:	10c00526 	beq	r2,r3,4010104 <_write_r+0x50>
 40100f0:	dfc00217 	ldw	ra,8(sp)
 40100f4:	dc400117 	ldw	r17,4(sp)
 40100f8:	dc000017 	ldw	r16,0(sp)
 40100fc:	dec00304 	addi	sp,sp,12
 4010100:	f800283a 	ret
 4010104:	80c00017 	ldw	r3,0(r16)
 4010108:	183ff926 	beq	r3,zero,40100f0 <__alt_data_end+0xfc0100f0>
 401010c:	88c00015 	stw	r3,0(r17)
 4010110:	003ff706 	br	40100f0 <__alt_data_end+0xfc0100f0>

04010114 <_close_r>:
 4010114:	defffd04 	addi	sp,sp,-12
 4010118:	dc000015 	stw	r16,0(sp)
 401011c:	040100b4 	movhi	r16,1026
 4010120:	dc400115 	stw	r17,4(sp)
 4010124:	8429e104 	addi	r16,r16,-22652
 4010128:	2023883a 	mov	r17,r4
 401012c:	2809883a 	mov	r4,r5
 4010130:	dfc00215 	stw	ra,8(sp)
 4010134:	80000015 	stw	zero,0(r16)
 4010138:	4013e540 	call	4013e54 <close>
 401013c:	00ffffc4 	movi	r3,-1
 4010140:	10c00526 	beq	r2,r3,4010158 <_close_r+0x44>
 4010144:	dfc00217 	ldw	ra,8(sp)
 4010148:	dc400117 	ldw	r17,4(sp)
 401014c:	dc000017 	ldw	r16,0(sp)
 4010150:	dec00304 	addi	sp,sp,12
 4010154:	f800283a 	ret
 4010158:	80c00017 	ldw	r3,0(r16)
 401015c:	183ff926 	beq	r3,zero,4010144 <__alt_data_end+0xfc010144>
 4010160:	88c00015 	stw	r3,0(r17)
 4010164:	003ff706 	br	4010144 <__alt_data_end+0xfc010144>

04010168 <_calloc_r>:
 4010168:	defffe04 	addi	sp,sp,-8
 401016c:	2805883a 	mov	r2,r5
 4010170:	dc000015 	stw	r16,0(sp)
 4010174:	300b883a 	mov	r5,r6
 4010178:	2021883a 	mov	r16,r4
 401017c:	1009883a 	mov	r4,r2
 4010180:	dfc00115 	stw	ra,4(sp)
 4010184:	4006cd00 	call	4006cd0 <__mulsi3>
 4010188:	100b883a 	mov	r5,r2
 401018c:	8009883a 	mov	r4,r16
 4010190:	400c26c0 	call	400c26c <_malloc_r>
 4010194:	10002926 	beq	r2,zero,401023c <_calloc_r+0xd4>
 4010198:	11bfff17 	ldw	r6,-4(r2)
 401019c:	1021883a 	mov	r16,r2
 40101a0:	00bfff04 	movi	r2,-4
 40101a4:	308c703a 	and	r6,r6,r2
 40101a8:	00c00904 	movi	r3,36
 40101ac:	308d883a 	add	r6,r6,r2
 40101b0:	19801636 	bltu	r3,r6,401020c <_calloc_r+0xa4>
 40101b4:	008004c4 	movi	r2,19
 40101b8:	11800b2e 	bgeu	r2,r6,40101e8 <_calloc_r+0x80>
 40101bc:	80000015 	stw	zero,0(r16)
 40101c0:	80000115 	stw	zero,4(r16)
 40101c4:	008006c4 	movi	r2,27
 40101c8:	11801a2e 	bgeu	r2,r6,4010234 <_calloc_r+0xcc>
 40101cc:	80000215 	stw	zero,8(r16)
 40101d0:	80000315 	stw	zero,12(r16)
 40101d4:	30c0151e 	bne	r6,r3,401022c <_calloc_r+0xc4>
 40101d8:	80000415 	stw	zero,16(r16)
 40101dc:	80800604 	addi	r2,r16,24
 40101e0:	80000515 	stw	zero,20(r16)
 40101e4:	00000106 	br	40101ec <_calloc_r+0x84>
 40101e8:	8005883a 	mov	r2,r16
 40101ec:	10000015 	stw	zero,0(r2)
 40101f0:	10000115 	stw	zero,4(r2)
 40101f4:	10000215 	stw	zero,8(r2)
 40101f8:	8005883a 	mov	r2,r16
 40101fc:	dfc00117 	ldw	ra,4(sp)
 4010200:	dc000017 	ldw	r16,0(sp)
 4010204:	dec00204 	addi	sp,sp,8
 4010208:	f800283a 	ret
 401020c:	000b883a 	mov	r5,zero
 4010210:	8009883a 	mov	r4,r16
 4010214:	4006cf80 	call	4006cf8 <memset>
 4010218:	8005883a 	mov	r2,r16
 401021c:	dfc00117 	ldw	ra,4(sp)
 4010220:	dc000017 	ldw	r16,0(sp)
 4010224:	dec00204 	addi	sp,sp,8
 4010228:	f800283a 	ret
 401022c:	80800404 	addi	r2,r16,16
 4010230:	003fee06 	br	40101ec <__alt_data_end+0xfc0101ec>
 4010234:	80800204 	addi	r2,r16,8
 4010238:	003fec06 	br	40101ec <__alt_data_end+0xfc0101ec>
 401023c:	0005883a 	mov	r2,zero
 4010240:	003fee06 	br	40101fc <__alt_data_end+0xfc0101fc>

04010244 <_fclose_r>:
 4010244:	28003926 	beq	r5,zero,401032c <_fclose_r+0xe8>
 4010248:	defffc04 	addi	sp,sp,-16
 401024c:	dc400115 	stw	r17,4(sp)
 4010250:	dc000015 	stw	r16,0(sp)
 4010254:	dfc00315 	stw	ra,12(sp)
 4010258:	dc800215 	stw	r18,8(sp)
 401025c:	2023883a 	mov	r17,r4
 4010260:	2821883a 	mov	r16,r5
 4010264:	20000226 	beq	r4,zero,4010270 <_fclose_r+0x2c>
 4010268:	20800e17 	ldw	r2,56(r4)
 401026c:	10002726 	beq	r2,zero,401030c <_fclose_r+0xc8>
 4010270:	8080030f 	ldh	r2,12(r16)
 4010274:	1000071e 	bne	r2,zero,4010294 <_fclose_r+0x50>
 4010278:	0005883a 	mov	r2,zero
 401027c:	dfc00317 	ldw	ra,12(sp)
 4010280:	dc800217 	ldw	r18,8(sp)
 4010284:	dc400117 	ldw	r17,4(sp)
 4010288:	dc000017 	ldw	r16,0(sp)
 401028c:	dec00404 	addi	sp,sp,16
 4010290:	f800283a 	ret
 4010294:	800b883a 	mov	r5,r16
 4010298:	8809883a 	mov	r4,r17
 401029c:	400ae9c0 	call	400ae9c <__sflush_r>
 40102a0:	1025883a 	mov	r18,r2
 40102a4:	80800b17 	ldw	r2,44(r16)
 40102a8:	10000426 	beq	r2,zero,40102bc <_fclose_r+0x78>
 40102ac:	81400717 	ldw	r5,28(r16)
 40102b0:	8809883a 	mov	r4,r17
 40102b4:	103ee83a 	callr	r2
 40102b8:	10001616 	blt	r2,zero,4010314 <_fclose_r+0xd0>
 40102bc:	8080030b 	ldhu	r2,12(r16)
 40102c0:	1080200c 	andi	r2,r2,128
 40102c4:	1000151e 	bne	r2,zero,401031c <_fclose_r+0xd8>
 40102c8:	81400c17 	ldw	r5,48(r16)
 40102cc:	28000526 	beq	r5,zero,40102e4 <_fclose_r+0xa0>
 40102d0:	80801004 	addi	r2,r16,64
 40102d4:	28800226 	beq	r5,r2,40102e0 <_fclose_r+0x9c>
 40102d8:	8809883a 	mov	r4,r17
 40102dc:	400b6180 	call	400b618 <_free_r>
 40102e0:	80000c15 	stw	zero,48(r16)
 40102e4:	81401117 	ldw	r5,68(r16)
 40102e8:	28000326 	beq	r5,zero,40102f8 <_fclose_r+0xb4>
 40102ec:	8809883a 	mov	r4,r17
 40102f0:	400b6180 	call	400b618 <_free_r>
 40102f4:	80001115 	stw	zero,68(r16)
 40102f8:	400b4b40 	call	400b4b4 <__sfp_lock_acquire>
 40102fc:	8000030d 	sth	zero,12(r16)
 4010300:	400b4b80 	call	400b4b8 <__sfp_lock_release>
 4010304:	9005883a 	mov	r2,r18
 4010308:	003fdc06 	br	401027c <__alt_data_end+0xfc01027c>
 401030c:	400b4a40 	call	400b4a4 <__sinit>
 4010310:	003fd706 	br	4010270 <__alt_data_end+0xfc010270>
 4010314:	04bfffc4 	movi	r18,-1
 4010318:	003fe806 	br	40102bc <__alt_data_end+0xfc0102bc>
 401031c:	81400417 	ldw	r5,16(r16)
 4010320:	8809883a 	mov	r4,r17
 4010324:	400b6180 	call	400b618 <_free_r>
 4010328:	003fe706 	br	40102c8 <__alt_data_end+0xfc0102c8>
 401032c:	0005883a 	mov	r2,zero
 4010330:	f800283a 	ret

04010334 <fclose>:
 4010334:	008100b4 	movhi	r2,1026
 4010338:	10a2f104 	addi	r2,r2,-29756
 401033c:	200b883a 	mov	r5,r4
 4010340:	11000017 	ldw	r4,0(r2)
 4010344:	40102441 	jmpi	4010244 <_fclose_r>

04010348 <__fputwc>:
 4010348:	defff804 	addi	sp,sp,-32
 401034c:	dcc00415 	stw	r19,16(sp)
 4010350:	dc800315 	stw	r18,12(sp)
 4010354:	dc000115 	stw	r16,4(sp)
 4010358:	dfc00715 	stw	ra,28(sp)
 401035c:	dd400615 	stw	r21,24(sp)
 4010360:	dd000515 	stw	r20,20(sp)
 4010364:	dc400215 	stw	r17,8(sp)
 4010368:	2027883a 	mov	r19,r4
 401036c:	2825883a 	mov	r18,r5
 4010370:	3021883a 	mov	r16,r6
 4010374:	400c05c0 	call	400c05c <__locale_mb_cur_max>
 4010378:	00c00044 	movi	r3,1
 401037c:	10c03e26 	beq	r2,r3,4010478 <__fputwc+0x130>
 4010380:	81c01704 	addi	r7,r16,92
 4010384:	900d883a 	mov	r6,r18
 4010388:	d80b883a 	mov	r5,sp
 401038c:	9809883a 	mov	r4,r19
 4010390:	40106c00 	call	40106c0 <_wcrtomb_r>
 4010394:	1029883a 	mov	r20,r2
 4010398:	00bfffc4 	movi	r2,-1
 401039c:	a0802026 	beq	r20,r2,4010420 <__fputwc+0xd8>
 40103a0:	d9400003 	ldbu	r5,0(sp)
 40103a4:	a0001c26 	beq	r20,zero,4010418 <__fputwc+0xd0>
 40103a8:	0023883a 	mov	r17,zero
 40103ac:	05400284 	movi	r21,10
 40103b0:	00000906 	br	40103d8 <__fputwc+0x90>
 40103b4:	80800017 	ldw	r2,0(r16)
 40103b8:	11400005 	stb	r5,0(r2)
 40103bc:	80c00017 	ldw	r3,0(r16)
 40103c0:	18c00044 	addi	r3,r3,1
 40103c4:	80c00015 	stw	r3,0(r16)
 40103c8:	8c400044 	addi	r17,r17,1
 40103cc:	dc45883a 	add	r2,sp,r17
 40103d0:	8d00112e 	bgeu	r17,r20,4010418 <__fputwc+0xd0>
 40103d4:	11400003 	ldbu	r5,0(r2)
 40103d8:	80c00217 	ldw	r3,8(r16)
 40103dc:	18ffffc4 	addi	r3,r3,-1
 40103e0:	80c00215 	stw	r3,8(r16)
 40103e4:	183ff30e 	bge	r3,zero,40103b4 <__alt_data_end+0xfc0103b4>
 40103e8:	80800617 	ldw	r2,24(r16)
 40103ec:	18801916 	blt	r3,r2,4010454 <__fputwc+0x10c>
 40103f0:	80800017 	ldw	r2,0(r16)
 40103f4:	11400005 	stb	r5,0(r2)
 40103f8:	80800017 	ldw	r2,0(r16)
 40103fc:	10c00003 	ldbu	r3,0(r2)
 4010400:	10800044 	addi	r2,r2,1
 4010404:	1d402326 	beq	r3,r21,4010494 <__fputwc+0x14c>
 4010408:	80800015 	stw	r2,0(r16)
 401040c:	8c400044 	addi	r17,r17,1
 4010410:	dc45883a 	add	r2,sp,r17
 4010414:	8d3fef36 	bltu	r17,r20,40103d4 <__alt_data_end+0xfc0103d4>
 4010418:	9005883a 	mov	r2,r18
 401041c:	00000406 	br	4010430 <__fputwc+0xe8>
 4010420:	80c0030b 	ldhu	r3,12(r16)
 4010424:	a005883a 	mov	r2,r20
 4010428:	18c01014 	ori	r3,r3,64
 401042c:	80c0030d 	sth	r3,12(r16)
 4010430:	dfc00717 	ldw	ra,28(sp)
 4010434:	dd400617 	ldw	r21,24(sp)
 4010438:	dd000517 	ldw	r20,20(sp)
 401043c:	dcc00417 	ldw	r19,16(sp)
 4010440:	dc800317 	ldw	r18,12(sp)
 4010444:	dc400217 	ldw	r17,8(sp)
 4010448:	dc000117 	ldw	r16,4(sp)
 401044c:	dec00804 	addi	sp,sp,32
 4010450:	f800283a 	ret
 4010454:	800d883a 	mov	r6,r16
 4010458:	29403fcc 	andi	r5,r5,255
 401045c:	9809883a 	mov	r4,r19
 4010460:	400ff5c0 	call	400ff5c <__swbuf_r>
 4010464:	10bfffe0 	cmpeqi	r2,r2,-1
 4010468:	10803fcc 	andi	r2,r2,255
 401046c:	103fd626 	beq	r2,zero,40103c8 <__alt_data_end+0xfc0103c8>
 4010470:	00bfffc4 	movi	r2,-1
 4010474:	003fee06 	br	4010430 <__alt_data_end+0xfc010430>
 4010478:	90ffffc4 	addi	r3,r18,-1
 401047c:	01003f84 	movi	r4,254
 4010480:	20ffbf36 	bltu	r4,r3,4010380 <__alt_data_end+0xfc010380>
 4010484:	900b883a 	mov	r5,r18
 4010488:	dc800005 	stb	r18,0(sp)
 401048c:	1029883a 	mov	r20,r2
 4010490:	003fc506 	br	40103a8 <__alt_data_end+0xfc0103a8>
 4010494:	800d883a 	mov	r6,r16
 4010498:	a80b883a 	mov	r5,r21
 401049c:	9809883a 	mov	r4,r19
 40104a0:	400ff5c0 	call	400ff5c <__swbuf_r>
 40104a4:	10bfffe0 	cmpeqi	r2,r2,-1
 40104a8:	003fef06 	br	4010468 <__alt_data_end+0xfc010468>

040104ac <_fputwc_r>:
 40104ac:	3080030b 	ldhu	r2,12(r6)
 40104b0:	10c8000c 	andi	r3,r2,8192
 40104b4:	1800051e 	bne	r3,zero,40104cc <_fputwc_r+0x20>
 40104b8:	30c01917 	ldw	r3,100(r6)
 40104bc:	10880014 	ori	r2,r2,8192
 40104c0:	3080030d 	sth	r2,12(r6)
 40104c4:	18880014 	ori	r2,r3,8192
 40104c8:	30801915 	stw	r2,100(r6)
 40104cc:	40103481 	jmpi	4010348 <__fputwc>

040104d0 <fputwc>:
 40104d0:	008100b4 	movhi	r2,1026
 40104d4:	defffc04 	addi	sp,sp,-16
 40104d8:	10a2f104 	addi	r2,r2,-29756
 40104dc:	dc000115 	stw	r16,4(sp)
 40104e0:	14000017 	ldw	r16,0(r2)
 40104e4:	dc400215 	stw	r17,8(sp)
 40104e8:	dfc00315 	stw	ra,12(sp)
 40104ec:	2023883a 	mov	r17,r4
 40104f0:	80000226 	beq	r16,zero,40104fc <fputwc+0x2c>
 40104f4:	80800e17 	ldw	r2,56(r16)
 40104f8:	10001026 	beq	r2,zero,401053c <fputwc+0x6c>
 40104fc:	2880030b 	ldhu	r2,12(r5)
 4010500:	10c8000c 	andi	r3,r2,8192
 4010504:	1800051e 	bne	r3,zero,401051c <fputwc+0x4c>
 4010508:	28c01917 	ldw	r3,100(r5)
 401050c:	10880014 	ori	r2,r2,8192
 4010510:	2880030d 	sth	r2,12(r5)
 4010514:	18880014 	ori	r2,r3,8192
 4010518:	28801915 	stw	r2,100(r5)
 401051c:	280d883a 	mov	r6,r5
 4010520:	8009883a 	mov	r4,r16
 4010524:	880b883a 	mov	r5,r17
 4010528:	dfc00317 	ldw	ra,12(sp)
 401052c:	dc400217 	ldw	r17,8(sp)
 4010530:	dc000117 	ldw	r16,4(sp)
 4010534:	dec00404 	addi	sp,sp,16
 4010538:	40103481 	jmpi	4010348 <__fputwc>
 401053c:	8009883a 	mov	r4,r16
 4010540:	d9400015 	stw	r5,0(sp)
 4010544:	400b4a40 	call	400b4a4 <__sinit>
 4010548:	d9400017 	ldw	r5,0(sp)
 401054c:	003feb06 	br	40104fc <__alt_data_end+0xfc0104fc>

04010550 <_fstat_r>:
 4010550:	defffd04 	addi	sp,sp,-12
 4010554:	2805883a 	mov	r2,r5
 4010558:	dc000015 	stw	r16,0(sp)
 401055c:	040100b4 	movhi	r16,1026
 4010560:	dc400115 	stw	r17,4(sp)
 4010564:	8429e104 	addi	r16,r16,-22652
 4010568:	2023883a 	mov	r17,r4
 401056c:	300b883a 	mov	r5,r6
 4010570:	1009883a 	mov	r4,r2
 4010574:	dfc00215 	stw	ra,8(sp)
 4010578:	80000015 	stw	zero,0(r16)
 401057c:	4013f940 	call	4013f94 <fstat>
 4010580:	00ffffc4 	movi	r3,-1
 4010584:	10c00526 	beq	r2,r3,401059c <_fstat_r+0x4c>
 4010588:	dfc00217 	ldw	ra,8(sp)
 401058c:	dc400117 	ldw	r17,4(sp)
 4010590:	dc000017 	ldw	r16,0(sp)
 4010594:	dec00304 	addi	sp,sp,12
 4010598:	f800283a 	ret
 401059c:	80c00017 	ldw	r3,0(r16)
 40105a0:	183ff926 	beq	r3,zero,4010588 <__alt_data_end+0xfc010588>
 40105a4:	88c00015 	stw	r3,0(r17)
 40105a8:	003ff706 	br	4010588 <__alt_data_end+0xfc010588>

040105ac <_isatty_r>:
 40105ac:	defffd04 	addi	sp,sp,-12
 40105b0:	dc000015 	stw	r16,0(sp)
 40105b4:	040100b4 	movhi	r16,1026
 40105b8:	dc400115 	stw	r17,4(sp)
 40105bc:	8429e104 	addi	r16,r16,-22652
 40105c0:	2023883a 	mov	r17,r4
 40105c4:	2809883a 	mov	r4,r5
 40105c8:	dfc00215 	stw	ra,8(sp)
 40105cc:	80000015 	stw	zero,0(r16)
 40105d0:	401427c0 	call	401427c <isatty>
 40105d4:	00ffffc4 	movi	r3,-1
 40105d8:	10c00526 	beq	r2,r3,40105f0 <_isatty_r+0x44>
 40105dc:	dfc00217 	ldw	ra,8(sp)
 40105e0:	dc400117 	ldw	r17,4(sp)
 40105e4:	dc000017 	ldw	r16,0(sp)
 40105e8:	dec00304 	addi	sp,sp,12
 40105ec:	f800283a 	ret
 40105f0:	80c00017 	ldw	r3,0(r16)
 40105f4:	183ff926 	beq	r3,zero,40105dc <__alt_data_end+0xfc0105dc>
 40105f8:	88c00015 	stw	r3,0(r17)
 40105fc:	003ff706 	br	40105dc <__alt_data_end+0xfc0105dc>

04010600 <_lseek_r>:
 4010600:	defffd04 	addi	sp,sp,-12
 4010604:	2805883a 	mov	r2,r5
 4010608:	dc000015 	stw	r16,0(sp)
 401060c:	040100b4 	movhi	r16,1026
 4010610:	dc400115 	stw	r17,4(sp)
 4010614:	300b883a 	mov	r5,r6
 4010618:	8429e104 	addi	r16,r16,-22652
 401061c:	2023883a 	mov	r17,r4
 4010620:	380d883a 	mov	r6,r7
 4010624:	1009883a 	mov	r4,r2
 4010628:	dfc00215 	stw	ra,8(sp)
 401062c:	80000015 	stw	zero,0(r16)
 4010630:	40144500 	call	4014450 <lseek>
 4010634:	00ffffc4 	movi	r3,-1
 4010638:	10c00526 	beq	r2,r3,4010650 <_lseek_r+0x50>
 401063c:	dfc00217 	ldw	ra,8(sp)
 4010640:	dc400117 	ldw	r17,4(sp)
 4010644:	dc000017 	ldw	r16,0(sp)
 4010648:	dec00304 	addi	sp,sp,12
 401064c:	f800283a 	ret
 4010650:	80c00017 	ldw	r3,0(r16)
 4010654:	183ff926 	beq	r3,zero,401063c <__alt_data_end+0xfc01063c>
 4010658:	88c00015 	stw	r3,0(r17)
 401065c:	003ff706 	br	401063c <__alt_data_end+0xfc01063c>

04010660 <_read_r>:
 4010660:	defffd04 	addi	sp,sp,-12
 4010664:	2805883a 	mov	r2,r5
 4010668:	dc000015 	stw	r16,0(sp)
 401066c:	040100b4 	movhi	r16,1026
 4010670:	dc400115 	stw	r17,4(sp)
 4010674:	300b883a 	mov	r5,r6
 4010678:	8429e104 	addi	r16,r16,-22652
 401067c:	2023883a 	mov	r17,r4
 4010680:	380d883a 	mov	r6,r7
 4010684:	1009883a 	mov	r4,r2
 4010688:	dfc00215 	stw	ra,8(sp)
 401068c:	80000015 	stw	zero,0(r16)
 4010690:	401462c0 	call	401462c <read>
 4010694:	00ffffc4 	movi	r3,-1
 4010698:	10c00526 	beq	r2,r3,40106b0 <_read_r+0x50>
 401069c:	dfc00217 	ldw	ra,8(sp)
 40106a0:	dc400117 	ldw	r17,4(sp)
 40106a4:	dc000017 	ldw	r16,0(sp)
 40106a8:	dec00304 	addi	sp,sp,12
 40106ac:	f800283a 	ret
 40106b0:	80c00017 	ldw	r3,0(r16)
 40106b4:	183ff926 	beq	r3,zero,401069c <__alt_data_end+0xfc01069c>
 40106b8:	88c00015 	stw	r3,0(r17)
 40106bc:	003ff706 	br	401069c <__alt_data_end+0xfc01069c>

040106c0 <_wcrtomb_r>:
 40106c0:	defff604 	addi	sp,sp,-40
 40106c4:	008100b4 	movhi	r2,1026
 40106c8:	dc800815 	stw	r18,32(sp)
 40106cc:	dc400715 	stw	r17,28(sp)
 40106d0:	dc000615 	stw	r16,24(sp)
 40106d4:	10a2f504 	addi	r2,r2,-29740
 40106d8:	dfc00915 	stw	ra,36(sp)
 40106dc:	2021883a 	mov	r16,r4
 40106e0:	3823883a 	mov	r17,r7
 40106e4:	14800017 	ldw	r18,0(r2)
 40106e8:	28001426 	beq	r5,zero,401073c <_wcrtomb_r+0x7c>
 40106ec:	d9400415 	stw	r5,16(sp)
 40106f0:	d9800515 	stw	r6,20(sp)
 40106f4:	400c0500 	call	400c050 <__locale_charset>
 40106f8:	d9800517 	ldw	r6,20(sp)
 40106fc:	d9400417 	ldw	r5,16(sp)
 4010700:	100f883a 	mov	r7,r2
 4010704:	dc400015 	stw	r17,0(sp)
 4010708:	8009883a 	mov	r4,r16
 401070c:	903ee83a 	callr	r18
 4010710:	00ffffc4 	movi	r3,-1
 4010714:	10c0031e 	bne	r2,r3,4010724 <_wcrtomb_r+0x64>
 4010718:	88000015 	stw	zero,0(r17)
 401071c:	00c02284 	movi	r3,138
 4010720:	80c00015 	stw	r3,0(r16)
 4010724:	dfc00917 	ldw	ra,36(sp)
 4010728:	dc800817 	ldw	r18,32(sp)
 401072c:	dc400717 	ldw	r17,28(sp)
 4010730:	dc000617 	ldw	r16,24(sp)
 4010734:	dec00a04 	addi	sp,sp,40
 4010738:	f800283a 	ret
 401073c:	400c0500 	call	400c050 <__locale_charset>
 4010740:	100f883a 	mov	r7,r2
 4010744:	dc400015 	stw	r17,0(sp)
 4010748:	000d883a 	mov	r6,zero
 401074c:	d9400104 	addi	r5,sp,4
 4010750:	8009883a 	mov	r4,r16
 4010754:	903ee83a 	callr	r18
 4010758:	003fed06 	br	4010710 <__alt_data_end+0xfc010710>

0401075c <wcrtomb>:
 401075c:	defff604 	addi	sp,sp,-40
 4010760:	008100b4 	movhi	r2,1026
 4010764:	dc800615 	stw	r18,24(sp)
 4010768:	dc400515 	stw	r17,20(sp)
 401076c:	10a2f104 	addi	r2,r2,-29756
 4010770:	dfc00915 	stw	ra,36(sp)
 4010774:	dd000815 	stw	r20,32(sp)
 4010778:	dcc00715 	stw	r19,28(sp)
 401077c:	dc000415 	stw	r16,16(sp)
 4010780:	3025883a 	mov	r18,r6
 4010784:	14400017 	ldw	r17,0(r2)
 4010788:	20001926 	beq	r4,zero,40107f0 <wcrtomb+0x94>
 401078c:	008100b4 	movhi	r2,1026
 4010790:	10a2f504 	addi	r2,r2,-29740
 4010794:	15000017 	ldw	r20,0(r2)
 4010798:	2021883a 	mov	r16,r4
 401079c:	2827883a 	mov	r19,r5
 40107a0:	400c0500 	call	400c050 <__locale_charset>
 40107a4:	100f883a 	mov	r7,r2
 40107a8:	dc800015 	stw	r18,0(sp)
 40107ac:	980d883a 	mov	r6,r19
 40107b0:	800b883a 	mov	r5,r16
 40107b4:	8809883a 	mov	r4,r17
 40107b8:	a03ee83a 	callr	r20
 40107bc:	00ffffc4 	movi	r3,-1
 40107c0:	10c0031e 	bne	r2,r3,40107d0 <wcrtomb+0x74>
 40107c4:	90000015 	stw	zero,0(r18)
 40107c8:	00c02284 	movi	r3,138
 40107cc:	88c00015 	stw	r3,0(r17)
 40107d0:	dfc00917 	ldw	ra,36(sp)
 40107d4:	dd000817 	ldw	r20,32(sp)
 40107d8:	dcc00717 	ldw	r19,28(sp)
 40107dc:	dc800617 	ldw	r18,24(sp)
 40107e0:	dc400517 	ldw	r17,20(sp)
 40107e4:	dc000417 	ldw	r16,16(sp)
 40107e8:	dec00a04 	addi	sp,sp,40
 40107ec:	f800283a 	ret
 40107f0:	008100b4 	movhi	r2,1026
 40107f4:	10a2f504 	addi	r2,r2,-29740
 40107f8:	14000017 	ldw	r16,0(r2)
 40107fc:	400c0500 	call	400c050 <__locale_charset>
 4010800:	100f883a 	mov	r7,r2
 4010804:	dc800015 	stw	r18,0(sp)
 4010808:	000d883a 	mov	r6,zero
 401080c:	d9400104 	addi	r5,sp,4
 4010810:	8809883a 	mov	r4,r17
 4010814:	803ee83a 	callr	r16
 4010818:	003fe806 	br	40107bc <__alt_data_end+0xfc0107bc>

0401081c <__ascii_wctomb>:
 401081c:	28000526 	beq	r5,zero,4010834 <__ascii_wctomb+0x18>
 4010820:	00803fc4 	movi	r2,255
 4010824:	11800536 	bltu	r2,r6,401083c <__ascii_wctomb+0x20>
 4010828:	29800005 	stb	r6,0(r5)
 401082c:	00800044 	movi	r2,1
 4010830:	f800283a 	ret
 4010834:	0005883a 	mov	r2,zero
 4010838:	f800283a 	ret
 401083c:	00802284 	movi	r2,138
 4010840:	20800015 	stw	r2,0(r4)
 4010844:	00bfffc4 	movi	r2,-1
 4010848:	f800283a 	ret

0401084c <_wctomb_r>:
 401084c:	008100b4 	movhi	r2,1026
 4010850:	defff904 	addi	sp,sp,-28
 4010854:	10a2f504 	addi	r2,r2,-29740
 4010858:	dfc00615 	stw	ra,24(sp)
 401085c:	dc400515 	stw	r17,20(sp)
 4010860:	dc000415 	stw	r16,16(sp)
 4010864:	3823883a 	mov	r17,r7
 4010868:	14000017 	ldw	r16,0(r2)
 401086c:	d9000115 	stw	r4,4(sp)
 4010870:	d9400215 	stw	r5,8(sp)
 4010874:	d9800315 	stw	r6,12(sp)
 4010878:	400c0500 	call	400c050 <__locale_charset>
 401087c:	d9800317 	ldw	r6,12(sp)
 4010880:	d9400217 	ldw	r5,8(sp)
 4010884:	d9000117 	ldw	r4,4(sp)
 4010888:	100f883a 	mov	r7,r2
 401088c:	dc400015 	stw	r17,0(sp)
 4010890:	803ee83a 	callr	r16
 4010894:	dfc00617 	ldw	ra,24(sp)
 4010898:	dc400517 	ldw	r17,20(sp)
 401089c:	dc000417 	ldw	r16,16(sp)
 40108a0:	dec00704 	addi	sp,sp,28
 40108a4:	f800283a 	ret

040108a8 <__muldi3>:
 40108a8:	defff604 	addi	sp,sp,-40
 40108ac:	dd800615 	stw	r22,24(sp)
 40108b0:	dd400515 	stw	r21,20(sp)
 40108b4:	dc400115 	stw	r17,4(sp)
 40108b8:	357fffcc 	andi	r21,r6,65535
 40108bc:	2022d43a 	srli	r17,r4,16
 40108c0:	25bfffcc 	andi	r22,r4,65535
 40108c4:	dcc00315 	stw	r19,12(sp)
 40108c8:	dc800215 	stw	r18,8(sp)
 40108cc:	2027883a 	mov	r19,r4
 40108d0:	2825883a 	mov	r18,r5
 40108d4:	b009883a 	mov	r4,r22
 40108d8:	a80b883a 	mov	r5,r21
 40108dc:	dfc00915 	stw	ra,36(sp)
 40108e0:	df000815 	stw	fp,32(sp)
 40108e4:	ddc00715 	stw	r23,28(sp)
 40108e8:	3839883a 	mov	fp,r7
 40108ec:	302ed43a 	srli	r23,r6,16
 40108f0:	dd000415 	stw	r20,16(sp)
 40108f4:	dc000015 	stw	r16,0(sp)
 40108f8:	3029883a 	mov	r20,r6
 40108fc:	4006cd00 	call	4006cd0 <__mulsi3>
 4010900:	a80b883a 	mov	r5,r21
 4010904:	8809883a 	mov	r4,r17
 4010908:	1021883a 	mov	r16,r2
 401090c:	4006cd00 	call	4006cd0 <__mulsi3>
 4010910:	8809883a 	mov	r4,r17
 4010914:	b80b883a 	mov	r5,r23
 4010918:	102b883a 	mov	r21,r2
 401091c:	4006cd00 	call	4006cd0 <__mulsi3>
 4010920:	b80b883a 	mov	r5,r23
 4010924:	b009883a 	mov	r4,r22
 4010928:	1023883a 	mov	r17,r2
 401092c:	4006cd00 	call	4006cd0 <__mulsi3>
 4010930:	8006d43a 	srli	r3,r16,16
 4010934:	1545883a 	add	r2,r2,r21
 4010938:	1885883a 	add	r2,r3,r2
 401093c:	1540022e 	bgeu	r2,r21,4010948 <__muldi3+0xa0>
 4010940:	00c00074 	movhi	r3,1
 4010944:	88e3883a 	add	r17,r17,r3
 4010948:	1006d43a 	srli	r3,r2,16
 401094c:	1004943a 	slli	r2,r2,16
 4010950:	e00b883a 	mov	r5,fp
 4010954:	9809883a 	mov	r4,r19
 4010958:	843fffcc 	andi	r16,r16,65535
 401095c:	1c63883a 	add	r17,r3,r17
 4010960:	1421883a 	add	r16,r2,r16
 4010964:	4006cd00 	call	4006cd0 <__mulsi3>
 4010968:	900b883a 	mov	r5,r18
 401096c:	a009883a 	mov	r4,r20
 4010970:	1027883a 	mov	r19,r2
 4010974:	4006cd00 	call	4006cd0 <__mulsi3>
 4010978:	9885883a 	add	r2,r19,r2
 401097c:	1447883a 	add	r3,r2,r17
 4010980:	8005883a 	mov	r2,r16
 4010984:	dfc00917 	ldw	ra,36(sp)
 4010988:	df000817 	ldw	fp,32(sp)
 401098c:	ddc00717 	ldw	r23,28(sp)
 4010990:	dd800617 	ldw	r22,24(sp)
 4010994:	dd400517 	ldw	r21,20(sp)
 4010998:	dd000417 	ldw	r20,16(sp)
 401099c:	dcc00317 	ldw	r19,12(sp)
 40109a0:	dc800217 	ldw	r18,8(sp)
 40109a4:	dc400117 	ldw	r17,4(sp)
 40109a8:	dc000017 	ldw	r16,0(sp)
 40109ac:	dec00a04 	addi	sp,sp,40
 40109b0:	f800283a 	ret

040109b4 <__udivdi3>:
 40109b4:	defff404 	addi	sp,sp,-48
 40109b8:	dcc00515 	stw	r19,20(sp)
 40109bc:	dc000215 	stw	r16,8(sp)
 40109c0:	dfc00b15 	stw	ra,44(sp)
 40109c4:	df000a15 	stw	fp,40(sp)
 40109c8:	ddc00915 	stw	r23,36(sp)
 40109cc:	dd800815 	stw	r22,32(sp)
 40109d0:	dd400715 	stw	r21,28(sp)
 40109d4:	dd000615 	stw	r20,24(sp)
 40109d8:	dc800415 	stw	r18,16(sp)
 40109dc:	dc400315 	stw	r17,12(sp)
 40109e0:	2027883a 	mov	r19,r4
 40109e4:	2821883a 	mov	r16,r5
 40109e8:	3800461e 	bne	r7,zero,4010b04 <__udivdi3+0x150>
 40109ec:	3023883a 	mov	r17,r6
 40109f0:	2025883a 	mov	r18,r4
 40109f4:	2980572e 	bgeu	r5,r6,4010b54 <__udivdi3+0x1a0>
 40109f8:	00bfffd4 	movui	r2,65535
 40109fc:	282d883a 	mov	r22,r5
 4010a00:	1180b236 	bltu	r2,r6,4010ccc <__udivdi3+0x318>
 4010a04:	00803fc4 	movi	r2,255
 4010a08:	1185803a 	cmpltu	r2,r2,r6
 4010a0c:	100490fa 	slli	r2,r2,3
 4010a10:	3086d83a 	srl	r3,r6,r2
 4010a14:	01010074 	movhi	r4,1025
 4010a18:	211bdc04 	addi	r4,r4,28528
 4010a1c:	20c7883a 	add	r3,r4,r3
 4010a20:	18c00003 	ldbu	r3,0(r3)
 4010a24:	1885883a 	add	r2,r3,r2
 4010a28:	00c00804 	movi	r3,32
 4010a2c:	1887c83a 	sub	r3,r3,r2
 4010a30:	18000526 	beq	r3,zero,4010a48 <__udivdi3+0x94>
 4010a34:	80e0983a 	sll	r16,r16,r3
 4010a38:	9884d83a 	srl	r2,r19,r2
 4010a3c:	30e2983a 	sll	r17,r6,r3
 4010a40:	98e4983a 	sll	r18,r19,r3
 4010a44:	142cb03a 	or	r22,r2,r16
 4010a48:	882ad43a 	srli	r21,r17,16
 4010a4c:	b009883a 	mov	r4,r22
 4010a50:	8d3fffcc 	andi	r20,r17,65535
 4010a54:	a80b883a 	mov	r5,r21
 4010a58:	4006c780 	call	4006c78 <__umodsi3>
 4010a5c:	b009883a 	mov	r4,r22
 4010a60:	a80b883a 	mov	r5,r21
 4010a64:	1027883a 	mov	r19,r2
 4010a68:	4006c140 	call	4006c14 <__udivsi3>
 4010a6c:	100b883a 	mov	r5,r2
 4010a70:	a009883a 	mov	r4,r20
 4010a74:	102d883a 	mov	r22,r2
 4010a78:	4006cd00 	call	4006cd0 <__mulsi3>
 4010a7c:	9826943a 	slli	r19,r19,16
 4010a80:	9006d43a 	srli	r3,r18,16
 4010a84:	1cc6b03a 	or	r3,r3,r19
 4010a88:	1880052e 	bgeu	r3,r2,4010aa0 <__udivdi3+0xec>
 4010a8c:	1c47883a 	add	r3,r3,r17
 4010a90:	b13fffc4 	addi	r4,r22,-1
 4010a94:	1c400136 	bltu	r3,r17,4010a9c <__udivdi3+0xe8>
 4010a98:	18814236 	bltu	r3,r2,4010fa4 <__udivdi3+0x5f0>
 4010a9c:	202d883a 	mov	r22,r4
 4010aa0:	18a1c83a 	sub	r16,r3,r2
 4010aa4:	8009883a 	mov	r4,r16
 4010aa8:	a80b883a 	mov	r5,r21
 4010aac:	4006c780 	call	4006c78 <__umodsi3>
 4010ab0:	1027883a 	mov	r19,r2
 4010ab4:	8009883a 	mov	r4,r16
 4010ab8:	a80b883a 	mov	r5,r21
 4010abc:	9826943a 	slli	r19,r19,16
 4010ac0:	4006c140 	call	4006c14 <__udivsi3>
 4010ac4:	100b883a 	mov	r5,r2
 4010ac8:	a009883a 	mov	r4,r20
 4010acc:	94bfffcc 	andi	r18,r18,65535
 4010ad0:	1021883a 	mov	r16,r2
 4010ad4:	94e4b03a 	or	r18,r18,r19
 4010ad8:	4006cd00 	call	4006cd0 <__mulsi3>
 4010adc:	9080052e 	bgeu	r18,r2,4010af4 <__udivdi3+0x140>
 4010ae0:	8ca5883a 	add	r18,r17,r18
 4010ae4:	80ffffc4 	addi	r3,r16,-1
 4010ae8:	94410c36 	bltu	r18,r17,4010f1c <__udivdi3+0x568>
 4010aec:	90810b2e 	bgeu	r18,r2,4010f1c <__udivdi3+0x568>
 4010af0:	843fff84 	addi	r16,r16,-2
 4010af4:	b004943a 	slli	r2,r22,16
 4010af8:	0007883a 	mov	r3,zero
 4010afc:	1404b03a 	or	r2,r2,r16
 4010b00:	00005e06 	br	4010c7c <__udivdi3+0x2c8>
 4010b04:	29c05b36 	bltu	r5,r7,4010c74 <__udivdi3+0x2c0>
 4010b08:	00bfffd4 	movui	r2,65535
 4010b0c:	11c0672e 	bgeu	r2,r7,4010cac <__udivdi3+0x2f8>
 4010b10:	00804034 	movhi	r2,256
 4010b14:	10bfffc4 	addi	r2,r2,-1
 4010b18:	11c10a36 	bltu	r2,r7,4010f44 <__udivdi3+0x590>
 4010b1c:	00800404 	movi	r2,16
 4010b20:	3886d83a 	srl	r3,r7,r2
 4010b24:	01010074 	movhi	r4,1025
 4010b28:	211bdc04 	addi	r4,r4,28528
 4010b2c:	20c7883a 	add	r3,r4,r3
 4010b30:	18c00003 	ldbu	r3,0(r3)
 4010b34:	05c00804 	movi	r23,32
 4010b38:	1885883a 	add	r2,r3,r2
 4010b3c:	b8afc83a 	sub	r23,r23,r2
 4010b40:	b800671e 	bne	r23,zero,4010ce0 <__udivdi3+0x32c>
 4010b44:	3c010536 	bltu	r7,r16,4010f5c <__udivdi3+0x5a8>
 4010b48:	9985403a 	cmpgeu	r2,r19,r6
 4010b4c:	0007883a 	mov	r3,zero
 4010b50:	00004a06 	br	4010c7c <__udivdi3+0x2c8>
 4010b54:	3000041e 	bne	r6,zero,4010b68 <__udivdi3+0x1b4>
 4010b58:	000b883a 	mov	r5,zero
 4010b5c:	01000044 	movi	r4,1
 4010b60:	4006c140 	call	4006c14 <__udivsi3>
 4010b64:	1023883a 	mov	r17,r2
 4010b68:	00bfffd4 	movui	r2,65535
 4010b6c:	1440532e 	bgeu	r2,r17,4010cbc <__udivdi3+0x308>
 4010b70:	00804034 	movhi	r2,256
 4010b74:	10bfffc4 	addi	r2,r2,-1
 4010b78:	1440f436 	bltu	r2,r17,4010f4c <__udivdi3+0x598>
 4010b7c:	00800404 	movi	r2,16
 4010b80:	8886d83a 	srl	r3,r17,r2
 4010b84:	01010074 	movhi	r4,1025
 4010b88:	211bdc04 	addi	r4,r4,28528
 4010b8c:	20c7883a 	add	r3,r4,r3
 4010b90:	18c00003 	ldbu	r3,0(r3)
 4010b94:	1885883a 	add	r2,r3,r2
 4010b98:	00c00804 	movi	r3,32
 4010b9c:	1887c83a 	sub	r3,r3,r2
 4010ba0:	1800a51e 	bne	r3,zero,4010e38 <__udivdi3+0x484>
 4010ba4:	882ad43a 	srli	r21,r17,16
 4010ba8:	8461c83a 	sub	r16,r16,r17
 4010bac:	8d3fffcc 	andi	r20,r17,65535
 4010bb0:	00c00044 	movi	r3,1
 4010bb4:	a80b883a 	mov	r5,r21
 4010bb8:	8009883a 	mov	r4,r16
 4010bbc:	d8c00115 	stw	r3,4(sp)
 4010bc0:	4006c780 	call	4006c78 <__umodsi3>
 4010bc4:	a80b883a 	mov	r5,r21
 4010bc8:	8009883a 	mov	r4,r16
 4010bcc:	1027883a 	mov	r19,r2
 4010bd0:	4006c140 	call	4006c14 <__udivsi3>
 4010bd4:	a00b883a 	mov	r5,r20
 4010bd8:	1009883a 	mov	r4,r2
 4010bdc:	102d883a 	mov	r22,r2
 4010be0:	4006cd00 	call	4006cd0 <__mulsi3>
 4010be4:	9826943a 	slli	r19,r19,16
 4010be8:	900ed43a 	srli	r7,r18,16
 4010bec:	d8c00117 	ldw	r3,4(sp)
 4010bf0:	3cceb03a 	or	r7,r7,r19
 4010bf4:	3880052e 	bgeu	r7,r2,4010c0c <__udivdi3+0x258>
 4010bf8:	3c4f883a 	add	r7,r7,r17
 4010bfc:	b13fffc4 	addi	r4,r22,-1
 4010c00:	3c400136 	bltu	r7,r17,4010c08 <__udivdi3+0x254>
 4010c04:	3880e436 	bltu	r7,r2,4010f98 <__udivdi3+0x5e4>
 4010c08:	202d883a 	mov	r22,r4
 4010c0c:	38a1c83a 	sub	r16,r7,r2
 4010c10:	8009883a 	mov	r4,r16
 4010c14:	a80b883a 	mov	r5,r21
 4010c18:	d8c00115 	stw	r3,4(sp)
 4010c1c:	4006c780 	call	4006c78 <__umodsi3>
 4010c20:	1027883a 	mov	r19,r2
 4010c24:	8009883a 	mov	r4,r16
 4010c28:	a80b883a 	mov	r5,r21
 4010c2c:	9826943a 	slli	r19,r19,16
 4010c30:	4006c140 	call	4006c14 <__udivsi3>
 4010c34:	a00b883a 	mov	r5,r20
 4010c38:	1009883a 	mov	r4,r2
 4010c3c:	94bfffcc 	andi	r18,r18,65535
 4010c40:	1021883a 	mov	r16,r2
 4010c44:	94e4b03a 	or	r18,r18,r19
 4010c48:	4006cd00 	call	4006cd0 <__mulsi3>
 4010c4c:	d8c00117 	ldw	r3,4(sp)
 4010c50:	9080052e 	bgeu	r18,r2,4010c68 <__udivdi3+0x2b4>
 4010c54:	8ca5883a 	add	r18,r17,r18
 4010c58:	813fffc4 	addi	r4,r16,-1
 4010c5c:	9440ad36 	bltu	r18,r17,4010f14 <__udivdi3+0x560>
 4010c60:	9080ac2e 	bgeu	r18,r2,4010f14 <__udivdi3+0x560>
 4010c64:	843fff84 	addi	r16,r16,-2
 4010c68:	b004943a 	slli	r2,r22,16
 4010c6c:	1404b03a 	or	r2,r2,r16
 4010c70:	00000206 	br	4010c7c <__udivdi3+0x2c8>
 4010c74:	0007883a 	mov	r3,zero
 4010c78:	0005883a 	mov	r2,zero
 4010c7c:	dfc00b17 	ldw	ra,44(sp)
 4010c80:	df000a17 	ldw	fp,40(sp)
 4010c84:	ddc00917 	ldw	r23,36(sp)
 4010c88:	dd800817 	ldw	r22,32(sp)
 4010c8c:	dd400717 	ldw	r21,28(sp)
 4010c90:	dd000617 	ldw	r20,24(sp)
 4010c94:	dcc00517 	ldw	r19,20(sp)
 4010c98:	dc800417 	ldw	r18,16(sp)
 4010c9c:	dc400317 	ldw	r17,12(sp)
 4010ca0:	dc000217 	ldw	r16,8(sp)
 4010ca4:	dec00c04 	addi	sp,sp,48
 4010ca8:	f800283a 	ret
 4010cac:	00803fc4 	movi	r2,255
 4010cb0:	11c5803a 	cmpltu	r2,r2,r7
 4010cb4:	100490fa 	slli	r2,r2,3
 4010cb8:	003f9906 	br	4010b20 <__alt_data_end+0xfc010b20>
 4010cbc:	00803fc4 	movi	r2,255
 4010cc0:	1445803a 	cmpltu	r2,r2,r17
 4010cc4:	100490fa 	slli	r2,r2,3
 4010cc8:	003fad06 	br	4010b80 <__alt_data_end+0xfc010b80>
 4010ccc:	00804034 	movhi	r2,256
 4010cd0:	10bfffc4 	addi	r2,r2,-1
 4010cd4:	11809f36 	bltu	r2,r6,4010f54 <__udivdi3+0x5a0>
 4010cd8:	00800404 	movi	r2,16
 4010cdc:	003f4c06 	br	4010a10 <__alt_data_end+0xfc010a10>
 4010ce0:	3dce983a 	sll	r7,r7,r23
 4010ce4:	30b8d83a 	srl	fp,r6,r2
 4010ce8:	80a2d83a 	srl	r17,r16,r2
 4010cec:	35cc983a 	sll	r6,r6,r23
 4010cf0:	3f38b03a 	or	fp,r7,fp
 4010cf4:	e024d43a 	srli	r18,fp,16
 4010cf8:	9884d83a 	srl	r2,r19,r2
 4010cfc:	85e0983a 	sll	r16,r16,r23
 4010d00:	8809883a 	mov	r4,r17
 4010d04:	900b883a 	mov	r5,r18
 4010d08:	d9800015 	stw	r6,0(sp)
 4010d0c:	1420b03a 	or	r16,r2,r16
 4010d10:	4006c780 	call	4006c78 <__umodsi3>
 4010d14:	900b883a 	mov	r5,r18
 4010d18:	8809883a 	mov	r4,r17
 4010d1c:	1029883a 	mov	r20,r2
 4010d20:	e5bfffcc 	andi	r22,fp,65535
 4010d24:	4006c140 	call	4006c14 <__udivsi3>
 4010d28:	100b883a 	mov	r5,r2
 4010d2c:	b009883a 	mov	r4,r22
 4010d30:	102b883a 	mov	r21,r2
 4010d34:	4006cd00 	call	4006cd0 <__mulsi3>
 4010d38:	a028943a 	slli	r20,r20,16
 4010d3c:	8006d43a 	srli	r3,r16,16
 4010d40:	1d06b03a 	or	r3,r3,r20
 4010d44:	1880042e 	bgeu	r3,r2,4010d58 <__udivdi3+0x3a4>
 4010d48:	1f07883a 	add	r3,r3,fp
 4010d4c:	a93fffc4 	addi	r4,r21,-1
 4010d50:	1f00892e 	bgeu	r3,fp,4010f78 <__udivdi3+0x5c4>
 4010d54:	202b883a 	mov	r21,r4
 4010d58:	18a3c83a 	sub	r17,r3,r2
 4010d5c:	8809883a 	mov	r4,r17
 4010d60:	900b883a 	mov	r5,r18
 4010d64:	4006c780 	call	4006c78 <__umodsi3>
 4010d68:	1029883a 	mov	r20,r2
 4010d6c:	8809883a 	mov	r4,r17
 4010d70:	900b883a 	mov	r5,r18
 4010d74:	a028943a 	slli	r20,r20,16
 4010d78:	4006c140 	call	4006c14 <__udivsi3>
 4010d7c:	100b883a 	mov	r5,r2
 4010d80:	b009883a 	mov	r4,r22
 4010d84:	843fffcc 	andi	r16,r16,65535
 4010d88:	1023883a 	mov	r17,r2
 4010d8c:	8520b03a 	or	r16,r16,r20
 4010d90:	4006cd00 	call	4006cd0 <__mulsi3>
 4010d94:	8080042e 	bgeu	r16,r2,4010da8 <__udivdi3+0x3f4>
 4010d98:	8721883a 	add	r16,r16,fp
 4010d9c:	88ffffc4 	addi	r3,r17,-1
 4010da0:	8700712e 	bgeu	r16,fp,4010f68 <__udivdi3+0x5b4>
 4010da4:	1823883a 	mov	r17,r3
 4010da8:	a80e943a 	slli	r7,r21,16
 4010dac:	d8c00017 	ldw	r3,0(sp)
 4010db0:	80a1c83a 	sub	r16,r16,r2
 4010db4:	3c64b03a 	or	r18,r7,r17
 4010db8:	1d3fffcc 	andi	r20,r3,65535
 4010dbc:	9022d43a 	srli	r17,r18,16
 4010dc0:	95bfffcc 	andi	r22,r18,65535
 4010dc4:	a00b883a 	mov	r5,r20
 4010dc8:	b009883a 	mov	r4,r22
 4010dcc:	182ad43a 	srli	r21,r3,16
 4010dd0:	4006cd00 	call	4006cd0 <__mulsi3>
 4010dd4:	a00b883a 	mov	r5,r20
 4010dd8:	8809883a 	mov	r4,r17
 4010ddc:	1039883a 	mov	fp,r2
 4010de0:	4006cd00 	call	4006cd0 <__mulsi3>
 4010de4:	8809883a 	mov	r4,r17
 4010de8:	a80b883a 	mov	r5,r21
 4010dec:	1029883a 	mov	r20,r2
 4010df0:	4006cd00 	call	4006cd0 <__mulsi3>
 4010df4:	a80b883a 	mov	r5,r21
 4010df8:	b009883a 	mov	r4,r22
 4010dfc:	1023883a 	mov	r17,r2
 4010e00:	4006cd00 	call	4006cd0 <__mulsi3>
 4010e04:	e006d43a 	srli	r3,fp,16
 4010e08:	1505883a 	add	r2,r2,r20
 4010e0c:	1887883a 	add	r3,r3,r2
 4010e10:	1d00022e 	bgeu	r3,r20,4010e1c <__udivdi3+0x468>
 4010e14:	00800074 	movhi	r2,1
 4010e18:	88a3883a 	add	r17,r17,r2
 4010e1c:	1804d43a 	srli	r2,r3,16
 4010e20:	1463883a 	add	r17,r2,r17
 4010e24:	84404436 	bltu	r16,r17,4010f38 <__udivdi3+0x584>
 4010e28:	84403e26 	beq	r16,r17,4010f24 <__udivdi3+0x570>
 4010e2c:	9005883a 	mov	r2,r18
 4010e30:	0007883a 	mov	r3,zero
 4010e34:	003f9106 	br	4010c7c <__alt_data_end+0xfc010c7c>
 4010e38:	88e2983a 	sll	r17,r17,r3
 4010e3c:	80aed83a 	srl	r23,r16,r2
 4010e40:	80e0983a 	sll	r16,r16,r3
 4010e44:	882ad43a 	srli	r21,r17,16
 4010e48:	9884d83a 	srl	r2,r19,r2
 4010e4c:	b809883a 	mov	r4,r23
 4010e50:	a80b883a 	mov	r5,r21
 4010e54:	98e4983a 	sll	r18,r19,r3
 4010e58:	142cb03a 	or	r22,r2,r16
 4010e5c:	4006c780 	call	4006c78 <__umodsi3>
 4010e60:	b809883a 	mov	r4,r23
 4010e64:	a80b883a 	mov	r5,r21
 4010e68:	1027883a 	mov	r19,r2
 4010e6c:	8d3fffcc 	andi	r20,r17,65535
 4010e70:	4006c140 	call	4006c14 <__udivsi3>
 4010e74:	a009883a 	mov	r4,r20
 4010e78:	100b883a 	mov	r5,r2
 4010e7c:	102f883a 	mov	r23,r2
 4010e80:	4006cd00 	call	4006cd0 <__mulsi3>
 4010e84:	9826943a 	slli	r19,r19,16
 4010e88:	b008d43a 	srli	r4,r22,16
 4010e8c:	24c8b03a 	or	r4,r4,r19
 4010e90:	2080062e 	bgeu	r4,r2,4010eac <__udivdi3+0x4f8>
 4010e94:	2449883a 	add	r4,r4,r17
 4010e98:	b8ffffc4 	addi	r3,r23,-1
 4010e9c:	24403c36 	bltu	r4,r17,4010f90 <__udivdi3+0x5dc>
 4010ea0:	20803b2e 	bgeu	r4,r2,4010f90 <__udivdi3+0x5dc>
 4010ea4:	bdffff84 	addi	r23,r23,-2
 4010ea8:	2449883a 	add	r4,r4,r17
 4010eac:	20a1c83a 	sub	r16,r4,r2
 4010eb0:	a80b883a 	mov	r5,r21
 4010eb4:	8009883a 	mov	r4,r16
 4010eb8:	4006c780 	call	4006c78 <__umodsi3>
 4010ebc:	a80b883a 	mov	r5,r21
 4010ec0:	8009883a 	mov	r4,r16
 4010ec4:	1027883a 	mov	r19,r2
 4010ec8:	4006c140 	call	4006c14 <__udivsi3>
 4010ecc:	a009883a 	mov	r4,r20
 4010ed0:	100b883a 	mov	r5,r2
 4010ed4:	9826943a 	slli	r19,r19,16
 4010ed8:	1039883a 	mov	fp,r2
 4010edc:	4006cd00 	call	4006cd0 <__mulsi3>
 4010ee0:	b13fffcc 	andi	r4,r22,65535
 4010ee4:	24c8b03a 	or	r4,r4,r19
 4010ee8:	2080062e 	bgeu	r4,r2,4010f04 <__udivdi3+0x550>
 4010eec:	2449883a 	add	r4,r4,r17
 4010ef0:	e0ffffc4 	addi	r3,fp,-1
 4010ef4:	24402436 	bltu	r4,r17,4010f88 <__udivdi3+0x5d4>
 4010ef8:	2080232e 	bgeu	r4,r2,4010f88 <__udivdi3+0x5d4>
 4010efc:	e73fff84 	addi	fp,fp,-2
 4010f00:	2449883a 	add	r4,r4,r17
 4010f04:	b82e943a 	slli	r23,r23,16
 4010f08:	20a1c83a 	sub	r16,r4,r2
 4010f0c:	bf06b03a 	or	r3,r23,fp
 4010f10:	003f2806 	br	4010bb4 <__alt_data_end+0xfc010bb4>
 4010f14:	2021883a 	mov	r16,r4
 4010f18:	003f5306 	br	4010c68 <__alt_data_end+0xfc010c68>
 4010f1c:	1821883a 	mov	r16,r3
 4010f20:	003ef406 	br	4010af4 <__alt_data_end+0xfc010af4>
 4010f24:	1806943a 	slli	r3,r3,16
 4010f28:	9de6983a 	sll	r19,r19,r23
 4010f2c:	e73fffcc 	andi	fp,fp,65535
 4010f30:	1f07883a 	add	r3,r3,fp
 4010f34:	98ffbd2e 	bgeu	r19,r3,4010e2c <__alt_data_end+0xfc010e2c>
 4010f38:	90bfffc4 	addi	r2,r18,-1
 4010f3c:	0007883a 	mov	r3,zero
 4010f40:	003f4e06 	br	4010c7c <__alt_data_end+0xfc010c7c>
 4010f44:	00800604 	movi	r2,24
 4010f48:	003ef506 	br	4010b20 <__alt_data_end+0xfc010b20>
 4010f4c:	00800604 	movi	r2,24
 4010f50:	003f0b06 	br	4010b80 <__alt_data_end+0xfc010b80>
 4010f54:	00800604 	movi	r2,24
 4010f58:	003ead06 	br	4010a10 <__alt_data_end+0xfc010a10>
 4010f5c:	0007883a 	mov	r3,zero
 4010f60:	00800044 	movi	r2,1
 4010f64:	003f4506 	br	4010c7c <__alt_data_end+0xfc010c7c>
 4010f68:	80bf8e2e 	bgeu	r16,r2,4010da4 <__alt_data_end+0xfc010da4>
 4010f6c:	8c7fff84 	addi	r17,r17,-2
 4010f70:	8721883a 	add	r16,r16,fp
 4010f74:	003f8c06 	br	4010da8 <__alt_data_end+0xfc010da8>
 4010f78:	18bf762e 	bgeu	r3,r2,4010d54 <__alt_data_end+0xfc010d54>
 4010f7c:	ad7fff84 	addi	r21,r21,-2
 4010f80:	1f07883a 	add	r3,r3,fp
 4010f84:	003f7406 	br	4010d58 <__alt_data_end+0xfc010d58>
 4010f88:	1839883a 	mov	fp,r3
 4010f8c:	003fdd06 	br	4010f04 <__alt_data_end+0xfc010f04>
 4010f90:	182f883a 	mov	r23,r3
 4010f94:	003fc506 	br	4010eac <__alt_data_end+0xfc010eac>
 4010f98:	b5bfff84 	addi	r22,r22,-2
 4010f9c:	3c4f883a 	add	r7,r7,r17
 4010fa0:	003f1a06 	br	4010c0c <__alt_data_end+0xfc010c0c>
 4010fa4:	b5bfff84 	addi	r22,r22,-2
 4010fa8:	1c47883a 	add	r3,r3,r17
 4010fac:	003ebc06 	br	4010aa0 <__alt_data_end+0xfc010aa0>

04010fb0 <__umoddi3>:
 4010fb0:	defff304 	addi	sp,sp,-52
 4010fb4:	df000b15 	stw	fp,44(sp)
 4010fb8:	dc400415 	stw	r17,16(sp)
 4010fbc:	dc000315 	stw	r16,12(sp)
 4010fc0:	dfc00c15 	stw	ra,48(sp)
 4010fc4:	ddc00a15 	stw	r23,40(sp)
 4010fc8:	dd800915 	stw	r22,36(sp)
 4010fcc:	dd400815 	stw	r21,32(sp)
 4010fd0:	dd000715 	stw	r20,28(sp)
 4010fd4:	dcc00615 	stw	r19,24(sp)
 4010fd8:	dc800515 	stw	r18,20(sp)
 4010fdc:	2021883a 	mov	r16,r4
 4010fe0:	2823883a 	mov	r17,r5
 4010fe4:	2839883a 	mov	fp,r5
 4010fe8:	3800401e 	bne	r7,zero,40110ec <__umoddi3+0x13c>
 4010fec:	3027883a 	mov	r19,r6
 4010ff0:	2029883a 	mov	r20,r4
 4010ff4:	2980552e 	bgeu	r5,r6,401114c <__umoddi3+0x19c>
 4010ff8:	00bfffd4 	movui	r2,65535
 4010ffc:	1180a236 	bltu	r2,r6,4011288 <__umoddi3+0x2d8>
 4011000:	01003fc4 	movi	r4,255
 4011004:	2189803a 	cmpltu	r4,r4,r6
 4011008:	200890fa 	slli	r4,r4,3
 401100c:	3104d83a 	srl	r2,r6,r4
 4011010:	00c10074 	movhi	r3,1025
 4011014:	18dbdc04 	addi	r3,r3,28528
 4011018:	1885883a 	add	r2,r3,r2
 401101c:	10c00003 	ldbu	r3,0(r2)
 4011020:	00800804 	movi	r2,32
 4011024:	1909883a 	add	r4,r3,r4
 4011028:	1125c83a 	sub	r18,r2,r4
 401102c:	90000526 	beq	r18,zero,4011044 <__umoddi3+0x94>
 4011030:	8ca2983a 	sll	r17,r17,r18
 4011034:	8108d83a 	srl	r4,r16,r4
 4011038:	34a6983a 	sll	r19,r6,r18
 401103c:	84a8983a 	sll	r20,r16,r18
 4011040:	2478b03a 	or	fp,r4,r17
 4011044:	982cd43a 	srli	r22,r19,16
 4011048:	e009883a 	mov	r4,fp
 401104c:	9dffffcc 	andi	r23,r19,65535
 4011050:	b00b883a 	mov	r5,r22
 4011054:	4006c780 	call	4006c78 <__umodsi3>
 4011058:	b00b883a 	mov	r5,r22
 401105c:	e009883a 	mov	r4,fp
 4011060:	102b883a 	mov	r21,r2
 4011064:	4006c140 	call	4006c14 <__udivsi3>
 4011068:	100b883a 	mov	r5,r2
 401106c:	b809883a 	mov	r4,r23
 4011070:	4006cd00 	call	4006cd0 <__mulsi3>
 4011074:	a82a943a 	slli	r21,r21,16
 4011078:	a006d43a 	srli	r3,r20,16
 401107c:	1d46b03a 	or	r3,r3,r21
 4011080:	1880032e 	bgeu	r3,r2,4011090 <__umoddi3+0xe0>
 4011084:	1cc7883a 	add	r3,r3,r19
 4011088:	1cc00136 	bltu	r3,r19,4011090 <__umoddi3+0xe0>
 401108c:	18813136 	bltu	r3,r2,4011554 <__umoddi3+0x5a4>
 4011090:	18a1c83a 	sub	r16,r3,r2
 4011094:	b00b883a 	mov	r5,r22
 4011098:	8009883a 	mov	r4,r16
 401109c:	4006c780 	call	4006c78 <__umodsi3>
 40110a0:	b00b883a 	mov	r5,r22
 40110a4:	8009883a 	mov	r4,r16
 40110a8:	1023883a 	mov	r17,r2
 40110ac:	4006c140 	call	4006c14 <__udivsi3>
 40110b0:	100b883a 	mov	r5,r2
 40110b4:	b809883a 	mov	r4,r23
 40110b8:	8822943a 	slli	r17,r17,16
 40110bc:	4006cd00 	call	4006cd0 <__mulsi3>
 40110c0:	a0ffffcc 	andi	r3,r20,65535
 40110c4:	1c46b03a 	or	r3,r3,r17
 40110c8:	1880042e 	bgeu	r3,r2,40110dc <__umoddi3+0x12c>
 40110cc:	1cc7883a 	add	r3,r3,r19
 40110d0:	1cc00236 	bltu	r3,r19,40110dc <__umoddi3+0x12c>
 40110d4:	1880012e 	bgeu	r3,r2,40110dc <__umoddi3+0x12c>
 40110d8:	1cc7883a 	add	r3,r3,r19
 40110dc:	1885c83a 	sub	r2,r3,r2
 40110e0:	1484d83a 	srl	r2,r2,r18
 40110e4:	0007883a 	mov	r3,zero
 40110e8:	00005306 	br	4011238 <__umoddi3+0x288>
 40110ec:	29c05036 	bltu	r5,r7,4011230 <__umoddi3+0x280>
 40110f0:	00bfffd4 	movui	r2,65535
 40110f4:	11c05c2e 	bgeu	r2,r7,4011268 <__umoddi3+0x2b8>
 40110f8:	00804034 	movhi	r2,256
 40110fc:	10bfffc4 	addi	r2,r2,-1
 4011100:	11c10636 	bltu	r2,r7,401151c <__umoddi3+0x56c>
 4011104:	01000404 	movi	r4,16
 4011108:	3904d83a 	srl	r2,r7,r4
 401110c:	00c10074 	movhi	r3,1025
 4011110:	18dbdc04 	addi	r3,r3,28528
 4011114:	1885883a 	add	r2,r3,r2
 4011118:	14c00003 	ldbu	r19,0(r2)
 401111c:	00c00804 	movi	r3,32
 4011120:	9927883a 	add	r19,r19,r4
 4011124:	1ce9c83a 	sub	r20,r3,r19
 4011128:	a0005c1e 	bne	r20,zero,401129c <__umoddi3+0x2ec>
 401112c:	3c400136 	bltu	r7,r17,4011134 <__umoddi3+0x184>
 4011130:	81810a36 	bltu	r16,r6,401155c <__umoddi3+0x5ac>
 4011134:	8185c83a 	sub	r2,r16,r6
 4011138:	89e3c83a 	sub	r17,r17,r7
 401113c:	8089803a 	cmpltu	r4,r16,r2
 4011140:	8939c83a 	sub	fp,r17,r4
 4011144:	e007883a 	mov	r3,fp
 4011148:	00003b06 	br	4011238 <__umoddi3+0x288>
 401114c:	3000041e 	bne	r6,zero,4011160 <__umoddi3+0x1b0>
 4011150:	000b883a 	mov	r5,zero
 4011154:	01000044 	movi	r4,1
 4011158:	4006c140 	call	4006c14 <__udivsi3>
 401115c:	1027883a 	mov	r19,r2
 4011160:	00bfffd4 	movui	r2,65535
 4011164:	14c0442e 	bgeu	r2,r19,4011278 <__umoddi3+0x2c8>
 4011168:	00804034 	movhi	r2,256
 401116c:	10bfffc4 	addi	r2,r2,-1
 4011170:	14c0ec36 	bltu	r2,r19,4011524 <__umoddi3+0x574>
 4011174:	00800404 	movi	r2,16
 4011178:	9886d83a 	srl	r3,r19,r2
 401117c:	01010074 	movhi	r4,1025
 4011180:	211bdc04 	addi	r4,r4,28528
 4011184:	20c7883a 	add	r3,r4,r3
 4011188:	18c00003 	ldbu	r3,0(r3)
 401118c:	1887883a 	add	r3,r3,r2
 4011190:	00800804 	movi	r2,32
 4011194:	10e5c83a 	sub	r18,r2,r3
 4011198:	9000ab1e 	bne	r18,zero,4011448 <__umoddi3+0x498>
 401119c:	982cd43a 	srli	r22,r19,16
 40111a0:	8ce3c83a 	sub	r17,r17,r19
 40111a4:	9dffffcc 	andi	r23,r19,65535
 40111a8:	b00b883a 	mov	r5,r22
 40111ac:	8809883a 	mov	r4,r17
 40111b0:	4006c780 	call	4006c78 <__umodsi3>
 40111b4:	b00b883a 	mov	r5,r22
 40111b8:	8809883a 	mov	r4,r17
 40111bc:	102b883a 	mov	r21,r2
 40111c0:	4006c140 	call	4006c14 <__udivsi3>
 40111c4:	b80b883a 	mov	r5,r23
 40111c8:	1009883a 	mov	r4,r2
 40111cc:	4006cd00 	call	4006cd0 <__mulsi3>
 40111d0:	a82a943a 	slli	r21,r21,16
 40111d4:	a006d43a 	srli	r3,r20,16
 40111d8:	1d46b03a 	or	r3,r3,r21
 40111dc:	1880042e 	bgeu	r3,r2,40111f0 <__umoddi3+0x240>
 40111e0:	1cc7883a 	add	r3,r3,r19
 40111e4:	1cc00236 	bltu	r3,r19,40111f0 <__umoddi3+0x240>
 40111e8:	1880012e 	bgeu	r3,r2,40111f0 <__umoddi3+0x240>
 40111ec:	1cc7883a 	add	r3,r3,r19
 40111f0:	18a1c83a 	sub	r16,r3,r2
 40111f4:	b00b883a 	mov	r5,r22
 40111f8:	8009883a 	mov	r4,r16
 40111fc:	4006c780 	call	4006c78 <__umodsi3>
 4011200:	1023883a 	mov	r17,r2
 4011204:	b00b883a 	mov	r5,r22
 4011208:	8009883a 	mov	r4,r16
 401120c:	4006c140 	call	4006c14 <__udivsi3>
 4011210:	8822943a 	slli	r17,r17,16
 4011214:	b80b883a 	mov	r5,r23
 4011218:	1009883a 	mov	r4,r2
 401121c:	4006cd00 	call	4006cd0 <__mulsi3>
 4011220:	a53fffcc 	andi	r20,r20,65535
 4011224:	a446b03a 	or	r3,r20,r17
 4011228:	18bfac2e 	bgeu	r3,r2,40110dc <__alt_data_end+0xfc0110dc>
 401122c:	003fa706 	br	40110cc <__alt_data_end+0xfc0110cc>
 4011230:	2005883a 	mov	r2,r4
 4011234:	2807883a 	mov	r3,r5
 4011238:	dfc00c17 	ldw	ra,48(sp)
 401123c:	df000b17 	ldw	fp,44(sp)
 4011240:	ddc00a17 	ldw	r23,40(sp)
 4011244:	dd800917 	ldw	r22,36(sp)
 4011248:	dd400817 	ldw	r21,32(sp)
 401124c:	dd000717 	ldw	r20,28(sp)
 4011250:	dcc00617 	ldw	r19,24(sp)
 4011254:	dc800517 	ldw	r18,20(sp)
 4011258:	dc400417 	ldw	r17,16(sp)
 401125c:	dc000317 	ldw	r16,12(sp)
 4011260:	dec00d04 	addi	sp,sp,52
 4011264:	f800283a 	ret
 4011268:	04c03fc4 	movi	r19,255
 401126c:	99c9803a 	cmpltu	r4,r19,r7
 4011270:	200890fa 	slli	r4,r4,3
 4011274:	003fa406 	br	4011108 <__alt_data_end+0xfc011108>
 4011278:	00803fc4 	movi	r2,255
 401127c:	14c5803a 	cmpltu	r2,r2,r19
 4011280:	100490fa 	slli	r2,r2,3
 4011284:	003fbc06 	br	4011178 <__alt_data_end+0xfc011178>
 4011288:	00804034 	movhi	r2,256
 401128c:	10bfffc4 	addi	r2,r2,-1
 4011290:	1180a636 	bltu	r2,r6,401152c <__umoddi3+0x57c>
 4011294:	01000404 	movi	r4,16
 4011298:	003f5c06 	br	401100c <__alt_data_end+0xfc01100c>
 401129c:	3d0e983a 	sll	r7,r7,r20
 40112a0:	34ead83a 	srl	r21,r6,r19
 40112a4:	8cc6d83a 	srl	r3,r17,r19
 40112a8:	8d10983a 	sll	r8,r17,r20
 40112ac:	3d6ab03a 	or	r21,r7,r21
 40112b0:	a82cd43a 	srli	r22,r21,16
 40112b4:	84e2d83a 	srl	r17,r16,r19
 40112b8:	1809883a 	mov	r4,r3
 40112bc:	b00b883a 	mov	r5,r22
 40112c0:	8a22b03a 	or	r17,r17,r8
 40112c4:	3524983a 	sll	r18,r6,r20
 40112c8:	dc400015 	stw	r17,0(sp)
 40112cc:	d8c00115 	stw	r3,4(sp)
 40112d0:	4006c780 	call	4006c78 <__umodsi3>
 40112d4:	d8c00117 	ldw	r3,4(sp)
 40112d8:	b00b883a 	mov	r5,r22
 40112dc:	1039883a 	mov	fp,r2
 40112e0:	1809883a 	mov	r4,r3
 40112e4:	4006c140 	call	4006c14 <__udivsi3>
 40112e8:	adffffcc 	andi	r23,r21,65535
 40112ec:	100b883a 	mov	r5,r2
 40112f0:	b809883a 	mov	r4,r23
 40112f4:	1023883a 	mov	r17,r2
 40112f8:	4006cd00 	call	4006cd0 <__mulsi3>
 40112fc:	d9400017 	ldw	r5,0(sp)
 4011300:	e008943a 	slli	r4,fp,16
 4011304:	8520983a 	sll	r16,r16,r20
 4011308:	2806d43a 	srli	r3,r5,16
 401130c:	1906b03a 	or	r3,r3,r4
 4011310:	1880042e 	bgeu	r3,r2,4011324 <__umoddi3+0x374>
 4011314:	1d47883a 	add	r3,r3,r21
 4011318:	893fffc4 	addi	r4,r17,-1
 401131c:	1d40892e 	bgeu	r3,r21,4011544 <__umoddi3+0x594>
 4011320:	2023883a 	mov	r17,r4
 4011324:	18b9c83a 	sub	fp,r3,r2
 4011328:	b00b883a 	mov	r5,r22
 401132c:	e009883a 	mov	r4,fp
 4011330:	4006c780 	call	4006c78 <__umodsi3>
 4011334:	b00b883a 	mov	r5,r22
 4011338:	e009883a 	mov	r4,fp
 401133c:	d8800215 	stw	r2,8(sp)
 4011340:	4006c140 	call	4006c14 <__udivsi3>
 4011344:	100b883a 	mov	r5,r2
 4011348:	b809883a 	mov	r4,r23
 401134c:	102d883a 	mov	r22,r2
 4011350:	4006cd00 	call	4006cd0 <__mulsi3>
 4011354:	d9800217 	ldw	r6,8(sp)
 4011358:	d8c00017 	ldw	r3,0(sp)
 401135c:	300c943a 	slli	r6,r6,16
 4011360:	1a3fffcc 	andi	r8,r3,65535
 4011364:	4190b03a 	or	r8,r8,r6
 4011368:	4080042e 	bgeu	r8,r2,401137c <__umoddi3+0x3cc>
 401136c:	4551883a 	add	r8,r8,r21
 4011370:	b0ffffc4 	addi	r3,r22,-1
 4011374:	45406f2e 	bgeu	r8,r21,4011534 <__umoddi3+0x584>
 4011378:	182d883a 	mov	r22,r3
 401137c:	880e943a 	slli	r7,r17,16
 4011380:	9006d43a 	srli	r3,r18,16
 4011384:	91bfffcc 	andi	r6,r18,65535
 4011388:	3dacb03a 	or	r22,r7,r22
 401138c:	b02ed43a 	srli	r23,r22,16
 4011390:	b5bfffcc 	andi	r22,r22,65535
 4011394:	300b883a 	mov	r5,r6
 4011398:	b009883a 	mov	r4,r22
 401139c:	40a3c83a 	sub	r17,r8,r2
 40113a0:	d8c00115 	stw	r3,4(sp)
 40113a4:	d9800215 	stw	r6,8(sp)
 40113a8:	4006cd00 	call	4006cd0 <__mulsi3>
 40113ac:	d9800217 	ldw	r6,8(sp)
 40113b0:	b809883a 	mov	r4,r23
 40113b4:	1039883a 	mov	fp,r2
 40113b8:	300b883a 	mov	r5,r6
 40113bc:	4006cd00 	call	4006cd0 <__mulsi3>
 40113c0:	d8c00117 	ldw	r3,4(sp)
 40113c4:	b809883a 	mov	r4,r23
 40113c8:	d8800215 	stw	r2,8(sp)
 40113cc:	180b883a 	mov	r5,r3
 40113d0:	4006cd00 	call	4006cd0 <__mulsi3>
 40113d4:	d8c00117 	ldw	r3,4(sp)
 40113d8:	b009883a 	mov	r4,r22
 40113dc:	102f883a 	mov	r23,r2
 40113e0:	180b883a 	mov	r5,r3
 40113e4:	4006cd00 	call	4006cd0 <__mulsi3>
 40113e8:	d9800217 	ldw	r6,8(sp)
 40113ec:	e006d43a 	srli	r3,fp,16
 40113f0:	1185883a 	add	r2,r2,r6
 40113f4:	1885883a 	add	r2,r3,r2
 40113f8:	1180022e 	bgeu	r2,r6,4011404 <__umoddi3+0x454>
 40113fc:	00c00074 	movhi	r3,1
 4011400:	b8ef883a 	add	r23,r23,r3
 4011404:	1006d43a 	srli	r3,r2,16
 4011408:	1004943a 	slli	r2,r2,16
 401140c:	e73fffcc 	andi	fp,fp,65535
 4011410:	1dc7883a 	add	r3,r3,r23
 4011414:	1739883a 	add	fp,r2,fp
 4011418:	88c03a36 	bltu	r17,r3,4011504 <__umoddi3+0x554>
 401141c:	88c05126 	beq	r17,r3,4011564 <__umoddi3+0x5b4>
 4011420:	88c9c83a 	sub	r4,r17,r3
 4011424:	e00f883a 	mov	r7,fp
 4011428:	81cfc83a 	sub	r7,r16,r7
 401142c:	81c7803a 	cmpltu	r3,r16,r7
 4011430:	20c7c83a 	sub	r3,r4,r3
 4011434:	1cc4983a 	sll	r2,r3,r19
 4011438:	3d0ed83a 	srl	r7,r7,r20
 401143c:	1d06d83a 	srl	r3,r3,r20
 4011440:	11c4b03a 	or	r2,r2,r7
 4011444:	003f7c06 	br	4011238 <__alt_data_end+0xfc011238>
 4011448:	9ca6983a 	sll	r19,r19,r18
 401144c:	88f8d83a 	srl	fp,r17,r3
 4011450:	80c4d83a 	srl	r2,r16,r3
 4011454:	982cd43a 	srli	r22,r19,16
 4011458:	8ca2983a 	sll	r17,r17,r18
 401145c:	e009883a 	mov	r4,fp
 4011460:	b00b883a 	mov	r5,r22
 4011464:	146ab03a 	or	r21,r2,r17
 4011468:	4006c780 	call	4006c78 <__umodsi3>
 401146c:	b00b883a 	mov	r5,r22
 4011470:	e009883a 	mov	r4,fp
 4011474:	1029883a 	mov	r20,r2
 4011478:	9dffffcc 	andi	r23,r19,65535
 401147c:	4006c140 	call	4006c14 <__udivsi3>
 4011480:	b809883a 	mov	r4,r23
 4011484:	100b883a 	mov	r5,r2
 4011488:	4006cd00 	call	4006cd0 <__mulsi3>
 401148c:	a008943a 	slli	r4,r20,16
 4011490:	a806d43a 	srli	r3,r21,16
 4011494:	84a8983a 	sll	r20,r16,r18
 4011498:	1906b03a 	or	r3,r3,r4
 401149c:	1880042e 	bgeu	r3,r2,40114b0 <__umoddi3+0x500>
 40114a0:	1cc7883a 	add	r3,r3,r19
 40114a4:	1cc00236 	bltu	r3,r19,40114b0 <__umoddi3+0x500>
 40114a8:	1880012e 	bgeu	r3,r2,40114b0 <__umoddi3+0x500>
 40114ac:	1cc7883a 	add	r3,r3,r19
 40114b0:	18a3c83a 	sub	r17,r3,r2
 40114b4:	b00b883a 	mov	r5,r22
 40114b8:	8809883a 	mov	r4,r17
 40114bc:	4006c780 	call	4006c78 <__umodsi3>
 40114c0:	b00b883a 	mov	r5,r22
 40114c4:	8809883a 	mov	r4,r17
 40114c8:	1021883a 	mov	r16,r2
 40114cc:	4006c140 	call	4006c14 <__udivsi3>
 40114d0:	100b883a 	mov	r5,r2
 40114d4:	b809883a 	mov	r4,r23
 40114d8:	8020943a 	slli	r16,r16,16
 40114dc:	4006cd00 	call	4006cd0 <__mulsi3>
 40114e0:	a8ffffcc 	andi	r3,r21,65535
 40114e4:	1c06b03a 	or	r3,r3,r16
 40114e8:	1880042e 	bgeu	r3,r2,40114fc <__umoddi3+0x54c>
 40114ec:	1cc7883a 	add	r3,r3,r19
 40114f0:	1cc00236 	bltu	r3,r19,40114fc <__umoddi3+0x54c>
 40114f4:	1880012e 	bgeu	r3,r2,40114fc <__umoddi3+0x54c>
 40114f8:	1cc7883a 	add	r3,r3,r19
 40114fc:	18a3c83a 	sub	r17,r3,r2
 4011500:	003f2906 	br	40111a8 <__alt_data_end+0xfc0111a8>
 4011504:	e48fc83a 	sub	r7,fp,r18
 4011508:	1d49c83a 	sub	r4,r3,r21
 401150c:	e1f9803a 	cmpltu	fp,fp,r7
 4011510:	2739c83a 	sub	fp,r4,fp
 4011514:	8f09c83a 	sub	r4,r17,fp
 4011518:	003fc306 	br	4011428 <__alt_data_end+0xfc011428>
 401151c:	01000604 	movi	r4,24
 4011520:	003ef906 	br	4011108 <__alt_data_end+0xfc011108>
 4011524:	00800604 	movi	r2,24
 4011528:	003f1306 	br	4011178 <__alt_data_end+0xfc011178>
 401152c:	01000604 	movi	r4,24
 4011530:	003eb606 	br	401100c <__alt_data_end+0xfc01100c>
 4011534:	40bf902e 	bgeu	r8,r2,4011378 <__alt_data_end+0xfc011378>
 4011538:	b5bfff84 	addi	r22,r22,-2
 401153c:	4551883a 	add	r8,r8,r21
 4011540:	003f8e06 	br	401137c <__alt_data_end+0xfc01137c>
 4011544:	18bf762e 	bgeu	r3,r2,4011320 <__alt_data_end+0xfc011320>
 4011548:	8c7fff84 	addi	r17,r17,-2
 401154c:	1d47883a 	add	r3,r3,r21
 4011550:	003f7406 	br	4011324 <__alt_data_end+0xfc011324>
 4011554:	1cc7883a 	add	r3,r3,r19
 4011558:	003ecd06 	br	4011090 <__alt_data_end+0xfc011090>
 401155c:	8005883a 	mov	r2,r16
 4011560:	003ef806 	br	4011144 <__alt_data_end+0xfc011144>
 4011564:	873fe736 	bltu	r16,fp,4011504 <__alt_data_end+0xfc011504>
 4011568:	e00f883a 	mov	r7,fp
 401156c:	0009883a 	mov	r4,zero
 4011570:	003fad06 	br	4011428 <__alt_data_end+0xfc011428>

04011574 <__adddf3>:
 4011574:	02c00434 	movhi	r11,16
 4011578:	5affffc4 	addi	r11,r11,-1
 401157c:	2806d7fa 	srli	r3,r5,31
 4011580:	2ad4703a 	and	r10,r5,r11
 4011584:	3ad2703a 	and	r9,r7,r11
 4011588:	3804d53a 	srli	r2,r7,20
 401158c:	3018d77a 	srli	r12,r6,29
 4011590:	280ad53a 	srli	r5,r5,20
 4011594:	501490fa 	slli	r10,r10,3
 4011598:	2010d77a 	srli	r8,r4,29
 401159c:	481290fa 	slli	r9,r9,3
 40115a0:	380ed7fa 	srli	r7,r7,31
 40115a4:	defffb04 	addi	sp,sp,-20
 40115a8:	dc800215 	stw	r18,8(sp)
 40115ac:	dc400115 	stw	r17,4(sp)
 40115b0:	dc000015 	stw	r16,0(sp)
 40115b4:	dfc00415 	stw	ra,16(sp)
 40115b8:	dcc00315 	stw	r19,12(sp)
 40115bc:	1c803fcc 	andi	r18,r3,255
 40115c0:	2c01ffcc 	andi	r16,r5,2047
 40115c4:	5210b03a 	or	r8,r10,r8
 40115c8:	202290fa 	slli	r17,r4,3
 40115cc:	1081ffcc 	andi	r2,r2,2047
 40115d0:	4b12b03a 	or	r9,r9,r12
 40115d4:	300c90fa 	slli	r6,r6,3
 40115d8:	91c07526 	beq	r18,r7,40117b0 <__adddf3+0x23c>
 40115dc:	8087c83a 	sub	r3,r16,r2
 40115e0:	00c0ab0e 	bge	zero,r3,4011890 <__adddf3+0x31c>
 40115e4:	10002a1e 	bne	r2,zero,4011690 <__adddf3+0x11c>
 40115e8:	4984b03a 	or	r2,r9,r6
 40115ec:	1000961e 	bne	r2,zero,4011848 <__adddf3+0x2d4>
 40115f0:	888001cc 	andi	r2,r17,7
 40115f4:	10000726 	beq	r2,zero,4011614 <__adddf3+0xa0>
 40115f8:	888003cc 	andi	r2,r17,15
 40115fc:	00c00104 	movi	r3,4
 4011600:	10c00426 	beq	r2,r3,4011614 <__adddf3+0xa0>
 4011604:	88c7883a 	add	r3,r17,r3
 4011608:	1c63803a 	cmpltu	r17,r3,r17
 401160c:	4451883a 	add	r8,r8,r17
 4011610:	1823883a 	mov	r17,r3
 4011614:	4080202c 	andhi	r2,r8,128
 4011618:	10005926 	beq	r2,zero,4011780 <__adddf3+0x20c>
 401161c:	84000044 	addi	r16,r16,1
 4011620:	0081ffc4 	movi	r2,2047
 4011624:	8080ba26 	beq	r16,r2,4011910 <__adddf3+0x39c>
 4011628:	00bfe034 	movhi	r2,65408
 401162c:	10bfffc4 	addi	r2,r2,-1
 4011630:	4090703a 	and	r8,r8,r2
 4011634:	4004977a 	slli	r2,r8,29
 4011638:	4010927a 	slli	r8,r8,9
 401163c:	8822d0fa 	srli	r17,r17,3
 4011640:	8401ffcc 	andi	r16,r16,2047
 4011644:	4010d33a 	srli	r8,r8,12
 4011648:	9007883a 	mov	r3,r18
 401164c:	1444b03a 	or	r2,r2,r17
 4011650:	8401ffcc 	andi	r16,r16,2047
 4011654:	8020953a 	slli	r16,r16,20
 4011658:	18c03fcc 	andi	r3,r3,255
 401165c:	01000434 	movhi	r4,16
 4011660:	213fffc4 	addi	r4,r4,-1
 4011664:	180697fa 	slli	r3,r3,31
 4011668:	4110703a 	and	r8,r8,r4
 401166c:	4410b03a 	or	r8,r8,r16
 4011670:	40c6b03a 	or	r3,r8,r3
 4011674:	dfc00417 	ldw	ra,16(sp)
 4011678:	dcc00317 	ldw	r19,12(sp)
 401167c:	dc800217 	ldw	r18,8(sp)
 4011680:	dc400117 	ldw	r17,4(sp)
 4011684:	dc000017 	ldw	r16,0(sp)
 4011688:	dec00504 	addi	sp,sp,20
 401168c:	f800283a 	ret
 4011690:	0081ffc4 	movi	r2,2047
 4011694:	80bfd626 	beq	r16,r2,40115f0 <__alt_data_end+0xfc0115f0>
 4011698:	4a402034 	orhi	r9,r9,128
 401169c:	00800e04 	movi	r2,56
 40116a0:	10c09f16 	blt	r2,r3,4011920 <__adddf3+0x3ac>
 40116a4:	008007c4 	movi	r2,31
 40116a8:	10c0c216 	blt	r2,r3,40119b4 <__adddf3+0x440>
 40116ac:	00800804 	movi	r2,32
 40116b0:	10c5c83a 	sub	r2,r2,r3
 40116b4:	488a983a 	sll	r5,r9,r2
 40116b8:	30c8d83a 	srl	r4,r6,r3
 40116bc:	3084983a 	sll	r2,r6,r2
 40116c0:	48c6d83a 	srl	r3,r9,r3
 40116c4:	290cb03a 	or	r6,r5,r4
 40116c8:	1004c03a 	cmpne	r2,r2,zero
 40116cc:	308cb03a 	or	r6,r6,r2
 40116d0:	898dc83a 	sub	r6,r17,r6
 40116d4:	89a3803a 	cmpltu	r17,r17,r6
 40116d8:	40d1c83a 	sub	r8,r8,r3
 40116dc:	4451c83a 	sub	r8,r8,r17
 40116e0:	3023883a 	mov	r17,r6
 40116e4:	4080202c 	andhi	r2,r8,128
 40116e8:	10002326 	beq	r2,zero,4011778 <__adddf3+0x204>
 40116ec:	04c02034 	movhi	r19,128
 40116f0:	9cffffc4 	addi	r19,r19,-1
 40116f4:	44e6703a 	and	r19,r8,r19
 40116f8:	98007626 	beq	r19,zero,40118d4 <__adddf3+0x360>
 40116fc:	9809883a 	mov	r4,r19
 4011700:	4013db40 	call	4013db4 <__clzsi2>
 4011704:	10fffe04 	addi	r3,r2,-8
 4011708:	010007c4 	movi	r4,31
 401170c:	20c07716 	blt	r4,r3,40118ec <__adddf3+0x378>
 4011710:	00800804 	movi	r2,32
 4011714:	10c5c83a 	sub	r2,r2,r3
 4011718:	8884d83a 	srl	r2,r17,r2
 401171c:	98d0983a 	sll	r8,r19,r3
 4011720:	88e2983a 	sll	r17,r17,r3
 4011724:	1204b03a 	or	r2,r2,r8
 4011728:	1c007416 	blt	r3,r16,40118fc <__adddf3+0x388>
 401172c:	1c21c83a 	sub	r16,r3,r16
 4011730:	82000044 	addi	r8,r16,1
 4011734:	00c007c4 	movi	r3,31
 4011738:	1a009116 	blt	r3,r8,4011980 <__adddf3+0x40c>
 401173c:	00c00804 	movi	r3,32
 4011740:	1a07c83a 	sub	r3,r3,r8
 4011744:	8a08d83a 	srl	r4,r17,r8
 4011748:	88e2983a 	sll	r17,r17,r3
 401174c:	10c6983a 	sll	r3,r2,r3
 4011750:	1210d83a 	srl	r8,r2,r8
 4011754:	8804c03a 	cmpne	r2,r17,zero
 4011758:	1906b03a 	or	r3,r3,r4
 401175c:	18a2b03a 	or	r17,r3,r2
 4011760:	0021883a 	mov	r16,zero
 4011764:	003fa206 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011768:	1890b03a 	or	r8,r3,r2
 401176c:	40017d26 	beq	r8,zero,4011d64 <__adddf3+0x7f0>
 4011770:	1011883a 	mov	r8,r2
 4011774:	1823883a 	mov	r17,r3
 4011778:	888001cc 	andi	r2,r17,7
 401177c:	103f9e1e 	bne	r2,zero,40115f8 <__alt_data_end+0xfc0115f8>
 4011780:	4004977a 	slli	r2,r8,29
 4011784:	8822d0fa 	srli	r17,r17,3
 4011788:	4010d0fa 	srli	r8,r8,3
 401178c:	9007883a 	mov	r3,r18
 4011790:	1444b03a 	or	r2,r2,r17
 4011794:	0101ffc4 	movi	r4,2047
 4011798:	81002426 	beq	r16,r4,401182c <__adddf3+0x2b8>
 401179c:	8120703a 	and	r16,r16,r4
 40117a0:	01000434 	movhi	r4,16
 40117a4:	213fffc4 	addi	r4,r4,-1
 40117a8:	4110703a 	and	r8,r8,r4
 40117ac:	003fa806 	br	4011650 <__alt_data_end+0xfc011650>
 40117b0:	8089c83a 	sub	r4,r16,r2
 40117b4:	01005e0e 	bge	zero,r4,4011930 <__adddf3+0x3bc>
 40117b8:	10002b26 	beq	r2,zero,4011868 <__adddf3+0x2f4>
 40117bc:	0081ffc4 	movi	r2,2047
 40117c0:	80bf8b26 	beq	r16,r2,40115f0 <__alt_data_end+0xfc0115f0>
 40117c4:	4a402034 	orhi	r9,r9,128
 40117c8:	00800e04 	movi	r2,56
 40117cc:	1100a40e 	bge	r2,r4,4011a60 <__adddf3+0x4ec>
 40117d0:	498cb03a 	or	r6,r9,r6
 40117d4:	300ac03a 	cmpne	r5,r6,zero
 40117d8:	0013883a 	mov	r9,zero
 40117dc:	2c4b883a 	add	r5,r5,r17
 40117e0:	2c63803a 	cmpltu	r17,r5,r17
 40117e4:	4a11883a 	add	r8,r9,r8
 40117e8:	8a11883a 	add	r8,r17,r8
 40117ec:	2823883a 	mov	r17,r5
 40117f0:	4080202c 	andhi	r2,r8,128
 40117f4:	103fe026 	beq	r2,zero,4011778 <__alt_data_end+0xfc011778>
 40117f8:	84000044 	addi	r16,r16,1
 40117fc:	0081ffc4 	movi	r2,2047
 4011800:	8080d226 	beq	r16,r2,4011b4c <__adddf3+0x5d8>
 4011804:	00bfe034 	movhi	r2,65408
 4011808:	10bfffc4 	addi	r2,r2,-1
 401180c:	4090703a 	and	r8,r8,r2
 4011810:	880ad07a 	srli	r5,r17,1
 4011814:	400897fa 	slli	r4,r8,31
 4011818:	88c0004c 	andi	r3,r17,1
 401181c:	28e2b03a 	or	r17,r5,r3
 4011820:	4010d07a 	srli	r8,r8,1
 4011824:	2462b03a 	or	r17,r4,r17
 4011828:	003f7106 	br	40115f0 <__alt_data_end+0xfc0115f0>
 401182c:	4088b03a 	or	r4,r8,r2
 4011830:	20014526 	beq	r4,zero,4011d48 <__adddf3+0x7d4>
 4011834:	01000434 	movhi	r4,16
 4011838:	42000234 	orhi	r8,r8,8
 401183c:	213fffc4 	addi	r4,r4,-1
 4011840:	4110703a 	and	r8,r8,r4
 4011844:	003f8206 	br	4011650 <__alt_data_end+0xfc011650>
 4011848:	18ffffc4 	addi	r3,r3,-1
 401184c:	1800491e 	bne	r3,zero,4011974 <__adddf3+0x400>
 4011850:	898bc83a 	sub	r5,r17,r6
 4011854:	8963803a 	cmpltu	r17,r17,r5
 4011858:	4251c83a 	sub	r8,r8,r9
 401185c:	4451c83a 	sub	r8,r8,r17
 4011860:	2823883a 	mov	r17,r5
 4011864:	003f9f06 	br	40116e4 <__alt_data_end+0xfc0116e4>
 4011868:	4984b03a 	or	r2,r9,r6
 401186c:	103f6026 	beq	r2,zero,40115f0 <__alt_data_end+0xfc0115f0>
 4011870:	213fffc4 	addi	r4,r4,-1
 4011874:	2000931e 	bne	r4,zero,4011ac4 <__adddf3+0x550>
 4011878:	898d883a 	add	r6,r17,r6
 401187c:	3463803a 	cmpltu	r17,r6,r17
 4011880:	4251883a 	add	r8,r8,r9
 4011884:	8a11883a 	add	r8,r17,r8
 4011888:	3023883a 	mov	r17,r6
 401188c:	003fd806 	br	40117f0 <__alt_data_end+0xfc0117f0>
 4011890:	1800541e 	bne	r3,zero,40119e4 <__adddf3+0x470>
 4011894:	80800044 	addi	r2,r16,1
 4011898:	1081ffcc 	andi	r2,r2,2047
 401189c:	00c00044 	movi	r3,1
 40118a0:	1880a00e 	bge	r3,r2,4011b24 <__adddf3+0x5b0>
 40118a4:	8989c83a 	sub	r4,r17,r6
 40118a8:	8905803a 	cmpltu	r2,r17,r4
 40118ac:	4267c83a 	sub	r19,r8,r9
 40118b0:	98a7c83a 	sub	r19,r19,r2
 40118b4:	9880202c 	andhi	r2,r19,128
 40118b8:	10006326 	beq	r2,zero,4011a48 <__adddf3+0x4d4>
 40118bc:	3463c83a 	sub	r17,r6,r17
 40118c0:	4a07c83a 	sub	r3,r9,r8
 40118c4:	344d803a 	cmpltu	r6,r6,r17
 40118c8:	19a7c83a 	sub	r19,r3,r6
 40118cc:	3825883a 	mov	r18,r7
 40118d0:	983f8a1e 	bne	r19,zero,40116fc <__alt_data_end+0xfc0116fc>
 40118d4:	8809883a 	mov	r4,r17
 40118d8:	4013db40 	call	4013db4 <__clzsi2>
 40118dc:	10800804 	addi	r2,r2,32
 40118e0:	10fffe04 	addi	r3,r2,-8
 40118e4:	010007c4 	movi	r4,31
 40118e8:	20ff890e 	bge	r4,r3,4011710 <__alt_data_end+0xfc011710>
 40118ec:	10bff604 	addi	r2,r2,-40
 40118f0:	8884983a 	sll	r2,r17,r2
 40118f4:	0023883a 	mov	r17,zero
 40118f8:	1c3f8c0e 	bge	r3,r16,401172c <__alt_data_end+0xfc01172c>
 40118fc:	023fe034 	movhi	r8,65408
 4011900:	423fffc4 	addi	r8,r8,-1
 4011904:	80e1c83a 	sub	r16,r16,r3
 4011908:	1210703a 	and	r8,r2,r8
 401190c:	003f3806 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011910:	9007883a 	mov	r3,r18
 4011914:	0011883a 	mov	r8,zero
 4011918:	0005883a 	mov	r2,zero
 401191c:	003f4c06 	br	4011650 <__alt_data_end+0xfc011650>
 4011920:	498cb03a 	or	r6,r9,r6
 4011924:	300cc03a 	cmpne	r6,r6,zero
 4011928:	0007883a 	mov	r3,zero
 401192c:	003f6806 	br	40116d0 <__alt_data_end+0xfc0116d0>
 4011930:	20009c1e 	bne	r4,zero,4011ba4 <__adddf3+0x630>
 4011934:	80800044 	addi	r2,r16,1
 4011938:	1141ffcc 	andi	r5,r2,2047
 401193c:	01000044 	movi	r4,1
 4011940:	2140670e 	bge	r4,r5,4011ae0 <__adddf3+0x56c>
 4011944:	0101ffc4 	movi	r4,2047
 4011948:	11007f26 	beq	r2,r4,4011b48 <__adddf3+0x5d4>
 401194c:	898d883a 	add	r6,r17,r6
 4011950:	4247883a 	add	r3,r8,r9
 4011954:	3451803a 	cmpltu	r8,r6,r17
 4011958:	40d1883a 	add	r8,r8,r3
 401195c:	402297fa 	slli	r17,r8,31
 4011960:	300cd07a 	srli	r6,r6,1
 4011964:	4010d07a 	srli	r8,r8,1
 4011968:	1021883a 	mov	r16,r2
 401196c:	89a2b03a 	or	r17,r17,r6
 4011970:	003f1f06 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011974:	0081ffc4 	movi	r2,2047
 4011978:	80bf481e 	bne	r16,r2,401169c <__alt_data_end+0xfc01169c>
 401197c:	003f1c06 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011980:	843ff844 	addi	r16,r16,-31
 4011984:	01000804 	movi	r4,32
 4011988:	1406d83a 	srl	r3,r2,r16
 401198c:	41005026 	beq	r8,r4,4011ad0 <__adddf3+0x55c>
 4011990:	01001004 	movi	r4,64
 4011994:	2211c83a 	sub	r8,r4,r8
 4011998:	1204983a 	sll	r2,r2,r8
 401199c:	88a2b03a 	or	r17,r17,r2
 40119a0:	8822c03a 	cmpne	r17,r17,zero
 40119a4:	1c62b03a 	or	r17,r3,r17
 40119a8:	0011883a 	mov	r8,zero
 40119ac:	0021883a 	mov	r16,zero
 40119b0:	003f7106 	br	4011778 <__alt_data_end+0xfc011778>
 40119b4:	193ff804 	addi	r4,r3,-32
 40119b8:	00800804 	movi	r2,32
 40119bc:	4908d83a 	srl	r4,r9,r4
 40119c0:	18804526 	beq	r3,r2,4011ad8 <__adddf3+0x564>
 40119c4:	00801004 	movi	r2,64
 40119c8:	10c5c83a 	sub	r2,r2,r3
 40119cc:	4886983a 	sll	r3,r9,r2
 40119d0:	198cb03a 	or	r6,r3,r6
 40119d4:	300cc03a 	cmpne	r6,r6,zero
 40119d8:	218cb03a 	or	r6,r4,r6
 40119dc:	0007883a 	mov	r3,zero
 40119e0:	003f3b06 	br	40116d0 <__alt_data_end+0xfc0116d0>
 40119e4:	80002a26 	beq	r16,zero,4011a90 <__adddf3+0x51c>
 40119e8:	0101ffc4 	movi	r4,2047
 40119ec:	11006826 	beq	r2,r4,4011b90 <__adddf3+0x61c>
 40119f0:	00c7c83a 	sub	r3,zero,r3
 40119f4:	42002034 	orhi	r8,r8,128
 40119f8:	01000e04 	movi	r4,56
 40119fc:	20c07c16 	blt	r4,r3,4011bf0 <__adddf3+0x67c>
 4011a00:	010007c4 	movi	r4,31
 4011a04:	20c0da16 	blt	r4,r3,4011d70 <__adddf3+0x7fc>
 4011a08:	01000804 	movi	r4,32
 4011a0c:	20c9c83a 	sub	r4,r4,r3
 4011a10:	4114983a 	sll	r10,r8,r4
 4011a14:	88cad83a 	srl	r5,r17,r3
 4011a18:	8908983a 	sll	r4,r17,r4
 4011a1c:	40c6d83a 	srl	r3,r8,r3
 4011a20:	5162b03a 	or	r17,r10,r5
 4011a24:	2008c03a 	cmpne	r4,r4,zero
 4011a28:	8922b03a 	or	r17,r17,r4
 4011a2c:	3463c83a 	sub	r17,r6,r17
 4011a30:	48c7c83a 	sub	r3,r9,r3
 4011a34:	344d803a 	cmpltu	r6,r6,r17
 4011a38:	1991c83a 	sub	r8,r3,r6
 4011a3c:	1021883a 	mov	r16,r2
 4011a40:	3825883a 	mov	r18,r7
 4011a44:	003f2706 	br	40116e4 <__alt_data_end+0xfc0116e4>
 4011a48:	24d0b03a 	or	r8,r4,r19
 4011a4c:	40001b1e 	bne	r8,zero,4011abc <__adddf3+0x548>
 4011a50:	0005883a 	mov	r2,zero
 4011a54:	0007883a 	mov	r3,zero
 4011a58:	0021883a 	mov	r16,zero
 4011a5c:	003f4d06 	br	4011794 <__alt_data_end+0xfc011794>
 4011a60:	008007c4 	movi	r2,31
 4011a64:	11003c16 	blt	r2,r4,4011b58 <__adddf3+0x5e4>
 4011a68:	00800804 	movi	r2,32
 4011a6c:	1105c83a 	sub	r2,r2,r4
 4011a70:	488e983a 	sll	r7,r9,r2
 4011a74:	310ad83a 	srl	r5,r6,r4
 4011a78:	3084983a 	sll	r2,r6,r2
 4011a7c:	4912d83a 	srl	r9,r9,r4
 4011a80:	394ab03a 	or	r5,r7,r5
 4011a84:	1004c03a 	cmpne	r2,r2,zero
 4011a88:	288ab03a 	or	r5,r5,r2
 4011a8c:	003f5306 	br	40117dc <__alt_data_end+0xfc0117dc>
 4011a90:	4448b03a 	or	r4,r8,r17
 4011a94:	20003e26 	beq	r4,zero,4011b90 <__adddf3+0x61c>
 4011a98:	00c6303a 	nor	r3,zero,r3
 4011a9c:	18003a1e 	bne	r3,zero,4011b88 <__adddf3+0x614>
 4011aa0:	3463c83a 	sub	r17,r6,r17
 4011aa4:	4a07c83a 	sub	r3,r9,r8
 4011aa8:	344d803a 	cmpltu	r6,r6,r17
 4011aac:	1991c83a 	sub	r8,r3,r6
 4011ab0:	1021883a 	mov	r16,r2
 4011ab4:	3825883a 	mov	r18,r7
 4011ab8:	003f0a06 	br	40116e4 <__alt_data_end+0xfc0116e4>
 4011abc:	2023883a 	mov	r17,r4
 4011ac0:	003f0d06 	br	40116f8 <__alt_data_end+0xfc0116f8>
 4011ac4:	0081ffc4 	movi	r2,2047
 4011ac8:	80bf3f1e 	bne	r16,r2,40117c8 <__alt_data_end+0xfc0117c8>
 4011acc:	003ec806 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011ad0:	0005883a 	mov	r2,zero
 4011ad4:	003fb106 	br	401199c <__alt_data_end+0xfc01199c>
 4011ad8:	0007883a 	mov	r3,zero
 4011adc:	003fbc06 	br	40119d0 <__alt_data_end+0xfc0119d0>
 4011ae0:	4444b03a 	or	r2,r8,r17
 4011ae4:	8000871e 	bne	r16,zero,4011d04 <__adddf3+0x790>
 4011ae8:	1000ba26 	beq	r2,zero,4011dd4 <__adddf3+0x860>
 4011aec:	4984b03a 	or	r2,r9,r6
 4011af0:	103ebf26 	beq	r2,zero,40115f0 <__alt_data_end+0xfc0115f0>
 4011af4:	8985883a 	add	r2,r17,r6
 4011af8:	4247883a 	add	r3,r8,r9
 4011afc:	1451803a 	cmpltu	r8,r2,r17
 4011b00:	40d1883a 	add	r8,r8,r3
 4011b04:	40c0202c 	andhi	r3,r8,128
 4011b08:	1023883a 	mov	r17,r2
 4011b0c:	183f1a26 	beq	r3,zero,4011778 <__alt_data_end+0xfc011778>
 4011b10:	00bfe034 	movhi	r2,65408
 4011b14:	10bfffc4 	addi	r2,r2,-1
 4011b18:	2021883a 	mov	r16,r4
 4011b1c:	4090703a 	and	r8,r8,r2
 4011b20:	003eb306 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011b24:	4444b03a 	or	r2,r8,r17
 4011b28:	8000291e 	bne	r16,zero,4011bd0 <__adddf3+0x65c>
 4011b2c:	10004b1e 	bne	r2,zero,4011c5c <__adddf3+0x6e8>
 4011b30:	4990b03a 	or	r8,r9,r6
 4011b34:	40008b26 	beq	r8,zero,4011d64 <__adddf3+0x7f0>
 4011b38:	4811883a 	mov	r8,r9
 4011b3c:	3023883a 	mov	r17,r6
 4011b40:	3825883a 	mov	r18,r7
 4011b44:	003eaa06 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011b48:	1021883a 	mov	r16,r2
 4011b4c:	0011883a 	mov	r8,zero
 4011b50:	0005883a 	mov	r2,zero
 4011b54:	003f0f06 	br	4011794 <__alt_data_end+0xfc011794>
 4011b58:	217ff804 	addi	r5,r4,-32
 4011b5c:	00800804 	movi	r2,32
 4011b60:	494ad83a 	srl	r5,r9,r5
 4011b64:	20807d26 	beq	r4,r2,4011d5c <__adddf3+0x7e8>
 4011b68:	00801004 	movi	r2,64
 4011b6c:	1109c83a 	sub	r4,r2,r4
 4011b70:	4912983a 	sll	r9,r9,r4
 4011b74:	498cb03a 	or	r6,r9,r6
 4011b78:	300cc03a 	cmpne	r6,r6,zero
 4011b7c:	298ab03a 	or	r5,r5,r6
 4011b80:	0013883a 	mov	r9,zero
 4011b84:	003f1506 	br	40117dc <__alt_data_end+0xfc0117dc>
 4011b88:	0101ffc4 	movi	r4,2047
 4011b8c:	113f9a1e 	bne	r2,r4,40119f8 <__alt_data_end+0xfc0119f8>
 4011b90:	4811883a 	mov	r8,r9
 4011b94:	3023883a 	mov	r17,r6
 4011b98:	1021883a 	mov	r16,r2
 4011b9c:	3825883a 	mov	r18,r7
 4011ba0:	003e9306 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011ba4:	8000161e 	bne	r16,zero,4011c00 <__adddf3+0x68c>
 4011ba8:	444ab03a 	or	r5,r8,r17
 4011bac:	28005126 	beq	r5,zero,4011cf4 <__adddf3+0x780>
 4011bb0:	0108303a 	nor	r4,zero,r4
 4011bb4:	20004d1e 	bne	r4,zero,4011cec <__adddf3+0x778>
 4011bb8:	89a3883a 	add	r17,r17,r6
 4011bbc:	4253883a 	add	r9,r8,r9
 4011bc0:	898d803a 	cmpltu	r6,r17,r6
 4011bc4:	3251883a 	add	r8,r6,r9
 4011bc8:	1021883a 	mov	r16,r2
 4011bcc:	003f0806 	br	40117f0 <__alt_data_end+0xfc0117f0>
 4011bd0:	1000301e 	bne	r2,zero,4011c94 <__adddf3+0x720>
 4011bd4:	4984b03a 	or	r2,r9,r6
 4011bd8:	10007126 	beq	r2,zero,4011da0 <__adddf3+0x82c>
 4011bdc:	4811883a 	mov	r8,r9
 4011be0:	3023883a 	mov	r17,r6
 4011be4:	3825883a 	mov	r18,r7
 4011be8:	0401ffc4 	movi	r16,2047
 4011bec:	003e8006 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011bf0:	4462b03a 	or	r17,r8,r17
 4011bf4:	8822c03a 	cmpne	r17,r17,zero
 4011bf8:	0007883a 	mov	r3,zero
 4011bfc:	003f8b06 	br	4011a2c <__alt_data_end+0xfc011a2c>
 4011c00:	0141ffc4 	movi	r5,2047
 4011c04:	11403b26 	beq	r2,r5,4011cf4 <__adddf3+0x780>
 4011c08:	0109c83a 	sub	r4,zero,r4
 4011c0c:	42002034 	orhi	r8,r8,128
 4011c10:	01400e04 	movi	r5,56
 4011c14:	29006716 	blt	r5,r4,4011db4 <__adddf3+0x840>
 4011c18:	014007c4 	movi	r5,31
 4011c1c:	29007016 	blt	r5,r4,4011de0 <__adddf3+0x86c>
 4011c20:	01400804 	movi	r5,32
 4011c24:	290bc83a 	sub	r5,r5,r4
 4011c28:	4154983a 	sll	r10,r8,r5
 4011c2c:	890ed83a 	srl	r7,r17,r4
 4011c30:	894a983a 	sll	r5,r17,r5
 4011c34:	4108d83a 	srl	r4,r8,r4
 4011c38:	51e2b03a 	or	r17,r10,r7
 4011c3c:	280ac03a 	cmpne	r5,r5,zero
 4011c40:	8962b03a 	or	r17,r17,r5
 4011c44:	89a3883a 	add	r17,r17,r6
 4011c48:	2253883a 	add	r9,r4,r9
 4011c4c:	898d803a 	cmpltu	r6,r17,r6
 4011c50:	3251883a 	add	r8,r6,r9
 4011c54:	1021883a 	mov	r16,r2
 4011c58:	003ee506 	br	40117f0 <__alt_data_end+0xfc0117f0>
 4011c5c:	4984b03a 	or	r2,r9,r6
 4011c60:	103e6326 	beq	r2,zero,40115f0 <__alt_data_end+0xfc0115f0>
 4011c64:	8987c83a 	sub	r3,r17,r6
 4011c68:	88c9803a 	cmpltu	r4,r17,r3
 4011c6c:	4245c83a 	sub	r2,r8,r9
 4011c70:	1105c83a 	sub	r2,r2,r4
 4011c74:	1100202c 	andhi	r4,r2,128
 4011c78:	203ebb26 	beq	r4,zero,4011768 <__alt_data_end+0xfc011768>
 4011c7c:	3463c83a 	sub	r17,r6,r17
 4011c80:	4a07c83a 	sub	r3,r9,r8
 4011c84:	344d803a 	cmpltu	r6,r6,r17
 4011c88:	1991c83a 	sub	r8,r3,r6
 4011c8c:	3825883a 	mov	r18,r7
 4011c90:	003e5706 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011c94:	4984b03a 	or	r2,r9,r6
 4011c98:	10002e26 	beq	r2,zero,4011d54 <__adddf3+0x7e0>
 4011c9c:	4004d0fa 	srli	r2,r8,3
 4011ca0:	8822d0fa 	srli	r17,r17,3
 4011ca4:	4010977a 	slli	r8,r8,29
 4011ca8:	10c0022c 	andhi	r3,r2,8
 4011cac:	4462b03a 	or	r17,r8,r17
 4011cb0:	18000826 	beq	r3,zero,4011cd4 <__adddf3+0x760>
 4011cb4:	4808d0fa 	srli	r4,r9,3
 4011cb8:	20c0022c 	andhi	r3,r4,8
 4011cbc:	1800051e 	bne	r3,zero,4011cd4 <__adddf3+0x760>
 4011cc0:	300cd0fa 	srli	r6,r6,3
 4011cc4:	4806977a 	slli	r3,r9,29
 4011cc8:	2005883a 	mov	r2,r4
 4011ccc:	3825883a 	mov	r18,r7
 4011cd0:	19a2b03a 	or	r17,r3,r6
 4011cd4:	8810d77a 	srli	r8,r17,29
 4011cd8:	100490fa 	slli	r2,r2,3
 4011cdc:	882290fa 	slli	r17,r17,3
 4011ce0:	0401ffc4 	movi	r16,2047
 4011ce4:	4090b03a 	or	r8,r8,r2
 4011ce8:	003e4106 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011cec:	0141ffc4 	movi	r5,2047
 4011cf0:	117fc71e 	bne	r2,r5,4011c10 <__alt_data_end+0xfc011c10>
 4011cf4:	4811883a 	mov	r8,r9
 4011cf8:	3023883a 	mov	r17,r6
 4011cfc:	1021883a 	mov	r16,r2
 4011d00:	003e3b06 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011d04:	10002f26 	beq	r2,zero,4011dc4 <__adddf3+0x850>
 4011d08:	4984b03a 	or	r2,r9,r6
 4011d0c:	10001126 	beq	r2,zero,4011d54 <__adddf3+0x7e0>
 4011d10:	4004d0fa 	srli	r2,r8,3
 4011d14:	8822d0fa 	srli	r17,r17,3
 4011d18:	4010977a 	slli	r8,r8,29
 4011d1c:	10c0022c 	andhi	r3,r2,8
 4011d20:	4462b03a 	or	r17,r8,r17
 4011d24:	183feb26 	beq	r3,zero,4011cd4 <__alt_data_end+0xfc011cd4>
 4011d28:	4808d0fa 	srli	r4,r9,3
 4011d2c:	20c0022c 	andhi	r3,r4,8
 4011d30:	183fe81e 	bne	r3,zero,4011cd4 <__alt_data_end+0xfc011cd4>
 4011d34:	300cd0fa 	srli	r6,r6,3
 4011d38:	4806977a 	slli	r3,r9,29
 4011d3c:	2005883a 	mov	r2,r4
 4011d40:	19a2b03a 	or	r17,r3,r6
 4011d44:	003fe306 	br	4011cd4 <__alt_data_end+0xfc011cd4>
 4011d48:	0011883a 	mov	r8,zero
 4011d4c:	0005883a 	mov	r2,zero
 4011d50:	003e3f06 	br	4011650 <__alt_data_end+0xfc011650>
 4011d54:	0401ffc4 	movi	r16,2047
 4011d58:	003e2506 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011d5c:	0013883a 	mov	r9,zero
 4011d60:	003f8406 	br	4011b74 <__alt_data_end+0xfc011b74>
 4011d64:	0005883a 	mov	r2,zero
 4011d68:	0007883a 	mov	r3,zero
 4011d6c:	003e8906 	br	4011794 <__alt_data_end+0xfc011794>
 4011d70:	197ff804 	addi	r5,r3,-32
 4011d74:	01000804 	movi	r4,32
 4011d78:	414ad83a 	srl	r5,r8,r5
 4011d7c:	19002426 	beq	r3,r4,4011e10 <__adddf3+0x89c>
 4011d80:	01001004 	movi	r4,64
 4011d84:	20c7c83a 	sub	r3,r4,r3
 4011d88:	40c6983a 	sll	r3,r8,r3
 4011d8c:	1c46b03a 	or	r3,r3,r17
 4011d90:	1806c03a 	cmpne	r3,r3,zero
 4011d94:	28e2b03a 	or	r17,r5,r3
 4011d98:	0007883a 	mov	r3,zero
 4011d9c:	003f2306 	br	4011a2c <__alt_data_end+0xfc011a2c>
 4011da0:	0007883a 	mov	r3,zero
 4011da4:	5811883a 	mov	r8,r11
 4011da8:	00bfffc4 	movi	r2,-1
 4011dac:	0401ffc4 	movi	r16,2047
 4011db0:	003e7806 	br	4011794 <__alt_data_end+0xfc011794>
 4011db4:	4462b03a 	or	r17,r8,r17
 4011db8:	8822c03a 	cmpne	r17,r17,zero
 4011dbc:	0009883a 	mov	r4,zero
 4011dc0:	003fa006 	br	4011c44 <__alt_data_end+0xfc011c44>
 4011dc4:	4811883a 	mov	r8,r9
 4011dc8:	3023883a 	mov	r17,r6
 4011dcc:	0401ffc4 	movi	r16,2047
 4011dd0:	003e0706 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011dd4:	4811883a 	mov	r8,r9
 4011dd8:	3023883a 	mov	r17,r6
 4011ddc:	003e0406 	br	40115f0 <__alt_data_end+0xfc0115f0>
 4011de0:	21fff804 	addi	r7,r4,-32
 4011de4:	01400804 	movi	r5,32
 4011de8:	41ced83a 	srl	r7,r8,r7
 4011dec:	21400a26 	beq	r4,r5,4011e18 <__adddf3+0x8a4>
 4011df0:	01401004 	movi	r5,64
 4011df4:	2909c83a 	sub	r4,r5,r4
 4011df8:	4108983a 	sll	r4,r8,r4
 4011dfc:	2448b03a 	or	r4,r4,r17
 4011e00:	2008c03a 	cmpne	r4,r4,zero
 4011e04:	3922b03a 	or	r17,r7,r4
 4011e08:	0009883a 	mov	r4,zero
 4011e0c:	003f8d06 	br	4011c44 <__alt_data_end+0xfc011c44>
 4011e10:	0007883a 	mov	r3,zero
 4011e14:	003fdd06 	br	4011d8c <__alt_data_end+0xfc011d8c>
 4011e18:	0009883a 	mov	r4,zero
 4011e1c:	003ff706 	br	4011dfc <__alt_data_end+0xfc011dfc>

04011e20 <__divdf3>:
 4011e20:	defff004 	addi	sp,sp,-64
 4011e24:	dc800815 	stw	r18,32(sp)
 4011e28:	2824d53a 	srli	r18,r5,20
 4011e2c:	dd800c15 	stw	r22,48(sp)
 4011e30:	282cd7fa 	srli	r22,r5,31
 4011e34:	dc000615 	stw	r16,24(sp)
 4011e38:	04000434 	movhi	r16,16
 4011e3c:	843fffc4 	addi	r16,r16,-1
 4011e40:	dfc00f15 	stw	ra,60(sp)
 4011e44:	df000e15 	stw	fp,56(sp)
 4011e48:	ddc00d15 	stw	r23,52(sp)
 4011e4c:	dd400b15 	stw	r21,44(sp)
 4011e50:	dd000a15 	stw	r20,40(sp)
 4011e54:	dcc00915 	stw	r19,36(sp)
 4011e58:	dc400715 	stw	r17,28(sp)
 4011e5c:	9481ffcc 	andi	r18,r18,2047
 4011e60:	2c20703a 	and	r16,r5,r16
 4011e64:	b2003fcc 	andi	r8,r22,255
 4011e68:	90006126 	beq	r18,zero,4011ff0 <__divdf3+0x1d0>
 4011e6c:	0081ffc4 	movi	r2,2047
 4011e70:	202b883a 	mov	r21,r4
 4011e74:	90803726 	beq	r18,r2,4011f54 <__divdf3+0x134>
 4011e78:	80800434 	orhi	r2,r16,16
 4011e7c:	100490fa 	slli	r2,r2,3
 4011e80:	2020d77a 	srli	r16,r4,29
 4011e84:	202a90fa 	slli	r21,r4,3
 4011e88:	94bf0044 	addi	r18,r18,-1023
 4011e8c:	80a0b03a 	or	r16,r16,r2
 4011e90:	0013883a 	mov	r9,zero
 4011e94:	000b883a 	mov	r5,zero
 4011e98:	3806d53a 	srli	r3,r7,20
 4011e9c:	382ed7fa 	srli	r23,r7,31
 4011ea0:	04400434 	movhi	r17,16
 4011ea4:	8c7fffc4 	addi	r17,r17,-1
 4011ea8:	18c1ffcc 	andi	r3,r3,2047
 4011eac:	3029883a 	mov	r20,r6
 4011eb0:	3c62703a 	and	r17,r7,r17
 4011eb4:	bf003fcc 	andi	fp,r23,255
 4011eb8:	18006e26 	beq	r3,zero,4012074 <__divdf3+0x254>
 4011ebc:	0081ffc4 	movi	r2,2047
 4011ec0:	18806626 	beq	r3,r2,401205c <__divdf3+0x23c>
 4011ec4:	88800434 	orhi	r2,r17,16
 4011ec8:	100490fa 	slli	r2,r2,3
 4011ecc:	3022d77a 	srli	r17,r6,29
 4011ed0:	302890fa 	slli	r20,r6,3
 4011ed4:	18ff0044 	addi	r3,r3,-1023
 4011ed8:	88a2b03a 	or	r17,r17,r2
 4011edc:	000f883a 	mov	r7,zero
 4011ee0:	b5e6f03a 	xor	r19,r22,r23
 4011ee4:	3a4cb03a 	or	r6,r7,r9
 4011ee8:	008003c4 	movi	r2,15
 4011eec:	9809883a 	mov	r4,r19
 4011ef0:	90c7c83a 	sub	r3,r18,r3
 4011ef4:	9cc03fcc 	andi	r19,r19,255
 4011ef8:	11809636 	bltu	r2,r6,4012154 <__divdf3+0x334>
 4011efc:	300c90ba 	slli	r6,r6,2
 4011f00:	00810074 	movhi	r2,1025
 4011f04:	1087c504 	addi	r2,r2,7956
 4011f08:	308d883a 	add	r6,r6,r2
 4011f0c:	30800017 	ldw	r2,0(r6)
 4011f10:	1000683a 	jmp	r2
 4011f14:	04012154 	movui	r16,1157
 4011f18:	04011f8c 	andi	r16,zero,1150
 4011f1c:	04012144 	movi	r16,1157
 4011f20:	04011f80 	call	4011f8 <__alt_mem_onchip_memory+0x4011f8>
 4011f24:	04012144 	movi	r16,1157
 4011f28:	04012118 	cmpnei	r16,zero,1156
 4011f2c:	04012144 	movi	r16,1157
 4011f30:	04011f80 	call	4011f8 <__alt_mem_onchip_memory+0x4011f8>
 4011f34:	04011f8c 	andi	r16,zero,1150
 4011f38:	04011f8c 	andi	r16,zero,1150
 4011f3c:	04012118 	cmpnei	r16,zero,1156
 4011f40:	04011f80 	call	4011f8 <__alt_mem_onchip_memory+0x4011f8>
 4011f44:	04011f70 	cmpltui	r16,zero,1149
 4011f48:	04011f70 	cmpltui	r16,zero,1149
 4011f4c:	04011f70 	cmpltui	r16,zero,1149
 4011f50:	040124dc 	xori	r16,zero,1171
 4011f54:	2404b03a 	or	r2,r4,r16
 4011f58:	10006c1e 	bne	r2,zero,401210c <__divdf3+0x2ec>
 4011f5c:	02400204 	movi	r9,8
 4011f60:	0021883a 	mov	r16,zero
 4011f64:	002b883a 	mov	r21,zero
 4011f68:	01400084 	movi	r5,2
 4011f6c:	003fca06 	br	4011e98 <__alt_data_end+0xfc011e98>
 4011f70:	8023883a 	mov	r17,r16
 4011f74:	a829883a 	mov	r20,r21
 4011f78:	4039883a 	mov	fp,r8
 4011f7c:	280f883a 	mov	r7,r5
 4011f80:	00800084 	movi	r2,2
 4011f84:	3881601e 	bne	r7,r2,4012508 <__divdf3+0x6e8>
 4011f88:	e027883a 	mov	r19,fp
 4011f8c:	9900004c 	andi	r4,r19,1
 4011f90:	0081ffc4 	movi	r2,2047
 4011f94:	0021883a 	mov	r16,zero
 4011f98:	002b883a 	mov	r21,zero
 4011f9c:	1004953a 	slli	r2,r2,20
 4011fa0:	20c03fcc 	andi	r3,r4,255
 4011fa4:	01400434 	movhi	r5,16
 4011fa8:	297fffc4 	addi	r5,r5,-1
 4011fac:	180697fa 	slli	r3,r3,31
 4011fb0:	8160703a 	and	r16,r16,r5
 4011fb4:	80a0b03a 	or	r16,r16,r2
 4011fb8:	80c6b03a 	or	r3,r16,r3
 4011fbc:	a805883a 	mov	r2,r21
 4011fc0:	dfc00f17 	ldw	ra,60(sp)
 4011fc4:	df000e17 	ldw	fp,56(sp)
 4011fc8:	ddc00d17 	ldw	r23,52(sp)
 4011fcc:	dd800c17 	ldw	r22,48(sp)
 4011fd0:	dd400b17 	ldw	r21,44(sp)
 4011fd4:	dd000a17 	ldw	r20,40(sp)
 4011fd8:	dcc00917 	ldw	r19,36(sp)
 4011fdc:	dc800817 	ldw	r18,32(sp)
 4011fe0:	dc400717 	ldw	r17,28(sp)
 4011fe4:	dc000617 	ldw	r16,24(sp)
 4011fe8:	dec01004 	addi	sp,sp,64
 4011fec:	f800283a 	ret
 4011ff0:	2404b03a 	or	r2,r4,r16
 4011ff4:	2023883a 	mov	r17,r4
 4011ff8:	10003f26 	beq	r2,zero,40120f8 <__divdf3+0x2d8>
 4011ffc:	80015e26 	beq	r16,zero,4012578 <__divdf3+0x758>
 4012000:	8009883a 	mov	r4,r16
 4012004:	d9800215 	stw	r6,8(sp)
 4012008:	d9c00515 	stw	r7,20(sp)
 401200c:	da000415 	stw	r8,16(sp)
 4012010:	4013db40 	call	4013db4 <__clzsi2>
 4012014:	d9800217 	ldw	r6,8(sp)
 4012018:	d9c00517 	ldw	r7,20(sp)
 401201c:	da000417 	ldw	r8,16(sp)
 4012020:	113ffd44 	addi	r4,r2,-11
 4012024:	00c00704 	movi	r3,28
 4012028:	19014f16 	blt	r3,r4,4012568 <__divdf3+0x748>
 401202c:	00c00744 	movi	r3,29
 4012030:	157ffe04 	addi	r21,r2,-8
 4012034:	1907c83a 	sub	r3,r3,r4
 4012038:	8560983a 	sll	r16,r16,r21
 401203c:	88c6d83a 	srl	r3,r17,r3
 4012040:	8d6a983a 	sll	r21,r17,r21
 4012044:	1c20b03a 	or	r16,r3,r16
 4012048:	1080fcc4 	addi	r2,r2,1011
 401204c:	00a5c83a 	sub	r18,zero,r2
 4012050:	0013883a 	mov	r9,zero
 4012054:	000b883a 	mov	r5,zero
 4012058:	003f8f06 	br	4011e98 <__alt_data_end+0xfc011e98>
 401205c:	3444b03a 	or	r2,r6,r17
 4012060:	1000231e 	bne	r2,zero,40120f0 <__divdf3+0x2d0>
 4012064:	0023883a 	mov	r17,zero
 4012068:	0029883a 	mov	r20,zero
 401206c:	01c00084 	movi	r7,2
 4012070:	003f9b06 	br	4011ee0 <__alt_data_end+0xfc011ee0>
 4012074:	3444b03a 	or	r2,r6,r17
 4012078:	10001926 	beq	r2,zero,40120e0 <__divdf3+0x2c0>
 401207c:	88014b26 	beq	r17,zero,40125ac <__divdf3+0x78c>
 4012080:	8809883a 	mov	r4,r17
 4012084:	d9400115 	stw	r5,4(sp)
 4012088:	d9800215 	stw	r6,8(sp)
 401208c:	da000415 	stw	r8,16(sp)
 4012090:	da400315 	stw	r9,12(sp)
 4012094:	4013db40 	call	4013db4 <__clzsi2>
 4012098:	d9400117 	ldw	r5,4(sp)
 401209c:	d9800217 	ldw	r6,8(sp)
 40120a0:	da000417 	ldw	r8,16(sp)
 40120a4:	da400317 	ldw	r9,12(sp)
 40120a8:	113ffd44 	addi	r4,r2,-11
 40120ac:	00c00704 	movi	r3,28
 40120b0:	19013a16 	blt	r3,r4,401259c <__divdf3+0x77c>
 40120b4:	00c00744 	movi	r3,29
 40120b8:	153ffe04 	addi	r20,r2,-8
 40120bc:	1907c83a 	sub	r3,r3,r4
 40120c0:	8d22983a 	sll	r17,r17,r20
 40120c4:	30c6d83a 	srl	r3,r6,r3
 40120c8:	3528983a 	sll	r20,r6,r20
 40120cc:	1c62b03a 	or	r17,r3,r17
 40120d0:	1080fcc4 	addi	r2,r2,1011
 40120d4:	0087c83a 	sub	r3,zero,r2
 40120d8:	000f883a 	mov	r7,zero
 40120dc:	003f8006 	br	4011ee0 <__alt_data_end+0xfc011ee0>
 40120e0:	0023883a 	mov	r17,zero
 40120e4:	0029883a 	mov	r20,zero
 40120e8:	01c00044 	movi	r7,1
 40120ec:	003f7c06 	br	4011ee0 <__alt_data_end+0xfc011ee0>
 40120f0:	01c000c4 	movi	r7,3
 40120f4:	003f7a06 	br	4011ee0 <__alt_data_end+0xfc011ee0>
 40120f8:	02400104 	movi	r9,4
 40120fc:	0021883a 	mov	r16,zero
 4012100:	002b883a 	mov	r21,zero
 4012104:	01400044 	movi	r5,1
 4012108:	003f6306 	br	4011e98 <__alt_data_end+0xfc011e98>
 401210c:	02400304 	movi	r9,12
 4012110:	014000c4 	movi	r5,3
 4012114:	003f6006 	br	4011e98 <__alt_data_end+0xfc011e98>
 4012118:	04000434 	movhi	r16,16
 401211c:	0009883a 	mov	r4,zero
 4012120:	843fffc4 	addi	r16,r16,-1
 4012124:	057fffc4 	movi	r21,-1
 4012128:	0081ffc4 	movi	r2,2047
 401212c:	003f9b06 	br	4011f9c <__alt_data_end+0xfc011f9c>
 4012130:	00c00044 	movi	r3,1
 4012134:	1887c83a 	sub	r3,r3,r2
 4012138:	01000e04 	movi	r4,56
 401213c:	20c1530e 	bge	r4,r3,401268c <__divdf3+0x86c>
 4012140:	9900004c 	andi	r4,r19,1
 4012144:	0005883a 	mov	r2,zero
 4012148:	0021883a 	mov	r16,zero
 401214c:	002b883a 	mov	r21,zero
 4012150:	003f9206 	br	4011f9c <__alt_data_end+0xfc011f9c>
 4012154:	8c012e36 	bltu	r17,r16,4012610 <__divdf3+0x7f0>
 4012158:	84412c26 	beq	r16,r17,401260c <__divdf3+0x7ec>
 401215c:	a82f883a 	mov	r23,r21
 4012160:	18ffffc4 	addi	r3,r3,-1
 4012164:	002b883a 	mov	r21,zero
 4012168:	a004d63a 	srli	r2,r20,24
 401216c:	8822923a 	slli	r17,r17,8
 4012170:	a028923a 	slli	r20,r20,8
 4012174:	8009883a 	mov	r4,r16
 4012178:	88acb03a 	or	r22,r17,r2
 401217c:	dd000015 	stw	r20,0(sp)
 4012180:	b028d43a 	srli	r20,r22,16
 4012184:	d8c00215 	stw	r3,8(sp)
 4012188:	b4bfffcc 	andi	r18,r22,65535
 401218c:	a00b883a 	mov	r5,r20
 4012190:	4006c140 	call	4006c14 <__udivsi3>
 4012194:	100b883a 	mov	r5,r2
 4012198:	9009883a 	mov	r4,r18
 401219c:	1023883a 	mov	r17,r2
 40121a0:	4006cd00 	call	4006cd0 <__mulsi3>
 40121a4:	8009883a 	mov	r4,r16
 40121a8:	a00b883a 	mov	r5,r20
 40121ac:	1039883a 	mov	fp,r2
 40121b0:	4006c780 	call	4006c78 <__umodsi3>
 40121b4:	1004943a 	slli	r2,r2,16
 40121b8:	b808d43a 	srli	r4,r23,16
 40121bc:	d8c00217 	ldw	r3,8(sp)
 40121c0:	2084b03a 	or	r2,r4,r2
 40121c4:	1700062e 	bgeu	r2,fp,40121e0 <__divdf3+0x3c0>
 40121c8:	1585883a 	add	r2,r2,r22
 40121cc:	893fffc4 	addi	r4,r17,-1
 40121d0:	15811d36 	bltu	r2,r22,4012648 <__divdf3+0x828>
 40121d4:	17011c2e 	bgeu	r2,fp,4012648 <__divdf3+0x828>
 40121d8:	8c7fff84 	addi	r17,r17,-2
 40121dc:	1585883a 	add	r2,r2,r22
 40121e0:	1739c83a 	sub	fp,r2,fp
 40121e4:	a00b883a 	mov	r5,r20
 40121e8:	e009883a 	mov	r4,fp
 40121ec:	d8c00215 	stw	r3,8(sp)
 40121f0:	4006c140 	call	4006c14 <__udivsi3>
 40121f4:	100b883a 	mov	r5,r2
 40121f8:	9009883a 	mov	r4,r18
 40121fc:	1021883a 	mov	r16,r2
 4012200:	4006cd00 	call	4006cd0 <__mulsi3>
 4012204:	a00b883a 	mov	r5,r20
 4012208:	e009883a 	mov	r4,fp
 401220c:	d8800415 	stw	r2,16(sp)
 4012210:	4006c780 	call	4006c78 <__umodsi3>
 4012214:	1004943a 	slli	r2,r2,16
 4012218:	da000417 	ldw	r8,16(sp)
 401221c:	bdffffcc 	andi	r23,r23,65535
 4012220:	b884b03a 	or	r2,r23,r2
 4012224:	d8c00217 	ldw	r3,8(sp)
 4012228:	1200062e 	bgeu	r2,r8,4012244 <__divdf3+0x424>
 401222c:	1585883a 	add	r2,r2,r22
 4012230:	813fffc4 	addi	r4,r16,-1
 4012234:	15810236 	bltu	r2,r22,4012640 <__divdf3+0x820>
 4012238:	1201012e 	bgeu	r2,r8,4012640 <__divdf3+0x820>
 401223c:	843fff84 	addi	r16,r16,-2
 4012240:	1585883a 	add	r2,r2,r22
 4012244:	8822943a 	slli	r17,r17,16
 4012248:	d9800017 	ldw	r6,0(sp)
 401224c:	1211c83a 	sub	r8,r2,r8
 4012250:	8c22b03a 	or	r17,r17,r16
 4012254:	373fffcc 	andi	fp,r6,65535
 4012258:	8abfffcc 	andi	r10,r17,65535
 401225c:	8820d43a 	srli	r16,r17,16
 4012260:	5009883a 	mov	r4,r10
 4012264:	e00b883a 	mov	r5,fp
 4012268:	302ed43a 	srli	r23,r6,16
 401226c:	d8c00215 	stw	r3,8(sp)
 4012270:	da000415 	stw	r8,16(sp)
 4012274:	da800115 	stw	r10,4(sp)
 4012278:	4006cd00 	call	4006cd0 <__mulsi3>
 401227c:	800b883a 	mov	r5,r16
 4012280:	e009883a 	mov	r4,fp
 4012284:	d8800515 	stw	r2,20(sp)
 4012288:	4006cd00 	call	4006cd0 <__mulsi3>
 401228c:	8009883a 	mov	r4,r16
 4012290:	b80b883a 	mov	r5,r23
 4012294:	d8800315 	stw	r2,12(sp)
 4012298:	4006cd00 	call	4006cd0 <__mulsi3>
 401229c:	da800117 	ldw	r10,4(sp)
 40122a0:	b80b883a 	mov	r5,r23
 40122a4:	1021883a 	mov	r16,r2
 40122a8:	5009883a 	mov	r4,r10
 40122ac:	4006cd00 	call	4006cd0 <__mulsi3>
 40122b0:	d9c00517 	ldw	r7,20(sp)
 40122b4:	da400317 	ldw	r9,12(sp)
 40122b8:	d8c00217 	ldw	r3,8(sp)
 40122bc:	3808d43a 	srli	r4,r7,16
 40122c0:	1245883a 	add	r2,r2,r9
 40122c4:	da000417 	ldw	r8,16(sp)
 40122c8:	2085883a 	add	r2,r4,r2
 40122cc:	1240022e 	bgeu	r2,r9,40122d8 <__divdf3+0x4b8>
 40122d0:	01000074 	movhi	r4,1
 40122d4:	8121883a 	add	r16,r16,r4
 40122d8:	1008d43a 	srli	r4,r2,16
 40122dc:	1004943a 	slli	r2,r2,16
 40122e0:	39ffffcc 	andi	r7,r7,65535
 40122e4:	2409883a 	add	r4,r4,r16
 40122e8:	11c5883a 	add	r2,r2,r7
 40122ec:	4100bb36 	bltu	r8,r4,40125dc <__divdf3+0x7bc>
 40122f0:	4100d726 	beq	r8,r4,4012650 <__divdf3+0x830>
 40122f4:	4109c83a 	sub	r4,r8,r4
 40122f8:	a8a1c83a 	sub	r16,r21,r2
 40122fc:	ac2b803a 	cmpltu	r21,r21,r16
 4012300:	256bc83a 	sub	r21,r4,r21
 4012304:	b540d926 	beq	r22,r21,401266c <__divdf3+0x84c>
 4012308:	a00b883a 	mov	r5,r20
 401230c:	a809883a 	mov	r4,r21
 4012310:	d8c00215 	stw	r3,8(sp)
 4012314:	4006c140 	call	4006c14 <__udivsi3>
 4012318:	100b883a 	mov	r5,r2
 401231c:	9009883a 	mov	r4,r18
 4012320:	d8800515 	stw	r2,20(sp)
 4012324:	4006cd00 	call	4006cd0 <__mulsi3>
 4012328:	a809883a 	mov	r4,r21
 401232c:	a00b883a 	mov	r5,r20
 4012330:	d8800415 	stw	r2,16(sp)
 4012334:	4006c780 	call	4006c78 <__umodsi3>
 4012338:	1004943a 	slli	r2,r2,16
 401233c:	8008d43a 	srli	r4,r16,16
 4012340:	da000417 	ldw	r8,16(sp)
 4012344:	d8c00217 	ldw	r3,8(sp)
 4012348:	2084b03a 	or	r2,r4,r2
 401234c:	d9c00517 	ldw	r7,20(sp)
 4012350:	1200062e 	bgeu	r2,r8,401236c <__divdf3+0x54c>
 4012354:	1585883a 	add	r2,r2,r22
 4012358:	393fffc4 	addi	r4,r7,-1
 401235c:	1580c536 	bltu	r2,r22,4012674 <__divdf3+0x854>
 4012360:	1200c42e 	bgeu	r2,r8,4012674 <__divdf3+0x854>
 4012364:	39ffff84 	addi	r7,r7,-2
 4012368:	1585883a 	add	r2,r2,r22
 401236c:	122bc83a 	sub	r21,r2,r8
 4012370:	a00b883a 	mov	r5,r20
 4012374:	a809883a 	mov	r4,r21
 4012378:	d8c00215 	stw	r3,8(sp)
 401237c:	d9c00515 	stw	r7,20(sp)
 4012380:	4006c140 	call	4006c14 <__udivsi3>
 4012384:	9009883a 	mov	r4,r18
 4012388:	100b883a 	mov	r5,r2
 401238c:	d8800415 	stw	r2,16(sp)
 4012390:	4006cd00 	call	4006cd0 <__mulsi3>
 4012394:	a809883a 	mov	r4,r21
 4012398:	a00b883a 	mov	r5,r20
 401239c:	1025883a 	mov	r18,r2
 40123a0:	4006c780 	call	4006c78 <__umodsi3>
 40123a4:	1004943a 	slli	r2,r2,16
 40123a8:	813fffcc 	andi	r4,r16,65535
 40123ac:	d8c00217 	ldw	r3,8(sp)
 40123b0:	20a0b03a 	or	r16,r4,r2
 40123b4:	d9c00517 	ldw	r7,20(sp)
 40123b8:	da000417 	ldw	r8,16(sp)
 40123bc:	8480062e 	bgeu	r16,r18,40123d8 <__divdf3+0x5b8>
 40123c0:	85a1883a 	add	r16,r16,r22
 40123c4:	40bfffc4 	addi	r2,r8,-1
 40123c8:	8580ac36 	bltu	r16,r22,401267c <__divdf3+0x85c>
 40123cc:	8480ab2e 	bgeu	r16,r18,401267c <__divdf3+0x85c>
 40123d0:	423fff84 	addi	r8,r8,-2
 40123d4:	85a1883a 	add	r16,r16,r22
 40123d8:	3804943a 	slli	r2,r7,16
 40123dc:	84a1c83a 	sub	r16,r16,r18
 40123e0:	e009883a 	mov	r4,fp
 40123e4:	1228b03a 	or	r20,r2,r8
 40123e8:	a1ffffcc 	andi	r7,r20,65535
 40123ec:	a024d43a 	srli	r18,r20,16
 40123f0:	380b883a 	mov	r5,r7
 40123f4:	d8c00215 	stw	r3,8(sp)
 40123f8:	d9c00515 	stw	r7,20(sp)
 40123fc:	4006cd00 	call	4006cd0 <__mulsi3>
 4012400:	900b883a 	mov	r5,r18
 4012404:	e009883a 	mov	r4,fp
 4012408:	102b883a 	mov	r21,r2
 401240c:	4006cd00 	call	4006cd0 <__mulsi3>
 4012410:	900b883a 	mov	r5,r18
 4012414:	b809883a 	mov	r4,r23
 4012418:	1039883a 	mov	fp,r2
 401241c:	4006cd00 	call	4006cd0 <__mulsi3>
 4012420:	d9c00517 	ldw	r7,20(sp)
 4012424:	b80b883a 	mov	r5,r23
 4012428:	1025883a 	mov	r18,r2
 401242c:	3809883a 	mov	r4,r7
 4012430:	4006cd00 	call	4006cd0 <__mulsi3>
 4012434:	a808d43a 	srli	r4,r21,16
 4012438:	1705883a 	add	r2,r2,fp
 401243c:	d8c00217 	ldw	r3,8(sp)
 4012440:	2085883a 	add	r2,r4,r2
 4012444:	1700022e 	bgeu	r2,fp,4012450 <__divdf3+0x630>
 4012448:	01000074 	movhi	r4,1
 401244c:	9125883a 	add	r18,r18,r4
 4012450:	1008d43a 	srli	r4,r2,16
 4012454:	1004943a 	slli	r2,r2,16
 4012458:	ad7fffcc 	andi	r21,r21,65535
 401245c:	2489883a 	add	r4,r4,r18
 4012460:	1545883a 	add	r2,r2,r21
 4012464:	81003836 	bltu	r16,r4,4012548 <__divdf3+0x728>
 4012468:	81003626 	beq	r16,r4,4012544 <__divdf3+0x724>
 401246c:	a5000054 	ori	r20,r20,1
 4012470:	1880ffc4 	addi	r2,r3,1023
 4012474:	00bf2e0e 	bge	zero,r2,4012130 <__alt_data_end+0xfc012130>
 4012478:	a10001cc 	andi	r4,r20,7
 401247c:	20000726 	beq	r4,zero,401249c <__divdf3+0x67c>
 4012480:	a10003cc 	andi	r4,r20,15
 4012484:	01400104 	movi	r5,4
 4012488:	21400426 	beq	r4,r5,401249c <__divdf3+0x67c>
 401248c:	a149883a 	add	r4,r20,r5
 4012490:	2529803a 	cmpltu	r20,r4,r20
 4012494:	8d23883a 	add	r17,r17,r20
 4012498:	2029883a 	mov	r20,r4
 401249c:	8900402c 	andhi	r4,r17,256
 40124a0:	20000426 	beq	r4,zero,40124b4 <__divdf3+0x694>
 40124a4:	18810004 	addi	r2,r3,1024
 40124a8:	00ffc034 	movhi	r3,65280
 40124ac:	18ffffc4 	addi	r3,r3,-1
 40124b0:	88e2703a 	and	r17,r17,r3
 40124b4:	00c1ff84 	movi	r3,2046
 40124b8:	18beb416 	blt	r3,r2,4011f8c <__alt_data_end+0xfc011f8c>
 40124bc:	a028d0fa 	srli	r20,r20,3
 40124c0:	882a977a 	slli	r21,r17,29
 40124c4:	8820927a 	slli	r16,r17,9
 40124c8:	1081ffcc 	andi	r2,r2,2047
 40124cc:	ad2ab03a 	or	r21,r21,r20
 40124d0:	8020d33a 	srli	r16,r16,12
 40124d4:	9900004c 	andi	r4,r19,1
 40124d8:	003eb006 	br	4011f9c <__alt_data_end+0xfc011f9c>
 40124dc:	8080022c 	andhi	r2,r16,8
 40124e0:	10001226 	beq	r2,zero,401252c <__divdf3+0x70c>
 40124e4:	8880022c 	andhi	r2,r17,8
 40124e8:	1000101e 	bne	r2,zero,401252c <__divdf3+0x70c>
 40124ec:	00800434 	movhi	r2,16
 40124f0:	8c000234 	orhi	r16,r17,8
 40124f4:	10bfffc4 	addi	r2,r2,-1
 40124f8:	b809883a 	mov	r4,r23
 40124fc:	80a0703a 	and	r16,r16,r2
 4012500:	a02b883a 	mov	r21,r20
 4012504:	003f0806 	br	4012128 <__alt_data_end+0xfc012128>
 4012508:	008000c4 	movi	r2,3
 401250c:	3880b126 	beq	r7,r2,40127d4 <__divdf3+0x9b4>
 4012510:	00800044 	movi	r2,1
 4012514:	38805b1e 	bne	r7,r2,4012684 <__divdf3+0x864>
 4012518:	e009883a 	mov	r4,fp
 401251c:	0005883a 	mov	r2,zero
 4012520:	0021883a 	mov	r16,zero
 4012524:	002b883a 	mov	r21,zero
 4012528:	003e9c06 	br	4011f9c <__alt_data_end+0xfc011f9c>
 401252c:	00800434 	movhi	r2,16
 4012530:	84000234 	orhi	r16,r16,8
 4012534:	10bfffc4 	addi	r2,r2,-1
 4012538:	b009883a 	mov	r4,r22
 401253c:	80a0703a 	and	r16,r16,r2
 4012540:	003ef906 	br	4012128 <__alt_data_end+0xfc012128>
 4012544:	103fca26 	beq	r2,zero,4012470 <__alt_data_end+0xfc012470>
 4012548:	b421883a 	add	r16,r22,r16
 401254c:	a17fffc4 	addi	r5,r20,-1
 4012550:	8580422e 	bgeu	r16,r22,401265c <__divdf3+0x83c>
 4012554:	2829883a 	mov	r20,r5
 4012558:	813fc41e 	bne	r16,r4,401246c <__alt_data_end+0xfc01246c>
 401255c:	d9800017 	ldw	r6,0(sp)
 4012560:	30bfc21e 	bne	r6,r2,401246c <__alt_data_end+0xfc01246c>
 4012564:	003fc206 	br	4012470 <__alt_data_end+0xfc012470>
 4012568:	143ff604 	addi	r16,r2,-40
 401256c:	8c20983a 	sll	r16,r17,r16
 4012570:	002b883a 	mov	r21,zero
 4012574:	003eb406 	br	4012048 <__alt_data_end+0xfc012048>
 4012578:	d9800215 	stw	r6,8(sp)
 401257c:	d9c00515 	stw	r7,20(sp)
 4012580:	da000415 	stw	r8,16(sp)
 4012584:	4013db40 	call	4013db4 <__clzsi2>
 4012588:	10800804 	addi	r2,r2,32
 401258c:	da000417 	ldw	r8,16(sp)
 4012590:	d9c00517 	ldw	r7,20(sp)
 4012594:	d9800217 	ldw	r6,8(sp)
 4012598:	003ea106 	br	4012020 <__alt_data_end+0xfc012020>
 401259c:	147ff604 	addi	r17,r2,-40
 40125a0:	3462983a 	sll	r17,r6,r17
 40125a4:	0029883a 	mov	r20,zero
 40125a8:	003ec906 	br	40120d0 <__alt_data_end+0xfc0120d0>
 40125ac:	3009883a 	mov	r4,r6
 40125b0:	d9400115 	stw	r5,4(sp)
 40125b4:	d9800215 	stw	r6,8(sp)
 40125b8:	da000415 	stw	r8,16(sp)
 40125bc:	da400315 	stw	r9,12(sp)
 40125c0:	4013db40 	call	4013db4 <__clzsi2>
 40125c4:	10800804 	addi	r2,r2,32
 40125c8:	da400317 	ldw	r9,12(sp)
 40125cc:	da000417 	ldw	r8,16(sp)
 40125d0:	d9800217 	ldw	r6,8(sp)
 40125d4:	d9400117 	ldw	r5,4(sp)
 40125d8:	003eb306 	br	40120a8 <__alt_data_end+0xfc0120a8>
 40125dc:	d9800017 	ldw	r6,0(sp)
 40125e0:	a9ab883a 	add	r21,r21,r6
 40125e4:	a98b803a 	cmpltu	r5,r21,r6
 40125e8:	2d8b883a 	add	r5,r5,r22
 40125ec:	2a11883a 	add	r8,r5,r8
 40125f0:	897fffc4 	addi	r5,r17,-1
 40125f4:	b2000c2e 	bgeu	r22,r8,4012628 <__divdf3+0x808>
 40125f8:	41003f36 	bltu	r8,r4,40126f8 <__divdf3+0x8d8>
 40125fc:	22006c26 	beq	r4,r8,40127b0 <__divdf3+0x990>
 4012600:	4109c83a 	sub	r4,r8,r4
 4012604:	2823883a 	mov	r17,r5
 4012608:	003f3b06 	br	40122f8 <__alt_data_end+0xfc0122f8>
 401260c:	ad3ed336 	bltu	r21,r20,401215c <__alt_data_end+0xfc01215c>
 4012610:	a804d07a 	srli	r2,r21,1
 4012614:	802e97fa 	slli	r23,r16,31
 4012618:	a82a97fa 	slli	r21,r21,31
 401261c:	8020d07a 	srli	r16,r16,1
 4012620:	b8aeb03a 	or	r23,r23,r2
 4012624:	003ed006 	br	4012168 <__alt_data_end+0xfc012168>
 4012628:	b23ff51e 	bne	r22,r8,4012600 <__alt_data_end+0xfc012600>
 401262c:	d9800017 	ldw	r6,0(sp)
 4012630:	a9bff12e 	bgeu	r21,r6,40125f8 <__alt_data_end+0xfc0125f8>
 4012634:	b109c83a 	sub	r4,r22,r4
 4012638:	2823883a 	mov	r17,r5
 401263c:	003f2e06 	br	40122f8 <__alt_data_end+0xfc0122f8>
 4012640:	2021883a 	mov	r16,r4
 4012644:	003eff06 	br	4012244 <__alt_data_end+0xfc012244>
 4012648:	2023883a 	mov	r17,r4
 401264c:	003ee406 	br	40121e0 <__alt_data_end+0xfc0121e0>
 4012650:	a8bfe236 	bltu	r21,r2,40125dc <__alt_data_end+0xfc0125dc>
 4012654:	0009883a 	mov	r4,zero
 4012658:	003f2706 	br	40122f8 <__alt_data_end+0xfc0122f8>
 401265c:	81002d36 	bltu	r16,r4,4012714 <__divdf3+0x8f4>
 4012660:	24005626 	beq	r4,r16,40127bc <__divdf3+0x99c>
 4012664:	2829883a 	mov	r20,r5
 4012668:	003f8006 	br	401246c <__alt_data_end+0xfc01246c>
 401266c:	053fffc4 	movi	r20,-1
 4012670:	003f7f06 	br	4012470 <__alt_data_end+0xfc012470>
 4012674:	200f883a 	mov	r7,r4
 4012678:	003f3c06 	br	401236c <__alt_data_end+0xfc01236c>
 401267c:	1011883a 	mov	r8,r2
 4012680:	003f5506 	br	40123d8 <__alt_data_end+0xfc0123d8>
 4012684:	e027883a 	mov	r19,fp
 4012688:	003f7906 	br	4012470 <__alt_data_end+0xfc012470>
 401268c:	010007c4 	movi	r4,31
 4012690:	20c02816 	blt	r4,r3,4012734 <__divdf3+0x914>
 4012694:	00800804 	movi	r2,32
 4012698:	10c5c83a 	sub	r2,r2,r3
 401269c:	888a983a 	sll	r5,r17,r2
 40126a0:	a0c8d83a 	srl	r4,r20,r3
 40126a4:	a084983a 	sll	r2,r20,r2
 40126a8:	88e2d83a 	srl	r17,r17,r3
 40126ac:	2906b03a 	or	r3,r5,r4
 40126b0:	1004c03a 	cmpne	r2,r2,zero
 40126b4:	1886b03a 	or	r3,r3,r2
 40126b8:	188001cc 	andi	r2,r3,7
 40126bc:	10000726 	beq	r2,zero,40126dc <__divdf3+0x8bc>
 40126c0:	188003cc 	andi	r2,r3,15
 40126c4:	01000104 	movi	r4,4
 40126c8:	11000426 	beq	r2,r4,40126dc <__divdf3+0x8bc>
 40126cc:	1805883a 	mov	r2,r3
 40126d0:	10c00104 	addi	r3,r2,4
 40126d4:	1885803a 	cmpltu	r2,r3,r2
 40126d8:	88a3883a 	add	r17,r17,r2
 40126dc:	8880202c 	andhi	r2,r17,128
 40126e0:	10002926 	beq	r2,zero,4012788 <__divdf3+0x968>
 40126e4:	9900004c 	andi	r4,r19,1
 40126e8:	00800044 	movi	r2,1
 40126ec:	0021883a 	mov	r16,zero
 40126f0:	002b883a 	mov	r21,zero
 40126f4:	003e2906 	br	4011f9c <__alt_data_end+0xfc011f9c>
 40126f8:	d9800017 	ldw	r6,0(sp)
 40126fc:	8c7fff84 	addi	r17,r17,-2
 4012700:	a9ab883a 	add	r21,r21,r6
 4012704:	a98b803a 	cmpltu	r5,r21,r6
 4012708:	2d8b883a 	add	r5,r5,r22
 401270c:	2a11883a 	add	r8,r5,r8
 4012710:	003ef806 	br	40122f4 <__alt_data_end+0xfc0122f4>
 4012714:	d9800017 	ldw	r6,0(sp)
 4012718:	318f883a 	add	r7,r6,r6
 401271c:	398b803a 	cmpltu	r5,r7,r6
 4012720:	2d8d883a 	add	r6,r5,r22
 4012724:	81a1883a 	add	r16,r16,r6
 4012728:	a17fff84 	addi	r5,r20,-2
 401272c:	d9c00015 	stw	r7,0(sp)
 4012730:	003f8806 	br	4012554 <__alt_data_end+0xfc012554>
 4012734:	013ff844 	movi	r4,-31
 4012738:	2085c83a 	sub	r2,r4,r2
 401273c:	8888d83a 	srl	r4,r17,r2
 4012740:	00800804 	movi	r2,32
 4012744:	18802126 	beq	r3,r2,40127cc <__divdf3+0x9ac>
 4012748:	04001004 	movi	r16,64
 401274c:	80c7c83a 	sub	r3,r16,r3
 4012750:	88e0983a 	sll	r16,r17,r3
 4012754:	8504b03a 	or	r2,r16,r20
 4012758:	1004c03a 	cmpne	r2,r2,zero
 401275c:	2084b03a 	or	r2,r4,r2
 4012760:	144001cc 	andi	r17,r2,7
 4012764:	88000d1e 	bne	r17,zero,401279c <__divdf3+0x97c>
 4012768:	0021883a 	mov	r16,zero
 401276c:	102ad0fa 	srli	r21,r2,3
 4012770:	9900004c 	andi	r4,r19,1
 4012774:	0005883a 	mov	r2,zero
 4012778:	ac6ab03a 	or	r21,r21,r17
 401277c:	003e0706 	br	4011f9c <__alt_data_end+0xfc011f9c>
 4012780:	1007883a 	mov	r3,r2
 4012784:	0023883a 	mov	r17,zero
 4012788:	8820927a 	slli	r16,r17,9
 401278c:	1805883a 	mov	r2,r3
 4012790:	8822977a 	slli	r17,r17,29
 4012794:	8020d33a 	srli	r16,r16,12
 4012798:	003ff406 	br	401276c <__alt_data_end+0xfc01276c>
 401279c:	10c003cc 	andi	r3,r2,15
 40127a0:	01000104 	movi	r4,4
 40127a4:	193ff626 	beq	r3,r4,4012780 <__alt_data_end+0xfc012780>
 40127a8:	0023883a 	mov	r17,zero
 40127ac:	003fc806 	br	40126d0 <__alt_data_end+0xfc0126d0>
 40127b0:	a8bfd136 	bltu	r21,r2,40126f8 <__alt_data_end+0xfc0126f8>
 40127b4:	2823883a 	mov	r17,r5
 40127b8:	003fa606 	br	4012654 <__alt_data_end+0xfc012654>
 40127bc:	d9800017 	ldw	r6,0(sp)
 40127c0:	30bfd436 	bltu	r6,r2,4012714 <__alt_data_end+0xfc012714>
 40127c4:	2829883a 	mov	r20,r5
 40127c8:	003f6406 	br	401255c <__alt_data_end+0xfc01255c>
 40127cc:	0021883a 	mov	r16,zero
 40127d0:	003fe006 	br	4012754 <__alt_data_end+0xfc012754>
 40127d4:	00800434 	movhi	r2,16
 40127d8:	8c000234 	orhi	r16,r17,8
 40127dc:	10bfffc4 	addi	r2,r2,-1
 40127e0:	e009883a 	mov	r4,fp
 40127e4:	80a0703a 	and	r16,r16,r2
 40127e8:	a02b883a 	mov	r21,r20
 40127ec:	003e4e06 	br	4012128 <__alt_data_end+0xfc012128>

040127f0 <__eqdf2>:
 40127f0:	2804d53a 	srli	r2,r5,20
 40127f4:	3806d53a 	srli	r3,r7,20
 40127f8:	02000434 	movhi	r8,16
 40127fc:	423fffc4 	addi	r8,r8,-1
 4012800:	1081ffcc 	andi	r2,r2,2047
 4012804:	0281ffc4 	movi	r10,2047
 4012808:	2a12703a 	and	r9,r5,r8
 401280c:	18c1ffcc 	andi	r3,r3,2047
 4012810:	3a10703a 	and	r8,r7,r8
 4012814:	280ad7fa 	srli	r5,r5,31
 4012818:	380ed7fa 	srli	r7,r7,31
 401281c:	12801026 	beq	r2,r10,4012860 <__eqdf2+0x70>
 4012820:	0281ffc4 	movi	r10,2047
 4012824:	1a800a26 	beq	r3,r10,4012850 <__eqdf2+0x60>
 4012828:	10c00226 	beq	r2,r3,4012834 <__eqdf2+0x44>
 401282c:	00800044 	movi	r2,1
 4012830:	f800283a 	ret
 4012834:	4a3ffd1e 	bne	r9,r8,401282c <__alt_data_end+0xfc01282c>
 4012838:	21bffc1e 	bne	r4,r6,401282c <__alt_data_end+0xfc01282c>
 401283c:	29c00c26 	beq	r5,r7,4012870 <__eqdf2+0x80>
 4012840:	103ffa1e 	bne	r2,zero,401282c <__alt_data_end+0xfc01282c>
 4012844:	2244b03a 	or	r2,r4,r9
 4012848:	1004c03a 	cmpne	r2,r2,zero
 401284c:	f800283a 	ret
 4012850:	3214b03a 	or	r10,r6,r8
 4012854:	503ff426 	beq	r10,zero,4012828 <__alt_data_end+0xfc012828>
 4012858:	00800044 	movi	r2,1
 401285c:	f800283a 	ret
 4012860:	2254b03a 	or	r10,r4,r9
 4012864:	503fee26 	beq	r10,zero,4012820 <__alt_data_end+0xfc012820>
 4012868:	00800044 	movi	r2,1
 401286c:	f800283a 	ret
 4012870:	0005883a 	mov	r2,zero
 4012874:	f800283a 	ret

04012878 <__gedf2>:
 4012878:	2804d53a 	srli	r2,r5,20
 401287c:	3806d53a 	srli	r3,r7,20
 4012880:	02000434 	movhi	r8,16
 4012884:	423fffc4 	addi	r8,r8,-1
 4012888:	1081ffcc 	andi	r2,r2,2047
 401288c:	0241ffc4 	movi	r9,2047
 4012890:	2a14703a 	and	r10,r5,r8
 4012894:	18c1ffcc 	andi	r3,r3,2047
 4012898:	3a10703a 	and	r8,r7,r8
 401289c:	280ad7fa 	srli	r5,r5,31
 40128a0:	380ed7fa 	srli	r7,r7,31
 40128a4:	12401d26 	beq	r2,r9,401291c <__gedf2+0xa4>
 40128a8:	0241ffc4 	movi	r9,2047
 40128ac:	1a401226 	beq	r3,r9,40128f8 <__gedf2+0x80>
 40128b0:	1000081e 	bne	r2,zero,40128d4 <__gedf2+0x5c>
 40128b4:	2296b03a 	or	r11,r4,r10
 40128b8:	5813003a 	cmpeq	r9,r11,zero
 40128bc:	1800091e 	bne	r3,zero,40128e4 <__gedf2+0x6c>
 40128c0:	3218b03a 	or	r12,r6,r8
 40128c4:	6000071e 	bne	r12,zero,40128e4 <__gedf2+0x6c>
 40128c8:	0005883a 	mov	r2,zero
 40128cc:	5800101e 	bne	r11,zero,4012910 <__gedf2+0x98>
 40128d0:	f800283a 	ret
 40128d4:	18000c1e 	bne	r3,zero,4012908 <__gedf2+0x90>
 40128d8:	3212b03a 	or	r9,r6,r8
 40128dc:	48000c26 	beq	r9,zero,4012910 <__gedf2+0x98>
 40128e0:	0013883a 	mov	r9,zero
 40128e4:	39c03fcc 	andi	r7,r7,255
 40128e8:	48000826 	beq	r9,zero,401290c <__gedf2+0x94>
 40128ec:	38000926 	beq	r7,zero,4012914 <__gedf2+0x9c>
 40128f0:	00800044 	movi	r2,1
 40128f4:	f800283a 	ret
 40128f8:	3212b03a 	or	r9,r6,r8
 40128fc:	483fec26 	beq	r9,zero,40128b0 <__alt_data_end+0xfc0128b0>
 4012900:	00bfff84 	movi	r2,-2
 4012904:	f800283a 	ret
 4012908:	39c03fcc 	andi	r7,r7,255
 401290c:	29c00626 	beq	r5,r7,4012928 <__gedf2+0xb0>
 4012910:	283ff726 	beq	r5,zero,40128f0 <__alt_data_end+0xfc0128f0>
 4012914:	00bfffc4 	movi	r2,-1
 4012918:	f800283a 	ret
 401291c:	2292b03a 	or	r9,r4,r10
 4012920:	483fe126 	beq	r9,zero,40128a8 <__alt_data_end+0xfc0128a8>
 4012924:	003ff606 	br	4012900 <__alt_data_end+0xfc012900>
 4012928:	18bff916 	blt	r3,r2,4012910 <__alt_data_end+0xfc012910>
 401292c:	10c00316 	blt	r2,r3,401293c <__gedf2+0xc4>
 4012930:	42bff736 	bltu	r8,r10,4012910 <__alt_data_end+0xfc012910>
 4012934:	52000326 	beq	r10,r8,4012944 <__gedf2+0xcc>
 4012938:	5200042e 	bgeu	r10,r8,401294c <__gedf2+0xd4>
 401293c:	283fec1e 	bne	r5,zero,40128f0 <__alt_data_end+0xfc0128f0>
 4012940:	003ff406 	br	4012914 <__alt_data_end+0xfc012914>
 4012944:	313ff236 	bltu	r6,r4,4012910 <__alt_data_end+0xfc012910>
 4012948:	21bffc36 	bltu	r4,r6,401293c <__alt_data_end+0xfc01293c>
 401294c:	0005883a 	mov	r2,zero
 4012950:	f800283a 	ret

04012954 <__ledf2>:
 4012954:	2804d53a 	srli	r2,r5,20
 4012958:	3810d53a 	srli	r8,r7,20
 401295c:	00c00434 	movhi	r3,16
 4012960:	18ffffc4 	addi	r3,r3,-1
 4012964:	1081ffcc 	andi	r2,r2,2047
 4012968:	0241ffc4 	movi	r9,2047
 401296c:	28d4703a 	and	r10,r5,r3
 4012970:	4201ffcc 	andi	r8,r8,2047
 4012974:	38c6703a 	and	r3,r7,r3
 4012978:	280ad7fa 	srli	r5,r5,31
 401297c:	380ed7fa 	srli	r7,r7,31
 4012980:	12401f26 	beq	r2,r9,4012a00 <__ledf2+0xac>
 4012984:	0241ffc4 	movi	r9,2047
 4012988:	42401426 	beq	r8,r9,40129dc <__ledf2+0x88>
 401298c:	1000091e 	bne	r2,zero,40129b4 <__ledf2+0x60>
 4012990:	2296b03a 	or	r11,r4,r10
 4012994:	5813003a 	cmpeq	r9,r11,zero
 4012998:	29403fcc 	andi	r5,r5,255
 401299c:	40000a1e 	bne	r8,zero,40129c8 <__ledf2+0x74>
 40129a0:	30d8b03a 	or	r12,r6,r3
 40129a4:	6000081e 	bne	r12,zero,40129c8 <__ledf2+0x74>
 40129a8:	0005883a 	mov	r2,zero
 40129ac:	5800111e 	bne	r11,zero,40129f4 <__ledf2+0xa0>
 40129b0:	f800283a 	ret
 40129b4:	29403fcc 	andi	r5,r5,255
 40129b8:	40000c1e 	bne	r8,zero,40129ec <__ledf2+0x98>
 40129bc:	30d2b03a 	or	r9,r6,r3
 40129c0:	48000c26 	beq	r9,zero,40129f4 <__ledf2+0xa0>
 40129c4:	0013883a 	mov	r9,zero
 40129c8:	39c03fcc 	andi	r7,r7,255
 40129cc:	48000826 	beq	r9,zero,40129f0 <__ledf2+0x9c>
 40129d0:	38001126 	beq	r7,zero,4012a18 <__ledf2+0xc4>
 40129d4:	00800044 	movi	r2,1
 40129d8:	f800283a 	ret
 40129dc:	30d2b03a 	or	r9,r6,r3
 40129e0:	483fea26 	beq	r9,zero,401298c <__alt_data_end+0xfc01298c>
 40129e4:	00800084 	movi	r2,2
 40129e8:	f800283a 	ret
 40129ec:	39c03fcc 	andi	r7,r7,255
 40129f0:	39400726 	beq	r7,r5,4012a10 <__ledf2+0xbc>
 40129f4:	2800081e 	bne	r5,zero,4012a18 <__ledf2+0xc4>
 40129f8:	00800044 	movi	r2,1
 40129fc:	f800283a 	ret
 4012a00:	2292b03a 	or	r9,r4,r10
 4012a04:	483fdf26 	beq	r9,zero,4012984 <__alt_data_end+0xfc012984>
 4012a08:	00800084 	movi	r2,2
 4012a0c:	f800283a 	ret
 4012a10:	4080030e 	bge	r8,r2,4012a20 <__ledf2+0xcc>
 4012a14:	383fef26 	beq	r7,zero,40129d4 <__alt_data_end+0xfc0129d4>
 4012a18:	00bfffc4 	movi	r2,-1
 4012a1c:	f800283a 	ret
 4012a20:	123feb16 	blt	r2,r8,40129d0 <__alt_data_end+0xfc0129d0>
 4012a24:	1abff336 	bltu	r3,r10,40129f4 <__alt_data_end+0xfc0129f4>
 4012a28:	50c00326 	beq	r10,r3,4012a38 <__ledf2+0xe4>
 4012a2c:	50c0042e 	bgeu	r10,r3,4012a40 <__ledf2+0xec>
 4012a30:	283fe81e 	bne	r5,zero,40129d4 <__alt_data_end+0xfc0129d4>
 4012a34:	003ff806 	br	4012a18 <__alt_data_end+0xfc012a18>
 4012a38:	313fee36 	bltu	r6,r4,40129f4 <__alt_data_end+0xfc0129f4>
 4012a3c:	21bffc36 	bltu	r4,r6,4012a30 <__alt_data_end+0xfc012a30>
 4012a40:	0005883a 	mov	r2,zero
 4012a44:	f800283a 	ret

04012a48 <__muldf3>:
 4012a48:	deffee04 	addi	sp,sp,-72
 4012a4c:	dd000c15 	stw	r20,48(sp)
 4012a50:	2828d53a 	srli	r20,r5,20
 4012a54:	ddc00f15 	stw	r23,60(sp)
 4012a58:	282ed7fa 	srli	r23,r5,31
 4012a5c:	dc000815 	stw	r16,32(sp)
 4012a60:	04000434 	movhi	r16,16
 4012a64:	dcc00b15 	stw	r19,44(sp)
 4012a68:	843fffc4 	addi	r16,r16,-1
 4012a6c:	dfc01115 	stw	ra,68(sp)
 4012a70:	df001015 	stw	fp,64(sp)
 4012a74:	dd800e15 	stw	r22,56(sp)
 4012a78:	dd400d15 	stw	r21,52(sp)
 4012a7c:	dc800a15 	stw	r18,40(sp)
 4012a80:	dc400915 	stw	r17,36(sp)
 4012a84:	a501ffcc 	andi	r20,r20,2047
 4012a88:	2c20703a 	and	r16,r5,r16
 4012a8c:	b827883a 	mov	r19,r23
 4012a90:	ba403fcc 	andi	r9,r23,255
 4012a94:	a0006026 	beq	r20,zero,4012c18 <__muldf3+0x1d0>
 4012a98:	0081ffc4 	movi	r2,2047
 4012a9c:	202d883a 	mov	r22,r4
 4012aa0:	a0803626 	beq	r20,r2,4012b7c <__muldf3+0x134>
 4012aa4:	84000434 	orhi	r16,r16,16
 4012aa8:	200ad77a 	srli	r5,r4,29
 4012aac:	800490fa 	slli	r2,r16,3
 4012ab0:	202c90fa 	slli	r22,r4,3
 4012ab4:	a53f0044 	addi	r20,r20,-1023
 4012ab8:	28a0b03a 	or	r16,r5,r2
 4012abc:	002b883a 	mov	r21,zero
 4012ac0:	000b883a 	mov	r5,zero
 4012ac4:	3804d53a 	srli	r2,r7,20
 4012ac8:	3838d7fa 	srli	fp,r7,31
 4012acc:	04400434 	movhi	r17,16
 4012ad0:	8c7fffc4 	addi	r17,r17,-1
 4012ad4:	1081ffcc 	andi	r2,r2,2047
 4012ad8:	3025883a 	mov	r18,r6
 4012adc:	3c62703a 	and	r17,r7,r17
 4012ae0:	e2803fcc 	andi	r10,fp,255
 4012ae4:	10006d26 	beq	r2,zero,4012c9c <__muldf3+0x254>
 4012ae8:	00c1ffc4 	movi	r3,2047
 4012aec:	10c06526 	beq	r2,r3,4012c84 <__muldf3+0x23c>
 4012af0:	8c400434 	orhi	r17,r17,16
 4012af4:	300ed77a 	srli	r7,r6,29
 4012af8:	880690fa 	slli	r3,r17,3
 4012afc:	302490fa 	slli	r18,r6,3
 4012b00:	10bf0044 	addi	r2,r2,-1023
 4012b04:	38e2b03a 	or	r17,r7,r3
 4012b08:	000f883a 	mov	r7,zero
 4012b0c:	a087883a 	add	r3,r20,r2
 4012b10:	010003c4 	movi	r4,15
 4012b14:	3d44b03a 	or	r2,r7,r21
 4012b18:	e5ccf03a 	xor	r6,fp,r23
 4012b1c:	1a000044 	addi	r8,r3,1
 4012b20:	20809b36 	bltu	r4,r2,4012d90 <__muldf3+0x348>
 4012b24:	100490ba 	slli	r2,r2,2
 4012b28:	01010074 	movhi	r4,1025
 4012b2c:	210acf04 	addi	r4,r4,11068
 4012b30:	1105883a 	add	r2,r2,r4
 4012b34:	10800017 	ldw	r2,0(r2)
 4012b38:	1000683a 	jmp	r2
 4012b3c:	04012d90 	cmplti	r16,zero,1206
 4012b40:	04012b9c 	xori	r16,zero,1198
 4012b44:	04012b9c 	xori	r16,zero,1198
 4012b48:	04012b98 	cmpnei	r16,zero,1198
 4012b4c:	04012d6c 	andhi	r16,zero,1205
 4012b50:	04012d6c 	andhi	r16,zero,1205
 4012b54:	04012d54 	movui	r16,1205
 4012b58:	04012b98 	cmpnei	r16,zero,1198
 4012b5c:	04012d6c 	andhi	r16,zero,1205
 4012b60:	04012d54 	movui	r16,1205
 4012b64:	04012d6c 	andhi	r16,zero,1205
 4012b68:	04012b98 	cmpnei	r16,zero,1198
 4012b6c:	04012d7c 	xorhi	r16,zero,1205
 4012b70:	04012d7c 	xorhi	r16,zero,1205
 4012b74:	04012d7c 	xorhi	r16,zero,1205
 4012b78:	040130dc 	xori	r16,zero,1219
 4012b7c:	2404b03a 	or	r2,r4,r16
 4012b80:	1000711e 	bne	r2,zero,4012d48 <__muldf3+0x300>
 4012b84:	05400204 	movi	r21,8
 4012b88:	0021883a 	mov	r16,zero
 4012b8c:	002d883a 	mov	r22,zero
 4012b90:	01400084 	movi	r5,2
 4012b94:	003fcb06 	br	4012ac4 <__alt_data_end+0xfc012ac4>
 4012b98:	500d883a 	mov	r6,r10
 4012b9c:	00800084 	movi	r2,2
 4012ba0:	38805926 	beq	r7,r2,4012d08 <__muldf3+0x2c0>
 4012ba4:	008000c4 	movi	r2,3
 4012ba8:	3881bb26 	beq	r7,r2,4013298 <__muldf3+0x850>
 4012bac:	00800044 	movi	r2,1
 4012bb0:	3881961e 	bne	r7,r2,401320c <__muldf3+0x7c4>
 4012bb4:	3027883a 	mov	r19,r6
 4012bb8:	0005883a 	mov	r2,zero
 4012bbc:	0021883a 	mov	r16,zero
 4012bc0:	002d883a 	mov	r22,zero
 4012bc4:	1004953a 	slli	r2,r2,20
 4012bc8:	98c03fcc 	andi	r3,r19,255
 4012bcc:	04400434 	movhi	r17,16
 4012bd0:	8c7fffc4 	addi	r17,r17,-1
 4012bd4:	180697fa 	slli	r3,r3,31
 4012bd8:	8460703a 	and	r16,r16,r17
 4012bdc:	80a0b03a 	or	r16,r16,r2
 4012be0:	80c6b03a 	or	r3,r16,r3
 4012be4:	b005883a 	mov	r2,r22
 4012be8:	dfc01117 	ldw	ra,68(sp)
 4012bec:	df001017 	ldw	fp,64(sp)
 4012bf0:	ddc00f17 	ldw	r23,60(sp)
 4012bf4:	dd800e17 	ldw	r22,56(sp)
 4012bf8:	dd400d17 	ldw	r21,52(sp)
 4012bfc:	dd000c17 	ldw	r20,48(sp)
 4012c00:	dcc00b17 	ldw	r19,44(sp)
 4012c04:	dc800a17 	ldw	r18,40(sp)
 4012c08:	dc400917 	ldw	r17,36(sp)
 4012c0c:	dc000817 	ldw	r16,32(sp)
 4012c10:	dec01204 	addi	sp,sp,72
 4012c14:	f800283a 	ret
 4012c18:	2404b03a 	or	r2,r4,r16
 4012c1c:	202b883a 	mov	r21,r4
 4012c20:	10004426 	beq	r2,zero,4012d34 <__muldf3+0x2ec>
 4012c24:	80015126 	beq	r16,zero,401316c <__muldf3+0x724>
 4012c28:	8009883a 	mov	r4,r16
 4012c2c:	d9800715 	stw	r6,28(sp)
 4012c30:	d9c00215 	stw	r7,8(sp)
 4012c34:	da400415 	stw	r9,16(sp)
 4012c38:	4013db40 	call	4013db4 <__clzsi2>
 4012c3c:	d9800717 	ldw	r6,28(sp)
 4012c40:	d9c00217 	ldw	r7,8(sp)
 4012c44:	da400417 	ldw	r9,16(sp)
 4012c48:	113ffd44 	addi	r4,r2,-11
 4012c4c:	00c00704 	movi	r3,28
 4012c50:	19014216 	blt	r3,r4,401315c <__muldf3+0x714>
 4012c54:	00c00744 	movi	r3,29
 4012c58:	15bffe04 	addi	r22,r2,-8
 4012c5c:	1907c83a 	sub	r3,r3,r4
 4012c60:	85a0983a 	sll	r16,r16,r22
 4012c64:	a8c6d83a 	srl	r3,r21,r3
 4012c68:	adac983a 	sll	r22,r21,r22
 4012c6c:	1c20b03a 	or	r16,r3,r16
 4012c70:	1080fcc4 	addi	r2,r2,1011
 4012c74:	00a9c83a 	sub	r20,zero,r2
 4012c78:	002b883a 	mov	r21,zero
 4012c7c:	000b883a 	mov	r5,zero
 4012c80:	003f9006 	br	4012ac4 <__alt_data_end+0xfc012ac4>
 4012c84:	3446b03a 	or	r3,r6,r17
 4012c88:	1800281e 	bne	r3,zero,4012d2c <__muldf3+0x2e4>
 4012c8c:	0023883a 	mov	r17,zero
 4012c90:	0025883a 	mov	r18,zero
 4012c94:	01c00084 	movi	r7,2
 4012c98:	003f9c06 	br	4012b0c <__alt_data_end+0xfc012b0c>
 4012c9c:	3446b03a 	or	r3,r6,r17
 4012ca0:	18001e26 	beq	r3,zero,4012d1c <__muldf3+0x2d4>
 4012ca4:	88012126 	beq	r17,zero,401312c <__muldf3+0x6e4>
 4012ca8:	8809883a 	mov	r4,r17
 4012cac:	d9400215 	stw	r5,8(sp)
 4012cb0:	d9800715 	stw	r6,28(sp)
 4012cb4:	da400415 	stw	r9,16(sp)
 4012cb8:	da800315 	stw	r10,12(sp)
 4012cbc:	4013db40 	call	4013db4 <__clzsi2>
 4012cc0:	d9400217 	ldw	r5,8(sp)
 4012cc4:	d9800717 	ldw	r6,28(sp)
 4012cc8:	da400417 	ldw	r9,16(sp)
 4012ccc:	da800317 	ldw	r10,12(sp)
 4012cd0:	113ffd44 	addi	r4,r2,-11
 4012cd4:	00c00704 	movi	r3,28
 4012cd8:	19011016 	blt	r3,r4,401311c <__muldf3+0x6d4>
 4012cdc:	00c00744 	movi	r3,29
 4012ce0:	14bffe04 	addi	r18,r2,-8
 4012ce4:	1907c83a 	sub	r3,r3,r4
 4012ce8:	8ca2983a 	sll	r17,r17,r18
 4012cec:	30c6d83a 	srl	r3,r6,r3
 4012cf0:	34a4983a 	sll	r18,r6,r18
 4012cf4:	1c62b03a 	or	r17,r3,r17
 4012cf8:	1080fcc4 	addi	r2,r2,1011
 4012cfc:	0085c83a 	sub	r2,zero,r2
 4012d00:	000f883a 	mov	r7,zero
 4012d04:	003f8106 	br	4012b0c <__alt_data_end+0xfc012b0c>
 4012d08:	3027883a 	mov	r19,r6
 4012d0c:	0081ffc4 	movi	r2,2047
 4012d10:	0021883a 	mov	r16,zero
 4012d14:	002d883a 	mov	r22,zero
 4012d18:	003faa06 	br	4012bc4 <__alt_data_end+0xfc012bc4>
 4012d1c:	0023883a 	mov	r17,zero
 4012d20:	0025883a 	mov	r18,zero
 4012d24:	01c00044 	movi	r7,1
 4012d28:	003f7806 	br	4012b0c <__alt_data_end+0xfc012b0c>
 4012d2c:	01c000c4 	movi	r7,3
 4012d30:	003f7606 	br	4012b0c <__alt_data_end+0xfc012b0c>
 4012d34:	05400104 	movi	r21,4
 4012d38:	0021883a 	mov	r16,zero
 4012d3c:	002d883a 	mov	r22,zero
 4012d40:	01400044 	movi	r5,1
 4012d44:	003f5f06 	br	4012ac4 <__alt_data_end+0xfc012ac4>
 4012d48:	05400304 	movi	r21,12
 4012d4c:	014000c4 	movi	r5,3
 4012d50:	003f5c06 	br	4012ac4 <__alt_data_end+0xfc012ac4>
 4012d54:	04000434 	movhi	r16,16
 4012d58:	0027883a 	mov	r19,zero
 4012d5c:	843fffc4 	addi	r16,r16,-1
 4012d60:	05bfffc4 	movi	r22,-1
 4012d64:	0081ffc4 	movi	r2,2047
 4012d68:	003f9606 	br	4012bc4 <__alt_data_end+0xfc012bc4>
 4012d6c:	8023883a 	mov	r17,r16
 4012d70:	b025883a 	mov	r18,r22
 4012d74:	280f883a 	mov	r7,r5
 4012d78:	003f8806 	br	4012b9c <__alt_data_end+0xfc012b9c>
 4012d7c:	8023883a 	mov	r17,r16
 4012d80:	b025883a 	mov	r18,r22
 4012d84:	480d883a 	mov	r6,r9
 4012d88:	280f883a 	mov	r7,r5
 4012d8c:	003f8306 	br	4012b9c <__alt_data_end+0xfc012b9c>
 4012d90:	b026d43a 	srli	r19,r22,16
 4012d94:	902ed43a 	srli	r23,r18,16
 4012d98:	b5bfffcc 	andi	r22,r22,65535
 4012d9c:	94bfffcc 	andi	r18,r18,65535
 4012da0:	b00b883a 	mov	r5,r22
 4012da4:	9009883a 	mov	r4,r18
 4012da8:	d8c00515 	stw	r3,20(sp)
 4012dac:	d9800715 	stw	r6,28(sp)
 4012db0:	da000615 	stw	r8,24(sp)
 4012db4:	4006cd00 	call	4006cd0 <__mulsi3>
 4012db8:	980b883a 	mov	r5,r19
 4012dbc:	9009883a 	mov	r4,r18
 4012dc0:	1029883a 	mov	r20,r2
 4012dc4:	4006cd00 	call	4006cd0 <__mulsi3>
 4012dc8:	b80b883a 	mov	r5,r23
 4012dcc:	9809883a 	mov	r4,r19
 4012dd0:	102b883a 	mov	r21,r2
 4012dd4:	4006cd00 	call	4006cd0 <__mulsi3>
 4012dd8:	b809883a 	mov	r4,r23
 4012ddc:	b00b883a 	mov	r5,r22
 4012de0:	1039883a 	mov	fp,r2
 4012de4:	4006cd00 	call	4006cd0 <__mulsi3>
 4012de8:	a008d43a 	srli	r4,r20,16
 4012dec:	1545883a 	add	r2,r2,r21
 4012df0:	d8c00517 	ldw	r3,20(sp)
 4012df4:	2085883a 	add	r2,r4,r2
 4012df8:	d9800717 	ldw	r6,28(sp)
 4012dfc:	da000617 	ldw	r8,24(sp)
 4012e00:	1540022e 	bgeu	r2,r21,4012e0c <__muldf3+0x3c4>
 4012e04:	01000074 	movhi	r4,1
 4012e08:	e139883a 	add	fp,fp,r4
 4012e0c:	100e943a 	slli	r7,r2,16
 4012e10:	1004d43a 	srli	r2,r2,16
 4012e14:	882ad43a 	srli	r21,r17,16
 4012e18:	a53fffcc 	andi	r20,r20,65535
 4012e1c:	8c7fffcc 	andi	r17,r17,65535
 4012e20:	3d29883a 	add	r20,r7,r20
 4012e24:	b00b883a 	mov	r5,r22
 4012e28:	8809883a 	mov	r4,r17
 4012e2c:	d8c00515 	stw	r3,20(sp)
 4012e30:	d9800715 	stw	r6,28(sp)
 4012e34:	da000615 	stw	r8,24(sp)
 4012e38:	dd000115 	stw	r20,4(sp)
 4012e3c:	d8800015 	stw	r2,0(sp)
 4012e40:	4006cd00 	call	4006cd0 <__mulsi3>
 4012e44:	980b883a 	mov	r5,r19
 4012e48:	8809883a 	mov	r4,r17
 4012e4c:	d8800215 	stw	r2,8(sp)
 4012e50:	4006cd00 	call	4006cd0 <__mulsi3>
 4012e54:	9809883a 	mov	r4,r19
 4012e58:	a80b883a 	mov	r5,r21
 4012e5c:	1029883a 	mov	r20,r2
 4012e60:	4006cd00 	call	4006cd0 <__mulsi3>
 4012e64:	b00b883a 	mov	r5,r22
 4012e68:	a809883a 	mov	r4,r21
 4012e6c:	d8800415 	stw	r2,16(sp)
 4012e70:	4006cd00 	call	4006cd0 <__mulsi3>
 4012e74:	d9c00217 	ldw	r7,8(sp)
 4012e78:	1505883a 	add	r2,r2,r20
 4012e7c:	d8c00517 	ldw	r3,20(sp)
 4012e80:	3826d43a 	srli	r19,r7,16
 4012e84:	d9800717 	ldw	r6,28(sp)
 4012e88:	da000617 	ldw	r8,24(sp)
 4012e8c:	9885883a 	add	r2,r19,r2
 4012e90:	da400417 	ldw	r9,16(sp)
 4012e94:	1500022e 	bgeu	r2,r20,4012ea0 <__muldf3+0x458>
 4012e98:	01000074 	movhi	r4,1
 4012e9c:	4913883a 	add	r9,r9,r4
 4012ea0:	1028d43a 	srli	r20,r2,16
 4012ea4:	1004943a 	slli	r2,r2,16
 4012ea8:	802cd43a 	srli	r22,r16,16
 4012eac:	843fffcc 	andi	r16,r16,65535
 4012eb0:	3cffffcc 	andi	r19,r7,65535
 4012eb4:	9009883a 	mov	r4,r18
 4012eb8:	800b883a 	mov	r5,r16
 4012ebc:	a269883a 	add	r20,r20,r9
 4012ec0:	d8c00515 	stw	r3,20(sp)
 4012ec4:	d9800715 	stw	r6,28(sp)
 4012ec8:	da000615 	stw	r8,24(sp)
 4012ecc:	14e7883a 	add	r19,r2,r19
 4012ed0:	4006cd00 	call	4006cd0 <__mulsi3>
 4012ed4:	9009883a 	mov	r4,r18
 4012ed8:	b00b883a 	mov	r5,r22
 4012edc:	d8800315 	stw	r2,12(sp)
 4012ee0:	4006cd00 	call	4006cd0 <__mulsi3>
 4012ee4:	b809883a 	mov	r4,r23
 4012ee8:	b00b883a 	mov	r5,r22
 4012eec:	d8800215 	stw	r2,8(sp)
 4012ef0:	4006cd00 	call	4006cd0 <__mulsi3>
 4012ef4:	b80b883a 	mov	r5,r23
 4012ef8:	8009883a 	mov	r4,r16
 4012efc:	d8800415 	stw	r2,16(sp)
 4012f00:	4006cd00 	call	4006cd0 <__mulsi3>
 4012f04:	da800317 	ldw	r10,12(sp)
 4012f08:	d9c00217 	ldw	r7,8(sp)
 4012f0c:	d9000017 	ldw	r4,0(sp)
 4012f10:	502ed43a 	srli	r23,r10,16
 4012f14:	11c5883a 	add	r2,r2,r7
 4012f18:	24e5883a 	add	r18,r4,r19
 4012f1c:	b885883a 	add	r2,r23,r2
 4012f20:	d8c00517 	ldw	r3,20(sp)
 4012f24:	d9800717 	ldw	r6,28(sp)
 4012f28:	da000617 	ldw	r8,24(sp)
 4012f2c:	da400417 	ldw	r9,16(sp)
 4012f30:	11c0022e 	bgeu	r2,r7,4012f3c <__muldf3+0x4f4>
 4012f34:	01000074 	movhi	r4,1
 4012f38:	4913883a 	add	r9,r9,r4
 4012f3c:	100ed43a 	srli	r7,r2,16
 4012f40:	1004943a 	slli	r2,r2,16
 4012f44:	55ffffcc 	andi	r23,r10,65535
 4012f48:	3a53883a 	add	r9,r7,r9
 4012f4c:	8809883a 	mov	r4,r17
 4012f50:	800b883a 	mov	r5,r16
 4012f54:	d8c00515 	stw	r3,20(sp)
 4012f58:	d9800715 	stw	r6,28(sp)
 4012f5c:	da000615 	stw	r8,24(sp)
 4012f60:	da400415 	stw	r9,16(sp)
 4012f64:	15ef883a 	add	r23,r2,r23
 4012f68:	4006cd00 	call	4006cd0 <__mulsi3>
 4012f6c:	8809883a 	mov	r4,r17
 4012f70:	b00b883a 	mov	r5,r22
 4012f74:	d8800215 	stw	r2,8(sp)
 4012f78:	4006cd00 	call	4006cd0 <__mulsi3>
 4012f7c:	b00b883a 	mov	r5,r22
 4012f80:	a809883a 	mov	r4,r21
 4012f84:	d8800315 	stw	r2,12(sp)
 4012f88:	4006cd00 	call	4006cd0 <__mulsi3>
 4012f8c:	8009883a 	mov	r4,r16
 4012f90:	a80b883a 	mov	r5,r21
 4012f94:	1023883a 	mov	r17,r2
 4012f98:	4006cd00 	call	4006cd0 <__mulsi3>
 4012f9c:	d9c00217 	ldw	r7,8(sp)
 4012fa0:	da800317 	ldw	r10,12(sp)
 4012fa4:	d8c00517 	ldw	r3,20(sp)
 4012fa8:	3808d43a 	srli	r4,r7,16
 4012fac:	1285883a 	add	r2,r2,r10
 4012fb0:	d9800717 	ldw	r6,28(sp)
 4012fb4:	2085883a 	add	r2,r4,r2
 4012fb8:	da000617 	ldw	r8,24(sp)
 4012fbc:	da400417 	ldw	r9,16(sp)
 4012fc0:	1280022e 	bgeu	r2,r10,4012fcc <__muldf3+0x584>
 4012fc4:	01000074 	movhi	r4,1
 4012fc8:	8923883a 	add	r17,r17,r4
 4012fcc:	1008943a 	slli	r4,r2,16
 4012fd0:	39ffffcc 	andi	r7,r7,65535
 4012fd4:	e4b9883a 	add	fp,fp,r18
 4012fd8:	21cf883a 	add	r7,r4,r7
 4012fdc:	e4e7803a 	cmpltu	r19,fp,r19
 4012fe0:	3d0f883a 	add	r7,r7,r20
 4012fe4:	bf39883a 	add	fp,r23,fp
 4012fe8:	99c9883a 	add	r4,r19,r7
 4012fec:	e5ef803a 	cmpltu	r23,fp,r23
 4012ff0:	490b883a 	add	r5,r9,r4
 4012ff4:	1004d43a 	srli	r2,r2,16
 4012ff8:	b965883a 	add	r18,r23,r5
 4012ffc:	24c9803a 	cmpltu	r4,r4,r19
 4013000:	3d29803a 	cmpltu	r20,r7,r20
 4013004:	a128b03a 	or	r20,r20,r4
 4013008:	95ef803a 	cmpltu	r23,r18,r23
 401300c:	2a53803a 	cmpltu	r9,r5,r9
 4013010:	a0a9883a 	add	r20,r20,r2
 4013014:	4deeb03a 	or	r23,r9,r23
 4013018:	a5ef883a 	add	r23,r20,r23
 401301c:	bc63883a 	add	r17,r23,r17
 4013020:	e004927a 	slli	r2,fp,9
 4013024:	d9000117 	ldw	r4,4(sp)
 4013028:	882e927a 	slli	r23,r17,9
 401302c:	9022d5fa 	srli	r17,r18,23
 4013030:	e038d5fa 	srli	fp,fp,23
 4013034:	1104b03a 	or	r2,r2,r4
 4013038:	9024927a 	slli	r18,r18,9
 401303c:	1004c03a 	cmpne	r2,r2,zero
 4013040:	bc62b03a 	or	r17,r23,r17
 4013044:	1738b03a 	or	fp,r2,fp
 4013048:	8880402c 	andhi	r2,r17,256
 401304c:	e4a4b03a 	or	r18,fp,r18
 4013050:	10000726 	beq	r2,zero,4013070 <__muldf3+0x628>
 4013054:	9006d07a 	srli	r3,r18,1
 4013058:	880497fa 	slli	r2,r17,31
 401305c:	9480004c 	andi	r18,r18,1
 4013060:	8822d07a 	srli	r17,r17,1
 4013064:	1ca4b03a 	or	r18,r3,r18
 4013068:	14a4b03a 	or	r18,r2,r18
 401306c:	4007883a 	mov	r3,r8
 4013070:	1880ffc4 	addi	r2,r3,1023
 4013074:	0080460e 	bge	zero,r2,4013190 <__muldf3+0x748>
 4013078:	910001cc 	andi	r4,r18,7
 401307c:	20000726 	beq	r4,zero,401309c <__muldf3+0x654>
 4013080:	910003cc 	andi	r4,r18,15
 4013084:	01400104 	movi	r5,4
 4013088:	21400426 	beq	r4,r5,401309c <__muldf3+0x654>
 401308c:	9149883a 	add	r4,r18,r5
 4013090:	24a5803a 	cmpltu	r18,r4,r18
 4013094:	8ca3883a 	add	r17,r17,r18
 4013098:	2025883a 	mov	r18,r4
 401309c:	8900402c 	andhi	r4,r17,256
 40130a0:	20000426 	beq	r4,zero,40130b4 <__muldf3+0x66c>
 40130a4:	18810004 	addi	r2,r3,1024
 40130a8:	00ffc034 	movhi	r3,65280
 40130ac:	18ffffc4 	addi	r3,r3,-1
 40130b0:	88e2703a 	and	r17,r17,r3
 40130b4:	00c1ff84 	movi	r3,2046
 40130b8:	18bf1316 	blt	r3,r2,4012d08 <__alt_data_end+0xfc012d08>
 40130bc:	882c977a 	slli	r22,r17,29
 40130c0:	9024d0fa 	srli	r18,r18,3
 40130c4:	8822927a 	slli	r17,r17,9
 40130c8:	1081ffcc 	andi	r2,r2,2047
 40130cc:	b4acb03a 	or	r22,r22,r18
 40130d0:	8820d33a 	srli	r16,r17,12
 40130d4:	3027883a 	mov	r19,r6
 40130d8:	003eba06 	br	4012bc4 <__alt_data_end+0xfc012bc4>
 40130dc:	8080022c 	andhi	r2,r16,8
 40130e0:	10000926 	beq	r2,zero,4013108 <__muldf3+0x6c0>
 40130e4:	8880022c 	andhi	r2,r17,8
 40130e8:	1000071e 	bne	r2,zero,4013108 <__muldf3+0x6c0>
 40130ec:	00800434 	movhi	r2,16
 40130f0:	8c000234 	orhi	r16,r17,8
 40130f4:	10bfffc4 	addi	r2,r2,-1
 40130f8:	e027883a 	mov	r19,fp
 40130fc:	80a0703a 	and	r16,r16,r2
 4013100:	902d883a 	mov	r22,r18
 4013104:	003f1706 	br	4012d64 <__alt_data_end+0xfc012d64>
 4013108:	00800434 	movhi	r2,16
 401310c:	84000234 	orhi	r16,r16,8
 4013110:	10bfffc4 	addi	r2,r2,-1
 4013114:	80a0703a 	and	r16,r16,r2
 4013118:	003f1206 	br	4012d64 <__alt_data_end+0xfc012d64>
 401311c:	147ff604 	addi	r17,r2,-40
 4013120:	3462983a 	sll	r17,r6,r17
 4013124:	0025883a 	mov	r18,zero
 4013128:	003ef306 	br	4012cf8 <__alt_data_end+0xfc012cf8>
 401312c:	3009883a 	mov	r4,r6
 4013130:	d9400215 	stw	r5,8(sp)
 4013134:	d9800715 	stw	r6,28(sp)
 4013138:	da400415 	stw	r9,16(sp)
 401313c:	da800315 	stw	r10,12(sp)
 4013140:	4013db40 	call	4013db4 <__clzsi2>
 4013144:	10800804 	addi	r2,r2,32
 4013148:	da800317 	ldw	r10,12(sp)
 401314c:	da400417 	ldw	r9,16(sp)
 4013150:	d9800717 	ldw	r6,28(sp)
 4013154:	d9400217 	ldw	r5,8(sp)
 4013158:	003edd06 	br	4012cd0 <__alt_data_end+0xfc012cd0>
 401315c:	143ff604 	addi	r16,r2,-40
 4013160:	ac20983a 	sll	r16,r21,r16
 4013164:	002d883a 	mov	r22,zero
 4013168:	003ec106 	br	4012c70 <__alt_data_end+0xfc012c70>
 401316c:	d9800715 	stw	r6,28(sp)
 4013170:	d9c00215 	stw	r7,8(sp)
 4013174:	da400415 	stw	r9,16(sp)
 4013178:	4013db40 	call	4013db4 <__clzsi2>
 401317c:	10800804 	addi	r2,r2,32
 4013180:	da400417 	ldw	r9,16(sp)
 4013184:	d9c00217 	ldw	r7,8(sp)
 4013188:	d9800717 	ldw	r6,28(sp)
 401318c:	003eae06 	br	4012c48 <__alt_data_end+0xfc012c48>
 4013190:	00c00044 	movi	r3,1
 4013194:	1887c83a 	sub	r3,r3,r2
 4013198:	01000e04 	movi	r4,56
 401319c:	20fe8516 	blt	r4,r3,4012bb4 <__alt_data_end+0xfc012bb4>
 40131a0:	010007c4 	movi	r4,31
 40131a4:	20c01b16 	blt	r4,r3,4013214 <__muldf3+0x7cc>
 40131a8:	00800804 	movi	r2,32
 40131ac:	10c5c83a 	sub	r2,r2,r3
 40131b0:	888a983a 	sll	r5,r17,r2
 40131b4:	90c8d83a 	srl	r4,r18,r3
 40131b8:	9084983a 	sll	r2,r18,r2
 40131bc:	88e2d83a 	srl	r17,r17,r3
 40131c0:	2906b03a 	or	r3,r5,r4
 40131c4:	1004c03a 	cmpne	r2,r2,zero
 40131c8:	1886b03a 	or	r3,r3,r2
 40131cc:	188001cc 	andi	r2,r3,7
 40131d0:	10000726 	beq	r2,zero,40131f0 <__muldf3+0x7a8>
 40131d4:	188003cc 	andi	r2,r3,15
 40131d8:	01000104 	movi	r4,4
 40131dc:	11000426 	beq	r2,r4,40131f0 <__muldf3+0x7a8>
 40131e0:	1805883a 	mov	r2,r3
 40131e4:	10c00104 	addi	r3,r2,4
 40131e8:	1885803a 	cmpltu	r2,r3,r2
 40131ec:	88a3883a 	add	r17,r17,r2
 40131f0:	8880202c 	andhi	r2,r17,128
 40131f4:	10001c26 	beq	r2,zero,4013268 <__muldf3+0x820>
 40131f8:	3027883a 	mov	r19,r6
 40131fc:	00800044 	movi	r2,1
 4013200:	0021883a 	mov	r16,zero
 4013204:	002d883a 	mov	r22,zero
 4013208:	003e6e06 	br	4012bc4 <__alt_data_end+0xfc012bc4>
 401320c:	4007883a 	mov	r3,r8
 4013210:	003f9706 	br	4013070 <__alt_data_end+0xfc013070>
 4013214:	017ff844 	movi	r5,-31
 4013218:	2885c83a 	sub	r2,r5,r2
 401321c:	888ad83a 	srl	r5,r17,r2
 4013220:	00800804 	movi	r2,32
 4013224:	18801a26 	beq	r3,r2,4013290 <__muldf3+0x848>
 4013228:	01001004 	movi	r4,64
 401322c:	20c7c83a 	sub	r3,r4,r3
 4013230:	88e2983a 	sll	r17,r17,r3
 4013234:	8ca4b03a 	or	r18,r17,r18
 4013238:	9004c03a 	cmpne	r2,r18,zero
 401323c:	2884b03a 	or	r2,r5,r2
 4013240:	144001cc 	andi	r17,r2,7
 4013244:	88000d1e 	bne	r17,zero,401327c <__muldf3+0x834>
 4013248:	0021883a 	mov	r16,zero
 401324c:	102cd0fa 	srli	r22,r2,3
 4013250:	3027883a 	mov	r19,r6
 4013254:	0005883a 	mov	r2,zero
 4013258:	b46cb03a 	or	r22,r22,r17
 401325c:	003e5906 	br	4012bc4 <__alt_data_end+0xfc012bc4>
 4013260:	1007883a 	mov	r3,r2
 4013264:	0023883a 	mov	r17,zero
 4013268:	8820927a 	slli	r16,r17,9
 401326c:	1805883a 	mov	r2,r3
 4013270:	8822977a 	slli	r17,r17,29
 4013274:	8020d33a 	srli	r16,r16,12
 4013278:	003ff406 	br	401324c <__alt_data_end+0xfc01324c>
 401327c:	10c003cc 	andi	r3,r2,15
 4013280:	01000104 	movi	r4,4
 4013284:	193ff626 	beq	r3,r4,4013260 <__alt_data_end+0xfc013260>
 4013288:	0023883a 	mov	r17,zero
 401328c:	003fd506 	br	40131e4 <__alt_data_end+0xfc0131e4>
 4013290:	0023883a 	mov	r17,zero
 4013294:	003fe706 	br	4013234 <__alt_data_end+0xfc013234>
 4013298:	00800434 	movhi	r2,16
 401329c:	8c000234 	orhi	r16,r17,8
 40132a0:	10bfffc4 	addi	r2,r2,-1
 40132a4:	3027883a 	mov	r19,r6
 40132a8:	80a0703a 	and	r16,r16,r2
 40132ac:	902d883a 	mov	r22,r18
 40132b0:	003eac06 	br	4012d64 <__alt_data_end+0xfc012d64>

040132b4 <__subdf3>:
 40132b4:	02000434 	movhi	r8,16
 40132b8:	423fffc4 	addi	r8,r8,-1
 40132bc:	defffb04 	addi	sp,sp,-20
 40132c0:	2a14703a 	and	r10,r5,r8
 40132c4:	3812d53a 	srli	r9,r7,20
 40132c8:	3a10703a 	and	r8,r7,r8
 40132cc:	2006d77a 	srli	r3,r4,29
 40132d0:	3004d77a 	srli	r2,r6,29
 40132d4:	dc000015 	stw	r16,0(sp)
 40132d8:	501490fa 	slli	r10,r10,3
 40132dc:	2820d53a 	srli	r16,r5,20
 40132e0:	401090fa 	slli	r8,r8,3
 40132e4:	dc800215 	stw	r18,8(sp)
 40132e8:	dc400115 	stw	r17,4(sp)
 40132ec:	dfc00415 	stw	ra,16(sp)
 40132f0:	202290fa 	slli	r17,r4,3
 40132f4:	dcc00315 	stw	r19,12(sp)
 40132f8:	4a41ffcc 	andi	r9,r9,2047
 40132fc:	0101ffc4 	movi	r4,2047
 4013300:	2824d7fa 	srli	r18,r5,31
 4013304:	8401ffcc 	andi	r16,r16,2047
 4013308:	50c6b03a 	or	r3,r10,r3
 401330c:	380ed7fa 	srli	r7,r7,31
 4013310:	408ab03a 	or	r5,r8,r2
 4013314:	300c90fa 	slli	r6,r6,3
 4013318:	49009626 	beq	r9,r4,4013574 <__subdf3+0x2c0>
 401331c:	39c0005c 	xori	r7,r7,1
 4013320:	8245c83a 	sub	r2,r16,r9
 4013324:	3c807426 	beq	r7,r18,40134f8 <__subdf3+0x244>
 4013328:	0080af0e 	bge	zero,r2,40135e8 <__subdf3+0x334>
 401332c:	48002a1e 	bne	r9,zero,40133d8 <__subdf3+0x124>
 4013330:	2988b03a 	or	r4,r5,r6
 4013334:	20009a1e 	bne	r4,zero,40135a0 <__subdf3+0x2ec>
 4013338:	888001cc 	andi	r2,r17,7
 401333c:	10000726 	beq	r2,zero,401335c <__subdf3+0xa8>
 4013340:	888003cc 	andi	r2,r17,15
 4013344:	01000104 	movi	r4,4
 4013348:	11000426 	beq	r2,r4,401335c <__subdf3+0xa8>
 401334c:	890b883a 	add	r5,r17,r4
 4013350:	2c63803a 	cmpltu	r17,r5,r17
 4013354:	1c47883a 	add	r3,r3,r17
 4013358:	2823883a 	mov	r17,r5
 401335c:	1880202c 	andhi	r2,r3,128
 4013360:	10005926 	beq	r2,zero,40134c8 <__subdf3+0x214>
 4013364:	84000044 	addi	r16,r16,1
 4013368:	0081ffc4 	movi	r2,2047
 401336c:	8080be26 	beq	r16,r2,4013668 <__subdf3+0x3b4>
 4013370:	017fe034 	movhi	r5,65408
 4013374:	297fffc4 	addi	r5,r5,-1
 4013378:	1946703a 	and	r3,r3,r5
 401337c:	1804977a 	slli	r2,r3,29
 4013380:	1806927a 	slli	r3,r3,9
 4013384:	8822d0fa 	srli	r17,r17,3
 4013388:	8401ffcc 	andi	r16,r16,2047
 401338c:	180ad33a 	srli	r5,r3,12
 4013390:	9100004c 	andi	r4,r18,1
 4013394:	1444b03a 	or	r2,r2,r17
 4013398:	80c1ffcc 	andi	r3,r16,2047
 401339c:	1820953a 	slli	r16,r3,20
 40133a0:	20c03fcc 	andi	r3,r4,255
 40133a4:	180897fa 	slli	r4,r3,31
 40133a8:	00c00434 	movhi	r3,16
 40133ac:	18ffffc4 	addi	r3,r3,-1
 40133b0:	28c6703a 	and	r3,r5,r3
 40133b4:	1c06b03a 	or	r3,r3,r16
 40133b8:	1906b03a 	or	r3,r3,r4
 40133bc:	dfc00417 	ldw	ra,16(sp)
 40133c0:	dcc00317 	ldw	r19,12(sp)
 40133c4:	dc800217 	ldw	r18,8(sp)
 40133c8:	dc400117 	ldw	r17,4(sp)
 40133cc:	dc000017 	ldw	r16,0(sp)
 40133d0:	dec00504 	addi	sp,sp,20
 40133d4:	f800283a 	ret
 40133d8:	0101ffc4 	movi	r4,2047
 40133dc:	813fd626 	beq	r16,r4,4013338 <__alt_data_end+0xfc013338>
 40133e0:	29402034 	orhi	r5,r5,128
 40133e4:	01000e04 	movi	r4,56
 40133e8:	2080a316 	blt	r4,r2,4013678 <__subdf3+0x3c4>
 40133ec:	010007c4 	movi	r4,31
 40133f0:	2080c616 	blt	r4,r2,401370c <__subdf3+0x458>
 40133f4:	01000804 	movi	r4,32
 40133f8:	2089c83a 	sub	r4,r4,r2
 40133fc:	2910983a 	sll	r8,r5,r4
 4013400:	308ed83a 	srl	r7,r6,r2
 4013404:	3108983a 	sll	r4,r6,r4
 4013408:	2884d83a 	srl	r2,r5,r2
 401340c:	41ccb03a 	or	r6,r8,r7
 4013410:	2008c03a 	cmpne	r4,r4,zero
 4013414:	310cb03a 	or	r6,r6,r4
 4013418:	898dc83a 	sub	r6,r17,r6
 401341c:	89a3803a 	cmpltu	r17,r17,r6
 4013420:	1887c83a 	sub	r3,r3,r2
 4013424:	1c47c83a 	sub	r3,r3,r17
 4013428:	3023883a 	mov	r17,r6
 401342c:	1880202c 	andhi	r2,r3,128
 4013430:	10002326 	beq	r2,zero,40134c0 <__subdf3+0x20c>
 4013434:	04c02034 	movhi	r19,128
 4013438:	9cffffc4 	addi	r19,r19,-1
 401343c:	1ce6703a 	and	r19,r3,r19
 4013440:	98007a26 	beq	r19,zero,401362c <__subdf3+0x378>
 4013444:	9809883a 	mov	r4,r19
 4013448:	4013db40 	call	4013db4 <__clzsi2>
 401344c:	113ffe04 	addi	r4,r2,-8
 4013450:	00c007c4 	movi	r3,31
 4013454:	19007b16 	blt	r3,r4,4013644 <__subdf3+0x390>
 4013458:	00800804 	movi	r2,32
 401345c:	1105c83a 	sub	r2,r2,r4
 4013460:	8884d83a 	srl	r2,r17,r2
 4013464:	9906983a 	sll	r3,r19,r4
 4013468:	8922983a 	sll	r17,r17,r4
 401346c:	10c4b03a 	or	r2,r2,r3
 4013470:	24007816 	blt	r4,r16,4013654 <__subdf3+0x3a0>
 4013474:	2421c83a 	sub	r16,r4,r16
 4013478:	80c00044 	addi	r3,r16,1
 401347c:	010007c4 	movi	r4,31
 4013480:	20c09516 	blt	r4,r3,40136d8 <__subdf3+0x424>
 4013484:	01400804 	movi	r5,32
 4013488:	28cbc83a 	sub	r5,r5,r3
 401348c:	88c8d83a 	srl	r4,r17,r3
 4013490:	8962983a 	sll	r17,r17,r5
 4013494:	114a983a 	sll	r5,r2,r5
 4013498:	10c6d83a 	srl	r3,r2,r3
 401349c:	8804c03a 	cmpne	r2,r17,zero
 40134a0:	290ab03a 	or	r5,r5,r4
 40134a4:	28a2b03a 	or	r17,r5,r2
 40134a8:	0021883a 	mov	r16,zero
 40134ac:	003fa206 	br	4013338 <__alt_data_end+0xfc013338>
 40134b0:	2090b03a 	or	r8,r4,r2
 40134b4:	40018e26 	beq	r8,zero,4013af0 <__subdf3+0x83c>
 40134b8:	1007883a 	mov	r3,r2
 40134bc:	2023883a 	mov	r17,r4
 40134c0:	888001cc 	andi	r2,r17,7
 40134c4:	103f9e1e 	bne	r2,zero,4013340 <__alt_data_end+0xfc013340>
 40134c8:	1804977a 	slli	r2,r3,29
 40134cc:	8822d0fa 	srli	r17,r17,3
 40134d0:	1810d0fa 	srli	r8,r3,3
 40134d4:	9100004c 	andi	r4,r18,1
 40134d8:	1444b03a 	or	r2,r2,r17
 40134dc:	00c1ffc4 	movi	r3,2047
 40134e0:	80c02826 	beq	r16,r3,4013584 <__subdf3+0x2d0>
 40134e4:	01400434 	movhi	r5,16
 40134e8:	297fffc4 	addi	r5,r5,-1
 40134ec:	80e0703a 	and	r16,r16,r3
 40134f0:	414a703a 	and	r5,r8,r5
 40134f4:	003fa806 	br	4013398 <__alt_data_end+0xfc013398>
 40134f8:	0080630e 	bge	zero,r2,4013688 <__subdf3+0x3d4>
 40134fc:	48003026 	beq	r9,zero,40135c0 <__subdf3+0x30c>
 4013500:	0101ffc4 	movi	r4,2047
 4013504:	813f8c26 	beq	r16,r4,4013338 <__alt_data_end+0xfc013338>
 4013508:	29402034 	orhi	r5,r5,128
 401350c:	01000e04 	movi	r4,56
 4013510:	2080a90e 	bge	r4,r2,40137b8 <__subdf3+0x504>
 4013514:	298cb03a 	or	r6,r5,r6
 4013518:	3012c03a 	cmpne	r9,r6,zero
 401351c:	0005883a 	mov	r2,zero
 4013520:	4c53883a 	add	r9,r9,r17
 4013524:	4c63803a 	cmpltu	r17,r9,r17
 4013528:	10c7883a 	add	r3,r2,r3
 401352c:	88c7883a 	add	r3,r17,r3
 4013530:	4823883a 	mov	r17,r9
 4013534:	1880202c 	andhi	r2,r3,128
 4013538:	1000d026 	beq	r2,zero,401387c <__subdf3+0x5c8>
 401353c:	84000044 	addi	r16,r16,1
 4013540:	0081ffc4 	movi	r2,2047
 4013544:	8080fe26 	beq	r16,r2,4013940 <__subdf3+0x68c>
 4013548:	00bfe034 	movhi	r2,65408
 401354c:	10bfffc4 	addi	r2,r2,-1
 4013550:	1886703a 	and	r3,r3,r2
 4013554:	880ad07a 	srli	r5,r17,1
 4013558:	180497fa 	slli	r2,r3,31
 401355c:	8900004c 	andi	r4,r17,1
 4013560:	2922b03a 	or	r17,r5,r4
 4013564:	1806d07a 	srli	r3,r3,1
 4013568:	1462b03a 	or	r17,r2,r17
 401356c:	3825883a 	mov	r18,r7
 4013570:	003f7106 	br	4013338 <__alt_data_end+0xfc013338>
 4013574:	2984b03a 	or	r2,r5,r6
 4013578:	103f6826 	beq	r2,zero,401331c <__alt_data_end+0xfc01331c>
 401357c:	39c03fcc 	andi	r7,r7,255
 4013580:	003f6706 	br	4013320 <__alt_data_end+0xfc013320>
 4013584:	4086b03a 	or	r3,r8,r2
 4013588:	18015226 	beq	r3,zero,4013ad4 <__subdf3+0x820>
 401358c:	00c00434 	movhi	r3,16
 4013590:	41400234 	orhi	r5,r8,8
 4013594:	18ffffc4 	addi	r3,r3,-1
 4013598:	28ca703a 	and	r5,r5,r3
 401359c:	003f7e06 	br	4013398 <__alt_data_end+0xfc013398>
 40135a0:	10bfffc4 	addi	r2,r2,-1
 40135a4:	1000491e 	bne	r2,zero,40136cc <__subdf3+0x418>
 40135a8:	898fc83a 	sub	r7,r17,r6
 40135ac:	89e3803a 	cmpltu	r17,r17,r7
 40135b0:	1947c83a 	sub	r3,r3,r5
 40135b4:	1c47c83a 	sub	r3,r3,r17
 40135b8:	3823883a 	mov	r17,r7
 40135bc:	003f9b06 	br	401342c <__alt_data_end+0xfc01342c>
 40135c0:	2988b03a 	or	r4,r5,r6
 40135c4:	203f5c26 	beq	r4,zero,4013338 <__alt_data_end+0xfc013338>
 40135c8:	10bfffc4 	addi	r2,r2,-1
 40135cc:	1000931e 	bne	r2,zero,401381c <__subdf3+0x568>
 40135d0:	898d883a 	add	r6,r17,r6
 40135d4:	3463803a 	cmpltu	r17,r6,r17
 40135d8:	1947883a 	add	r3,r3,r5
 40135dc:	88c7883a 	add	r3,r17,r3
 40135e0:	3023883a 	mov	r17,r6
 40135e4:	003fd306 	br	4013534 <__alt_data_end+0xfc013534>
 40135e8:	1000541e 	bne	r2,zero,401373c <__subdf3+0x488>
 40135ec:	80800044 	addi	r2,r16,1
 40135f0:	1081ffcc 	andi	r2,r2,2047
 40135f4:	01000044 	movi	r4,1
 40135f8:	2080a20e 	bge	r4,r2,4013884 <__subdf3+0x5d0>
 40135fc:	8989c83a 	sub	r4,r17,r6
 4013600:	8905803a 	cmpltu	r2,r17,r4
 4013604:	1967c83a 	sub	r19,r3,r5
 4013608:	98a7c83a 	sub	r19,r19,r2
 401360c:	9880202c 	andhi	r2,r19,128
 4013610:	10006326 	beq	r2,zero,40137a0 <__subdf3+0x4ec>
 4013614:	3463c83a 	sub	r17,r6,r17
 4013618:	28c7c83a 	sub	r3,r5,r3
 401361c:	344d803a 	cmpltu	r6,r6,r17
 4013620:	19a7c83a 	sub	r19,r3,r6
 4013624:	3825883a 	mov	r18,r7
 4013628:	983f861e 	bne	r19,zero,4013444 <__alt_data_end+0xfc013444>
 401362c:	8809883a 	mov	r4,r17
 4013630:	4013db40 	call	4013db4 <__clzsi2>
 4013634:	10800804 	addi	r2,r2,32
 4013638:	113ffe04 	addi	r4,r2,-8
 401363c:	00c007c4 	movi	r3,31
 4013640:	193f850e 	bge	r3,r4,4013458 <__alt_data_end+0xfc013458>
 4013644:	10bff604 	addi	r2,r2,-40
 4013648:	8884983a 	sll	r2,r17,r2
 401364c:	0023883a 	mov	r17,zero
 4013650:	243f880e 	bge	r4,r16,4013474 <__alt_data_end+0xfc013474>
 4013654:	00ffe034 	movhi	r3,65408
 4013658:	18ffffc4 	addi	r3,r3,-1
 401365c:	8121c83a 	sub	r16,r16,r4
 4013660:	10c6703a 	and	r3,r2,r3
 4013664:	003f3406 	br	4013338 <__alt_data_end+0xfc013338>
 4013668:	9100004c 	andi	r4,r18,1
 401366c:	000b883a 	mov	r5,zero
 4013670:	0005883a 	mov	r2,zero
 4013674:	003f4806 	br	4013398 <__alt_data_end+0xfc013398>
 4013678:	298cb03a 	or	r6,r5,r6
 401367c:	300cc03a 	cmpne	r6,r6,zero
 4013680:	0005883a 	mov	r2,zero
 4013684:	003f6406 	br	4013418 <__alt_data_end+0xfc013418>
 4013688:	10009a1e 	bne	r2,zero,40138f4 <__subdf3+0x640>
 401368c:	82400044 	addi	r9,r16,1
 4013690:	4881ffcc 	andi	r2,r9,2047
 4013694:	02800044 	movi	r10,1
 4013698:	5080670e 	bge	r10,r2,4013838 <__subdf3+0x584>
 401369c:	0081ffc4 	movi	r2,2047
 40136a0:	4880af26 	beq	r9,r2,4013960 <__subdf3+0x6ac>
 40136a4:	898d883a 	add	r6,r17,r6
 40136a8:	1945883a 	add	r2,r3,r5
 40136ac:	3447803a 	cmpltu	r3,r6,r17
 40136b0:	1887883a 	add	r3,r3,r2
 40136b4:	182297fa 	slli	r17,r3,31
 40136b8:	300cd07a 	srli	r6,r6,1
 40136bc:	1806d07a 	srli	r3,r3,1
 40136c0:	4821883a 	mov	r16,r9
 40136c4:	89a2b03a 	or	r17,r17,r6
 40136c8:	003f1b06 	br	4013338 <__alt_data_end+0xfc013338>
 40136cc:	0101ffc4 	movi	r4,2047
 40136d0:	813f441e 	bne	r16,r4,40133e4 <__alt_data_end+0xfc0133e4>
 40136d4:	003f1806 	br	4013338 <__alt_data_end+0xfc013338>
 40136d8:	843ff844 	addi	r16,r16,-31
 40136dc:	01400804 	movi	r5,32
 40136e0:	1408d83a 	srl	r4,r2,r16
 40136e4:	19405026 	beq	r3,r5,4013828 <__subdf3+0x574>
 40136e8:	01401004 	movi	r5,64
 40136ec:	28c7c83a 	sub	r3,r5,r3
 40136f0:	10c4983a 	sll	r2,r2,r3
 40136f4:	88a2b03a 	or	r17,r17,r2
 40136f8:	8822c03a 	cmpne	r17,r17,zero
 40136fc:	2462b03a 	or	r17,r4,r17
 4013700:	0007883a 	mov	r3,zero
 4013704:	0021883a 	mov	r16,zero
 4013708:	003f6d06 	br	40134c0 <__alt_data_end+0xfc0134c0>
 401370c:	11fff804 	addi	r7,r2,-32
 4013710:	01000804 	movi	r4,32
 4013714:	29ced83a 	srl	r7,r5,r7
 4013718:	11004526 	beq	r2,r4,4013830 <__subdf3+0x57c>
 401371c:	01001004 	movi	r4,64
 4013720:	2089c83a 	sub	r4,r4,r2
 4013724:	2904983a 	sll	r2,r5,r4
 4013728:	118cb03a 	or	r6,r2,r6
 401372c:	300cc03a 	cmpne	r6,r6,zero
 4013730:	398cb03a 	or	r6,r7,r6
 4013734:	0005883a 	mov	r2,zero
 4013738:	003f3706 	br	4013418 <__alt_data_end+0xfc013418>
 401373c:	80002a26 	beq	r16,zero,40137e8 <__subdf3+0x534>
 4013740:	0101ffc4 	movi	r4,2047
 4013744:	49006626 	beq	r9,r4,40138e0 <__subdf3+0x62c>
 4013748:	0085c83a 	sub	r2,zero,r2
 401374c:	18c02034 	orhi	r3,r3,128
 4013750:	01000e04 	movi	r4,56
 4013754:	20807e16 	blt	r4,r2,4013950 <__subdf3+0x69c>
 4013758:	010007c4 	movi	r4,31
 401375c:	2080e716 	blt	r4,r2,4013afc <__subdf3+0x848>
 4013760:	01000804 	movi	r4,32
 4013764:	2089c83a 	sub	r4,r4,r2
 4013768:	1914983a 	sll	r10,r3,r4
 401376c:	8890d83a 	srl	r8,r17,r2
 4013770:	8908983a 	sll	r4,r17,r4
 4013774:	1884d83a 	srl	r2,r3,r2
 4013778:	5222b03a 	or	r17,r10,r8
 401377c:	2006c03a 	cmpne	r3,r4,zero
 4013780:	88e2b03a 	or	r17,r17,r3
 4013784:	3463c83a 	sub	r17,r6,r17
 4013788:	2885c83a 	sub	r2,r5,r2
 401378c:	344d803a 	cmpltu	r6,r6,r17
 4013790:	1187c83a 	sub	r3,r2,r6
 4013794:	4821883a 	mov	r16,r9
 4013798:	3825883a 	mov	r18,r7
 401379c:	003f2306 	br	401342c <__alt_data_end+0xfc01342c>
 40137a0:	24d0b03a 	or	r8,r4,r19
 40137a4:	40001b1e 	bne	r8,zero,4013814 <__subdf3+0x560>
 40137a8:	0005883a 	mov	r2,zero
 40137ac:	0009883a 	mov	r4,zero
 40137b0:	0021883a 	mov	r16,zero
 40137b4:	003f4906 	br	40134dc <__alt_data_end+0xfc0134dc>
 40137b8:	010007c4 	movi	r4,31
 40137bc:	20803a16 	blt	r4,r2,40138a8 <__subdf3+0x5f4>
 40137c0:	01000804 	movi	r4,32
 40137c4:	2089c83a 	sub	r4,r4,r2
 40137c8:	2912983a 	sll	r9,r5,r4
 40137cc:	3090d83a 	srl	r8,r6,r2
 40137d0:	3108983a 	sll	r4,r6,r4
 40137d4:	2884d83a 	srl	r2,r5,r2
 40137d8:	4a12b03a 	or	r9,r9,r8
 40137dc:	2008c03a 	cmpne	r4,r4,zero
 40137e0:	4912b03a 	or	r9,r9,r4
 40137e4:	003f4e06 	br	4013520 <__alt_data_end+0xfc013520>
 40137e8:	1c48b03a 	or	r4,r3,r17
 40137ec:	20003c26 	beq	r4,zero,40138e0 <__subdf3+0x62c>
 40137f0:	0084303a 	nor	r2,zero,r2
 40137f4:	1000381e 	bne	r2,zero,40138d8 <__subdf3+0x624>
 40137f8:	3463c83a 	sub	r17,r6,r17
 40137fc:	28c5c83a 	sub	r2,r5,r3
 4013800:	344d803a 	cmpltu	r6,r6,r17
 4013804:	1187c83a 	sub	r3,r2,r6
 4013808:	4821883a 	mov	r16,r9
 401380c:	3825883a 	mov	r18,r7
 4013810:	003f0606 	br	401342c <__alt_data_end+0xfc01342c>
 4013814:	2023883a 	mov	r17,r4
 4013818:	003f0906 	br	4013440 <__alt_data_end+0xfc013440>
 401381c:	0101ffc4 	movi	r4,2047
 4013820:	813f3a1e 	bne	r16,r4,401350c <__alt_data_end+0xfc01350c>
 4013824:	003ec406 	br	4013338 <__alt_data_end+0xfc013338>
 4013828:	0005883a 	mov	r2,zero
 401382c:	003fb106 	br	40136f4 <__alt_data_end+0xfc0136f4>
 4013830:	0005883a 	mov	r2,zero
 4013834:	003fbc06 	br	4013728 <__alt_data_end+0xfc013728>
 4013838:	1c44b03a 	or	r2,r3,r17
 401383c:	80008e1e 	bne	r16,zero,4013a78 <__subdf3+0x7c4>
 4013840:	1000c826 	beq	r2,zero,4013b64 <__subdf3+0x8b0>
 4013844:	2984b03a 	or	r2,r5,r6
 4013848:	103ebb26 	beq	r2,zero,4013338 <__alt_data_end+0xfc013338>
 401384c:	8989883a 	add	r4,r17,r6
 4013850:	1945883a 	add	r2,r3,r5
 4013854:	2447803a 	cmpltu	r3,r4,r17
 4013858:	1887883a 	add	r3,r3,r2
 401385c:	1880202c 	andhi	r2,r3,128
 4013860:	2023883a 	mov	r17,r4
 4013864:	103f1626 	beq	r2,zero,40134c0 <__alt_data_end+0xfc0134c0>
 4013868:	00bfe034 	movhi	r2,65408
 401386c:	10bfffc4 	addi	r2,r2,-1
 4013870:	5021883a 	mov	r16,r10
 4013874:	1886703a 	and	r3,r3,r2
 4013878:	003eaf06 	br	4013338 <__alt_data_end+0xfc013338>
 401387c:	3825883a 	mov	r18,r7
 4013880:	003f0f06 	br	40134c0 <__alt_data_end+0xfc0134c0>
 4013884:	1c44b03a 	or	r2,r3,r17
 4013888:	8000251e 	bne	r16,zero,4013920 <__subdf3+0x66c>
 401388c:	1000661e 	bne	r2,zero,4013a28 <__subdf3+0x774>
 4013890:	2990b03a 	or	r8,r5,r6
 4013894:	40009626 	beq	r8,zero,4013af0 <__subdf3+0x83c>
 4013898:	2807883a 	mov	r3,r5
 401389c:	3023883a 	mov	r17,r6
 40138a0:	3825883a 	mov	r18,r7
 40138a4:	003ea406 	br	4013338 <__alt_data_end+0xfc013338>
 40138a8:	127ff804 	addi	r9,r2,-32
 40138ac:	01000804 	movi	r4,32
 40138b0:	2a52d83a 	srl	r9,r5,r9
 40138b4:	11008c26 	beq	r2,r4,4013ae8 <__subdf3+0x834>
 40138b8:	01001004 	movi	r4,64
 40138bc:	2085c83a 	sub	r2,r4,r2
 40138c0:	2884983a 	sll	r2,r5,r2
 40138c4:	118cb03a 	or	r6,r2,r6
 40138c8:	300cc03a 	cmpne	r6,r6,zero
 40138cc:	4992b03a 	or	r9,r9,r6
 40138d0:	0005883a 	mov	r2,zero
 40138d4:	003f1206 	br	4013520 <__alt_data_end+0xfc013520>
 40138d8:	0101ffc4 	movi	r4,2047
 40138dc:	493f9c1e 	bne	r9,r4,4013750 <__alt_data_end+0xfc013750>
 40138e0:	2807883a 	mov	r3,r5
 40138e4:	3023883a 	mov	r17,r6
 40138e8:	4821883a 	mov	r16,r9
 40138ec:	3825883a 	mov	r18,r7
 40138f0:	003e9106 	br	4013338 <__alt_data_end+0xfc013338>
 40138f4:	80001f1e 	bne	r16,zero,4013974 <__subdf3+0x6c0>
 40138f8:	1c48b03a 	or	r4,r3,r17
 40138fc:	20005a26 	beq	r4,zero,4013a68 <__subdf3+0x7b4>
 4013900:	0084303a 	nor	r2,zero,r2
 4013904:	1000561e 	bne	r2,zero,4013a60 <__subdf3+0x7ac>
 4013908:	89a3883a 	add	r17,r17,r6
 401390c:	1945883a 	add	r2,r3,r5
 4013910:	898d803a 	cmpltu	r6,r17,r6
 4013914:	3087883a 	add	r3,r6,r2
 4013918:	4821883a 	mov	r16,r9
 401391c:	003f0506 	br	4013534 <__alt_data_end+0xfc013534>
 4013920:	10002b1e 	bne	r2,zero,40139d0 <__subdf3+0x71c>
 4013924:	2984b03a 	or	r2,r5,r6
 4013928:	10008026 	beq	r2,zero,4013b2c <__subdf3+0x878>
 401392c:	2807883a 	mov	r3,r5
 4013930:	3023883a 	mov	r17,r6
 4013934:	3825883a 	mov	r18,r7
 4013938:	0401ffc4 	movi	r16,2047
 401393c:	003e7e06 	br	4013338 <__alt_data_end+0xfc013338>
 4013940:	3809883a 	mov	r4,r7
 4013944:	0011883a 	mov	r8,zero
 4013948:	0005883a 	mov	r2,zero
 401394c:	003ee306 	br	40134dc <__alt_data_end+0xfc0134dc>
 4013950:	1c62b03a 	or	r17,r3,r17
 4013954:	8822c03a 	cmpne	r17,r17,zero
 4013958:	0005883a 	mov	r2,zero
 401395c:	003f8906 	br	4013784 <__alt_data_end+0xfc013784>
 4013960:	3809883a 	mov	r4,r7
 4013964:	4821883a 	mov	r16,r9
 4013968:	0011883a 	mov	r8,zero
 401396c:	0005883a 	mov	r2,zero
 4013970:	003eda06 	br	40134dc <__alt_data_end+0xfc0134dc>
 4013974:	0101ffc4 	movi	r4,2047
 4013978:	49003b26 	beq	r9,r4,4013a68 <__subdf3+0x7b4>
 401397c:	0085c83a 	sub	r2,zero,r2
 4013980:	18c02034 	orhi	r3,r3,128
 4013984:	01000e04 	movi	r4,56
 4013988:	20806e16 	blt	r4,r2,4013b44 <__subdf3+0x890>
 401398c:	010007c4 	movi	r4,31
 4013990:	20807716 	blt	r4,r2,4013b70 <__subdf3+0x8bc>
 4013994:	01000804 	movi	r4,32
 4013998:	2089c83a 	sub	r4,r4,r2
 401399c:	1914983a 	sll	r10,r3,r4
 40139a0:	8890d83a 	srl	r8,r17,r2
 40139a4:	8908983a 	sll	r4,r17,r4
 40139a8:	1884d83a 	srl	r2,r3,r2
 40139ac:	5222b03a 	or	r17,r10,r8
 40139b0:	2006c03a 	cmpne	r3,r4,zero
 40139b4:	88e2b03a 	or	r17,r17,r3
 40139b8:	89a3883a 	add	r17,r17,r6
 40139bc:	1145883a 	add	r2,r2,r5
 40139c0:	898d803a 	cmpltu	r6,r17,r6
 40139c4:	3087883a 	add	r3,r6,r2
 40139c8:	4821883a 	mov	r16,r9
 40139cc:	003ed906 	br	4013534 <__alt_data_end+0xfc013534>
 40139d0:	2984b03a 	or	r2,r5,r6
 40139d4:	10004226 	beq	r2,zero,4013ae0 <__subdf3+0x82c>
 40139d8:	1808d0fa 	srli	r4,r3,3
 40139dc:	8822d0fa 	srli	r17,r17,3
 40139e0:	1806977a 	slli	r3,r3,29
 40139e4:	2080022c 	andhi	r2,r4,8
 40139e8:	1c62b03a 	or	r17,r3,r17
 40139ec:	10000826 	beq	r2,zero,4013a10 <__subdf3+0x75c>
 40139f0:	2812d0fa 	srli	r9,r5,3
 40139f4:	4880022c 	andhi	r2,r9,8
 40139f8:	1000051e 	bne	r2,zero,4013a10 <__subdf3+0x75c>
 40139fc:	300cd0fa 	srli	r6,r6,3
 4013a00:	2804977a 	slli	r2,r5,29
 4013a04:	4809883a 	mov	r4,r9
 4013a08:	3825883a 	mov	r18,r7
 4013a0c:	11a2b03a 	or	r17,r2,r6
 4013a10:	8806d77a 	srli	r3,r17,29
 4013a14:	200890fa 	slli	r4,r4,3
 4013a18:	882290fa 	slli	r17,r17,3
 4013a1c:	0401ffc4 	movi	r16,2047
 4013a20:	1906b03a 	or	r3,r3,r4
 4013a24:	003e4406 	br	4013338 <__alt_data_end+0xfc013338>
 4013a28:	2984b03a 	or	r2,r5,r6
 4013a2c:	103e4226 	beq	r2,zero,4013338 <__alt_data_end+0xfc013338>
 4013a30:	8989c83a 	sub	r4,r17,r6
 4013a34:	8911803a 	cmpltu	r8,r17,r4
 4013a38:	1945c83a 	sub	r2,r3,r5
 4013a3c:	1205c83a 	sub	r2,r2,r8
 4013a40:	1200202c 	andhi	r8,r2,128
 4013a44:	403e9a26 	beq	r8,zero,40134b0 <__alt_data_end+0xfc0134b0>
 4013a48:	3463c83a 	sub	r17,r6,r17
 4013a4c:	28c5c83a 	sub	r2,r5,r3
 4013a50:	344d803a 	cmpltu	r6,r6,r17
 4013a54:	1187c83a 	sub	r3,r2,r6
 4013a58:	3825883a 	mov	r18,r7
 4013a5c:	003e3606 	br	4013338 <__alt_data_end+0xfc013338>
 4013a60:	0101ffc4 	movi	r4,2047
 4013a64:	493fc71e 	bne	r9,r4,4013984 <__alt_data_end+0xfc013984>
 4013a68:	2807883a 	mov	r3,r5
 4013a6c:	3023883a 	mov	r17,r6
 4013a70:	4821883a 	mov	r16,r9
 4013a74:	003e3006 	br	4013338 <__alt_data_end+0xfc013338>
 4013a78:	10003626 	beq	r2,zero,4013b54 <__subdf3+0x8a0>
 4013a7c:	2984b03a 	or	r2,r5,r6
 4013a80:	10001726 	beq	r2,zero,4013ae0 <__subdf3+0x82c>
 4013a84:	1808d0fa 	srli	r4,r3,3
 4013a88:	8822d0fa 	srli	r17,r17,3
 4013a8c:	1806977a 	slli	r3,r3,29
 4013a90:	2080022c 	andhi	r2,r4,8
 4013a94:	1c62b03a 	or	r17,r3,r17
 4013a98:	10000726 	beq	r2,zero,4013ab8 <__subdf3+0x804>
 4013a9c:	2812d0fa 	srli	r9,r5,3
 4013aa0:	4880022c 	andhi	r2,r9,8
 4013aa4:	1000041e 	bne	r2,zero,4013ab8 <__subdf3+0x804>
 4013aa8:	300cd0fa 	srli	r6,r6,3
 4013aac:	2804977a 	slli	r2,r5,29
 4013ab0:	4809883a 	mov	r4,r9
 4013ab4:	11a2b03a 	or	r17,r2,r6
 4013ab8:	8806d77a 	srli	r3,r17,29
 4013abc:	200890fa 	slli	r4,r4,3
 4013ac0:	882290fa 	slli	r17,r17,3
 4013ac4:	3825883a 	mov	r18,r7
 4013ac8:	1906b03a 	or	r3,r3,r4
 4013acc:	0401ffc4 	movi	r16,2047
 4013ad0:	003e1906 	br	4013338 <__alt_data_end+0xfc013338>
 4013ad4:	000b883a 	mov	r5,zero
 4013ad8:	0005883a 	mov	r2,zero
 4013adc:	003e2e06 	br	4013398 <__alt_data_end+0xfc013398>
 4013ae0:	0401ffc4 	movi	r16,2047
 4013ae4:	003e1406 	br	4013338 <__alt_data_end+0xfc013338>
 4013ae8:	0005883a 	mov	r2,zero
 4013aec:	003f7506 	br	40138c4 <__alt_data_end+0xfc0138c4>
 4013af0:	0005883a 	mov	r2,zero
 4013af4:	0009883a 	mov	r4,zero
 4013af8:	003e7806 	br	40134dc <__alt_data_end+0xfc0134dc>
 4013afc:	123ff804 	addi	r8,r2,-32
 4013b00:	01000804 	movi	r4,32
 4013b04:	1a10d83a 	srl	r8,r3,r8
 4013b08:	11002526 	beq	r2,r4,4013ba0 <__subdf3+0x8ec>
 4013b0c:	01001004 	movi	r4,64
 4013b10:	2085c83a 	sub	r2,r4,r2
 4013b14:	1884983a 	sll	r2,r3,r2
 4013b18:	1444b03a 	or	r2,r2,r17
 4013b1c:	1004c03a 	cmpne	r2,r2,zero
 4013b20:	40a2b03a 	or	r17,r8,r2
 4013b24:	0005883a 	mov	r2,zero
 4013b28:	003f1606 	br	4013784 <__alt_data_end+0xfc013784>
 4013b2c:	02000434 	movhi	r8,16
 4013b30:	0009883a 	mov	r4,zero
 4013b34:	423fffc4 	addi	r8,r8,-1
 4013b38:	00bfffc4 	movi	r2,-1
 4013b3c:	0401ffc4 	movi	r16,2047
 4013b40:	003e6606 	br	40134dc <__alt_data_end+0xfc0134dc>
 4013b44:	1c62b03a 	or	r17,r3,r17
 4013b48:	8822c03a 	cmpne	r17,r17,zero
 4013b4c:	0005883a 	mov	r2,zero
 4013b50:	003f9906 	br	40139b8 <__alt_data_end+0xfc0139b8>
 4013b54:	2807883a 	mov	r3,r5
 4013b58:	3023883a 	mov	r17,r6
 4013b5c:	0401ffc4 	movi	r16,2047
 4013b60:	003df506 	br	4013338 <__alt_data_end+0xfc013338>
 4013b64:	2807883a 	mov	r3,r5
 4013b68:	3023883a 	mov	r17,r6
 4013b6c:	003df206 	br	4013338 <__alt_data_end+0xfc013338>
 4013b70:	123ff804 	addi	r8,r2,-32
 4013b74:	01000804 	movi	r4,32
 4013b78:	1a10d83a 	srl	r8,r3,r8
 4013b7c:	11000a26 	beq	r2,r4,4013ba8 <__subdf3+0x8f4>
 4013b80:	01001004 	movi	r4,64
 4013b84:	2085c83a 	sub	r2,r4,r2
 4013b88:	1884983a 	sll	r2,r3,r2
 4013b8c:	1444b03a 	or	r2,r2,r17
 4013b90:	1004c03a 	cmpne	r2,r2,zero
 4013b94:	40a2b03a 	or	r17,r8,r2
 4013b98:	0005883a 	mov	r2,zero
 4013b9c:	003f8606 	br	40139b8 <__alt_data_end+0xfc0139b8>
 4013ba0:	0005883a 	mov	r2,zero
 4013ba4:	003fdc06 	br	4013b18 <__alt_data_end+0xfc013b18>
 4013ba8:	0005883a 	mov	r2,zero
 4013bac:	003ff706 	br	4013b8c <__alt_data_end+0xfc013b8c>

04013bb0 <__fixdfsi>:
 4013bb0:	280cd53a 	srli	r6,r5,20
 4013bb4:	00c00434 	movhi	r3,16
 4013bb8:	18ffffc4 	addi	r3,r3,-1
 4013bbc:	3181ffcc 	andi	r6,r6,2047
 4013bc0:	01c0ff84 	movi	r7,1022
 4013bc4:	28c6703a 	and	r3,r5,r3
 4013bc8:	280ad7fa 	srli	r5,r5,31
 4013bcc:	3980120e 	bge	r7,r6,4013c18 <__fixdfsi+0x68>
 4013bd0:	00810744 	movi	r2,1053
 4013bd4:	11800c16 	blt	r2,r6,4013c08 <__fixdfsi+0x58>
 4013bd8:	00810cc4 	movi	r2,1075
 4013bdc:	1185c83a 	sub	r2,r2,r6
 4013be0:	01c007c4 	movi	r7,31
 4013be4:	18c00434 	orhi	r3,r3,16
 4013be8:	38800d16 	blt	r7,r2,4013c20 <__fixdfsi+0x70>
 4013bec:	31befb44 	addi	r6,r6,-1043
 4013bf0:	2084d83a 	srl	r2,r4,r2
 4013bf4:	1986983a 	sll	r3,r3,r6
 4013bf8:	1884b03a 	or	r2,r3,r2
 4013bfc:	28000726 	beq	r5,zero,4013c1c <__fixdfsi+0x6c>
 4013c00:	0085c83a 	sub	r2,zero,r2
 4013c04:	f800283a 	ret
 4013c08:	00a00034 	movhi	r2,32768
 4013c0c:	10bfffc4 	addi	r2,r2,-1
 4013c10:	2885883a 	add	r2,r5,r2
 4013c14:	f800283a 	ret
 4013c18:	0005883a 	mov	r2,zero
 4013c1c:	f800283a 	ret
 4013c20:	008104c4 	movi	r2,1043
 4013c24:	1185c83a 	sub	r2,r2,r6
 4013c28:	1884d83a 	srl	r2,r3,r2
 4013c2c:	003ff306 	br	4013bfc <__alt_data_end+0xfc013bfc>

04013c30 <__floatsidf>:
 4013c30:	defffd04 	addi	sp,sp,-12
 4013c34:	dfc00215 	stw	ra,8(sp)
 4013c38:	dc400115 	stw	r17,4(sp)
 4013c3c:	dc000015 	stw	r16,0(sp)
 4013c40:	20002b26 	beq	r4,zero,4013cf0 <__floatsidf+0xc0>
 4013c44:	2023883a 	mov	r17,r4
 4013c48:	2020d7fa 	srli	r16,r4,31
 4013c4c:	20002d16 	blt	r4,zero,4013d04 <__floatsidf+0xd4>
 4013c50:	8809883a 	mov	r4,r17
 4013c54:	4013db40 	call	4013db4 <__clzsi2>
 4013c58:	01410784 	movi	r5,1054
 4013c5c:	288bc83a 	sub	r5,r5,r2
 4013c60:	01010cc4 	movi	r4,1075
 4013c64:	2149c83a 	sub	r4,r4,r5
 4013c68:	00c007c4 	movi	r3,31
 4013c6c:	1900160e 	bge	r3,r4,4013cc8 <__floatsidf+0x98>
 4013c70:	00c104c4 	movi	r3,1043
 4013c74:	1947c83a 	sub	r3,r3,r5
 4013c78:	88c6983a 	sll	r3,r17,r3
 4013c7c:	00800434 	movhi	r2,16
 4013c80:	10bfffc4 	addi	r2,r2,-1
 4013c84:	1886703a 	and	r3,r3,r2
 4013c88:	2941ffcc 	andi	r5,r5,2047
 4013c8c:	800d883a 	mov	r6,r16
 4013c90:	0005883a 	mov	r2,zero
 4013c94:	280a953a 	slli	r5,r5,20
 4013c98:	31803fcc 	andi	r6,r6,255
 4013c9c:	01000434 	movhi	r4,16
 4013ca0:	300c97fa 	slli	r6,r6,31
 4013ca4:	213fffc4 	addi	r4,r4,-1
 4013ca8:	1906703a 	and	r3,r3,r4
 4013cac:	1946b03a 	or	r3,r3,r5
 4013cb0:	1986b03a 	or	r3,r3,r6
 4013cb4:	dfc00217 	ldw	ra,8(sp)
 4013cb8:	dc400117 	ldw	r17,4(sp)
 4013cbc:	dc000017 	ldw	r16,0(sp)
 4013cc0:	dec00304 	addi	sp,sp,12
 4013cc4:	f800283a 	ret
 4013cc8:	00c002c4 	movi	r3,11
 4013ccc:	1887c83a 	sub	r3,r3,r2
 4013cd0:	88c6d83a 	srl	r3,r17,r3
 4013cd4:	8904983a 	sll	r2,r17,r4
 4013cd8:	01000434 	movhi	r4,16
 4013cdc:	213fffc4 	addi	r4,r4,-1
 4013ce0:	2941ffcc 	andi	r5,r5,2047
 4013ce4:	1906703a 	and	r3,r3,r4
 4013ce8:	800d883a 	mov	r6,r16
 4013cec:	003fe906 	br	4013c94 <__alt_data_end+0xfc013c94>
 4013cf0:	000d883a 	mov	r6,zero
 4013cf4:	000b883a 	mov	r5,zero
 4013cf8:	0007883a 	mov	r3,zero
 4013cfc:	0005883a 	mov	r2,zero
 4013d00:	003fe406 	br	4013c94 <__alt_data_end+0xfc013c94>
 4013d04:	0123c83a 	sub	r17,zero,r4
 4013d08:	003fd106 	br	4013c50 <__alt_data_end+0xfc013c50>

04013d0c <__floatunsidf>:
 4013d0c:	defffe04 	addi	sp,sp,-8
 4013d10:	dc000015 	stw	r16,0(sp)
 4013d14:	dfc00115 	stw	ra,4(sp)
 4013d18:	2021883a 	mov	r16,r4
 4013d1c:	20002226 	beq	r4,zero,4013da8 <__floatunsidf+0x9c>
 4013d20:	4013db40 	call	4013db4 <__clzsi2>
 4013d24:	01010784 	movi	r4,1054
 4013d28:	2089c83a 	sub	r4,r4,r2
 4013d2c:	01810cc4 	movi	r6,1075
 4013d30:	310dc83a 	sub	r6,r6,r4
 4013d34:	00c007c4 	movi	r3,31
 4013d38:	1980120e 	bge	r3,r6,4013d84 <__floatunsidf+0x78>
 4013d3c:	00c104c4 	movi	r3,1043
 4013d40:	1907c83a 	sub	r3,r3,r4
 4013d44:	80ca983a 	sll	r5,r16,r3
 4013d48:	00800434 	movhi	r2,16
 4013d4c:	10bfffc4 	addi	r2,r2,-1
 4013d50:	2101ffcc 	andi	r4,r4,2047
 4013d54:	0021883a 	mov	r16,zero
 4013d58:	288a703a 	and	r5,r5,r2
 4013d5c:	2008953a 	slli	r4,r4,20
 4013d60:	00c00434 	movhi	r3,16
 4013d64:	18ffffc4 	addi	r3,r3,-1
 4013d68:	28c6703a 	and	r3,r5,r3
 4013d6c:	8005883a 	mov	r2,r16
 4013d70:	1906b03a 	or	r3,r3,r4
 4013d74:	dfc00117 	ldw	ra,4(sp)
 4013d78:	dc000017 	ldw	r16,0(sp)
 4013d7c:	dec00204 	addi	sp,sp,8
 4013d80:	f800283a 	ret
 4013d84:	00c002c4 	movi	r3,11
 4013d88:	188bc83a 	sub	r5,r3,r2
 4013d8c:	814ad83a 	srl	r5,r16,r5
 4013d90:	00c00434 	movhi	r3,16
 4013d94:	18ffffc4 	addi	r3,r3,-1
 4013d98:	81a0983a 	sll	r16,r16,r6
 4013d9c:	2101ffcc 	andi	r4,r4,2047
 4013da0:	28ca703a 	and	r5,r5,r3
 4013da4:	003fed06 	br	4013d5c <__alt_data_end+0xfc013d5c>
 4013da8:	0009883a 	mov	r4,zero
 4013dac:	000b883a 	mov	r5,zero
 4013db0:	003fea06 	br	4013d5c <__alt_data_end+0xfc013d5c>

04013db4 <__clzsi2>:
 4013db4:	00bfffd4 	movui	r2,65535
 4013db8:	11000536 	bltu	r2,r4,4013dd0 <__clzsi2+0x1c>
 4013dbc:	00803fc4 	movi	r2,255
 4013dc0:	11000f36 	bltu	r2,r4,4013e00 <__clzsi2+0x4c>
 4013dc4:	00800804 	movi	r2,32
 4013dc8:	0007883a 	mov	r3,zero
 4013dcc:	00000506 	br	4013de4 <__clzsi2+0x30>
 4013dd0:	00804034 	movhi	r2,256
 4013dd4:	10bfffc4 	addi	r2,r2,-1
 4013dd8:	11000c2e 	bgeu	r2,r4,4013e0c <__clzsi2+0x58>
 4013ddc:	00800204 	movi	r2,8
 4013de0:	00c00604 	movi	r3,24
 4013de4:	20c8d83a 	srl	r4,r4,r3
 4013de8:	00c10074 	movhi	r3,1025
 4013dec:	18dbdc04 	addi	r3,r3,28528
 4013df0:	1909883a 	add	r4,r3,r4
 4013df4:	20c00003 	ldbu	r3,0(r4)
 4013df8:	10c5c83a 	sub	r2,r2,r3
 4013dfc:	f800283a 	ret
 4013e00:	00800604 	movi	r2,24
 4013e04:	00c00204 	movi	r3,8
 4013e08:	003ff606 	br	4013de4 <__alt_data_end+0xfc013de4>
 4013e0c:	00800404 	movi	r2,16
 4013e10:	1007883a 	mov	r3,r2
 4013e14:	003ff306 	br	4013de4 <__alt_data_end+0xfc013de4>

04013e18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4013e18:	defffe04 	addi	sp,sp,-8
 4013e1c:	dfc00115 	stw	ra,4(sp)
 4013e20:	df000015 	stw	fp,0(sp)
 4013e24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4013e28:	d0a01117 	ldw	r2,-32700(gp)
 4013e2c:	10000326 	beq	r2,zero,4013e3c <alt_get_errno+0x24>
 4013e30:	d0a01117 	ldw	r2,-32700(gp)
 4013e34:	103ee83a 	callr	r2
 4013e38:	00000106 	br	4013e40 <alt_get_errno+0x28>
 4013e3c:	d0a6f704 	addi	r2,gp,-25636
}
 4013e40:	e037883a 	mov	sp,fp
 4013e44:	dfc00117 	ldw	ra,4(sp)
 4013e48:	df000017 	ldw	fp,0(sp)
 4013e4c:	dec00204 	addi	sp,sp,8
 4013e50:	f800283a 	ret

04013e54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4013e54:	defffb04 	addi	sp,sp,-20
 4013e58:	dfc00415 	stw	ra,16(sp)
 4013e5c:	df000315 	stw	fp,12(sp)
 4013e60:	df000304 	addi	fp,sp,12
 4013e64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4013e68:	e0bfff17 	ldw	r2,-4(fp)
 4013e6c:	10000816 	blt	r2,zero,4013e90 <close+0x3c>
 4013e70:	01400304 	movi	r5,12
 4013e74:	e13fff17 	ldw	r4,-4(fp)
 4013e78:	4006cd00 	call	4006cd0 <__mulsi3>
 4013e7c:	1007883a 	mov	r3,r2
 4013e80:	00810074 	movhi	r2,1025
 4013e84:	109e7204 	addi	r2,r2,31176
 4013e88:	1885883a 	add	r2,r3,r2
 4013e8c:	00000106 	br	4013e94 <close+0x40>
 4013e90:	0005883a 	mov	r2,zero
 4013e94:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4013e98:	e0bffd17 	ldw	r2,-12(fp)
 4013e9c:	10001926 	beq	r2,zero,4013f04 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4013ea0:	e0bffd17 	ldw	r2,-12(fp)
 4013ea4:	10800017 	ldw	r2,0(r2)
 4013ea8:	10800417 	ldw	r2,16(r2)
 4013eac:	10000626 	beq	r2,zero,4013ec8 <close+0x74>
 4013eb0:	e0bffd17 	ldw	r2,-12(fp)
 4013eb4:	10800017 	ldw	r2,0(r2)
 4013eb8:	10800417 	ldw	r2,16(r2)
 4013ebc:	e13ffd17 	ldw	r4,-12(fp)
 4013ec0:	103ee83a 	callr	r2
 4013ec4:	00000106 	br	4013ecc <close+0x78>
 4013ec8:	0005883a 	mov	r2,zero
 4013ecc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4013ed0:	e13fff17 	ldw	r4,-4(fp)
 4013ed4:	40147300 	call	4014730 <alt_release_fd>
    if (rval < 0)
 4013ed8:	e0bffe17 	ldw	r2,-8(fp)
 4013edc:	1000070e 	bge	r2,zero,4013efc <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4013ee0:	4013e180 	call	4013e18 <alt_get_errno>
 4013ee4:	1007883a 	mov	r3,r2
 4013ee8:	e0bffe17 	ldw	r2,-8(fp)
 4013eec:	0085c83a 	sub	r2,zero,r2
 4013ef0:	18800015 	stw	r2,0(r3)
      return -1;
 4013ef4:	00bfffc4 	movi	r2,-1
 4013ef8:	00000706 	br	4013f18 <close+0xc4>
    }
    return 0;
 4013efc:	0005883a 	mov	r2,zero
 4013f00:	00000506 	br	4013f18 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4013f04:	4013e180 	call	4013e18 <alt_get_errno>
 4013f08:	1007883a 	mov	r3,r2
 4013f0c:	00801444 	movi	r2,81
 4013f10:	18800015 	stw	r2,0(r3)
    return -1;
 4013f14:	00bfffc4 	movi	r2,-1
  }
}
 4013f18:	e037883a 	mov	sp,fp
 4013f1c:	dfc00117 	ldw	ra,4(sp)
 4013f20:	df000017 	ldw	fp,0(sp)
 4013f24:	dec00204 	addi	sp,sp,8
 4013f28:	f800283a 	ret

04013f2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4013f2c:	defffc04 	addi	sp,sp,-16
 4013f30:	df000315 	stw	fp,12(sp)
 4013f34:	df000304 	addi	fp,sp,12
 4013f38:	e13ffd15 	stw	r4,-12(fp)
 4013f3c:	e17ffe15 	stw	r5,-8(fp)
 4013f40:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4013f44:	e0bfff17 	ldw	r2,-4(fp)
}
 4013f48:	e037883a 	mov	sp,fp
 4013f4c:	df000017 	ldw	fp,0(sp)
 4013f50:	dec00104 	addi	sp,sp,4
 4013f54:	f800283a 	ret

04013f58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4013f58:	defffe04 	addi	sp,sp,-8
 4013f5c:	dfc00115 	stw	ra,4(sp)
 4013f60:	df000015 	stw	fp,0(sp)
 4013f64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4013f68:	d0a01117 	ldw	r2,-32700(gp)
 4013f6c:	10000326 	beq	r2,zero,4013f7c <alt_get_errno+0x24>
 4013f70:	d0a01117 	ldw	r2,-32700(gp)
 4013f74:	103ee83a 	callr	r2
 4013f78:	00000106 	br	4013f80 <alt_get_errno+0x28>
 4013f7c:	d0a6f704 	addi	r2,gp,-25636
}
 4013f80:	e037883a 	mov	sp,fp
 4013f84:	dfc00117 	ldw	ra,4(sp)
 4013f88:	df000017 	ldw	fp,0(sp)
 4013f8c:	dec00204 	addi	sp,sp,8
 4013f90:	f800283a 	ret

04013f94 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4013f94:	defffb04 	addi	sp,sp,-20
 4013f98:	dfc00415 	stw	ra,16(sp)
 4013f9c:	df000315 	stw	fp,12(sp)
 4013fa0:	df000304 	addi	fp,sp,12
 4013fa4:	e13ffe15 	stw	r4,-8(fp)
 4013fa8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4013fac:	e0bffe17 	ldw	r2,-8(fp)
 4013fb0:	10000816 	blt	r2,zero,4013fd4 <fstat+0x40>
 4013fb4:	01400304 	movi	r5,12
 4013fb8:	e13ffe17 	ldw	r4,-8(fp)
 4013fbc:	4006cd00 	call	4006cd0 <__mulsi3>
 4013fc0:	1007883a 	mov	r3,r2
 4013fc4:	00810074 	movhi	r2,1025
 4013fc8:	109e7204 	addi	r2,r2,31176
 4013fcc:	1885883a 	add	r2,r3,r2
 4013fd0:	00000106 	br	4013fd8 <fstat+0x44>
 4013fd4:	0005883a 	mov	r2,zero
 4013fd8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4013fdc:	e0bffd17 	ldw	r2,-12(fp)
 4013fe0:	10001026 	beq	r2,zero,4014024 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4013fe4:	e0bffd17 	ldw	r2,-12(fp)
 4013fe8:	10800017 	ldw	r2,0(r2)
 4013fec:	10800817 	ldw	r2,32(r2)
 4013ff0:	10000726 	beq	r2,zero,4014010 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 4013ff4:	e0bffd17 	ldw	r2,-12(fp)
 4013ff8:	10800017 	ldw	r2,0(r2)
 4013ffc:	10800817 	ldw	r2,32(r2)
 4014000:	e17fff17 	ldw	r5,-4(fp)
 4014004:	e13ffd17 	ldw	r4,-12(fp)
 4014008:	103ee83a 	callr	r2
 401400c:	00000a06 	br	4014038 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4014010:	e0bfff17 	ldw	r2,-4(fp)
 4014014:	00c80004 	movi	r3,8192
 4014018:	10c00115 	stw	r3,4(r2)
      return 0;
 401401c:	0005883a 	mov	r2,zero
 4014020:	00000506 	br	4014038 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4014024:	4013f580 	call	4013f58 <alt_get_errno>
 4014028:	1007883a 	mov	r3,r2
 401402c:	00801444 	movi	r2,81
 4014030:	18800015 	stw	r2,0(r3)
    return -1;
 4014034:	00bfffc4 	movi	r2,-1
  }
}
 4014038:	e037883a 	mov	sp,fp
 401403c:	dfc00117 	ldw	ra,4(sp)
 4014040:	df000017 	ldw	fp,0(sp)
 4014044:	dec00204 	addi	sp,sp,8
 4014048:	f800283a 	ret

0401404c <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 401404c:	defff404 	addi	sp,sp,-48
 4014050:	dfc00b15 	stw	ra,44(sp)
 4014054:	df000a15 	stw	fp,40(sp)
 4014058:	dd000915 	stw	r20,36(sp)
 401405c:	dcc00815 	stw	r19,32(sp)
 4014060:	dc800715 	stw	r18,28(sp)
 4014064:	dc400615 	stw	r17,24(sp)
 4014068:	dc000515 	stw	r16,20(sp)
 401406c:	df000a04 	addi	fp,sp,40
 4014070:	e13ff915 	stw	r4,-28(fp)
 4014074:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 4014078:	e0bffa17 	ldw	r2,-24(fp)
 401407c:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4014080:	d0a70617 	ldw	r2,-25576(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 4014084:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4014088:	d0a70517 	ldw	r2,-25580(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 401408c:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 4014090:	e0bff817 	ldw	r2,-32(fp)
 4014094:	10005f26 	beq	r2,zero,4014214 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 4014098:	d0a70017 	ldw	r2,-25600(gp)
 401409c:	1029883a 	mov	r20,r2
 40140a0:	e17ff817 	ldw	r5,-32(fp)
 40140a4:	e13ff717 	ldw	r4,-36(fp)
 40140a8:	4006c140 	call	4006c14 <__udivsi3>
 40140ac:	a085883a 	add	r2,r20,r2
 40140b0:	1007883a 	mov	r3,r2
 40140b4:	e0bff917 	ldw	r2,-28(fp)
 40140b8:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 40140bc:	d0a70117 	ldw	r2,-25596(gp)
 40140c0:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 40140c4:	e0bff717 	ldw	r2,-36(fp)
 40140c8:	1021883a 	mov	r16,r2
 40140cc:	0023883a 	mov	r17,zero
 40140d0:	e17ff817 	ldw	r5,-32(fp)
 40140d4:	010003f4 	movhi	r4,15
 40140d8:	21109004 	addi	r4,r4,16960
 40140dc:	4006c140 	call	4006c14 <__udivsi3>
 40140e0:	1025883a 	mov	r18,r2
 40140e4:	0027883a 	mov	r19,zero
 40140e8:	900d883a 	mov	r6,r18
 40140ec:	980f883a 	mov	r7,r19
 40140f0:	8009883a 	mov	r4,r16
 40140f4:	880b883a 	mov	r5,r17
 40140f8:	40108a80 	call	40108a8 <__muldi3>
 40140fc:	1009883a 	mov	r4,r2
 4014100:	180b883a 	mov	r5,r3
 4014104:	2005883a 	mov	r2,r4
 4014108:	2807883a 	mov	r3,r5
 401410c:	018003f4 	movhi	r6,15
 4014110:	31909004 	addi	r6,r6,16960
 4014114:	000f883a 	mov	r7,zero
 4014118:	1009883a 	mov	r4,r2
 401411c:	180b883a 	mov	r5,r3
 4014120:	4010fb00 	call	4010fb0 <__umoddi3>
 4014124:	1009883a 	mov	r4,r2
 4014128:	180b883a 	mov	r5,r3
 401412c:	2005883a 	mov	r2,r4
 4014130:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 4014134:	a085883a 	add	r2,r20,r2
 4014138:	1007883a 	mov	r3,r2
 401413c:	e0bff917 	ldw	r2,-28(fp)
 4014140:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 4014144:	00001406 	br	4014198 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 4014148:	e0bff917 	ldw	r2,-28(fp)
 401414c:	10800017 	ldw	r2,0(r2)
 4014150:	00800516 	blt	zero,r2,4014168 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 4014154:	e0bff917 	ldw	r2,-28(fp)
 4014158:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 401415c:	e0bff917 	ldw	r2,-28(fp)
 4014160:	10000115 	stw	zero,4(r2)
          break;
 4014164:	00000f06 	br	40141a4 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 4014168:	e0bff917 	ldw	r2,-28(fp)
 401416c:	10800017 	ldw	r2,0(r2)
 4014170:	10ffffc4 	addi	r3,r2,-1
 4014174:	e0bff917 	ldw	r2,-28(fp)
 4014178:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 401417c:	e0bff917 	ldw	r2,-28(fp)
 4014180:	10c00117 	ldw	r3,4(r2)
 4014184:	008003f4 	movhi	r2,15
 4014188:	10909004 	addi	r2,r2,16960
 401418c:	1887883a 	add	r3,r3,r2
 4014190:	e0bff917 	ldw	r2,-28(fp)
 4014194:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 4014198:	e0bff917 	ldw	r2,-28(fp)
 401419c:	10800117 	ldw	r2,4(r2)
 40141a0:	103fe916 	blt	r2,zero,4014148 <__alt_data_end+0xfc014148>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 40141a4:	00000c06 	br	40141d8 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 40141a8:	e0bff917 	ldw	r2,-28(fp)
 40141ac:	10800017 	ldw	r2,0(r2)
 40141b0:	10c00044 	addi	r3,r2,1
 40141b4:	e0bff917 	ldw	r2,-28(fp)
 40141b8:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 40141bc:	e0bff917 	ldw	r2,-28(fp)
 40141c0:	10c00117 	ldw	r3,4(r2)
 40141c4:	00bffc74 	movhi	r2,65521
 40141c8:	10af7004 	addi	r2,r2,-16960
 40141cc:	1887883a 	add	r3,r3,r2
 40141d0:	e0bff917 	ldw	r2,-28(fp)
 40141d4:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 40141d8:	e0bff917 	ldw	r2,-28(fp)
 40141dc:	10c00117 	ldw	r3,4(r2)
 40141e0:	008003f4 	movhi	r2,15
 40141e4:	10908fc4 	addi	r2,r2,16959
 40141e8:	10ffef16 	blt	r2,r3,40141a8 <__alt_data_end+0xfc0141a8>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 40141ec:	e0bff617 	ldw	r2,-40(fp)
 40141f0:	10000626 	beq	r2,zero,401420c <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 40141f4:	d0e6fe17 	ldw	r3,-25608(gp)
 40141f8:	e0bff617 	ldw	r2,-40(fp)
 40141fc:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 4014200:	d0e6ff17 	ldw	r3,-25604(gp)
 4014204:	e0bff617 	ldw	r2,-40(fp)
 4014208:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 401420c:	0005883a 	mov	r2,zero
 4014210:	00000106 	br	4014218 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 4014214:	00bfde84 	movi	r2,-134
}
 4014218:	e6fffb04 	addi	sp,fp,-20
 401421c:	dfc00617 	ldw	ra,24(sp)
 4014220:	df000517 	ldw	fp,20(sp)
 4014224:	dd000417 	ldw	r20,16(sp)
 4014228:	dcc00317 	ldw	r19,12(sp)
 401422c:	dc800217 	ldw	r18,8(sp)
 4014230:	dc400117 	ldw	r17,4(sp)
 4014234:	dc000017 	ldw	r16,0(sp)
 4014238:	dec00704 	addi	sp,sp,28
 401423c:	f800283a 	ret

04014240 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014240:	defffe04 	addi	sp,sp,-8
 4014244:	dfc00115 	stw	ra,4(sp)
 4014248:	df000015 	stw	fp,0(sp)
 401424c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014250:	d0a01117 	ldw	r2,-32700(gp)
 4014254:	10000326 	beq	r2,zero,4014264 <alt_get_errno+0x24>
 4014258:	d0a01117 	ldw	r2,-32700(gp)
 401425c:	103ee83a 	callr	r2
 4014260:	00000106 	br	4014268 <alt_get_errno+0x28>
 4014264:	d0a6f704 	addi	r2,gp,-25636
}
 4014268:	e037883a 	mov	sp,fp
 401426c:	dfc00117 	ldw	ra,4(sp)
 4014270:	df000017 	ldw	fp,0(sp)
 4014274:	dec00204 	addi	sp,sp,8
 4014278:	f800283a 	ret

0401427c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 401427c:	deffed04 	addi	sp,sp,-76
 4014280:	dfc01215 	stw	ra,72(sp)
 4014284:	df001115 	stw	fp,68(sp)
 4014288:	df001104 	addi	fp,sp,68
 401428c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4014290:	e0bfff17 	ldw	r2,-4(fp)
 4014294:	10000816 	blt	r2,zero,40142b8 <isatty+0x3c>
 4014298:	01400304 	movi	r5,12
 401429c:	e13fff17 	ldw	r4,-4(fp)
 40142a0:	4006cd00 	call	4006cd0 <__mulsi3>
 40142a4:	1007883a 	mov	r3,r2
 40142a8:	00810074 	movhi	r2,1025
 40142ac:	109e7204 	addi	r2,r2,31176
 40142b0:	1885883a 	add	r2,r3,r2
 40142b4:	00000106 	br	40142bc <isatty+0x40>
 40142b8:	0005883a 	mov	r2,zero
 40142bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 40142c0:	e0bfef17 	ldw	r2,-68(fp)
 40142c4:	10000e26 	beq	r2,zero,4014300 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40142c8:	e0bfef17 	ldw	r2,-68(fp)
 40142cc:	10800017 	ldw	r2,0(r2)
 40142d0:	10800817 	ldw	r2,32(r2)
 40142d4:	1000021e 	bne	r2,zero,40142e0 <isatty+0x64>
    {
      return 1;
 40142d8:	00800044 	movi	r2,1
 40142dc:	00000d06 	br	4014314 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40142e0:	e0bff004 	addi	r2,fp,-64
 40142e4:	100b883a 	mov	r5,r2
 40142e8:	e13fff17 	ldw	r4,-4(fp)
 40142ec:	4013f940 	call	4013f94 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 40142f0:	e0bff117 	ldw	r2,-60(fp)
 40142f4:	10880020 	cmpeqi	r2,r2,8192
 40142f8:	10803fcc 	andi	r2,r2,255
 40142fc:	00000506 	br	4014314 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4014300:	40142400 	call	4014240 <alt_get_errno>
 4014304:	1007883a 	mov	r3,r2
 4014308:	00801444 	movi	r2,81
 401430c:	18800015 	stw	r2,0(r3)
    return 0;
 4014310:	0005883a 	mov	r2,zero
  }
}
 4014314:	e037883a 	mov	sp,fp
 4014318:	dfc00117 	ldw	ra,4(sp)
 401431c:	df000017 	ldw	fp,0(sp)
 4014320:	dec00204 	addi	sp,sp,8
 4014324:	f800283a 	ret

04014328 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4014328:	defffc04 	addi	sp,sp,-16
 401432c:	df000315 	stw	fp,12(sp)
 4014330:	df000304 	addi	fp,sp,12
 4014334:	e13ffd15 	stw	r4,-12(fp)
 4014338:	e17ffe15 	stw	r5,-8(fp)
 401433c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4014340:	e0fffe17 	ldw	r3,-8(fp)
 4014344:	e0bffd17 	ldw	r2,-12(fp)
 4014348:	18800c26 	beq	r3,r2,401437c <alt_load_section+0x54>
  {
    while( to != end )
 401434c:	00000806 	br	4014370 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4014350:	e0bffe17 	ldw	r2,-8(fp)
 4014354:	10c00104 	addi	r3,r2,4
 4014358:	e0fffe15 	stw	r3,-8(fp)
 401435c:	e0fffd17 	ldw	r3,-12(fp)
 4014360:	19000104 	addi	r4,r3,4
 4014364:	e13ffd15 	stw	r4,-12(fp)
 4014368:	18c00017 	ldw	r3,0(r3)
 401436c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4014370:	e0fffe17 	ldw	r3,-8(fp)
 4014374:	e0bfff17 	ldw	r2,-4(fp)
 4014378:	18bff51e 	bne	r3,r2,4014350 <__alt_data_end+0xfc014350>
    {
      *to++ = *from++;
    }
  }
}
 401437c:	0001883a 	nop
 4014380:	e037883a 	mov	sp,fp
 4014384:	df000017 	ldw	fp,0(sp)
 4014388:	dec00104 	addi	sp,sp,4
 401438c:	f800283a 	ret

04014390 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4014390:	defffe04 	addi	sp,sp,-8
 4014394:	dfc00115 	stw	ra,4(sp)
 4014398:	df000015 	stw	fp,0(sp)
 401439c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40143a0:	018100b4 	movhi	r6,1026
 40143a4:	31a30004 	addi	r6,r6,-29696
 40143a8:	01410074 	movhi	r5,1025
 40143ac:	295c2704 	addi	r5,r5,28828
 40143b0:	010100b4 	movhi	r4,1026
 40143b4:	21230004 	addi	r4,r4,-29696
 40143b8:	40143280 	call	4014328 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40143bc:	01810034 	movhi	r6,1024
 40143c0:	31808c04 	addi	r6,r6,560
 40143c4:	01410034 	movhi	r5,1024
 40143c8:	29400804 	addi	r5,r5,32
 40143cc:	01010034 	movhi	r4,1024
 40143d0:	21000804 	addi	r4,r4,32
 40143d4:	40143280 	call	4014328 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40143d8:	01810074 	movhi	r6,1025
 40143dc:	319c2704 	addi	r6,r6,28828
 40143e0:	01410074 	movhi	r5,1025
 40143e4:	295ace04 	addi	r5,r5,27448
 40143e8:	01010074 	movhi	r4,1025
 40143ec:	211ace04 	addi	r4,r4,27448
 40143f0:	40143280 	call	4014328 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40143f4:	4015c240 	call	4015c24 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40143f8:	4015de40 	call	4015de4 <alt_icache_flush_all>
}
 40143fc:	0001883a 	nop
 4014400:	e037883a 	mov	sp,fp
 4014404:	dfc00117 	ldw	ra,4(sp)
 4014408:	df000017 	ldw	fp,0(sp)
 401440c:	dec00204 	addi	sp,sp,8
 4014410:	f800283a 	ret

04014414 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014414:	defffe04 	addi	sp,sp,-8
 4014418:	dfc00115 	stw	ra,4(sp)
 401441c:	df000015 	stw	fp,0(sp)
 4014420:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014424:	d0a01117 	ldw	r2,-32700(gp)
 4014428:	10000326 	beq	r2,zero,4014438 <alt_get_errno+0x24>
 401442c:	d0a01117 	ldw	r2,-32700(gp)
 4014430:	103ee83a 	callr	r2
 4014434:	00000106 	br	401443c <alt_get_errno+0x28>
 4014438:	d0a6f704 	addi	r2,gp,-25636
}
 401443c:	e037883a 	mov	sp,fp
 4014440:	dfc00117 	ldw	ra,4(sp)
 4014444:	df000017 	ldw	fp,0(sp)
 4014448:	dec00204 	addi	sp,sp,8
 401444c:	f800283a 	ret

04014450 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4014450:	defff904 	addi	sp,sp,-28
 4014454:	dfc00615 	stw	ra,24(sp)
 4014458:	df000515 	stw	fp,20(sp)
 401445c:	df000504 	addi	fp,sp,20
 4014460:	e13ffd15 	stw	r4,-12(fp)
 4014464:	e17ffe15 	stw	r5,-8(fp)
 4014468:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 401446c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4014470:	e0bffd17 	ldw	r2,-12(fp)
 4014474:	10000816 	blt	r2,zero,4014498 <lseek+0x48>
 4014478:	01400304 	movi	r5,12
 401447c:	e13ffd17 	ldw	r4,-12(fp)
 4014480:	4006cd00 	call	4006cd0 <__mulsi3>
 4014484:	1007883a 	mov	r3,r2
 4014488:	00810074 	movhi	r2,1025
 401448c:	109e7204 	addi	r2,r2,31176
 4014490:	1885883a 	add	r2,r3,r2
 4014494:	00000106 	br	401449c <lseek+0x4c>
 4014498:	0005883a 	mov	r2,zero
 401449c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 40144a0:	e0bffc17 	ldw	r2,-16(fp)
 40144a4:	10001026 	beq	r2,zero,40144e8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40144a8:	e0bffc17 	ldw	r2,-16(fp)
 40144ac:	10800017 	ldw	r2,0(r2)
 40144b0:	10800717 	ldw	r2,28(r2)
 40144b4:	10000926 	beq	r2,zero,40144dc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40144b8:	e0bffc17 	ldw	r2,-16(fp)
 40144bc:	10800017 	ldw	r2,0(r2)
 40144c0:	10800717 	ldw	r2,28(r2)
 40144c4:	e1bfff17 	ldw	r6,-4(fp)
 40144c8:	e17ffe17 	ldw	r5,-8(fp)
 40144cc:	e13ffc17 	ldw	r4,-16(fp)
 40144d0:	103ee83a 	callr	r2
 40144d4:	e0bffb15 	stw	r2,-20(fp)
 40144d8:	00000506 	br	40144f0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40144dc:	00bfde84 	movi	r2,-134
 40144e0:	e0bffb15 	stw	r2,-20(fp)
 40144e4:	00000206 	br	40144f0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 40144e8:	00bfebc4 	movi	r2,-81
 40144ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 40144f0:	e0bffb17 	ldw	r2,-20(fp)
 40144f4:	1000070e 	bge	r2,zero,4014514 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 40144f8:	40144140 	call	4014414 <alt_get_errno>
 40144fc:	1007883a 	mov	r3,r2
 4014500:	e0bffb17 	ldw	r2,-20(fp)
 4014504:	0085c83a 	sub	r2,zero,r2
 4014508:	18800015 	stw	r2,0(r3)
    rc = -1;
 401450c:	00bfffc4 	movi	r2,-1
 4014510:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4014514:	e0bffb17 	ldw	r2,-20(fp)
}
 4014518:	e037883a 	mov	sp,fp
 401451c:	dfc00117 	ldw	ra,4(sp)
 4014520:	df000017 	ldw	fp,0(sp)
 4014524:	dec00204 	addi	sp,sp,8
 4014528:	f800283a 	ret

0401452c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 401452c:	defffd04 	addi	sp,sp,-12
 4014530:	dfc00215 	stw	ra,8(sp)
 4014534:	df000115 	stw	fp,4(sp)
 4014538:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 401453c:	0009883a 	mov	r4,zero
 4014540:	4014ba80 	call	4014ba8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4014544:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4014548:	4014be00 	call	4014be0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 401454c:	01810074 	movhi	r6,1025
 4014550:	319c1f04 	addi	r6,r6,28796
 4014554:	01410074 	movhi	r5,1025
 4014558:	295c1f04 	addi	r5,r5,28796
 401455c:	01010074 	movhi	r4,1025
 4014560:	211c1f04 	addi	r4,r4,28796
 4014564:	40161880 	call	4016188 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4014568:	4015d240 	call	4015d24 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 401456c:	01010074 	movhi	r4,1025
 4014570:	21176104 	addi	r4,r4,23940
 4014574:	40167a40 	call	40167a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4014578:	d0a70217 	ldw	r2,-25592(gp)
 401457c:	d0e70317 	ldw	r3,-25588(gp)
 4014580:	d1270417 	ldw	r4,-25584(gp)
 4014584:	200d883a 	mov	r6,r4
 4014588:	180b883a 	mov	r5,r3
 401458c:	1009883a 	mov	r4,r2
 4014590:	4001e2c0 	call	4001e2c <main>
 4014594:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4014598:	01000044 	movi	r4,1
 401459c:	4013e540 	call	4013e54 <close>
  exit (result);
 40145a0:	e13fff17 	ldw	r4,-4(fp)
 40145a4:	40167b80 	call	40167b8 <exit>

040145a8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 40145a8:	defffe04 	addi	sp,sp,-8
 40145ac:	df000115 	stw	fp,4(sp)
 40145b0:	df000104 	addi	fp,sp,4
 40145b4:	e13fff15 	stw	r4,-4(fp)
}
 40145b8:	0001883a 	nop
 40145bc:	e037883a 	mov	sp,fp
 40145c0:	df000017 	ldw	fp,0(sp)
 40145c4:	dec00104 	addi	sp,sp,4
 40145c8:	f800283a 	ret

040145cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 40145cc:	defffe04 	addi	sp,sp,-8
 40145d0:	df000115 	stw	fp,4(sp)
 40145d4:	df000104 	addi	fp,sp,4
 40145d8:	e13fff15 	stw	r4,-4(fp)
}
 40145dc:	0001883a 	nop
 40145e0:	e037883a 	mov	sp,fp
 40145e4:	df000017 	ldw	fp,0(sp)
 40145e8:	dec00104 	addi	sp,sp,4
 40145ec:	f800283a 	ret

040145f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40145f0:	defffe04 	addi	sp,sp,-8
 40145f4:	dfc00115 	stw	ra,4(sp)
 40145f8:	df000015 	stw	fp,0(sp)
 40145fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014600:	d0a01117 	ldw	r2,-32700(gp)
 4014604:	10000326 	beq	r2,zero,4014614 <alt_get_errno+0x24>
 4014608:	d0a01117 	ldw	r2,-32700(gp)
 401460c:	103ee83a 	callr	r2
 4014610:	00000106 	br	4014618 <alt_get_errno+0x28>
 4014614:	d0a6f704 	addi	r2,gp,-25636
}
 4014618:	e037883a 	mov	sp,fp
 401461c:	dfc00117 	ldw	ra,4(sp)
 4014620:	df000017 	ldw	fp,0(sp)
 4014624:	dec00204 	addi	sp,sp,8
 4014628:	f800283a 	ret

0401462c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 401462c:	defff904 	addi	sp,sp,-28
 4014630:	dfc00615 	stw	ra,24(sp)
 4014634:	df000515 	stw	fp,20(sp)
 4014638:	df000504 	addi	fp,sp,20
 401463c:	e13ffd15 	stw	r4,-12(fp)
 4014640:	e17ffe15 	stw	r5,-8(fp)
 4014644:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4014648:	e0bffd17 	ldw	r2,-12(fp)
 401464c:	10000816 	blt	r2,zero,4014670 <read+0x44>
 4014650:	01400304 	movi	r5,12
 4014654:	e13ffd17 	ldw	r4,-12(fp)
 4014658:	4006cd00 	call	4006cd0 <__mulsi3>
 401465c:	1007883a 	mov	r3,r2
 4014660:	00810074 	movhi	r2,1025
 4014664:	109e7204 	addi	r2,r2,31176
 4014668:	1885883a 	add	r2,r3,r2
 401466c:	00000106 	br	4014674 <read+0x48>
 4014670:	0005883a 	mov	r2,zero
 4014674:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4014678:	e0bffb17 	ldw	r2,-20(fp)
 401467c:	10002226 	beq	r2,zero,4014708 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4014680:	e0bffb17 	ldw	r2,-20(fp)
 4014684:	10800217 	ldw	r2,8(r2)
 4014688:	108000cc 	andi	r2,r2,3
 401468c:	10800060 	cmpeqi	r2,r2,1
 4014690:	1000181e 	bne	r2,zero,40146f4 <read+0xc8>
        (fd->dev->read))
 4014694:	e0bffb17 	ldw	r2,-20(fp)
 4014698:	10800017 	ldw	r2,0(r2)
 401469c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40146a0:	10001426 	beq	r2,zero,40146f4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 40146a4:	e0bffb17 	ldw	r2,-20(fp)
 40146a8:	10800017 	ldw	r2,0(r2)
 40146ac:	10800517 	ldw	r2,20(r2)
 40146b0:	e0ffff17 	ldw	r3,-4(fp)
 40146b4:	180d883a 	mov	r6,r3
 40146b8:	e17ffe17 	ldw	r5,-8(fp)
 40146bc:	e13ffb17 	ldw	r4,-20(fp)
 40146c0:	103ee83a 	callr	r2
 40146c4:	e0bffc15 	stw	r2,-16(fp)
 40146c8:	e0bffc17 	ldw	r2,-16(fp)
 40146cc:	1000070e 	bge	r2,zero,40146ec <read+0xc0>
        {
          ALT_ERRNO = -rval;
 40146d0:	40145f00 	call	40145f0 <alt_get_errno>
 40146d4:	1007883a 	mov	r3,r2
 40146d8:	e0bffc17 	ldw	r2,-16(fp)
 40146dc:	0085c83a 	sub	r2,zero,r2
 40146e0:	18800015 	stw	r2,0(r3)
          return -1;
 40146e4:	00bfffc4 	movi	r2,-1
 40146e8:	00000c06 	br	401471c <read+0xf0>
        }
        return rval;
 40146ec:	e0bffc17 	ldw	r2,-16(fp)
 40146f0:	00000a06 	br	401471c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40146f4:	40145f00 	call	40145f0 <alt_get_errno>
 40146f8:	1007883a 	mov	r3,r2
 40146fc:	00800344 	movi	r2,13
 4014700:	18800015 	stw	r2,0(r3)
 4014704:	00000406 	br	4014718 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4014708:	40145f00 	call	40145f0 <alt_get_errno>
 401470c:	1007883a 	mov	r3,r2
 4014710:	00801444 	movi	r2,81
 4014714:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4014718:	00bfffc4 	movi	r2,-1
}
 401471c:	e037883a 	mov	sp,fp
 4014720:	dfc00117 	ldw	ra,4(sp)
 4014724:	df000017 	ldw	fp,0(sp)
 4014728:	dec00204 	addi	sp,sp,8
 401472c:	f800283a 	ret

04014730 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4014730:	defffc04 	addi	sp,sp,-16
 4014734:	dfc00315 	stw	ra,12(sp)
 4014738:	df000215 	stw	fp,8(sp)
 401473c:	dc000115 	stw	r16,4(sp)
 4014740:	df000204 	addi	fp,sp,8
 4014744:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4014748:	e0bffe17 	ldw	r2,-8(fp)
 401474c:	108000d0 	cmplti	r2,r2,3
 4014750:	1000111e 	bne	r2,zero,4014798 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4014754:	04010074 	movhi	r16,1025
 4014758:	841e7204 	addi	r16,r16,31176
 401475c:	e0bffe17 	ldw	r2,-8(fp)
 4014760:	01400304 	movi	r5,12
 4014764:	1009883a 	mov	r4,r2
 4014768:	4006cd00 	call	4006cd0 <__mulsi3>
 401476c:	8085883a 	add	r2,r16,r2
 4014770:	10800204 	addi	r2,r2,8
 4014774:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4014778:	04010074 	movhi	r16,1025
 401477c:	841e7204 	addi	r16,r16,31176
 4014780:	e0bffe17 	ldw	r2,-8(fp)
 4014784:	01400304 	movi	r5,12
 4014788:	1009883a 	mov	r4,r2
 401478c:	4006cd00 	call	4006cd0 <__mulsi3>
 4014790:	8085883a 	add	r2,r16,r2
 4014794:	10000015 	stw	zero,0(r2)
  }
}
 4014798:	0001883a 	nop
 401479c:	e6ffff04 	addi	sp,fp,-4
 40147a0:	dfc00217 	ldw	ra,8(sp)
 40147a4:	df000117 	ldw	fp,4(sp)
 40147a8:	dc000017 	ldw	r16,0(sp)
 40147ac:	dec00304 	addi	sp,sp,12
 40147b0:	f800283a 	ret

040147b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 40147b4:	defff904 	addi	sp,sp,-28
 40147b8:	df000615 	stw	fp,24(sp)
 40147bc:	df000604 	addi	fp,sp,24
 40147c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40147c4:	0005303a 	rdctl	r2,status
 40147c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40147cc:	e0fffe17 	ldw	r3,-8(fp)
 40147d0:	00bfff84 	movi	r2,-2
 40147d4:	1884703a 	and	r2,r3,r2
 40147d8:	1001703a 	wrctl	status,r2
  
  return context;
 40147dc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40147e0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40147e4:	d0a01217 	ldw	r2,-32696(gp)
 40147e8:	10c000c4 	addi	r3,r2,3
 40147ec:	00bfff04 	movi	r2,-4
 40147f0:	1884703a 	and	r2,r3,r2
 40147f4:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 40147f8:	d0e01217 	ldw	r3,-32696(gp)
 40147fc:	e0bfff17 	ldw	r2,-4(fp)
 4014800:	1887883a 	add	r3,r3,r2
 4014804:	00820034 	movhi	r2,2048
 4014808:	10800004 	addi	r2,r2,0
 401480c:	10c0062e 	bgeu	r2,r3,4014828 <sbrk+0x74>
 4014810:	e0bffb17 	ldw	r2,-20(fp)
 4014814:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014818:	e0bffa17 	ldw	r2,-24(fp)
 401481c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4014820:	00bfffc4 	movi	r2,-1
 4014824:	00000b06 	br	4014854 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4014828:	d0a01217 	ldw	r2,-32696(gp)
 401482c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4014830:	d0e01217 	ldw	r3,-32696(gp)
 4014834:	e0bfff17 	ldw	r2,-4(fp)
 4014838:	1885883a 	add	r2,r3,r2
 401483c:	d0a01215 	stw	r2,-32696(gp)
 4014840:	e0bffb17 	ldw	r2,-20(fp)
 4014844:	e0bffc15 	stw	r2,-16(fp)
 4014848:	e0bffc17 	ldw	r2,-16(fp)
 401484c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4014850:	e0bffd17 	ldw	r2,-12(fp)
} 
 4014854:	e037883a 	mov	sp,fp
 4014858:	df000017 	ldw	fp,0(sp)
 401485c:	dec00104 	addi	sp,sp,4
 4014860:	f800283a 	ret

04014864 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4014864:	defffa04 	addi	sp,sp,-24
 4014868:	df000515 	stw	fp,20(sp)
 401486c:	df000504 	addi	fp,sp,20
 4014870:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014874:	0005303a 	rdctl	r2,status
 4014878:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401487c:	e0fffc17 	ldw	r3,-16(fp)
 4014880:	00bfff84 	movi	r2,-2
 4014884:	1884703a 	and	r2,r3,r2
 4014888:	1001703a 	wrctl	status,r2
  
  return context;
 401488c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4014890:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4014894:	e0bfff17 	ldw	r2,-4(fp)
 4014898:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401489c:	e0bffd17 	ldw	r2,-12(fp)
 40148a0:	10800017 	ldw	r2,0(r2)
 40148a4:	e0fffd17 	ldw	r3,-12(fp)
 40148a8:	18c00117 	ldw	r3,4(r3)
 40148ac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 40148b0:	e0bffd17 	ldw	r2,-12(fp)
 40148b4:	10800117 	ldw	r2,4(r2)
 40148b8:	e0fffd17 	ldw	r3,-12(fp)
 40148bc:	18c00017 	ldw	r3,0(r3)
 40148c0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40148c4:	e0bffd17 	ldw	r2,-12(fp)
 40148c8:	e0fffd17 	ldw	r3,-12(fp)
 40148cc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40148d0:	e0bffd17 	ldw	r2,-12(fp)
 40148d4:	e0fffd17 	ldw	r3,-12(fp)
 40148d8:	10c00015 	stw	r3,0(r2)
 40148dc:	e0bffb17 	ldw	r2,-20(fp)
 40148e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40148e4:	e0bffe17 	ldw	r2,-8(fp)
 40148e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40148ec:	0001883a 	nop
 40148f0:	e037883a 	mov	sp,fp
 40148f4:	df000017 	ldw	fp,0(sp)
 40148f8:	dec00104 	addi	sp,sp,4
 40148fc:	f800283a 	ret

04014900 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4014900:	defffb04 	addi	sp,sp,-20
 4014904:	dfc00415 	stw	ra,16(sp)
 4014908:	df000315 	stw	fp,12(sp)
 401490c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4014910:	d0a01317 	ldw	r2,-32692(gp)
 4014914:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4014918:	d0a70617 	ldw	r2,-25576(gp)
 401491c:	10800044 	addi	r2,r2,1
 4014920:	d0a70615 	stw	r2,-25576(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4014924:	00002e06 	br	40149e0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4014928:	e0bffd17 	ldw	r2,-12(fp)
 401492c:	10800017 	ldw	r2,0(r2)
 4014930:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4014934:	e0bffd17 	ldw	r2,-12(fp)
 4014938:	10800403 	ldbu	r2,16(r2)
 401493c:	10803fcc 	andi	r2,r2,255
 4014940:	10000426 	beq	r2,zero,4014954 <alt_tick+0x54>
 4014944:	d0a70617 	ldw	r2,-25576(gp)
 4014948:	1000021e 	bne	r2,zero,4014954 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401494c:	e0bffd17 	ldw	r2,-12(fp)
 4014950:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4014954:	e0bffd17 	ldw	r2,-12(fp)
 4014958:	10800217 	ldw	r2,8(r2)
 401495c:	d0e70617 	ldw	r3,-25576(gp)
 4014960:	18801d36 	bltu	r3,r2,40149d8 <alt_tick+0xd8>
 4014964:	e0bffd17 	ldw	r2,-12(fp)
 4014968:	10800403 	ldbu	r2,16(r2)
 401496c:	10803fcc 	andi	r2,r2,255
 4014970:	1000191e 	bne	r2,zero,40149d8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4014974:	e0bffd17 	ldw	r2,-12(fp)
 4014978:	10800317 	ldw	r2,12(r2)
 401497c:	e0fffd17 	ldw	r3,-12(fp)
 4014980:	18c00517 	ldw	r3,20(r3)
 4014984:	1809883a 	mov	r4,r3
 4014988:	103ee83a 	callr	r2
 401498c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4014990:	e0bfff17 	ldw	r2,-4(fp)
 4014994:	1000031e 	bne	r2,zero,40149a4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4014998:	e13ffd17 	ldw	r4,-12(fp)
 401499c:	40148640 	call	4014864 <alt_alarm_stop>
 40149a0:	00000d06 	br	40149d8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 40149a4:	e0bffd17 	ldw	r2,-12(fp)
 40149a8:	10c00217 	ldw	r3,8(r2)
 40149ac:	e0bfff17 	ldw	r2,-4(fp)
 40149b0:	1887883a 	add	r3,r3,r2
 40149b4:	e0bffd17 	ldw	r2,-12(fp)
 40149b8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40149bc:	e0bffd17 	ldw	r2,-12(fp)
 40149c0:	10c00217 	ldw	r3,8(r2)
 40149c4:	d0a70617 	ldw	r2,-25576(gp)
 40149c8:	1880032e 	bgeu	r3,r2,40149d8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40149cc:	e0bffd17 	ldw	r2,-12(fp)
 40149d0:	00c00044 	movi	r3,1
 40149d4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40149d8:	e0bffe17 	ldw	r2,-8(fp)
 40149dc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40149e0:	e0fffd17 	ldw	r3,-12(fp)
 40149e4:	d0a01304 	addi	r2,gp,-32692
 40149e8:	18bfcf1e 	bne	r3,r2,4014928 <__alt_data_end+0xfc014928>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40149ec:	0001883a 	nop
}
 40149f0:	0001883a 	nop
 40149f4:	e037883a 	mov	sp,fp
 40149f8:	dfc00117 	ldw	ra,4(sp)
 40149fc:	df000017 	ldw	fp,0(sp)
 4014a00:	dec00204 	addi	sp,sp,8
 4014a04:	f800283a 	ret

04014a08 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4014a08:	defffd04 	addi	sp,sp,-12
 4014a0c:	dfc00215 	stw	ra,8(sp)
 4014a10:	df000115 	stw	fp,4(sp)
 4014a14:	df000104 	addi	fp,sp,4
 4014a18:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4014a1c:	e13fff17 	ldw	r4,-4(fp)
 4014a20:	4015acc0 	call	4015acc <alt_busy_sleep>
}
 4014a24:	e037883a 	mov	sp,fp
 4014a28:	dfc00117 	ldw	ra,4(sp)
 4014a2c:	df000017 	ldw	fp,0(sp)
 4014a30:	dec00204 	addi	sp,sp,8
 4014a34:	f800283a 	ret

04014a38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014a38:	defffe04 	addi	sp,sp,-8
 4014a3c:	dfc00115 	stw	ra,4(sp)
 4014a40:	df000015 	stw	fp,0(sp)
 4014a44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014a48:	d0a01117 	ldw	r2,-32700(gp)
 4014a4c:	10000326 	beq	r2,zero,4014a5c <alt_get_errno+0x24>
 4014a50:	d0a01117 	ldw	r2,-32700(gp)
 4014a54:	103ee83a 	callr	r2
 4014a58:	00000106 	br	4014a60 <alt_get_errno+0x28>
 4014a5c:	d0a6f704 	addi	r2,gp,-25636
}
 4014a60:	e037883a 	mov	sp,fp
 4014a64:	dfc00117 	ldw	ra,4(sp)
 4014a68:	df000017 	ldw	fp,0(sp)
 4014a6c:	dec00204 	addi	sp,sp,8
 4014a70:	f800283a 	ret

04014a74 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4014a74:	defff904 	addi	sp,sp,-28
 4014a78:	dfc00615 	stw	ra,24(sp)
 4014a7c:	df000515 	stw	fp,20(sp)
 4014a80:	df000504 	addi	fp,sp,20
 4014a84:	e13ffd15 	stw	r4,-12(fp)
 4014a88:	e17ffe15 	stw	r5,-8(fp)
 4014a8c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4014a90:	e0bffd17 	ldw	r2,-12(fp)
 4014a94:	10000816 	blt	r2,zero,4014ab8 <write+0x44>
 4014a98:	01400304 	movi	r5,12
 4014a9c:	e13ffd17 	ldw	r4,-12(fp)
 4014aa0:	4006cd00 	call	4006cd0 <__mulsi3>
 4014aa4:	1007883a 	mov	r3,r2
 4014aa8:	00810074 	movhi	r2,1025
 4014aac:	109e7204 	addi	r2,r2,31176
 4014ab0:	1885883a 	add	r2,r3,r2
 4014ab4:	00000106 	br	4014abc <write+0x48>
 4014ab8:	0005883a 	mov	r2,zero
 4014abc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4014ac0:	e0bffb17 	ldw	r2,-20(fp)
 4014ac4:	10002126 	beq	r2,zero,4014b4c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4014ac8:	e0bffb17 	ldw	r2,-20(fp)
 4014acc:	10800217 	ldw	r2,8(r2)
 4014ad0:	108000cc 	andi	r2,r2,3
 4014ad4:	10001826 	beq	r2,zero,4014b38 <write+0xc4>
 4014ad8:	e0bffb17 	ldw	r2,-20(fp)
 4014adc:	10800017 	ldw	r2,0(r2)
 4014ae0:	10800617 	ldw	r2,24(r2)
 4014ae4:	10001426 	beq	r2,zero,4014b38 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4014ae8:	e0bffb17 	ldw	r2,-20(fp)
 4014aec:	10800017 	ldw	r2,0(r2)
 4014af0:	10800617 	ldw	r2,24(r2)
 4014af4:	e0ffff17 	ldw	r3,-4(fp)
 4014af8:	180d883a 	mov	r6,r3
 4014afc:	e17ffe17 	ldw	r5,-8(fp)
 4014b00:	e13ffb17 	ldw	r4,-20(fp)
 4014b04:	103ee83a 	callr	r2
 4014b08:	e0bffc15 	stw	r2,-16(fp)
 4014b0c:	e0bffc17 	ldw	r2,-16(fp)
 4014b10:	1000070e 	bge	r2,zero,4014b30 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 4014b14:	4014a380 	call	4014a38 <alt_get_errno>
 4014b18:	1007883a 	mov	r3,r2
 4014b1c:	e0bffc17 	ldw	r2,-16(fp)
 4014b20:	0085c83a 	sub	r2,zero,r2
 4014b24:	18800015 	stw	r2,0(r3)
        return -1;
 4014b28:	00bfffc4 	movi	r2,-1
 4014b2c:	00000c06 	br	4014b60 <write+0xec>
      }
      return rval;
 4014b30:	e0bffc17 	ldw	r2,-16(fp)
 4014b34:	00000a06 	br	4014b60 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4014b38:	4014a380 	call	4014a38 <alt_get_errno>
 4014b3c:	1007883a 	mov	r3,r2
 4014b40:	00800344 	movi	r2,13
 4014b44:	18800015 	stw	r2,0(r3)
 4014b48:	00000406 	br	4014b5c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4014b4c:	4014a380 	call	4014a38 <alt_get_errno>
 4014b50:	1007883a 	mov	r3,r2
 4014b54:	00801444 	movi	r2,81
 4014b58:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4014b5c:	00bfffc4 	movi	r2,-1
}
 4014b60:	e037883a 	mov	sp,fp
 4014b64:	dfc00117 	ldw	ra,4(sp)
 4014b68:	df000017 	ldw	fp,0(sp)
 4014b6c:	dec00204 	addi	sp,sp,8
 4014b70:	f800283a 	ret

04014b74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4014b74:	defffd04 	addi	sp,sp,-12
 4014b78:	dfc00215 	stw	ra,8(sp)
 4014b7c:	df000115 	stw	fp,4(sp)
 4014b80:	df000104 	addi	fp,sp,4
 4014b84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4014b88:	d1600e04 	addi	r5,gp,-32712
 4014b8c:	e13fff17 	ldw	r4,-4(fp)
 4014b90:	4015c800 	call	4015c80 <alt_dev_llist_insert>
}
 4014b94:	e037883a 	mov	sp,fp
 4014b98:	dfc00117 	ldw	ra,4(sp)
 4014b9c:	df000017 	ldw	fp,0(sp)
 4014ba0:	dec00204 	addi	sp,sp,8
 4014ba4:	f800283a 	ret

04014ba8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4014ba8:	defffd04 	addi	sp,sp,-12
 4014bac:	dfc00215 	stw	ra,8(sp)
 4014bb0:	df000115 	stw	fp,4(sp)
 4014bb4:	df000104 	addi	fp,sp,4
 4014bb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 4014bbc:	40164880 	call	4016488 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4014bc0:	00800044 	movi	r2,1
 4014bc4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4014bc8:	0001883a 	nop
 4014bcc:	e037883a 	mov	sp,fp
 4014bd0:	dfc00117 	ldw	ra,4(sp)
 4014bd4:	df000017 	ldw	fp,0(sp)
 4014bd8:	dec00204 	addi	sp,sp,8
 4014bdc:	f800283a 	ret

04014be0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4014be0:	defffe04 	addi	sp,sp,-8
 4014be4:	dfc00115 	stw	ra,4(sp)
 4014be8:	df000015 	stw	fp,0(sp)
 4014bec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4014bf0:	01c0fa04 	movi	r7,1000
 4014bf4:	01800084 	movi	r6,2
 4014bf8:	000b883a 	mov	r5,zero
 4014bfc:	01020034 	movhi	r4,2048
 4014c00:	21041004 	addi	r4,r4,4160
 4014c04:	40159240 	call	4015924 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4014c08:	01800044 	movi	r6,1
 4014c0c:	000b883a 	mov	r5,zero
 4014c10:	01010074 	movhi	r4,1025
 4014c14:	211edc04 	addi	r4,r4,31600
 4014c18:	4014dac0 	call	4014dac <altera_avalon_jtag_uart_init>
 4014c1c:	01010074 	movhi	r4,1025
 4014c20:	211ed204 	addi	r4,r4,31560
 4014c24:	4014b740 	call	4014b74 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
 4014c28:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 4014c2c:	0001883a 	nop
}
 4014c30:	0001883a 	nop
 4014c34:	e037883a 	mov	sp,fp
 4014c38:	dfc00117 	ldw	ra,4(sp)
 4014c3c:	df000017 	ldw	fp,0(sp)
 4014c40:	dec00204 	addi	sp,sp,8
 4014c44:	f800283a 	ret

04014c48 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4014c48:	defffa04 	addi	sp,sp,-24
 4014c4c:	dfc00515 	stw	ra,20(sp)
 4014c50:	df000415 	stw	fp,16(sp)
 4014c54:	df000404 	addi	fp,sp,16
 4014c58:	e13ffd15 	stw	r4,-12(fp)
 4014c5c:	e17ffe15 	stw	r5,-8(fp)
 4014c60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4014c64:	e0bffd17 	ldw	r2,-12(fp)
 4014c68:	10800017 	ldw	r2,0(r2)
 4014c6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4014c70:	e0bffc17 	ldw	r2,-16(fp)
 4014c74:	10c00a04 	addi	r3,r2,40
 4014c78:	e0bffd17 	ldw	r2,-12(fp)
 4014c7c:	10800217 	ldw	r2,8(r2)
 4014c80:	100f883a 	mov	r7,r2
 4014c84:	e1bfff17 	ldw	r6,-4(fp)
 4014c88:	e17ffe17 	ldw	r5,-8(fp)
 4014c8c:	1809883a 	mov	r4,r3
 4014c90:	40152700 	call	4015270 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4014c94:	e037883a 	mov	sp,fp
 4014c98:	dfc00117 	ldw	ra,4(sp)
 4014c9c:	df000017 	ldw	fp,0(sp)
 4014ca0:	dec00204 	addi	sp,sp,8
 4014ca4:	f800283a 	ret

04014ca8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4014ca8:	defffa04 	addi	sp,sp,-24
 4014cac:	dfc00515 	stw	ra,20(sp)
 4014cb0:	df000415 	stw	fp,16(sp)
 4014cb4:	df000404 	addi	fp,sp,16
 4014cb8:	e13ffd15 	stw	r4,-12(fp)
 4014cbc:	e17ffe15 	stw	r5,-8(fp)
 4014cc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4014cc4:	e0bffd17 	ldw	r2,-12(fp)
 4014cc8:	10800017 	ldw	r2,0(r2)
 4014ccc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4014cd0:	e0bffc17 	ldw	r2,-16(fp)
 4014cd4:	10c00a04 	addi	r3,r2,40
 4014cd8:	e0bffd17 	ldw	r2,-12(fp)
 4014cdc:	10800217 	ldw	r2,8(r2)
 4014ce0:	100f883a 	mov	r7,r2
 4014ce4:	e1bfff17 	ldw	r6,-4(fp)
 4014ce8:	e17ffe17 	ldw	r5,-8(fp)
 4014cec:	1809883a 	mov	r4,r3
 4014cf0:	401548c0 	call	401548c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4014cf4:	e037883a 	mov	sp,fp
 4014cf8:	dfc00117 	ldw	ra,4(sp)
 4014cfc:	df000017 	ldw	fp,0(sp)
 4014d00:	dec00204 	addi	sp,sp,8
 4014d04:	f800283a 	ret

04014d08 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4014d08:	defffc04 	addi	sp,sp,-16
 4014d0c:	dfc00315 	stw	ra,12(sp)
 4014d10:	df000215 	stw	fp,8(sp)
 4014d14:	df000204 	addi	fp,sp,8
 4014d18:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4014d1c:	e0bfff17 	ldw	r2,-4(fp)
 4014d20:	10800017 	ldw	r2,0(r2)
 4014d24:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4014d28:	e0bffe17 	ldw	r2,-8(fp)
 4014d2c:	10c00a04 	addi	r3,r2,40
 4014d30:	e0bfff17 	ldw	r2,-4(fp)
 4014d34:	10800217 	ldw	r2,8(r2)
 4014d38:	100b883a 	mov	r5,r2
 4014d3c:	1809883a 	mov	r4,r3
 4014d40:	40151180 	call	4015118 <altera_avalon_jtag_uart_close>
}
 4014d44:	e037883a 	mov	sp,fp
 4014d48:	dfc00117 	ldw	ra,4(sp)
 4014d4c:	df000017 	ldw	fp,0(sp)
 4014d50:	dec00204 	addi	sp,sp,8
 4014d54:	f800283a 	ret

04014d58 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4014d58:	defffa04 	addi	sp,sp,-24
 4014d5c:	dfc00515 	stw	ra,20(sp)
 4014d60:	df000415 	stw	fp,16(sp)
 4014d64:	df000404 	addi	fp,sp,16
 4014d68:	e13ffd15 	stw	r4,-12(fp)
 4014d6c:	e17ffe15 	stw	r5,-8(fp)
 4014d70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4014d74:	e0bffd17 	ldw	r2,-12(fp)
 4014d78:	10800017 	ldw	r2,0(r2)
 4014d7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4014d80:	e0bffc17 	ldw	r2,-16(fp)
 4014d84:	10800a04 	addi	r2,r2,40
 4014d88:	e1bfff17 	ldw	r6,-4(fp)
 4014d8c:	e17ffe17 	ldw	r5,-8(fp)
 4014d90:	1009883a 	mov	r4,r2
 4014d94:	40151800 	call	4015180 <altera_avalon_jtag_uart_ioctl>
}
 4014d98:	e037883a 	mov	sp,fp
 4014d9c:	dfc00117 	ldw	ra,4(sp)
 4014da0:	df000017 	ldw	fp,0(sp)
 4014da4:	dec00204 	addi	sp,sp,8
 4014da8:	f800283a 	ret

04014dac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4014dac:	defffa04 	addi	sp,sp,-24
 4014db0:	dfc00515 	stw	ra,20(sp)
 4014db4:	df000415 	stw	fp,16(sp)
 4014db8:	df000404 	addi	fp,sp,16
 4014dbc:	e13ffd15 	stw	r4,-12(fp)
 4014dc0:	e17ffe15 	stw	r5,-8(fp)
 4014dc4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4014dc8:	e0bffd17 	ldw	r2,-12(fp)
 4014dcc:	00c00044 	movi	r3,1
 4014dd0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4014dd4:	e0bffd17 	ldw	r2,-12(fp)
 4014dd8:	10800017 	ldw	r2,0(r2)
 4014ddc:	10800104 	addi	r2,r2,4
 4014de0:	1007883a 	mov	r3,r2
 4014de4:	e0bffd17 	ldw	r2,-12(fp)
 4014de8:	10800817 	ldw	r2,32(r2)
 4014dec:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4014df0:	e0bffe17 	ldw	r2,-8(fp)
 4014df4:	e0ffff17 	ldw	r3,-4(fp)
 4014df8:	d8000015 	stw	zero,0(sp)
 4014dfc:	e1fffd17 	ldw	r7,-12(fp)
 4014e00:	01810074 	movhi	r6,1025
 4014e04:	31939b04 	addi	r6,r6,20076
 4014e08:	180b883a 	mov	r5,r3
 4014e0c:	1009883a 	mov	r4,r2
 4014e10:	4015e040 	call	4015e04 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4014e14:	e0bffd17 	ldw	r2,-12(fp)
 4014e18:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4014e1c:	e0bffd17 	ldw	r2,-12(fp)
 4014e20:	10800204 	addi	r2,r2,8
 4014e24:	d0e70517 	ldw	r3,-25580(gp)
 4014e28:	e1fffd17 	ldw	r7,-12(fp)
 4014e2c:	01810074 	movhi	r6,1025
 4014e30:	31941e04 	addi	r6,r6,20600
 4014e34:	180b883a 	mov	r5,r3
 4014e38:	1009883a 	mov	r4,r2
 4014e3c:	40159a00 	call	40159a0 <alt_alarm_start>
 4014e40:	1000040e 	bge	r2,zero,4014e54 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4014e44:	e0fffd17 	ldw	r3,-12(fp)
 4014e48:	00a00034 	movhi	r2,32768
 4014e4c:	10bfffc4 	addi	r2,r2,-1
 4014e50:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4014e54:	0001883a 	nop
 4014e58:	e037883a 	mov	sp,fp
 4014e5c:	dfc00117 	ldw	ra,4(sp)
 4014e60:	df000017 	ldw	fp,0(sp)
 4014e64:	dec00204 	addi	sp,sp,8
 4014e68:	f800283a 	ret

04014e6c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4014e6c:	defff804 	addi	sp,sp,-32
 4014e70:	df000715 	stw	fp,28(sp)
 4014e74:	df000704 	addi	fp,sp,28
 4014e78:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4014e7c:	e0bfff17 	ldw	r2,-4(fp)
 4014e80:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4014e84:	e0bffb17 	ldw	r2,-20(fp)
 4014e88:	10800017 	ldw	r2,0(r2)
 4014e8c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4014e90:	e0bffc17 	ldw	r2,-16(fp)
 4014e94:	10800104 	addi	r2,r2,4
 4014e98:	10800037 	ldwio	r2,0(r2)
 4014e9c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4014ea0:	e0bffd17 	ldw	r2,-12(fp)
 4014ea4:	1080c00c 	andi	r2,r2,768
 4014ea8:	10006d26 	beq	r2,zero,4015060 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4014eac:	e0bffd17 	ldw	r2,-12(fp)
 4014eb0:	1080400c 	andi	r2,r2,256
 4014eb4:	10003526 	beq	r2,zero,4014f8c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4014eb8:	00800074 	movhi	r2,1
 4014ebc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4014ec0:	e0bffb17 	ldw	r2,-20(fp)
 4014ec4:	10800a17 	ldw	r2,40(r2)
 4014ec8:	10800044 	addi	r2,r2,1
 4014ecc:	1081ffcc 	andi	r2,r2,2047
 4014ed0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4014ed4:	e0bffb17 	ldw	r2,-20(fp)
 4014ed8:	10c00b17 	ldw	r3,44(r2)
 4014edc:	e0bffe17 	ldw	r2,-8(fp)
 4014ee0:	18801526 	beq	r3,r2,4014f38 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4014ee4:	e0bffc17 	ldw	r2,-16(fp)
 4014ee8:	10800037 	ldwio	r2,0(r2)
 4014eec:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4014ef0:	e0bff917 	ldw	r2,-28(fp)
 4014ef4:	10a0000c 	andi	r2,r2,32768
 4014ef8:	10001126 	beq	r2,zero,4014f40 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4014efc:	e0bffb17 	ldw	r2,-20(fp)
 4014f00:	10800a17 	ldw	r2,40(r2)
 4014f04:	e0fff917 	ldw	r3,-28(fp)
 4014f08:	1809883a 	mov	r4,r3
 4014f0c:	e0fffb17 	ldw	r3,-20(fp)
 4014f10:	1885883a 	add	r2,r3,r2
 4014f14:	10800e04 	addi	r2,r2,56
 4014f18:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4014f1c:	e0bffb17 	ldw	r2,-20(fp)
 4014f20:	10800a17 	ldw	r2,40(r2)
 4014f24:	10800044 	addi	r2,r2,1
 4014f28:	10c1ffcc 	andi	r3,r2,2047
 4014f2c:	e0bffb17 	ldw	r2,-20(fp)
 4014f30:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4014f34:	003fe206 	br	4014ec0 <__alt_data_end+0xfc014ec0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4014f38:	0001883a 	nop
 4014f3c:	00000106 	br	4014f44 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4014f40:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4014f44:	e0bff917 	ldw	r2,-28(fp)
 4014f48:	10bfffec 	andhi	r2,r2,65535
 4014f4c:	10000f26 	beq	r2,zero,4014f8c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4014f50:	e0bffb17 	ldw	r2,-20(fp)
 4014f54:	10c00817 	ldw	r3,32(r2)
 4014f58:	00bfff84 	movi	r2,-2
 4014f5c:	1886703a 	and	r3,r3,r2
 4014f60:	e0bffb17 	ldw	r2,-20(fp)
 4014f64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4014f68:	e0bffc17 	ldw	r2,-16(fp)
 4014f6c:	10800104 	addi	r2,r2,4
 4014f70:	1007883a 	mov	r3,r2
 4014f74:	e0bffb17 	ldw	r2,-20(fp)
 4014f78:	10800817 	ldw	r2,32(r2)
 4014f7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4014f80:	e0bffc17 	ldw	r2,-16(fp)
 4014f84:	10800104 	addi	r2,r2,4
 4014f88:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4014f8c:	e0bffd17 	ldw	r2,-12(fp)
 4014f90:	1080800c 	andi	r2,r2,512
 4014f94:	103fbe26 	beq	r2,zero,4014e90 <__alt_data_end+0xfc014e90>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4014f98:	e0bffd17 	ldw	r2,-12(fp)
 4014f9c:	1004d43a 	srli	r2,r2,16
 4014fa0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4014fa4:	00001406 	br	4014ff8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4014fa8:	e0bffc17 	ldw	r2,-16(fp)
 4014fac:	e0fffb17 	ldw	r3,-20(fp)
 4014fb0:	18c00d17 	ldw	r3,52(r3)
 4014fb4:	e13ffb17 	ldw	r4,-20(fp)
 4014fb8:	20c7883a 	add	r3,r4,r3
 4014fbc:	18c20e04 	addi	r3,r3,2104
 4014fc0:	18c00003 	ldbu	r3,0(r3)
 4014fc4:	18c03fcc 	andi	r3,r3,255
 4014fc8:	18c0201c 	xori	r3,r3,128
 4014fcc:	18ffe004 	addi	r3,r3,-128
 4014fd0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4014fd4:	e0bffb17 	ldw	r2,-20(fp)
 4014fd8:	10800d17 	ldw	r2,52(r2)
 4014fdc:	10800044 	addi	r2,r2,1
 4014fe0:	10c1ffcc 	andi	r3,r2,2047
 4014fe4:	e0bffb17 	ldw	r2,-20(fp)
 4014fe8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4014fec:	e0bffa17 	ldw	r2,-24(fp)
 4014ff0:	10bfffc4 	addi	r2,r2,-1
 4014ff4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4014ff8:	e0bffa17 	ldw	r2,-24(fp)
 4014ffc:	10000526 	beq	r2,zero,4015014 <altera_avalon_jtag_uart_irq+0x1a8>
 4015000:	e0bffb17 	ldw	r2,-20(fp)
 4015004:	10c00d17 	ldw	r3,52(r2)
 4015008:	e0bffb17 	ldw	r2,-20(fp)
 401500c:	10800c17 	ldw	r2,48(r2)
 4015010:	18bfe51e 	bne	r3,r2,4014fa8 <__alt_data_end+0xfc014fa8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4015014:	e0bffa17 	ldw	r2,-24(fp)
 4015018:	103f9d26 	beq	r2,zero,4014e90 <__alt_data_end+0xfc014e90>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401501c:	e0bffb17 	ldw	r2,-20(fp)
 4015020:	10c00817 	ldw	r3,32(r2)
 4015024:	00bfff44 	movi	r2,-3
 4015028:	1886703a 	and	r3,r3,r2
 401502c:	e0bffb17 	ldw	r2,-20(fp)
 4015030:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4015034:	e0bffb17 	ldw	r2,-20(fp)
 4015038:	10800017 	ldw	r2,0(r2)
 401503c:	10800104 	addi	r2,r2,4
 4015040:	1007883a 	mov	r3,r2
 4015044:	e0bffb17 	ldw	r2,-20(fp)
 4015048:	10800817 	ldw	r2,32(r2)
 401504c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4015050:	e0bffc17 	ldw	r2,-16(fp)
 4015054:	10800104 	addi	r2,r2,4
 4015058:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401505c:	003f8c06 	br	4014e90 <__alt_data_end+0xfc014e90>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4015060:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4015064:	0001883a 	nop
 4015068:	e037883a 	mov	sp,fp
 401506c:	df000017 	ldw	fp,0(sp)
 4015070:	dec00104 	addi	sp,sp,4
 4015074:	f800283a 	ret

04015078 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4015078:	defff804 	addi	sp,sp,-32
 401507c:	df000715 	stw	fp,28(sp)
 4015080:	df000704 	addi	fp,sp,28
 4015084:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4015088:	e0bffb17 	ldw	r2,-20(fp)
 401508c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4015090:	e0bff917 	ldw	r2,-28(fp)
 4015094:	10800017 	ldw	r2,0(r2)
 4015098:	10800104 	addi	r2,r2,4
 401509c:	10800037 	ldwio	r2,0(r2)
 40150a0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40150a4:	e0bffa17 	ldw	r2,-24(fp)
 40150a8:	1081000c 	andi	r2,r2,1024
 40150ac:	10000b26 	beq	r2,zero,40150dc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40150b0:	e0bff917 	ldw	r2,-28(fp)
 40150b4:	10800017 	ldw	r2,0(r2)
 40150b8:	10800104 	addi	r2,r2,4
 40150bc:	1007883a 	mov	r3,r2
 40150c0:	e0bff917 	ldw	r2,-28(fp)
 40150c4:	10800817 	ldw	r2,32(r2)
 40150c8:	10810014 	ori	r2,r2,1024
 40150cc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 40150d0:	e0bff917 	ldw	r2,-28(fp)
 40150d4:	10000915 	stw	zero,36(r2)
 40150d8:	00000a06 	br	4015104 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40150dc:	e0bff917 	ldw	r2,-28(fp)
 40150e0:	10c00917 	ldw	r3,36(r2)
 40150e4:	00a00034 	movhi	r2,32768
 40150e8:	10bfff04 	addi	r2,r2,-4
 40150ec:	10c00536 	bltu	r2,r3,4015104 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 40150f0:	e0bff917 	ldw	r2,-28(fp)
 40150f4:	10800917 	ldw	r2,36(r2)
 40150f8:	10c00044 	addi	r3,r2,1
 40150fc:	e0bff917 	ldw	r2,-28(fp)
 4015100:	10c00915 	stw	r3,36(r2)
 4015104:	d0a70517 	ldw	r2,-25580(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4015108:	e037883a 	mov	sp,fp
 401510c:	df000017 	ldw	fp,0(sp)
 4015110:	dec00104 	addi	sp,sp,4
 4015114:	f800283a 	ret

04015118 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4015118:	defffd04 	addi	sp,sp,-12
 401511c:	df000215 	stw	fp,8(sp)
 4015120:	df000204 	addi	fp,sp,8
 4015124:	e13ffe15 	stw	r4,-8(fp)
 4015128:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401512c:	00000506 	br	4015144 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4015130:	e0bfff17 	ldw	r2,-4(fp)
 4015134:	1090000c 	andi	r2,r2,16384
 4015138:	10000226 	beq	r2,zero,4015144 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401513c:	00bffd44 	movi	r2,-11
 4015140:	00000b06 	br	4015170 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4015144:	e0bffe17 	ldw	r2,-8(fp)
 4015148:	10c00d17 	ldw	r3,52(r2)
 401514c:	e0bffe17 	ldw	r2,-8(fp)
 4015150:	10800c17 	ldw	r2,48(r2)
 4015154:	18800526 	beq	r3,r2,401516c <altera_avalon_jtag_uart_close+0x54>
 4015158:	e0bffe17 	ldw	r2,-8(fp)
 401515c:	10c00917 	ldw	r3,36(r2)
 4015160:	e0bffe17 	ldw	r2,-8(fp)
 4015164:	10800117 	ldw	r2,4(r2)
 4015168:	18bff136 	bltu	r3,r2,4015130 <__alt_data_end+0xfc015130>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401516c:	0005883a 	mov	r2,zero
}
 4015170:	e037883a 	mov	sp,fp
 4015174:	df000017 	ldw	fp,0(sp)
 4015178:	dec00104 	addi	sp,sp,4
 401517c:	f800283a 	ret

04015180 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4015180:	defffa04 	addi	sp,sp,-24
 4015184:	df000515 	stw	fp,20(sp)
 4015188:	df000504 	addi	fp,sp,20
 401518c:	e13ffd15 	stw	r4,-12(fp)
 4015190:	e17ffe15 	stw	r5,-8(fp)
 4015194:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4015198:	00bff9c4 	movi	r2,-25
 401519c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 40151a0:	e0bffe17 	ldw	r2,-8(fp)
 40151a4:	10da8060 	cmpeqi	r3,r2,27137
 40151a8:	1800031e 	bne	r3,zero,40151b8 <altera_avalon_jtag_uart_ioctl+0x38>
 40151ac:	109a80a0 	cmpeqi	r2,r2,27138
 40151b0:	1000181e 	bne	r2,zero,4015214 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 40151b4:	00002906 	br	401525c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40151b8:	e0bffd17 	ldw	r2,-12(fp)
 40151bc:	10c00117 	ldw	r3,4(r2)
 40151c0:	00a00034 	movhi	r2,32768
 40151c4:	10bfffc4 	addi	r2,r2,-1
 40151c8:	18802126 	beq	r3,r2,4015250 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 40151cc:	e0bfff17 	ldw	r2,-4(fp)
 40151d0:	10800017 	ldw	r2,0(r2)
 40151d4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40151d8:	e0bffc17 	ldw	r2,-16(fp)
 40151dc:	10800090 	cmplti	r2,r2,2
 40151e0:	1000061e 	bne	r2,zero,40151fc <altera_avalon_jtag_uart_ioctl+0x7c>
 40151e4:	e0fffc17 	ldw	r3,-16(fp)
 40151e8:	00a00034 	movhi	r2,32768
 40151ec:	10bfffc4 	addi	r2,r2,-1
 40151f0:	18800226 	beq	r3,r2,40151fc <altera_avalon_jtag_uart_ioctl+0x7c>
 40151f4:	e0bffc17 	ldw	r2,-16(fp)
 40151f8:	00000206 	br	4015204 <altera_avalon_jtag_uart_ioctl+0x84>
 40151fc:	00a00034 	movhi	r2,32768
 4015200:	10bfff84 	addi	r2,r2,-2
 4015204:	e0fffd17 	ldw	r3,-12(fp)
 4015208:	18800115 	stw	r2,4(r3)
      rc = 0;
 401520c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4015210:	00000f06 	br	4015250 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4015214:	e0bffd17 	ldw	r2,-12(fp)
 4015218:	10c00117 	ldw	r3,4(r2)
 401521c:	00a00034 	movhi	r2,32768
 4015220:	10bfffc4 	addi	r2,r2,-1
 4015224:	18800c26 	beq	r3,r2,4015258 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4015228:	e0bffd17 	ldw	r2,-12(fp)
 401522c:	10c00917 	ldw	r3,36(r2)
 4015230:	e0bffd17 	ldw	r2,-12(fp)
 4015234:	10800117 	ldw	r2,4(r2)
 4015238:	1885803a 	cmpltu	r2,r3,r2
 401523c:	10c03fcc 	andi	r3,r2,255
 4015240:	e0bfff17 	ldw	r2,-4(fp)
 4015244:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4015248:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401524c:	00000206 	br	4015258 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4015250:	0001883a 	nop
 4015254:	00000106 	br	401525c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4015258:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401525c:	e0bffb17 	ldw	r2,-20(fp)
}
 4015260:	e037883a 	mov	sp,fp
 4015264:	df000017 	ldw	fp,0(sp)
 4015268:	dec00104 	addi	sp,sp,4
 401526c:	f800283a 	ret

04015270 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4015270:	defff304 	addi	sp,sp,-52
 4015274:	dfc00c15 	stw	ra,48(sp)
 4015278:	df000b15 	stw	fp,44(sp)
 401527c:	df000b04 	addi	fp,sp,44
 4015280:	e13ffc15 	stw	r4,-16(fp)
 4015284:	e17ffd15 	stw	r5,-12(fp)
 4015288:	e1bffe15 	stw	r6,-8(fp)
 401528c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4015290:	e0bffd17 	ldw	r2,-12(fp)
 4015294:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4015298:	00004706 	br	40153b8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401529c:	e0bffc17 	ldw	r2,-16(fp)
 40152a0:	10800a17 	ldw	r2,40(r2)
 40152a4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 40152a8:	e0bffc17 	ldw	r2,-16(fp)
 40152ac:	10800b17 	ldw	r2,44(r2)
 40152b0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 40152b4:	e0fff717 	ldw	r3,-36(fp)
 40152b8:	e0bff817 	ldw	r2,-32(fp)
 40152bc:	18800536 	bltu	r3,r2,40152d4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 40152c0:	e0fff717 	ldw	r3,-36(fp)
 40152c4:	e0bff817 	ldw	r2,-32(fp)
 40152c8:	1885c83a 	sub	r2,r3,r2
 40152cc:	e0bff615 	stw	r2,-40(fp)
 40152d0:	00000406 	br	40152e4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40152d4:	00c20004 	movi	r3,2048
 40152d8:	e0bff817 	ldw	r2,-32(fp)
 40152dc:	1885c83a 	sub	r2,r3,r2
 40152e0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40152e4:	e0bff617 	ldw	r2,-40(fp)
 40152e8:	10001e26 	beq	r2,zero,4015364 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 40152ec:	e0fffe17 	ldw	r3,-8(fp)
 40152f0:	e0bff617 	ldw	r2,-40(fp)
 40152f4:	1880022e 	bgeu	r3,r2,4015300 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40152f8:	e0bffe17 	ldw	r2,-8(fp)
 40152fc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4015300:	e0bffc17 	ldw	r2,-16(fp)
 4015304:	10c00e04 	addi	r3,r2,56
 4015308:	e0bff817 	ldw	r2,-32(fp)
 401530c:	1885883a 	add	r2,r3,r2
 4015310:	e1bff617 	ldw	r6,-40(fp)
 4015314:	100b883a 	mov	r5,r2
 4015318:	e13ff517 	ldw	r4,-44(fp)
 401531c:	400cb5c0 	call	400cb5c <memcpy>
      ptr   += n;
 4015320:	e0fff517 	ldw	r3,-44(fp)
 4015324:	e0bff617 	ldw	r2,-40(fp)
 4015328:	1885883a 	add	r2,r3,r2
 401532c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4015330:	e0fffe17 	ldw	r3,-8(fp)
 4015334:	e0bff617 	ldw	r2,-40(fp)
 4015338:	1885c83a 	sub	r2,r3,r2
 401533c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4015340:	e0fff817 	ldw	r3,-32(fp)
 4015344:	e0bff617 	ldw	r2,-40(fp)
 4015348:	1885883a 	add	r2,r3,r2
 401534c:	10c1ffcc 	andi	r3,r2,2047
 4015350:	e0bffc17 	ldw	r2,-16(fp)
 4015354:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4015358:	e0bffe17 	ldw	r2,-8(fp)
 401535c:	00bfcf16 	blt	zero,r2,401529c <__alt_data_end+0xfc01529c>
 4015360:	00000106 	br	4015368 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4015364:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4015368:	e0fff517 	ldw	r3,-44(fp)
 401536c:	e0bffd17 	ldw	r2,-12(fp)
 4015370:	1880141e 	bne	r3,r2,40153c4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4015374:	e0bfff17 	ldw	r2,-4(fp)
 4015378:	1090000c 	andi	r2,r2,16384
 401537c:	1000131e 	bne	r2,zero,40153cc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4015380:	0001883a 	nop
 4015384:	e0bffc17 	ldw	r2,-16(fp)
 4015388:	10c00a17 	ldw	r3,40(r2)
 401538c:	e0bff717 	ldw	r2,-36(fp)
 4015390:	1880051e 	bne	r3,r2,40153a8 <altera_avalon_jtag_uart_read+0x138>
 4015394:	e0bffc17 	ldw	r2,-16(fp)
 4015398:	10c00917 	ldw	r3,36(r2)
 401539c:	e0bffc17 	ldw	r2,-16(fp)
 40153a0:	10800117 	ldw	r2,4(r2)
 40153a4:	18bff736 	bltu	r3,r2,4015384 <__alt_data_end+0xfc015384>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40153a8:	e0bffc17 	ldw	r2,-16(fp)
 40153ac:	10c00a17 	ldw	r3,40(r2)
 40153b0:	e0bff717 	ldw	r2,-36(fp)
 40153b4:	18800726 	beq	r3,r2,40153d4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40153b8:	e0bffe17 	ldw	r2,-8(fp)
 40153bc:	00bfb716 	blt	zero,r2,401529c <__alt_data_end+0xfc01529c>
 40153c0:	00000506 	br	40153d8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 40153c4:	0001883a 	nop
 40153c8:	00000306 	br	40153d8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 40153cc:	0001883a 	nop
 40153d0:	00000106 	br	40153d8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 40153d4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 40153d8:	e0fff517 	ldw	r3,-44(fp)
 40153dc:	e0bffd17 	ldw	r2,-12(fp)
 40153e0:	18801826 	beq	r3,r2,4015444 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40153e4:	0005303a 	rdctl	r2,status
 40153e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40153ec:	e0fffb17 	ldw	r3,-20(fp)
 40153f0:	00bfff84 	movi	r2,-2
 40153f4:	1884703a 	and	r2,r3,r2
 40153f8:	1001703a 	wrctl	status,r2
  
  return context;
 40153fc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4015400:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4015404:	e0bffc17 	ldw	r2,-16(fp)
 4015408:	10800817 	ldw	r2,32(r2)
 401540c:	10c00054 	ori	r3,r2,1
 4015410:	e0bffc17 	ldw	r2,-16(fp)
 4015414:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4015418:	e0bffc17 	ldw	r2,-16(fp)
 401541c:	10800017 	ldw	r2,0(r2)
 4015420:	10800104 	addi	r2,r2,4
 4015424:	1007883a 	mov	r3,r2
 4015428:	e0bffc17 	ldw	r2,-16(fp)
 401542c:	10800817 	ldw	r2,32(r2)
 4015430:	18800035 	stwio	r2,0(r3)
 4015434:	e0bffa17 	ldw	r2,-24(fp)
 4015438:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401543c:	e0bff917 	ldw	r2,-28(fp)
 4015440:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4015444:	e0fff517 	ldw	r3,-44(fp)
 4015448:	e0bffd17 	ldw	r2,-12(fp)
 401544c:	18800426 	beq	r3,r2,4015460 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4015450:	e0fff517 	ldw	r3,-44(fp)
 4015454:	e0bffd17 	ldw	r2,-12(fp)
 4015458:	1885c83a 	sub	r2,r3,r2
 401545c:	00000606 	br	4015478 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4015460:	e0bfff17 	ldw	r2,-4(fp)
 4015464:	1090000c 	andi	r2,r2,16384
 4015468:	10000226 	beq	r2,zero,4015474 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401546c:	00bffd44 	movi	r2,-11
 4015470:	00000106 	br	4015478 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4015474:	00bffec4 	movi	r2,-5
}
 4015478:	e037883a 	mov	sp,fp
 401547c:	dfc00117 	ldw	ra,4(sp)
 4015480:	df000017 	ldw	fp,0(sp)
 4015484:	dec00204 	addi	sp,sp,8
 4015488:	f800283a 	ret

0401548c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401548c:	defff304 	addi	sp,sp,-52
 4015490:	dfc00c15 	stw	ra,48(sp)
 4015494:	df000b15 	stw	fp,44(sp)
 4015498:	df000b04 	addi	fp,sp,44
 401549c:	e13ffc15 	stw	r4,-16(fp)
 40154a0:	e17ffd15 	stw	r5,-12(fp)
 40154a4:	e1bffe15 	stw	r6,-8(fp)
 40154a8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 40154ac:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40154b0:	e0bffd17 	ldw	r2,-12(fp)
 40154b4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40154b8:	00003706 	br	4015598 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40154bc:	e0bffc17 	ldw	r2,-16(fp)
 40154c0:	10800c17 	ldw	r2,48(r2)
 40154c4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 40154c8:	e0bffc17 	ldw	r2,-16(fp)
 40154cc:	10800d17 	ldw	r2,52(r2)
 40154d0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40154d4:	e0fff917 	ldw	r3,-28(fp)
 40154d8:	e0bff517 	ldw	r2,-44(fp)
 40154dc:	1880062e 	bgeu	r3,r2,40154f8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 40154e0:	e0fff517 	ldw	r3,-44(fp)
 40154e4:	e0bff917 	ldw	r2,-28(fp)
 40154e8:	1885c83a 	sub	r2,r3,r2
 40154ec:	10bfffc4 	addi	r2,r2,-1
 40154f0:	e0bff615 	stw	r2,-40(fp)
 40154f4:	00000b06 	br	4015524 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40154f8:	e0bff517 	ldw	r2,-44(fp)
 40154fc:	10000526 	beq	r2,zero,4015514 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4015500:	00c20004 	movi	r3,2048
 4015504:	e0bff917 	ldw	r2,-28(fp)
 4015508:	1885c83a 	sub	r2,r3,r2
 401550c:	e0bff615 	stw	r2,-40(fp)
 4015510:	00000406 	br	4015524 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4015514:	00c1ffc4 	movi	r3,2047
 4015518:	e0bff917 	ldw	r2,-28(fp)
 401551c:	1885c83a 	sub	r2,r3,r2
 4015520:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4015524:	e0bff617 	ldw	r2,-40(fp)
 4015528:	10001e26 	beq	r2,zero,40155a4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401552c:	e0fffe17 	ldw	r3,-8(fp)
 4015530:	e0bff617 	ldw	r2,-40(fp)
 4015534:	1880022e 	bgeu	r3,r2,4015540 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4015538:	e0bffe17 	ldw	r2,-8(fp)
 401553c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4015540:	e0bffc17 	ldw	r2,-16(fp)
 4015544:	10c20e04 	addi	r3,r2,2104
 4015548:	e0bff917 	ldw	r2,-28(fp)
 401554c:	1885883a 	add	r2,r3,r2
 4015550:	e1bff617 	ldw	r6,-40(fp)
 4015554:	e17ffd17 	ldw	r5,-12(fp)
 4015558:	1009883a 	mov	r4,r2
 401555c:	400cb5c0 	call	400cb5c <memcpy>
      ptr   += n;
 4015560:	e0fffd17 	ldw	r3,-12(fp)
 4015564:	e0bff617 	ldw	r2,-40(fp)
 4015568:	1885883a 	add	r2,r3,r2
 401556c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4015570:	e0fffe17 	ldw	r3,-8(fp)
 4015574:	e0bff617 	ldw	r2,-40(fp)
 4015578:	1885c83a 	sub	r2,r3,r2
 401557c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4015580:	e0fff917 	ldw	r3,-28(fp)
 4015584:	e0bff617 	ldw	r2,-40(fp)
 4015588:	1885883a 	add	r2,r3,r2
 401558c:	10c1ffcc 	andi	r3,r2,2047
 4015590:	e0bffc17 	ldw	r2,-16(fp)
 4015594:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4015598:	e0bffe17 	ldw	r2,-8(fp)
 401559c:	00bfc716 	blt	zero,r2,40154bc <__alt_data_end+0xfc0154bc>
 40155a0:	00000106 	br	40155a8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 40155a4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40155a8:	0005303a 	rdctl	r2,status
 40155ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40155b0:	e0fffb17 	ldw	r3,-20(fp)
 40155b4:	00bfff84 	movi	r2,-2
 40155b8:	1884703a 	and	r2,r3,r2
 40155bc:	1001703a 	wrctl	status,r2
  
  return context;
 40155c0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40155c4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40155c8:	e0bffc17 	ldw	r2,-16(fp)
 40155cc:	10800817 	ldw	r2,32(r2)
 40155d0:	10c00094 	ori	r3,r2,2
 40155d4:	e0bffc17 	ldw	r2,-16(fp)
 40155d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40155dc:	e0bffc17 	ldw	r2,-16(fp)
 40155e0:	10800017 	ldw	r2,0(r2)
 40155e4:	10800104 	addi	r2,r2,4
 40155e8:	1007883a 	mov	r3,r2
 40155ec:	e0bffc17 	ldw	r2,-16(fp)
 40155f0:	10800817 	ldw	r2,32(r2)
 40155f4:	18800035 	stwio	r2,0(r3)
 40155f8:	e0bffa17 	ldw	r2,-24(fp)
 40155fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015600:	e0bff817 	ldw	r2,-32(fp)
 4015604:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4015608:	e0bffe17 	ldw	r2,-8(fp)
 401560c:	0080100e 	bge	zero,r2,4015650 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4015610:	e0bfff17 	ldw	r2,-4(fp)
 4015614:	1090000c 	andi	r2,r2,16384
 4015618:	1000101e 	bne	r2,zero,401565c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401561c:	0001883a 	nop
 4015620:	e0bffc17 	ldw	r2,-16(fp)
 4015624:	10c00d17 	ldw	r3,52(r2)
 4015628:	e0bff517 	ldw	r2,-44(fp)
 401562c:	1880051e 	bne	r3,r2,4015644 <altera_avalon_jtag_uart_write+0x1b8>
 4015630:	e0bffc17 	ldw	r2,-16(fp)
 4015634:	10c00917 	ldw	r3,36(r2)
 4015638:	e0bffc17 	ldw	r2,-16(fp)
 401563c:	10800117 	ldw	r2,4(r2)
 4015640:	18bff736 	bltu	r3,r2,4015620 <__alt_data_end+0xfc015620>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4015644:	e0bffc17 	ldw	r2,-16(fp)
 4015648:	10800917 	ldw	r2,36(r2)
 401564c:	1000051e 	bne	r2,zero,4015664 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4015650:	e0bffe17 	ldw	r2,-8(fp)
 4015654:	00bfd016 	blt	zero,r2,4015598 <__alt_data_end+0xfc015598>
 4015658:	00000306 	br	4015668 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401565c:	0001883a 	nop
 4015660:	00000106 	br	4015668 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4015664:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4015668:	e0fffd17 	ldw	r3,-12(fp)
 401566c:	e0bff717 	ldw	r2,-36(fp)
 4015670:	18800426 	beq	r3,r2,4015684 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4015674:	e0fffd17 	ldw	r3,-12(fp)
 4015678:	e0bff717 	ldw	r2,-36(fp)
 401567c:	1885c83a 	sub	r2,r3,r2
 4015680:	00000606 	br	401569c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4015684:	e0bfff17 	ldw	r2,-4(fp)
 4015688:	1090000c 	andi	r2,r2,16384
 401568c:	10000226 	beq	r2,zero,4015698 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4015690:	00bffd44 	movi	r2,-11
 4015694:	00000106 	br	401569c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4015698:	00bffec4 	movi	r2,-5
}
 401569c:	e037883a 	mov	sp,fp
 40156a0:	dfc00117 	ldw	ra,4(sp)
 40156a4:	df000017 	ldw	fp,0(sp)
 40156a8:	dec00204 	addi	sp,sp,8
 40156ac:	f800283a 	ret

040156b0 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 40156b0:	defff404 	addi	sp,sp,-48
 40156b4:	df000b15 	stw	fp,44(sp)
 40156b8:	df000b04 	addi	fp,sp,44
 40156bc:	e13ffc15 	stw	r4,-16(fp)
 40156c0:	e17ffd15 	stw	r5,-12(fp)
 40156c4:	e1bffe15 	stw	r6,-8(fp)
 40156c8:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 40156cc:	e0ffff17 	ldw	r3,-4(fp)
 40156d0:	e0bffe17 	ldw	r2,-8(fp)
 40156d4:	1885883a 	add	r2,r3,r2
 40156d8:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 40156dc:	e0c00217 	ldw	r3,8(fp)
 40156e0:	e0800117 	ldw	r2,4(fp)
 40156e4:	1885883a 	add	r2,r3,r2
 40156e8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 40156ec:	e0800117 	ldw	r2,4(fp)
 40156f0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 40156f4:	e0bffe17 	ldw	r2,-8(fp)
 40156f8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 40156fc:	00800044 	movi	r2,1
 4015700:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4015704:	e0bffc17 	ldw	r2,-16(fp)
 4015708:	10800504 	addi	r2,r2,20
 401570c:	1009883a 	mov	r4,r2
 4015710:	00c00044 	movi	r3,1
 4015714:	e0bffd17 	ldw	r2,-12(fp)
 4015718:	1884983a 	sll	r2,r3,r2
 401571c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4015720:	e0800317 	ldw	r2,12(fp)
 4015724:	1080008c 	andi	r2,r2,2
 4015728:	1000051e 	bne	r2,zero,4015740 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 401572c:	e0bffc17 	ldw	r2,-16(fp)
 4015730:	10800304 	addi	r2,r2,12
 4015734:	1007883a 	mov	r3,r2
 4015738:	00810004 	movi	r2,1024
 401573c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4015740:	e0bffc17 	ldw	r2,-16(fp)
 4015744:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4015748:	e0bffc17 	ldw	r2,-16(fp)
 401574c:	10800204 	addi	r2,r2,8
 4015750:	10800037 	ldwio	r2,0(r2)
 4015754:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4015758:	e0bffa17 	ldw	r2,-24(fp)
 401575c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4015760:	10000226 	beq	r2,zero,401576c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4015764:	e0bff717 	ldw	r2,-36(fp)
 4015768:	1000031e 	bne	r2,zero,4015778 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401576c:	e0bffa17 	ldw	r2,-24(fp)
 4015770:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4015774:	103ff426 	beq	r2,zero,4015748 <__alt_data_end+0xfc015748>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4015778:	e0bffa17 	ldw	r2,-24(fp)
 401577c:	1080100c 	andi	r2,r2,64
 4015780:	10001e26 	beq	r2,zero,40157fc <alt_avalon_spi_command+0x14c>
 4015784:	e0bff717 	ldw	r2,-36(fp)
 4015788:	00801c0e 	bge	zero,r2,40157fc <alt_avalon_spi_command+0x14c>
    {
      credits--;
 401578c:	e0bff717 	ldw	r2,-36(fp)
 4015790:	10bfffc4 	addi	r2,r2,-1
 4015794:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 4015798:	e0ffff17 	ldw	r3,-4(fp)
 401579c:	e0bff817 	ldw	r2,-32(fp)
 40157a0:	18800a2e 	bgeu	r3,r2,40157cc <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 40157a4:	e0bffc17 	ldw	r2,-16(fp)
 40157a8:	10800104 	addi	r2,r2,4
 40157ac:	1009883a 	mov	r4,r2
 40157b0:	e0bfff17 	ldw	r2,-4(fp)
 40157b4:	10c00044 	addi	r3,r2,1
 40157b8:	e0ffff15 	stw	r3,-4(fp)
 40157bc:	10800003 	ldbu	r2,0(r2)
 40157c0:	10803fcc 	andi	r2,r2,255
 40157c4:	20800035 	stwio	r2,0(r4)
 40157c8:	00000c06 	br	40157fc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 40157cc:	e0bff517 	ldw	r2,-44(fp)
 40157d0:	10000826 	beq	r2,zero,40157f4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 40157d4:	e0bff517 	ldw	r2,-44(fp)
 40157d8:	10bfffc4 	addi	r2,r2,-1
 40157dc:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 40157e0:	e0bffc17 	ldw	r2,-16(fp)
 40157e4:	10800104 	addi	r2,r2,4
 40157e8:	0007883a 	mov	r3,zero
 40157ec:	10c00035 	stwio	r3,0(r2)
 40157f0:	00000206 	br	40157fc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 40157f4:	00bf0004 	movi	r2,-1024
 40157f8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 40157fc:	e0bffa17 	ldw	r2,-24(fp)
 4015800:	1080200c 	andi	r2,r2,128
 4015804:	103fd026 	beq	r2,zero,4015748 <__alt_data_end+0xfc015748>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4015808:	e0bffc17 	ldw	r2,-16(fp)
 401580c:	10800037 	ldwio	r2,0(r2)
 4015810:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 4015814:	e0bff617 	ldw	r2,-40(fp)
 4015818:	10000426 	beq	r2,zero,401582c <alt_avalon_spi_command+0x17c>
        read_ignore--;
 401581c:	e0bff617 	ldw	r2,-40(fp)
 4015820:	10bfffc4 	addi	r2,r2,-1
 4015824:	e0bff615 	stw	r2,-40(fp)
 4015828:	00000506 	br	4015840 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 401582c:	e0800217 	ldw	r2,8(fp)
 4015830:	10c00044 	addi	r3,r2,1
 4015834:	e0c00215 	stw	r3,8(fp)
 4015838:	e0fffb17 	ldw	r3,-20(fp)
 401583c:	10c00005 	stb	r3,0(r2)
      credits++;
 4015840:	e0bff717 	ldw	r2,-36(fp)
 4015844:	10800044 	addi	r2,r2,1
 4015848:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 401584c:	e0bff617 	ldw	r2,-40(fp)
 4015850:	103fbd1e 	bne	r2,zero,4015748 <__alt_data_end+0xfc015748>
 4015854:	e0c00217 	ldw	r3,8(fp)
 4015858:	e0bff917 	ldw	r2,-28(fp)
 401585c:	18bfba1e 	bne	r3,r2,4015748 <__alt_data_end+0xfc015748>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4015860:	e0bffc17 	ldw	r2,-16(fp)
 4015864:	10800204 	addi	r2,r2,8
 4015868:	10800037 	ldwio	r2,0(r2)
 401586c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4015870:	e0bffa17 	ldw	r2,-24(fp)
 4015874:	1080080c 	andi	r2,r2,32
 4015878:	103ff926 	beq	r2,zero,4015860 <__alt_data_end+0xfc015860>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 401587c:	e0800317 	ldw	r2,12(fp)
 4015880:	1080004c 	andi	r2,r2,1
 4015884:	1000041e 	bne	r2,zero,4015898 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4015888:	e0bffc17 	ldw	r2,-16(fp)
 401588c:	10800304 	addi	r2,r2,12
 4015890:	0007883a 	mov	r3,zero
 4015894:	10c00035 	stwio	r3,0(r2)

  return read_length;
 4015898:	e0800117 	ldw	r2,4(fp)
}
 401589c:	e037883a 	mov	sp,fp
 40158a0:	df000017 	ldw	fp,0(sp)
 40158a4:	dec00104 	addi	sp,sp,4
 40158a8:	f800283a 	ret

040158ac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 40158ac:	defffa04 	addi	sp,sp,-24
 40158b0:	dfc00515 	stw	ra,20(sp)
 40158b4:	df000415 	stw	fp,16(sp)
 40158b8:	df000404 	addi	fp,sp,16
 40158bc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40158c0:	0007883a 	mov	r3,zero
 40158c4:	e0bfff17 	ldw	r2,-4(fp)
 40158c8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40158cc:	e0bfff17 	ldw	r2,-4(fp)
 40158d0:	10800104 	addi	r2,r2,4
 40158d4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40158d8:	0005303a 	rdctl	r2,status
 40158dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40158e0:	e0fffd17 	ldw	r3,-12(fp)
 40158e4:	00bfff84 	movi	r2,-2
 40158e8:	1884703a 	and	r2,r3,r2
 40158ec:	1001703a 	wrctl	status,r2
  
  return context;
 40158f0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40158f4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40158f8:	40149000 	call	4014900 <alt_tick>
 40158fc:	e0bffc17 	ldw	r2,-16(fp)
 4015900:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015904:	e0bffe17 	ldw	r2,-8(fp)
 4015908:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401590c:	0001883a 	nop
 4015910:	e037883a 	mov	sp,fp
 4015914:	dfc00117 	ldw	ra,4(sp)
 4015918:	df000017 	ldw	fp,0(sp)
 401591c:	dec00204 	addi	sp,sp,8
 4015920:	f800283a 	ret

04015924 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4015924:	defff804 	addi	sp,sp,-32
 4015928:	dfc00715 	stw	ra,28(sp)
 401592c:	df000615 	stw	fp,24(sp)
 4015930:	df000604 	addi	fp,sp,24
 4015934:	e13ffc15 	stw	r4,-16(fp)
 4015938:	e17ffd15 	stw	r5,-12(fp)
 401593c:	e1bffe15 	stw	r6,-8(fp)
 4015940:	e1ffff15 	stw	r7,-4(fp)
 4015944:	e0bfff17 	ldw	r2,-4(fp)
 4015948:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401594c:	d0a70517 	ldw	r2,-25580(gp)
 4015950:	1000021e 	bne	r2,zero,401595c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4015954:	e0bffb17 	ldw	r2,-20(fp)
 4015958:	d0a70515 	stw	r2,-25580(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401595c:	e0bffc17 	ldw	r2,-16(fp)
 4015960:	10800104 	addi	r2,r2,4
 4015964:	00c001c4 	movi	r3,7
 4015968:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401596c:	d8000015 	stw	zero,0(sp)
 4015970:	e1fffc17 	ldw	r7,-16(fp)
 4015974:	01810074 	movhi	r6,1025
 4015978:	31962b04 	addi	r6,r6,22700
 401597c:	e17ffe17 	ldw	r5,-8(fp)
 4015980:	e13ffd17 	ldw	r4,-12(fp)
 4015984:	4015e040 	call	4015e04 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4015988:	0001883a 	nop
 401598c:	e037883a 	mov	sp,fp
 4015990:	dfc00117 	ldw	ra,4(sp)
 4015994:	df000017 	ldw	fp,0(sp)
 4015998:	dec00204 	addi	sp,sp,8
 401599c:	f800283a 	ret

040159a0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 40159a0:	defff504 	addi	sp,sp,-44
 40159a4:	df000a15 	stw	fp,40(sp)
 40159a8:	df000a04 	addi	fp,sp,40
 40159ac:	e13ffc15 	stw	r4,-16(fp)
 40159b0:	e17ffd15 	stw	r5,-12(fp)
 40159b4:	e1bffe15 	stw	r6,-8(fp)
 40159b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 40159bc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40159c0:	d0a70517 	ldw	r2,-25580(gp)
  
  if (alt_ticks_per_second ())
 40159c4:	10003c26 	beq	r2,zero,4015ab8 <alt_alarm_start+0x118>
  {
    if (alarm)
 40159c8:	e0bffc17 	ldw	r2,-16(fp)
 40159cc:	10003826 	beq	r2,zero,4015ab0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 40159d0:	e0bffc17 	ldw	r2,-16(fp)
 40159d4:	e0fffe17 	ldw	r3,-8(fp)
 40159d8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 40159dc:	e0bffc17 	ldw	r2,-16(fp)
 40159e0:	e0ffff17 	ldw	r3,-4(fp)
 40159e4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40159e8:	0005303a 	rdctl	r2,status
 40159ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40159f0:	e0fff917 	ldw	r3,-28(fp)
 40159f4:	00bfff84 	movi	r2,-2
 40159f8:	1884703a 	and	r2,r3,r2
 40159fc:	1001703a 	wrctl	status,r2
  
  return context;
 4015a00:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4015a04:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4015a08:	d0a70617 	ldw	r2,-25576(gp)
      
      current_nticks = alt_nticks();
 4015a0c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4015a10:	e0fffd17 	ldw	r3,-12(fp)
 4015a14:	e0bff617 	ldw	r2,-40(fp)
 4015a18:	1885883a 	add	r2,r3,r2
 4015a1c:	10c00044 	addi	r3,r2,1
 4015a20:	e0bffc17 	ldw	r2,-16(fp)
 4015a24:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4015a28:	e0bffc17 	ldw	r2,-16(fp)
 4015a2c:	10c00217 	ldw	r3,8(r2)
 4015a30:	e0bff617 	ldw	r2,-40(fp)
 4015a34:	1880042e 	bgeu	r3,r2,4015a48 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4015a38:	e0bffc17 	ldw	r2,-16(fp)
 4015a3c:	00c00044 	movi	r3,1
 4015a40:	10c00405 	stb	r3,16(r2)
 4015a44:	00000206 	br	4015a50 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4015a48:	e0bffc17 	ldw	r2,-16(fp)
 4015a4c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4015a50:	e0bffc17 	ldw	r2,-16(fp)
 4015a54:	d0e01304 	addi	r3,gp,-32692
 4015a58:	e0fffa15 	stw	r3,-24(fp)
 4015a5c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4015a60:	e0bffb17 	ldw	r2,-20(fp)
 4015a64:	e0fffa17 	ldw	r3,-24(fp)
 4015a68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4015a6c:	e0bffa17 	ldw	r2,-24(fp)
 4015a70:	10c00017 	ldw	r3,0(r2)
 4015a74:	e0bffb17 	ldw	r2,-20(fp)
 4015a78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4015a7c:	e0bffa17 	ldw	r2,-24(fp)
 4015a80:	10800017 	ldw	r2,0(r2)
 4015a84:	e0fffb17 	ldw	r3,-20(fp)
 4015a88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4015a8c:	e0bffa17 	ldw	r2,-24(fp)
 4015a90:	e0fffb17 	ldw	r3,-20(fp)
 4015a94:	10c00015 	stw	r3,0(r2)
 4015a98:	e0bff817 	ldw	r2,-32(fp)
 4015a9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015aa0:	e0bff717 	ldw	r2,-36(fp)
 4015aa4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4015aa8:	0005883a 	mov	r2,zero
 4015aac:	00000306 	br	4015abc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4015ab0:	00bffa84 	movi	r2,-22
 4015ab4:	00000106 	br	4015abc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4015ab8:	00bfde84 	movi	r2,-134
  }
}
 4015abc:	e037883a 	mov	sp,fp
 4015ac0:	df000017 	ldw	fp,0(sp)
 4015ac4:	dec00104 	addi	sp,sp,4
 4015ac8:	f800283a 	ret

04015acc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4015acc:	defffa04 	addi	sp,sp,-24
 4015ad0:	dfc00515 	stw	ra,20(sp)
 4015ad4:	df000415 	stw	fp,16(sp)
 4015ad8:	df000404 	addi	fp,sp,16
 4015adc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4015ae0:	00800244 	movi	r2,9
 4015ae4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4015ae8:	014003f4 	movhi	r5,15
 4015aec:	29509004 	addi	r5,r5,16960
 4015af0:	e13ffd17 	ldw	r4,-12(fp)
 4015af4:	4006cd00 	call	4006cd0 <__mulsi3>
 4015af8:	100b883a 	mov	r5,r2
 4015afc:	0100bef4 	movhi	r4,763
 4015b00:	213c2004 	addi	r4,r4,-3968
 4015b04:	4006c140 	call	4006c14 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4015b08:	100b883a 	mov	r5,r2
 4015b0c:	01200034 	movhi	r4,32768
 4015b10:	213fffc4 	addi	r4,r4,-1
 4015b14:	4006c140 	call	4006c14 <__udivsi3>
 4015b18:	100b883a 	mov	r5,r2
 4015b1c:	e13fff17 	ldw	r4,-4(fp)
 4015b20:	4006c140 	call	4006c14 <__udivsi3>
 4015b24:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4015b28:	e0bffe17 	ldw	r2,-8(fp)
 4015b2c:	10002a26 	beq	r2,zero,4015bd8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4015b30:	e03ffc15 	stw	zero,-16(fp)
 4015b34:	00001706 	br	4015b94 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4015b38:	00a00034 	movhi	r2,32768
 4015b3c:	10bfffc4 	addi	r2,r2,-1
 4015b40:	10bfffc4 	addi	r2,r2,-1
 4015b44:	103ffe1e 	bne	r2,zero,4015b40 <__alt_data_end+0xfc015b40>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4015b48:	014003f4 	movhi	r5,15
 4015b4c:	29509004 	addi	r5,r5,16960
 4015b50:	e13ffd17 	ldw	r4,-12(fp)
 4015b54:	4006cd00 	call	4006cd0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4015b58:	100b883a 	mov	r5,r2
 4015b5c:	0100bef4 	movhi	r4,763
 4015b60:	213c2004 	addi	r4,r4,-3968
 4015b64:	4006c140 	call	4006c14 <__udivsi3>
 4015b68:	100b883a 	mov	r5,r2
 4015b6c:	01200034 	movhi	r4,32768
 4015b70:	213fffc4 	addi	r4,r4,-1
 4015b74:	4006c140 	call	4006c14 <__udivsi3>
 4015b78:	1007883a 	mov	r3,r2
 4015b7c:	e0bfff17 	ldw	r2,-4(fp)
 4015b80:	10c5c83a 	sub	r2,r2,r3
 4015b84:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4015b88:	e0bffc17 	ldw	r2,-16(fp)
 4015b8c:	10800044 	addi	r2,r2,1
 4015b90:	e0bffc15 	stw	r2,-16(fp)
 4015b94:	e0fffc17 	ldw	r3,-16(fp)
 4015b98:	e0bffe17 	ldw	r2,-8(fp)
 4015b9c:	18bfe616 	blt	r3,r2,4015b38 <__alt_data_end+0xfc015b38>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4015ba0:	014003f4 	movhi	r5,15
 4015ba4:	29509004 	addi	r5,r5,16960
 4015ba8:	e13ffd17 	ldw	r4,-12(fp)
 4015bac:	4006cd00 	call	4006cd0 <__mulsi3>
 4015bb0:	100b883a 	mov	r5,r2
 4015bb4:	0100bef4 	movhi	r4,763
 4015bb8:	213c2004 	addi	r4,r4,-3968
 4015bbc:	4006c140 	call	4006c14 <__udivsi3>
 4015bc0:	e17fff17 	ldw	r5,-4(fp)
 4015bc4:	1009883a 	mov	r4,r2
 4015bc8:	4006cd00 	call	4006cd0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4015bcc:	10bfffc4 	addi	r2,r2,-1
 4015bd0:	103ffe1e 	bne	r2,zero,4015bcc <__alt_data_end+0xfc015bcc>
 4015bd4:	00000d06 	br	4015c0c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4015bd8:	014003f4 	movhi	r5,15
 4015bdc:	29509004 	addi	r5,r5,16960
 4015be0:	e13ffd17 	ldw	r4,-12(fp)
 4015be4:	4006cd00 	call	4006cd0 <__mulsi3>
 4015be8:	100b883a 	mov	r5,r2
 4015bec:	0100bef4 	movhi	r4,763
 4015bf0:	213c2004 	addi	r4,r4,-3968
 4015bf4:	4006c140 	call	4006c14 <__udivsi3>
 4015bf8:	e17fff17 	ldw	r5,-4(fp)
 4015bfc:	1009883a 	mov	r4,r2
 4015c00:	4006cd00 	call	4006cd0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4015c04:	10bfffc4 	addi	r2,r2,-1
 4015c08:	00bffe16 	blt	zero,r2,4015c04 <__alt_data_end+0xfc015c04>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4015c0c:	0005883a 	mov	r2,zero
}
 4015c10:	e037883a 	mov	sp,fp
 4015c14:	dfc00117 	ldw	ra,4(sp)
 4015c18:	df000017 	ldw	fp,0(sp)
 4015c1c:	dec00204 	addi	sp,sp,8
 4015c20:	f800283a 	ret

04015c24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4015c24:	deffff04 	addi	sp,sp,-4
 4015c28:	df000015 	stw	fp,0(sp)
 4015c2c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4015c30:	0001883a 	nop
 4015c34:	e037883a 	mov	sp,fp
 4015c38:	df000017 	ldw	fp,0(sp)
 4015c3c:	dec00104 	addi	sp,sp,4
 4015c40:	f800283a 	ret

04015c44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4015c44:	defffe04 	addi	sp,sp,-8
 4015c48:	dfc00115 	stw	ra,4(sp)
 4015c4c:	df000015 	stw	fp,0(sp)
 4015c50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4015c54:	d0a01117 	ldw	r2,-32700(gp)
 4015c58:	10000326 	beq	r2,zero,4015c68 <alt_get_errno+0x24>
 4015c5c:	d0a01117 	ldw	r2,-32700(gp)
 4015c60:	103ee83a 	callr	r2
 4015c64:	00000106 	br	4015c6c <alt_get_errno+0x28>
 4015c68:	d0a6f704 	addi	r2,gp,-25636
}
 4015c6c:	e037883a 	mov	sp,fp
 4015c70:	dfc00117 	ldw	ra,4(sp)
 4015c74:	df000017 	ldw	fp,0(sp)
 4015c78:	dec00204 	addi	sp,sp,8
 4015c7c:	f800283a 	ret

04015c80 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4015c80:	defffa04 	addi	sp,sp,-24
 4015c84:	dfc00515 	stw	ra,20(sp)
 4015c88:	df000415 	stw	fp,16(sp)
 4015c8c:	df000404 	addi	fp,sp,16
 4015c90:	e13ffe15 	stw	r4,-8(fp)
 4015c94:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4015c98:	e0bffe17 	ldw	r2,-8(fp)
 4015c9c:	10000326 	beq	r2,zero,4015cac <alt_dev_llist_insert+0x2c>
 4015ca0:	e0bffe17 	ldw	r2,-8(fp)
 4015ca4:	10800217 	ldw	r2,8(r2)
 4015ca8:	1000061e 	bne	r2,zero,4015cc4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4015cac:	4015c440 	call	4015c44 <alt_get_errno>
 4015cb0:	1007883a 	mov	r3,r2
 4015cb4:	00800584 	movi	r2,22
 4015cb8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4015cbc:	00bffa84 	movi	r2,-22
 4015cc0:	00001306 	br	4015d10 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4015cc4:	e0bffe17 	ldw	r2,-8(fp)
 4015cc8:	e0ffff17 	ldw	r3,-4(fp)
 4015ccc:	e0fffc15 	stw	r3,-16(fp)
 4015cd0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4015cd4:	e0bffd17 	ldw	r2,-12(fp)
 4015cd8:	e0fffc17 	ldw	r3,-16(fp)
 4015cdc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4015ce0:	e0bffc17 	ldw	r2,-16(fp)
 4015ce4:	10c00017 	ldw	r3,0(r2)
 4015ce8:	e0bffd17 	ldw	r2,-12(fp)
 4015cec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4015cf0:	e0bffc17 	ldw	r2,-16(fp)
 4015cf4:	10800017 	ldw	r2,0(r2)
 4015cf8:	e0fffd17 	ldw	r3,-12(fp)
 4015cfc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4015d00:	e0bffc17 	ldw	r2,-16(fp)
 4015d04:	e0fffd17 	ldw	r3,-12(fp)
 4015d08:	10c00015 	stw	r3,0(r2)

  return 0;  
 4015d0c:	0005883a 	mov	r2,zero
}
 4015d10:	e037883a 	mov	sp,fp
 4015d14:	dfc00117 	ldw	ra,4(sp)
 4015d18:	df000017 	ldw	fp,0(sp)
 4015d1c:	dec00204 	addi	sp,sp,8
 4015d20:	f800283a 	ret

04015d24 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4015d24:	defffd04 	addi	sp,sp,-12
 4015d28:	dfc00215 	stw	ra,8(sp)
 4015d2c:	df000115 	stw	fp,4(sp)
 4015d30:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4015d34:	00810074 	movhi	r2,1025
 4015d38:	109acd04 	addi	r2,r2,27444
 4015d3c:	e0bfff15 	stw	r2,-4(fp)
 4015d40:	00000606 	br	4015d5c <_do_ctors+0x38>
        (*ctor) (); 
 4015d44:	e0bfff17 	ldw	r2,-4(fp)
 4015d48:	10800017 	ldw	r2,0(r2)
 4015d4c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4015d50:	e0bfff17 	ldw	r2,-4(fp)
 4015d54:	10bfff04 	addi	r2,r2,-4
 4015d58:	e0bfff15 	stw	r2,-4(fp)
 4015d5c:	e0ffff17 	ldw	r3,-4(fp)
 4015d60:	00810074 	movhi	r2,1025
 4015d64:	109ace04 	addi	r2,r2,27448
 4015d68:	18bff62e 	bgeu	r3,r2,4015d44 <__alt_data_end+0xfc015d44>
        (*ctor) (); 
}
 4015d6c:	0001883a 	nop
 4015d70:	e037883a 	mov	sp,fp
 4015d74:	dfc00117 	ldw	ra,4(sp)
 4015d78:	df000017 	ldw	fp,0(sp)
 4015d7c:	dec00204 	addi	sp,sp,8
 4015d80:	f800283a 	ret

04015d84 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4015d84:	defffd04 	addi	sp,sp,-12
 4015d88:	dfc00215 	stw	ra,8(sp)
 4015d8c:	df000115 	stw	fp,4(sp)
 4015d90:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4015d94:	00810074 	movhi	r2,1025
 4015d98:	109acd04 	addi	r2,r2,27444
 4015d9c:	e0bfff15 	stw	r2,-4(fp)
 4015da0:	00000606 	br	4015dbc <_do_dtors+0x38>
        (*dtor) (); 
 4015da4:	e0bfff17 	ldw	r2,-4(fp)
 4015da8:	10800017 	ldw	r2,0(r2)
 4015dac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4015db0:	e0bfff17 	ldw	r2,-4(fp)
 4015db4:	10bfff04 	addi	r2,r2,-4
 4015db8:	e0bfff15 	stw	r2,-4(fp)
 4015dbc:	e0ffff17 	ldw	r3,-4(fp)
 4015dc0:	00810074 	movhi	r2,1025
 4015dc4:	109ace04 	addi	r2,r2,27448
 4015dc8:	18bff62e 	bgeu	r3,r2,4015da4 <__alt_data_end+0xfc015da4>
        (*dtor) (); 
}
 4015dcc:	0001883a 	nop
 4015dd0:	e037883a 	mov	sp,fp
 4015dd4:	dfc00117 	ldw	ra,4(sp)
 4015dd8:	df000017 	ldw	fp,0(sp)
 4015ddc:	dec00204 	addi	sp,sp,8
 4015de0:	f800283a 	ret

04015de4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4015de4:	deffff04 	addi	sp,sp,-4
 4015de8:	df000015 	stw	fp,0(sp)
 4015dec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4015df0:	0001883a 	nop
 4015df4:	e037883a 	mov	sp,fp
 4015df8:	df000017 	ldw	fp,0(sp)
 4015dfc:	dec00104 	addi	sp,sp,4
 4015e00:	f800283a 	ret

04015e04 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4015e04:	defff904 	addi	sp,sp,-28
 4015e08:	dfc00615 	stw	ra,24(sp)
 4015e0c:	df000515 	stw	fp,20(sp)
 4015e10:	df000504 	addi	fp,sp,20
 4015e14:	e13ffc15 	stw	r4,-16(fp)
 4015e18:	e17ffd15 	stw	r5,-12(fp)
 4015e1c:	e1bffe15 	stw	r6,-8(fp)
 4015e20:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4015e24:	e0800217 	ldw	r2,8(fp)
 4015e28:	d8800015 	stw	r2,0(sp)
 4015e2c:	e1ffff17 	ldw	r7,-4(fp)
 4015e30:	e1bffe17 	ldw	r6,-8(fp)
 4015e34:	e17ffd17 	ldw	r5,-12(fp)
 4015e38:	e13ffc17 	ldw	r4,-16(fp)
 4015e3c:	4015fb40 	call	4015fb4 <alt_iic_isr_register>
}  
 4015e40:	e037883a 	mov	sp,fp
 4015e44:	dfc00117 	ldw	ra,4(sp)
 4015e48:	df000017 	ldw	fp,0(sp)
 4015e4c:	dec00204 	addi	sp,sp,8
 4015e50:	f800283a 	ret

04015e54 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4015e54:	defff904 	addi	sp,sp,-28
 4015e58:	df000615 	stw	fp,24(sp)
 4015e5c:	df000604 	addi	fp,sp,24
 4015e60:	e13ffe15 	stw	r4,-8(fp)
 4015e64:	e17fff15 	stw	r5,-4(fp)
 4015e68:	e0bfff17 	ldw	r2,-4(fp)
 4015e6c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015e70:	0005303a 	rdctl	r2,status
 4015e74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015e78:	e0fffb17 	ldw	r3,-20(fp)
 4015e7c:	00bfff84 	movi	r2,-2
 4015e80:	1884703a 	and	r2,r3,r2
 4015e84:	1001703a 	wrctl	status,r2
  
  return context;
 4015e88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4015e8c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4015e90:	00c00044 	movi	r3,1
 4015e94:	e0bffa17 	ldw	r2,-24(fp)
 4015e98:	1884983a 	sll	r2,r3,r2
 4015e9c:	1007883a 	mov	r3,r2
 4015ea0:	d0a70717 	ldw	r2,-25572(gp)
 4015ea4:	1884b03a 	or	r2,r3,r2
 4015ea8:	d0a70715 	stw	r2,-25572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4015eac:	d0a70717 	ldw	r2,-25572(gp)
 4015eb0:	100170fa 	wrctl	ienable,r2
 4015eb4:	e0bffc17 	ldw	r2,-16(fp)
 4015eb8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015ebc:	e0bffd17 	ldw	r2,-12(fp)
 4015ec0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4015ec4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4015ec8:	0001883a 	nop
}
 4015ecc:	e037883a 	mov	sp,fp
 4015ed0:	df000017 	ldw	fp,0(sp)
 4015ed4:	dec00104 	addi	sp,sp,4
 4015ed8:	f800283a 	ret

04015edc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4015edc:	defff904 	addi	sp,sp,-28
 4015ee0:	df000615 	stw	fp,24(sp)
 4015ee4:	df000604 	addi	fp,sp,24
 4015ee8:	e13ffe15 	stw	r4,-8(fp)
 4015eec:	e17fff15 	stw	r5,-4(fp)
 4015ef0:	e0bfff17 	ldw	r2,-4(fp)
 4015ef4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015ef8:	0005303a 	rdctl	r2,status
 4015efc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015f00:	e0fffb17 	ldw	r3,-20(fp)
 4015f04:	00bfff84 	movi	r2,-2
 4015f08:	1884703a 	and	r2,r3,r2
 4015f0c:	1001703a 	wrctl	status,r2
  
  return context;
 4015f10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4015f14:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4015f18:	00c00044 	movi	r3,1
 4015f1c:	e0bffa17 	ldw	r2,-24(fp)
 4015f20:	1884983a 	sll	r2,r3,r2
 4015f24:	0084303a 	nor	r2,zero,r2
 4015f28:	1007883a 	mov	r3,r2
 4015f2c:	d0a70717 	ldw	r2,-25572(gp)
 4015f30:	1884703a 	and	r2,r3,r2
 4015f34:	d0a70715 	stw	r2,-25572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4015f38:	d0a70717 	ldw	r2,-25572(gp)
 4015f3c:	100170fa 	wrctl	ienable,r2
 4015f40:	e0bffc17 	ldw	r2,-16(fp)
 4015f44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015f48:	e0bffd17 	ldw	r2,-12(fp)
 4015f4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4015f50:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4015f54:	0001883a 	nop
}
 4015f58:	e037883a 	mov	sp,fp
 4015f5c:	df000017 	ldw	fp,0(sp)
 4015f60:	dec00104 	addi	sp,sp,4
 4015f64:	f800283a 	ret

04015f68 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4015f68:	defffc04 	addi	sp,sp,-16
 4015f6c:	df000315 	stw	fp,12(sp)
 4015f70:	df000304 	addi	fp,sp,12
 4015f74:	e13ffe15 	stw	r4,-8(fp)
 4015f78:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4015f7c:	000530fa 	rdctl	r2,ienable
 4015f80:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4015f84:	00c00044 	movi	r3,1
 4015f88:	e0bfff17 	ldw	r2,-4(fp)
 4015f8c:	1884983a 	sll	r2,r3,r2
 4015f90:	1007883a 	mov	r3,r2
 4015f94:	e0bffd17 	ldw	r2,-12(fp)
 4015f98:	1884703a 	and	r2,r3,r2
 4015f9c:	1004c03a 	cmpne	r2,r2,zero
 4015fa0:	10803fcc 	andi	r2,r2,255
}
 4015fa4:	e037883a 	mov	sp,fp
 4015fa8:	df000017 	ldw	fp,0(sp)
 4015fac:	dec00104 	addi	sp,sp,4
 4015fb0:	f800283a 	ret

04015fb4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4015fb4:	defff504 	addi	sp,sp,-44
 4015fb8:	dfc00a15 	stw	ra,40(sp)
 4015fbc:	df000915 	stw	fp,36(sp)
 4015fc0:	df000904 	addi	fp,sp,36
 4015fc4:	e13ffc15 	stw	r4,-16(fp)
 4015fc8:	e17ffd15 	stw	r5,-12(fp)
 4015fcc:	e1bffe15 	stw	r6,-8(fp)
 4015fd0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4015fd4:	00bffa84 	movi	r2,-22
 4015fd8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4015fdc:	e0bffd17 	ldw	r2,-12(fp)
 4015fe0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4015fe4:	e0bff817 	ldw	r2,-32(fp)
 4015fe8:	10800808 	cmpgei	r2,r2,32
 4015fec:	1000271e 	bne	r2,zero,401608c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015ff0:	0005303a 	rdctl	r2,status
 4015ff4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015ff8:	e0fffb17 	ldw	r3,-20(fp)
 4015ffc:	00bfff84 	movi	r2,-2
 4016000:	1884703a 	and	r2,r3,r2
 4016004:	1001703a 	wrctl	status,r2
  
  return context;
 4016008:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401600c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4016010:	008100b4 	movhi	r2,1026
 4016014:	10af0904 	addi	r2,r2,-17372
 4016018:	e0fff817 	ldw	r3,-32(fp)
 401601c:	180690fa 	slli	r3,r3,3
 4016020:	10c5883a 	add	r2,r2,r3
 4016024:	e0fffe17 	ldw	r3,-8(fp)
 4016028:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 401602c:	008100b4 	movhi	r2,1026
 4016030:	10af0904 	addi	r2,r2,-17372
 4016034:	e0fff817 	ldw	r3,-32(fp)
 4016038:	180690fa 	slli	r3,r3,3
 401603c:	10c5883a 	add	r2,r2,r3
 4016040:	10800104 	addi	r2,r2,4
 4016044:	e0ffff17 	ldw	r3,-4(fp)
 4016048:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401604c:	e0bffe17 	ldw	r2,-8(fp)
 4016050:	10000526 	beq	r2,zero,4016068 <alt_iic_isr_register+0xb4>
 4016054:	e0bff817 	ldw	r2,-32(fp)
 4016058:	100b883a 	mov	r5,r2
 401605c:	e13ffc17 	ldw	r4,-16(fp)
 4016060:	4015e540 	call	4015e54 <alt_ic_irq_enable>
 4016064:	00000406 	br	4016078 <alt_iic_isr_register+0xc4>
 4016068:	e0bff817 	ldw	r2,-32(fp)
 401606c:	100b883a 	mov	r5,r2
 4016070:	e13ffc17 	ldw	r4,-16(fp)
 4016074:	4015edc0 	call	4015edc <alt_ic_irq_disable>
 4016078:	e0bff715 	stw	r2,-36(fp)
 401607c:	e0bffa17 	ldw	r2,-24(fp)
 4016080:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016084:	e0bff917 	ldw	r2,-28(fp)
 4016088:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401608c:	e0bff717 	ldw	r2,-36(fp)
}
 4016090:	e037883a 	mov	sp,fp
 4016094:	dfc00117 	ldw	ra,4(sp)
 4016098:	df000017 	ldw	fp,0(sp)
 401609c:	dec00204 	addi	sp,sp,8
 40160a0:	f800283a 	ret

040160a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40160a4:	defff804 	addi	sp,sp,-32
 40160a8:	dfc00715 	stw	ra,28(sp)
 40160ac:	df000615 	stw	fp,24(sp)
 40160b0:	dc000515 	stw	r16,20(sp)
 40160b4:	df000604 	addi	fp,sp,24
 40160b8:	e13ffb15 	stw	r4,-20(fp)
 40160bc:	e17ffc15 	stw	r5,-16(fp)
 40160c0:	e1bffd15 	stw	r6,-12(fp)
 40160c4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 40160c8:	e1bffe17 	ldw	r6,-8(fp)
 40160cc:	e17ffd17 	ldw	r5,-12(fp)
 40160d0:	e13ffc17 	ldw	r4,-16(fp)
 40160d4:	401632c0 	call	401632c <open>
 40160d8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 40160dc:	e0bffa17 	ldw	r2,-24(fp)
 40160e0:	10002216 	blt	r2,zero,401616c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 40160e4:	04010074 	movhi	r16,1025
 40160e8:	841e7204 	addi	r16,r16,31176
 40160ec:	e0bffa17 	ldw	r2,-24(fp)
 40160f0:	01400304 	movi	r5,12
 40160f4:	1009883a 	mov	r4,r2
 40160f8:	4006cd00 	call	4006cd0 <__mulsi3>
 40160fc:	8085883a 	add	r2,r16,r2
 4016100:	10c00017 	ldw	r3,0(r2)
 4016104:	e0bffb17 	ldw	r2,-20(fp)
 4016108:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401610c:	04010074 	movhi	r16,1025
 4016110:	841e7204 	addi	r16,r16,31176
 4016114:	e0bffa17 	ldw	r2,-24(fp)
 4016118:	01400304 	movi	r5,12
 401611c:	1009883a 	mov	r4,r2
 4016120:	4006cd00 	call	4006cd0 <__mulsi3>
 4016124:	8085883a 	add	r2,r16,r2
 4016128:	10800104 	addi	r2,r2,4
 401612c:	10c00017 	ldw	r3,0(r2)
 4016130:	e0bffb17 	ldw	r2,-20(fp)
 4016134:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4016138:	04010074 	movhi	r16,1025
 401613c:	841e7204 	addi	r16,r16,31176
 4016140:	e0bffa17 	ldw	r2,-24(fp)
 4016144:	01400304 	movi	r5,12
 4016148:	1009883a 	mov	r4,r2
 401614c:	4006cd00 	call	4006cd0 <__mulsi3>
 4016150:	8085883a 	add	r2,r16,r2
 4016154:	10800204 	addi	r2,r2,8
 4016158:	10c00017 	ldw	r3,0(r2)
 401615c:	e0bffb17 	ldw	r2,-20(fp)
 4016160:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4016164:	e13ffa17 	ldw	r4,-24(fp)
 4016168:	40147300 	call	4014730 <alt_release_fd>
  }
} 
 401616c:	0001883a 	nop
 4016170:	e6ffff04 	addi	sp,fp,-4
 4016174:	dfc00217 	ldw	ra,8(sp)
 4016178:	df000117 	ldw	fp,4(sp)
 401617c:	dc000017 	ldw	r16,0(sp)
 4016180:	dec00304 	addi	sp,sp,12
 4016184:	f800283a 	ret

04016188 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4016188:	defffb04 	addi	sp,sp,-20
 401618c:	dfc00415 	stw	ra,16(sp)
 4016190:	df000315 	stw	fp,12(sp)
 4016194:	df000304 	addi	fp,sp,12
 4016198:	e13ffd15 	stw	r4,-12(fp)
 401619c:	e17ffe15 	stw	r5,-8(fp)
 40161a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40161a4:	01c07fc4 	movi	r7,511
 40161a8:	01800044 	movi	r6,1
 40161ac:	e17ffd17 	ldw	r5,-12(fp)
 40161b0:	01010074 	movhi	r4,1025
 40161b4:	211e7504 	addi	r4,r4,31188
 40161b8:	40160a40 	call	40160a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40161bc:	01c07fc4 	movi	r7,511
 40161c0:	000d883a 	mov	r6,zero
 40161c4:	e17ffe17 	ldw	r5,-8(fp)
 40161c8:	01010074 	movhi	r4,1025
 40161cc:	211e7204 	addi	r4,r4,31176
 40161d0:	40160a40 	call	40160a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40161d4:	01c07fc4 	movi	r7,511
 40161d8:	01800044 	movi	r6,1
 40161dc:	e17fff17 	ldw	r5,-4(fp)
 40161e0:	01010074 	movhi	r4,1025
 40161e4:	211e7804 	addi	r4,r4,31200
 40161e8:	40160a40 	call	40160a4 <alt_open_fd>
}  
 40161ec:	0001883a 	nop
 40161f0:	e037883a 	mov	sp,fp
 40161f4:	dfc00117 	ldw	ra,4(sp)
 40161f8:	df000017 	ldw	fp,0(sp)
 40161fc:	dec00204 	addi	sp,sp,8
 4016200:	f800283a 	ret

04016204 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4016204:	defffe04 	addi	sp,sp,-8
 4016208:	dfc00115 	stw	ra,4(sp)
 401620c:	df000015 	stw	fp,0(sp)
 4016210:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4016214:	d0a01117 	ldw	r2,-32700(gp)
 4016218:	10000326 	beq	r2,zero,4016228 <alt_get_errno+0x24>
 401621c:	d0a01117 	ldw	r2,-32700(gp)
 4016220:	103ee83a 	callr	r2
 4016224:	00000106 	br	401622c <alt_get_errno+0x28>
 4016228:	d0a6f704 	addi	r2,gp,-25636
}
 401622c:	e037883a 	mov	sp,fp
 4016230:	dfc00117 	ldw	ra,4(sp)
 4016234:	df000017 	ldw	fp,0(sp)
 4016238:	dec00204 	addi	sp,sp,8
 401623c:	f800283a 	ret

04016240 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4016240:	defffb04 	addi	sp,sp,-20
 4016244:	dfc00415 	stw	ra,16(sp)
 4016248:	df000315 	stw	fp,12(sp)
 401624c:	dc000215 	stw	r16,8(sp)
 4016250:	df000304 	addi	fp,sp,12
 4016254:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4016258:	e0bffe17 	ldw	r2,-8(fp)
 401625c:	10800217 	ldw	r2,8(r2)
 4016260:	10d00034 	orhi	r3,r2,16384
 4016264:	e0bffe17 	ldw	r2,-8(fp)
 4016268:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401626c:	e03ffd15 	stw	zero,-12(fp)
 4016270:	00002306 	br	4016300 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4016274:	04010074 	movhi	r16,1025
 4016278:	841e7204 	addi	r16,r16,31176
 401627c:	e0bffd17 	ldw	r2,-12(fp)
 4016280:	01400304 	movi	r5,12
 4016284:	1009883a 	mov	r4,r2
 4016288:	4006cd00 	call	4006cd0 <__mulsi3>
 401628c:	8085883a 	add	r2,r16,r2
 4016290:	10c00017 	ldw	r3,0(r2)
 4016294:	e0bffe17 	ldw	r2,-8(fp)
 4016298:	10800017 	ldw	r2,0(r2)
 401629c:	1880151e 	bne	r3,r2,40162f4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40162a0:	04010074 	movhi	r16,1025
 40162a4:	841e7204 	addi	r16,r16,31176
 40162a8:	e0bffd17 	ldw	r2,-12(fp)
 40162ac:	01400304 	movi	r5,12
 40162b0:	1009883a 	mov	r4,r2
 40162b4:	4006cd00 	call	4006cd0 <__mulsi3>
 40162b8:	8085883a 	add	r2,r16,r2
 40162bc:	10800204 	addi	r2,r2,8
 40162c0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40162c4:	10000b0e 	bge	r2,zero,40162f4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40162c8:	01400304 	movi	r5,12
 40162cc:	e13ffd17 	ldw	r4,-12(fp)
 40162d0:	4006cd00 	call	4006cd0 <__mulsi3>
 40162d4:	1007883a 	mov	r3,r2
 40162d8:	00810074 	movhi	r2,1025
 40162dc:	109e7204 	addi	r2,r2,31176
 40162e0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40162e4:	e0bffe17 	ldw	r2,-8(fp)
 40162e8:	18800226 	beq	r3,r2,40162f4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40162ec:	00bffcc4 	movi	r2,-13
 40162f0:	00000806 	br	4016314 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40162f4:	e0bffd17 	ldw	r2,-12(fp)
 40162f8:	10800044 	addi	r2,r2,1
 40162fc:	e0bffd15 	stw	r2,-12(fp)
 4016300:	d0a01017 	ldw	r2,-32704(gp)
 4016304:	1007883a 	mov	r3,r2
 4016308:	e0bffd17 	ldw	r2,-12(fp)
 401630c:	18bfd92e 	bgeu	r3,r2,4016274 <__alt_data_end+0xfc016274>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4016310:	0005883a 	mov	r2,zero
}
 4016314:	e6ffff04 	addi	sp,fp,-4
 4016318:	dfc00217 	ldw	ra,8(sp)
 401631c:	df000117 	ldw	fp,4(sp)
 4016320:	dc000017 	ldw	r16,0(sp)
 4016324:	dec00304 	addi	sp,sp,12
 4016328:	f800283a 	ret

0401632c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401632c:	defff604 	addi	sp,sp,-40
 4016330:	dfc00915 	stw	ra,36(sp)
 4016334:	df000815 	stw	fp,32(sp)
 4016338:	df000804 	addi	fp,sp,32
 401633c:	e13ffd15 	stw	r4,-12(fp)
 4016340:	e17ffe15 	stw	r5,-8(fp)
 4016344:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4016348:	00bfffc4 	movi	r2,-1
 401634c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4016350:	00bffb44 	movi	r2,-19
 4016354:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4016358:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401635c:	d1600e04 	addi	r5,gp,-32712
 4016360:	e13ffd17 	ldw	r4,-12(fp)
 4016364:	40164ac0 	call	40164ac <alt_find_dev>
 4016368:	e0bff815 	stw	r2,-32(fp)
 401636c:	e0bff817 	ldw	r2,-32(fp)
 4016370:	1000051e 	bne	r2,zero,4016388 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4016374:	e13ffd17 	ldw	r4,-12(fp)
 4016378:	401653c0 	call	401653c <alt_find_file>
 401637c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4016380:	00800044 	movi	r2,1
 4016384:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4016388:	e0bff817 	ldw	r2,-32(fp)
 401638c:	10002b26 	beq	r2,zero,401643c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4016390:	e13ff817 	ldw	r4,-32(fp)
 4016394:	40166440 	call	4016644 <alt_get_fd>
 4016398:	e0bff915 	stw	r2,-28(fp)
 401639c:	e0bff917 	ldw	r2,-28(fp)
 40163a0:	1000030e 	bge	r2,zero,40163b0 <open+0x84>
    {
      status = index;
 40163a4:	e0bff917 	ldw	r2,-28(fp)
 40163a8:	e0bffa15 	stw	r2,-24(fp)
 40163ac:	00002506 	br	4016444 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 40163b0:	01400304 	movi	r5,12
 40163b4:	e13ff917 	ldw	r4,-28(fp)
 40163b8:	4006cd00 	call	4006cd0 <__mulsi3>
 40163bc:	1007883a 	mov	r3,r2
 40163c0:	00810074 	movhi	r2,1025
 40163c4:	109e7204 	addi	r2,r2,31176
 40163c8:	1885883a 	add	r2,r3,r2
 40163cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40163d0:	e0fffe17 	ldw	r3,-8(fp)
 40163d4:	00900034 	movhi	r2,16384
 40163d8:	10bfffc4 	addi	r2,r2,-1
 40163dc:	1886703a 	and	r3,r3,r2
 40163e0:	e0bffc17 	ldw	r2,-16(fp)
 40163e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40163e8:	e0bffb17 	ldw	r2,-20(fp)
 40163ec:	1000051e 	bne	r2,zero,4016404 <open+0xd8>
 40163f0:	e13ffc17 	ldw	r4,-16(fp)
 40163f4:	40162400 	call	4016240 <alt_file_locked>
 40163f8:	e0bffa15 	stw	r2,-24(fp)
 40163fc:	e0bffa17 	ldw	r2,-24(fp)
 4016400:	10001016 	blt	r2,zero,4016444 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4016404:	e0bff817 	ldw	r2,-32(fp)
 4016408:	10800317 	ldw	r2,12(r2)
 401640c:	10000826 	beq	r2,zero,4016430 <open+0x104>
 4016410:	e0bff817 	ldw	r2,-32(fp)
 4016414:	10800317 	ldw	r2,12(r2)
 4016418:	e1ffff17 	ldw	r7,-4(fp)
 401641c:	e1bffe17 	ldw	r6,-8(fp)
 4016420:	e17ffd17 	ldw	r5,-12(fp)
 4016424:	e13ffc17 	ldw	r4,-16(fp)
 4016428:	103ee83a 	callr	r2
 401642c:	00000106 	br	4016434 <open+0x108>
 4016430:	0005883a 	mov	r2,zero
 4016434:	e0bffa15 	stw	r2,-24(fp)
 4016438:	00000206 	br	4016444 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401643c:	00bffb44 	movi	r2,-19
 4016440:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4016444:	e0bffa17 	ldw	r2,-24(fp)
 4016448:	1000090e 	bge	r2,zero,4016470 <open+0x144>
  {
    alt_release_fd (index);  
 401644c:	e13ff917 	ldw	r4,-28(fp)
 4016450:	40147300 	call	4014730 <alt_release_fd>
    ALT_ERRNO = -status;
 4016454:	40162040 	call	4016204 <alt_get_errno>
 4016458:	1007883a 	mov	r3,r2
 401645c:	e0bffa17 	ldw	r2,-24(fp)
 4016460:	0085c83a 	sub	r2,zero,r2
 4016464:	18800015 	stw	r2,0(r3)
    return -1;
 4016468:	00bfffc4 	movi	r2,-1
 401646c:	00000106 	br	4016474 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4016470:	e0bff917 	ldw	r2,-28(fp)
}
 4016474:	e037883a 	mov	sp,fp
 4016478:	dfc00117 	ldw	ra,4(sp)
 401647c:	df000017 	ldw	fp,0(sp)
 4016480:	dec00204 	addi	sp,sp,8
 4016484:	f800283a 	ret

04016488 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4016488:	deffff04 	addi	sp,sp,-4
 401648c:	df000015 	stw	fp,0(sp)
 4016490:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4016494:	000170fa 	wrctl	ienable,zero
}
 4016498:	0001883a 	nop
 401649c:	e037883a 	mov	sp,fp
 40164a0:	df000017 	ldw	fp,0(sp)
 40164a4:	dec00104 	addi	sp,sp,4
 40164a8:	f800283a 	ret

040164ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40164ac:	defffa04 	addi	sp,sp,-24
 40164b0:	dfc00515 	stw	ra,20(sp)
 40164b4:	df000415 	stw	fp,16(sp)
 40164b8:	df000404 	addi	fp,sp,16
 40164bc:	e13ffe15 	stw	r4,-8(fp)
 40164c0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40164c4:	e0bfff17 	ldw	r2,-4(fp)
 40164c8:	10800017 	ldw	r2,0(r2)
 40164cc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40164d0:	e13ffe17 	ldw	r4,-8(fp)
 40164d4:	4006ffc0 	call	4006ffc <strlen>
 40164d8:	10800044 	addi	r2,r2,1
 40164dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40164e0:	00000d06 	br	4016518 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40164e4:	e0bffc17 	ldw	r2,-16(fp)
 40164e8:	10800217 	ldw	r2,8(r2)
 40164ec:	e0fffd17 	ldw	r3,-12(fp)
 40164f0:	180d883a 	mov	r6,r3
 40164f4:	e17ffe17 	ldw	r5,-8(fp)
 40164f8:	1009883a 	mov	r4,r2
 40164fc:	40167f00 	call	40167f0 <memcmp>
 4016500:	1000021e 	bne	r2,zero,401650c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4016504:	e0bffc17 	ldw	r2,-16(fp)
 4016508:	00000706 	br	4016528 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401650c:	e0bffc17 	ldw	r2,-16(fp)
 4016510:	10800017 	ldw	r2,0(r2)
 4016514:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4016518:	e0fffc17 	ldw	r3,-16(fp)
 401651c:	e0bfff17 	ldw	r2,-4(fp)
 4016520:	18bff01e 	bne	r3,r2,40164e4 <__alt_data_end+0xfc0164e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4016524:	0005883a 	mov	r2,zero
}
 4016528:	e037883a 	mov	sp,fp
 401652c:	dfc00117 	ldw	ra,4(sp)
 4016530:	df000017 	ldw	fp,0(sp)
 4016534:	dec00204 	addi	sp,sp,8
 4016538:	f800283a 	ret

0401653c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401653c:	defffb04 	addi	sp,sp,-20
 4016540:	dfc00415 	stw	ra,16(sp)
 4016544:	df000315 	stw	fp,12(sp)
 4016548:	df000304 	addi	fp,sp,12
 401654c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4016550:	d0a00c17 	ldw	r2,-32720(gp)
 4016554:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4016558:	00003106 	br	4016620 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401655c:	e0bffd17 	ldw	r2,-12(fp)
 4016560:	10800217 	ldw	r2,8(r2)
 4016564:	1009883a 	mov	r4,r2
 4016568:	4006ffc0 	call	4006ffc <strlen>
 401656c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4016570:	e0bffd17 	ldw	r2,-12(fp)
 4016574:	10c00217 	ldw	r3,8(r2)
 4016578:	e0bffe17 	ldw	r2,-8(fp)
 401657c:	10bfffc4 	addi	r2,r2,-1
 4016580:	1885883a 	add	r2,r3,r2
 4016584:	10800003 	ldbu	r2,0(r2)
 4016588:	10803fcc 	andi	r2,r2,255
 401658c:	1080201c 	xori	r2,r2,128
 4016590:	10bfe004 	addi	r2,r2,-128
 4016594:	10800bd8 	cmpnei	r2,r2,47
 4016598:	1000031e 	bne	r2,zero,40165a8 <alt_find_file+0x6c>
    {
      len -= 1;
 401659c:	e0bffe17 	ldw	r2,-8(fp)
 40165a0:	10bfffc4 	addi	r2,r2,-1
 40165a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40165a8:	e0bffe17 	ldw	r2,-8(fp)
 40165ac:	e0ffff17 	ldw	r3,-4(fp)
 40165b0:	1885883a 	add	r2,r3,r2
 40165b4:	10800003 	ldbu	r2,0(r2)
 40165b8:	10803fcc 	andi	r2,r2,255
 40165bc:	1080201c 	xori	r2,r2,128
 40165c0:	10bfe004 	addi	r2,r2,-128
 40165c4:	10800be0 	cmpeqi	r2,r2,47
 40165c8:	1000081e 	bne	r2,zero,40165ec <alt_find_file+0xb0>
 40165cc:	e0bffe17 	ldw	r2,-8(fp)
 40165d0:	e0ffff17 	ldw	r3,-4(fp)
 40165d4:	1885883a 	add	r2,r3,r2
 40165d8:	10800003 	ldbu	r2,0(r2)
 40165dc:	10803fcc 	andi	r2,r2,255
 40165e0:	1080201c 	xori	r2,r2,128
 40165e4:	10bfe004 	addi	r2,r2,-128
 40165e8:	10000a1e 	bne	r2,zero,4016614 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 40165ec:	e0bffd17 	ldw	r2,-12(fp)
 40165f0:	10800217 	ldw	r2,8(r2)
 40165f4:	e0fffe17 	ldw	r3,-8(fp)
 40165f8:	180d883a 	mov	r6,r3
 40165fc:	e17fff17 	ldw	r5,-4(fp)
 4016600:	1009883a 	mov	r4,r2
 4016604:	40167f00 	call	40167f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4016608:	1000021e 	bne	r2,zero,4016614 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401660c:	e0bffd17 	ldw	r2,-12(fp)
 4016610:	00000706 	br	4016630 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4016614:	e0bffd17 	ldw	r2,-12(fp)
 4016618:	10800017 	ldw	r2,0(r2)
 401661c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4016620:	e0fffd17 	ldw	r3,-12(fp)
 4016624:	d0a00c04 	addi	r2,gp,-32720
 4016628:	18bfcc1e 	bne	r3,r2,401655c <__alt_data_end+0xfc01655c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401662c:	0005883a 	mov	r2,zero
}
 4016630:	e037883a 	mov	sp,fp
 4016634:	dfc00117 	ldw	ra,4(sp)
 4016638:	df000017 	ldw	fp,0(sp)
 401663c:	dec00204 	addi	sp,sp,8
 4016640:	f800283a 	ret

04016644 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4016644:	defffa04 	addi	sp,sp,-24
 4016648:	dfc00515 	stw	ra,20(sp)
 401664c:	df000415 	stw	fp,16(sp)
 4016650:	dc000315 	stw	r16,12(sp)
 4016654:	df000404 	addi	fp,sp,16
 4016658:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 401665c:	00bffa04 	movi	r2,-24
 4016660:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4016664:	e03ffc15 	stw	zero,-16(fp)
 4016668:	00001d06 	br	40166e0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 401666c:	04010074 	movhi	r16,1025
 4016670:	841e7204 	addi	r16,r16,31176
 4016674:	e0bffc17 	ldw	r2,-16(fp)
 4016678:	01400304 	movi	r5,12
 401667c:	1009883a 	mov	r4,r2
 4016680:	4006cd00 	call	4006cd0 <__mulsi3>
 4016684:	8085883a 	add	r2,r16,r2
 4016688:	10800017 	ldw	r2,0(r2)
 401668c:	1000111e 	bne	r2,zero,40166d4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4016690:	04010074 	movhi	r16,1025
 4016694:	841e7204 	addi	r16,r16,31176
 4016698:	e0bffc17 	ldw	r2,-16(fp)
 401669c:	01400304 	movi	r5,12
 40166a0:	1009883a 	mov	r4,r2
 40166a4:	4006cd00 	call	4006cd0 <__mulsi3>
 40166a8:	8085883a 	add	r2,r16,r2
 40166ac:	e0fffe17 	ldw	r3,-8(fp)
 40166b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40166b4:	d0e01017 	ldw	r3,-32704(gp)
 40166b8:	e0bffc17 	ldw	r2,-16(fp)
 40166bc:	1880020e 	bge	r3,r2,40166c8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 40166c0:	e0bffc17 	ldw	r2,-16(fp)
 40166c4:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
 40166c8:	e0bffc17 	ldw	r2,-16(fp)
 40166cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 40166d0:	00000606 	br	40166ec <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40166d4:	e0bffc17 	ldw	r2,-16(fp)
 40166d8:	10800044 	addi	r2,r2,1
 40166dc:	e0bffc15 	stw	r2,-16(fp)
 40166e0:	e0bffc17 	ldw	r2,-16(fp)
 40166e4:	10800810 	cmplti	r2,r2,32
 40166e8:	103fe01e 	bne	r2,zero,401666c <__alt_data_end+0xfc01666c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40166ec:	e0bffd17 	ldw	r2,-12(fp)
}
 40166f0:	e6ffff04 	addi	sp,fp,-4
 40166f4:	dfc00217 	ldw	ra,8(sp)
 40166f8:	df000117 	ldw	fp,4(sp)
 40166fc:	dc000017 	ldw	r16,0(sp)
 4016700:	dec00304 	addi	sp,sp,12
 4016704:	f800283a 	ret

04016708 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4016708:	defffe04 	addi	sp,sp,-8
 401670c:	df000115 	stw	fp,4(sp)
 4016710:	df000104 	addi	fp,sp,4
 4016714:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4016718:	e0bfff17 	ldw	r2,-4(fp)
 401671c:	10bffe84 	addi	r2,r2,-6
 4016720:	10c00428 	cmpgeui	r3,r2,16
 4016724:	18001a1e 	bne	r3,zero,4016790 <alt_exception_cause_generated_bad_addr+0x88>
 4016728:	100690ba 	slli	r3,r2,2
 401672c:	00810074 	movhi	r2,1025
 4016730:	1099d004 	addi	r2,r2,26432
 4016734:	1885883a 	add	r2,r3,r2
 4016738:	10800017 	ldw	r2,0(r2)
 401673c:	1000683a 	jmp	r2
 4016740:	04016780 	call	401678 <__alt_mem_onchip_memory+0x401678>
 4016744:	04016780 	call	401678 <__alt_mem_onchip_memory+0x401678>
 4016748:	04016790 	cmplti	r16,zero,1438
 401674c:	04016790 	cmplti	r16,zero,1438
 4016750:	04016790 	cmplti	r16,zero,1438
 4016754:	04016780 	call	401678 <__alt_mem_onchip_memory+0x401678>
 4016758:	04016788 	cmpgei	r16,zero,1438
 401675c:	04016790 	cmplti	r16,zero,1438
 4016760:	04016780 	call	401678 <__alt_mem_onchip_memory+0x401678>
 4016764:	04016780 	call	401678 <__alt_mem_onchip_memory+0x401678>
 4016768:	04016790 	cmplti	r16,zero,1438
 401676c:	04016780 	call	401678 <__alt_mem_onchip_memory+0x401678>
 4016770:	04016788 	cmpgei	r16,zero,1438
 4016774:	04016790 	cmplti	r16,zero,1438
 4016778:	04016790 	cmplti	r16,zero,1438
 401677c:	04016780 	call	401678 <__alt_mem_onchip_memory+0x401678>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4016780:	00800044 	movi	r2,1
 4016784:	00000306 	br	4016794 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4016788:	0005883a 	mov	r2,zero
 401678c:	00000106 	br	4016794 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4016790:	0005883a 	mov	r2,zero
  }
}
 4016794:	e037883a 	mov	sp,fp
 4016798:	df000017 	ldw	fp,0(sp)
 401679c:	dec00104 	addi	sp,sp,4
 40167a0:	f800283a 	ret

040167a4 <atexit>:
 40167a4:	200b883a 	mov	r5,r4
 40167a8:	000f883a 	mov	r7,zero
 40167ac:	000d883a 	mov	r6,zero
 40167b0:	0009883a 	mov	r4,zero
 40167b4:	401686c1 	jmpi	401686c <__register_exitproc>

040167b8 <exit>:
 40167b8:	defffe04 	addi	sp,sp,-8
 40167bc:	000b883a 	mov	r5,zero
 40167c0:	dc000015 	stw	r16,0(sp)
 40167c4:	dfc00115 	stw	ra,4(sp)
 40167c8:	2021883a 	mov	r16,r4
 40167cc:	40169840 	call	4016984 <__call_exitprocs>
 40167d0:	008100b4 	movhi	r2,1026
 40167d4:	10a2f004 	addi	r2,r2,-29760
 40167d8:	11000017 	ldw	r4,0(r2)
 40167dc:	20800f17 	ldw	r2,60(r4)
 40167e0:	10000126 	beq	r2,zero,40167e8 <exit+0x30>
 40167e4:	103ee83a 	callr	r2
 40167e8:	8009883a 	mov	r4,r16
 40167ec:	4016b040 	call	4016b04 <_exit>

040167f0 <memcmp>:
 40167f0:	01c000c4 	movi	r7,3
 40167f4:	3980192e 	bgeu	r7,r6,401685c <memcmp+0x6c>
 40167f8:	2144b03a 	or	r2,r4,r5
 40167fc:	11c4703a 	and	r2,r2,r7
 4016800:	10000f26 	beq	r2,zero,4016840 <memcmp+0x50>
 4016804:	20800003 	ldbu	r2,0(r4)
 4016808:	28c00003 	ldbu	r3,0(r5)
 401680c:	10c0151e 	bne	r2,r3,4016864 <memcmp+0x74>
 4016810:	31bfff84 	addi	r6,r6,-2
 4016814:	01ffffc4 	movi	r7,-1
 4016818:	00000406 	br	401682c <memcmp+0x3c>
 401681c:	20800003 	ldbu	r2,0(r4)
 4016820:	28c00003 	ldbu	r3,0(r5)
 4016824:	31bfffc4 	addi	r6,r6,-1
 4016828:	10c00e1e 	bne	r2,r3,4016864 <memcmp+0x74>
 401682c:	21000044 	addi	r4,r4,1
 4016830:	29400044 	addi	r5,r5,1
 4016834:	31fff91e 	bne	r6,r7,401681c <__alt_data_end+0xfc01681c>
 4016838:	0005883a 	mov	r2,zero
 401683c:	f800283a 	ret
 4016840:	20c00017 	ldw	r3,0(r4)
 4016844:	28800017 	ldw	r2,0(r5)
 4016848:	18bfee1e 	bne	r3,r2,4016804 <__alt_data_end+0xfc016804>
 401684c:	31bfff04 	addi	r6,r6,-4
 4016850:	21000104 	addi	r4,r4,4
 4016854:	29400104 	addi	r5,r5,4
 4016858:	39bff936 	bltu	r7,r6,4016840 <__alt_data_end+0xfc016840>
 401685c:	303fe91e 	bne	r6,zero,4016804 <__alt_data_end+0xfc016804>
 4016860:	003ff506 	br	4016838 <__alt_data_end+0xfc016838>
 4016864:	10c5c83a 	sub	r2,r2,r3
 4016868:	f800283a 	ret

0401686c <__register_exitproc>:
 401686c:	defffa04 	addi	sp,sp,-24
 4016870:	dc000315 	stw	r16,12(sp)
 4016874:	040100b4 	movhi	r16,1026
 4016878:	8422f004 	addi	r16,r16,-29760
 401687c:	80c00017 	ldw	r3,0(r16)
 4016880:	dc400415 	stw	r17,16(sp)
 4016884:	dfc00515 	stw	ra,20(sp)
 4016888:	18805217 	ldw	r2,328(r3)
 401688c:	2023883a 	mov	r17,r4
 4016890:	10003726 	beq	r2,zero,4016970 <__register_exitproc+0x104>
 4016894:	10c00117 	ldw	r3,4(r2)
 4016898:	010007c4 	movi	r4,31
 401689c:	20c00e16 	blt	r4,r3,40168d8 <__register_exitproc+0x6c>
 40168a0:	1a000044 	addi	r8,r3,1
 40168a4:	8800221e 	bne	r17,zero,4016930 <__register_exitproc+0xc4>
 40168a8:	18c00084 	addi	r3,r3,2
 40168ac:	18c7883a 	add	r3,r3,r3
 40168b0:	18c7883a 	add	r3,r3,r3
 40168b4:	12000115 	stw	r8,4(r2)
 40168b8:	10c7883a 	add	r3,r2,r3
 40168bc:	19400015 	stw	r5,0(r3)
 40168c0:	0005883a 	mov	r2,zero
 40168c4:	dfc00517 	ldw	ra,20(sp)
 40168c8:	dc400417 	ldw	r17,16(sp)
 40168cc:	dc000317 	ldw	r16,12(sp)
 40168d0:	dec00604 	addi	sp,sp,24
 40168d4:	f800283a 	ret
 40168d8:	00800034 	movhi	r2,0
 40168dc:	10800004 	addi	r2,r2,0
 40168e0:	10002626 	beq	r2,zero,401697c <__register_exitproc+0x110>
 40168e4:	01006404 	movi	r4,400
 40168e8:	d9400015 	stw	r5,0(sp)
 40168ec:	d9800115 	stw	r6,4(sp)
 40168f0:	d9c00215 	stw	r7,8(sp)
 40168f4:	00000000 	call	0 <__alt_mem_onchip_memory>
 40168f8:	d9400017 	ldw	r5,0(sp)
 40168fc:	d9800117 	ldw	r6,4(sp)
 4016900:	d9c00217 	ldw	r7,8(sp)
 4016904:	10001d26 	beq	r2,zero,401697c <__register_exitproc+0x110>
 4016908:	81000017 	ldw	r4,0(r16)
 401690c:	10000115 	stw	zero,4(r2)
 4016910:	02000044 	movi	r8,1
 4016914:	22405217 	ldw	r9,328(r4)
 4016918:	0007883a 	mov	r3,zero
 401691c:	12400015 	stw	r9,0(r2)
 4016920:	20805215 	stw	r2,328(r4)
 4016924:	10006215 	stw	zero,392(r2)
 4016928:	10006315 	stw	zero,396(r2)
 401692c:	883fde26 	beq	r17,zero,40168a8 <__alt_data_end+0xfc0168a8>
 4016930:	18c9883a 	add	r4,r3,r3
 4016934:	2109883a 	add	r4,r4,r4
 4016938:	1109883a 	add	r4,r2,r4
 401693c:	21802215 	stw	r6,136(r4)
 4016940:	01800044 	movi	r6,1
 4016944:	12406217 	ldw	r9,392(r2)
 4016948:	30cc983a 	sll	r6,r6,r3
 401694c:	4992b03a 	or	r9,r9,r6
 4016950:	12406215 	stw	r9,392(r2)
 4016954:	21c04215 	stw	r7,264(r4)
 4016958:	01000084 	movi	r4,2
 401695c:	893fd21e 	bne	r17,r4,40168a8 <__alt_data_end+0xfc0168a8>
 4016960:	11006317 	ldw	r4,396(r2)
 4016964:	218cb03a 	or	r6,r4,r6
 4016968:	11806315 	stw	r6,396(r2)
 401696c:	003fce06 	br	40168a8 <__alt_data_end+0xfc0168a8>
 4016970:	18805304 	addi	r2,r3,332
 4016974:	18805215 	stw	r2,328(r3)
 4016978:	003fc606 	br	4016894 <__alt_data_end+0xfc016894>
 401697c:	00bfffc4 	movi	r2,-1
 4016980:	003fd006 	br	40168c4 <__alt_data_end+0xfc0168c4>

04016984 <__call_exitprocs>:
 4016984:	defff504 	addi	sp,sp,-44
 4016988:	df000915 	stw	fp,36(sp)
 401698c:	dd400615 	stw	r21,24(sp)
 4016990:	dc800315 	stw	r18,12(sp)
 4016994:	dfc00a15 	stw	ra,40(sp)
 4016998:	ddc00815 	stw	r23,32(sp)
 401699c:	dd800715 	stw	r22,28(sp)
 40169a0:	dd000515 	stw	r20,20(sp)
 40169a4:	dcc00415 	stw	r19,16(sp)
 40169a8:	dc400215 	stw	r17,8(sp)
 40169ac:	dc000115 	stw	r16,4(sp)
 40169b0:	d9000015 	stw	r4,0(sp)
 40169b4:	2839883a 	mov	fp,r5
 40169b8:	04800044 	movi	r18,1
 40169bc:	057fffc4 	movi	r21,-1
 40169c0:	008100b4 	movhi	r2,1026
 40169c4:	10a2f004 	addi	r2,r2,-29760
 40169c8:	12000017 	ldw	r8,0(r2)
 40169cc:	45005217 	ldw	r20,328(r8)
 40169d0:	44c05204 	addi	r19,r8,328
 40169d4:	a0001c26 	beq	r20,zero,4016a48 <__call_exitprocs+0xc4>
 40169d8:	a0800117 	ldw	r2,4(r20)
 40169dc:	15ffffc4 	addi	r23,r2,-1
 40169e0:	b8000d16 	blt	r23,zero,4016a18 <__call_exitprocs+0x94>
 40169e4:	14000044 	addi	r16,r2,1
 40169e8:	8421883a 	add	r16,r16,r16
 40169ec:	8421883a 	add	r16,r16,r16
 40169f0:	84402004 	addi	r17,r16,128
 40169f4:	a463883a 	add	r17,r20,r17
 40169f8:	a421883a 	add	r16,r20,r16
 40169fc:	e0001e26 	beq	fp,zero,4016a78 <__call_exitprocs+0xf4>
 4016a00:	80804017 	ldw	r2,256(r16)
 4016a04:	e0801c26 	beq	fp,r2,4016a78 <__call_exitprocs+0xf4>
 4016a08:	bdffffc4 	addi	r23,r23,-1
 4016a0c:	843fff04 	addi	r16,r16,-4
 4016a10:	8c7fff04 	addi	r17,r17,-4
 4016a14:	bd7ff91e 	bne	r23,r21,40169fc <__alt_data_end+0xfc0169fc>
 4016a18:	00800034 	movhi	r2,0
 4016a1c:	10800004 	addi	r2,r2,0
 4016a20:	10000926 	beq	r2,zero,4016a48 <__call_exitprocs+0xc4>
 4016a24:	a0800117 	ldw	r2,4(r20)
 4016a28:	1000301e 	bne	r2,zero,4016aec <__call_exitprocs+0x168>
 4016a2c:	a0800017 	ldw	r2,0(r20)
 4016a30:	10003226 	beq	r2,zero,4016afc <__call_exitprocs+0x178>
 4016a34:	a009883a 	mov	r4,r20
 4016a38:	98800015 	stw	r2,0(r19)
 4016a3c:	00000000 	call	0 <__alt_mem_onchip_memory>
 4016a40:	9d000017 	ldw	r20,0(r19)
 4016a44:	a03fe41e 	bne	r20,zero,40169d8 <__alt_data_end+0xfc0169d8>
 4016a48:	dfc00a17 	ldw	ra,40(sp)
 4016a4c:	df000917 	ldw	fp,36(sp)
 4016a50:	ddc00817 	ldw	r23,32(sp)
 4016a54:	dd800717 	ldw	r22,28(sp)
 4016a58:	dd400617 	ldw	r21,24(sp)
 4016a5c:	dd000517 	ldw	r20,20(sp)
 4016a60:	dcc00417 	ldw	r19,16(sp)
 4016a64:	dc800317 	ldw	r18,12(sp)
 4016a68:	dc400217 	ldw	r17,8(sp)
 4016a6c:	dc000117 	ldw	r16,4(sp)
 4016a70:	dec00b04 	addi	sp,sp,44
 4016a74:	f800283a 	ret
 4016a78:	a0800117 	ldw	r2,4(r20)
 4016a7c:	80c00017 	ldw	r3,0(r16)
 4016a80:	10bfffc4 	addi	r2,r2,-1
 4016a84:	15c01426 	beq	r2,r23,4016ad8 <__call_exitprocs+0x154>
 4016a88:	80000015 	stw	zero,0(r16)
 4016a8c:	183fde26 	beq	r3,zero,4016a08 <__alt_data_end+0xfc016a08>
 4016a90:	95c8983a 	sll	r4,r18,r23
 4016a94:	a0806217 	ldw	r2,392(r20)
 4016a98:	a5800117 	ldw	r22,4(r20)
 4016a9c:	2084703a 	and	r2,r4,r2
 4016aa0:	10000b26 	beq	r2,zero,4016ad0 <__call_exitprocs+0x14c>
 4016aa4:	a0806317 	ldw	r2,396(r20)
 4016aa8:	2088703a 	and	r4,r4,r2
 4016aac:	20000c1e 	bne	r4,zero,4016ae0 <__call_exitprocs+0x15c>
 4016ab0:	89400017 	ldw	r5,0(r17)
 4016ab4:	d9000017 	ldw	r4,0(sp)
 4016ab8:	183ee83a 	callr	r3
 4016abc:	a0800117 	ldw	r2,4(r20)
 4016ac0:	15bfbf1e 	bne	r2,r22,40169c0 <__alt_data_end+0xfc0169c0>
 4016ac4:	98800017 	ldw	r2,0(r19)
 4016ac8:	153fcf26 	beq	r2,r20,4016a08 <__alt_data_end+0xfc016a08>
 4016acc:	003fbc06 	br	40169c0 <__alt_data_end+0xfc0169c0>
 4016ad0:	183ee83a 	callr	r3
 4016ad4:	003ff906 	br	4016abc <__alt_data_end+0xfc016abc>
 4016ad8:	a5c00115 	stw	r23,4(r20)
 4016adc:	003feb06 	br	4016a8c <__alt_data_end+0xfc016a8c>
 4016ae0:	89000017 	ldw	r4,0(r17)
 4016ae4:	183ee83a 	callr	r3
 4016ae8:	003ff406 	br	4016abc <__alt_data_end+0xfc016abc>
 4016aec:	a0800017 	ldw	r2,0(r20)
 4016af0:	a027883a 	mov	r19,r20
 4016af4:	1029883a 	mov	r20,r2
 4016af8:	003fb606 	br	40169d4 <__alt_data_end+0xfc0169d4>
 4016afc:	0005883a 	mov	r2,zero
 4016b00:	003ffb06 	br	4016af0 <__alt_data_end+0xfc016af0>

04016b04 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4016b04:	defffd04 	addi	sp,sp,-12
 4016b08:	df000215 	stw	fp,8(sp)
 4016b0c:	df000204 	addi	fp,sp,8
 4016b10:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4016b14:	0001883a 	nop
 4016b18:	e0bfff17 	ldw	r2,-4(fp)
 4016b1c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4016b20:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4016b24:	10000226 	beq	r2,zero,4016b30 <_exit+0x2c>
    ALT_SIM_FAIL();
 4016b28:	002af070 	cmpltui	zero,zero,43969
 4016b2c:	00000106 	br	4016b34 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4016b30:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4016b34:	003fff06 	br	4016b34 <__alt_data_end+0xfc016b34>
